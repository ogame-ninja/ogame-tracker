/*! For license information please see service-worker.js.LICENSE.txt */
(()=>{var e={932:(e,t,r)=>{"use strict";const a=r(501),n=r(844),o=r(192);e.exports={XMLParser:n,XMLValidator:a,XMLBuilder:o}},849:(e,t)=>{"use strict";const r="[:A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*",a=new RegExp("^"+r+"$");t.isExist=function(e){return void 0!==e},t.isEmptyObject=function(e){return 0===Object.keys(e).length},t.merge=function(e,t,r){if(t){const a=Object.keys(t),n=a.length;for(let o=0;o<n;o++)e[a[o]]="strict"===r?[t[a[o]]]:t[a[o]]}},t.getValue=function(e){return t.isExist(e)?e:""},t.isName=function(e){return!(null==a.exec(e))},t.getAllMatches=function(e,t){const r=[];let a=t.exec(e);for(;a;){const n=[];n.startIndex=t.lastIndex-a[0].length;const o=a.length;for(let e=0;e<o;e++)n.push(a[e]);r.push(n),a=t.exec(e)}return r},t.nameRegexp=r},501:(e,t,r)=>{"use strict";const a=r(849),n={allowBooleanAttributes:!1,unpairedTags:[]};function o(e){return" "===e||"\t"===e||"\n"===e||"\r"===e}function i(e,t){const r=t;for(;t<e.length;t++)if("?"!=e[t]&&" "!=e[t]);else{const a=e.substr(r,t-r);if(t>5&&"xml"===a)return m("InvalidXml","XML declaration allowed only at the start of the document.",h(e,t));if("?"==e[t]&&">"==e[t+1]){t++;break}}return t}function s(e,t){if(e.length>t+5&&"-"===e[t+1]&&"-"===e[t+2]){for(t+=3;t<e.length;t++)if("-"===e[t]&&"-"===e[t+1]&&">"===e[t+2]){t+=2;break}}else if(e.length>t+8&&"D"===e[t+1]&&"O"===e[t+2]&&"C"===e[t+3]&&"T"===e[t+4]&&"Y"===e[t+5]&&"P"===e[t+6]&&"E"===e[t+7]){let r=1;for(t+=8;t<e.length;t++)if("<"===e[t])r++;else if(">"===e[t]&&(r--,0===r))break}else if(e.length>t+9&&"["===e[t+1]&&"C"===e[t+2]&&"D"===e[t+3]&&"A"===e[t+4]&&"T"===e[t+5]&&"A"===e[t+6]&&"["===e[t+7])for(t+=8;t<e.length;t++)if("]"===e[t]&&"]"===e[t+1]&&">"===e[t+2]){t+=2;break}return t}function l(e,t){let r="",a="",n=!1;for(;t<e.length;t++){if('"'===e[t]||"'"===e[t])""===a?a=e[t]:a!==e[t]||(a="");else if(">"===e[t]&&""===a){n=!0;break}r+=e[t]}return""===a&&{value:r,index:t,tagClosed:n}}t.validate=function(e,t){t=Object.assign({},n,t);const r=[];let c=!1,p=!1;"\ufeff"===e[0]&&(e=e.substr(1));for(let n=0;n<e.length;n++)if("<"===e[n]&&"?"===e[n+1]){if(n+=2,n=i(e,n),n.err)return n}else{if("<"!==e[n]){if(o(e[n]))continue;return m("InvalidChar","char '"+e[n]+"' is not expected.",h(e,n))}{let g=n;if(n++,"!"===e[n]){n=s(e,n);continue}{let y=!1;"/"===e[n]&&(y=!0,n++);let v="";for(;n<e.length&&">"!==e[n]&&" "!==e[n]&&"\t"!==e[n]&&"\n"!==e[n]&&"\r"!==e[n];n++)v+=e[n];if(v=v.trim(),"/"===v[v.length-1]&&(v=v.substring(0,v.length-1),n--),f=v,!a.isName(f)){let t;return t=0===v.trim().length?"Invalid space after '<'.":"Tag '"+v+"' is an invalid name.",m("InvalidTag",t,h(e,n))}const b=l(e,n);if(!1===b)return m("InvalidAttr","Attributes for '"+v+"' have open quote.",h(e,n));let w=b.value;if(n=b.index,"/"===w[w.length-1]){const r=n-w.length;w=w.substring(0,w.length-1);const a=d(w,t);if(!0!==a)return m(a.err.code,a.err.msg,h(e,r+a.err.line));c=!0}else if(y){if(!b.tagClosed)return m("InvalidTag","Closing tag '"+v+"' doesn't have proper closing.",h(e,n));if(w.trim().length>0)return m("InvalidTag","Closing tag '"+v+"' can't have attributes or invalid starting.",h(e,g));{const t=r.pop();if(v!==t.tagName){let r=h(e,t.tagStartPos);return m("InvalidTag","Expected closing tag '"+t.tagName+"' (opened in line "+r.line+", col "+r.col+") instead of closing tag '"+v+"'.",h(e,g))}0==r.length&&(p=!0)}}else{const a=d(w,t);if(!0!==a)return m(a.err.code,a.err.msg,h(e,n-w.length+a.err.line));if(!0===p)return m("InvalidXml","Multiple possible root nodes found.",h(e,n));-1!==t.unpairedTags.indexOf(v)||r.push({tagName:v,tagStartPos:g}),c=!0}for(n++;n<e.length;n++)if("<"===e[n]){if("!"===e[n+1]){n++,n=s(e,n);continue}if("?"!==e[n+1])break;if(n=i(e,++n),n.err)return n}else if("&"===e[n]){const t=u(e,n);if(-1==t)return m("InvalidChar","char '&' is not expected.",h(e,n));n=t}else if(!0===p&&!o(e[n]))return m("InvalidXml","Extra text at the end",h(e,n));"<"===e[n]&&n--}}}var f;return c?1==r.length?m("InvalidTag","Unclosed tag '"+r[0].tagName+"'.",h(e,r[0].tagStartPos)):!(r.length>0)||m("InvalidXml","Invalid '"+JSON.stringify(r.map((e=>e.tagName)),null,4).replace(/\r?\n/g,"")+"' found.",{line:1,col:1}):m("InvalidXml","Start tag expected.",1)};const c=new RegExp("(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['\"])(([\\s\\S])*?)\\5)?","g");function d(e,t){const r=a.getAllMatches(e,c),n={};for(let e=0;e<r.length;e++){if(0===r[e][1].length)return m("InvalidAttr","Attribute '"+r[e][2]+"' has no space in starting.",f(r[e]));if(void 0!==r[e][3]&&void 0===r[e][4])return m("InvalidAttr","Attribute '"+r[e][2]+"' is without value.",f(r[e]));if(void 0===r[e][3]&&!t.allowBooleanAttributes)return m("InvalidAttr","boolean attribute '"+r[e][2]+"' is not allowed.",f(r[e]));const a=r[e][2];if(!p(a))return m("InvalidAttr","Attribute '"+a+"' is an invalid name.",f(r[e]));if(n.hasOwnProperty(a))return m("InvalidAttr","Attribute '"+a+"' is repeated.",f(r[e]));n[a]=1}return!0}function u(e,t){if(";"===e[++t])return-1;if("#"===e[t])return function(e,t){let r=/\d/;for("x"===e[t]&&(t++,r=/[\da-fA-F]/);t<e.length;t++){if(";"===e[t])return t;if(!e[t].match(r))break}return-1}(e,++t);let r=0;for(;t<e.length;t++,r++)if(!(e[t].match(/\w/)&&r<20)){if(";"===e[t])break;return-1}return t}function m(e,t,r){return{err:{code:e,msg:t,line:r.line||r,col:r.col}}}function p(e){return a.isName(e)}function h(e,t){const r=e.substring(0,t).split(/\r?\n/);return{line:r.length,col:r[r.length-1].length+1}}function f(e){return e.startIndex+e[1].length}},192:(e,t,r)=>{"use strict";const a=r(592),n={attributeNamePrefix:"@_",attributesGroupName:!1,textNodeName:"#text",ignoreAttributes:!0,cdataPropName:!1,format:!1,indentBy:"  ",suppressEmptyNode:!1,suppressUnpairedNode:!0,suppressBooleanAttributes:!0,tagValueProcessor:function(e,t){return t},attributeValueProcessor:function(e,t){return t},preserveOrder:!1,commentPropName:!1,unpairedTags:[],entities:[{regex:new RegExp("&","g"),val:"&amp;"},{regex:new RegExp(">","g"),val:"&gt;"},{regex:new RegExp("<","g"),val:"&lt;"},{regex:new RegExp("'","g"),val:"&apos;"},{regex:new RegExp('"',"g"),val:"&quot;"}],processEntities:!0,stopNodes:[]};function o(e){this.options=Object.assign({},n,e),this.options.ignoreAttributes||this.options.attributesGroupName?this.isAttribute=function(){return!1}:(this.attrPrefixLen=this.options.attributeNamePrefix.length,this.isAttribute=h),this.processTextOrObjNode=s,this.options.format?(this.indentate=p,this.tagEndChar=">\n",this.newLine="\n"):(this.indentate=function(){return""},this.tagEndChar=">",this.newLine=""),this.options.suppressEmptyNode?(this.buildTextNode=m,this.buildObjNode=c):(this.buildTextNode=d,this.buildObjNode=l),this.buildTextValNode=d,this.buildObjectNode=l,this.replaceEntitiesValue=u,this.buildAttrPairStr=i}function i(e,t){return t=this.options.attributeValueProcessor(e,""+t),t=this.replaceEntitiesValue(t),this.options.suppressBooleanAttributes&&"true"===t?" "+e:" "+e+'="'+t+'"'}function s(e,t,r){const a=this.j2x(e,r+1);return void 0!==e[this.options.textNodeName]&&1===Object.keys(e).length?this.buildTextNode(e[this.options.textNodeName],t,a.attrStr,r):this.buildObjNode(a.val,t,a.attrStr,r)}function l(e,t,r,a){let n="</"+t+this.tagEndChar,o="";return"?"===t[0]&&(o="?",n=""),r&&-1===e.indexOf("<")?this.indentate(a)+"<"+t+r+o+">"+e+n:!1!==this.options.commentPropName&&t===this.options.commentPropName&&0===o.length?this.indentate(a)+`\x3c!--${e}--\x3e`+this.newLine:this.indentate(a)+"<"+t+r+o+this.tagEndChar+e+this.indentate(a)+n}function c(e,t,r,a){return""!==e?this.buildObjectNode(e,t,r,a):"?"===t[0]?this.indentate(a)+"<"+t+r+"?"+this.tagEndChar:this.indentate(a)+"<"+t+r+"/"+this.tagEndChar}function d(e,t,r,a){if(!1!==this.options.cdataPropName&&t===this.options.cdataPropName)return this.indentate(a)+`<![CDATA[${e}]]>`+this.newLine;if(!1!==this.options.commentPropName&&t===this.options.commentPropName)return this.indentate(a)+`\x3c!--${e}--\x3e`+this.newLine;{let n=this.options.tagValueProcessor(t,e);return n=this.replaceEntitiesValue(n),""===n&&-1!==this.options.unpairedTags.indexOf(t)?this.options.suppressUnpairedNode?this.indentate(a)+"<"+t+this.tagEndChar:this.indentate(a)+"<"+t+"/"+this.tagEndChar:this.indentate(a)+"<"+t+r+">"+n+"</"+t+this.tagEndChar}}function u(e){if(e&&e.length>0&&this.options.processEntities)for(let t=0;t<this.options.entities.length;t++){const r=this.options.entities[t];e=e.replace(r.regex,r.val)}return e}function m(e,t,r,a){return""===e&&-1!==this.options.unpairedTags.indexOf(t)?this.options.suppressUnpairedNode?this.indentate(a)+"<"+t+this.tagEndChar:this.indentate(a)+"<"+t+"/"+this.tagEndChar:""!==e?this.buildTextValNode(e,t,r,a):"?"===t[0]?this.indentate(a)+"<"+t+r+"?"+this.tagEndChar:this.indentate(a)+"<"+t+r+"/"+this.tagEndChar}function p(e){return this.options.indentBy.repeat(e)}function h(e){return!!e.startsWith(this.options.attributeNamePrefix)&&e.substr(this.attrPrefixLen)}o.prototype.build=function(e){return this.options.preserveOrder?a(e,this.options):(Array.isArray(e)&&this.options.arrayNodeName&&this.options.arrayNodeName.length>1&&(e={[this.options.arrayNodeName]:e}),this.j2x(e,0).val)},o.prototype.j2x=function(e,t){let r="",a="";for(let n in e)if(void 0===e[n]);else if(null===e[n])"?"===n[0]?a+=this.indentate(t)+"<"+n+"?"+this.tagEndChar:a+=this.indentate(t)+"<"+n+"/"+this.tagEndChar;else if(e[n]instanceof Date)a+=this.buildTextNode(e[n],n,"",t);else if("object"!=typeof e[n]){const o=this.isAttribute(n);if(o)r+=this.buildAttrPairStr(o,""+e[n]);else if(n===this.options.textNodeName){let t=this.options.tagValueProcessor(n,""+e[n]);a+=this.replaceEntitiesValue(t)}else a+=this.buildTextNode(e[n],n,"",t)}else if(Array.isArray(e[n])){const r=e[n].length;for(let o=0;o<r;o++){const r=e[n][o];void 0===r||(null===r?"?"===n[0]?a+=this.indentate(t)+"<"+n+"?"+this.tagEndChar:a+=this.indentate(t)+"<"+n+"/"+this.tagEndChar:a+="object"==typeof r?this.processTextOrObjNode(r,n,t):this.buildTextNode(r,n,"",t))}}else if(this.options.attributesGroupName&&n===this.options.attributesGroupName){const t=Object.keys(e[n]),a=t.length;for(let o=0;o<a;o++)r+=this.buildAttrPairStr(t[o],""+e[n][t[o]])}else a+=this.processTextOrObjNode(e[n],n,t);return{attrStr:r,val:a}},e.exports=o},592:e=>{function t(e,i,s,l){let c="",d="";i.format&&i.indentBy.length>0&&(d="\n"+i.indentBy.repeat(l));for(let u=0;u<e.length;u++){const m=e[u],p=r(m);let h="";if(h=0===s.length?p:`${s}.${p}`,p===i.textNodeName){let e=m[p];n(h,i)||(e=i.tagValueProcessor(p,e),e=o(e,i)),c+=d+e;continue}if(p===i.cdataPropName){c+=d+`<![CDATA[${m[p][0][i.textNodeName]}]]>`;continue}if(p===i.commentPropName){c+=d+`\x3c!--${m[p][0][i.textNodeName]}--\x3e`;continue}if("?"===p[0]){const e=a(m[":@"],i),t="?xml"===p?"":d;let r=m[p][0][i.textNodeName];r=0!==r.length?" "+r:"",c+=t+`<${p}${r}${e}?>`;continue}let f=d+`<${p}${a(m[":@"],i)}`,g=t(m[p],i,h,l+1);-1!==i.unpairedTags.indexOf(p)?i.suppressUnpairedNode?c+=f+">":c+=f+"/>":g&&0!==g.length||!i.suppressEmptyNode?c+=f+`>${g}${d}</${p}>`:c+=f+"/>"}return c}function r(e){const t=Object.keys(e);for(let e=0;e<t.length;e++){const r=t[e];if(":@"!==r)return r}}function a(e,t){let r="";if(e&&!t.ignoreAttributes)for(let a in e){let n=t.attributeValueProcessor(a,e[a]);n=o(n,t),!0===n&&t.suppressBooleanAttributes?r+=` ${a.substr(t.attributeNamePrefix.length)}`:r+=` ${a.substr(t.attributeNamePrefix.length)}="${n}"`}return r}function n(e,t){let r=(e=e.substr(0,e.length-t.textNodeName.length-1)).substr(e.lastIndexOf(".")+1);for(let a in t.stopNodes)if(t.stopNodes[a]===e||t.stopNodes[a]==="*."+r)return!0;return!1}function o(e,t){if(e&&e.length>0&&t.processEntities)for(let r=0;r<t.entities.length;r++){const a=t.entities[r];e=e.replace(a.regex,a.val)}return e}e.exports=function(e,r){return t(e,r,"",0)}},780:e=>{const t=RegExp("^\\s([a-zA-z0-0]+)[ \t](['\"])([^&]+)\\2");function r(e,r){const a=t.exec(e);a&&(r[a[1]]={regx:RegExp(`&${a[1]};`,"g"),val:a[3]})}e.exports=function(e,t){const a={};if("O"!==e[t+3]||"C"!==e[t+4]||"T"!==e[t+5]||"Y"!==e[t+6]||"P"!==e[t+7]||"E"!==e[t+8])throw new Error("Invalid Tag instead of DOCTYPE");{t+=9;let n=1,o=!1,i=!1,s=!1,l="";for(;t<e.length;t++)if("<"===e[t]){if(o&&"!"===e[t+1]&&"E"===e[t+2]&&"N"===e[t+3]&&"T"===e[t+4]&&"I"===e[t+5]&&"T"===e[t+6]&&"Y"===e[t+7])t+=7,i=!0;else if(o&&"!"===e[t+1]&&"E"===e[t+2]&&"L"===e[t+3]&&"E"===e[t+4]&&"M"===e[t+5]&&"E"===e[t+6]&&"N"===e[t+7]&&"T"===e[t+8])t+=8;else{if("!"!==e[t+1]||"-"!==e[t+2]||"-"!==e[t+3])throw new Error("Invalid DOCTYPE");s=!0}n++,l=""}else if(">"===e[t]){if(s){if("-"!==e[t-1]||"-"!==e[t-2])throw new Error("Invalid XML comment in DOCTYPE");s=!1}else i&&(r(l,a),i=!1);if(n--,0===n)break}else"["===e[t]?o=!0:l+=e[t];if(0!==n)throw new Error("Unclosed DOCTYPE")}return{entities:a,i:t}}},745:(e,t)=>{const r={preserveOrder:!1,attributeNamePrefix:"@_",attributesGroupName:!1,textNodeName:"#text",ignoreAttributes:!0,removeNSPrefix:!1,allowBooleanAttributes:!1,parseTagValue:!0,parseAttributeValue:!1,trimValues:!0,cdataPropName:!1,numberParseOptions:{hex:!0,leadingZeros:!0},tagValueProcessor:function(e,t){return t},attributeValueProcessor:function(e,t){return t},stopNodes:[],alwaysCreateTextNode:!1,isArray:()=>!1,commentPropName:!1,unpairedTags:[],processEntities:!0,htmlEntities:!1,ignoreDeclaration:!1,ignorePiTags:!1};t.buildOptions=function(e){return Object.assign({},r,e)},t.defaultOptions=r},78:(e,t,r)=>{"use strict";const a=r(849),n=r(311),o=r(780),i=r(153);function s(e){const t=Object.keys(e);for(let r=0;r<t.length;r++){const a=t[r];this.lastEntities[a]={regex:new RegExp("&"+a+";","g"),val:e[a]}}}function l(e,t,r,a,n,o,i){if(void 0!==e&&(this.options.trimValues&&!a&&(e=e.trim()),e.length>0)){i||(e=this.replaceEntitiesValue(e));const a=this.options.tagValueProcessor(t,e,r,n,o);return null==a?e:typeof a!=typeof e||a!==e?a:this.options.trimValues||e.trim()===e?b(e,this.options.parseTagValue,this.options.numberParseOptions):e}}function c(e){if(this.options.removeNSPrefix){const t=e.split(":"),r="/"===e.charAt(0)?"/":"";if("xmlns"===t[0])return"";2===t.length&&(e=r+t[1])}return e}"<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g,a.nameRegexp);const d=new RegExp("([^\\s=]+)\\s*(=\\s*(['\"])([\\s\\S]*?)\\3)?","gm");function u(e,t){if(!this.options.ignoreAttributes&&"string"==typeof e){const r=a.getAllMatches(e,d),n=r.length,o={};for(let e=0;e<n;e++){const a=this.resolveNameSpace(r[e][1]);let n=r[e][4];const i=this.options.attributeNamePrefix+a;if(a.length)if(void 0!==n){this.options.trimValues&&(n=n.trim()),n=this.replaceEntitiesValue(n);const e=this.options.attributeValueProcessor(a,n,t);o[i]=null==e?n:typeof e!=typeof n||e!==n?e:b(n,this.options.parseAttributeValue,this.options.numberParseOptions)}else this.options.allowBooleanAttributes&&(o[i]=!0)}if(!Object.keys(o).length)return;if(this.options.attributesGroupName){const e={};return e[this.options.attributesGroupName]=o,e}return o}}const m=function(e){e=e.replace(/\r\n?/g,"\n");const t=new n("!xml");let r=t,a="",i="";for(let s=0;s<e.length;s++)if("<"===e[s])if("/"===e[s+1]){const t=g(e,">",s,"Closing Tag is not closed.");let n=e.substring(s+2,t).trim();if(this.options.removeNSPrefix){const e=n.indexOf(":");-1!==e&&(n=n.substr(e+1))}r&&(a=this.saveTextToParentTag(a,r,i)),i=i.substr(0,i.lastIndexOf(".")),r=this.tagsNodeStack.pop(),a="",s=t}else if("?"===e[s+1]){let t=y(e,s,!1,"?>");if(!t)throw new Error("Pi Tag is not closed.");if(a=this.saveTextToParentTag(a,r,i),this.options.ignoreDeclaration&&"?xml"===t.tagName||this.options.ignorePiTags);else{const e=new n(t.tagName);e.add(this.options.textNodeName,""),t.tagName!==t.tagExp&&t.attrExpPresent&&(e[":@"]=this.buildAttributesMap(t.tagExp,i)),r.addChild(e)}s=t.closeIndex+1}else if("!--"===e.substr(s+1,3)){const t=g(e,"--\x3e",s+4,"Comment is not closed.");if(this.options.commentPropName){const n=e.substring(s+4,t-2);a=this.saveTextToParentTag(a,r,i),r.add(this.options.commentPropName,[{[this.options.textNodeName]:n}])}s=t}else if("!D"===e.substr(s+1,2)){const t=o(e,s);this.docTypeEntities=t.entities,s=t.i}else if("!["===e.substr(s+1,2)){const t=g(e,"]]>",s,"CDATA is not closed.")-2,n=e.substring(s+9,t);if(a=this.saveTextToParentTag(a,r,i),this.options.cdataPropName)r.add(this.options.cdataPropName,[{[this.options.textNodeName]:n}]);else{let e=this.parseTextData(n,r.tagname,i,!0,!1,!0);e||(e=""),r.add(this.options.textNodeName,e)}s=t+2}else{let o=y(e,s,this.options.removeNSPrefix),l=o.tagName,c=o.tagExp,d=o.attrExpPresent,u=o.closeIndex;r&&a&&"!xml"!==r.tagname&&(a=this.saveTextToParentTag(a,r,i,!1)),l!==t.tagname&&(i+=i?"."+l:l);const m=r;if(m&&-1!==this.options.unpairedTags.indexOf(m.tagname)&&(r=this.tagsNodeStack.pop()),this.isItStopNode(this.options.stopNodes,i,l)){let t="";if(c.length>0&&c.lastIndexOf("/")===c.length-1)s=o.closeIndex;else if(-1!==this.options.unpairedTags.indexOf(l))s=o.closeIndex;else{const r=this.readStopNodeData(e,l,u+1);if(!r)throw new Error(`Unexpected end of ${l}`);s=r.i,t=r.tagContent}const a=new n(l);l!==c&&d&&(a[":@"]=this.buildAttributesMap(c,i)),t&&(t=this.parseTextData(t,l,i,!0,d,!0,!0)),i=i.substr(0,i.lastIndexOf(".")),a.add(this.options.textNodeName,t),r.addChild(a)}else{if(c.length>0&&c.lastIndexOf("/")===c.length-1){"/"===l[l.length-1]?(l=l.substr(0,l.length-1),c=l):c=c.substr(0,c.length-1);const e=new n(l);l!==c&&d&&(e[":@"]=this.buildAttributesMap(c,i)),i=i.substr(0,i.lastIndexOf(".")),r.addChild(e)}else{const e=new n(l);this.tagsNodeStack.push(r),l!==c&&d&&(e[":@"]=this.buildAttributesMap(c,i)),r.addChild(e),r=e}a="",s=u}}else a+=e[s];return t.child},p=function(e){if(this.options.processEntities){for(let t in this.docTypeEntities){const r=this.docTypeEntities[t];e=e.replace(r.regx,r.val)}for(let t in this.lastEntities){const r=this.lastEntities[t];e=e.replace(r.regex,r.val)}if(this.options.htmlEntities)for(let t in this.htmlEntities){const r=this.htmlEntities[t];e=e.replace(r.regex,r.val)}}return e};function h(e,t,r,a){return e&&(void 0===a&&(a=0===Object.keys(t.child).length),void 0!==(e=this.parseTextData(e,t.tagname,r,!1,!!t[":@"]&&0!==Object.keys(t[":@"]).length,a))&&""!==e&&t.add(this.options.textNodeName,e),e=""),e}function f(e,t,r){const a="*."+r;for(const r in e){const n=e[r];if(a===n||t===n)return!0}return!1}function g(e,t,r,a){const n=e.indexOf(t,r);if(-1===n)throw new Error(a);return n+t.length-1}function y(e,t,r,a=">"){const n=function(e,t,r=">"){let a,n="";for(let o=t;o<e.length;o++){let t=e[o];if(a)t===a&&(a="");else if('"'===t||"'"===t)a=t;else if(t===r[0]){if(!r[1])return{data:n,index:o};if(e[o+1]===r[1])return{data:n,index:o}}else"\t"===t&&(t=" ");n+=t}}(e,t+1,a);if(!n)return;let o=n.data;const i=n.index,s=o.search(/\s/);let l=o,c=!0;if(-1!==s&&(l=o.substr(0,s).replace(/\s\s*$/,""),o=o.substr(s+1)),r){const e=l.indexOf(":");-1!==e&&(l=l.substr(e+1),c=l!==n.data.substr(e+1))}return{tagName:l,tagExp:o,closeIndex:i,attrExpPresent:c}}function v(e,t,r){const a=r;for(;r<e.length;r++)if("<"===e[r]&&"/"===e[r+1]){const n=g(e,">",r,`${t} is not closed`);if(e.substring(r+2,n).trim()===t)return{tagContent:e.substring(a,r),i:n};r=n}}function b(e,t,r){if(t&&"string"==typeof e){const t=e.trim();return"true"===t||"false"!==t&&i(e,r)}return a.isExist(e)?e:""}e.exports=class{constructor(e){this.options=e,this.currentNode=null,this.tagsNodeStack=[],this.docTypeEntities={},this.lastEntities={amp:{regex:/&(amp|#38|#x26);/g,val:"&"},apos:{regex:/&(apos|#39|#x27);/g,val:"'"},gt:{regex:/&(gt|#62|#x3E);/g,val:">"},lt:{regex:/&(lt|#60|#x3C);/g,val:"<"},quot:{regex:/&(quot|#34|#x22);/g,val:'"'}},this.htmlEntities={space:{regex:/&(nbsp|#160);/g,val:" "},cent:{regex:/&(cent|#162);/g,val:"¢"},pound:{regex:/&(pound|#163);/g,val:"£"},yen:{regex:/&(yen|#165);/g,val:"¥"},euro:{regex:/&(euro|#8364);/g,val:"€"},copyright:{regex:/&(copy|#169);/g,val:"©"},reg:{regex:/&(reg|#174);/g,val:"®"},inr:{regex:/&(inr|#8377);/g,val:"₹"}},this.addExternalEntities=s,this.parseXml=m,this.parseTextData=l,this.resolveNameSpace=c,this.buildAttributesMap=u,this.isItStopNode=f,this.replaceEntitiesValue=p,this.readStopNodeData=v,this.saveTextToParentTag=h}}},844:(e,t,r)=>{const{buildOptions:a}=r(745),n=r(78),{prettify:o}=r(997),i=r(501);e.exports=class{constructor(e){this.externalEntities={},this.options=a(e)}parse(e,t){if("string"==typeof e);else{if(!e.toString)throw new Error("XML data is accepted in String or Bytes[] form.");e=e.toString()}if(t){!0===t&&(t={});const r=i.validate(e,t);if(!0!==r)throw Error(`${r.err.msg}:${r.err.line}:${r.err.col}`)}const r=new n(this.options);r.addExternalEntities(this.externalEntities);const a=r.parseXml(e);return this.options.preserveOrder||void 0===a?a:o(a,this.options)}addEntity(e,t){if(-1!==t.indexOf("&"))throw new Error("Entity value can't have '&'");if(-1!==e.indexOf("&")||-1!==e.indexOf(";"))throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");this.externalEntities[e]=t}}},997:(e,t)=>{"use strict";function r(e,t,i){let s;const l={};for(let c=0;c<e.length;c++){const d=e[c],u=a(d);let m="";if(m=void 0===i?u:i+"."+u,u===t.textNodeName)void 0===s?s=d[u]:s+=""+d[u];else{if(void 0===u)continue;if(d[u]){let e=r(d[u],t,m);const a=o(e,t);d[":@"]?n(e,d[":@"],m,t):1!==Object.keys(e).length||void 0===e[t.textNodeName]||t.alwaysCreateTextNode?0===Object.keys(e).length&&(t.alwaysCreateTextNode?e[t.textNodeName]="":e=""):e=e[t.textNodeName],void 0!==l[u]?(Array.isArray(l[u])||(l[u]=[l[u]]),l[u].push(e)):t.isArray(u,m,a)?l[u]=[e]:l[u]=e}}}return"string"==typeof s?s.length>0&&(l[t.textNodeName]=s):void 0!==s&&(l[t.textNodeName]=s),l}function a(e){const t=Object.keys(e);for(let e=0;e<t.length;e++){const r=t[e];if(":@"!==r)return r}}function n(e,t,r,a){if(t){const n=Object.keys(t),o=n.length;for(let i=0;i<o;i++){const o=n[i];a.isArray(o,r+"."+o,!0,!0)?e[o]=[t[o]]:e[o]=t[o]}}}function o(e,t){const r=Object.keys(e).length;return!!(0===r||1===r&&e[t.textNodeName])}t.prettify=function(e,t){return r(e,t)}},311:e=>{"use strict";e.exports=class{constructor(e){this.tagname=e,this.child=[],this[":@"]={}}add(e,t){this.child.push({[e]:t})}addChild(e){e[":@"]&&Object.keys(e[":@"]).length>0?this.child.push({[e.tagname]:e.child,":@":e[":@"]}):this.child.push({[e.tagname]:e.child})}}},153:e=>{const t=/^[-+]?0x[a-fA-F0-9]+$/,r=/^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;!Number.parseInt&&window.parseInt&&(Number.parseInt=window.parseInt),!Number.parseFloat&&window.parseFloat&&(Number.parseFloat=window.parseFloat);const a={hex:!0,leadingZeros:!0,decimalPoint:".",eNotation:!0};e.exports=function(e,n={}){if(n=Object.assign({},a,n),!e||"string"!=typeof e)return e;let o=e.trim();if(void 0!==n.skipLike&&n.skipLike.test(o))return e;if(n.hex&&t.test(o))return Number.parseInt(o,16);{const t=r.exec(o);if(t){const r=t[1],a=t[2];let s=(i=t[3])&&-1!==i.indexOf(".")?("."===(i=i.replace(/0+$/,""))?i="0":"."===i[0]?i="0"+i:"."===i[i.length-1]&&(i=i.substr(0,i.length-1)),i):i;const l=t[4]||t[6];if(!n.leadingZeros&&a.length>0&&r&&"."!==o[2])return e;if(!n.leadingZeros&&a.length>0&&!r&&"."!==o[1])return e;{const t=Number(o),i=""+t;return-1!==i.search(/[eE]/)||l?n.eNotation?t:e:-1!==o.indexOf(".")?"0"===i&&""===s||i===s||r&&i==="-"+s?t:e:a?s===i||r+s===i?t:e:o===i||o===r+i?t:e}}return e}var i}}},t={};function r(a){var n=t[a];if(void 0!==n)return n.exports;var o=t[a]={exports:{}};return e[a](o,o.exports,r),o.exports}r.d=(e,t)=>{for(var a in t)r.o(t,a)&&!r.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var a={};(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(t){return e(1,arguments),t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)}function n(t){e(1,arguments);var r=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===r?new Date(t.getTime()):"number"==typeof t||"[object Number]"===r?new Date(t):("string"!=typeof t&&"[object String]"!==r||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function o(r){if(e(1,arguments),!t(r)&&"number"!=typeof r)return!1;var a=n(r);return!isNaN(Number(a))}r.d(a,{j:()=>Xl});var i={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function s(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=t.width?String(t.width):e.defaultWidth,a=e.formats[r]||e.formats[e.defaultWidth];return a}}const l={date:s({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:s({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:s({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var c={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function d(e){return function(t,r){var a,n=r||{};if("formatting"===(n.context?String(n.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,i=n.width?String(n.width):o;a=e.formattingValues[i]||e.formattingValues[o]}else{var s=e.defaultWidth,l=n.width?String(n.width):e.defaultWidth;a=e.values[l]||e.values[s]}return a[e.argumentCallback?e.argumentCallback(t):t]}}const u={ordinalNumber:function(e,t){var r=Number(e),a=r%100;if(a>20||a<10)switch(a%10){case 1:return r+"st";case 2:return r+"nd";case 3:return r+"rd"}return r+"th"},era:d({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:d({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:d({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:d({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:d({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function m(e){return function(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=r.width,n=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],o=t.match(n);if(!o)return null;var i,s=o[0],l=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(l)?h(l,(function(e){return e.test(s)})):p(l,(function(e){return e.test(s)}));i=e.valueCallback?e.valueCallback(c):c,i=r.valueCallback?r.valueCallback(i):i;var d=t.slice(s.length);return{value:i,rest:d}}}function p(e,t){for(var r in e)if(e.hasOwnProperty(r)&&t(e[r]))return r}function h(e,t){for(var r=0;r<e.length;r++)if(t(e[r]))return r}var f,g={ordinalNumber:(f={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=e.match(f.matchPattern);if(!r)return null;var a=r[0],n=e.match(f.parsePattern);if(!n)return null;var o=f.valueCallback?f.valueCallback(n[0]):n[0];o=t.valueCallback?t.valueCallback(o):o;var i=e.slice(a.length);return{value:o,rest:i}}),era:m({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:m({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:m({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:m({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:m({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const y={code:"en-US",formatDistance:function(e,t,r){var a,n=i[e];return a="string"==typeof n?n:1===t?n.one:n.other.replace("{{count}}",t.toString()),null!=r&&r.addSuffix?r.comparison&&r.comparison>0?"in "+a:a+" ago":a},formatLong:l,formatRelative:function(e,t,r,a){return c[e]},localize:u,match:g,options:{weekStartsOn:0,firstWeekContainsDate:1}};function v(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function b(t,r){e(2,arguments);var a=n(t).getTime(),o=v(r);return new Date(a+o)}function w(t,r){e(2,arguments);var a=v(r);return b(t,-a)}var x=864e5;function S(t){e(1,arguments);var r=1,a=n(t),o=a.getUTCDay(),i=(o<r?7:0)+o-r;return a.setUTCDate(a.getUTCDate()-i),a.setUTCHours(0,0,0,0),a}function k(t){e(1,arguments);var r=n(t),a=r.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(a+1,0,4),o.setUTCHours(0,0,0,0);var i=S(o),s=new Date(0);s.setUTCFullYear(a,0,4),s.setUTCHours(0,0,0,0);var l=S(s);return r.getTime()>=i.getTime()?a+1:r.getTime()>=l.getTime()?a:a-1}function C(t){e(1,arguments);var r=k(t),a=new Date(0);a.setUTCFullYear(r,0,4),a.setUTCHours(0,0,0,0);var n=S(a);return n}var T=6048e5;function P(t,r){e(1,arguments);var a=r||{},o=a.locale,i=o&&o.options&&o.options.weekStartsOn,s=null==i?0:v(i),l=null==a.weekStartsOn?s:v(a.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=n(t),d=c.getUTCDay(),u=(d<l?7:0)+d-l;return c.setUTCDate(c.getUTCDate()-u),c.setUTCHours(0,0,0,0),c}function D(t,r){e(1,arguments);var a=n(t),o=a.getUTCFullYear(),i=r||{},s=i.locale,l=s&&s.options&&s.options.firstWeekContainsDate,c=null==l?1:v(l),d=null==i.firstWeekContainsDate?c:v(i.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=new Date(0);u.setUTCFullYear(o+1,0,d),u.setUTCHours(0,0,0,0);var m=P(u,r),p=new Date(0);p.setUTCFullYear(o,0,d),p.setUTCHours(0,0,0,0);var h=P(p,r);return a.getTime()>=m.getTime()?o+1:a.getTime()>=h.getTime()?o:o-1}function E(t,r){e(1,arguments);var a=r||{},n=a.locale,o=n&&n.options&&n.options.firstWeekContainsDate,i=null==o?1:v(o),s=null==a.firstWeekContainsDate?i:v(a.firstWeekContainsDate),l=D(t,r),c=new Date(0);c.setUTCFullYear(l,0,s),c.setUTCHours(0,0,0,0);var d=P(c,r);return d}var M=6048e5;function A(e,t){for(var r=e<0?"-":"",a=Math.abs(e).toString();a.length<t;)a="0"+a;return r+a}const F=function(e,t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return A("yy"===t?a%100:a,t.length)},I=function(e,t){var r=e.getUTCMonth();return"M"===t?String(r+1):A(r+1,2)},R=function(e,t){return A(e.getUTCDate(),t.length)},O=function(e,t){return A(e.getUTCHours()%12||12,t.length)},L=function(e,t){return A(e.getUTCHours(),t.length)},$=function(e,t){return A(e.getUTCMinutes(),t.length)},N=function(e,t){return A(e.getUTCSeconds(),t.length)},_=function(e,t){var r=t.length,a=e.getUTCMilliseconds();return A(Math.floor(a*Math.pow(10,r-3)),t.length)};function B(e,t){var r=e>0?"-":"+",a=Math.abs(e),n=Math.floor(a/60),o=a%60;if(0===o)return r+String(n);var i=t||"";return r+String(n)+i+A(o,2)}function z(e,t){return e%60==0?(e>0?"-":"+")+A(Math.abs(e)/60,2):U(e,t)}function U(e,t){var r=t||"",a=e>0?"-":"+",n=Math.abs(e);return a+A(Math.floor(n/60),2)+r+A(n%60,2)}const j={G:function(e,t,r){var a=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return r.era(a,{width:"abbreviated"});case"GGGGG":return r.era(a,{width:"narrow"});default:return r.era(a,{width:"wide"})}},y:function(e,t,r){if("yo"===t){var a=e.getUTCFullYear(),n=a>0?a:1-a;return r.ordinalNumber(n,{unit:"year"})}return F(e,t)},Y:function(e,t,r,a){var n=D(e,a),o=n>0?n:1-n;return"YY"===t?A(o%100,2):"Yo"===t?r.ordinalNumber(o,{unit:"year"}):A(o,t.length)},R:function(e,t){return A(k(e),t.length)},u:function(e,t){return A(e.getUTCFullYear(),t.length)},Q:function(e,t,r){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(a);case"QQ":return A(a,2);case"Qo":return r.ordinalNumber(a,{unit:"quarter"});case"QQQ":return r.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return r.quarter(a,{width:"narrow",context:"formatting"});default:return r.quarter(a,{width:"wide",context:"formatting"})}},q:function(e,t,r){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(a);case"qq":return A(a,2);case"qo":return r.ordinalNumber(a,{unit:"quarter"});case"qqq":return r.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return r.quarter(a,{width:"narrow",context:"standalone"});default:return r.quarter(a,{width:"wide",context:"standalone"})}},M:function(e,t,r){var a=e.getUTCMonth();switch(t){case"M":case"MM":return I(e,t);case"Mo":return r.ordinalNumber(a+1,{unit:"month"});case"MMM":return r.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return r.month(a,{width:"narrow",context:"formatting"});default:return r.month(a,{width:"wide",context:"formatting"})}},L:function(e,t,r){var a=e.getUTCMonth();switch(t){case"L":return String(a+1);case"LL":return A(a+1,2);case"Lo":return r.ordinalNumber(a+1,{unit:"month"});case"LLL":return r.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return r.month(a,{width:"narrow",context:"standalone"});default:return r.month(a,{width:"wide",context:"standalone"})}},w:function(t,r,a,o){var i=function(t,r){e(1,arguments);var a=n(t),o=P(a,r).getTime()-E(a,r).getTime();return Math.round(o/M)+1}(t,o);return"wo"===r?a.ordinalNumber(i,{unit:"week"}):A(i,r.length)},I:function(t,r,a){var o=function(t){e(1,arguments);var r=n(t),a=S(r).getTime()-C(r).getTime();return Math.round(a/T)+1}(t);return"Io"===r?a.ordinalNumber(o,{unit:"week"}):A(o,r.length)},d:function(e,t,r){return"do"===t?r.ordinalNumber(e.getUTCDate(),{unit:"date"}):R(e,t)},D:function(t,r,a){var o=function(t){e(1,arguments);var r=n(t),a=r.getTime();r.setUTCMonth(0,1),r.setUTCHours(0,0,0,0);var o=r.getTime(),i=a-o;return Math.floor(i/x)+1}(t);return"Do"===r?a.ordinalNumber(o,{unit:"dayOfYear"}):A(o,r.length)},E:function(e,t,r){var a=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return r.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return r.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return r.day(a,{width:"short",context:"formatting"});default:return r.day(a,{width:"wide",context:"formatting"})}},e:function(e,t,r,a){var n=e.getUTCDay(),o=(n-a.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return A(o,2);case"eo":return r.ordinalNumber(o,{unit:"day"});case"eee":return r.day(n,{width:"abbreviated",context:"formatting"});case"eeeee":return r.day(n,{width:"narrow",context:"formatting"});case"eeeeee":return r.day(n,{width:"short",context:"formatting"});default:return r.day(n,{width:"wide",context:"formatting"})}},c:function(e,t,r,a){var n=e.getUTCDay(),o=(n-a.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return A(o,t.length);case"co":return r.ordinalNumber(o,{unit:"day"});case"ccc":return r.day(n,{width:"abbreviated",context:"standalone"});case"ccccc":return r.day(n,{width:"narrow",context:"standalone"});case"cccccc":return r.day(n,{width:"short",context:"standalone"});default:return r.day(n,{width:"wide",context:"standalone"})}},i:function(e,t,r){var a=e.getUTCDay(),n=0===a?7:a;switch(t){case"i":return String(n);case"ii":return A(n,t.length);case"io":return r.ordinalNumber(n,{unit:"day"});case"iii":return r.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return r.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return r.day(a,{width:"short",context:"formatting"});default:return r.day(a,{width:"wide",context:"formatting"})}},a:function(e,t,r){var a=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return r.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return r.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return r.dayPeriod(a,{width:"narrow",context:"formatting"});default:return r.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(e,t,r){var a,n=e.getUTCHours();switch(a=12===n?"noon":0===n?"midnight":n/12>=1?"pm":"am",t){case"b":case"bb":return r.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return r.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return r.dayPeriod(a,{width:"narrow",context:"formatting"});default:return r.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(e,t,r){var a,n=e.getUTCHours();switch(a=n>=17?"evening":n>=12?"afternoon":n>=4?"morning":"night",t){case"B":case"BB":case"BBB":return r.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return r.dayPeriod(a,{width:"narrow",context:"formatting"});default:return r.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(e,t,r){if("ho"===t){var a=e.getUTCHours()%12;return 0===a&&(a=12),r.ordinalNumber(a,{unit:"hour"})}return O(e,t)},H:function(e,t,r){return"Ho"===t?r.ordinalNumber(e.getUTCHours(),{unit:"hour"}):L(e,t)},K:function(e,t,r){var a=e.getUTCHours()%12;return"Ko"===t?r.ordinalNumber(a,{unit:"hour"}):A(a,t.length)},k:function(e,t,r){var a=e.getUTCHours();return 0===a&&(a=24),"ko"===t?r.ordinalNumber(a,{unit:"hour"}):A(a,t.length)},m:function(e,t,r){return"mo"===t?r.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):$(e,t)},s:function(e,t,r){return"so"===t?r.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):N(e,t)},S:function(e,t){return _(e,t)},X:function(e,t,r,a){var n=(a._originalDate||e).getTimezoneOffset();if(0===n)return"Z";switch(t){case"X":return z(n);case"XXXX":case"XX":return U(n);default:return U(n,":")}},x:function(e,t,r,a){var n=(a._originalDate||e).getTimezoneOffset();switch(t){case"x":return z(n);case"xxxx":case"xx":return U(n);default:return U(n,":")}},O:function(e,t,r,a){var n=(a._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+B(n,":");default:return"GMT"+U(n,":")}},z:function(e,t,r,a){var n=(a._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+B(n,":");default:return"GMT"+U(n,":")}},t:function(e,t,r,a){var n=a._originalDate||e;return A(Math.floor(n.getTime()/1e3),t.length)},T:function(e,t,r,a){return A((a._originalDate||e).getTime(),t.length)}};function H(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function K(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}const q={p:K,P:function(e,t){var r,a=e.match(/(P+)(p+)?/)||[],n=a[1],o=a[2];if(!o)return H(e,t);switch(n){case"P":r=t.dateTime({width:"short"});break;case"PP":r=t.dateTime({width:"medium"});break;case"PPP":r=t.dateTime({width:"long"});break;default:r=t.dateTime({width:"full"})}return r.replace("{{date}}",H(n,t)).replace("{{time}}",K(o,t))}};function G(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var V=["D","DD"],W=["YY","YYYY"];function Y(e){return-1!==V.indexOf(e)}function X(e){return-1!==W.indexOf(e)}function Z(e,t,r){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(r,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(r,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(r,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(r,"`; see: https://git.io/fxCyr"))}var Q,J,ee,te=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,re=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ae=/^'([^]*?)'?$/,ne=/''/g,oe=/[a-zA-Z]/;function ie(t,r,a){e(2,arguments);var i=String(r),s=a||{},l=s.locale||y,c=l.options&&l.options.firstWeekContainsDate,d=null==c?1:v(c),u=null==s.firstWeekContainsDate?d:v(s.firstWeekContainsDate);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=l.options&&l.options.weekStartsOn,p=null==m?0:v(m),h=null==s.weekStartsOn?p:v(s.weekStartsOn);if(!(h>=0&&h<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!l.localize)throw new RangeError("locale must contain localize property");if(!l.formatLong)throw new RangeError("locale must contain formatLong property");var f=n(t);if(!o(f))throw new RangeError("Invalid time value");var g=G(f),b=w(f,g),x={firstWeekContainsDate:u,weekStartsOn:h,locale:l,_originalDate:f},S=i.match(re).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,q[t])(e,l.formatLong,x):e})).join("").match(te).map((function(e){if("''"===e)return"'";var a=e[0];if("'"===a)return se(e);var n=j[a];if(n)return!s.useAdditionalWeekYearTokens&&X(e)&&Z(e,r,t),!s.useAdditionalDayOfYearTokens&&Y(e)&&Z(e,r,t),n(b,e,l.localize,x);if(a.match(oe))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return e})).join("");return S}function se(e){return e.match(ae)[1].replace(ne,"'")}function le(...e){console.error("[OGame Tracker]",...e)}function ce(...e){console.warn("[OGame Tracker]",...e)}function de(...e){console.debug("[OGame Tracker]",ie(Date.now(),"yyyy-MM-dd HH-mm-ss.SSS"),...e)}let ue,me;!function(e){e.StayAlive="internal/stay-alive",e.DropDatabaseConnections="internal/drop-db-connections",e.Notification="notification",e.TrackExpedition="expedition/track-expedition",e.Expedition="expedition/single",e.NewExpedition="expedition/new",e.DebrisFieldReport="debris-fields/single",e.NewDebrisFieldReport="debris-fields/new",e.TrackDebrisFieldReport="debris-fields/track",e.TrackManualDebrisFieldReport="debris-fields/track-manually",e.CombatReport="combat-reports/single",e.NewCombatReport="combat-reports/new",e.TrackCombatReport="combat-reports/track",e.RequestSingleCombatReport="combat-reports/request-single-report",e.CombatReportUnknown="combat-reports/is-unknown",e.WillNotBeTracked="message-tracking/no-tracking",e.TrackingError="message-tracking/error",e.UpdatePlanetData="empire/update-planet-data",e.UpdatePlanetActiveItems="empire/update-active-items",e.UpdatePlanetBuildingLevels="empire/update-buildings-levels",e.UpdateResearchLevels="empire/update-research-levels",e.UpdatePlanetShipCounts="empire/update-planet-ships",e.UpdatePlanetDefenseCounts="empire/update-planet-defenses",e.UpdatePlanetMissileCounts="empire/update-planet-missiles",e.UpdateActiveOfficers="empire/update-active-officers",e.UpdatePlayerClass="empire/update-player-class",e.UpdateAllianceClass="empire/update-alliance-class",e.UpdatePlanetProductionSettings="empire/update-planet-production-settings",e.UpdateFleets="empire/fleets",e.NotifyEmpireDataUpdate="empire/notify-update",e.RequestSettings="settings/request-data",e.Settings="settings/data",e.NotifySettingsUpdate="settings/notify-update",e.NotifyUniverseHistoryUpdate="universe-history/notify-update",e.NotifyServerSettingsUpdate="server-settings/notify-update",e.ForceUpdateServerSettings="server-settings/force-update",e.UpdatePlayerName="accounts/update-player-name",e.UpdateUniverseName="universes/update-universe-name",e.NotifyUniverseSpecificSettingsUpdate="universe-specific-settings/notify-update",e.UpdateLifeformExperience="lifeforms/update-lifeform-experience",e.UpdateSelectedLifeform="lifeforms/update-selected-lifeform",e.UpdatePlanetActiveLifeformBuildingLevels="lifeforms/update-active-building-levels",e.UpdatePlanetLifeformBuildingLevels="lifeforms/update-all-building-levels",e.UpdatePlanetActiveLifeformTechnologyLevels="lifeforms/update-active-technology-levels",e.UpdatePlanetLifeformTechnologyLevels="lifeforms/update-all-technology-levels",e.TrackLifeformDiscovery="lifeforms/track-discovery",e.LifeformDiscovery="lifeforms/discovery",e.NewLifeformDiscovery="lifeforms/new-discovery"}(Q||(Q={})),function(e){e.won="won",e.lost="lost",e.draw="draw"}(J||(J={})),J.won,J.draw,J.lost,function(e){e.metal="metal",e.crystal="crystal",e.deuterium="deuterium"}(ee||(ee={})),ee.metal,ee.crystal,ee.deuterium;const pe=new WeakMap,he=new WeakMap,fe=new WeakMap,ge=new WeakMap,ye=new WeakMap;let ve={get(e,t,r){if(e instanceof IDBTransaction){if("done"===t)return he.get(e);if("objectStoreNames"===t)return e.objectStoreNames||fe.get(e);if("store"===t)return r.objectStoreNames[1]?void 0:r.objectStore(r.objectStoreNames[0])}return we(e[t])},set:(e,t,r)=>(e[t]=r,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function be(e){return"function"==typeof e?(t=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(me||(me=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(xe(this),e),we(pe.get(this))}:function(...e){return we(t.apply(xe(this),e))}:function(e,...r){const a=t.call(xe(this),e,...r);return fe.set(a,e.sort?e.sort():[e]),we(a)}:(e instanceof IDBTransaction&&function(e){if(he.has(e))return;const t=new Promise(((t,r)=>{const a=()=>{e.removeEventListener("complete",n),e.removeEventListener("error",o),e.removeEventListener("abort",o)},n=()=>{t(),a()},o=()=>{r(e.error||new DOMException("AbortError","AbortError")),a()};e.addEventListener("complete",n),e.addEventListener("error",o),e.addEventListener("abort",o)}));he.set(e,t)}(e),r=e,(ue||(ue=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some((e=>r instanceof e))?new Proxy(e,ve):e);var t,r}function we(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,r)=>{const a=()=>{e.removeEventListener("success",n),e.removeEventListener("error",o)},n=()=>{t(we(e.result)),a()},o=()=>{r(e.error),a()};e.addEventListener("success",n),e.addEventListener("error",o)}));return t.then((t=>{t instanceof IDBCursor&&pe.set(t,e)})).catch((()=>{})),ye.set(t,e),t}(e);if(ge.has(e))return ge.get(e);const t=be(e);return t!==e&&(ge.set(e,t),ye.set(t,e)),t}const xe=e=>ye.get(e),Se=["get","getKey","getAll","getAllKeys","count"],ke=["put","add","delete","clear"],Ce=new Map;function Te(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(Ce.get(t))return Ce.get(t);const r=t.replace(/FromIndex$/,""),a=t!==r,n=ke.includes(r);if(!(r in(a?IDBIndex:IDBObjectStore).prototype)||!n&&!Se.includes(r))return;const o=async function(e,...t){const o=this.transaction(e,n?"readwrite":"readonly");let i=o.store;return a&&(i=i.index(t.shift())),(await Promise.all([i[r](...t),n&&o.done]))[0]};return Ce.set(t,o),o}var Pe;function De(e,t){if(null!=t)throw{message:e,data:t};throw new Error("[OGame Tracker] "+e)}Pe=e=>({...e,get:(t,r,a)=>Te(t,r)||e.get(t,r,a),has:(t,r)=>!!Te(t,r)||e.has(t,r)}),ve=Pe(ve);const Ee={};async function Me(e,t){let r=Ee[e];return null==r&&(Ee[e]=r=function(e,t,{blocked:r,upgrade:a,blocking:n,terminated:o}={}){const i=indexedDB.open(e,t),s=we(i);return a&&i.addEventListener("upgradeneeded",(e=>{a(we(i.result),e.oldVersion,e.newVersion,we(i.transaction))})),r&&i.addEventListener("blocked",(()=>r())),s.then((e=>{o&&e.addEventListener("close",(()=>o())),n&&e.addEventListener("versionchange",(()=>n()))})).catch((()=>{})),s}(e,8,{upgrade:t}),(await r).addEventListener("close",(t=>delete Ee[e]))),await r}async function Ae(e){const t=function(e){return e.serverId<=0&&De("Server ID is 0 or less"),e.playerId<=0&&De("Player ID is 0 or less"),`s${e.serverId}-${e.language}-${e.playerId}`}(e);return await Me(t,((e,t,r,a)=>{t<1&&(e.createObjectStore("combatReports",{keyPath:"id"}),e.createObjectStore("debrisFieldReports",{keyPath:"id"}),e.createObjectStore("expeditions",{keyPath:"id"}),e.createObjectStore("empire")),t<3&&e.createObjectStore("universeSpecificSettings"),t<7&&e.createObjectStore("lifeformDiscoveries",{keyPath:"id"}),t<8&&e.createObjectStore("combatReports.ignored")}))}async function Fe(e){const t=function(e){return e.serverId<=0&&De("Server ID is 0 or less"),`s${e.serverId}-${e.language}`}(e);return await Me(t,((e,t,r,a)=>{t<1&&e.createObjectStore("serverSettings")}))}async function Ie(e){const t=function(e){return e.serverId<=0&&De("Server ID is 0 or less"),`s${e.serverId}-${e.language}.universeHistory`}(e);return await Me(t,((e,t,r,a)=>{t<1&&(e.createObjectStore("_lastUpdate"),e.createObjectStore("alliances",{keyPath:"id"}),e.createObjectStore("allianceTags",{keyPath:["allianceId","date"]}).createIndex("allianceId","allianceId"),e.createObjectStore("allianceNames",{keyPath:["allianceId","date"]}).createIndex("allianceId","allianceId"),e.createObjectStore("allianceMembers",{keyPath:["allianceId","date"]}).createIndex("allianceId","allianceId"),e.createObjectStore("allianceStates",{keyPath:["allianceId","date"]}).createIndex("allianceId","allianceId"),e.createObjectStore("allianceScores",{keyPath:["allianceId","date","type"]}).createIndex("allianceId","allianceId"),e.createObjectStore("players",{keyPath:"id"}),e.createObjectStore("playerNames",{keyPath:["playerId","date"]}).createIndex("playerId","playerId"),e.createObjectStore("playerStates",{keyPath:["playerId","date"]}).createIndex("playerId","playerId"),e.createObjectStore("playerAlliances",{keyPath:["playerId","date"]}).createIndex("playerId","playerId"),e.createObjectStore("playerScores",{keyPath:["playerId","date","type"]}).createIndex("playerId","playerId"),e.createObjectStore("planets",{keyPath:"id"}).createIndex("playerId","playerId"),e.createObjectStore("planetNames",{keyPath:["planetId","date"]}).createIndex("planetId","planetId"),e.createObjectStore("planetStates",{keyPath:["planetId","date"]}).createIndex("planetId","planetId"),e.createObjectStore("planetCoordinates",{keyPath:["planetId","date"]}).createIndex("planetId","planetId"),e.createObjectStore("moons",{keyPath:"id"}).createIndex("planetId","planetId"),e.createObjectStore("moonNames",{keyPath:["moonId","date"]}).createIndex("moonId","moonId"),e.createObjectStore("moonStates",{keyPath:["moonId","date"]}).createIndex("moonId","moonId"))}))}async function Re(){return await Me("ogame-tracker",((e,t,r,a)=>{t<1&&(e.createObjectStore("settings"),e.createObjectStore("accounts",{keyPath:["serverId","serverLanguage","id"]}),e.createObjectStore("servers",{keyPath:["id","language"]})),t<2&&a.objectStore("accounts").createIndex("server",["serverId","serverLanguage"])}))}class Oe{async tryTrackCombatReport(e){const t=e.data,r=await Ae(e.ogameMeta),a=await r.get("combatReports",t.id);if(null!=a)return{success:!0,result:{report:a,isAlreadyTracked:!0,ignored:!1}};const n=Xl.settings.combatTracking.ignoreEspionageFights;if(null!=await r.get("combatReports.ignored",t.id)&&n)return{success:!0,result:{id:e.data.id,ignored:!0}};if(e.data.ogameCombatReport.isEspionageCombat&&n)return de(`ignoring espionage combat with id ${t.id}`),await r.put("combatReports.ignored",t.id,t.id),{success:!0,result:{id:e.data.id,ignored:!0}};let o;try{return o=this.parseCombatReport(t),await r.put("combatReports",o),{success:!0,result:{report:o,isAlreadyTracked:!1,ignored:!1}}}catch(t){return le({error:t,message:e}),{success:!1}}}async tryGetSingleReport(e){const t=await Ae(e.ogameMeta),r=await t.get("combatReports",e.data);if(null!=r)return{success:!0,result:{report:r,isAlreadyTracked:!0,ignored:!1}};const a=Xl.settings.combatTracking.ignoreEspionageFights;return null!=await t.get("combatReports.ignored",e.data)&&a?{success:!0,result:{id:e.data,ignored:!0}}:{success:!1}}parseCombatReport(e){const{id:t,date:r,ogameCombatReport:a}=e;let n=0;a.isExpedition||(a.isAttacker?n=1:a.isDefender&&(n=a.isOwner?-1:0)),n*="attacker"==a.winner?1:0;const o=a.isAttacker&&"attacker"==a.winner||a.isDefender&&"defender"==a.winner?J.won:"none"==a.winner?J.draw:J.lost,i={[ee.metal]:a.loot.metal*n,[ee.crystal]:a.loot.crystal*n,[ee.deuterium]:a.loot.deuterium*n},s={[ee.metal]:a.debris.metal,[ee.crystal]:a.debris.crystal,[ee.deuterium]:a.debris.deuterium},l=a.playerLosses;return{id:t,date:r,coordinates:a.coordinates,result:o,isExpedition:a.isExpedition,loot:i,debrisField:s,lostShips:l}}}function Le(){const e=chrome.runtime.lastError?.message;if(!["Receiving end does not exist.","The message port closed before a response was received."].some((t=>e?.includes(t)??!1)))throw chrome.runtime.lastError}async function $e(e){de("broadcasting message",e),function(e){chrome.runtime.sendMessage(e,Le)}(e),(await chrome.tabs.query({url:"*://*/bots/*/browser/html/*"})).forEach((t=>{null!=t.id&&chrome.tabs.sendMessage(t.id,e,Le)}))}const Ne=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,_e=function(e){return"string"==typeof e&&Ne.test(e)};for(var Be=[],ze=0;ze<256;++ze)Be.push((ze+256).toString(16).substr(1));function Ue(e,t,r,a){switch(e){case 0:return t&r^~t&a;case 1:case 3:return t^r^a;case 2:return t&r^t&a^r&a}}function je(e,t){return e<<t|e>>>32-t}var He=function(e,t,r){function a(e,t,a,n){if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));for(var t=[],r=0;r<e.length;++r)t.push(e.charCodeAt(r));return t}(e)),"string"==typeof t&&(t=function(e){if(!_e(e))throw TypeError("Invalid UUID");var t,r=new Uint8Array(16);return r[0]=(t=parseInt(e.slice(0,8),16))>>>24,r[1]=t>>>16&255,r[2]=t>>>8&255,r[3]=255&t,r[4]=(t=parseInt(e.slice(9,13),16))>>>8,r[5]=255&t,r[6]=(t=parseInt(e.slice(14,18),16))>>>8,r[7]=255&t,r[8]=(t=parseInt(e.slice(19,23),16))>>>8,r[9]=255&t,r[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,r[11]=t/4294967296&255,r[12]=t>>>24&255,r[13]=t>>>16&255,r[14]=t>>>8&255,r[15]=255&t,r}(t)),16!==t.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var o=new Uint8Array(16+e.length);if(o.set(t),o.set(e,t.length),(o=r(o))[6]=15&o[6]|80,o[8]=63&o[8]|128,a){n=n||0;for(var i=0;i<16;++i)a[n+i]=o[i];return a}return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=(Be[e[t+0]]+Be[e[t+1]]+Be[e[t+2]]+Be[e[t+3]]+"-"+Be[e[t+4]]+Be[e[t+5]]+"-"+Be[e[t+6]]+Be[e[t+7]]+"-"+Be[e[t+8]]+Be[e[t+9]]+"-"+Be[e[t+10]]+Be[e[t+11]]+Be[e[t+12]]+Be[e[t+13]]+Be[e[t+14]]+Be[e[t+15]]).toLowerCase();if(!_e(r))throw TypeError("Stringified UUID is invalid");return r}(o)}try{a.name="v5"}catch(e){}return a.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",a.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",a}(0,0,(function(e){var t=[1518500249,1859775393,2400959708,3395469782],r=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){var a=unescape(encodeURIComponent(e));e=[];for(var n=0;n<a.length;++n)e.push(a.charCodeAt(n))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);for(var o=e.length/4+2,i=Math.ceil(o/16),s=new Array(i),l=0;l<i;++l){for(var c=new Uint32Array(16),d=0;d<16;++d)c[d]=e[64*l+4*d]<<24|e[64*l+4*d+1]<<16|e[64*l+4*d+2]<<8|e[64*l+4*d+3];s[l]=c}s[i-1][14]=8*(e.length-1)/Math.pow(2,32),s[i-1][14]=Math.floor(s[i-1][14]),s[i-1][15]=8*(e.length-1)&4294967295;for(var u=0;u<i;++u){for(var m=new Uint32Array(80),p=0;p<16;++p)m[p]=s[u][p];for(var h=16;h<80;++h)m[h]=je(m[h-3]^m[h-8]^m[h-14]^m[h-16],1);for(var f=r[0],g=r[1],y=r[2],v=r[3],b=r[4],w=0;w<80;++w){var x=Math.floor(w/20),S=je(f,5)+Ue(x,g,y,v)+b+t[x]+m[w]>>>0;b=v,v=y,y=je(g,30)>>>0,g=f,f=S}r[0]=r[0]+f>>>0,r[1]=r[1]+g>>>0,r[2]=r[2]+y>>>0,r[3]=r[3]+v>>>0,r[4]=r[4]+b>>>0}return[r[0]>>24&255,r[0]>>16&255,r[0]>>8&255,255&r[0],r[1]>>24&255,r[1]>>16&255,r[1]>>8&255,255&r[1],r[2]>>24&255,r[2]>>16&255,r[2]>>8&255,255&r[2],r[3]>>24&255,r[3]>>16&255,r[3]>>8&255,255&r[3],r[4]>>24&255,r[4]>>16&255,r[4]>>8&255,255&r[4]]}));const Ke=He,qe="774522d3-7912-4e5c-b55b-e17198620b32",Ge=Ke("service-worker",qe);Ke("message-tracking",qe),Ke("empire-tracking",qe),Ke("universe-account-tracking",qe),Ke("internal",qe);class Ve{async trackManualDebrisFieldReport(e){const t=e.data,r=await Ae(e.ogameMeta);await r.put("debrisFieldReports",t)}async tryTrackDebrisFieldReport(e){const t=e.data,r=await Ae(e.ogameMeta),a=await r.get("debrisFieldReports",t.id);if(null!=a)return{success:!0,result:{report:a,isAlreadyTracked:!0}};let n;try{return n=this.tryParseDebrisFieldReport(t).report,await r.put("debrisFieldReports",n),{success:!0,result:{report:n,isAlreadyTracked:!1}}}catch(t){return le({error:t,message:e}),{success:!1}}}tryParseDebrisFieldReport(e){const t=e.resources.deuterium??void 0,r=16==e.coords.system;return{success:!0,report:{id:e.id,date:e.date,metal:e.resources.metal,crystal:e.resources.crystal,deuterium:t,isExpeditionDebrisField:r}}}}var We;!function(e){e[e.metalMine=1]="metalMine",e[e.crystalMine=2]="crystalMine",e[e.deuteriumSynthesizer=3]="deuteriumSynthesizer",e[e.metalStorage=22]="metalStorage",e[e.crystalStorage=23]="crystalStorage",e[e.deuteriumTank=24]="deuteriumTank",e[e.solarPlant=4]="solarPlant",e[e.fusionReactor=12]="fusionReactor",e[e.roboticsFactory=14]="roboticsFactory",e[e.shipyard=21]="shipyard",e[e.researchLab=31]="researchLab",e[e.allianceDepot=34]="allianceDepot",e[e.missileSilo=44]="missileSilo",e[e.naniteFactory=15]="naniteFactory",e[e.terraformer=33]="terraformer",e[e.spaceDock=36]="spaceDock",e[e.lunarBase=41]="lunarBase",e[e.sensorPhalanx=42]="sensorPhalanx",e[e.jumpGate=43]="jumpGate"}(We||(We={}));class Ye{}new class extends Ye{get type(){return We.allianceDepot}getCost(e){return{metal:1e4*2**e,crystal:2e4*2**e,deuterium:0,energy:0}}};class Xe extends Ye{}new class extends Xe{get type(){return We.crystalMine}getProduction(e,t){const r=this.getProductionBoost(t.planet.position,t.serverSettings);return Math.trunc(20*t.serverSettings.economySpeed*(1+r)*e*1.1**e*t.productionSettings.crystalMine/100)}getProductionBoost(e,t){switch(e){case 1:return t.crystalBoost.pos1;case 2:return t.crystalBoost.pos2;case 3:return t.crystalBoost.pos3}return t.crystalBoost.default}getConsumption(e,t){return{metal:0,crystal:0,deuterium:0,energy:Math.ceil(10*e*1.1**e)}}getCost(e){return{metal:Math.floor(30*1.6**e),crystal:Math.floor(15*1.6**e),deuterium:0,energy:0}}};class Ze extends Ye{}new class extends Ze{get type(){return We.crystalStorage}getStorage(e){return 5e3*Math.floor(2.5*Math.E**(20*e/33))}getDenPercentage(e){return Math.min(.1,.01*e)}getCost(e){return{metal:500*2**e,crystal:250*2**e,deuterium:0,energy:0}}},new class extends Xe{get type(){return We.deuteriumSynthesizer}getProduction(e,t){return Math.trunc(10*e*1.1**e*t.serverSettings.economySpeed*(1.44-.004*t.planet.temperature)*t.productionSettings.deuteriumSynthesizer/100)}getConsumption(e,t){return{metal:0,crystal:0,deuterium:0,energy:Math.ceil(20*e*1.1**e)}}getCost(e){return{metal:Math.floor(150*1.5**e),crystal:Math.floor(50*1.5**e),deuterium:0,energy:0}}},new class extends Ze{get type(){return We.deuteriumTank}getStorage(e){return 5e3*Math.floor(2.5*Math.E**(20*e/33))}getDenPercentage(e){return Math.min(.1,.01*e)}getCost(e){return{metal:500*2**e,crystal:500*2**e,deuterium:0,energy:0}}},new class extends Xe{get type(){return We.fusionReactor}getProduction(e,t){throw new Error("not implemented")}getConsumption(e,t){return{metal:0,crystal:0,deuterium:Math.trunc(10*e*1.1**e*t.productionSettings.fusionReactor/100*t.serverSettings.economySpeed),energy:0}}getCost(e){return{metal:Math.floor(500*1.8**e),crystal:Math.floor(200*1.8**e),deuterium:Math.floor(100*1.8**e),energy:0}}},new class extends Ye{get type(){return We.jumpGate}getCost(e){return{metal:1e6*2**e,crystal:2e6*2**e,deuterium:1e6*2**e,energy:0}}},new class extends Ye{get type(){return We.lunarBase}getCost(e){return{metal:1e4*2**e,crystal:2e4*2**e,deuterium:1e4*2**e,energy:0}}},new class extends Xe{get type(){return We.metalMine}getProduction(e,t){const r=this.getProductionBoost(t.planet.position),a=30*t.serverSettings.economySpeed*(1+r);return Math.trunc(a*e*1.1**e*t.productionSettings.metalMine/100)}getProductionBoost(e){switch(e){case 8:return.35;case 7:case 9:return.23;case 6:case 10:return.17}return 0}getConsumption(e,t){return{metal:0,crystal:0,deuterium:0,energy:Math.ceil(10*e*1.1**e)}}getCost(e){return{metal:Math.floor(40*1.5**e),crystal:Math.floor(10*1.5**e),deuterium:0,energy:0}}},new class extends Ze{get type(){return We.metalStorage}getStorage(e){return 5e3*Math.floor(2.5*Math.E**(20*e/33))}getDenPercentage(e){return Math.min(.1,.01*e)}getCost(e){return{metal:500*2**e,crystal:0,deuterium:0,energy:0}}},new class extends Ye{get type(){return We.missileSilo}getCost(e){return{metal:1e4*2**e,crystal:1e4*2**e,deuterium:500*2**e,energy:0}}},new class extends Ye{get type(){return We.naniteFactory}getCost(e){return{metal:5e5*2**e,crystal:25e4*2**e,deuterium:5e4*2**e,energy:0}}},new class extends Ye{get type(){return We.researchLab}getCost(e){return{metal:100*2**e,crystal:200*2**e,deuterium:100*2**e,energy:0}}},new class extends Ye{get type(){return We.roboticsFactory}getCost(e){return{metal:200*2**e,crystal:60*2**e,deuterium:100*2**e,energy:0}}},new class extends Ye{get type(){return We.sensorPhalanx}getCost(e){return{metal:1e4*2**e,crystal:2e4*2**e,deuterium:1e4*2**e,energy:0}}},new class extends Ye{get type(){return We.shipyard}getCost(e){return{metal:200*2**e,crystal:100*2**e,deuterium:50*2**e,energy:0}}},new class extends Xe{get type(){return We.solarPlant}getProduction(e,t){throw new Error("not implemented")}getConsumption(e,t){return{metal:0,crystal:0,deuterium:0,energy:0}}getCost(e){return{metal:Math.floor(50*1.5**e),crystal:Math.floor(20*1.5**e),deuterium:0,energy:0}}},new class extends Ye{get type(){return We.spaceDock}getCost(e){return{metal:40*4**e,crystal:0,deuterium:10*5**e,energy:10*5**e}}getWreckfield(e,t){return(1-t)*(.01*Math.round(45*e**.08))}},new class extends Ye{get type(){return We.terraformer}getCost(e){return{metal:0,crystal:25e3*2**e,deuterium:5e4*2**e,energy:500*2**e}}};const Qe=(We.metalMine,We.crystalMine,We.deuteriumSynthesizer,We.metalStorage,We.crystalStorage,We.deuteriumTank,We.solarPlant,We.fusionReactor,We.roboticsFactory,We.shipyard,We.researchLab,We.allianceDepot,We.missileSilo,We.naniteFactory,We.terraformer,We.spaceDock,We.lunarBase,We.sensorPhalanx,We.jumpGate,[We.metalMine,We.crystalMine,We.deuteriumSynthesizer,We.metalStorage,We.crystalStorage,We.deuteriumTank,We.solarPlant,We.fusionReactor,We.roboticsFactory,We.shipyard,We.researchLab,We.allianceDepot,We.missileSilo,We.naniteFactory,We.terraformer,We.spaceDock]),Je=(We.metalMine,We.crystalMine,We.deuteriumSynthesizer,We.metalStorage,We.crystalStorage,We.deuteriumTank,We.solarPlant,We.fusionReactor,We.roboticsFactory,We.shipyard,We.researchLab,We.allianceDepot,We.missileSilo,We.naniteFactory,We.terraformer,We.spaceDock,We.metalStorage,We.crystalStorage,We.deuteriumTank,We.roboticsFactory,We.shipyard,We.lunarBase,We.sensorPhalanx,We.jumpGate,[We.metalStorage,We.crystalStorage,We.deuteriumTank,We.roboticsFactory,We.shipyard,We.lunarBase,We.sensorPhalanx,We.jumpGate]);function et(e,t=10){const r=parseInt(e,t);if(isNaN(r))throw new Error(`'${e}' is not a valid integer value`);return r}function tt(e){const t=parseFloat(e);if(isNaN(t))throw new Error(`'${e}' is not a valid integer value`);return t}We.metalMine,We.crystalMine,We.deuteriumSynthesizer,We.metalStorage,We.crystalStorage,We.deuteriumTank,We.solarPlant,We.fusionReactor,We.roboticsFactory,We.shipyard,We.researchLab,We.allianceDepot,We.missileSilo,We.naniteFactory,We.terraformer,We.spaceDock,We.lunarBase,We.sensorPhalanx,We.jumpGate;class rt{}var at;!function(e){e[e.smallCargo=202]="smallCargo",e[e.largeCargo=203]="largeCargo",e[e.lightFighter=204]="lightFighter",e[e.heavyFighter=205]="heavyFighter",e[e.cruiser=206]="cruiser",e[e.battleship=207]="battleship",e[e.colonyShip=208]="colonyShip",e[e.recycler=209]="recycler",e[e.espionageProbe=210]="espionageProbe",e[e.bomber=211]="bomber",e[e.solarSatellite=212]="solarSatellite",e[e.destroyer=213]="destroyer",e[e.deathStar=214]="deathStar",e[e.battlecruiser=215]="battlecruiser",e[e.crawler=217]="crawler",e[e.reaper=218]="reaper",e[e.pathfinder=219]="pathfinder"}(at||(at={}));new class extends rt{get type(){return at.battlecruiser}get cost(){return{metal:3e4,crystal:4e4,deuterium:15e3,energy:0}}baseHull(){return 7e4}baseShield(){return 400}baseDamage(){return 700}baseSpeed(){return 1e4}baseCargoCapacity(){return 750}fuelConsumption(){return 250}},new class extends rt{get type(){return at.battleship}get cost(){return{metal:45e3,crystal:15e3,deuterium:0,energy:0}}baseHull(){return 6e4}baseShield(){return 200}baseDamage(){return 1e3}baseSpeed(){return 1e4}baseCargoCapacity(){return 1500}fuelConsumption(){return 500}},new class extends rt{get type(){return at.bomber}get cost(){return{metal:5e4,crystal:25e3,deuterium:15e3,energy:0}}baseHull(){return 75e3}baseShield(){return 500}baseDamage(){return 1e3}baseSpeed(){return 5e3}baseCargoCapacity(){return 500}fuelConsumption(){return 700}},new class extends rt{get type(){return at.colonyShip}get cost(){return{metal:1e4,crystal:2e4,deuterium:1e4,energy:0}}baseHull(){return 3e4}baseShield(){return 100}baseDamage(){return 50}baseSpeed(){return 2500}baseCargoCapacity(){return 7500}fuelConsumption(){return 1e3}},new class extends rt{get type(){return at.crawler}get cost(){return{metal:2e3,crystal:2e3,deuterium:1e3,energy:0}}baseHull(){return 4e3}baseShield(){return 1}baseDamage(){return 1}baseSpeed(){return 0}baseCargoCapacity(){return 0}fuelConsumption(){return 0}},new class extends rt{get type(){return at.cruiser}get cost(){return{metal:2e4,crystal:7e3,deuterium:2e3,energy:0}}baseHull(){return 27e3}baseShield(){return 50}baseDamage(){return 400}baseSpeed(){return 15e3}baseCargoCapacity(){return 800}fuelConsumption(){return 300}},new class extends rt{get type(){return at.deathStar}get cost(){return{metal:5e6,crystal:4e6,deuterium:1e6,energy:0}}baseHull(){return 9e6}baseShield(){return 5e4}baseDamage(){return 2e5}baseSpeed(){return 100}baseCargoCapacity(){return 1e6}fuelConsumption(){return 1}},new class extends rt{get type(){return at.destroyer}get cost(){return{metal:6e4,crystal:5e4,deuterium:15e3,energy:0}}baseHull(){return 11e4}baseShield(){return 500}baseDamage(){return 2e3}baseSpeed(){return 5e3}baseCargoCapacity(){return 2e3}fuelConsumption(){return 1e3}},new class extends rt{get type(){return at.espionageProbe}get cost(){return{metal:0,crystal:1e3,deuterium:0,energy:0}}baseHull(){return 1e3}baseShield(){return 0}baseDamage(){return 0}baseSpeed(){return 1e8}baseCargoCapacity(){return 0}fuelConsumption(){return 1}},new class extends rt{get type(){return at.heavyFighter}get cost(){return{metal:6e3,crystal:4e3,deuterium:0,energy:0}}baseHull(){return 1e4}baseShield(){return 25}baseDamage(){return 150}baseSpeed(){return 1e4}baseCargoCapacity(){return 100}fuelConsumption(){return 75}},new class extends rt{get type(){return at.largeCargo}get cost(){return{metal:6e3,crystal:6e3,deuterium:0,energy:0}}baseHull(){return 12e3}baseShield(){return 25}baseDamage(){return 5}baseSpeed(){return 7500}baseCargoCapacity(){return 25e3}fuelConsumption(){return 50}},new class extends rt{get type(){return at.lightFighter}get cost(){return{metal:3e3,crystal:1e3,deuterium:0,energy:0}}baseHull(){return 4e3}baseShield(){return 10}baseDamage(){return 50}baseSpeed(){return 12500}baseCargoCapacity(){return 50}fuelConsumption(){return 20}},new class extends rt{get type(){return at.pathfinder}get cost(){return{metal:8e3,crystal:15e3,deuterium:8e3,energy:0}}baseHull(){return 23e3}baseShield(){return 100}baseDamage(){return 200}baseSpeed(){return 12e3}baseCargoCapacity(){return 1e4}fuelConsumption(){return 300}},new class extends rt{get type(){return at.reaper}get cost(){return{metal:85e3,crystal:55e3,deuterium:2e4,energy:0}}baseHull(){return 14e4}baseShield(){return 700}baseDamage(){return 2800}baseSpeed(){return 7e3}baseCargoCapacity(){return 1e4}fuelConsumption(){return 1100}},new class extends rt{get type(){return at.recycler}get cost(){return{metal:1e4,crystal:6e3,deuterium:2e3,energy:0}}baseHull(){return 16e3}baseShield(){return 10}baseDamage(){return 1}baseSpeed(){return 6e3}baseCargoCapacity(){return 2e4}fuelConsumption(){return 900}},new class extends rt{get type(){return at.smallCargo}get cost(){return{metal:2e3,crystal:2e3,deuterium:0,energy:0}}baseHull(){return 4e3}baseShield(){return 10}baseDamage(){return 5}baseSpeed(){return 1e4}baseCargoCapacity(){return 5e3}fuelConsumption(){return 20}},new class extends rt{get type(){return at.solarSatellite}get cost(){return{metal:0,crystal:2e3,deuterium:500,energy:0}}baseHull(){return 2e3}baseShield(){return 1}baseDamage(){return 1}baseSpeed(){return 0}baseCargoCapacity(){return 0}fuelConsumption(){return 0}};const nt=[at.smallCargo,at.largeCargo,at.lightFighter,at.heavyFighter,at.cruiser,at.battleship,at.colonyShip,at.recycler,at.espionageProbe,at.bomber,at.solarSatellite,at.destroyer,at.deathStar,at.battlecruiser,at.crawler,at.reaper,at.pathfinder];var ot;at.solarSatellite,at.crawler,at.smallCargo,at.largeCargo,at.lightFighter,at.heavyFighter,at.cruiser,at.battleship,at.colonyShip,at.recycler,at.espionageProbe,at.bomber,at.destroyer,at.deathStar,at.battlecruiser,at.reaper,at.pathfinder,at.smallCargo,at.largeCargo,at.lightFighter,at.heavyFighter,at.cruiser,at.battleship,at.colonyShip,at.recycler,at.espionageProbe,at.bomber,at.solarSatellite,at.destroyer,at.deathStar,at.battlecruiser,at.crawler,at.reaper,at.pathfinder,at.smallCargo,at.largeCargo,at.lightFighter,at.heavyFighter,at.cruiser,at.battleship,at.colonyShip,at.recycler,at.espionageProbe,at.bomber,at.solarSatellite,at.destroyer,at.deathStar,at.battlecruiser,at.reaper,at.pathfinder,at.lightFighter,at.heavyFighter,at.cruiser,at.battleship,at.battlecruiser,at.bomber,at.destroyer,at.deathStar,at.reaper,at.pathfinder,at.crawler,at.smallCargo,at.largeCargo,at.colonyShip,at.recycler,at.espionageProbe,at.solarSatellite,at.smallCargo,at.largeCargo,at.lightFighter,at.heavyFighter,at.cruiser,at.battleship,at.colonyShip,at.recycler,at.espionageProbe,at.bomber,at.solarSatellite,at.destroyer,at.deathStar,at.battlecruiser,at.crawler,at.reaper,at.pathfinder,function(e){e[e.espionageTechnology=106]="espionageTechnology",e[e.computerTechnology=108]="computerTechnology",e[e.weaponsTechnology=109]="weaponsTechnology",e[e.shieldingTechnology=110]="shieldingTechnology",e[e.armorTechnology=111]="armorTechnology",e[e.energyTechnology=113]="energyTechnology",e[e.hyperspaceTechnology=114]="hyperspaceTechnology",e[e.combustionDrive=115]="combustionDrive",e[e.impulseDrive=117]="impulseDrive",e[e.hyperspaceDrive=118]="hyperspaceDrive",e[e.laserTechnology=120]="laserTechnology",e[e.ionTechnology=121]="ionTechnology",e[e.plasmaTechnology=122]="plasmaTechnology",e[e.intergalacticResearchNetwork=123]="intergalacticResearchNetwork",e[e.astrophysics=124]="astrophysics",e[e.gravitonTechnology=199]="gravitonTechnology"}(ot||(ot={}));class it{}new class extends it{getCost(e){return{metal:500*2**e,crystal:0,deuterium:0,energy:0}}},new class extends it{getCost(e){return{metal:0,crystal:200*2**e,deuterium:300*2**e,energy:0}}},new class extends it{getCost(e){return{metal:100*2**e,crystal:500*2**e,deuterium:100*2**e,energy:0}}},new class extends it{getCost(e){return{metal:100*2**e,crystal:300*2**e,deuterium:0,energy:0}}},new class extends it{getCost(e){return{metal:400*2**e,crystal:100*2**e,deuterium:0,energy:0}}},new class extends it{getCost(e){return{metal:0,crystal:400*2**e,deuterium:200*2**e,energy:0}}},new class extends it{getCost(e){return{metal:0,crystal:2e3*2**e,deuterium:1e3*2**e,energy:0}}},new class extends it{getCost(e){return{metal:200*2**e,crystal:0,deuterium:300*2**e,energy:0}}},new class extends it{getCost(e){return{metal:1e3*2**e,crystal:2e3*2**e,deuterium:300*2**e,energy:0}}},new class extends it{getCost(e){return{metal:5e3*2**e,crystal:1e4*2**e,deuterium:3e3*2**e,energy:0}}},new class extends it{getCost(e){return{metal:100*2**e,crystal:50*2**e,deuterium:0,energy:0}}},new class extends it{getCost(e){return{metal:500*2**e,crystal:150*2**e,deuterium:50*2**e,energy:0}}},new class extends it{getCost(e){return{metal:1e3*2**e,crystal:2e3*2**e,deuterium:500*2**e,energy:0}}},new class extends it{getCost(e){return{metal:12e4*2**e,crystal:2e5*2**e,deuterium:8e4*2**e,energy:0}}},new class extends it{getCost(e){return{metal:Math.floor(4e3*1.75**(e-1)),crystal:Math.floor(8e3*1.75**(e-1)),deuterium:Math.floor(4e3*1.75**(e-1)),energy:0}}},new class extends it{getCost(e){return{metal:0,crystal:0,deuterium:0,energy:1e5*3**e}}};const st=[ot.espionageTechnology,ot.computerTechnology,ot.weaponsTechnology,ot.shieldingTechnology,ot.armorTechnology,ot.energyTechnology,ot.hyperspaceTechnology,ot.combustionDrive,ot.impulseDrive,ot.hyperspaceDrive,ot.laserTechnology,ot.ionTechnology,ot.plasmaTechnology,ot.intergalacticResearchNetwork,ot.astrophysics,ot.gravitonTechnology];var lt;ot.espionageTechnology,ot.computerTechnology,ot.weaponsTechnology,ot.shieldingTechnology,ot.armorTechnology,ot.energyTechnology,ot.hyperspaceTechnology,ot.combustionDrive,ot.impulseDrive,ot.hyperspaceDrive,ot.laserTechnology,ot.ionTechnology,ot.plasmaTechnology,ot.intergalacticResearchNetwork,ot.astrophysics,ot.gravitonTechnology,function(e){e.humans="humans",e.rocktal="rocktal",e.mechas="mechas",e.kaelesh="kaelesh",e.none="none"}(lt||(lt={}));const ct=[lt.humans,lt.rocktal,lt.mechas,lt.kaelesh];var dt;lt.none,lt.humans,lt.rocktal,lt.mechas,lt.kaelesh,function(e){e[e.residentialSector=11101]="residentialSector",e[e.biosphereFarm=11102]="biosphereFarm",e[e.researchCentre=11103]="researchCentre",e[e.academyOfSciences=11104]="academyOfSciences",e[e.neuroCalibrationCentre=11105]="neuroCalibrationCentre",e[e.highEnergySmelting=11106]="highEnergySmelting",e[e.foodSilo=11107]="foodSilo",e[e.fusionPoweredProduction=11108]="fusionPoweredProduction",e[e.skyscraper=11109]="skyscraper",e[e.biotechLab=11110]="biotechLab",e[e.metropolis=11111]="metropolis",e[e.planetaryShield=11112]="planetaryShield",e[e.meditationEnclave=12101]="meditationEnclave",e[e.crystalFarm=12102]="crystalFarm",e[e.runeTechnologium=12103]="runeTechnologium",e[e.runeForge=12104]="runeForge",e[e.oriktorium=12105]="oriktorium",e[e.magmaForge=12106]="magmaForge",e[e.disruptionChamber=12107]="disruptionChamber",e[e.megalith=12108]="megalith",e[e.crystalRefinery=12109]="crystalRefinery",e[e.deuteriumSynthesiser=12110]="deuteriumSynthesiser",e[e.mineralResearchCentre=12111]="mineralResearchCentre",e[e.advancedRecyclingPlant=12112]="advancedRecyclingPlant",e[e.assemblyLine=13101]="assemblyLine",e[e.fusionCellFactory=13102]="fusionCellFactory",e[e.roboticsResearchCentre=13103]="roboticsResearchCentre",e[e.updateNetwork=13104]="updateNetwork",e[e.quantumComputerCentre=13105]="quantumComputerCentre",e[e.automatisedAssemblyCentre=13106]="automatisedAssemblyCentre",e[e.highPerformanceTransformer=13107]="highPerformanceTransformer",e[e.microchipAssemblyLine=13108]="microchipAssemblyLine",e[e.productionAssemblyHall=13109]="productionAssemblyHall",e[e.highPerformanceSynthesiser=13110]="highPerformanceSynthesiser",e[e.chipMassProduction=13111]="chipMassProduction",e[e.nanoRepairBots=13112]="nanoRepairBots",e[e.sanctuary=14101]="sanctuary",e[e.antimatterCondenser=14102]="antimatterCondenser",e[e.vortexChamber=14103]="vortexChamber",e[e.hallsOfRealisation=14104]="hallsOfRealisation",e[e.forumOfTranscendence=14105]="forumOfTranscendence",e[e.antimatterConvector=14106]="antimatterConvector",e[e.cloningLaboratory=14107]="cloningLaboratory",e[e.chrysalisAccelerator=14108]="chrysalisAccelerator",e[e.bioModifier=14109]="bioModifier",e[e.psionicModulator=14110]="psionicModulator",e[e.shipManufacturingHall=14111]="shipManufacturingHall",e[e.supraRefractor=14112]="supraRefractor"}(dt||(dt={}));const ut=[dt.residentialSector,dt.biosphereFarm,dt.researchCentre,dt.academyOfSciences,dt.neuroCalibrationCentre,dt.highEnergySmelting,dt.foodSilo,dt.fusionPoweredProduction,dt.skyscraper,dt.biotechLab,dt.metropolis,dt.planetaryShield,dt.meditationEnclave,dt.crystalFarm,dt.runeTechnologium,dt.runeForge,dt.oriktorium,dt.magmaForge,dt.disruptionChamber,dt.megalith,dt.crystalRefinery,dt.deuteriumSynthesiser,dt.mineralResearchCentre,dt.advancedRecyclingPlant,dt.assemblyLine,dt.fusionCellFactory,dt.roboticsResearchCentre,dt.updateNetwork,dt.quantumComputerCentre,dt.automatisedAssemblyCentre,dt.highPerformanceTransformer,dt.microchipAssemblyLine,dt.productionAssemblyHall,dt.highPerformanceSynthesiser,dt.chipMassProduction,dt.nanoRepairBots,dt.sanctuary,dt.antimatterCondenser,dt.vortexChamber,dt.hallsOfRealisation,dt.forumOfTranscendence,dt.antimatterConvector,dt.cloningLaboratory,dt.chrysalisAccelerator,dt.bioModifier,dt.psionicModulator,dt.shipManufacturingHall,dt.supraRefractor];var mt;lt.none,lt.humans,dt.residentialSector,dt.biosphereFarm,dt.researchCentre,dt.academyOfSciences,dt.neuroCalibrationCentre,dt.highEnergySmelting,dt.foodSilo,dt.fusionPoweredProduction,dt.skyscraper,dt.biotechLab,dt.metropolis,dt.planetaryShield,lt.rocktal,dt.meditationEnclave,dt.crystalFarm,dt.runeTechnologium,dt.runeForge,dt.oriktorium,dt.magmaForge,dt.disruptionChamber,dt.megalith,dt.crystalRefinery,dt.deuteriumSynthesiser,dt.mineralResearchCentre,dt.advancedRecyclingPlant,lt.mechas,dt.assemblyLine,dt.fusionCellFactory,dt.roboticsResearchCentre,dt.updateNetwork,dt.quantumComputerCentre,dt.automatisedAssemblyCentre,dt.highPerformanceTransformer,dt.microchipAssemblyLine,dt.productionAssemblyHall,dt.highPerformanceSynthesiser,dt.chipMassProduction,dt.nanoRepairBots,lt.kaelesh,dt.sanctuary,dt.antimatterCondenser,dt.vortexChamber,dt.hallsOfRealisation,dt.forumOfTranscendence,dt.antimatterConvector,dt.cloningLaboratory,dt.chrysalisAccelerator,dt.bioModifier,dt.psionicModulator,dt.shipManufacturingHall,dt.supraRefractor,function(e){e[e.intergalacticEnvoys=11201]="intergalacticEnvoys",e[e.highPerformanceExtractors=11202]="highPerformanceExtractors",e[e.fusionDrives=11203]="fusionDrives",e[e.stealthFieldGenerator=11204]="stealthFieldGenerator",e[e.orbitalDen=11205]="orbitalDen",e[e.researchAI=11206]="researchAI",e[e.highPerformanceTerraformer=11207]="highPerformanceTerraformer",e[e.enhancedProductionTechnologies=11208]="enhancedProductionTechnologies",e[e.lightFighterMkII=11209]="lightFighterMkII",e[e.cruiserMkII=11210]="cruiserMkII",e[e.improvedLabTechnology=11211]="improvedLabTechnology",e[e.plasmaTerraformer=11212]="plasmaTerraformer",e[e.lowTemperatureDrives=11213]="lowTemperatureDrives",e[e.bomberMkII=11214]="bomberMkII",e[e.destroyerMkII=11215]="destroyerMkII",e[e.battlecruiserMkII=11216]="battlecruiserMkII",e[e.robotAssistants=11217]="robotAssistants",e[e.supercomputer=11218]="supercomputer",e[e.volcanicBatteries=12201]="volcanicBatteries",e[e.acousticScanning=12202]="acousticScanning",e[e.highEnergyPumpSystems=12203]="highEnergyPumpSystems",e[e.cargoHoldExpansion_CivilianShips=12204]="cargoHoldExpansion_CivilianShips",e[e.magmaPoweredProduction=12205]="magmaPoweredProduction",e[e.geothermalPowerPlants=12206]="geothermalPowerPlants",e[e.depthSounding=12207]="depthSounding",e[e.ionCrystalEnhancement_heavyFighter=12208]="ionCrystalEnhancement_heavyFighter",e[e.improvedStellarator=12209]="improvedStellarator",e[e.hardenedDiamondDrillHeads=12210]="hardenedDiamondDrillHeads",e[e.seismicMiningTechnology=12211]="seismicMiningTechnology",e[e.magmaPoweredPumpSystems=12212]="magmaPoweredPumpSystems",e[e.ionCrystalModules=12213]="ionCrystalModules",e[e.optimisedSiloConstructionMethod=12214]="optimisedSiloConstructionMethod",e[e.diamondEnergyTransmitter=12215]="diamondEnergyTransmitter",e[e.obsidianShieldReinforcement=12216]="obsidianShieldReinforcement",e[e.runeShields=12217]="runeShields",e[e.rocktalCollectorEnhancement=12218]="rocktalCollectorEnhancement",e[e.catalyserTechnology=13201]="catalyserTechnology",e[e.plasmaDrive=13202]="plasmaDrive",e[e.efficiencyModule=13203]="efficiencyModule",e[e.depotAI=13204]="depotAI",e[e.generalOverhaul_lightFighter=13205]="generalOverhaul_lightFighter",e[e.automatedTransportLines=13206]="automatedTransportLines",e[e.improvedDroneAI=13207]="improvedDroneAI",e[e.experimentalRecyclingTechnology=13208]="experimentalRecyclingTechnology",e[e.generalOverhaul_cruiser=13209]="generalOverhaul_cruiser",e[e.slingshotAutopilot=13210]="slingshotAutopilot",e[e.highTemperatureSuperconductors=13211]="highTemperatureSuperconductors",e[e.generalOverhaul_battleship=13212]="generalOverhaul_battleship",e[e.artificialSwarmIntelligence=13213]="artificialSwarmIntelligence",e[e.generalOverhaul_battlecruiser=13214]="generalOverhaul_battlecruiser",e[e.generalOverhaul_bomber=13215]="generalOverhaul_bomber",e[e.generalOverhaul_destroyer=13216]="generalOverhaul_destroyer",e[e.experimentalWeaponsTechnology=13217]="experimentalWeaponsTechnology",e[e.mechanGeneralEnhancement=13218]="mechanGeneralEnhancement",e[e.heatRecovery=14201]="heatRecovery",e[e.sulphideProcess=14202]="sulphideProcess",e[e.psionicNetwork=14203]="psionicNetwork",e[e.telekineticTractorBeam=14204]="telekineticTractorBeam",e[e.enhancedSensorTechnology=14205]="enhancedSensorTechnology",e[e.neuromodalCompressor=14206]="neuromodalCompressor",e[e.neuroInterface=14207]="neuroInterface",e[e.interplanetaryAnalysisNetwork=14208]="interplanetaryAnalysisNetwork",e[e.overclocking_heavyFighter=14209]="overclocking_heavyFighter",e[e.telekineticDrive=14210]="telekineticDrive",e[e.sixthSense=14211]="sixthSense",e[e.psychoharmoniser=14212]="psychoharmoniser",e[e.efficientSwarmIntelligence=14213]="efficientSwarmIntelligence",e[e.overclocking_largeCargo=14214]="overclocking_largeCargo",e[e.gravitationSensors=14215]="gravitationSensors",e[e.overclocking_battleship=14216]="overclocking_battleship",e[e.psionicShieldMatrix=14217]="psionicShieldMatrix",e[e.kaeleshDiscovererEnhancement=14218]="kaeleshDiscovererEnhancement"}(mt||(mt={}));const pt=[mt.intergalacticEnvoys,mt.highPerformanceExtractors,mt.fusionDrives,mt.stealthFieldGenerator,mt.orbitalDen,mt.researchAI,mt.highPerformanceTerraformer,mt.enhancedProductionTechnologies,mt.lightFighterMkII,mt.cruiserMkII,mt.improvedLabTechnology,mt.plasmaTerraformer,mt.lowTemperatureDrives,mt.bomberMkII,mt.destroyerMkII,mt.battlecruiserMkII,mt.robotAssistants,mt.supercomputer,mt.volcanicBatteries,mt.acousticScanning,mt.highEnergyPumpSystems,mt.cargoHoldExpansion_CivilianShips,mt.magmaPoweredProduction,mt.geothermalPowerPlants,mt.depthSounding,mt.ionCrystalEnhancement_heavyFighter,mt.improvedStellarator,mt.hardenedDiamondDrillHeads,mt.seismicMiningTechnology,mt.magmaPoweredPumpSystems,mt.ionCrystalModules,mt.optimisedSiloConstructionMethod,mt.diamondEnergyTransmitter,mt.obsidianShieldReinforcement,mt.runeShields,mt.rocktalCollectorEnhancement,mt.catalyserTechnology,mt.plasmaDrive,mt.efficiencyModule,mt.depotAI,mt.generalOverhaul_lightFighter,mt.automatedTransportLines,mt.improvedDroneAI,mt.experimentalRecyclingTechnology,mt.generalOverhaul_cruiser,mt.slingshotAutopilot,mt.highTemperatureSuperconductors,mt.generalOverhaul_battleship,mt.artificialSwarmIntelligence,mt.generalOverhaul_battlecruiser,mt.generalOverhaul_bomber,mt.generalOverhaul_destroyer,mt.experimentalWeaponsTechnology,mt.mechanGeneralEnhancement,mt.heatRecovery,mt.sulphideProcess,mt.psionicNetwork,mt.telekineticTractorBeam,mt.enhancedSensorTechnology,mt.neuromodalCompressor,mt.neuroInterface,mt.interplanetaryAnalysisNetwork,mt.overclocking_heavyFighter,mt.telekineticDrive,mt.sixthSense,mt.psychoharmoniser,mt.efficientSwarmIntelligence,mt.overclocking_largeCargo,mt.gravitationSensors,mt.overclocking_battleship,mt.psionicShieldMatrix,mt.kaeleshDiscovererEnhancement];function ht(e,t){const r={};return e.forEach((e=>r[e]=t instanceof Function?t(e):t)),r}mt.intergalacticEnvoys,mt.highPerformanceExtractors,mt.fusionDrives,mt.stealthFieldGenerator,mt.orbitalDen,mt.researchAI,mt.highPerformanceTerraformer,mt.enhancedProductionTechnologies,mt.lightFighterMkII,mt.cruiserMkII,mt.improvedLabTechnology,mt.plasmaTerraformer,mt.lowTemperatureDrives,mt.bomberMkII,mt.destroyerMkII,mt.battlecruiserMkII,mt.robotAssistants,mt.supercomputer,mt.volcanicBatteries,mt.acousticScanning,mt.highEnergyPumpSystems,mt.cargoHoldExpansion_CivilianShips,mt.magmaPoweredProduction,mt.geothermalPowerPlants,mt.depthSounding,mt.ionCrystalEnhancement_heavyFighter,mt.improvedStellarator,mt.hardenedDiamondDrillHeads,mt.seismicMiningTechnology,mt.magmaPoweredPumpSystems,mt.ionCrystalModules,mt.optimisedSiloConstructionMethod,mt.diamondEnergyTransmitter,mt.obsidianShieldReinforcement,mt.runeShields,mt.rocktalCollectorEnhancement,mt.catalyserTechnology,mt.plasmaDrive,mt.efficiencyModule,mt.depotAI,mt.generalOverhaul_lightFighter,mt.automatedTransportLines,mt.improvedDroneAI,mt.experimentalRecyclingTechnology,mt.generalOverhaul_cruiser,mt.slingshotAutopilot,mt.highTemperatureSuperconductors,mt.generalOverhaul_battleship,mt.artificialSwarmIntelligence,mt.generalOverhaul_battlecruiser,mt.generalOverhaul_bomber,mt.generalOverhaul_destroyer,mt.experimentalWeaponsTechnology,mt.mechanGeneralEnhancement,mt.heatRecovery,mt.sulphideProcess,mt.psionicNetwork,mt.telekineticTractorBeam,mt.enhancedSensorTechnology,mt.neuromodalCompressor,mt.neuroInterface,mt.interplanetaryAnalysisNetwork,mt.overclocking_heavyFighter,mt.telekineticDrive,mt.sixthSense,mt.psychoharmoniser,mt.efficientSwarmIntelligence,mt.overclocking_largeCargo,mt.gravitationSensors,mt.overclocking_battleship,mt.psionicShieldMatrix,mt.kaeleshDiscovererEnhancement,lt.none,lt.humans,mt.intergalacticEnvoys,mt.highPerformanceExtractors,mt.fusionDrives,mt.stealthFieldGenerator,mt.orbitalDen,mt.researchAI,mt.highPerformanceTerraformer,mt.enhancedProductionTechnologies,mt.lightFighterMkII,mt.cruiserMkII,mt.improvedLabTechnology,mt.plasmaTerraformer,mt.lowTemperatureDrives,mt.bomberMkII,mt.destroyerMkII,mt.battlecruiserMkII,mt.robotAssistants,mt.supercomputer,lt.rocktal,mt.volcanicBatteries,mt.acousticScanning,mt.highEnergyPumpSystems,mt.cargoHoldExpansion_CivilianShips,mt.magmaPoweredProduction,mt.geothermalPowerPlants,mt.depthSounding,mt.ionCrystalEnhancement_heavyFighter,mt.improvedStellarator,mt.hardenedDiamondDrillHeads,mt.seismicMiningTechnology,mt.magmaPoweredPumpSystems,mt.ionCrystalModules,mt.optimisedSiloConstructionMethod,mt.diamondEnergyTransmitter,mt.obsidianShieldReinforcement,mt.runeShields,mt.rocktalCollectorEnhancement,lt.mechas,mt.catalyserTechnology,mt.plasmaDrive,mt.efficiencyModule,mt.depotAI,mt.generalOverhaul_lightFighter,mt.automatedTransportLines,mt.improvedDroneAI,mt.experimentalRecyclingTechnology,mt.generalOverhaul_cruiser,mt.slingshotAutopilot,mt.highTemperatureSuperconductors,mt.generalOverhaul_battleship,mt.artificialSwarmIntelligence,mt.generalOverhaul_battlecruiser,mt.generalOverhaul_bomber,mt.generalOverhaul_destroyer,mt.experimentalWeaponsTechnology,mt.mechanGeneralEnhancement,lt.kaelesh,mt.heatRecovery,mt.sulphideProcess,mt.psionicNetwork,mt.telekineticTractorBeam,mt.enhancedSensorTechnology,mt.neuromodalCompressor,mt.neuroInterface,mt.interplanetaryAnalysisNetwork,mt.overclocking_heavyFighter,mt.telekineticDrive,mt.sixthSense,mt.psychoharmoniser,mt.efficientSwarmIntelligence,mt.overclocking_largeCargo,mt.gravitationSensors,mt.overclocking_battleship,mt.psionicShieldMatrix,mt.kaeleshDiscovererEnhancement;class ft{async updateOfficers(e,t){const r=await Ae(e);await r.put("empire",t,"officers")}async updateAlliance(e,t){const r=await Ae(e);await r.put("empire",t,"allianceClass")}async updateActiveItems(e,t){const r=await Ae(e),a=`${t.isMoon?"moon":"planet"}.${t.planetId}.activeItems`;await r.put("empire",t.data,a)}async updateBuildingLevels(e,t){const r=(await Ae(e)).transaction("empire","readwrite"),a=r.objectStore("empire");if(t.isMoon){const e=`moon.${t.planetId}.buildings`,r=await a.get(e),n={...ht(Je,0),...r};Object.keys(t.data).map((e=>et(e,10))).forEach((e=>n[e]=t.data[e]??n[e]??0)),await a.put(n,e)}else{const e=`planet.${t.planetId}.buildings`,r=await a.get(e),n={...ht(Qe,0),...r};Object.keys(t.data).map((e=>et(e,10))).forEach((e=>n[e]=t.data[e]??n[e]??0)),await a.put(n,e)}await r.done}async updateBasicPlanets(e,t){const r=(await Ae(e)).transaction("empire","readwrite"),a=r.objectStore("empire"),n=t.map((e=>e.id));await a.put(n,"planetOrder");for(const e of t)e.isMoon?await a.put(e,`moon.${e.id}`):await a.put(e,`planet.${e.id}`);const o=(await a.getAllKeys()).filter((e=>e.startsWith("moon.")||e.startsWith("planet."))).filter((e=>{const r=et(e.match(/^(planet|moon)\.(?<id>\d+)(\.|$)/)?.groups?.id??De("no match"),10);return!t.some((e=>e.id==r))}));for(const e of o)await a.delete(e);await r.done}async updatePlanetDefenses(e,t){const r=await Ae(e),a=`${t.isMoon?"moon":"planet"}.${t.planetId}.defenses`,n=t.data;await r.put("empire",n,a)}async updatePlanetMissiles(e,t){if(t.isMoon)return;const r=await Ae(e),a=`planet.${t.planetId}.missiles`,n=t.data;await r.put("empire",n,a)}async updatePlanetShips(e,t){const r=(await Ae(e)).transaction("empire","readwrite"),a=r.objectStore("empire"),n=`${t.isMoon?"moon":"planet"}.${t.planetId}.ships`,o=await a.get(n),i={...ht(nt,0),...o};Object.keys(t.data).map((e=>et(e,10))).forEach((e=>i[e]=t.data[e]??i[e]??0)),await a.put(i,n),await r.done}async updatePlayerClass(e,t){const r=await Ae(e);await r.put("empire",t,"playerClass")}async updateResearchLevels(e,t){const r=(await Ae(e)).transaction("empire","readwrite"),a=r.objectStore("empire"),n=await a.get("research"),o={...ht(st,0),...n};Object.keys(t).map((e=>et(e,10))).forEach((e=>o[e]=t[e]??o[e]??0)),await a.put(o,"research"),await r.done}async updateProductionSettings(e,t){if(t.isMoon)return;const r=await Ae(e),a=`planet.${t.planetId}.productionSettings`;await r.put("empire",t.data,a)}async updateSelectedLifeform(e,t){if(t.isMoon)return;const r=await Ae(e);await r.put("empire",t.data,`planet.${t.planetId}.lifeform`)}async updateLifeformExperience(e,t){const r=(await Ae(e)).transaction("empire","readwrite"),a=r.objectStore("empire"),n=await a.get("lifeformExperience"),o={...ht(ct,0),...n,...t};await a.put(o,"lifeformExperience"),await r.done}async updatePlanetLifeformBuildings(e,t){if(t.isMoon)return;const r=(await Ae(e)).transaction("empire","readwrite"),a=r.objectStore("empire"),n=`planet.${t.planetId}.lifeformBuildings`,o=await a.get(n),i={...ht(ut,0),...o};Object.keys(t.data).map((e=>et(e,10))).forEach((e=>i[e]=t.data[e]??i[e]??0)),await a.put(i,n),await r.done}async updatePlanetActiveLifeformTechnologies(e,t){if(t.isMoon)return;await this.updatePlanetLifeformTechnologies(e,t);const r=await Ae(e),a=Object.keys(t.data).map((e=>et(e,10)));await r.put("empire",a,`planet.${t.planetId}.activeLifeformTechnologies`)}async updatePlanetLifeformTechnologies(e,t){if(t.isMoon)return;const r=(await Ae(e)).transaction("empire","readwrite"),a=r.objectStore("empire"),n=`planet.${t.planetId}.lifeformTechnologies`,o=await a.get(n),i={...ht(pt,0),...o};Object.keys(t.data).map((e=>et(e,10))).forEach((e=>i[e]=t.data[e]??i[e]??0)),await a.put(i,n),await r.done}async updateFleets(e,t){const r=(await Ae(e)).transaction("empire","readwrite"),a=r.objectStore("empire");await a.put(t,"fleets"),await r.done}}const gt=[at.lightFighter,at.heavyFighter,at.cruiser,at.battleship,at.bomber,at.battlecruiser,at.destroyer,at.reaper,at.pathfinder,at.smallCargo,at.largeCargo,at.espionageProbe];var yt,vt,bt,wt,xt,St,kt,Ct,Tt,Pt,Dt;!function(e){e.small="small",e.medium="medium",e.large="large"}(yt||(yt={})),yt.small,yt.medium,yt.large,function(e){e.nothing="nothing",e.resources="resources",e.fleet="fleet",e.delay="delay",e.early="early",e.darkMatter="darkMatter",e.pirates="pirates",e.aliens="aliens",e.combat="combat",e.item="item",e.trader="trader",e.lostFleet="lostFleet"}(vt||(vt={})),vt.nothing,vt.resources,vt.fleet,vt.delay,vt.early,vt.darkMatter,vt.pirates,vt.aliens,vt.combat,vt.item,vt.trader,vt.lostFleet,function(e){e.none="none",e.low="low",e.medium="medium",e.high="high"}(bt||(bt={})),bt.none,bt.low,bt.medium,bt.high,function(e){e.resources="ressources",e.nothing="nothing",e.fleet="shipwrecks",e.combatPirates="combatPirates",e.combatAliens="combatAliens",e.item="items",e.delayOrEarly="navigation",e.lostFleet="fleetLost",e.darkMatter="darkmatter",e.trader="trader"}(wt||(wt={})),function(e){e[e.none=1]="none",e[e.low=2]="low",e[e.medium=3]="medium",e[e.high=4]="high"}(xt||(xt={})),function(e){e[e.small=2]="small",e[e.medium=1]="medium",e[e.large=0]="large"}(St||(St={}));class Et{async tryTrackExpedition(e){const t=e.data,r=await Ae(e.ogameMeta),a=await r.get("expeditions",t.id);if(null!=a)return{success:!0,result:{expedition:a,isAlreadyTracked:!0}};let n;try{return n=this.#e(t),await r.put("expeditions",n),{success:!0,result:{expedition:n,isAlreadyTracked:!1}}}catch(t){return ce({error:t,message:e}),{success:!1}}}#e(e){const t={[wt.combatAliens]:()=>this.#t(e),[wt.combatPirates]:()=>this.#t(e),[wt.darkMatter]:()=>this.#r(e),[wt.delayOrEarly]:()=>this.#a(e),[wt.fleet]:()=>this.#n(e),[wt.item]:()=>this.#o(e),[wt.lostFleet]:()=>this.#i(e),[wt.nothing]:()=>this.#s(e),[wt.resources]:()=>this.#l(e),[wt.trader]:()=>this.#c(e)}[e.type]();null==t&&De("Unknown expedition type");const r=this.#d(e);return null!=r&&(t.depletion=r),t}#d(e){if(null!=e.depletion)return{[xt.none]:bt.none,[xt.low]:bt.low,[xt.medium]:bt.medium,[xt.high]:bt.high}[e.depletion]}#s(e){return e.type!=wt.nothing&&De("unexpected raw expedition type"),{id:e.id,date:e.date,type:vt.nothing}}#i(e){return e.type!=wt.lostFleet&&De("unexpected raw expedition type"),{id:e.id,date:e.date,type:vt.lostFleet}}#t(e){[wt.combatAliens,wt.combatPirates].includes(e.type)||De("unexpected raw expedition type");const t=this.#u(e.size)??De("missing expedition combat size");return{id:e.id,date:e.date,size:t,type:vt.combat}}#c(e){return e.type!=wt.trader&&De("unexpected raw expedition type"),{id:e.id,date:e.date,type:vt.trader}}#a(e){e.type!=wt.delayOrEarly&&De("unexpected raw expedition type");const t=this.#u(e.size)??De("missing expedition navigation event size"),r=e.navigationType??De("missing raw navigation event type");return{id:e.id,date:e.date,size:t,type:"delay"==r?vt.delay:vt.early}}#o(e){return e.type!=wt.item&&De("unexpected raw expedition type"),{type:vt.item,id:e.id,date:e.date,itemHash:e.item??De("missing item hash")}}#n(e){e.type!=wt.fleet&&De("unexpected raw expedition type");const t=this.#u(e.size)??De("missing ship find size"),r={};return gt.forEach((t=>{const a=e.ships?.[t];null!=a&&a>0&&(r[t]=a)})),0==Object.keys(r).length&&ce("found ships but there are no ship amounts"),{id:e.id,date:e.date,size:t,fleet:r,type:vt.fleet}}#r(e){e.type!=wt.darkMatter&&De("unexpected raw expedition type");const t=this.#u(e.size)??De("missing dark matter find size"),r=e.darkMatter??De("missing dark matter amount");return{id:e.id,date:e.date,darkMatter:r,size:t,type:vt.darkMatter}}#l(e){e.type!=wt.resources&&De("unexpected raw expedition type");const t=this.#u(e.size)??De("missing resource find size"),r={[ee.metal]:e.resources?.metal??0,[ee.crystal]:e.resources?.crystal??0,[ee.deuterium]:e.resources?.deuterium??0};return r.metal+r.crystal+r.deuterium==0&&ce("found resources but resource amounts are 0"),{type:vt.resources,id:e.id,date:e.date,resources:r,size:t}}#u(e){if(null!=e)return{[St.small]:yt.small,[St.medium]:yt.medium,[St.large]:yt.large}[e]}}!function(e){e.nothing="nothing",e.lostShip="lostShip",e.newLifeformFound="newLifeformFound",e.knownLifeformFound="knownLifeformFound",e.artifacts="artifacts"}(kt||(kt={})),kt.nothing,kt.lostShip,kt.newLifeformFound,kt.knownLifeformFound,kt.artifacts,function(e){e.storageFull="full",e.small="normal",e.medium="big",e.large="huge"}(Ct||(Ct={})),Ct.small,Ct.medium,Ct.large,Ct.storageFull,function(e){e.none="none",e.artifacts="artifacts",e.lifeformExperience="lifeform-xp",e.shipLost="ship-lost",e.lifeformFound="lifeform-found"}(Tt||(Tt={})),function(e){e.small="normal",e.medium="big",e.large="huge",e.fullStorage="full"}(Pt||(Pt={})),function(e){e[e.humans=1]="humans",e[e.rocktal=2]="rocktal",e[e.mechas=3]="mechas",e[e.kaelesh=4]="kaelesh"}(Dt||(Dt={}));class Mt{async tryTrackExpedition(e){const t=e.data,r=await Ae(e.ogameMeta),a=await r.get("lifeformDiscoveries",t.id);if(null!=a)return{success:!0,result:{lifeformDiscovery:a,isAlreadyTracked:!0}};let n;try{return n=this.#m(t),await r.put("lifeformDiscoveries",n),{success:!0,result:{lifeformDiscovery:n,isAlreadyTracked:!1}}}catch(t){return ce({error:t,message:e}),{success:!1}}}#m(e){const t={[Tt.none]:()=>this.#p(e),[Tt.artifacts]:()=>this.#h(e),[Tt.lifeformExperience]:()=>this.#f(e),[Tt.lifeformFound]:()=>this.#g(e),[Tt.shipLost]:()=>this.#y(e)}[e.type]();return null==t&&De("Unknown lifeform discovery type"),t}#p(e){return e.type!=Tt.none&&De("unexpected lifeform discovery type"),{id:e.id,date:e.date,type:kt.nothing}}#h(e){e.type!=Tt.artifacts&&De("unexpected lifeform discovery type");const t=e.artifactsFound??De("missing artifacts amount"),r=e.artifactsSize??De("missing artifact find size"),a={[Pt.small]:Ct.small,[Pt.medium]:Ct.medium,[Pt.large]:Ct.large,[Pt.fullStorage]:Ct.storageFull}[r];return{id:e.id,date:e.date,type:kt.artifacts,artifacts:t,size:a}}#y(e){return e.type!=Tt.shipLost&&De("unexpected lifeform discovery type"),{id:e.id,date:e.date,type:kt.lostShip}}#f(e){e.type!=Tt.lifeformExperience&&De("unexpected lifeform discovery type");const t=e.lifeform??De("missing lifeform"),r=this.#v(t),a=e.lifeformExperience??De("missing found experience");return{id:e.id,date:e.date,type:kt.knownLifeformFound,lifeform:r,experience:a}}#g(e){e.type!=Tt.lifeformFound&&De("unexpected lifeform discovery type");const t=e.lifeform??De("missing lifeform"),r=this.#v(t);return{id:e.id,date:e.date,type:kt.newLifeformFound,lifeform:r}}#v(e){return{[Dt.humans]:lt.humans,[Dt.rocktal]:lt.rocktal,[Dt.mechas]:lt.mechas,[Dt.kaelesh]:lt.kaelesh}[e]??De("invalid lifeform type")}}var At=r(932);const Ft={name:{fromKey:"name",toKey:"name",conversion:(e,t)=>e??`${t.language.toUpperCase()} ${t.number}`},number:{fromKey:"number",toKey:"number",type:String},language:{fromKey:"language",toKey:"language",type:String},timezone:{fromKey:"timezone",toKey:"timezone",type:String},timezoneOffset:{fromKey:"timezoneOffset",toKey:"timezoneOffset",type:String},domain:{fromKey:"domain",toKey:"domain",type:String},version:{fromKey:"version",toKey:"version",type:String},speed:{fromKey:"speed",toKey:"speed",type:Number},speedFleetPeaceful:{fromKey:"speedFleetPeaceful",toKey:"speedFleetPeaceful",type:Number},speedFleetWar:{fromKey:"speedFleetWar",toKey:"speedFleetWar",type:Number},speedFleetHolding:{fromKey:"speedFleetHolding",toKey:"speedFleetHolding",type:Number},galaxies:{fromKey:"galaxies",toKey:"galaxies",type:Number},systems:{fromKey:"systems",toKey:"systems",type:Number},acs:{fromKey:"acs",toKey:"acs",type:Boolean},rapidFire:{fromKey:"rapidFire",toKey:"rapidFire",type:Boolean},defToTF:{fromKey:"defToTF",toKey:"defToTF",type:Boolean},debrisFactor:{fromKey:"debrisFactor",toKey:"debrisFactor",type:Number},debrisFactorDef:{fromKey:"debrisFactorDef",toKey:"debrisFactorDef",type:Number},repairFactor:{fromKey:"repairFactor",toKey:"repairFactor",type:Number},newbieProtectionLimit:{fromKey:"newbieProtectionLimit",toKey:"newbieProtectionLimit",type:Number},newbieProtectionHigh:{fromKey:"newbieProtectionHigh",toKey:"newbieProtectionHigh",type:Number},topScore:{fromKey:"topScore",toKey:"topScore",type:Number},bonusFields:{fromKey:"bonusFields",toKey:"bonusFields",type:Number},donutGalaxy:{fromKey:"donutGalaxy",toKey:"donutGalaxy",type:Boolean},donutSystem:{fromKey:"donutSystem",toKey:"donutSystem",type:Boolean},wfEnabled:{fromKey:"wfEnabled",toKey:"wfEnabled",type:Boolean},wfMinimumRessLost:{fromKey:"wfMinimumRessLost",toKey:"wfMinimumRessLost",type:Number},wfMinimumLossPercentage:{fromKey:"wfMinimumLossPercentage",toKey:"wfMinimumLossPercentage",type:Number},wfBasicPercentageRepairable:{fromKey:"wfBasicPercentageRepairable",toKey:"wfBasicPercentageRepairable",type:Number},globalDeuteriumSaveFactor:{fromKey:"globalDeuteriumSaveFactor",toKey:"globalDeuteriumSaveFactor",type:Number},bashlimit:{fromKey:"bashlimit",toKey:"bashlimit",type:Number},probeCargo:{fromKey:"probeCargo",toKey:"probeCargo",type:Number},researchDurationDivisor:{fromKey:"researchDurationDivisor",toKey:"researchDurationDivisor",type:Number},darkMatterNewAcount:{fromKey:"darkMatterNewAcount",toKey:"darkMatterNewAcount",type:Number},cargoHyperspaceTechMultiplier:{fromKey:"cargoHyperspaceTechMultiplier",toKey:"cargoHyperspaceTechMultiplier",type:Number},marketplaceEnabled:{fromKey:"marketplaceEnabled",toKey:"marketplaceEnabled",type:Boolean},marketplaceBasicTradeRatioMetal:{fromKey:"marketplaceBasicTradeRatioMetal",toKey:"marketplaceBasicTradeRatioMetal",type:Number},marketplaceBasicTradeRatioCrystal:{fromKey:"marketplaceBasicTradeRatioCrystal",toKey:"marketplaceBasicTradeRatioCrystal",type:Number},marketplaceBasicTradeRatioDeuterium:{fromKey:"marketplaceBasicTradeRatioDeuterium",toKey:"marketplaceBasicTradeRatioDeuterium",type:Number},marketplacePriceRangeLower:{fromKey:"marketplacePriceRangeLower",toKey:"marketplacePriceRangeLower",type:Number},marketplacePriceRangeUpper:{fromKey:"marketplacePriceRangeUpper",toKey:"marketplacePriceRangeUpper",type:Number},marketplaceTaxNormalUser:{fromKey:"marketplaceTaxNormalUser",toKey:"marketplaceTaxNormalUser",type:Number},marketplaceTaxAdmiral:{fromKey:"marketplaceTaxAdmiral",toKey:"marketplaceTaxAdmiral",type:Number},marketplaceTaxCancelOffer:{fromKey:"marketplaceTaxCancelOffer",toKey:"marketplaceTaxCancelOffer",type:Number},marketplaceTaxNotSold:{fromKey:"marketplaceTaxNotSold",toKey:"marketplaceTaxNotSold",type:Number},marketplaceOfferTimeout:{fromKey:"marketplaceOfferTimeout",toKey:"marketplaceOfferTimeout",type:Number},characterClassesEnabled:{fromKey:"characterClassesEnabled",toKey:"characterClassesEnabled",type:Boolean},minerBonusResourceProduction:{fromKey:"minerBonusResourceProduction",toKey:"minerBonusResourceProduction",type:Number},minerBonusFasterTradingShips:{fromKey:"minerBonusFasterTradingShips",toKey:"minerBonusFasterTradingShips",type:Number},minerBonusIncreasedCargoCapacityForTradingShips:{fromKey:"minerBonusIncreasedCargoCapacityForTradingShips",toKey:"minerBonusIncreasedCargoCapacityForTradingShips",type:Number},minerBonusAdditionalFleetSlots:{fromKey:"minerBonusAdditionalFleetSlots",toKey:"minerBonusAdditionalFleetSlots",type:Number},minerBonusAdditionalMarketSlots:{fromKey:"minerBonusAdditionalMarketSlots",toKey:"minerBonusAdditionalMarketSlots",type:Number},minerBonusAdditionalCrawler:{fromKey:"minerBonusAdditionalCrawler",toKey:"minerBonusAdditionalCrawler",type:Number},minerBonusMaxCrawler:{fromKey:"minerBonusMaxCrawler",toKey:"minerBonusMaxCrawler",type:Number},minerBonusEnergy:{fromKey:"minerBonusEnergy",toKey:"minerBonusEnergy",type:Number},minerBonusOverloadCrawler:{fromKey:"minerBonusOverloadCrawler",toKey:"minerBonusOverloadCrawler",type:Boolean},resourceBuggyProductionBoost:{fromKey:"resourceBuggyProductionBoost",toKey:"resourceBuggyProductionBoost",type:Number},resourceBuggyMaxProductionBoost:{fromKey:"resourceBuggyMaxProductionBoost",toKey:"resourceBuggyMaxProductionBoost",type:Number},resourceBuggyEnergyConsumptionPerUnit:{fromKey:"resourceBuggyEnergyConsumptionPerUnit",toKey:"resourceBuggyEnergyConsumptionPerUnit",type:Number},warriorBonusFasterCombatShips:{fromKey:"warriorBonusFasterCombatShips",toKey:"warriorBonusFasterCombatShips",type:Number},warriorBonusFasterRecyclers:{fromKey:"warriorBonusFasterRecyclers",toKey:"warriorBonusFasterRecyclers",type:Number},warriorBonusFuelConsumption:{fromKey:"warriorBonusFuelConsumption",toKey:"warriorBonusFuelConsumption",type:Number},warriorBonusRecyclerFuelConsumption:{fromKey:"warriorBonusRecyclerFuelConsumption",toKey:"warriorBonusRecyclerFuelConsumption",type:Number},warriorBonusRecyclerCargoCapacity:{fromKey:"warriorBonusRecyclerCargoCapacity",toKey:"warriorBonusRecyclerCargoCapacity",type:Number},warriorBonusAdditionalFleetSlots:{fromKey:"warriorBonusAdditionalFleetSlots",toKey:"warriorBonusAdditionalFleetSlots",type:Number},warriorBonusAdditionalMoonFields:{fromKey:"warriorBonusAdditionalMoonFields",toKey:"warriorBonusAdditionalMoonFields",type:Number},warriorBonusFleetHalfSpeed:{fromKey:"warriorBonusFleetHalfSpeed",toKey:"warriorBonusFleetHalfSpeed",type:Boolean},warriorBonusAttackerWreckfield:{fromKey:"warriorBonusAttackerWreckfield",toKey:"warriorBonusAttackerWreckfield",type:Boolean},combatDebrisFieldLimit:{fromKey:"combatDebrisFieldLimit",toKey:"combatDebrisFieldLimit",type:Number},explorerBonusIncreasedResearchSpeed:{fromKey:"explorerBonusIncreasedResearchSpeed",toKey:"explorerBonusIncreasedResearchSpeed",type:Number},explorerBonusIncreasedExpeditionOutcome:{fromKey:"explorerBonusIncreasedExpeditionOutcome",toKey:"explorerBonusIncreasedExpeditionOutcome",type:Number},explorerBonusLargerPlanets:{fromKey:"explorerBonusLargerPlanets",toKey:"explorerBonusLargerPlanets",type:Number},explorerUnitItemsPerDay:{fromKey:"explorerUnitItemsPerDay",toKey:"explorerUnitItemsPerDay",type:Number},explorerBonusPhalanxRange:{fromKey:"explorerBonusPhalanxRange",toKey:"explorerBonusPhalanxRange",type:Number},explorerBonusPlunderInactive:{fromKey:"explorerBonusPlunderInactive",toKey:"explorerBonusPlunderInactive",type:Boolean},explorerBonusExpeditionEnemyReduction:{fromKey:"explorerBonusExpeditionEnemyReduction",toKey:"explorerBonusExpeditionEnemyReduction",type:Number},explorerBonusAdditionalExpeditionSlots:{fromKey:"explorerBonusAdditionalExpeditionSlots",toKey:"explorerBonusAdditionalExpeditionSlots",type:Number},resourceProductionIncreaseCrystalDefault:{fromKey:"resourceProductionIncreaseCrystalDefault",toKey:"resourceProductionIncreaseCrystalDefault",type:Number},resourceProductionIncreaseCrystalPos1:{fromKey:"resourceProductionIncreaseCrystalPos1",toKey:"resourceProductionIncreaseCrystalPos1",type:Number},resourceProductionIncreaseCrystalPos2:{fromKey:"resourceProductionIncreaseCrystalPos2",toKey:"resourceProductionIncreaseCrystalPos2",type:Number},resourceProductionIncreaseCrystalPos3:{fromKey:"resourceProductionIncreaseCrystalPos3",toKey:"resourceProductionIncreaseCrystalPos3",type:Number},exodusRatioMetal:{fromKey:"exodusRatioMetal",toKey:"exodusRatioMetal",type:Number},exodusRatioCrystal:{fromKey:"exodusRatioCrystal",toKey:"exodusRatioCrystal",type:Number},exodusRatioDeuterium:{fromKey:"exodusRatioDeuterium",toKey:"exodusRatioDeuterium",type:Number},lifeformSettings:{fromKey:"lifeformSettings",toKey:"lifeformsEnabled",conversion:e=>null!=e}};class It{interval=432e5;meta;parser=new At.XMLParser({attributeNamePrefix:"",ignoreAttributes:!1,parseAttributeValue:!1});constructor(e){this.meta=e,this.init()}async init(){try{de(`initializing server settings updates for universe ${this.meta.serverId} ${this.meta.language.toUpperCase()}`);const e=await Fe(this.meta),t=await e.get("serverSettings","_lastUpdate"),r=Math.max(0,this.interval-(Date.now()-t));setTimeout((async()=>{await this.update()}),r)}catch(e){setTimeout((async()=>{await this.update()}),3e5)}}async update(){await this.updateServerSettings(),await this.init()}async updateServerSettings(){const{serverData:e}=await this.getXml("serverData.xml"),t=await this.getXml("highscore.xml?category=1&type=0"),r=Math.max(parseFloat(t.highscore.player[0].score),parseFloat(e.topScore)),a=(await Fe(this.meta)).transaction("serverSettings","readwrite"),n=a.objectStore("serverSettings");for(const t of Object.keys(Ft)){const r=Ft[t],a=e[t];let o;"type"in r?r.type==String?("string"!=typeof a&&"number"!=typeof a&&De(`Expected string or number, got object of type '${typeof a}' for key '${t}'`),o=a.toString()):r.type==Number?("string"!=typeof a&&"number"!=typeof a&&De(`Expected string or number, got object of type '${typeof a}' for key '${t}'`),o=tt(a)):r.type==Boolean?("string"!=typeof a&&"number"!=typeof a&&De(`Expected string or number, got object of type '${typeof a}' for key '${t}'`),o="1"==a):De("invalid type",r.type):o=r.conversion(a,e),await n.put(o,r.toKey)}await n.put(Date.now(),"_lastUpdate"),await n.put(r,"topScore"),await a.done;const o={type:Q.NotifyServerSettingsUpdate,ogameMeta:this.meta,senderUuid:Ge};await $e(o)}get apiUrlBase(){return`https://s${this.meta.serverId}-${this.meta.language}.ogame.gameforge.com/api`}async getXml(e){const t=`${this.apiUrlBase}/${e}`,r=await fetch(t,{cache:"no-cache"}),a=await r.text();return this.parser.parse(a)}}function Rt(e,t){const{serverId:r,language:a,playerId:n}=e,o=`s${r}-${a}`;return t?`${o}-${n}`:o}var Ot;function Lt(e,t){const r={...e};return Object.keys(t).forEach((e=>{const a=t[e];if(e in r){const t=r[e];if("object"==typeof t&&!(t instanceof Array))return void(r[e]=Lt(t,a))}r[e]=a})),r}!function(e){e.cs="cs",e.de="de",e.da="da",e.el="el",e.en="en",e["es-es"]="es-es",e["es-ar"]="es-ar",e["es-mx"]="es-mx",e.fr="fr",e.hr="hr",e.hu="hu",e.it="it",e.nl="nl",e.pl="pl",e["pt-br"]="pt-br",e["pt-pt"]="pt-pt",e.ro="ro",e.ru="ru",e.sl="sl",e.tr="tr",e["zh-tw"]="zh-tw"}(Ot||(Ot={})),Object.create,Object.create;var $t=Object.freeze({}),Nt=Array.isArray;function _t(e){return null==e}function Bt(e){return null!=e}function zt(e){return!0===e}function Ut(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function jt(e){return"function"==typeof e}function Ht(e){return null!==e&&"object"==typeof e}var Kt=Object.prototype.toString;function qt(e){return"[object Object]"===Kt.call(e)}function Gt(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function Vt(e){return Bt(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function Wt(e){return null==e?"":Array.isArray(e)||qt(e)&&e.toString===Kt?JSON.stringify(e,null,2):String(e)}function Yt(e){var t=parseFloat(e);return isNaN(t)?e:t}function Xt(e,t){for(var r=Object.create(null),a=e.split(","),n=0;n<a.length;n++)r[a[n]]=!0;return t?function(e){return r[e.toLowerCase()]}:function(e){return r[e]}}Xt("slot,component",!0);var Zt=Xt("key,ref,slot,slot-scope,is");function Qt(e,t){if(e.length){var r=e.indexOf(t);if(r>-1)return e.splice(r,1)}}var Jt=Object.prototype.hasOwnProperty;function er(e,t){return Jt.call(e,t)}function tr(e){var t=Object.create(null);return function(r){return t[r]||(t[r]=e(r))}}var rr=/-(\w)/g,ar=tr((function(e){return e.replace(rr,(function(e,t){return t?t.toUpperCase():""}))})),nr=tr((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),or=/\B([A-Z])/g,ir=tr((function(e){return e.replace(or,"-$1").toLowerCase()})),sr=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function r(r){var a=arguments.length;return a?a>1?e.apply(t,arguments):e.call(t,r):e.call(t)}return r._length=e.length,r};function lr(e,t){t=t||0;for(var r=e.length-t,a=new Array(r);r--;)a[r]=e[r+t];return a}function cr(e,t){for(var r in t)e[r]=t[r];return e}function dr(e){for(var t={},r=0;r<e.length;r++)e[r]&&cr(t,e[r]);return t}function ur(e,t,r){}var mr=function(e,t,r){return!1},pr=function(e){return e};function hr(e,t){if(e===t)return!0;var r=Ht(e),a=Ht(t);if(!r||!a)return!r&&!a&&String(e)===String(t);try{var n=Array.isArray(e),o=Array.isArray(t);if(n&&o)return e.length===t.length&&e.every((function(e,r){return hr(e,t[r])}));if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(n||o)return!1;var i=Object.keys(e),s=Object.keys(t);return i.length===s.length&&i.every((function(r){return hr(e[r],t[r])}))}catch(e){return!1}}function fr(e,t){for(var r=0;r<e.length;r++)if(hr(e[r],t))return r;return-1}function gr(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}function yr(e,t){return e===t?0===e&&1/e!=1/t:e==e||t==t}var vr="data-server-rendered",br=["component","directive","filter"],wr=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],xr={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:mr,isReservedAttr:mr,isUnknownElement:mr,getTagNamespace:ur,parsePlatformTagName:pr,mustUseProp:mr,async:!0,_lifecycleHooks:wr};function Sr(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function kr(e,t,r,a){Object.defineProperty(e,t,{value:r,enumerable:!!a,writable:!0,configurable:!0})}var Cr=new RegExp("[^".concat(/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/.source,".$_\\d]")),Tr="__proto__"in{},Pr="undefined"!=typeof window,Dr=Pr&&window.navigator.userAgent.toLowerCase(),Er=Dr&&/msie|trident/.test(Dr),Mr=Dr&&Dr.indexOf("msie 9.0")>0,Ar=Dr&&Dr.indexOf("edge/")>0;Dr&&Dr.indexOf("android");var Fr=Dr&&/iphone|ipad|ipod|ios/.test(Dr);Dr&&/chrome\/\d+/.test(Dr),Dr&&/phantomjs/.test(Dr);var Ir,Rr=Dr&&Dr.match(/firefox\/(\d+)/),Or={}.watch,Lr=!1;if(Pr)try{var $r={};Object.defineProperty($r,"passive",{get:function(){Lr=!0}}),window.addEventListener("test-passive",null,$r)}catch(e){}var Nr=function(){return void 0===Ir&&(Ir=!Pr&&void 0!==r.g&&r.g.process&&"server"===r.g.process.env.VUE_ENV),Ir},_r=Pr&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function Br(e){return"function"==typeof e&&/native code/.test(e.toString())}var zr,Ur="undefined"!=typeof Symbol&&Br(Symbol)&&"undefined"!=typeof Reflect&&Br(Reflect.ownKeys);zr="undefined"!=typeof Set&&Br(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var jr=null;function Hr(e){void 0===e&&(e=null),e||jr&&jr._scope.off(),jr=e,e&&e._scope.on()}var Kr=function(){function e(e,t,r,a,n,o,i,s){this.tag=e,this.data=t,this.children=r,this.text=a,this.elm=n,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=i,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(e.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),e}(),qr=function(e){void 0===e&&(e="");var t=new Kr;return t.text=e,t.isComment=!0,t};function Gr(e){return new Kr(void 0,void 0,void 0,String(e))}function Vr(e){var t=new Kr(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var Wr=0,Yr=function(){function e(){this.id=Wr++,this.subs=[]}return e.prototype.addSub=function(e){this.subs.push(e)},e.prototype.removeSub=function(e){Qt(this.subs,e)},e.prototype.depend=function(t){e.target&&e.target.addDep(this)},e.prototype.notify=function(e){for(var t=this.subs.slice(),r=0,a=t.length;r<a;r++)t[r].update()},e}();Yr.target=null;var Xr=[];function Zr(e){Xr.push(e),Yr.target=e}function Qr(){Xr.pop(),Yr.target=Xr[Xr.length-1]}var Jr=Array.prototype,ea=Object.create(Jr);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var t=Jr[e];kr(ea,e,(function(){for(var r=[],a=0;a<arguments.length;a++)r[a]=arguments[a];var n,o=t.apply(this,r),i=this.__ob__;switch(e){case"push":case"unshift":n=r;break;case"splice":n=r.slice(2)}return n&&i.observeArray(n),i.dep.notify(),o}))}));var ta=Object.getOwnPropertyNames(ea),ra={},aa=!0;function na(e){aa=e}var oa={notify:ur,depend:ur,addSub:ur,removeSub:ur},ia=function(){function e(e,t,r){if(void 0===t&&(t=!1),void 0===r&&(r=!1),this.value=e,this.shallow=t,this.mock=r,this.dep=r?oa:new Yr,this.vmCount=0,kr(e,"__ob__",this),Nt(e)){if(!r)if(Tr)e.__proto__=ea;else for(var a=0,n=ta.length;a<n;a++)kr(e,i=ta[a],ea[i]);t||this.observeArray(e)}else{var o=Object.keys(e);for(a=0;a<o.length;a++){var i;la(e,i=o[a],ra,void 0,t,r)}}}return e.prototype.observeArray=function(e){for(var t=0,r=e.length;t<r;t++)sa(e[t],!1,this.mock)},e}();function sa(e,t,r){var a;if(!(!Ht(e)||ha(e)||e instanceof Kr))return er(e,"__ob__")&&e.__ob__ instanceof ia?a=e.__ob__:!aa||!r&&Nr()||!Nt(e)&&!qt(e)||!Object.isExtensible(e)||e.__v_skip||(a=new ia(e,t,r)),a}function la(e,t,r,a,n,o){var i=new Yr,s=Object.getOwnPropertyDescriptor(e,t);if(!s||!1!==s.configurable){var l=s&&s.get,c=s&&s.set;l&&!c||r!==ra&&2!==arguments.length||(r=e[t]);var d=!n&&sa(r,!1,o);return Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=l?l.call(e):r;return Yr.target&&(i.depend(),d&&(d.dep.depend(),Nt(t)&&ua(t))),ha(t)&&!n?t.value:t},set:function(t){var a=l?l.call(e):r;if(yr(a,t)){if(c)c.call(e,t);else{if(l)return;if(ha(a)&&!ha(t))return void(a.value=t);r=t}d=!n&&sa(t,!1,o),i.notify()}}}),i}}function ca(e,t,r){if(!pa(e)){var a=e.__ob__;return Nt(e)&&Gt(t)?(e.length=Math.max(e.length,t),e.splice(t,1,r),a&&!a.shallow&&a.mock&&sa(r,!1,!0),r):t in e&&!(t in Object.prototype)?(e[t]=r,r):e._isVue||a&&a.vmCount?r:a?(la(a.value,t,r,void 0,a.shallow,a.mock),a.dep.notify(),r):(e[t]=r,r)}}function da(e,t){if(Nt(e)&&Gt(t))e.splice(t,1);else{var r=e.__ob__;e._isVue||r&&r.vmCount||pa(e)||er(e,t)&&(delete e[t],r&&r.dep.notify())}}function ua(e){for(var t=void 0,r=0,a=e.length;r<a;r++)(t=e[r])&&t.__ob__&&t.__ob__.dep.depend(),Nt(t)&&ua(t)}function ma(e){return function(e,t){pa(e)||sa(e,t,Nr())}(e,!0),kr(e,"__v_isShallow",!0),e}function pa(e){return!(!e||!e.__v_isReadonly)}function ha(e){return!(!e||!0!==e.__v_isRef)}function fa(e,t,r){Object.defineProperty(e,r,{enumerable:!0,configurable:!0,get:function(){var e=t[r];if(ha(e))return e.value;var a=e&&e.__ob__;return a&&a.dep.depend(),e},set:function(e){var a=t[r];ha(a)&&!ha(e)?a.value=e:t[r]=e}})}var ga,ya="watcher";"".concat(ya," callback"),"".concat(ya," getter"),"".concat(ya," cleanup");var va=function(){function e(e){void 0===e&&(e=!1),this.active=!0,this.effects=[],this.cleanups=[],!e&&ga&&(this.parent=ga,this.index=(ga.scopes||(ga.scopes=[])).push(this)-1)}return e.prototype.run=function(e){if(this.active){var t=ga;try{return ga=this,e()}finally{ga=t}}},e.prototype.on=function(){ga=this},e.prototype.off=function(){ga=this.parent},e.prototype.stop=function(e){if(this.active){var t=void 0,r=void 0;for(t=0,r=this.effects.length;t<r;t++)this.effects[t].teardown();for(t=0,r=this.cleanups.length;t<r;t++)this.cleanups[t]();if(this.scopes)for(t=0,r=this.scopes.length;t<r;t++)this.scopes[t].stop(!0);if(this.parent&&!e){var a=this.parent.scopes.pop();a&&a!==this&&(this.parent.scopes[this.index]=a,a.index=this.index)}this.active=!1}},e}();function ba(e,t){if(jr){var r=jr._provided,a=jr.$parent&&jr.$parent._provided;a===r&&(r=jr._provided=Object.create(a)),r[e]=t}}var wa=tr((function(e){var t="&"===e.charAt(0),r="~"===(e=t?e.slice(1):e).charAt(0),a="!"===(e=r?e.slice(1):e).charAt(0);return{name:e=a?e.slice(1):e,once:r,capture:a,passive:t}}));function xa(e,t){function r(){var e=r.fns;if(!Nt(e))return nn(e,null,arguments,t,"v-on handler");for(var a=e.slice(),n=0;n<a.length;n++)nn(a[n],null,arguments,t,"v-on handler")}return r.fns=e,r}function Sa(e,t,r,a,n,o){var i,s,l,c;for(i in e)s=e[i],l=t[i],c=wa(i),_t(s)||(_t(l)?(_t(s.fns)&&(s=e[i]=xa(s,o)),zt(c.once)&&(s=e[i]=n(c.name,s,c.capture)),r(c.name,s,c.capture,c.passive,c.params)):s!==l&&(l.fns=s,e[i]=l));for(i in t)_t(e[i])&&a((c=wa(i)).name,t[i],c.capture)}function ka(e,t,r){var a;e instanceof Kr&&(e=e.data.hook||(e.data.hook={}));var n=e[t];function o(){r.apply(this,arguments),Qt(a.fns,o)}_t(n)?a=xa([o]):Bt(n.fns)&&zt(n.merged)?(a=n).fns.push(o):a=xa([n,o]),a.merged=!0,e[t]=a}function Ca(e,t,r,a,n){if(Bt(t)){if(er(t,r))return e[r]=t[r],n||delete t[r],!0;if(er(t,a))return e[r]=t[a],n||delete t[a],!0}return!1}function Ta(e){return Ut(e)?[Gr(e)]:Nt(e)?Da(e):void 0}function Pa(e){return Bt(e)&&Bt(e.text)&&!1===e.isComment}function Da(e,t){var r,a,n,o,i=[];for(r=0;r<e.length;r++)_t(a=e[r])||"boolean"==typeof a||(o=i[n=i.length-1],Nt(a)?a.length>0&&(Pa((a=Da(a,"".concat(t||"","_").concat(r)))[0])&&Pa(o)&&(i[n]=Gr(o.text+a[0].text),a.shift()),i.push.apply(i,a)):Ut(a)?Pa(o)?i[n]=Gr(o.text+a):""!==a&&i.push(Gr(a)):Pa(a)&&Pa(o)?i[n]=Gr(o.text+a.text):(zt(e._isVList)&&Bt(a.tag)&&_t(a.key)&&Bt(t)&&(a.key="__vlist".concat(t,"_").concat(r,"__")),i.push(a)));return i}function Ea(e,t){var r,a,n,o,i=null;if(Nt(e)||"string"==typeof e)for(i=new Array(e.length),r=0,a=e.length;r<a;r++)i[r]=t(e[r],r);else if("number"==typeof e)for(i=new Array(e),r=0;r<e;r++)i[r]=t(r+1,r);else if(Ht(e))if(Ur&&e[Symbol.iterator]){i=[];for(var s=e[Symbol.iterator](),l=s.next();!l.done;)i.push(t(l.value,i.length)),l=s.next()}else for(n=Object.keys(e),i=new Array(n.length),r=0,a=n.length;r<a;r++)o=n[r],i[r]=t(e[o],o,r);return Bt(i)||(i=[]),i._isVList=!0,i}function Ma(e,t,r,a){var n,o=this.$scopedSlots[e];o?(r=r||{},a&&(r=cr(cr({},a),r)),n=o(r)||(jt(t)?t():t)):n=this.$slots[e]||(jt(t)?t():t);var i=r&&r.slot;return i?this.$createElement("template",{slot:i},n):n}function Aa(e){return lo(this.$options,"filters",e)||pr}function Fa(e,t){return Nt(e)?-1===e.indexOf(t):e!==t}function Ia(e,t,r,a,n){var o=xr.keyCodes[t]||r;return n&&a&&!xr.keyCodes[t]?Fa(n,a):o?Fa(o,e):a?ir(a)!==t:void 0===e}function Ra(e,t,r,a,n){if(r&&Ht(r)){Nt(r)&&(r=dr(r));var o=void 0,i=function(i){if("class"===i||"style"===i||Zt(i))o=e;else{var s=e.attrs&&e.attrs.type;o=a||xr.mustUseProp(t,s,i)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var l=ar(i),c=ir(i);l in o||c in o||(o[i]=r[i],n&&((e.on||(e.on={}))["update:".concat(i)]=function(e){r[i]=e}))};for(var s in r)i(s)}return e}function Oa(e,t){var r=this._staticTrees||(this._staticTrees=[]),a=r[e];return a&&!t||$a(a=r[e]=this.$options.staticRenderFns[e].call(this._renderProxy,this._c,this),"__static__".concat(e),!1),a}function La(e,t,r){return $a(e,"__once__".concat(t).concat(r?"_".concat(r):""),!0),e}function $a(e,t,r){if(Nt(e))for(var a=0;a<e.length;a++)e[a]&&"string"!=typeof e[a]&&Na(e[a],"".concat(t,"_").concat(a),r);else Na(e,t,r)}function Na(e,t,r){e.isStatic=!0,e.key=t,e.isOnce=r}function _a(e,t){if(t&&qt(t)){var r=e.on=e.on?cr({},e.on):{};for(var a in t){var n=r[a],o=t[a];r[a]=n?[].concat(n,o):o}}return e}function Ba(e,t,r,a){t=t||{$stable:!r};for(var n=0;n<e.length;n++){var o=e[n];Nt(o)?Ba(o,t,r):o&&(o.proxy&&(o.fn.proxy=!0),t[o.key]=o.fn)}return a&&(t.$key=a),t}function za(e,t){for(var r=0;r<t.length;r+=2){var a=t[r];"string"==typeof a&&a&&(e[t[r]]=t[r+1])}return e}function Ua(e,t){return"string"==typeof e?t+e:e}function ja(e){e._o=La,e._n=Yt,e._s=Wt,e._l=Ea,e._t=Ma,e._q=hr,e._i=fr,e._m=Oa,e._f=Aa,e._k=Ia,e._b=Ra,e._v=Gr,e._e=qr,e._u=Ba,e._g=_a,e._d=za,e._p=Ua}function Ha(e,t){if(!e||!e.length)return{};for(var r={},a=0,n=e.length;a<n;a++){var o=e[a],i=o.data;if(i&&i.attrs&&i.attrs.slot&&delete i.attrs.slot,o.context!==t&&o.fnContext!==t||!i||null==i.slot)(r.default||(r.default=[])).push(o);else{var s=i.slot,l=r[s]||(r[s]=[]);"template"===o.tag?l.push.apply(l,o.children||[]):l.push(o)}}for(var c in r)r[c].every(Ka)&&delete r[c];return r}function Ka(e){return e.isComment&&!e.asyncFactory||" "===e.text}function qa(e){return e.isComment&&e.asyncFactory}function Ga(e,t,r,a){var n,o=Object.keys(r).length>0,i=t?!!t.$stable:!o,s=t&&t.$key;if(t){if(t._normalized)return t._normalized;if(i&&a&&a!==$t&&s===a.$key&&!o&&!a.$hasNormal)return a;for(var l in n={},t)t[l]&&"$"!==l[0]&&(n[l]=Va(e,r,l,t[l]))}else n={};for(var c in r)c in n||(n[c]=Wa(r,c));return t&&Object.isExtensible(t)&&(t._normalized=n),kr(n,"$stable",i),kr(n,"$key",s),kr(n,"$hasNormal",o),n}function Va(e,t,r,a){var n=function(){var t=jr;Hr(e);var r=arguments.length?a.apply(null,arguments):a({}),n=(r=r&&"object"==typeof r&&!Nt(r)?[r]:Ta(r))&&r[0];return Hr(t),r&&(!n||1===r.length&&n.isComment&&!qa(n))?void 0:r};return a.proxy&&Object.defineProperty(t,r,{get:n,enumerable:!0,configurable:!0}),n}function Wa(e,t){return function(){return e[t]}}function Ya(e,t,r,a){var n=!1;for(var o in t)o in e?t[o]!==r[o]&&(n=!0):(n=!0,Xa(e,o,a));for(var o in e)o in t||(n=!0,delete e[o]);return n}function Xa(e,t,r){Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){return r.$attrs[t]}})}function Za(e,t){for(var r in t)e[r]=t[r];for(var r in e)r in t||delete e[r]}var Qa=null;function Ja(e,t){return(e.__esModule||Ur&&"Module"===e[Symbol.toStringTag])&&(e=e.default),Ht(e)?t.extend(e):e}function en(e){if(Nt(e))for(var t=0;t<e.length;t++){var r=e[t];if(Bt(r)&&(Bt(r.componentOptions)||qa(r)))return r}}function tn(e,t,r,a,n,o){return(Nt(r)||Ut(r))&&(n=a,a=r,r=void 0),zt(o)&&(n=2),function(e,t,r,a,n){if(Bt(r)&&Bt(r.__ob__))return qr();if(Bt(r)&&Bt(r.is)&&(t=r.is),!t)return qr();var o,i;if(Nt(a)&&jt(a[0])&&((r=r||{}).scopedSlots={default:a[0]},a.length=0),2===n?a=Ta(a):1===n&&(a=function(e){for(var t=0;t<e.length;t++)if(Nt(e[t]))return Array.prototype.concat.apply([],e);return e}(a)),"string"==typeof t){var s=void 0;i=e.$vnode&&e.$vnode.ns||xr.getTagNamespace(t),o=xr.isReservedTag(t)?new Kr(xr.parsePlatformTagName(t),r,a,void 0,void 0,e):r&&r.pre||!Bt(s=lo(e.$options,"components",t))?new Kr(t,r,a,void 0,void 0,e):Qn(s,r,e,a,t)}else o=Qn(t,r,e,a);return Nt(o)?o:Bt(o)?(Bt(i)&&rn(o,i),Bt(r)&&function(e){Ht(e.style)&&wn(e.style),Ht(e.class)&&wn(e.class)}(r),o):qr()}(e,t,r,a,n)}function rn(e,t,r){if(e.ns=t,"foreignObject"===e.tag&&(t=void 0,r=!0),Bt(e.children))for(var a=0,n=e.children.length;a<n;a++){var o=e.children[a];Bt(o.tag)&&(_t(o.ns)||zt(r)&&"svg"!==o.tag)&&rn(o,t,r)}}function an(e,t,r){Zr();try{if(t)for(var a=t;a=a.$parent;){var n=a.$options.errorCaptured;if(n)for(var o=0;o<n.length;o++)try{if(!1===n[o].call(a,e,t,r))return}catch(e){on(e,a,"errorCaptured hook")}}on(e,t,r)}finally{Qr()}}function nn(e,t,r,a,n){var o;try{(o=r?e.apply(t,r):e.call(t))&&!o._isVue&&Vt(o)&&!o._handled&&(o.catch((function(e){return an(e,a,n+" (Promise/async)")})),o._handled=!0)}catch(e){an(e,a,n)}return o}function on(e,t,r){if(xr.errorHandler)try{return xr.errorHandler.call(null,e,t,r)}catch(t){t!==e&&sn(t)}sn(e)}function sn(e,t,r){if(!Pr||"undefined"==typeof console)throw e;console.error(e)}var ln,cn=!1,dn=[],un=!1;function mn(){un=!1;var e=dn.slice(0);dn.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&Br(Promise)){var pn=Promise.resolve();ln=function(){pn.then(mn),Fr&&setTimeout(ur)},cn=!0}else if(Er||"undefined"==typeof MutationObserver||!Br(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())ln="undefined"!=typeof setImmediate&&Br(setImmediate)?function(){setImmediate(mn)}:function(){setTimeout(mn,0)};else{var hn=1,fn=new MutationObserver(mn),gn=document.createTextNode(String(hn));fn.observe(gn,{characterData:!0}),ln=function(){hn=(hn+1)%2,gn.data=String(hn)},cn=!0}function yn(e,t){var r;if(dn.push((function(){if(e)try{e.call(t)}catch(e){an(e,t,"nextTick")}else r&&r(t)})),un||(un=!0,ln()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){r=e}))}function vn(e){return function(t,r){if(void 0===r&&(r=jr),r)return function(e,t,r){var a=e.$options;a[t]=no(a[t],r)}(r,e,t)}}vn("beforeMount"),vn("mounted"),vn("beforeUpdate"),vn("updated"),vn("beforeDestroy"),vn("destroyed"),vn("errorCaptured"),vn("activated"),vn("deactivated"),vn("serverPrefetch"),vn("renderTracked"),vn("renderTriggered");var bn=new zr;function wn(e){return xn(e,bn),bn.clear(),e}function xn(e,t){var r,a,n=Nt(e);if(!(!n&&!Ht(e)||Object.isFrozen(e)||e instanceof Kr)){if(e.__ob__){var o=e.__ob__.dep.id;if(t.has(o))return;t.add(o)}if(n)for(r=e.length;r--;)xn(e[r],t);else if(ha(e))xn(e.value,t);else for(r=(a=Object.keys(e)).length;r--;)xn(e[a[r]],t)}}var Sn,kn=0,Cn=function(){function e(e,t,r,a,n){var o;void 0===(o=ga||(e?e._scope:void 0))&&(o=ga),o&&o.active&&o.effects.push(this),(this.vm=e)&&n&&(e._watcher=this),a?(this.deep=!!a.deep,this.user=!!a.user,this.lazy=!!a.lazy,this.sync=!!a.sync,this.before=a.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=r,this.id=++kn,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new zr,this.newDepIds=new zr,this.expression="",jt(t)?this.getter=t:(this.getter=function(e){if(!Cr.test(e)){var t=e.split(".");return function(e){for(var r=0;r<t.length;r++){if(!e)return;e=e[t[r]]}return e}}}(t),this.getter||(this.getter=ur)),this.value=this.lazy?void 0:this.get()}return e.prototype.get=function(){var e;Zr(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;an(e,t,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&wn(e),Qr(),this.cleanupDeps()}return e},e.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},e.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var r=this.depIds;this.depIds=this.newDepIds,this.newDepIds=r,this.newDepIds.clear(),r=this.deps,this.deps=this.newDeps,this.newDeps=r,this.newDeps.length=0},e.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;if(null==Nn[t]&&(e!==Yr.target||!e.noRecurse)){if(Nn[t]=!0,Bn){for(var r=Ln.length-1;r>zn&&Ln[r].id>e.id;)r--;Ln.splice(r+1,0,e)}else Ln.push(e);_n||(_n=!0,yn(Kn))}}(this)},e.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||Ht(e)||this.deep){var t=this.value;if(this.value=e,this.user){var r='callback for watcher "'.concat(this.expression,'"');nn(this.cb,this.vm,[e,t],this.vm,r)}else this.cb.call(this.vm,e,t)}}},e.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},e.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},e.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&Qt(this.vm._scope.effects,this),this.active){for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},e}();function Tn(e,t){Sn.$on(e,t)}function Pn(e,t){Sn.$off(e,t)}function Dn(e,t){var r=Sn;return function a(){var n=t.apply(null,arguments);null!==n&&r.$off(e,a)}}function En(e,t,r){Sn=e,Sa(t,r||{},Tn,Pn,Dn,e),Sn=void 0}var Mn=null;function An(e){var t=Mn;return Mn=e,function(){Mn=t}}function Fn(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function In(e,t){if(t){if(e._directInactive=!1,Fn(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var r=0;r<e.$children.length;r++)In(e.$children[r]);On(e,"activated")}}function Rn(e,t){if(!(t&&(e._directInactive=!0,Fn(e))||e._inactive)){e._inactive=!0;for(var r=0;r<e.$children.length;r++)Rn(e.$children[r]);On(e,"deactivated")}}function On(e,t,r,a){void 0===a&&(a=!0),Zr();var n=jr;a&&Hr(e);var o=e.$options[t],i="".concat(t," hook");if(o)for(var s=0,l=o.length;s<l;s++)nn(o[s],e,r||null,e,i);e._hasHookEvent&&e.$emit("hook:"+t),a&&Hr(n),Qr()}var Ln=[],$n=[],Nn={},_n=!1,Bn=!1,zn=0,Un=0,jn=Date.now;if(Pr&&!Er){var Hn=window.performance;Hn&&"function"==typeof Hn.now&&jn()>document.createEvent("Event").timeStamp&&(jn=function(){return Hn.now()})}function Kn(){var e,t;for(Un=jn(),Bn=!0,Ln.sort((function(e,t){return e.id-t.id})),zn=0;zn<Ln.length;zn++)(e=Ln[zn]).before&&e.before(),t=e.id,Nn[t]=null,e.run();var r=$n.slice(),a=Ln.slice();zn=Ln.length=$n.length=0,Nn={},_n=Bn=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,In(e[t],!0)}(r),function(e){for(var t=e.length;t--;){var r=e[t],a=r.vm;a&&a._watcher===r&&a._isMounted&&!a._isDestroyed&&On(a,"updated")}}(a),_r&&xr.devtools&&_r.emit("flush")}function qn(e,t){if(e){for(var r=Object.create(null),a=Ur?Reflect.ownKeys(e):Object.keys(e),n=0;n<a.length;n++){var o=a[n];if("__ob__"!==o){var i=e[o].from;if(i in t._provided)r[o]=t._provided[i];else if("default"in e[o]){var s=e[o].default;r[o]=jt(s)?s.call(t):s}}}return r}}function Gn(e,t,r,a,n){var o,i=this,s=n.options;er(a,"_uid")?(o=Object.create(a))._original=a:(o=a,a=a._original);var l=zt(s._compiled),c=!l;this.data=e,this.props=t,this.children=r,this.parent=a,this.listeners=e.on||$t,this.injections=qn(s.inject,a),this.slots=function(){return i.$slots||Ga(a,e.scopedSlots,i.$slots=Ha(r,a)),i.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return Ga(a,e.scopedSlots,this.slots())}}),l&&(this.$options=s,this.$slots=this.slots(),this.$scopedSlots=Ga(a,e.scopedSlots,this.$slots)),s._scopeId?this._c=function(e,t,r,n){var i=tn(o,e,t,r,n,c);return i&&!Nt(i)&&(i.fnScopeId=s._scopeId,i.fnContext=a),i}:this._c=function(e,t,r,a){return tn(o,e,t,r,a,c)}}function Vn(e,t,r,a,n){var o=Vr(e);return o.fnContext=r,o.fnOptions=a,t.slot&&((o.data||(o.data={})).slot=t.slot),o}function Wn(e,t){for(var r in t)e[ar(r)]=t[r]}function Yn(e){return e.name||e.__name||e._componentTag}ja(Gn.prototype);var Xn={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var r=e;Xn.prepatch(r,r)}else(e.componentInstance=function(e,t){var r={_isComponent:!0,_parentVnode:e,parent:t},a=e.data.inlineTemplate;return Bt(a)&&(r.render=a.render,r.staticRenderFns=a.staticRenderFns),new e.componentOptions.Ctor(r)}(e,Mn)).$mount(t?e.elm:void 0,t)},prepatch:function(e,t){var r=t.componentOptions;!function(e,t,r,a,n){var o=a.data.scopedSlots,i=e.$scopedSlots,s=!!(o&&!o.$stable||i!==$t&&!i.$stable||o&&e.$scopedSlots.$key!==o.$key||!o&&e.$scopedSlots.$key),l=!!(n||e.$options._renderChildren||s),c=e.$vnode;e.$options._parentVnode=a,e.$vnode=a,e._vnode&&(e._vnode.parent=a),e.$options._renderChildren=n;var d=a.data.attrs||$t;if(e._attrsProxy&&Ya(e._attrsProxy,d,c.data&&c.data.attrs||$t,e)&&(l=!0),e.$attrs=d,e.$listeners=r||$t,t&&e.$options.props){na(!1);for(var u=e._props,m=e.$options._propKeys||[],p=0;p<m.length;p++){var h=m[p],f=e.$options.props;u[h]=co(h,f,t,e)}na(!0),e.$options.propsData=t}r=r||$t;var g=e.$options._parentListeners;e.$options._parentListeners=r,En(e,r,g),l&&(e.$slots=Ha(n,a.context),e.$forceUpdate())}(t.componentInstance=e.componentInstance,r.propsData,r.listeners,t,r.children)},insert:function(e){var t,r=e.context,a=e.componentInstance;a._isMounted||(a._isMounted=!0,On(a,"mounted")),e.data.keepAlive&&(r._isMounted?((t=a)._inactive=!1,$n.push(t)):In(a,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?Rn(t,!0):t.$destroy())}},Zn=Object.keys(Xn);function Qn(e,t,r,a,n){if(!_t(e)){var o=r.$options._base;if(Ht(e)&&(e=o.extend(e)),"function"==typeof e){var i;if(_t(e.cid)&&(e=function(e,t){if(zt(e.error)&&Bt(e.errorComp))return e.errorComp;if(Bt(e.resolved))return e.resolved;var r=Qa;if(r&&Bt(e.owners)&&-1===e.owners.indexOf(r)&&e.owners.push(r),zt(e.loading)&&Bt(e.loadingComp))return e.loadingComp;if(r&&!Bt(e.owners)){var a=e.owners=[r],n=!0,o=null,i=null;r.$on("hook:destroyed",(function(){return Qt(a,r)}));var s=function(e){for(var t=0,r=a.length;t<r;t++)a[t].$forceUpdate();e&&(a.length=0,null!==o&&(clearTimeout(o),o=null),null!==i&&(clearTimeout(i),i=null))},l=gr((function(r){e.resolved=Ja(r,t),n?a.length=0:s(!0)})),c=gr((function(t){Bt(e.errorComp)&&(e.error=!0,s(!0))})),d=e(l,c);return Ht(d)&&(Vt(d)?_t(e.resolved)&&d.then(l,c):Vt(d.component)&&(d.component.then(l,c),Bt(d.error)&&(e.errorComp=Ja(d.error,t)),Bt(d.loading)&&(e.loadingComp=Ja(d.loading,t),0===d.delay?e.loading=!0:o=setTimeout((function(){o=null,_t(e.resolved)&&_t(e.error)&&(e.loading=!0,s(!1))}),d.delay||200)),Bt(d.timeout)&&(i=setTimeout((function(){i=null,_t(e.resolved)&&c(null)}),d.timeout)))),n=!1,e.loading?e.loadingComp:e.resolved}}(i=e,o),void 0===e))return function(e,t,r,a,n){var o=qr();return o.asyncFactory=e,o.asyncMeta={data:t,context:r,children:a,tag:n},o}(i,t,r,a,n);t=t||{},Co(e),Bt(t.model)&&function(e,t){var r=e.model&&e.model.prop||"value",a=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[r]=t.model.value;var n=t.on||(t.on={}),o=n[a],i=t.model.callback;Bt(o)?(Nt(o)?-1===o.indexOf(i):o!==i)&&(n[a]=[i].concat(o)):n[a]=i}(e.options,t);var s=function(e,t,r){var a=t.options.props;if(!_t(a)){var n={},o=e.attrs,i=e.props;if(Bt(o)||Bt(i))for(var s in a){var l=ir(s);Ca(n,i,s,l,!0)||Ca(n,o,s,l,!1)}return n}}(t,e);if(zt(e.options.functional))return function(e,t,r,a,n){var o=e.options,i={},s=o.props;if(Bt(s))for(var l in s)i[l]=co(l,s,t||$t);else Bt(r.attrs)&&Wn(i,r.attrs),Bt(r.props)&&Wn(i,r.props);var c=new Gn(r,i,n,a,e),d=o.render.call(null,c._c,c);if(d instanceof Kr)return Vn(d,r,c.parent,o);if(Nt(d)){for(var u=Ta(d)||[],m=new Array(u.length),p=0;p<u.length;p++)m[p]=Vn(u[p],r,c.parent,o);return m}}(e,s,t,r,a);var l=t.on;if(t.on=t.nativeOn,zt(e.options.abstract)){var c=t.slot;t={},c&&(t.slot=c)}!function(e){for(var t=e.hook||(e.hook={}),r=0;r<Zn.length;r++){var a=Zn[r],n=t[a],o=Xn[a];n===o||n&&n._merged||(t[a]=n?Jn(o,n):o)}}(t);var d=Yn(e.options)||n;return new Kr("vue-component-".concat(e.cid).concat(d?"-".concat(d):""),t,void 0,void 0,void 0,r,{Ctor:e,propsData:s,listeners:l,tag:n,children:a},i)}}}function Jn(e,t){var r=function(r,a){e(r,a),t(r,a)};return r._merged=!0,r}var eo=ur,to=xr.optionMergeStrategies;function ro(e,t){if(!t)return e;for(var r,a,n,o=Ur?Reflect.ownKeys(t):Object.keys(t),i=0;i<o.length;i++)"__ob__"!==(r=o[i])&&(a=e[r],n=t[r],er(e,r)?a!==n&&qt(a)&&qt(n)&&ro(a,n):ca(e,r,n));return e}function ao(e,t,r){return r?function(){var a=jt(t)?t.call(r,r):t,n=jt(e)?e.call(r,r):e;return a?ro(a,n):n}:t?e?function(){return ro(jt(t)?t.call(this,this):t,jt(e)?e.call(this,this):e)}:t:e}function no(e,t){var r=t?e?e.concat(t):Nt(t)?t:[t]:e;return r?function(e){for(var t=[],r=0;r<e.length;r++)-1===t.indexOf(e[r])&&t.push(e[r]);return t}(r):r}function oo(e,t,r,a){var n=Object.create(e||null);return t?cr(n,t):n}to.data=function(e,t,r){return r?ao(e,t,r):t&&"function"!=typeof t?e:ao(e,t)},wr.forEach((function(e){to[e]=no})),br.forEach((function(e){to[e+"s"]=oo})),to.watch=function(e,t,r,a){if(e===Or&&(e=void 0),t===Or&&(t=void 0),!t)return Object.create(e||null);if(!e)return t;var n={};for(var o in cr(n,e),t){var i=n[o],s=t[o];i&&!Nt(i)&&(i=[i]),n[o]=i?i.concat(s):Nt(s)?s:[s]}return n},to.props=to.methods=to.inject=to.computed=function(e,t,r,a){if(!e)return t;var n=Object.create(null);return cr(n,e),t&&cr(n,t),n},to.provide=ao;var io=function(e,t){return void 0===t?e:t};function so(e,t,r){if(jt(t)&&(t=t.options),function(e,t){var r=e.props;if(r){var a,n,o={};if(Nt(r))for(a=r.length;a--;)"string"==typeof(n=r[a])&&(o[ar(n)]={type:null});else if(qt(r))for(var i in r)n=r[i],o[ar(i)]=qt(n)?n:{type:n};e.props=o}}(t),function(e,t){var r=e.inject;if(r){var a=e.inject={};if(Nt(r))for(var n=0;n<r.length;n++)a[r[n]]={from:r[n]};else if(qt(r))for(var o in r){var i=r[o];a[o]=qt(i)?cr({from:o},i):{from:i}}}}(t),function(e){var t=e.directives;if(t)for(var r in t){var a=t[r];jt(a)&&(t[r]={bind:a,update:a})}}(t),!t._base&&(t.extends&&(e=so(e,t.extends,r)),t.mixins))for(var a=0,n=t.mixins.length;a<n;a++)e=so(e,t.mixins[a],r);var o,i={};for(o in e)s(o);for(o in t)er(e,o)||s(o);function s(a){var n=to[a]||io;i[a]=n(e[a],t[a],r,a)}return i}function lo(e,t,r,a){if("string"==typeof r){var n=e[t];if(er(n,r))return n[r];var o=ar(r);if(er(n,o))return n[o];var i=nr(o);return er(n,i)?n[i]:n[r]||n[o]||n[i]}}function co(e,t,r,a){var n=t[e],o=!er(r,e),i=r[e],s=ho(Boolean,n.type);if(s>-1)if(o&&!er(n,"default"))i=!1;else if(""===i||i===ir(e)){var l=ho(String,n.type);(l<0||s<l)&&(i=!0)}if(void 0===i){i=function(e,t,r){if(er(t,"default")){var a=t.default;return e&&e.$options.propsData&&void 0===e.$options.propsData[r]&&void 0!==e._props[r]?e._props[r]:jt(a)&&"Function"!==mo(t.type)?a.call(e):a}}(a,n,e);var c=aa;na(!0),sa(i),na(c)}return i}var uo=/^\s*function (\w+)/;function mo(e){var t=e&&e.toString().match(uo);return t?t[1]:""}function po(e,t){return mo(e)===mo(t)}function ho(e,t){if(!Nt(t))return po(t,e)?0:-1;for(var r=0,a=t.length;r<a;r++)if(po(t[r],e))return r;return-1}var fo={enumerable:!0,configurable:!0,get:ur,set:ur};function go(e,t,r){fo.get=function(){return this[t][r]},fo.set=function(e){this[t][r]=e},Object.defineProperty(e,r,fo)}function yo(e){var t=e.$options;if(t.props&&function(e,t){var r=e.$options.propsData||{},a=e._props=ma({}),n=e.$options._propKeys=[];e.$parent&&na(!1);var o=function(o){n.push(o);var i=co(o,t,r,e);la(a,o,i),o in e||go(e,"_props",o)};for(var i in t)o(i);na(!0)}(e,t.props),function(e){var t=e.$options,r=t.setup;if(r){var a=e._setupContext=function(e){return{get attrs(){return function(e){if(!e._attrsProxy){var t=e._attrsProxy={};kr(t,"_v_attr_proxy",!0),Ya(t,e.$attrs,$t,e)}return e._attrsProxy}(e)},get slots(){return function(e){return e._slotsProxy||Za(e._slotsProxy={},e.$scopedSlots),e._slotsProxy}(e)},emit:sr(e.$emit,e),expose:function(t){t&&Object.keys(t).forEach((function(r){return fa(e,t,r)}))}}}(e);Hr(e),Zr();var n=nn(r,null,[e._props||ma({}),a],e,"setup");if(Qr(),Hr(),jt(n))t.render=n;else if(Ht(n))if(e._setupState=n,n.__sfc){var o=e._setupProxy={};for(var i in n)"__sfc"!==i&&fa(o,n,i)}else for(var i in n)Sr(i)||fa(e,n,i)}}(e),t.methods&&function(e,t){for(var r in e.$options.props,t)e[r]="function"!=typeof t[r]?ur:sr(t[r],e)}(e,t.methods),t.data)!function(e){var t=e.$options.data;qt(t=e._data=jt(t)?function(e,t){Zr();try{return e.call(t,t)}catch(e){return an(e,t,"data()"),{}}finally{Qr()}}(t,e):t||{})||(t={});for(var r=Object.keys(t),a=e.$options.props,n=(e.$options.methods,r.length);n--;){var o=r[n];a&&er(a,o)||Sr(o)||go(e,"_data",o)}var i=sa(t);i&&i.vmCount++}(e);else{var r=sa(e._data={});r&&r.vmCount++}t.computed&&function(e,t){var r=e._computedWatchers=Object.create(null),a=Nr();for(var n in t){var o=t[n],i=jt(o)?o:o.get;a||(r[n]=new Cn(e,i||ur,ur,vo)),n in e||bo(e,n,o)}}(e,t.computed),t.watch&&t.watch!==Or&&function(e,t){for(var r in t){var a=t[r];if(Nt(a))for(var n=0;n<a.length;n++)So(e,r,a[n]);else So(e,r,a)}}(e,t.watch)}var vo={lazy:!0};function bo(e,t,r){var a=!Nr();jt(r)?(fo.get=a?wo(t):xo(r),fo.set=ur):(fo.get=r.get?a&&!1!==r.cache?wo(t):xo(r.get):ur,fo.set=r.set||ur),Object.defineProperty(e,t,fo)}function wo(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),Yr.target&&t.depend(),t.value}}function xo(e){return function(){return e.call(this,this)}}function So(e,t,r,a){return qt(r)&&(a=r,r=r.handler),"string"==typeof r&&(r=e[r]),e.$watch(t,r,a)}var ko=0;function Co(e){var t=e.options;if(e.super){var r=Co(e.super);if(r!==e.superOptions){e.superOptions=r;var a=function(e){var t,r=e.options,a=e.sealedOptions;for(var n in r)r[n]!==a[n]&&(t||(t={}),t[n]=r[n]);return t}(e);a&&cr(e.extendOptions,a),(t=e.options=so(r,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function To(e){this._init(e)}function Po(e){return e&&(Yn(e.Ctor.options)||e.tag)}function Do(e,t){return Nt(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:(r=e,!("[object RegExp]"!==Kt.call(r))&&e.test(t));var r}function Eo(e,t){var r=e.cache,a=e.keys,n=e._vnode;for(var o in r){var i=r[o];if(i){var s=i.name;s&&!t(s)&&Mo(r,o,a,n)}}}function Mo(e,t,r,a){var n=e[t];!n||a&&n.tag===a.tag||n.componentInstance.$destroy(),e[t]=null,Qt(r,t)}To.prototype._init=function(e){var t=this;t._uid=ko++,t._isVue=!0,t.__v_skip=!0,t._scope=new va(!0),e&&e._isComponent?function(e,t){var r=e.$options=Object.create(e.constructor.options),a=t._parentVnode;r.parent=t.parent,r._parentVnode=a;var n=a.componentOptions;r.propsData=n.propsData,r._parentListeners=n.listeners,r._renderChildren=n.children,r._componentTag=n.tag,t.render&&(r.render=t.render,r.staticRenderFns=t.staticRenderFns)}(t,e):t.$options=so(Co(t.constructor),e||{},t),t._renderProxy=t,t._self=t,function(e){var t=e.$options,r=t.parent;if(r&&!t.abstract){for(;r.$options.abstract&&r.$parent;)r=r.$parent;r.$children.push(e)}e.$parent=r,e.$root=r?r.$root:e,e.$children=[],e.$refs={},e._provided=r?r._provided:Object.create(null),e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(t),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&En(e,t)}(t),function(e){e._vnode=null,e._staticTrees=null;var t=e.$options,r=e.$vnode=t._parentVnode,a=r&&r.context;e.$slots=Ha(t._renderChildren,a),e.$scopedSlots=$t,e._c=function(t,r,a,n){return tn(e,t,r,a,n,!1)},e.$createElement=function(t,r,a,n){return tn(e,t,r,a,n,!0)};var n=r&&r.data;la(e,"$attrs",n&&n.attrs||$t,null,!0),la(e,"$listeners",t._parentListeners||$t,null,!0)}(t),On(t,"beforeCreate",void 0,!1),function(e){var t=qn(e.$options.inject,e);t&&(na(!1),Object.keys(t).forEach((function(r){la(e,r,t[r])})),na(!0))}(t),yo(t),function(e){var t=e.$options.provide;if(t){var r=jt(t)?t.call(e):t;if(!Ht(r))return;var a=Ur?Reflect.ownKeys(r):Object.keys(r);Hr(e);for(var n=0;n<a.length;n++)ba(a[n],r[a[n]]);Hr()}}(t),On(t,"created"),t.$options.el&&t.$mount(t.$options.el)},function(e){Object.defineProperty(e.prototype,"$data",{get:function(){return this._data}}),Object.defineProperty(e.prototype,"$props",{get:function(){return this._props}}),e.prototype.$set=ca,e.prototype.$delete=da,e.prototype.$watch=function(e,t,r){var a=this;if(qt(t))return So(a,e,t,r);(r=r||{}).user=!0;var n=new Cn(a,e,t,r);if(r.immediate){var o='callback for immediate watcher "'.concat(n.expression,'"');Zr(),nn(t,a,[n.value],a,o),Qr()}return function(){n.teardown()}}}(To),function(e){var t=/^hook:/;e.prototype.$on=function(e,r){var a=this;if(Nt(e))for(var n=0,o=e.length;n<o;n++)a.$on(e[n],r);else(a._events[e]||(a._events[e]=[])).push(r),t.test(e)&&(a._hasHookEvent=!0);return a},e.prototype.$once=function(e,t){var r=this;function a(){r.$off(e,a),t.apply(r,arguments)}return a.fn=t,r.$on(e,a),r},e.prototype.$off=function(e,t){var r=this;if(!arguments.length)return r._events=Object.create(null),r;if(Nt(e)){for(var a=0,n=e.length;a<n;a++)r.$off(e[a],t);return r}var o,i=r._events[e];if(!i)return r;if(!t)return r._events[e]=null,r;for(var s=i.length;s--;)if((o=i[s])===t||o.fn===t){i.splice(s,1);break}return r},e.prototype.$emit=function(e){var t=this,r=t._events[e];if(r){r=r.length>1?lr(r):r;for(var a=lr(arguments,1),n='event handler for "'.concat(e,'"'),o=0,i=r.length;o<i;o++)nn(r[o],t,a,t,n)}return t}}(To),function(e){e.prototype._update=function(e,t){var r=this,a=r.$el,n=r._vnode,o=An(r);r._vnode=e,r.$el=n?r.__patch__(n,e):r.__patch__(r.$el,e,t,!1),o(),a&&(a.__vue__=null),r.$el&&(r.$el.__vue__=r),r.$vnode&&r.$parent&&r.$vnode===r.$parent._vnode&&(r.$parent.$el=r.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){On(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||Qt(t.$children,e),e._scope.stop(),e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),On(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(To),function(e){ja(e.prototype),e.prototype.$nextTick=function(e){return yn(e,this)},e.prototype._render=function(){var e,t=this,r=t.$options,a=r.render,n=r._parentVnode;n&&(t.$scopedSlots=Ga(t.$parent,n.data.scopedSlots,t.$slots,t.$scopedSlots),t._slotsProxy&&Za(t._slotsProxy,t.$scopedSlots)),t.$vnode=n;try{Hr(t),Qa=t,e=a.call(t._renderProxy,t.$createElement)}catch(r){an(r,t,"render"),e=t._vnode}finally{Qa=null,Hr()}return Nt(e)&&1===e.length&&(e=e[0]),e instanceof Kr||(e=qr()),e.parent=n,e}}(To);var Ao=[String,RegExp,Array],Fo={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Ao,exclude:Ao,max:[String,Number]},methods:{cacheVNode:function(){var e=this,t=e.cache,r=e.keys,a=e.vnodeToCache,n=e.keyToCache;if(a){var o=a.tag,i=a.componentInstance,s=a.componentOptions;t[n]={name:Po(s),tag:o,componentInstance:i},r.push(n),this.max&&r.length>parseInt(this.max)&&Mo(t,r[0],r,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)Mo(this.cache,e,this.keys)},mounted:function(){var e=this;this.cacheVNode(),this.$watch("include",(function(t){Eo(e,(function(e){return Do(t,e)}))})),this.$watch("exclude",(function(t){Eo(e,(function(e){return!Do(t,e)}))}))},updated:function(){this.cacheVNode()},render:function(){var e=this.$slots.default,t=en(e),r=t&&t.componentOptions;if(r){var a=Po(r),n=this.include,o=this.exclude;if(n&&(!a||!Do(n,a))||o&&a&&Do(o,a))return t;var i=this.cache,s=this.keys,l=null==t.key?r.Ctor.cid+(r.tag?"::".concat(r.tag):""):t.key;i[l]?(t.componentInstance=i[l].componentInstance,Qt(s,l),s.push(l)):(this.vnodeToCache=t,this.keyToCache=l),t.data.keepAlive=!0}return t||e&&e[0]}}};!function(e){var t={get:function(){return xr}};Object.defineProperty(e,"config",t),e.util={warn:eo,extend:cr,mergeOptions:so,defineReactive:la},e.set=ca,e.delete=da,e.nextTick=yn,e.observable=function(e){return sa(e),e},e.options=Object.create(null),br.forEach((function(t){e.options[t+"s"]=Object.create(null)})),e.options._base=e,cr(e.options.components,Fo),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var r=lr(arguments,1);return r.unshift(this),jt(e.install)?e.install.apply(e,r):jt(e)&&e.apply(null,r),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=so(this.options,e),this}}(e),function(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var r=this,a=r.cid,n=e._Ctor||(e._Ctor={});if(n[a])return n[a];var o=Yn(e)||Yn(r.options),i=function(e){this._init(e)};return(i.prototype=Object.create(r.prototype)).constructor=i,i.cid=t++,i.options=so(r.options,e),i.super=r,i.options.props&&function(e){var t=e.options.props;for(var r in t)go(e.prototype,"_props",r)}(i),i.options.computed&&function(e){var t=e.options.computed;for(var r in t)bo(e.prototype,r,t[r])}(i),i.extend=r.extend,i.mixin=r.mixin,i.use=r.use,br.forEach((function(e){i[e]=r[e]})),o&&(i.options.components[o]=i),i.superOptions=r.options,i.extendOptions=e,i.sealedOptions=cr({},i.options),n[a]=i,i}}(e),function(e){br.forEach((function(t){e[t]=function(e,r){return r?("component"===t&&qt(r)&&(r.name=r.name||e,r=this.options._base.extend(r)),"directive"===t&&jt(r)&&(r={bind:r,update:r}),this.options[t+"s"][e]=r,r):this.options[t+"s"][e]}}))}(e)}(To),Object.defineProperty(To.prototype,"$isServer",{get:Nr}),Object.defineProperty(To.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(To,"FunctionalRenderContext",{value:Gn}),To.version="2.7.5";var Io=Xt("style,class"),Ro=Xt("input,textarea,option,select,progress"),Oo=Xt("contenteditable,draggable,spellcheck"),Lo=Xt("events,caret,typing,plaintext-only"),$o=Xt("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),No="http://www.w3.org/1999/xlink",_o=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},Bo=function(e){return _o(e)?e.slice(6,e.length):""},zo=function(e){return null==e||!1===e};function Uo(e,t){return{staticClass:jo(e.staticClass,t.staticClass),class:Bt(e.class)?[e.class,t.class]:t.class}}function jo(e,t){return e?t?e+" "+t:e:t||""}function Ho(e){return Array.isArray(e)?function(e){for(var t,r="",a=0,n=e.length;a<n;a++)Bt(t=Ho(e[a]))&&""!==t&&(r&&(r+=" "),r+=t);return r}(e):Ht(e)?function(e){var t="";for(var r in e)e[r]&&(t&&(t+=" "),t+=r);return t}(e):"string"==typeof e?e:""}var Ko={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},qo=Xt("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Go=Xt("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Vo=function(e){return qo(e)||Go(e)},Wo=Object.create(null),Yo=Xt("text,number,password,search,email,tel,url"),Xo=Object.freeze({__proto__:null,createElement:function(e,t){var r=document.createElement(e);return"select"!==e||t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&r.setAttribute("multiple","multiple"),r},createElementNS:function(e,t){return document.createElementNS(Ko[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,r){e.insertBefore(t,r)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),Zo={create:function(e,t){Qo(t)},update:function(e,t){e.data.ref!==t.data.ref&&(Qo(e,!0),Qo(t))},destroy:function(e){Qo(e,!0)}};function Qo(e,t){var r=e.data.ref;if(Bt(r)){var a=e.context,n=e.componentInstance||e.elm,o=t?null:n,i=t?void 0:n;if(jt(r))nn(r,a,[o],a,"template ref function");else{var s=e.data.refInFor,l="string"==typeof r||"number"==typeof r,c=ha(r),d=a.$refs;if(l||c)if(s){var u=l?d[r]:r.value;t?Nt(u)&&Qt(u,n):Nt(u)?u.includes(n)||u.push(n):l?(d[r]=[n],Jo(a,r,d[r])):r.value=[n]}else if(l){if(t&&d[r]!==n)return;d[r]=i,Jo(a,r,o)}else if(c){if(t&&r.value!==n)return;r.value=o}}}}function Jo(e,t,r){var a=e._setupState;a&&er(a,t)&&(ha(a[t])?a[t].value=r:a[t]=r)}var ei=new Kr("",{},[]),ti=["create","activate","update","remove","destroy"];function ri(e,t){return e.key===t.key&&e.asyncFactory===t.asyncFactory&&(e.tag===t.tag&&e.isComment===t.isComment&&Bt(e.data)===Bt(t.data)&&function(e,t){if("input"!==e.tag)return!0;var r,a=Bt(r=e.data)&&Bt(r=r.attrs)&&r.type,n=Bt(r=t.data)&&Bt(r=r.attrs)&&r.type;return a===n||Yo(a)&&Yo(n)}(e,t)||zt(e.isAsyncPlaceholder)&&_t(t.asyncFactory.error))}function ai(e,t,r){var a,n,o={};for(a=t;a<=r;++a)Bt(n=e[a].key)&&(o[n]=a);return o}var ni={create:oi,update:oi,destroy:function(e){oi(e,ei)}};function oi(e,t){(e.data.directives||t.data.directives)&&function(e,t){var r,a,n,o=e===ei,i=t===ei,s=si(e.data.directives,e.context),l=si(t.data.directives,t.context),c=[],d=[];for(r in l)a=s[r],n=l[r],a?(n.oldValue=a.value,n.oldArg=a.arg,ci(n,"update",t,e),n.def&&n.def.componentUpdated&&d.push(n)):(ci(n,"bind",t,e),n.def&&n.def.inserted&&c.push(n));if(c.length){var u=function(){for(var r=0;r<c.length;r++)ci(c[r],"inserted",t,e)};o?ka(t,"insert",u):u()}if(d.length&&ka(t,"postpatch",(function(){for(var r=0;r<d.length;r++)ci(d[r],"componentUpdated",t,e)})),!o)for(r in s)l[r]||ci(s[r],"unbind",e,e,i)}(e,t)}var ii=Object.create(null);function si(e,t){var r,a,n=Object.create(null);if(!e)return n;for(r=0;r<e.length;r++)(a=e[r]).modifiers||(a.modifiers=ii),n[li(a)]=a,t._setupState&&t._setupState.__sfc&&(a.def=a.def||lo(t,"_setupState","v-"+a.name)),a.def=a.def||lo(t.$options,"directives",a.name);return n}function li(e){return e.rawName||"".concat(e.name,".").concat(Object.keys(e.modifiers||{}).join("."))}function ci(e,t,r,a,n){var o=e.def&&e.def[t];if(o)try{o(r.elm,e,r,a,n)}catch(a){an(a,r.context,"directive ".concat(e.name," ").concat(t," hook"))}}var di=[Zo,ni];function ui(e,t){var r=t.componentOptions;if(!(Bt(r)&&!1===r.Ctor.options.inheritAttrs||_t(e.data.attrs)&&_t(t.data.attrs))){var a,n,o=t.elm,i=e.data.attrs||{},s=t.data.attrs||{};for(a in(Bt(s.__ob__)||zt(s._v_attr_proxy))&&(s=t.data.attrs=cr({},s)),s)n=s[a],i[a]!==n&&mi(o,a,n,t.data.pre);for(a in(Er||Ar)&&s.value!==i.value&&mi(o,"value",s.value),i)_t(s[a])&&(_o(a)?o.removeAttributeNS(No,Bo(a)):Oo(a)||o.removeAttribute(a))}}function mi(e,t,r,a){a||e.tagName.indexOf("-")>-1?pi(e,t,r):$o(t)?zo(r)?e.removeAttribute(t):(r="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,r)):Oo(t)?e.setAttribute(t,function(e,t){return zo(t)||"false"===t?"false":"contenteditable"===e&&Lo(t)?t:"true"}(t,r)):_o(t)?zo(r)?e.removeAttributeNS(No,Bo(t)):e.setAttributeNS(No,t,r):pi(e,t,r)}function pi(e,t,r){if(zo(r))e.removeAttribute(t);else{if(Er&&!Mr&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==r&&!e.__ieph){var a=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",a)};e.addEventListener("input",a),e.__ieph=!0}e.setAttribute(t,r)}}var hi={create:ui,update:ui};function fi(e,t){var r=t.elm,a=t.data,n=e.data;if(!(_t(a.staticClass)&&_t(a.class)&&(_t(n)||_t(n.staticClass)&&_t(n.class)))){var o=function(e){for(var t=e.data,r=e,a=e;Bt(a.componentInstance);)(a=a.componentInstance._vnode)&&a.data&&(t=Uo(a.data,t));for(;Bt(r=r.parent);)r&&r.data&&(t=Uo(t,r.data));return n=t.staticClass,o=t.class,Bt(n)||Bt(o)?jo(n,Ho(o)):"";var n,o}(t),i=r._transitionClasses;Bt(i)&&(o=jo(o,Ho(i))),o!==r._prevClass&&(r.setAttribute("class",o),r._prevClass=o)}}var gi,yi={create:fi,update:fi};function vi(e,t,r){var a=gi;return function n(){var o=t.apply(null,arguments);null!==o&&xi(e,n,r,a)}}var bi=cn&&!(Rr&&Number(Rr[1])<=53);function wi(e,t,r,a){if(bi){var n=Un,o=t;t=o._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=n||e.timeStamp<=0||e.target.ownerDocument!==document)return o.apply(this,arguments)}}gi.addEventListener(e,t,Lr?{capture:r,passive:a}:r)}function xi(e,t,r,a){(a||gi).removeEventListener(e,t._wrapper||t,r)}function Si(e,t){if(!_t(e.data.on)||!_t(t.data.on)){var r=t.data.on||{},a=e.data.on||{};gi=t.elm||e.elm,function(e){if(Bt(e.__r)){var t=Er?"change":"input";e[t]=[].concat(e.__r,e[t]||[]),delete e.__r}Bt(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(r),Sa(r,a,wi,xi,vi,t.context),gi=void 0}}var ki,Ci={create:Si,update:Si,destroy:function(e){return Si(e,ei)}};function Ti(e,t){if(!_t(e.data.domProps)||!_t(t.data.domProps)){var r,a,n=t.elm,o=e.data.domProps||{},i=t.data.domProps||{};for(r in(Bt(i.__ob__)||zt(i._v_attr_proxy))&&(i=t.data.domProps=cr({},i)),o)r in i||(n[r]="");for(r in i){if(a=i[r],"textContent"===r||"innerHTML"===r){if(t.children&&(t.children.length=0),a===o[r])continue;1===n.childNodes.length&&n.removeChild(n.childNodes[0])}if("value"===r&&"PROGRESS"!==n.tagName){n._value=a;var s=_t(a)?"":String(a);Pi(n,s)&&(n.value=s)}else if("innerHTML"===r&&Go(n.tagName)&&_t(n.innerHTML)){(ki=ki||document.createElement("div")).innerHTML="<svg>".concat(a,"</svg>");for(var l=ki.firstChild;n.firstChild;)n.removeChild(n.firstChild);for(;l.firstChild;)n.appendChild(l.firstChild)}else if(a!==o[r])try{n[r]=a}catch(e){}}}}function Pi(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var r=!0;try{r=document.activeElement!==e}catch(e){}return r&&e.value!==t}(e,t)||function(e,t){var r=e.value,a=e._vModifiers;if(Bt(a)){if(a.number)return Yt(r)!==Yt(t);if(a.trim)return r.trim()!==t.trim()}return r!==t}(e,t))}var Di={create:Ti,update:Ti},Ei=tr((function(e){var t={},r=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var a=e.split(r);a.length>1&&(t[a[0].trim()]=a[1].trim())}})),t}));function Mi(e){var t=Ai(e.style);return e.staticStyle?cr(e.staticStyle,t):t}function Ai(e){return Array.isArray(e)?dr(e):"string"==typeof e?Ei(e):e}var Fi,Ii=/^--/,Ri=/\s*!important$/,Oi=function(e,t,r){if(Ii.test(t))e.style.setProperty(t,r);else if(Ri.test(r))e.style.setProperty(ir(t),r.replace(Ri,""),"important");else{var a=$i(t);if(Array.isArray(r))for(var n=0,o=r.length;n<o;n++)e.style[a]=r[n];else e.style[a]=r}},Li=["Webkit","Moz","ms"],$i=tr((function(e){if(Fi=Fi||document.createElement("div").style,"filter"!==(e=ar(e))&&e in Fi)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<Li.length;r++){var a=Li[r]+t;if(a in Fi)return a}}));function Ni(e,t){var r=t.data,a=e.data;if(!(_t(r.staticStyle)&&_t(r.style)&&_t(a.staticStyle)&&_t(a.style))){var n,o,i=t.elm,s=a.staticStyle,l=a.normalizedStyle||a.style||{},c=s||l,d=Ai(t.data.style)||{};t.data.normalizedStyle=Bt(d.__ob__)?cr({},d):d;var u=function(e,t){for(var r,a={},n=e;n.componentInstance;)(n=n.componentInstance._vnode)&&n.data&&(r=Mi(n.data))&&cr(a,r);(r=Mi(e.data))&&cr(a,r);for(var o=e;o=o.parent;)o.data&&(r=Mi(o.data))&&cr(a,r);return a}(t);for(o in c)_t(u[o])&&Oi(i,o,"");for(o in u)(n=u[o])!==c[o]&&Oi(i,o,null==n?"":n)}}var _i={create:Ni,update:Ni},Bi=/\s+/;function zi(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(Bi).forEach((function(t){return e.classList.add(t)})):e.classList.add(t);else{var r=" ".concat(e.getAttribute("class")||""," ");r.indexOf(" "+t+" ")<0&&e.setAttribute("class",(r+t).trim())}}function Ui(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(Bi).forEach((function(t){return e.classList.remove(t)})):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var r=" ".concat(e.getAttribute("class")||""," "),a=" "+t+" ";r.indexOf(a)>=0;)r=r.replace(a," ");(r=r.trim())?e.setAttribute("class",r):e.removeAttribute("class")}}function ji(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&cr(t,Hi(e.name||"v")),cr(t,e),t}return"string"==typeof e?Hi(e):void 0}}var Hi=tr((function(e){return{enterClass:"".concat(e,"-enter"),enterToClass:"".concat(e,"-enter-to"),enterActiveClass:"".concat(e,"-enter-active"),leaveClass:"".concat(e,"-leave"),leaveToClass:"".concat(e,"-leave-to"),leaveActiveClass:"".concat(e,"-leave-active")}})),Ki=Pr&&!Mr,qi="transition",Gi="animation",Vi="transition",Wi="transitionend",Yi="animation",Xi="animationend";Ki&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Vi="WebkitTransition",Wi="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Yi="WebkitAnimation",Xi="webkitAnimationEnd"));var Zi=Pr?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function Qi(e){Zi((function(){Zi(e)}))}function Ji(e,t){var r=e._transitionClasses||(e._transitionClasses=[]);r.indexOf(t)<0&&(r.push(t),zi(e,t))}function es(e,t){e._transitionClasses&&Qt(e._transitionClasses,t),Ui(e,t)}function ts(e,t,r){var a=as(e,t),n=a.type,o=a.timeout,i=a.propCount;if(!n)return r();var s=n===qi?Wi:Xi,l=0,c=function(){e.removeEventListener(s,d),r()},d=function(t){t.target===e&&++l>=i&&c()};setTimeout((function(){l<i&&c()}),o+1),e.addEventListener(s,d)}var rs=/\b(transform|all)(,|$)/;function as(e,t){var r,a=window.getComputedStyle(e),n=(a[Vi+"Delay"]||"").split(", "),o=(a[Vi+"Duration"]||"").split(", "),i=ns(n,o),s=(a[Yi+"Delay"]||"").split(", "),l=(a[Yi+"Duration"]||"").split(", "),c=ns(s,l),d=0,u=0;return t===qi?i>0&&(r=qi,d=i,u=o.length):t===Gi?c>0&&(r=Gi,d=c,u=l.length):u=(r=(d=Math.max(i,c))>0?i>c?qi:Gi:null)?r===qi?o.length:l.length:0,{type:r,timeout:d,propCount:u,hasTransform:r===qi&&rs.test(a[Vi+"Property"])}}function ns(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map((function(t,r){return os(t)+os(e[r])})))}function os(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function is(e,t){var r=e.elm;Bt(r._leaveCb)&&(r._leaveCb.cancelled=!0,r._leaveCb());var a=ji(e.data.transition);if(!_t(a)&&!Bt(r._enterCb)&&1===r.nodeType){for(var n=a.css,o=a.type,i=a.enterClass,s=a.enterToClass,l=a.enterActiveClass,c=a.appearClass,d=a.appearToClass,u=a.appearActiveClass,m=a.beforeEnter,p=a.enter,h=a.afterEnter,f=a.enterCancelled,g=a.beforeAppear,y=a.appear,v=a.afterAppear,b=a.appearCancelled,w=a.duration,x=Mn,S=Mn.$vnode;S&&S.parent;)x=S.context,S=S.parent;var k=!x._isMounted||!e.isRootInsert;if(!k||y||""===y){var C=k&&c?c:i,T=k&&u?u:l,P=k&&d?d:s,D=k&&g||m,E=k&&jt(y)?y:p,M=k&&v||h,A=k&&b||f,F=Yt(Ht(w)?w.enter:w),I=!1!==n&&!Mr,R=cs(E),O=r._enterCb=gr((function(){I&&(es(r,P),es(r,T)),O.cancelled?(I&&es(r,C),A&&A(r)):M&&M(r),r._enterCb=null}));e.data.show||ka(e,"insert",(function(){var t=r.parentNode,a=t&&t._pending&&t._pending[e.key];a&&a.tag===e.tag&&a.elm._leaveCb&&a.elm._leaveCb(),E&&E(r,O)})),D&&D(r),I&&(Ji(r,C),Ji(r,T),Qi((function(){es(r,C),O.cancelled||(Ji(r,P),R||(ls(F)?setTimeout(O,F):ts(r,o,O)))}))),e.data.show&&(t&&t(),E&&E(r,O)),I||R||O()}}}function ss(e,t){var r=e.elm;Bt(r._enterCb)&&(r._enterCb.cancelled=!0,r._enterCb());var a=ji(e.data.transition);if(_t(a)||1!==r.nodeType)return t();if(!Bt(r._leaveCb)){var n=a.css,o=a.type,i=a.leaveClass,s=a.leaveToClass,l=a.leaveActiveClass,c=a.beforeLeave,d=a.leave,u=a.afterLeave,m=a.leaveCancelled,p=a.delayLeave,h=a.duration,f=!1!==n&&!Mr,g=cs(d),y=Yt(Ht(h)?h.leave:h),v=r._leaveCb=gr((function(){r.parentNode&&r.parentNode._pending&&(r.parentNode._pending[e.key]=null),f&&(es(r,s),es(r,l)),v.cancelled?(f&&es(r,i),m&&m(r)):(t(),u&&u(r)),r._leaveCb=null}));p?p(b):b()}function b(){v.cancelled||(!e.data.show&&r.parentNode&&((r.parentNode._pending||(r.parentNode._pending={}))[e.key]=e),c&&c(r),f&&(Ji(r,i),Ji(r,l),Qi((function(){es(r,i),v.cancelled||(Ji(r,s),g||(ls(y)?setTimeout(v,y):ts(r,o,v)))}))),d&&d(r,v),f||g||v())}}function ls(e){return"number"==typeof e&&!isNaN(e)}function cs(e){if(_t(e))return!1;var t=e.fns;return Bt(t)?cs(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function ds(e,t){!0!==t.data.show&&is(t)}var us=function(e){var t,r,a={},n=e.modules,o=e.nodeOps;for(t=0;t<ti.length;++t)for(a[ti[t]]=[],r=0;r<n.length;++r)Bt(n[r][ti[t]])&&a[ti[t]].push(n[r][ti[t]]);function i(e){var t=o.parentNode(e);Bt(t)&&o.removeChild(t,e)}function s(e,t,r,n,i,s,u){if(Bt(e.elm)&&Bt(s)&&(e=s[u]=Vr(e)),e.isRootInsert=!i,!function(e,t,r,n){var o=e.data;if(Bt(o)){var i=Bt(e.componentInstance)&&o.keepAlive;if(Bt(o=o.hook)&&Bt(o=o.init)&&o(e,!1),Bt(e.componentInstance))return l(e,t),c(r,e.elm,n),zt(i)&&function(e,t,r,n){for(var o,i=e;i.componentInstance;)if(Bt(o=(i=i.componentInstance._vnode).data)&&Bt(o=o.transition)){for(o=0;o<a.activate.length;++o)a.activate[o](ei,i);t.push(i);break}c(r,e.elm,n)}(e,t,r,n),!0}}(e,t,r,n)){var h=e.data,f=e.children,g=e.tag;Bt(g)?(e.elm=e.ns?o.createElementNS(e.ns,g):o.createElement(g,e),p(e),d(e,f,t),Bt(h)&&m(e,t),c(r,e.elm,n)):zt(e.isComment)?(e.elm=o.createComment(e.text),c(r,e.elm,n)):(e.elm=o.createTextNode(e.text),c(r,e.elm,n))}}function l(e,t){Bt(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,u(e)?(m(e,t),p(e)):(Qo(e),t.push(e))}function c(e,t,r){Bt(e)&&(Bt(r)?o.parentNode(r)===e&&o.insertBefore(e,t,r):o.appendChild(e,t))}function d(e,t,r){if(Nt(t))for(var a=0;a<t.length;++a)s(t[a],r,e.elm,null,!0,t,a);else Ut(e.text)&&o.appendChild(e.elm,o.createTextNode(String(e.text)))}function u(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return Bt(e.tag)}function m(e,r){for(var n=0;n<a.create.length;++n)a.create[n](ei,e);Bt(t=e.data.hook)&&(Bt(t.create)&&t.create(ei,e),Bt(t.insert)&&r.push(e))}function p(e){var t;if(Bt(t=e.fnScopeId))o.setStyleScope(e.elm,t);else for(var r=e;r;)Bt(t=r.context)&&Bt(t=t.$options._scopeId)&&o.setStyleScope(e.elm,t),r=r.parent;Bt(t=Mn)&&t!==e.context&&t!==e.fnContext&&Bt(t=t.$options._scopeId)&&o.setStyleScope(e.elm,t)}function h(e,t,r,a,n,o){for(;a<=n;++a)s(r[a],o,e,t,!1,r,a)}function f(e){var t,r,n=e.data;if(Bt(n))for(Bt(t=n.hook)&&Bt(t=t.destroy)&&t(e),t=0;t<a.destroy.length;++t)a.destroy[t](e);if(Bt(t=e.children))for(r=0;r<e.children.length;++r)f(e.children[r])}function g(e,t,r){for(;t<=r;++t){var a=e[t];Bt(a)&&(Bt(a.tag)?(y(a),f(a)):i(a.elm))}}function y(e,t){if(Bt(t)||Bt(e.data)){var r,n=a.remove.length+1;for(Bt(t)?t.listeners+=n:t=function(e,t){function r(){0==--r.listeners&&i(e)}return r.listeners=t,r}(e.elm,n),Bt(r=e.componentInstance)&&Bt(r=r._vnode)&&Bt(r.data)&&y(r,t),r=0;r<a.remove.length;++r)a.remove[r](e,t);Bt(r=e.data.hook)&&Bt(r=r.remove)?r(e,t):t()}else i(e.elm)}function v(e,t,r,a){for(var n=r;n<a;n++){var o=t[n];if(Bt(o)&&ri(e,o))return n}}function b(e,t,r,n,i,l){if(e!==t){Bt(t.elm)&&Bt(n)&&(t=n[i]=Vr(t));var c=t.elm=e.elm;if(zt(e.isAsyncPlaceholder))Bt(t.asyncFactory.resolved)?S(e.elm,t,r):t.isAsyncPlaceholder=!0;else if(zt(t.isStatic)&&zt(e.isStatic)&&t.key===e.key&&(zt(t.isCloned)||zt(t.isOnce)))t.componentInstance=e.componentInstance;else{var d,m=t.data;Bt(m)&&Bt(d=m.hook)&&Bt(d=d.prepatch)&&d(e,t);var p=e.children,f=t.children;if(Bt(m)&&u(t)){for(d=0;d<a.update.length;++d)a.update[d](e,t);Bt(d=m.hook)&&Bt(d=d.update)&&d(e,t)}_t(t.text)?Bt(p)&&Bt(f)?p!==f&&function(e,t,r,a,n){for(var i,l,c,d=0,u=0,m=t.length-1,p=t[0],f=t[m],y=r.length-1,w=r[0],x=r[y],S=!n;d<=m&&u<=y;)_t(p)?p=t[++d]:_t(f)?f=t[--m]:ri(p,w)?(b(p,w,a,r,u),p=t[++d],w=r[++u]):ri(f,x)?(b(f,x,a,r,y),f=t[--m],x=r[--y]):ri(p,x)?(b(p,x,a,r,y),S&&o.insertBefore(e,p.elm,o.nextSibling(f.elm)),p=t[++d],x=r[--y]):ri(f,w)?(b(f,w,a,r,u),S&&o.insertBefore(e,f.elm,p.elm),f=t[--m],w=r[++u]):(_t(i)&&(i=ai(t,d,m)),_t(l=Bt(w.key)?i[w.key]:v(w,t,d,m))?s(w,a,e,p.elm,!1,r,u):ri(c=t[l],w)?(b(c,w,a,r,u),t[l]=void 0,S&&o.insertBefore(e,c.elm,p.elm)):s(w,a,e,p.elm,!1,r,u),w=r[++u]);d>m?h(e,_t(r[y+1])?null:r[y+1].elm,r,u,y,a):u>y&&g(t,d,m)}(c,p,f,r,l):Bt(f)?(Bt(e.text)&&o.setTextContent(c,""),h(c,null,f,0,f.length-1,r)):Bt(p)?g(p,0,p.length-1):Bt(e.text)&&o.setTextContent(c,""):e.text!==t.text&&o.setTextContent(c,t.text),Bt(m)&&Bt(d=m.hook)&&Bt(d=d.postpatch)&&d(e,t)}}}function w(e,t,r){if(zt(r)&&Bt(e.parent))e.parent.data.pendingInsert=t;else for(var a=0;a<t.length;++a)t[a].data.hook.insert(t[a])}var x=Xt("attrs,class,staticClass,staticStyle,key");function S(e,t,r,a){var n,o=t.tag,i=t.data,s=t.children;if(a=a||i&&i.pre,t.elm=e,zt(t.isComment)&&Bt(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(Bt(i)&&(Bt(n=i.hook)&&Bt(n=n.init)&&n(t,!0),Bt(n=t.componentInstance)))return l(t,r),!0;if(Bt(o)){if(Bt(s))if(e.hasChildNodes())if(Bt(n=i)&&Bt(n=n.domProps)&&Bt(n=n.innerHTML)){if(n!==e.innerHTML)return!1}else{for(var c=!0,u=e.firstChild,p=0;p<s.length;p++){if(!u||!S(u,s[p],r,a)){c=!1;break}u=u.nextSibling}if(!c||u)return!1}else d(t,s,r);if(Bt(i)){var h=!1;for(var f in i)if(!x(f)){h=!0,m(t,r);break}!h&&i.class&&wn(i.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,r,n){if(!_t(t)){var i,l=!1,c=[];if(_t(e))l=!0,s(t,c);else{var d=Bt(e.nodeType);if(!d&&ri(e,t))b(e,t,c,null,null,n);else{if(d){if(1===e.nodeType&&e.hasAttribute(vr)&&(e.removeAttribute(vr),r=!0),zt(r)&&S(e,t,c))return w(t,c,!0),e;i=e,e=new Kr(o.tagName(i).toLowerCase(),{},[],void 0,i)}var m=e.elm,p=o.parentNode(m);if(s(t,c,m._leaveCb?null:p,o.nextSibling(m)),Bt(t.parent))for(var h=t.parent,y=u(t);h;){for(var v=0;v<a.destroy.length;++v)a.destroy[v](h);if(h.elm=t.elm,y){for(var x=0;x<a.create.length;++x)a.create[x](ei,h);var k=h.data.hook.insert;if(k.merged)for(var C=1;C<k.fns.length;C++)k.fns[C]()}else Qo(h);h=h.parent}Bt(p)?g([e],0,0):Bt(e.tag)&&f(e)}}return w(t,c,l),t.elm}Bt(e)&&f(e)}}({nodeOps:Xo,modules:[hi,yi,Ci,Di,_i,Pr?{create:ds,activate:ds,remove:function(e,t){!0!==e.data.show?ss(e,t):t()}}:{}].concat(di)});Mr&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&bs(e,"input")}));var ms={inserted:function(e,t,r,a){"select"===r.tag?(a.elm&&!a.elm._vOptions?ka(r,"postpatch",(function(){ms.componentUpdated(e,t,r)})):ps(e,t,r.context),e._vOptions=[].map.call(e.options,gs)):("textarea"===r.tag||Yo(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",ys),e.addEventListener("compositionend",vs),e.addEventListener("change",vs),Mr&&(e.vmodel=!0)))},componentUpdated:function(e,t,r){if("select"===r.tag){ps(e,t,r.context);var a=e._vOptions,n=e._vOptions=[].map.call(e.options,gs);n.some((function(e,t){return!hr(e,a[t])}))&&(e.multiple?t.value.some((function(e){return fs(e,n)})):t.value!==t.oldValue&&fs(t.value,n))&&bs(e,"change")}}};function ps(e,t,r){hs(e,t),(Er||Ar)&&setTimeout((function(){hs(e,t)}),0)}function hs(e,t,r){var a=t.value,n=e.multiple;if(!n||Array.isArray(a)){for(var o,i,s=0,l=e.options.length;s<l;s++)if(i=e.options[s],n)o=fr(a,gs(i))>-1,i.selected!==o&&(i.selected=o);else if(hr(gs(i),a))return void(e.selectedIndex!==s&&(e.selectedIndex=s));n||(e.selectedIndex=-1)}}function fs(e,t){return t.every((function(t){return!hr(t,e)}))}function gs(e){return"_value"in e?e._value:e.value}function ys(e){e.target.composing=!0}function vs(e){e.target.composing&&(e.target.composing=!1,bs(e.target,"input"))}function bs(e,t){var r=document.createEvent("HTMLEvents");r.initEvent(t,!0,!0),e.dispatchEvent(r)}function ws(e){return!e.componentInstance||e.data&&e.data.transition?e:ws(e.componentInstance._vnode)}var xs={model:ms,show:{bind:function(e,t,r){var a=t.value,n=(r=ws(r)).data&&r.data.transition,o=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;a&&n?(r.data.show=!0,is(r,(function(){e.style.display=o}))):e.style.display=a?o:"none"},update:function(e,t,r){var a=t.value;!a!=!t.oldValue&&((r=ws(r)).data&&r.data.transition?(r.data.show=!0,a?is(r,(function(){e.style.display=e.__vOriginalDisplay})):ss(r,(function(){e.style.display="none"}))):e.style.display=a?e.__vOriginalDisplay:"none")},unbind:function(e,t,r,a,n){n||(e.style.display=e.__vOriginalDisplay)}}},Ss={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ks(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?ks(en(t.children)):e}function Cs(e){var t={},r=e.$options;for(var a in r.propsData)t[a]=e[a];var n=r._parentListeners;for(var a in n)t[ar(a)]=n[a];return t}function Ts(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var Ps=function(e){return e.tag||qa(e)},Ds=function(e){return"show"===e.name},Es={name:"transition",props:Ss,abstract:!0,render:function(e){var t=this,r=this.$slots.default;if(r&&(r=r.filter(Ps)).length){var a=this.mode,n=r[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return n;var o=ks(n);if(!o)return n;if(this._leaving)return Ts(e,n);var i="__transition-".concat(this._uid,"-");o.key=null==o.key?o.isComment?i+"comment":i+o.tag:Ut(o.key)?0===String(o.key).indexOf(i)?o.key:i+o.key:o.key;var s=(o.data||(o.data={})).transition=Cs(this),l=this._vnode,c=ks(l);if(o.data.directives&&o.data.directives.some(Ds)&&(o.data.show=!0),c&&c.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(o,c)&&!qa(c)&&(!c.componentInstance||!c.componentInstance._vnode.isComment)){var d=c.data.transition=cr({},s);if("out-in"===a)return this._leaving=!0,ka(d,"afterLeave",(function(){t._leaving=!1,t.$forceUpdate()})),Ts(e,n);if("in-out"===a){if(qa(o))return l;var u,m=function(){u()};ka(s,"afterEnter",m),ka(s,"enterCancelled",m),ka(d,"delayLeave",(function(e){u=e}))}}return n}}},Ms=cr({tag:String,moveClass:String},Ss);delete Ms.mode;var As={props:Ms,beforeMount:function(){var e=this,t=this._update;this._update=function(r,a){var n=An(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,n(),t.call(e,r,a)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",r=Object.create(null),a=this.prevChildren=this.children,n=this.$slots.default||[],o=this.children=[],i=Cs(this),s=0;s<n.length;s++)(d=n[s]).tag&&null!=d.key&&0!==String(d.key).indexOf("__vlist")&&(o.push(d),r[d.key]=d,(d.data||(d.data={})).transition=i);if(a){var l=[],c=[];for(s=0;s<a.length;s++){var d;(d=a[s]).data.transition=i,d.data.pos=d.elm.getBoundingClientRect(),r[d.key]?l.push(d):c.push(d)}this.kept=e(t,null,l),this.removed=c}return e(t,null,o)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(Fs),e.forEach(Is),e.forEach(Rs),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var r=e.elm,a=r.style;Ji(r,t),a.transform=a.WebkitTransform=a.transitionDuration="",r.addEventListener(Wi,r._moveCb=function e(a){a&&a.target!==r||a&&!/transform$/.test(a.propertyName)||(r.removeEventListener(Wi,e),r._moveCb=null,es(r,t))})}})))},methods:{hasMove:function(e,t){if(!Ki)return!1;if(this._hasMove)return this._hasMove;var r=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){Ui(r,e)})),zi(r,t),r.style.display="none",this.$el.appendChild(r);var a=as(r);return this.$el.removeChild(r),this._hasMove=a.hasTransform}}};function Fs(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function Is(e){e.data.newPos=e.elm.getBoundingClientRect()}function Rs(e){var t=e.data.pos,r=e.data.newPos,a=t.left-r.left,n=t.top-r.top;if(a||n){e.data.moved=!0;var o=e.elm.style;o.transform=o.WebkitTransform="translate(".concat(a,"px,").concat(n,"px)"),o.transitionDuration="0s"}}var Os={Transition:Es,TransitionGroup:As};function Ls(e){return Ls="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ls(e)}function $s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Ns(){return"undefined"!=typeof Reflect&&Reflect.defineMetadata&&Reflect.getOwnMetadataKeys}function _s(e,t){Bs(e,t),Object.getOwnPropertyNames(t.prototype).forEach((function(r){Bs(e.prototype,t.prototype,r)})),Object.getOwnPropertyNames(t).forEach((function(r){Bs(e,t,r)}))}function Bs(e,t,r){(r?Reflect.getOwnMetadataKeys(t,r):Reflect.getOwnMetadataKeys(t)).forEach((function(a){var n=r?Reflect.getOwnMetadata(a,t,r):Reflect.getOwnMetadata(a,t);r?Reflect.defineMetadata(a,n,e,r):Reflect.defineMetadata(a,n,e)}))}To.config.mustUseProp=function(e,t,r){return"value"===r&&Ro(e)&&"button"!==t||"selected"===r&&"option"===e||"checked"===r&&"input"===e||"muted"===r&&"video"===e},To.config.isReservedTag=Vo,To.config.isReservedAttr=Io,To.config.getTagNamespace=function(e){return Go(e)?"svg":"math"===e?"math":void 0},To.config.isUnknownElement=function(e){if(!Pr)return!0;if(Vo(e))return!1;if(e=e.toLowerCase(),null!=Wo[e])return Wo[e];var t=document.createElement(e);return e.indexOf("-")>-1?Wo[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:Wo[e]=/HTMLUnknownElement/.test(t.toString())},cr(To.options.directives,xs),cr(To.options.components,Os),To.prototype.__patch__=Pr?us:ur,To.prototype.$mount=function(e,t){return function(e,t,r){var a;e.$el=t,e.$options.render||(e.$options.render=qr),On(e,"beforeMount"),a=function(){e._update(e._render(),r)},new Cn(e,a,ur,{before:function(){e._isMounted&&!e._isDestroyed&&On(e,"beforeUpdate")}},!0),r=!1;var n=e._preWatchers;if(n)for(var o=0;o<n.length;o++)n[o].run();return null==e.$vnode&&(e._isMounted=!0,On(e,"mounted")),e}(this,e=e&&Pr?function(e){return"string"==typeof e?document.querySelector(e)||document.createElement("div"):e}(e):void 0,t)},Pr&&setTimeout((function(){xr.devtools&&_r&&_r.emit("init",To)}),0);var zs={__proto__:[]}instanceof Array;function Us(e,t){var r=t.prototype._init;t.prototype._init=function(){var t=this,r=Object.getOwnPropertyNames(e);if(e.$options.props)for(var a in e.$options.props)e.hasOwnProperty(a)||r.push(a);r.forEach((function(r){Object.defineProperty(t,r,{get:function(){return e[r]},set:function(t){e[r]=t},configurable:!0})}))};var a=new t;t.prototype._init=r;var n={};return Object.keys(a).forEach((function(e){void 0!==a[e]&&(n[e]=a[e])})),n}var js=["data","beforeCreate","created","beforeMount","mounted","beforeDestroy","destroyed","beforeUpdate","updated","activated","deactivated","render","errorCaptured","serverPrefetch"];function Hs(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};t.name=t.name||e._componentTag||e.name;var r=e.prototype;Object.getOwnPropertyNames(r).forEach((function(e){if("constructor"!==e)if(js.indexOf(e)>-1)t[e]=r[e];else{var a=Object.getOwnPropertyDescriptor(r,e);void 0!==a.value?"function"==typeof a.value?(t.methods||(t.methods={}))[e]=a.value:(t.mixins||(t.mixins=[])).push({data:function(){return $s({},e,a.value)}}):(a.get||a.set)&&((t.computed||(t.computed={}))[e]={get:a.get,set:a.set})}})),(t.mixins||(t.mixins=[])).push({data:function(){return Us(this,e)}});var a=e.__decorators__;a&&(a.forEach((function(e){return e(t)})),delete e.__decorators__);var n=Object.getPrototypeOf(e.prototype),o=n instanceof To?n.constructor:To,i=o.extend(t);return qs(i,e,o),Ns()&&_s(i,e),i}var Ks={prototype:!0,arguments:!0,callee:!0,caller:!0};function qs(e,t,r){Object.getOwnPropertyNames(t).forEach((function(a){if(!Ks[a]){var n=Object.getOwnPropertyDescriptor(e,a);if(!n||n.configurable){var o,i,s=Object.getOwnPropertyDescriptor(t,a);if(!zs){if("cid"===a)return;var l=Object.getOwnPropertyDescriptor(r,a);if(i=Ls(o=s.value),null!=o&&("object"===i||"function"===i)&&l&&l.value===s.value)return}Object.defineProperty(e,a,s)}}}))}function Gs(e){return"function"==typeof e?Hs(e):function(t){return Hs(t,e)}}Gs.registerHooks=function(e){var t;js.push.apply(js,function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(t=e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}())};const Vs=Gs;"undefined"!=typeof Reflect&&Reflect.getMetadata;const Ws={[at.lightFighter]:"Leichter Jäger",[at.heavyFighter]:"Schwerer Jäger",[at.cruiser]:"Kreuzer",[at.battleship]:"Schlachtschiff",[at.battlecruiser]:"Schlachtkreuzer",[at.bomber]:"Bomber",[at.destroyer]:"Zerstörer",[at.deathStar]:"Todesstern",[at.reaper]:"Reaper",[at.pathfinder]:"Pathfinder",[at.smallCargo]:"Kleiner Transporter",[at.largeCargo]:"Großer Transporter",[at.colonyShip]:"Kolonieschiff",[at.recycler]:"Recycler",[at.espionageProbe]:"Spionagesonde",[at.solarSatellite]:"Solarsatellit",[at.crawler]:"Crawler"};var Ys;!function(e){e[e.rocketLauncher=401]="rocketLauncher",e[e.lightLaser=402]="lightLaser",e[e.heavyLaser=403]="heavyLaser",e[e.gaussCannon=404]="gaussCannon",e[e.ionCannon=405]="ionCannon",e[e.plasmaTurret=406]="plasmaTurret",e[e.smallShieldDome=407]="smallShieldDome",e[e.largeShieldDome=408]="largeShieldDome"}(Ys||(Ys={}));const Xs={[Ys.rocketLauncher]:"Raketenwerfer",[Ys.lightLaser]:"Leichtes Lasergeschütz",[Ys.heavyLaser]:"Schweres Lasergeschütz",[Ys.gaussCannon]:"Gaußkanone",[Ys.ionCannon]:"Ionengeschütz",[Ys.plasmaTurret]:"Plasmawerfer",[Ys.smallShieldDome]:"Kleine Schildkuppel",[Ys.largeShieldDome]:"Große Schildkuppel"},Zs={[We.metalMine]:"Metallmine",[We.metalStorage]:"Metallspeicher",[We.crystalMine]:"Kristallmine",[We.crystalStorage]:"Kristallspeicher",[We.deuteriumSynthesizer]:"Deuterium-Synthetisierer",[We.deuteriumTank]:"Deuteriumtank",[We.solarPlant]:"Solarkraftwerk",[We.fusionReactor]:"Fusionskraftwerk",[We.roboticsFactory]:"Roboterfabrik",[We.naniteFactory]:"Nanitenfabrik",[We.shipyard]:"Raumschiffswerft",[We.spaceDock]:"Raumdock",[We.missileSilo]:"Raketensilo",[We.researchLab]:"Forschungslabor",[We.allianceDepot]:"Allianzdepot",[We.terraformer]:"Terraformer",[We.lunarBase]:"Mondbasis",[We.sensorPhalanx]:"Sensorphalanx",[We.jumpGate]:"Sprungtor"},Qs={[ot.energyTechnology]:"Energietechnik",[ot.laserTechnology]:"Lasertechnik",[ot.ionTechnology]:"Ionentechnik",[ot.hyperspaceTechnology]:"Hyperraumtechnik",[ot.plasmaTechnology]:"Plasmatechnik",[ot.espionageTechnology]:"Spionagetechnik",[ot.computerTechnology]:"Computertechnik",[ot.astrophysics]:"Astrophysik",[ot.intergalacticResearchNetwork]:"Intergalaktisches Forschungsnetzwerk",[ot.gravitonTechnology]:"Gravitonforschung",[ot.combustionDrive]:"Verbrennungstriebwerk",[ot.impulseDrive]:"Impulstriebwerk",[ot.hyperspaceDrive]:"Hyperraumantrieb",[ot.weaponsTechnology]:"Waffentechnik",[ot.shieldingTechnology]:"Schildtechnik",[ot.armorTechnology]:"Raumschiffpanzerung"},Js={[lt.none]:"Keine Lebensform",[lt.humans]:"Menschen",[lt.rocktal]:"Rock'tal",[lt.mechas]:"Mechas",[lt.kaelesh]:"Kaelesh"},el={[dt.residentialSector]:"Wohnsektor",[dt.biosphereFarm]:"Biosphären-Farm",[dt.researchCentre]:"Forschungszentrum",[dt.academyOfSciences]:"Akademie der Wissenschaften",[dt.neuroCalibrationCentre]:"Neuro-Kalibrierungszentrum",[dt.highEnergySmelting]:"Hochenergie-Schmelze",[dt.foodSilo]:"Nahrungsspeicher",[dt.fusionPoweredProduction]:"Fusionsbetriebene Förderung",[dt.skyscraper]:"Skyscraper",[dt.biotechLab]:"Biotech-Labor",[dt.metropolis]:"Metropolis",[dt.planetaryShield]:"Planetar-Schild",[dt.meditationEnclave]:"Meditationsenklave",[dt.crystalFarm]:"Kristallzucht",[dt.runeTechnologium]:"Runentechnologikum",[dt.runeForge]:"Runenschmiede",[dt.oriktorium]:"Oriktorium",[dt.magmaForge]:"Magma-Schmelze",[dt.disruptionChamber]:"Disruptionskammer",[dt.megalith]:"Felsenmonument",[dt.crystalRefinery]:"Kristall-Raffinerie",[dt.deuteriumSynthesiser]:"Deuterium-Syntonisierer",[dt.mineralResearchCentre]:"Mineral-Forschungszentrum",[dt.advancedRecyclingPlant]:"Hochleistungs-Verwertungsanlage",[dt.assemblyLine]:"Fertigungsstraße",[dt.fusionCellFactory]:"Fusionszellen-Fabrik",[dt.roboticsResearchCentre]:"Robotik-Forschungszentrum",[dt.updateNetwork]:"Update-Netzwerk",[dt.quantumComputerCentre]:"Quanten-Computerzentrum",[dt.automatisedAssemblyCentre]:"Automatisiertes Montagezentrum",[dt.highPerformanceTransformer]:"Hochleistungs-Transformator",[dt.microchipAssemblyLine]:"Mikrochip-Fertigungsstraße",[dt.productionAssemblyHall]:"Fließband-Montagehalle",[dt.highPerformanceSynthesiser]:"Hochleistungs-Synthetisierer",[dt.chipMassProduction]:"Chip-Massenproduktion",[dt.nanoRepairBots]:"Nano-Reparaturbots",[dt.sanctuary]:"Refugium",[dt.antimatterCondenser]:"Antimaterie-Kondensator",[dt.vortexChamber]:"Vortexkammer",[dt.hallsOfRealisation]:"Hallen der Erkenntnis",[dt.forumOfTranscendence]:"Forum der Transzendenz",[dt.antimatterConvector]:"Antimaterie-Konvektor",[dt.cloningLaboratory]:"Klonlabor",[dt.chrysalisAccelerator]:"Chrysalis-Akzelerator",[dt.bioModifier]:"Bio-Modifikator",[dt.psionicModulator]:"Psionischer Modulator",[dt.shipManufacturingHall]:"Schiffs-Fabrikationshalle",[dt.supraRefractor]:"Supra-Refraktor"},tl={[mt.intergalacticEnvoys]:"Intergalaktische Botschafter",[mt.highPerformanceExtractors]:"Hochleistungs-Extraktoren",[mt.fusionDrives]:"Fusionstriebwerke",[mt.stealthFieldGenerator]:"Tarnfeld-Generator",[mt.orbitalDen]:"Orbital-Versteck",[mt.researchAI]:"Forschungs-KI",[mt.highPerformanceTerraformer]:"Hochleistungs-Terraformer",[mt.enhancedProductionTechnologies]:"Verbesserte Förderungstechnologien",[mt.lightFighterMkII]:"Leichter Jäger Mk II",[mt.cruiserMkII]:"Kreuzer Mk II",[mt.improvedLabTechnology]:"Verbesserte Labortechnik",[mt.plasmaTerraformer]:"Plasma-Terraformer",[mt.lowTemperatureDrives]:"Niedrigtemperatur-Triebwerke",[mt.bomberMkII]:"Bomber Mk II",[mt.destroyerMkII]:"Zerstörer Mk II",[mt.battlecruiserMkII]:"Schlachtkreuzer Mk II",[mt.robotAssistants]:"Roboter-Assistenten",[mt.supercomputer]:"Supercomputer",[mt.volcanicBatteries]:"Vulkanische Batterien",[mt.acousticScanning]:"Akustische Sondierung",[mt.highEnergyPumpSystems]:"Hochenergie-Pumpsysteme",[mt.cargoHoldExpansion_CivilianShips]:"Laderaum-Erweiterung (Zivile Schiffe)",[mt.magmaPoweredProduction]:"Magmabetriebene Förderung",[mt.geothermalPowerPlants]:"Geothermie-Kraftwerke",[mt.depthSounding]:"Tiefensondierung",[mt.ionCrystalEnhancement_heavyFighter]:"Ionenkristall-Verstärkung (Schwerer Jäger)",[mt.improvedStellarator]:"Verbesserter Stellarator",[mt.hardenedDiamondDrillHeads]:"Gehärtete Diamant-Bohrköpfe",[mt.seismicMiningTechnology]:"Seismische Abbautechnologien",[mt.magmaPoweredPumpSystems]:"Magmabetriebenes Pumpsystem",[mt.ionCrystalModules]:"Ionenkristall-Module",[mt.optimisedSiloConstructionMethod]:"Optimierte Silo-Bauweise",[mt.diamondEnergyTransmitter]:"Diamant-Energietransmitter",[mt.obsidianShieldReinforcement]:"Obsidian-Schildverstärkung",[mt.runeShields]:"Runenschilde",[mt.rocktalCollectorEnhancement]:"Rock`tal-Kollektorverstärkung",[mt.catalyserTechnology]:"Katalysator-Technik",[mt.plasmaDrive]:"Plasma-Antrieb",[mt.efficiencyModule]:"Effizienz-Modul",[mt.depotAI]:"Depot-KI",[mt.generalOverhaul_lightFighter]:"Generalüberholung (Leichter Jäger)",[mt.automatedTransportLines]:"Automatisierte Förderstraßen",[mt.improvedDroneAI]:"Verbesserte Drohnen-KI",[mt.experimentalRecyclingTechnology]:"Experimentelle Wiederaufbereitungstechnik",[mt.generalOverhaul_cruiser]:"Generalüberholung (Kreuzer)",[mt.slingshotAutopilot]:"Slingshot-Autopilot",[mt.highTemperatureSuperconductors]:"Hochtemperatur-Supraleiter",[mt.generalOverhaul_battleship]:"Generalüberholung (Schlachtschiff)",[mt.artificialSwarmIntelligence]:"Künstliche Schwarmintelligenz",[mt.generalOverhaul_battlecruiser]:"Generalüberholung (Schlachtkreuzer)",[mt.generalOverhaul_bomber]:"Generalüberholung (Bomber)",[mt.generalOverhaul_destroyer]:"Generalüberholung (Zerstörer)",[mt.experimentalWeaponsTechnology]:"Experimentelle Waffentechnik",[mt.mechanGeneralEnhancement]:"Mecha-Generalverstärkung",[mt.heatRecovery]:"Wärme-Rückgewinnung",[mt.sulphideProcess]:"Sulfid-Prozesstechnik",[mt.psionicNetwork]:"Psionisches Netzwerk",[mt.telekineticTractorBeam]:"Telekinese-Traktorstrahl",[mt.enhancedSensorTechnology]:"Verbesserte Sensortechnik",[mt.neuromodalCompressor]:"Neuromodaler Komprimator",[mt.neuroInterface]:"Neuro-Interface",[mt.interplanetaryAnalysisNetwork]:"Superglobales Analysenetzwerk",[mt.overclocking_heavyFighter]:"Übertaktung (Schwerer Jäger)",[mt.telekineticDrive]:"Telekinetisches Schubsystem",[mt.sixthSense]:"Sechster Sinn",[mt.psychoharmoniser]:"Psycho-Harmonisierer",[mt.efficientSwarmIntelligence]:"Effiziente Schwarmintelligenz",[mt.overclocking_largeCargo]:"Übertaktung (Großer Transporter)",[mt.gravitationSensors]:"Gravitationssensoren",[mt.overclocking_battleship]:"Übertaktung (Schlachtschiff)",[mt.psionicShieldMatrix]:"Psionische Schutzmatrix",[mt.kaeleshDiscovererEnhancement]:"Kaelesh-Entdeckerverstärkung"},rl={darkMatter:"Dunkle Materie"},al={tabs:{dateRanges:"Datumsbereiche",colors:"Farben",common:"Allgemein",importExport:"Import/Export",expeditions:"Expeditionen",combats:"Kämpfe",debrisFields:"Trümmerfelder",resourceBalance:"Rohstoffbilanz",universeHistory:"Universumshistorie",dangerZone:"Gefahrenzone",accessbility:"Barrierefreiheit",linkAccounts:"Accounts verknüpfen",migrateOldData:"Altdaten migrieren"},dateRanges:{defaultNames:{today:"Heute",yesterday:"Gestern",currentWeek:"Aktuelle Woche",lastWeek:"Letzte Woche",currentMonth:"Aktueller Monat",newRange:"Neuer Bereich"},since:e=>`Seit ${e}`,firstDayTemplate:"<erster Tag>",headers:{label:"Benennung",type:"Typ",rangeStart:"Bereich startet vor",rangeContains:"Bereich enthält"},day:"Tag",days:"Tag",daysAgo:"Tagen",week:"Woche",weeks:"Wochen",weeksAgo:"Wochen",month:"Monat",months:"Monate",monthsAgo:"Monaten",year:"Jahr",years:"Jahre",yearsAgo:"Jahren"},colors:{combatResults:"Kampfergebnis",expeditionEvents:"Expeditionsereignisse",expeditionEventSizes:"Ereignisgrößen",expeditionDepletionLevels:"Systemauslastung",lifeformDiscoveries:"Entdeckungsmissionen",lifeforms:"Lebensformen",resources:"Rohstoffe",ships:"Schiffe"},common:{extensionLanguage:"UI-Sprache (im OGame Tracker)",extensionLanguageFallbackHint:"Sollten Texte nicht in der gewählten Sprache verfügbar sein, werden englische Texte angezeigt.",conversionRates:{title:"Umrechnungskurse",msuLong:"Umrechnung nach Metall",dsuLong:"Umrechnung nach Deuterium"},serverSettings:{title:"Serverdaten",lastUpdate:"Letzte Aktualisierung",forceUpdate:"Serverdaten aktualisieren"}},expeditions:{resourceUnitFactorsOfShipFoundOnExpeditions:"Faktoren der Rohstoffeinheiten auf Expeditionen gefundener Schiffe"},combats:{resourceUnitFactorsOfLostShips:"Faktoren der Rohstoffeinheiten in Kämpfen verlorener Schiffe",ignoreEspionageCombats:{title:"Spionagekämpfe ignorieren",label:"Spionage-Kampfberichte für das Tracking ignorieren"}},resourceBalance:{detailedResourceBalance:{header:"Detaillierte Rohstoffbilanz",checkboxLabel:"detaillierte Anzeige der Rohstoffbilanz"},includeShipsFoundOnExpeditions:{header:"Auf Expeditionen gefundene Schiffe",checkboxLabel:"Rohstoffeinheiten auf Expeditionen gefundener Schiffe in die Rohstoffbilanz einbeziehen"},includeShipsLostInCombats:{header:"In Kämpfen verlorene Schiffe",checkboxLabel:"Rohstoffeinheiten in Kämpfen verlorener Schiffe in die Rohstoffbilanz einbeziehen"},includeLostLootResources:{header:"In Kämpfen verlorene Rohstoffe",checkboxLabel:"in Kämpfen verlorene Rohstoffeinheiten in die Rohstoffbilanz einbeziehen"}},showConvertedUnitsInTables:{title:"MSE/DSE in Tabellen",label:"Umgerechnete MSE/DSE-Werte in Tabellen anzeigen",infoAmortization:"Amotisationszeit wird weiterhin anhand von Kosten und Produktion in MSE/DSE errechnet"},reset:"Einstellungen zurücksetzen",setDefaultRoute:"als Standardauswahl festlegen",setDefaultSubRoute:"als Standardauswahl für diesen Bereich auswählen",dangerZone:{doYouWantToContinue:"BIST DU SICHER, DASS DU FORTFAHREN WILLST?",deleteExpeditions:{button:e=>`Alle getrackten Expeditionen des aktuell gewählten Accounts (${e}) entfernen`,confirmationText:(e,t)=>`Nach dem Bestätigen dieser Aktion werden alle ${t} getrackten Expeditionen des aktuell gewählten Accounts (${e}) gelöscht.`},deleteCombats:{button:e=>`Alle getrackten Kämpfe des aktuell gewählten Accounts (${e}) entfernen`,confirmationText:(e,t)=>`Nach dem Bestätigen dieser Aktion werden alle ${t} getrackten Kämpfe des aktuell gewählten Accounts (${e}) gelöscht.`},deleteDebrisFieldReports:{button:e=>`Alle getrackten TF-Abbauberichte des aktuell gewählten Accounts (${e}) entfernen`,confirmationText:(e,t)=>`Nach dem Bestätigen dieser Aktion werden alle ${t} getrackten TF-Abbauberichte des aktuell gewählten Accounts (${e}) gelöscht.`},deleteAccount:{button:e=>`Alle Daten des aktuell gewählten Accounts (${e}) entfernen`,confirmationText:e=>`Nach dem Bestätigen dieser Aktion werden alle gespeicherten Daten des aktuell gewählten Accounts (${e}) gelöscht.\nDies beinhaltet die getrackte Universumshistorie dieses Servers sofern kein anderer Account für diesen Server getrackt ist.`},deleteUniverseHistory:{button:e=>`Universumshistorie des aktuell gewählten Universums (${e}) entfernen`,confirmationText:e=>`Nach dem Bestätigen dieser Aktion werden alle getrackten Daten zur Universumshistorie des aktuell gewählten Universums (${e}) gelöscht.`},deleteEverything:{button:"Alle Daten entfernen",confirmationText1:"Nach dem Bestätigen dieser Aktion werden alle Daten gelöscht.\nDas heißt, alle Daten inklusive getrackter Expeditionen, Kämpfe, TF-Abbauberichte, Universumshistorie und mehr, werden entfernt.",confirmationText2:"Bitte bestätige erneut, dass du alle Daten löschen möchtest."}},importExport:{export:{header:"Export",description:"Hier kannst du deine Daten exportieren. Der Export enthält alle relevanten Daten deiner getrackten Accounts und dazugehörigen Servern.",includeUniverseHistory:"auch Universumshistorie exportieren (kann die Dateigröße und Importzeit deutlich erhöhen!)",button:"Export starten",wait:"Bitte warte während deine Daten für den Export vorbereitet werden...",errors:{unexpectedError:"Ein unerwarteter Fehler ist während des Exports aufgetreten."}},import:{header:"Import",description:"Hier kannst du deine Daten aus einer Datei importieren. Bitte wähle die Importdatei.",button:"Import starten",wait:"Bitte warte während deine Daten importiert werden...",errors:{invalidFormat:"Das Dateiformat ist ungültig.",unexpectedError:"Ein unerwarteter Fehler ist während des Imports aufgetreten."}},importCallbacks:{importingSettings:"Einstellungen werden imporiert",importingBasicData:"Grundlegende Account- und Server-Informationen werden importiert",importingUniverseHistories:(e,t,r,a)=>`Universumshistorien werden importiert (Server ${e+1}/${t}, Eintrag ${r+1}/${a})`,importingAccounts:(e,t,r,a,n)=>{const o="Accounts werden importiert",i=`${e+1}/${t}`;if("account"==r)return`${o} (${i})`;if("combat-reports"==r)return`${o} (${i}, Kampf ${a+1}/${n})`;if("expeditions"==r)return`${o} (${i}, Expedition ${a+1}/${n})`;if("debris-fields"==r)return`${o} (${i}, TF-Berícht ${a+1}/${n})`;if("lifeform-discoveries"==r)return`${o} (${i}, LF-Mission ${a+1}/${n})`;if("empire.data"==r)return`${o} (${i}, grundlegende Imperiumsdaten)`;if("empire.planets"==r)return`${o} (${i}, Planet ${a+1}/${n})`;if("empire.moons"==r)return`${o} (${i}, Mond ${a+1}/${n})`;if("universe-specific-settings"==r)return`${o} (${i}, universumsspezifische Einstellungen)`;throw new Error(`Invalid type '${r}'`)}}},accessibility:{showSimplifiedResults:{title:"Vereinfachte Ansicht",label:"Vereinfachte Ansicht, versteckt Originaltexte von Expeditionsergebnissen und TF-Abbauberichten, und zeigt Icons anstatt Texten in den Benachrichtigungen."}},debrisFields:{separateExpeditionDebrisFields:{title:"TFs von Position 16 separat anzeigen",label:"TFs von Position 16 separat anzeigen"}},linkAccounts:{header:e=>`Accounts mit dem aktuellen Account (${e}) verknüpfen`,descriptionHtml:e=>`Hier sollten nur Accounts miteinander verknüpft werden, wenn die Daten der gewählten Accounts als Daten des aktuellen Accounts (${e}) behandelt werden sollen.<br/>Dies ist zum Beispiel gewünscht, wenn ein Account aufgrund einer Fusion von einem Server auf einen anderen verschoben wurde und somit im Tracker als separater Account behandelt wird, aber bspw. die Expeditionen des ursprügnlichen Accounts weiterhin angezeigt werden sollen.<br/><br/>Beispiel: <br/><ol>\n                    <li>der Spieler "OGame Profi" spielt auf dem Server "DE Milchstraße"</li>\n                    <li>der Server "DE Milchstraße" wird nun Exodusuni bei einer Fusion</li>\n                    <li>der Spieler "OGame Profi" fusioniert also seinen Account nach "DE Wagenrad"</li>   \n                    <li>der OGame Tracker zeigt für den Account nach der Fusion keine Expeditionen mehr vom Ursprungsserver "DE Milchstraße"</li>\n                    <li>im OGame Tracker wird der Account "OGame Profi" vom Server "DE Milchstraße" mit dem Account vom Server "DE Wagenrad" verknüpft</li>\n                    <li>Expeditionen, die auf dem Ursprungsserver "DE Milchstraße" gesendet wurden, werden nun auch für den fusionierten Account auf dem Server "DE Wagenrad" angezeigt</li>\n                </ol>\n            `,linkAccount:"weiteren Account verknüpfen:",linkedAccounts:"Verknüpfte Accounts:"}},nl={[ee.metal]:"Metall",[ee.crystal]:"Kristall",[ee.deuterium]:"Deuterium",energy:"Energie"},ol={ogame:{buildings:Zs,lifeforms:Js,lifeformBuildings:el,lifeformTechnologies:tl,premium:rl,resources:nl,research:Qs,ships:Ws,defenses:Xs},extension:{common:{averagePerDay:"⌀ pro Tag",chart:"Diagramm",table:"Tabelle",sum:"Summe",total:"gesamt",resourceUnits:"Rohstoffeinheiten",dsu:"DSE",msu:"MSE",date:"Datum",dateTime:"Datum & Zeit",madeWithLove1:"Mit",madeWithLove2:"von Wonkydonky entwickelt"},settings:al,resources:nl,expeditions:{header:"Expeditionen",tabHeaders:{overview:"Übersicht",foundResources:"Rohstofffunde",foundShips:"Flottenfunde",foundDarkMatter:rl.darkMatter,foundItems:"Itemfunde",depletion:"Auslastung",info:{header:"Info",topFinds:"Top-Funde",possibleFinds:"Liste möglicher Funde"},subHeaders:{amount:"Menge",sizes:"Fundgrößen",resources:"Rohstoffeinheiten",count:"Anzahl",sizesByResource:"Fundgrößen nach Rohstoff"}},expeditionEvents:{[vt.nothing]:"ohne Ereignis",[vt.resources]:"Rohstofffund",[vt.fleet]:"Flottenfund",[vt.delay]:"Verspätung",[vt.early]:"Verfrühung",[vt.darkMatter]:rl.darkMatter,[vt.pirates]:"Piraten",[vt.aliens]:"Aliens",[vt.combat]:"Kampf",[vt.item]:"Item",[vt.trader]:"Händler",[vt.lostFleet]:"Flottenverlust"},expeditionEventSizes:{[yt.small]:"normaler Fund",[yt.medium]:"großer Fund",[yt.large]:"riesiger Fund","fled-death-star":"Gegner sind geflohen"},depletionLevels:{[bt.none]:"Sehr Gering",[bt.low]:"Gering",[bt.medium]:"Mittel",[bt.high]:"Hoch",unknown:"Unbekannt"},expeditions:"Expeditionen",finds:"Funde",shipsFound:"Schiffe gefunden",depletion:"Systemauslastung",topFinds:{title:e=>`Top-Funde (${e})`,shipUnits:"Schiffseinheiten",shipAmount:"Schiffsanzahl",size:"Größe",amount:"Menge",date:"Datum"},possibleFinds:{info:{playerClass:"Spieler-Klasse",economySpeed:"Ökonomie-Geschwindigkeit",resourceFindBonus:"Bonus Rohstofffunde",shipFindBonus:"Bonus Schiffsfunde",darkMatterFindBonus:"Bonus DM-Funde",discovererBonus:"Bonus Entdeckerklasse"},maximumFinds:"Maximalfunde",findsDarkMatter:"Bereiche der DM-Funde",listOfPossibleFinds:"Liste derzeit möglicher Funde (Rohstoffe, Schiffseinheiten)",findSizes:e=>`Fundmengen (${e})`,shipUnits:"Schiffseinheiten",shipMaxUnitsConverted:"Max. Schiffseinheiten"}},combats:{header:"Kämpfe",tabHeaders:{overview:"Übersicht",loot:"Beute",lostShips:"Verlorenene Schiffe",subHeaders:{againstPlayers:"Gegen Spieler",onExpeditions:"Auf Expeditionen",amount:"Menge",resources:"Rohstoffeinheiten"}},combats:"Kämpfe",shipsLost:"verlorene Schiffe",combatResults:{[J.won]:"gewonnene Kämpfe",[J.lost]:"verlorene Kämpfe",[J.draw]:"Unentschieden"}},donate:{header:"Spenden",subHeader:"Spende, um die Entwicklung des OGame Trackers zu unterstützen",crypto:{header:"Crypto spenden"},kofi:{header:"Mit PayPal oder Kredit-/Debitkarte spenden",buttonText:"Auf Ko-Fi spenden",message:"Du brauchst keinen Account auf Ko-Fi, um dort zu spenden. Alle Spenden werden direkt an den Entwickler weitergeleitet."}},debrisFields:{header:"Trümmerfelder",addDebrisFieldManually:{title:"Trümmerfeld manuell hinzufügen",buttonText:"Hinzufügen"},position:"Position"},resourceBalance:{header:"Rohstoffbilanz","combat-report":"aus Kämpfen","debris-field-report":"aus Trümmerfeldern",expedition:"aus Expeditionen"},empire:{header:"Imperium",planet:"Planet",overview:{header:"Übersicht",supplyBuildings:"Versorgungsgebäude",facilityBuildings:"Anlagen"},production:{header:"Produktion",subHeaders:{resourceProduction:"Rohstoffproduktion",mineOverview:"Minenübersicht"},averagePerHour:"⌀ pro Stunde",totalPerHour:"gesamt pro Stunde",totalPerDay:"gesamt pro Tag",totalPerWeek:"gesamt pro Woche",activeProductionSettings:"aktive Produktionseinstellungen",messageProduction100:"Die angezeigten Werte beziehen sich auf einen Produktionsfaktor von 100% und berücksichtigen einen Energiemangel nicht.",mines:{crawlersAvailable:"verfügbar",crawlersToReachLimit:e=>`${e} Crawler für Maximalbonus`},items:"Aktive Items",breakdown:{basicIncome:"Grundproduktion",mineProduction:"Minenproduktion",consumption:"Verbrauch",lifeformBuildings:"Lebensform-Gebäude",crawlers:"Crawler",items:"Items",geologist:"Geologe",commandStaff:"Kommandostab",playerClass:"Spielerklasse",allianceClass:"Allianzklasse",lifeformTechnologies:"Lebensform-Technologien"},settings:{reset:"Zurücksetzen",header:"Produktionseinstellungen",applyAndClose:"Produktionseinstellungen anwenden und schließen"}},amortization:{header:"Amortisation",table:{cost:"Kosten",levels:"Stufen",productionPlus:"Produktionsplus",amortizationTime:"Amortisationszeit",groupSelectedItems:"Gewählte Elemente gruppieren",showOriginalItems:"All Elemente einzeln anzeigen",levelsOnPlanets:(e,t)=>`${e} ${1==e?"Stufe":"Stufen"} auf ${t} Planeten`},settings:{header:"Einstellungen",applyAndClose:"Einstellungen anwenden und schließen",includeSettings:{header:"Für Berechnung berücksichtigen",mines:"Minen",expeditions:"Expeditionen",expeditionsRequirement:"Hinweis: Benötigt Wahl von Lebensform-Expeditionsbonusforschungen, Lebensform-Forschungsbonusgebäuden, und/oder Astrophysik",lifeformProductionBonusBuildings:"Lebensform-Produktionsbonusgebäude",lifeformTechnologyBoostBuildings:"Lebensform-Forschungsbonusgebäude",lifeformProductionBonusTechnologies:"Lebensform-Produktionsbonusforschungen",lifeformExpeditionBonusTechnologies:"Lebensform-Expeditionsbonusforschungen",astrophysicsAndColony:"Astrophysik und neue Kolonien",astrophysicsPerformanceNote:"Hinweis: Rechenintensiv, hat starken Einfluss auf Berechnungsgeschwindigkeit"},playerSettings:{header:"Allgemeine Einstellungen",optimizeForResources:"Für gewählte Rohstoffe optimieren",officers:"Offiziere",playerClass:"Spielerklasse",allianceClass:"Allianzklasse",currentLevelOf:e=>`aktuelle Stufe ${e}`,lifeformLevels:"Lebenform-Levels",unusedRaidColonySlots:"Derzeit ungenutzte Raidkolo-Slots"},astrophysicsSettings:{header:e=>`Einstellungen zu ${e}`,newColony:"neue Kolonie"},planetSettings:{header:"Einstellungen der Planeten",global:{deselectItems:"Alle Items abwählen",ignoreInactiveLifeformTechnologySlots:"Inaktive Lebensform-Technologie-Slots für alle Planeten ignorieren",deselectAllPlanets:"Alle Planeten abwählen"},includeInResult:"für Berechnung berücksichtigen",position:"Position",maxTemperature:"Max. Temperatur",activeItems:"Aktive Items",crawlers:{title:"Crawler",percentage:"% Produktion",fixCount:"Feste Anzahl",maxCount:"Max. Anzahl"},mines:"Aktuelle Minenstufen",lifeform:"Lebensform",lifeformSettings:"Lebensform-Einstellungen",relevantLifeformBuildings:"Relevante Lebensform-Gebäude",lifeformTechnologies:"Lebensform-Technologien",ignoreEmptySlots:"Inaktive Slots ignorieren"},expeditionSettings:{header:"Expeditionseinstellungen",averageWavesPerDay:"⌀ Wellen pro Tag",items:"Slot-Items",averageExpeditionsPerDay:"⌀ Expeditionen pro Tag",shipUnitFactors:"Faktoren für Schiffseinheiten",topPlayerScore:"Punkte Platz 1"}},info:{generatingItems:"Berechne nächste Einträge",slowCalculation:"Die Amortisationsberechnung ist leider etwas langsam geworden, seitdem Lebensformen und deren Gebäude und Technologien berücksichtigt werden. Die Performance wird weiterhin untersucht und wird hoffentlich in der Zukunft verbessert.",ctrlClick:"Strg + Klick auf eine Checkbox, um alle Elemente bis zum gewählten Element an-/abzuwählen."},saveLoad:{saveButton:"Amortisationsergebnisse speichern",loadButton:e=>`Speicherstand laden (${e})`,loadedSave:(e,t)=>`Speicherstand wird angezeigt (${e}) - ${t} ausgeblendete Zeilen`,abandonedPlanet:"Aufgegebener Planet"},generateItems:e=>`${e} Einträge`},lifeforms:{header:"Lebensformen",subHeaders:{overview:"Übersicht",progress:"Fortschritt",discoveryMissions:"Missionen",discoveryResults:"Ergebnisse",experience:"Erfahrung",researchBonuses:"Globale Forschungsboni",planetBonuses:"Effektive Boni pro Planet"},planet:"Planet",lifeform:"Lebensform",buildings:"Lebensform-Gebäude",technologies:"Lebensform-Technologien",tier:"Tier",level:"Level",totalLifeformExperience:"Erfahrung (gesamt)",discoveryDateUnknown:"Unbekannt",notDiscoveredYet:"Noch nicht entdeckt",discoveryMissions:"Entdeckungsmissionen",eventTypes:{[kt.nothing]:"Kein Fund",[kt.lostShip]:"Schiff verloren",[kt.newLifeformFound]:"Neue Lebensform",[kt.knownLifeformFound]:"Lebensform-Erfahrung",[kt.artifacts]:"Artefaktfund"},artifactFindingSizes:{[Ct.small]:"normaler Fund",[Ct.medium]:"großer Fund",[Ct.large]:"riesiger Fund",[Ct.storageFull]:"Speicher voll"},lifeformFound:"Lebensform gefunden",alwaysAvailable:"Immer verfügbar",artifacts:"Artefakte",experiencePoints:"Erfahrungspunkte",discoveredOn:"Lebensform entdeckt am",numberOfLifeformDiscoveries:"Anzahl Entdeckungen",globalResearchBonus:"Globaler Forschungsbonus",researchBonuses:{breakdown:{slot:"Slot",research:"Forschung",bonus:"Bonus",lifeformBuildingsBoost:"Lebensformgebäude-Boost",lifeformLevelBoost:(e,t)=>`Lebensform-Level-Boost (${e}: ${t})`,bugBoost:"durch Bugs verursachter Boost"},production:{header:"Rohstoffproduktion"},expeditionFinds:{header:"Expeditionsfunde",resources:"Rohstoffe",ships:"Schiffe",fleetLoss:"Flottenverluste"},expeditionSpeed:{header:"Geschwindigkeit zum Expeditionsort",bonus:"Geschwindigkeitsbonus"},ships:{header:"Schiffe",armor:"Panzerung",shield:"Schild",damage:"Schaden",cargo:"Laderaum",speed:"Geschwindigkeit"},defenses:{header:"Verteidigungsanlagen"},fuelConsumption:{header:"Treibstoffverbrauch"},fuelReturn:{header:"Treibstoffrückgewinn bei Rückruf",bonus:"Treibstoffrückgewinn"},buildingCostTime:{header:"Gebäude Kosten & Zeit",cost:"Kosten",time:"Zeit"},researchCostTime:{header:"Forschungen Kosten & Zeit",researches:"Forschungen",lifeformResearches:"Lebensform-Forschungen"},crawlers:{header:"Crawler",productionBonus:"Rohstoffproduktion",energyConsumption:"Energieverbrauch"},denCapacity:{header:"Versteckkapazität"},phalanxRange:{header:"Phalanx-Reichweite"},discoveryMissions:{header:"Geschwindigkeit Entdeckungsmissionen"},playerClasses:{header:"Spielerklassen",collector:{productionBonus:"Erhöhte Minenproduktion",energyProductionBonus:"Erhöhte Energieproduktion",transporterSpeedBonus:"Transporter-Geschwindigkeitsbonus",transporterCargoBonus:"Transporter-Laderaumbonus",crawlerProductionBonus:"Crawler-Produktionsbonus",geologistCrawlerAmountBonus:"Mehr verwendbare Crawler mit Geologe"},discoverer:{researchDuration:"Forschungszeit",increasedExpeditionFinds:"Erhöhter Ertrag bei Expeditionen",largerPlanets:"Größere Planeten bei Kolonisierung",additionalExpeditionSlots:"Zusätzliche Expeditionsslots",reducedExpeditionCombatChance:"Chance auf Expeditionsgegner",phalanxRange:"Erhöhte Phalanx-Reichweite"},general:{combatShipSpeed:"Kampfschiff-Geschwindigkeitsbonus",recyclerSpeed:"Recycler-Geschwindigkeitsbonus",fuelConsumption:"Treibstoffverbrauch für alle Schiffe",increasedCargoRecyclersPathfinders:"Erhöhter Laderaum für Recycler/Pathfinder",additionalCombatResearchLevels:"Zusätzliche Kampfforschungsstufen",additionalFleetSlots:"Zusätzliche Flottenslots",additionalMoonFields:"Zusätzliche Mondfelder"},classBonus:"Klassenbonus",bonus:"Bonus",baseValue:"Basiswert",valueWithBonuses:"Wert inkl. Boni"}},planetBonuses:{resourceProduction:{header:"Rohstoffproduktion"},lifeformResearchCostTime:{header:"Lebensformforschungen Kosten & Zeit"},wreckfield:{header:"Wrackfeld"}},topFinds:{topFinds:"Beste Funde",worstFinds:"Schlechteste Funde",size:"Größe",amount:"Menge",date:"Datum",artifacts:"Artefakte",experience:"XP"}}},switchAccounts:{title:"Account wählen, um Daten in neuem Tab anzusehen"},about:{faqHelp:{header:"Hilfe",faq:{header:"F.A.Q.",fleetLostOnExpedition:{header:"Warum werden deine Schiffe nicht getrackt, die du auf Expeditionen verloren hast?",text:"Das Tracking verlorener Schiffe erfordert dauerhaftes Flottentracking, was nicht möglich ist."},syncBetweenDevices:{header:"Warum werden deine Daten nicht auf mehreren Geräten synchronisiert?",text:"Die Menge der vom Tracker erfassten Daten übersteigt die Größe der Daten, die über deinen Nutzeraccount (Google, Microsoft, o.ä.) synchronisiert werden können. Eine Synchronisierung über einen externen Server wird eventuell in der Zukunft möglich sein."},productionInResourceBalance:{header:"Warum wird deine Rohstoffproduktion nicht in der Rohstoffbilanz berücksichtigt?",text:"Die Rohstoffproduktion hängt von vielen Faktoren ab, deren Änderungen dauerhaft getrackt werden müssten. Dies ist zwar möglich, jedoch übersteigt die Komplexität dieses Features die des zusätzlichen Nutzens."},whatAreAverages:{header:"Was bedeutet '⌀ pro Tag'?",text:"Dies ist der Durchschnitt über alle Tage mit mindestens einem getrackten Ereignis."}},tips:{header:"Tipps",rightClickDefaultRoute:"Du kannst einen der linken Tabs im Hauptmenü sowie untergeordnete Menüs rechtsklicken, um dieses (Unter-)Menü als Standardmenü für die gewählte Route auszuwählen.",numbersKeyboardNavigation:"Die mit Ziffern versehenen Tabs können auch über die Tastatur geöffnet werden, indem man die passende Zifferntaste drückt.",amortizationTable:{part1:"Du möchtest wissen, was du als nächstes bauen oder forschen solltest, um deine Produktion möglichst effizient zu erhöhen? Probiere den ",name:"interaktiven Amortisationsrechner",part2:"."},inlineSettings:"Du kannst dazugehörige Einstellungen direkt ändern, indem du auf einer passenden Seite das kleine Zahnrad-Icon auf dem rechten Seite klickst.",switchAccountHtml:'Du kannst das Interface des OGame Trackers für einen anderen getrackten Accounts ansehen, indem du im Menü das Icon <span class="mdi mdi-account-multiple"></span> klickst und den passenden Account wählst.'},messageDiscord:{part1:"Du brauchst Hilfe, hast einen Bug gefunden, oder hast eine Feature-Anfrage? Tritt dem ",discordServer:"Discord-Server",part2:" bei und schreibe eine Nachricht im passenden Channel."}},info:{header:"Info",table:{currentAccount:{header:"Informationen über den ausgewählten Account",numberOfTrackedExpeditions:"Anzahl getrackter Expeditionen",numberOfTrackedCombatReports:"Anzahl getrackter Kämpfe",numberOfTrackedDebrisFieldReports:"Anzahl getrackter TF-Abbauberichte",numberOfTrackedLifeformDiscoveries:"Anzahl getrackter Entdeckungsmissionen",lastUpdateServerSettings:"Letzte Aktualisierung der Serverinformationen",numberOfUniverseHistoryEntries:"Anzahl Einträge in Universumshistorie"},global:{header:"Informationen über alle Daten im OGame Tracker",numberOfTrackedAccounts:"Anzahl getrackter Accounts",estimatedSize:"Größe aller gespeichtern Daten"}}}},universeHistory:{header:"Universumshistorie",settings:{messages:{notEnabledHtml:"\n            <b>Highscore-Tracking des Universums ist deaktiviert.</b><br/>\n            Aktivieren dieses Features sorgt dafür, dass Highscoreveränderungen \n            für alle Spieler und Allianzen getrackt werden.\n            ",historyTrackingNotEnabledHtml:'\n            <b>Tracking der Universumshistorie ist deaktiviert.</b><br/>\n            Ist dieses Feature aktiviert, werden zusätzlich alle Änderungen von Spieler-\n            und Allianzinformationen getrackt.<br />\n            Dies beinhaltet Änderungen an Spieler- und Allianznamen und -Tags, Allianzmitgliedschaften,\n            Veränderungen an Spielerstatus, sowie Änderungen zu Planeten und Monden inklusive\n            Veränderungen der Namen und Koordinaten, und verlassene/zerstörte Planeten und Monde.<br/>\n\n            <i>Dies kann eine Menge Daten generieren! \n            Wird die Datenmenge zu groß, \n            kann das Feature <a href="#/settings/universe-history">in den Einstellungen</a> \n            wieder deaktiviert werden.</i>\n            ',trackingTimesHtml:"\n            Mindestens einmal täglich werden Highscores und Universumsinformationen (sofern aktiviert) aktualisiert.<br/>\n            Die Uhrzeiten für die Aktualisierungen können unten eingestellt werden.\n            Falls eine Aktualisierung zu einer Uhrzeit verpasst wurde, wird das Update so früh wie möglich nachgeholt.\n            "},enableHighscoreTrackingOnly:"Highscore-Tracking aktivieren",enableHistoryTracking:"Tracking der Universumshistorie aktivieren"},tabs:{players:"Spieler",alliances:"Allianzen",subtabs:{highscore:"Highscore",history:"Historie"}},playerSelection:{header:"Spielerauswahl",search:"Spieler suchen"},allianceSelection:{header:"Allianzauswahl",search:"Allianz suchen"},highscoreTabs:{total:"Gesamt",economy:"Ökonomie",research:"Forschung",military:"Militär",militaryBuilt:"Militär gebaut",militaryDestroyed:"Militär zerstört",militaryLost:"Militär verloren",honor:"Ehrenpunkte",numberOfShips:"Anzahl Schiffe",lifeform:"Lebensform",lifeformDiscoveries:"Lebensform-Entdeckungen",lifeformEconomy:"Lebensform-Ökonomie",lifeformTechnology:"Lebensform-Technologie"},historyTabs:{status:"Status",nicknames:"Nicknamen",alliances:"Allianzen",planetAndMoons:"Planeten & Monde",tags:"Tags",names:"Namen",members:"Mitglieder"},noAlliance:"keine Allianz",today:"heute",name:"Name",tag:"Tag",members:"Mitglieder",alliance:"Allianz",from:"Von",until:"Bis",status:{active:"Aktiv",vacation:"Urlaubsmodus",inactive:"Inaktiv (>= 7 Tage)",inactiveLong:"Inaktiv (>= 28 Tage)",banned:"Gesperrt",outlaw:"Vogelfrei",deleted:"Gelöscht",admin:"Admin"},loadingTakingLong:"Das Laden der Daten dauert länger als erwartet. Vermutlich wird die Datenbank gerade aktualisiert, bitte warte oder versuch es später erneut."},notifications:{combatTracking:{title:e=>"1"==e?`${e} neuer Kampfbericht getrackt`:`${e} neue Kampfberichte getrackt`,message:e=>"1"==e?`Es wurde ${e} neuer Kampfbericht getrackt.`:`Es wurden ${e} neue Kampfberichte getrackt.`},debrisFieldReportTracking:{title:e=>"1"==e?`${e} neuer TF-Abbaubericht getrackt`:`${e} neue TF-Abbauberichte getrackt`,message:e=>"1"==e?`Es wurde ${e} neuer TF-Abbaubericht getrackt.`:`Es wurden ${e} neue TF-Abbauberichte getrackt.`},expeditionTracking:{fleetLost:{title:e=>"1"==e?`${e} Flottenverlust`:`${e} Flottenverluste`,message:e=>"1"==e?`${e} Flotte ist nicht von ihrer Expedition zurückgekehrt.`:`${e} Flotten sind nicht von ihrer Expedition zurückgekehrt.`},result:{title:e=>"1"==e?`${e} neue Expedition getrackt`:`${e} neue Expeditionen getrackt`,summary:"Zusammenfassung der Funde",events:"Expeditionsereignisse"}},lifeformDiscoveryTracking:{title:e=>"1"==e?`${e} neue LF-Entdeckungsmission getrackt`:`${e} neue LF-Entdeckungsmissionen getrackt`,message:e=>"1"==e?`${e} neue Lebensform-Entdeckungsmission wurde getrackt.`:`${e} neue Lebensform-Entdeckungsmissionen wurden getrackt.`},messageTrackingError:{title:e=>"1"==e?`Fehler beim Verarbeiten von ${e} Nachricht`:`Fehler beim Verarbeiten von ${e} Nachrichten`,message:e=>"1"==e?`${e} Nachricht hat einen Fehler verursacht und wurde nicht getrackt. Die fehlerhafte Nachricht wurden rot markiert. Bitte kontaktiere den Entwickler.`:`${e} Nachrichten haben einen Fehler verursacht und wurden nicht getrackt. Die fehlerhaften Nachrichten wurden rot markiert. Bitte kontaktiere den Entwickler.`}},tools:{signatureGenerator:{header:"Signatur-Generator",averagePerHour:"⌀/Stunde",totalPerHour:"pro Stunde",totalPerDay:"pro Tag",totalPerWeek:"pro Woche",production:"Produktion",expeditions:"Expeditionen",lifeformDiscoveries:"LF-Missionen",combats:"Kämpfe",debrisFieldReports:"Abgebaute TFs"},scrapyardMerchant:{header:"Schrotthändler",percentage:"% beim Schrotthändler",count:"Anzahl"}},excelExport:{header:"Excel-Export",chooseBelowMessage:"Wähle die zu exportierenden Daten:",groups:{expeditions:{header:"Expeditionen",rawData:"Rohdaten (jede einzelne getrackte Expedition)",dailyOverview:"Übersicht über Ergebnisse pro Tag",dailyDepletion:"Übersicht über Systemauslastung pro Tag",dailyResources:"Rohstofffunde pro Tag",dailyResourceSizes:"Größen der Rohstofffunde pro Tag",dailyShips:"Schiffsfunde pro Tag",dailyShipSizes:"Größen der Schiffsfunde pro Tag",dailyDarkMatter:"DM-Funde pro Tag",dailyDarkMatterSizes:"Größen der DM-Funde pro Tag"},combats:{header:"Kämpfe",rawData:"Rohdaten (jedes einzelne Kampfergebnis)",dailyResults:"Kampfergebnisse pro Tag",dailyLoot:"Beutebilanz pro Tag",dailyLostShips:"Verlorene Schiffe pro Tag"},debrisFields:{header:"Trümmerfelder",rawData:"Rohdaten (jeder einzelne getrackte TF-Abbaubericht)",dailyResources:"Abgebaute Rohstoffe pro Tag"},lifeformDiscoveries:{header:"Entdeckungsmissionen",rawData:"Rohdaten (jede einzelne getrackte Mission)",dailyExperience:"Gesammelte Erfahrung pro Tag"}},generateButton:"Excel-Export generieren",expeditions:{prefix:"EX",sheets:{rawData:"Rohdaten",dailyDepletion:"Tägl. Systemauslastung",dailyResults:"Tägl. Ergebnisse",dailyResources:"Tägl. Rohstoffe",dailyResourcesSize:"Tägl. Rohstoffe (Größen",dailyShips:"Tägl. Schiffe",dailyShipsSize:"Tägl. Schiffe (Größe)",dailyDarkMatter:"Tägl. DM",dailyDarkMatterSize:"Tägl. DM (Größe)"},eventType:"Typ",eventSize:"Größe",item:"Item"},combats:{prefix:"KB",sheets:{rawData:"Rohdaten",dailyResults:"Tägliche Ergebnisse",dailyLoot:"Tägliche Beute",dailyLostShips:"Täglich verlorene Schiffe"},result:"Kampfergebnis",coordinates:"Koordinaten",galaxy:"Galaxie",system:"System",position:"Position",targetType:"Zieltyp",combatType:"Kampftyp",expeditionCombatOpponent:"Expeditionskampfgegner",loot:"Beute",lostShips:"Verlorene Schiffe",debrisField:"Trümmerfeld",moon:"Mond",planet:"Planet",expeditionCombat:"Expeditionskampf",playerCombat:"Spielerkampf",pirates:"Piraten",aliens:"Aliens",againstPlayers:"Gegen Spieler",onExpeditions:"Auf Expeditionen"},debrisFields:{prefix:"TF",sheets:{rawData:"Rohdaten",dailyResources:"Tägliche Rohstoffe"}},lifeformDiscoveries:{prefix:"LF",sheets:{rawData:"Rohdaten",dailyExperience:"Tägliche Erfahrung"},result:"Fund",experience:"Erfahrung",lifeform:"Lebensform",artifacts:"Artefakte",artifactsSize:"Größe"}},playerClasses:{collector:"Kollektor",discoverer:"Entdecker",general:"General",none:"keine"}}},il={[at.lightFighter]:"Light Fighter",[at.heavyFighter]:"Heavy Fighter",[at.cruiser]:"Cruiser",[at.battleship]:"Battleship",[at.battlecruiser]:"Battlecruiser",[at.bomber]:"Bomber",[at.destroyer]:"Destroyer",[at.deathStar]:"Deathstar",[at.reaper]:"Reaper",[at.pathfinder]:"Pathfinder",[at.smallCargo]:"Small Cargo",[at.largeCargo]:"Large Cargo",[at.recycler]:"Recycler",[at.colonyShip]:"Colony Ship",[at.espionageProbe]:"Espionage Probe",[at.crawler]:"Crawler",[at.solarSatellite]:"Solar Satellite"},sl={[Ys.rocketLauncher]:"Rocket Launcher",[Ys.lightLaser]:"Light Laser",[Ys.heavyLaser]:"Heavy Laser",[Ys.gaussCannon]:"Gauss Cannon",[Ys.ionCannon]:"Ion Cannon",[Ys.plasmaTurret]:"Plasma Turret",[Ys.smallShieldDome]:"Small Shield Dome",[Ys.largeShieldDome]:"Large Shield Dome"},ll={[We.metalMine]:"Metal Mine",[We.metalStorage]:"Metal Storage",[We.crystalMine]:"Crystal Mine",[We.crystalStorage]:"Crystal Storage",[We.deuteriumSynthesizer]:"Deuterium Synthesizer",[We.deuteriumTank]:"Deuterium Tank",[We.solarPlant]:"Solar Plant",[We.fusionReactor]:"Fusion Reactor",[We.roboticsFactory]:"Robotics Factory",[We.naniteFactory]:"Nanite Factory",[We.shipyard]:"Shipyard",[We.spaceDock]:"Space Dock",[We.missileSilo]:"Missile Silo",[We.researchLab]:"Research Lab",[We.allianceDepot]:"Alliance Depot",[We.terraformer]:"Terraformer",[We.lunarBase]:"Lunar Base",[We.sensorPhalanx]:"Sensor Phalanx",[We.jumpGate]:"Jump Gate"},cl={[ot.energyTechnology]:"Energy Technology",[ot.laserTechnology]:"Laser Technology",[ot.ionTechnology]:"Ion Technology",[ot.hyperspaceTechnology]:"Hyperspace Technology",[ot.plasmaTechnology]:"Plasma Technology",[ot.espionageTechnology]:"Espionage Technology",[ot.computerTechnology]:"Computer Technology",[ot.astrophysics]:"Astrophysics",[ot.intergalacticResearchNetwork]:"Intergalactic Research Network",[ot.gravitonTechnology]:"Graviton Technology",[ot.combustionDrive]:"Combustion Drive",[ot.impulseDrive]:"Impulse Drive",[ot.hyperspaceDrive]:"Hyperspace Drive",[ot.weaponsTechnology]:"Weapons Technology",[ot.shieldingTechnology]:"Shielding Technology",[ot.armorTechnology]:"Armour Technology"},dl={[lt.none]:"No Lifeform",[lt.humans]:"Humans",[lt.rocktal]:"Rock'tal",[lt.mechas]:"Mechas",[lt.kaelesh]:"Kaelesh"},ul={[dt.residentialSector]:"Residential Sector",[dt.biosphereFarm]:"Biosphere Farm",[dt.researchCentre]:"Research Centre",[dt.academyOfSciences]:"Academy of Sciences",[dt.neuroCalibrationCentre]:"Neuro-Calibration Centre",[dt.highEnergySmelting]:"High Energy Smelting",[dt.foodSilo]:"Food Silo",[dt.fusionPoweredProduction]:"Fusion-Powered Production",[dt.skyscraper]:"Skyscraper",[dt.biotechLab]:"Biotech Lab",[dt.metropolis]:"Metropolis",[dt.planetaryShield]:"Planetary Shield",[dt.meditationEnclave]:"Meditation Enclave",[dt.crystalFarm]:"Crystal Farm",[dt.runeTechnologium]:"Rune Technologium",[dt.runeForge]:"Rune Forge",[dt.oriktorium]:"Oriktorium",[dt.magmaForge]:"Magma Forge",[dt.disruptionChamber]:"Disruption Chamber",[dt.megalith]:"Megalith",[dt.crystalRefinery]:"Crystal Refinery",[dt.deuteriumSynthesiser]:"Deuterium Synthesiser",[dt.mineralResearchCentre]:"Mineral Research Centre",[dt.advancedRecyclingPlant]:"Advanced Recycling Plant",[dt.assemblyLine]:"Assembly Line",[dt.fusionCellFactory]:"Fusion Cell Factory",[dt.roboticsResearchCentre]:"Robotics Research Centre",[dt.updateNetwork]:"Update Network",[dt.quantumComputerCentre]:"Quantum Computer Centre",[dt.automatisedAssemblyCentre]:"Automatised Assembly Centre",[dt.highPerformanceTransformer]:"High-Performance Transformer",[dt.microchipAssemblyLine]:"Microchip Assembly Line",[dt.productionAssemblyHall]:"Production Assembly Hall",[dt.highPerformanceSynthesiser]:"High-Performance Synthesiser",[dt.chipMassProduction]:"Chip Mass Production",[dt.nanoRepairBots]:"Nano Repair Bots",[dt.sanctuary]:"Sanctuary",[dt.antimatterCondenser]:"Antimatter Condenser",[dt.vortexChamber]:"Vortex Chamber",[dt.hallsOfRealisation]:"Halls of Realisation",[dt.forumOfTranscendence]:"Forum of Transcendence",[dt.antimatterConvector]:"Antimatter Convector",[dt.cloningLaboratory]:"Cloning Laboratory",[dt.chrysalisAccelerator]:"Chrysalis Accelerator",[dt.bioModifier]:"Bio Modifier",[dt.psionicModulator]:"Psionic Modulator",[dt.shipManufacturingHall]:"Ship Manufacturing Hall",[dt.supraRefractor]:"Supra Refractor"},ml={[mt.intergalacticEnvoys]:"Intergalactic Envoys",[mt.highPerformanceExtractors]:"High-Performance Extractors",[mt.fusionDrives]:"Fusion Drives",[mt.stealthFieldGenerator]:"Stealth Field Generator",[mt.orbitalDen]:"Orbital Den",[mt.researchAI]:"Research AI",[mt.highPerformanceTerraformer]:"High-Performance Terraformer",[mt.enhancedProductionTechnologies]:"Enhanced Production Technologies",[mt.lightFighterMkII]:"Light Fighter Mk II",[mt.cruiserMkII]:"Cruiser Mk II",[mt.improvedLabTechnology]:"Improved Lab Technology",[mt.plasmaTerraformer]:"Plasma Terraformer",[mt.lowTemperatureDrives]:"Low-Temperature Drives",[mt.bomberMkII]:"Bomber Mk II",[mt.destroyerMkII]:"Destroyer Mk II",[mt.battlecruiserMkII]:"Battlecruiser Mk II",[mt.robotAssistants]:"Robot Assistants",[mt.supercomputer]:"Supercomputer",[mt.volcanicBatteries]:"Volcanic Batteries",[mt.acousticScanning]:"Acoustic Scanning",[mt.highEnergyPumpSystems]:"High Energy Pump Systems",[mt.cargoHoldExpansion_CivilianShips]:"Cargo Hold Expansion (Civilian Ships)",[mt.magmaPoweredProduction]:"Magma-Powered Production",[mt.geothermalPowerPlants]:"Geothermal Power Plants",[mt.depthSounding]:"Depth Sounding",[mt.ionCrystalEnhancement_heavyFighter]:"Ion Crystal Enhancement (Heavy Fighter)",[mt.improvedStellarator]:"Improved Stellarator",[mt.hardenedDiamondDrillHeads]:"Hardened Diamond Drill Heads",[mt.seismicMiningTechnology]:"Seismic Mining Technology",[mt.magmaPoweredPumpSystems]:"Magma-Powered Pump Systems",[mt.ionCrystalModules]:"Ion Crystal Modules",[mt.optimisedSiloConstructionMethod]:"Optimised Silo Construction Method",[mt.diamondEnergyTransmitter]:"Diamond Energy Transmitter",[mt.obsidianShieldReinforcement]:"Obsidian Shield Reinforcement",[mt.runeShields]:"Rune Shields",[mt.rocktalCollectorEnhancement]:"Rock'tal Collector Enhancement",[mt.catalyserTechnology]:"Catalyser Technology",[mt.plasmaDrive]:"Plasma Drive",[mt.efficiencyModule]:"Efficiency Module",[mt.depotAI]:"Depot AI",[mt.generalOverhaul_lightFighter]:"General Overhaul (Light Fighter)",[mt.automatedTransportLines]:"Automated Transport Lines",[mt.improvedDroneAI]:"Improved Drone AI",[mt.experimentalRecyclingTechnology]:"Experimental Recycling Technology",[mt.generalOverhaul_cruiser]:"General Overhaul (Cruiser)",[mt.slingshotAutopilot]:"Slingshot Autopilot",[mt.highTemperatureSuperconductors]:"High-Temperature Superconductors",[mt.generalOverhaul_battleship]:"General Overhaul (Battleship)",[mt.artificialSwarmIntelligence]:"Artificial Swarm Intelligence",[mt.generalOverhaul_battlecruiser]:"General Overhaul (Battlecruiser)",[mt.generalOverhaul_bomber]:"General Overhaul (Bomber)",[mt.generalOverhaul_destroyer]:"General Overhaul (Destroyer)",[mt.experimentalWeaponsTechnology]:"Experimental Weapons Technology",[mt.mechanGeneralEnhancement]:"Mechan General Enhancement",[mt.heatRecovery]:"Heat Recovery",[mt.sulphideProcess]:"Sulphide Process",[mt.psionicNetwork]:"Psionic Network",[mt.telekineticTractorBeam]:"Telekinetic Tractor Beam",[mt.enhancedSensorTechnology]:"Enhanced Sensor Technology",[mt.neuromodalCompressor]:"Neuromodal Compressor",[mt.neuroInterface]:"Neuro-Interface",[mt.interplanetaryAnalysisNetwork]:"Interplanetary Analysis Network",[mt.overclocking_heavyFighter]:"Overclocking (Heavy Fighter)",[mt.telekineticDrive]:"Telekinetic Drive",[mt.sixthSense]:"Sixth Sense",[mt.psychoharmoniser]:"Psychoharmoniser",[mt.efficientSwarmIntelligence]:"Efficient Swarm Intelligence",[mt.overclocking_largeCargo]:"Overclocking (Large Cargo)",[mt.gravitationSensors]:"Gravitation Sensors",[mt.overclocking_battleship]:"Overclocking (Battleship)",[mt.psionicShieldMatrix]:"Psionic Shield Matrix",[mt.kaeleshDiscovererEnhancement]:"Kaelesh Discoverer Enhancement"},pl={darkMatter:"Dark Matter"},hl={tabs:{dateRanges:"Date Ranges",colors:"Colors",common:"Common",importExport:"Import/Export",expeditions:"Expeditions",combats:"Combats",debrisFields:"Debris Fields",resourceBalance:"Resource Balance",universeHistory:"Universe History",dangerZone:"Danger Zone",accessbility:"Accessibility",linkAccounts:"Link Accounts",migrateOldData:"Migrate old data"},dateRanges:{defaultNames:{today:"Today",yesterday:"Yesterday",currentWeek:"Current week",lastWeek:"Last week",currentMonth:"Current month",newRange:"new range"},since:e=>`Since ${e}`,firstDayTemplate:"<first day>",headers:{label:"Label",type:"Type",rangeStart:"Range starts",rangeContains:"Range contains"},day:"day",days:"days",daysAgo:"days ago",week:"week",weeks:"weeks",weeksAgo:"weeks ago",month:"month",months:"months",monthsAgo:"months ago",year:"year",years:"years",yearsAgo:"years ago"},colors:{combatResults:"Combat results",expeditionEvents:"Expedition events",expeditionEventSizes:"Expedition event sizes",expeditionDepletionLevels:"System depletion",lifeformDiscoveries:"Lifeform discoveries",lifeforms:"Lifeforms",resources:"Resources",ships:"Ships"},common:{conversionRates:{title:"Conversion rates",msuLong:"Convert to Metal",dsuLong:"Convert to Deuterium"},extensionLanguage:"UI language (within OGame Tracker)",extensionLanguageFallbackHint:"English texts will be shown if texts are not available in the selected language.",serverSettings:{title:"Server data",lastUpdate:"Last update",forceUpdate:"Update server data"}},expeditions:{resourceUnitFactorsOfShipFoundOnExpeditions:"Factors of resource units of ships found on expeditions"},combats:{resourceUnitFactorsOfLostShips:"Factor of resource units of ships lost in combat",ignoreEspionageCombats:{title:"Ignore espionage combats",label:"Ignore espionage combat reports for combat tracking"}},resourceBalance:{detailedResourceBalance:{header:"Detailed resource balance",checkboxLabel:"Show detailed resource balance"},includeShipsFoundOnExpeditions:{header:"Ships found in expeditions",checkboxLabel:"Include resources of ships found on expeditions in resource balance"},includeShipsLostInCombats:{header:"Ships lost in combats",checkboxLabel:"Include resources of ships lost in combats in resource balance"},includeLostLootResources:{header:"Resource lost in combats",checkboxLabel:"Include resources that were lost in combats in resource balance"}},showConvertedUnitsInTables:{title:"MSU/DSU in tables",label:"Show converted MSU/DSU values in tables",infoAmortization:"Amortization time will still be calculated using cost and production in MSU/DSU"},reset:"Reset settings",setDefaultRoute:"Set as default",setDefaultSubRoute:"Set as default for this area",dangerZone:{doYouWantToContinue:"ARE YOU SURE YOU WANT TO CONTINUE?",deleteExpeditions:{button:e=>`Delete all tracked expeditions for the currently selected account (${e})`,confirmationText:(e,t)=>`If you confirm, all ${t} tracked expeditions will be deleted for the currently selected account (${e}).`},deleteCombats:{button:e=>`Delete all tracked combats for the currently selected account (${e})`,confirmationText:(e,t)=>`If you confirm, all ${t} tracked combats will be deleted for the currently selected account (${e}).`},deleteDebrisFieldReports:{button:e=>`Delete all tracked debris field harvest reports for the currently selected account (${e})`,confirmationText:(e,t)=>`If you confirm, all ${t} tracked debris field harvest reports will be deleted for the currently selected account (${e}).`},deleteAccount:{button:e=>`Delete all data of the currently selected account (${e})`,confirmationText:e=>`If you confirm, all tracked data for the currently selected account (${e}) will be deleted.\nThis includes tracked universe history data if there is no other account tracked for this universe.`},deleteUniverseHistory:{button:e=>`Delete tracked universe history of currently selected universe (${e})`,confirmationText:e=>`If you confirm, all tracked universe history data for the currently selected universe (${e}) will be deleted.`},deleteEverything:{button:"Delete all data",confirmationText1:"If you confirm, all data will be deleted.\nThis includes tracked data of every account including tracked expeditions, combats, debris field reports, universe history data, and more.",confirmationText2:"Please confirm again that you want to delete all data."}},importExport:{export:{header:"Export",description:"Here you can export your data. This will include relevant data of all your tracked accounts and their servers.",includeUniverseHistory:"include universe history in export (this may greatly increase file size and import time!)",button:"Start export",wait:"Please wait while your data is being prepared for the export...",errors:{unexpectedError:"An unexpected error occured while exporting your data."}},import:{header:"Import",description:"Here you can import your data from a file. Please select your file.",button:"Start import",wait:"Please wait while your data is being imported...",errors:{invalidFormat:"The file format is invalid.",unexpectedError:"An unexpected error occured while importing your data."}},importCallbacks:{importingSettings:"Importing your settings",importingBasicData:"Importing basic account and server data",importingUniverseHistories:(e,t,r,a)=>`Importing server universe history (server ${e+1}/${t}, entry ${r+1}/${a})`,importingAccounts:(e,t,r,a,n)=>{const o="Importing accounts",i=`${e+1}/${t}`;if("account"==r)return`${o} (${i})`;if("combat-reports"==r)return`${o} (${i}, combat ${a+1}/${n})`;if("expeditions"==r)return`${o} (${i}, expedition ${a+1}/${n})`;if("debris-fields"==r)return`${o} (${i}, debris field ${a+1}/${n})`;if("lifeform-discoveries"==r)return`${o} (${i}, lifeform mission ${a+1}/${n})`;if("empire.data"==r)return`${o} (${i}, basic empire data)`;if("empire.planets"==r)return`${o} (${i}, planet ${a+1}/${n})`;if("empire.moons"==r)return`${o} (${i}, moon ${a+1}/${n})`;if("universe-specific-settings"==r)return`${o} (${i}, universe specific settings)`;throw new Error(`Invalid type '${r}'`)}}},accessibility:{showSimplifiedResults:{title:"Simplified visualization",label:"Simplified visualization, hides original messages of expedition results and DF harvest reports, and shows icons instead of texts in notifications."}},debrisFields:{separateExpeditionDebrisFields:{title:"Separate position 16",label:"Separate debris fields harvested at position 16 from position 1-15"}},linkAccounts:{header:e=>`Link accounts with the current account (${e})`,descriptionHtml:e=>`You should only link accounts if you want the OGame Tracker to consider data of the linked accounts as data of the current account (${e}).<br/>This is often the case when an account has been merged to another server and is handled as a separate account in the OGame Tracker.<br/><br/>Example: <br/><ol>\n                    <li>the player "OGame Professional" is playing on the server "EN Milkyway"</li>\n                    <li>the server "EN Milkyway" becomes exodus universe during a merge</li>\n                    <li>the player "OGame Professional" merges their account to "EN Cartwheel"</li>   \n                    <li>after the merge, the OGame Tracker shows no expeditions from the original server "EN Milkyway" for the merged account</li>\n                    <li>in the OGame Tracker the old account "OGame Professional" on server "EN Milkyway" is linked to the new account "OGame Professional" on server "EN Cartwheel"</li>\n                    <li>expeditions that were sent on the old server "EN Milkyway" will now show up again for the merged account on "EN Cartwheel"</li>\n                </ol>\n            `,linkAccount:"link another account:",linkedAccounts:"Linked accounts:"}},fl={[ee.metal]:"Metal",[ee.crystal]:"Crystal",[ee.deuterium]:"Deuterium",energy:"Energy"},gl={ogame:{buildings:ll,lifeforms:dl,lifeformBuildings:ul,lifeformTechnologies:ml,premium:pl,resources:fl,research:cl,ships:il,defenses:sl},extension:{common:{averagePerDay:"⌀ per day",chart:"Chart",table:"Table",sum:"Sum",total:"total",resourceUnits:"Resource units",dsu:"DSU",msu:"MSU",date:"Date",dateTime:"Date & Time",madeWithLove1:"Made with",madeWithLove2:"by Wonkydonky"},settings:hl,resources:fl,expeditions:{header:"Expeditions",tabHeaders:{overview:"Overview",foundResources:"Resources",foundShips:"Ships",foundDarkMatter:pl.darkMatter,foundItems:"Items",depletion:"Depletion",info:{header:"Info",topFinds:"Top Finds",possibleFinds:"List of Possible Finds"},subHeaders:{amount:"Amount",sizes:"Sizes",resources:"Resource Units",count:"Count",sizesByResource:"Sizes by Resource"}},expeditionEvents:{[vt.nothing]:"No Event",[vt.resources]:"Resources",[vt.fleet]:"Ships",[vt.delay]:"Delay",[vt.early]:"Early",[vt.darkMatter]:pl.darkMatter,[vt.pirates]:"Pirates",[vt.aliens]:"Aliens",[vt.combat]:"Combat",[vt.item]:"Item",[vt.trader]:"Trader",[vt.lostFleet]:"Lost Fleet"},expeditionEventSizes:{[yt.small]:"Common Find",[yt.medium]:"Large Find",[yt.large]:"Huge Find","fled-death-star":"Enemies fled"},depletionLevels:{[bt.none]:"Very Low",[bt.low]:"Low",[bt.medium]:"Medium",[bt.high]:"High",unknown:"Unknown"},expeditions:"Expeditions",finds:"Finds",shipsFound:"Ships found",depletion:"System depletion",topFinds:{title:e=>`Top finds (${e})`,shipUnits:"Ship units",shipAmount:"Ship amount",size:"Size",amount:"Amount",date:"Date"},possibleFinds:{info:{playerClass:"Player class",economySpeed:"Economy speed",resourceFindBonus:"Bonus resource finds",shipFindBonus:"Bonus ship finds",darkMatterFindBonus:"Bonus Dark Matter finds",discovererBonus:"Discoverer class bonus"},maximumFinds:"Maximum Finds",findsDarkMatter:"Ranges of DM finds",listOfPossibleFinds:"List of possible finds (resources, ship units)",findSizes:e=>`Possible find amounts (${e})`,shipUnits:"Ship units",shipMaxUnitsConverted:"Max. Ship units"}},combats:{header:"Combats",tabHeaders:{overview:"Overview",loot:"Loot",lostShips:"Lost Ships",subHeaders:{againstPlayers:"Against Players",onExpeditions:"On Expeditions",amount:"Amount",resources:"Resource Units"}},combats:"Combats",shipsLost:"Ships Lost",combatResults:{[J.won]:"Wins",[J.lost]:"Losses",[J.draw]:"Draws"}},donate:{header:"Donate",subHeader:"Donate to support the development of the OGame Tracker",crypto:{header:"Donate crypto"},kofi:{header:"Donate with PayPal or debit/credit card",buttonText:"Donate on Ko-Fi",message:"You don't need to create an account on Ko-Fi to donate. All donations are forwarded directly to the developer."}},debrisFields:{header:"Debris Fields",addDebrisFieldManually:{title:"Add debris field manually",buttonText:"Add"},position:"Position"},resourceBalance:{header:"Resource Balance","combat-report":"from combats","debris-field-report":"from debris fields",expedition:"from expeditions"},empire:{header:"Empire",planet:"Planet",overview:{header:"Overview",supplyBuildings:"Supply Buildings",facilityBuildings:"Facilities"},production:{header:"Production",subHeaders:{resourceProduction:"Resource Production",mineOverview:"Mine Overview"},averagePerHour:"⌀ per hour",totalPerHour:"total per hour",totalPerDay:"total per day",totalPerWeek:"total per week",activeProductionSettings:"Active Production Settings",messageProduction100:"The shown values refer to a production factor of 100% and do not take lack of energy into account.",mines:{crawlersAvailable:"available",crawlersToReachLimit:e=>`${e} crawlers for maximum bonus`},items:"Active items",breakdown:{basicIncome:"Basic Income",mineProduction:"Mine Production",consumption:"Consumption",lifeformBuildings:"Lifeform Buildings",crawlers:"Crawlers",items:"Items",geologist:"Geologist",commandStaff:"Command Staff",playerClass:"Player Class",allianceClass:"Alliance Class",lifeformTechnologies:"Lifeform Technologies"},settings:{reset:"Reset",header:"Production settings",applyAndClose:"Apply and close production settings"}},amortization:{header:"Amortization",table:{cost:"Cost",levels:"Levels",productionPlus:"Production Plus",amortizationTime:"Amortization Time",groupSelectedItems:"Group selected items",showOriginalItems:"Show all items individually",levelsOnPlanets:(e,t)=>`${e} ${1==e?"level":"levels"} on ${t} ${1==t?"planet":"planets"}`},settings:{header:"Settings",applyAndClose:"Apply settings and close",includeSettings:{header:"Include in calculation",mines:"Mines",expeditions:"Expeditions",expeditionsRequirement:"Note: Requires at least one of lifeform expedition bonus researches, lifeform research bonus buildings, and astrophysics to be selected",lifeformProductionBonusBuildings:"Lifeform production bonus buildings",lifeformTechnologyBoostBuildings:"Lifeform research bonus buildings",lifeformProductionBonusTechnologies:"Lifeform production bonus researches",lifeformExpeditionBonusTechnologies:"Lifeform expedition bonus researches",astrophysicsAndColony:"Astrophysics and new colonies",astrophysicsPerformanceNote:"Note: Computationally intensive, will greatly affect performance"},playerSettings:{header:"General Settings",optimizeForResources:"Optimize for selected resources",officers:"Officers",playerClass:"Player Class",allianceClass:"Alliance Class",currentLevelOf:e=>`Current Level of ${e}`,lifeformLevels:"Lifeform Levels",unusedRaidColonySlots:"Currently unused raid colony slots"},astrophysicsSettings:{header:e=>`${e} Settings`,newColony:"new Colony"},planetSettings:{header:"Planet Settings",global:{deselectItems:"Deselect all items",ignoreInactiveLifeformTechnologySlots:"Ignore inactive lifeform technology slots for all planets",deselectAllPlanets:"Deselect all planets"},includeInResult:"Include in calculation",position:"Position",maxTemperature:"Max. Temperature",activeItems:"Active Items",crawlers:{title:"Crawlers",percentage:"% Production",fixCount:"Fixed Count",maxCount:"Max. Count"},mines:"Current Mine Levels",lifeform:"Lifeform",lifeformSettings:"Lifeform settings",relevantLifeformBuildings:"Relevant Lifeform Buildings",lifeformTechnologies:"Lifeform Technologies",ignoreEmptySlots:"Ignore inactive slots"},expeditionSettings:{header:"Expedition Settings",averageWavesPerDay:"⌀ Waves per day",items:"Slot items",averageExpeditionsPerDay:"⌀ Expeditions per day",shipUnitFactors:"Ship resource unit factors",topPlayerScore:"Top player score"}},info:{generatingItems:"Calculating next best items",slowCalculation:"The amortization calculation became pretty slow now that it includes lifeform buildings and technologies. This will hopefully be improved in the future.",ctrlClick:"Ctrl + Click on a check to (de)select all items up to the selected one."},saveLoad:{saveButton:"Save calculated amortization results",loadButton:e=>`Load save (${e})`,loadedSave:(e,t)=>`Viewing saved results (${e}) - ${t} hidden rows`,abandonedPlanet:"Abandoned Planet"},generateItems:e=>`${e} entries`},lifeforms:{header:"Lifeforms",subHeaders:{overview:"Overview",progress:"Progress",discoveryMissions:"Missions",discoveryResults:"Results",experience:"Experience",researchBonuses:"Global Research Bonuses",planetBonuses:"Effective Planet Bonuses"},planet:"Planet",lifeform:"Lifeform",buildings:"Lifeform Buildings",technologies:"Lifeform Technologies",tier:"Tier",level:"Level",totalLifeformExperience:"Experience (total)",discoveryDateUnknown:"Unknown",notDiscoveredYet:"Not discovered yet",discoveryMissions:"Discovery Missions",eventTypes:{[kt.nothing]:"No finding",[kt.lostShip]:"Lost exploration ship",[kt.newLifeformFound]:"New lifeform",[kt.knownLifeformFound]:"Lifeform experience",[kt.artifacts]:"Artifacts found"},artifactFindingSizes:{[Ct.small]:"Common Find",[Ct.medium]:"Large Find",[Ct.large]:"Huge Find",[Ct.storageFull]:"Storage Full"},lifeformFound:"Lifeform found",alwaysAvailable:"Always available",artifacts:"Artifacts",experiencePoints:"Experience Points",discoveredOn:"Lifeform discovered on",numberOfLifeformDiscoveries:"Number of discoveries",globalResearchBonus:"Global research bonus",researchBonuses:{breakdown:{slot:"Slot",research:"Research",bonus:"Bonus",lifeformBuildingsBoost:"Lifeform Building Boost",lifeformLevelBoost:(e,t)=>`Lifeform Level Boost (${e}: ${t})`,bugBoost:"Boost caused by bugs"},production:{header:"Resource Production"},expeditionFinds:{header:"Expedition Finds",resources:"Resources",ships:"Ships",fleetLoss:"Fleet losses"},expeditionSpeed:{header:"Expedition Arrival Speed",bonus:"Speed Bonus"},ships:{header:"Ships",armor:"Armor",shield:"Shield",damage:"Damage",cargo:"Cargo",speed:"Speed"},defenses:{header:"Defenses"},fuelConsumption:{header:"Fuel Consumption"},fuelReturn:{header:"Fuel Return on Recall",bonus:"Fuel Return"},buildingCostTime:{header:"Building Cost & Time",cost:"Cost",time:"Time"},researchCostTime:{header:"Research Cost & Time",researches:"Researches",lifeformResearches:"Lifeform Researches"},crawlers:{header:"Crawlers",productionBonus:"Resource Production",energyConsumption:"Energy Consumption"},denCapacity:{header:"Den Capacity"},phalanxRange:{header:"Phalanx Range"},discoveryMissions:{header:"Discovery Mission Speed"},playerClasses:{header:"Player Classes",collector:{productionBonus:"Increased mine production",energyProductionBonus:"Increased energy production",transporterSpeedBonus:"Transporter speed bonus",transporterCargoBonus:"Transporter cargo bonus",crawlerProductionBonus:"Crawler production bonus",geologistCrawlerAmountBonus:"More usable crawlers with Geologist"},discoverer:{researchDuration:"Research time",increasedExpeditionFinds:"Increased gain on expeditions",largerPlanets:"Larger planets on colonization",additionalExpeditionSlots:"Additional expedition slots",reducedExpeditionCombatChance:"Chance of expedition combats",phalanxRange:"Increased phalanx range"},general:{combatShipSpeed:"Combat ship speed bonus",recyclerSpeed:"recycler speed bonus",fuelConsumption:"Fuel consumption for all ships",increasedCargoRecyclersPathfinders:"Increased cargo for Recyclers/Pathfinders",additionalCombatResearchLevels:"Additional combat research levels",additionalFleetSlots:"Additional fleet slots",additionalMoonFields:"Additional moon fields"},classBonus:"Class Bonus",bonus:"Bonus",baseValue:"Base Value",valueWithBonuses:"Value with Bonuses"}},planetBonuses:{resourceProduction:{header:"Resource Production"},lifeformResearchCostTime:{header:"Lifeform Research Cost & Time"},wreckfield:{header:"Wreckfield"}},topFinds:{topFinds:"Best Finds",worstFinds:"Worst Finds",size:"Size",amount:"Amount",date:"Date",artifacts:"Artifacts",experience:"XP"}}},switchAccounts:{title:"Select account to view in a new tab"},about:{faqHelp:{header:"Help",faq:{header:"F.A.Q.",fleetLostOnExpedition:{header:"Why are the ships not tracked that I lost on expeditions?",text:"Tracking lost ships on expeditions requires permanent fleet tracking which is not feasible."},syncBetweenDevices:{header:"Why is there no synchronization of my data between multiple devices?",text:"The tracker saves a lot more data than can be synchronized using your user account (Google, Microsoft, etc). A synchronization with an external server might be possible in the future."},productionInResourceBalance:{header:"Why does the resource balance not include my resource production?",text:"Your resource production depends on various factors, and their changes would have to be tracked permanently. While this is possible, an implementation of this feature would be much more complex than it would be of use for its users."},whatAreAverages:{header:"What does the '⌀ per day' mean?",text:"This is the average over all days with at least one tracked event."}},tips:{header:"Tips",rightClickDefaultRoute:"You can right-click a main tab on the left side or any of its sub-menu items to set this menu as standard for the selected route.",numbersKeyboardNavigation:"You can open the pages of the tabs with a digit by pressing the respective digit key on your keyboard.",amortizationTable:{part1:"Want to know what to build or research next to improve your resource production the most efficient way? Try the ",name:"interactive amortization calculator",part2:"."},inlineSettings:"You can change related settings immediately by pressing the small gear icon on the right side.",switchAccountHtml:'You can open the OGame Tracker interface for another tracked account by clicking the <span class="mdi mdi-account-multiple"></span> icon and selecting the account.'},messageDiscord:{part1:"Need help, found a bug, or have a feature request? Join the ",discordServer:"Discord server",part2:" and write a message in the related channel."}},info:{header:"Info",table:{currentAccount:{header:"Information about the selected account",numberOfTrackedExpeditions:"Number of tracked expeditions",numberOfTrackedCombatReports:"Number of tracked combat reports",numberOfTrackedDebrisFieldReports:"Number of tracked harvest reports",numberOfTrackedLifeformDiscoveries:"Number of tracked discovery missiongs",lastUpdateServerSettings:"Latest server settings update",numberOfUniverseHistoryEntries:"Number of entries in universe history"},global:{header:"Information about all data in the OGame Tracker",numberOfTrackedAccounts:"Number of tracked accounts",estimatedSize:"Size of all saved data on disk"}}}},universeHistory:{header:"Universe History",settings:{messages:{notEnabledHtml:"\n            <b>Universe highscore tracking is not enabled.</b><br/>\n            Enabling this feature will track highscore changes for players and alliances.\n            ",historyTrackingNotEnabledHtml:'\n            <b>Universe history tracking is not enabled.</b><br/>\n            Enabling this feature will additionally track all changes for players and alliances.<br/>\n            This includes player and alliance name and tag changes, alliance membership changes, \n            player status changes, and changes regarding planets and moons \n            including names, coordinates, and abandoned/destroyed planets and moons.<br />\n            <i>This can generate a lot of data!\n            You can deactivate this feature <a href="#/settings/universe-history">in the settings menu</a> \n            again.</i>\n            ',trackingTimesHtml:"\n            At least once every day the highscores and universe data (if enabled) will be updated.<br/>\n            You can set the update times below.\n            If an update was missed then it will update as soon as possible afterwards.\n            "},enableHighscoreTrackingOnly:"Enable universe highscore tracking",enableHistoryTracking:"Enable universe history tracking"},tabs:{players:"Players",alliances:"Alliances",subtabs:{highscore:"Highscore",history:"History"}},playerSelection:{header:"Player selection",search:"search for player"},allianceSelection:{header:"Alliance selection",search:"search for alliance"},highscoreTabs:{total:"Total",economy:"Economy",research:"Research",military:"Military",militaryBuilt:"Military built",militaryDestroyed:"Military destroyed",militaryLost:"Military lost",honor:"Honor",numberOfShips:"Number of ships",lifeform:"Lifeform",lifeformDiscoveries:"Lifeform discoveries",lifeformEconomy:"Lifeform economy",lifeformTechnology:"Lifeform technology"},historyTabs:{status:"Status",nicknames:"Nicknames",alliances:"Alliances",planetAndMoons:"Planets & Moons",tags:"Tags",names:"Names",members:"Members"},noAlliance:"no alliance",today:"today",name:"Name",tag:"Tag",members:"Members",alliance:"Alliance",from:"From",until:"Until",status:{active:"Active",vacation:"Vacation Mode",inactive:"Inactive (>= 7 days)",inactiveLong:"Inactive (>= 28 days)",banned:"Banned",outlaw:"Outlaw",deleted:"Deleted",admin:"Admin"},loadingTakingLong:"Loading the data is taking longer than expected. The database is probably updating right now, so please be patient or try again later."},notifications:{combatTracking:{title:e=>"1"==e?`${e} new combat report tracked`:`${e} new combat reports tracked`,message:e=>"1"==e?`${e} new combat report has been tracked.`:`${e} new combat reports have been tracked.`},debrisFieldReportTracking:{title:e=>"1"==e?`${e} new debris field report tracked`:`${e} new debris field reports tracked`,message:e=>"1"==e?`${e} new debris field report has been tracked.`:`${e} new debris field reports have been tracked.`},expeditionTracking:{fleetLost:{title:e=>`${e} lost fleet`,message:e=>"1"==e?`${e} fleet did not return from its expedition.`:`${e} fleets did not return from their expeditions.`},result:{title:e=>"1"==e?`${e} new expedition tracked`:`${e} new expeditions tracked`,summary:"Summary of findings",events:"Expedition events"}},lifeformDiscoveryTracking:{title:e=>"1"==e?`${e} new lifeform discovery mission tracked`:`${e} new lifeform discovery missions tracked`,message:e=>"1"==e?`${e} new lifeform discovery mission has been tracked.`:`${e} new lifeform discovery missions have been tracked.`},messageTrackingError:{title:e=>"1"==e?`Failed to process ${e} message`:`Failed to process ${e} messages`,message:e=>"1"==e?`${e} message caused an error and has not been tracked. The causing message has been marked in red. Please contact the developer.`:`${e} messages caused an error and have not been tracked. The causing messages have been marked in red. Please contact the developer.`}},tools:{signatureGenerator:{header:"Signature Generator",averagePerHour:"⌀/hour",totalPerHour:"per hour",totalPerDay:"per day",totalPerWeek:"per week",production:"Production",expeditions:"Expeditions",lifeformDiscoveries:"LF Missions",combats:"Combats",debrisFieldReports:"Harvested DFs"},scrapyardMerchant:{header:"Scrapyard Merchant",percentage:"% at the scrapyard merchant",count:"Count"}},excelExport:{header:"Excel Export",chooseBelowMessage:"Choose below which data you want to include in the export:",groups:{expeditions:{header:"Expeditions",rawData:"Raw data (every single tracked expedition)",dailyOverview:"Overview of results per day",dailyDepletion:"Overview of system depletion per day",dailyResources:"Resource findings per day",dailyResourceSizes:"Sizes of resource findings per day",dailyShips:"Ship findings per day",dailyShipSizes:"Sizes of ship findings per day",dailyDarkMatter:"Dark matter findings per day",dailyDarkMatterSizes:"Sizes of dark matter findings per day"},combats:{header:"Combats",rawData:"Raw data (every single tracked combat result)",dailyResults:"Combat results per day",dailyLoot:"Loot balance per day",dailyLostShips:"Lost ships per day"},debrisFields:{header:"Debris Fields",rawData:"Raw data (every single tracked harvest report)",dailyResources:"Harvested resources per day"},lifeformDiscoveries:{header:"Discovery Missions",rawData:"Raw data (every single tracked discovery mission)",dailyExperience:"Gained experience per day"}},generateButton:"Generate Excel export",expeditions:{prefix:"EX",sheets:{rawData:"Raw Data",dailyDepletion:"Daily System Depletion",dailyResults:"Daily Results",dailyResources:"Daily Resources",dailyResourcesSize:"Daily Resources (Size)",dailyShips:"Daily Ships",dailyShipsSize:"Daily Ships (Size)",dailyDarkMatter:"Daily Dark Matter",dailyDarkMatterSize:"Daily Dark Matter (Size)"},eventType:"Type",eventSize:"Size",item:"Item"},combats:{prefix:"CR",sheets:{rawData:"Raw Data",dailyResults:"Daily Results",dailyLoot:"Daily Loot",dailyLostShips:"Daily Lost Ships"},result:"Combat Result",coordinates:"Coordinates",galaxy:"Galaxy",system:"System",position:"Position",targetType:"Target Type",combatType:"Combat Type",expeditionCombatOpponent:"Expedition Combat Opponent",loot:"Loot",lostShips:"Lost Ships",debrisField:"Debris Field",moon:"Moon",planet:"Planet",expeditionCombat:"Expedition Combat",playerCombat:"Player Combat",pirates:"Pirates",aliens:"Aliens",againstPlayers:"Against Players",onExpeditions:"On Expeditions"},debrisFields:{prefix:"DF",sheets:{rawData:"Raw Data",dailyResources:"Daily Resources"}},lifeformDiscoveries:{prefix:"LF",sheets:{rawData:"Raw Data",dailyExperience:"Daily Experience"},result:"Finding",experience:"Experience",lifeform:"Lifeform",artifacts:"Artifacts",artifactsSize:"Size"}},playerClasses:{collector:"Collector",discoverer:"Discoverer",general:"General",none:"none"}}},yl={[at.lightFighter]:"Caça Ligeiro",[at.heavyFighter]:"Caça Pesado",[at.cruiser]:"Cruzador",[at.battleship]:"Nave de Batalha",[at.battlecruiser]:"Interceptor",[at.bomber]:"Bombardeiro",[at.destroyer]:"Destruidor",[at.deathStar]:"Estrela da Morte",[at.reaper]:"Ceifeira",[at.pathfinder]:"Exploradora",[at.smallCargo]:"Cargueiro Pequeno",[at.largeCargo]:"Cargueiro Grande",[at.colonyShip]:"Nave de Colonização",[at.recycler]:"Reciclador",[at.espionageProbe]:"Sonda de Espionagem",[at.solarSatellite]:"Satélite Solar",[at.crawler]:"Rastejador"},vl={[Ys.rocketLauncher]:"Lançador de Misséis",[Ys.lightLaser]:"Laser Ligeiro",[Ys.heavyLaser]:"Laser Pesado",[Ys.gaussCannon]:"Canhão de Gauss",[Ys.ionCannon]:"Canhão de Iões",[Ys.plasmaTurret]:"Canhão de Plasma",[Ys.smallShieldDome]:"Pequeno Escudo Planetário",[Ys.largeShieldDome]:"Grande Escudo Planetário"},bl={[We.metalMine]:"Mina de Metal",[We.crystalMine]:"Mina de Cristal",[We.deuteriumSynthesizer]:"Sintetizador de Deutério",[We.metalStorage]:"Armazém de Metal",[We.crystalStorage]:"Armazém de Cristal",[We.deuteriumTank]:"Tanque de Deutério",[We.solarPlant]:"Planta de Energia Solar",[We.fusionReactor]:"Planta de Fusão",[We.roboticsFactory]:"Fábrica de Robots",[We.shipyard]:"Hangar",[We.researchLab]:"Laboratório de Pesquisas",[We.allianceDepot]:"Depósito da Aliança",[We.missileSilo]:"Silo de Mísseis",[We.naniteFactory]:"Fábrica de Nanites",[We.terraformer]:"Terra-Formador",[We.spaceDock]:"Estaleiro Espacial",[We.lunarBase]:"Base Lunar",[We.sensorPhalanx]:"Sensor Phalanx",[We.jumpGate]:"Portal de Salto Quântico"},wl={[ot.energyTechnology]:"Tecnologia de Energia",[ot.laserTechnology]:"Tecnologia Laser",[ot.ionTechnology]:"Tecnologia de Iões",[ot.hyperspaceTechnology]:"Tecnologia de Hiperespaço",[ot.plasmaTechnology]:"Tecnologia de Plasma",[ot.espionageTechnology]:"Tecnologia de Espionagem",[ot.computerTechnology]:"Tecnologia de Computadores",[ot.astrophysics]:"Astrofísica",[ot.intergalacticResearchNetwork]:"Rede Intergaláctica de Pesquisas",[ot.gravitonTechnology]:"Tecnologia de Gravitação",[ot.combustionDrive]:"Motor de Combustão",[ot.impulseDrive]:"Motor de Impulsão",[ot.hyperspaceDrive]:"Motor Propulsor de Hiperespaço",[ot.weaponsTechnology]:"Tecnologia de Armas",[ot.shieldingTechnology]:"Tecnologia de Escudo",[ot.armorTechnology]:"Tecnologia de Blindagem"},xl={[lt.none]:"Nenhuma forma de vida",[lt.humans]:"Humanos",[lt.rocktal]:"Rock'tal",[lt.mechas]:"Mechas",[lt.kaelesh]:"Kaelesh"},Sl={[dt.residentialSector]:"Setor Residencial",[dt.biosphereFarm]:"Quinta de Biosfera",[dt.researchCentre]:"Centro de Pesquisa",[dt.academyOfSciences]:"Academia de Ciências",[dt.neuroCalibrationCentre]:"Centro de Neurocalibragem",[dt.highEnergySmelting]:"Fundição de Alta Energia",[dt.foodSilo]:"Silo de Comida",[dt.fusionPoweredProduction]:"Produção com Recurso a Fusão",[dt.skyscraper]:"Arranha-céus",[dt.biotechLab]:"Laboratório de Biotecnologia",[dt.metropolis]:"Metrópole",[dt.planetaryShield]:"Escudo Planetário",[dt.meditationEnclave]:"Enclave de Meditação",[dt.crystalFarm]:"Quinta de Cristal",[dt.runeTechnologium]:"Tecnologium Rúnico",[dt.runeForge]:"Forja Rúnica",[dt.oriktorium]:"Oriktorium",[dt.magmaForge]:"Forja de Magma",[dt.disruptionChamber]:"Câmara de Disrupção",[dt.megalith]:"Megálito",[dt.crystalRefinery]:"Refinaria de Cristal",[dt.deuteriumSynthesiser]:"Sintetizador de Deutério",[dt.mineralResearchCentre]:"Centro de Pesquisa de Minerais",[dt.advancedRecyclingPlant]:"Centro de Reciclagem Avançada",[dt.assemblyLine]:"Linha de Montagem",[dt.fusionCellFactory]:"Fábrica de Células de Fusão",[dt.roboticsResearchCentre]:"Centro de Pesquisa Robótica",[dt.updateNetwork]:"Rede de Atualização",[dt.quantumComputerCentre]:"Centro de Computação Quântica",[dt.automatisedAssemblyCentre]:"Centro de Montagem Automatizado",[dt.highPerformanceTransformer]:"Transformador de Alto Desempenho",[dt.microchipAssemblyLine]:"Linha de Montagem de Microchips",[dt.productionAssemblyHall]:"Sala de Montagem da Linha de Produção",[dt.highPerformanceSynthesiser]:"Sintetizador de Alto Desempenho",[dt.chipMassProduction]:"Produção Massiva de Chips",[dt.nanoRepairBots]:"Nanorobôs de Reparação",[dt.sanctuary]:"Santuário",[dt.antimatterCondenser]:"Condensador de Antimatéria",[dt.vortexChamber]:"Câmara do Vórtice",[dt.hallsOfRealisation]:"Salões do Conhecimento",[dt.forumOfTranscendence]:"Fórum da Transcendência",[dt.antimatterConvector]:"Convetor de Antimatéria",[dt.cloningLaboratory]:"Laboratório de Clonagem",[dt.chrysalisAccelerator]:"Acelerador de Crisálidas",[dt.bioModifier]:"Biomodificador",[dt.psionicModulator]:"Modulador Psiónico",[dt.shipManufacturingHall]:"Sala de Produção de Naves",[dt.supraRefractor]:"Super-refrator"},kl={[mt.intergalacticEnvoys]:"Emissários Intergalácticos",[mt.highPerformanceExtractors]:"Extratores de Alto Desempenho",[mt.fusionDrives]:"Motores de Fusão",[mt.stealthFieldGenerator]:"Geradores de Campo Furtivo",[mt.orbitalDen]:"Esconderijo Orbital",[mt.researchAI]:"IA de Pesquisa",[mt.highPerformanceTerraformer]:"Terra-Formador de Alto Desempenho",[mt.enhancedProductionTechnologies]:"Tecnologias de Produção Melhoradas",[mt.lightFighterMkII]:"Caça Ligeiro V2",[mt.cruiserMkII]:"Cruzador V2",[mt.improvedLabTechnology]:"Tecnologias de Laboratório Melhoradas",[mt.plasmaTerraformer]:"Terra-Formador a Plasma",[mt.lowTemperatureDrives]:"Motores de Baixa Temperatura",[mt.bomberMkII]:"Bombardeiro V2",[mt.destroyerMkII]:"Destruidor V2",[mt.battlecruiserMkII]:"Interceptor V2",[mt.robotAssistants]:"Assistentes Robóticos",[mt.supercomputer]:"Supercomputador",[mt.volcanicBatteries]:"Baterias Vulcânicas",[mt.acousticScanning]:"Varrimento Acústico",[mt.highEnergyPumpSystems]:"Sistemas de Bomba de Alto Desempenho",[mt.cargoHoldExpansion_CivilianShips]:"Expansão da Baía de Carga (Naves Civis)",[mt.magmaPoweredProduction]:"Produção com Recurso a Magma",[mt.geothermalPowerPlants]:"Centrais de Energia Geotérmica",[mt.depthSounding]:"Sonda de Profundidade",[mt.ionCrystalEnhancement_heavyFighter]:"Melhoramento de Cristal de Iões (Caça Pesado)",[mt.improvedStellarator]:"Gerador Estelar Melhorado",[mt.hardenedDiamondDrillHeads]:"Cabeças de Broca de Diamante Endurecido",[mt.seismicMiningTechnology]:"Tecnologia de Extração Sísmica",[mt.magmaPoweredPumpSystems]:"Sistemas de Bomba com Recurso a Magma",[mt.ionCrystalModules]:"Módulos de Cristais de Iões",[mt.optimisedSiloConstructionMethod]:"Método Otimizado de Construção de Silos",[mt.diamondEnergyTransmitter]:"Transmissor de Energia de Diamante",[mt.obsidianShieldReinforcement]:"Escudo Reforçado com Obsidiana",[mt.runeShields]:"Escudos Rúnicos",[mt.rocktalCollectorEnhancement]:"Melhoramento de Colecionador dos Rock’tal",[mt.catalyserTechnology]:"Tecnologia de Catalisador",[mt.plasmaDrive]:"Motor de Plasma",[mt.efficiencyModule]:"Módulo de Eficiência",[mt.depotAI]:"IA de Depósito",[mt.generalOverhaul_lightFighter]:"Remodelação Geral (Caça Ligeiro)",[mt.automatedTransportLines]:"Linhas de Transporte Automatizadas",[mt.improvedDroneAI]:"IA de Drones Melhorada",[mt.experimentalRecyclingTechnology]:"Tecnologia de Reciclagem Experimental",[mt.generalOverhaul_cruiser]:"Remodelação Geral (Cruzador)",[mt.slingshotAutopilot]:"Piloto Automático Gravítico",[mt.highTemperatureSuperconductors]:"Supercondutores de Alta Temperatura",[mt.generalOverhaul_battleship]:"Remodelação Geral (Nave de Batalha)",[mt.artificialSwarmIntelligence]:"Inteligência Artificial de Enxame",[mt.generalOverhaul_battlecruiser]:"Remodelação Geral (Interceptor)",[mt.generalOverhaul_bomber]:"Remodelação Geral (Bombardeiro)",[mt.generalOverhaul_destroyer]:"Remodelação Geral (Destruidor)",[mt.experimentalWeaponsTechnology]:"Tecnologia de Armas Experimental",[mt.mechanGeneralEnhancement]:"Melhoramento de General dos Mechas",[mt.heatRecovery]:"Recuperação de Calor",[mt.sulphideProcess]:"Processamento de Sulfuretos",[mt.psionicNetwork]:"Rede Psiónica",[mt.telekineticTractorBeam]:"Feixe de Captura Telecinético",[mt.enhancedSensorTechnology]:"Tecnologias de Sensores Melhoradas",[mt.neuromodalCompressor]:"Compressor Neuromodular",[mt.neuroInterface]:"Neurointerface",[mt.interplanetaryAnalysisNetwork]:"Rede de Análise Interplanetária",[mt.overclocking_heavyFighter]:"Overclocking (Caça Pesado)",[mt.telekineticDrive]:"Motor Telecinético",[mt.sixthSense]:"Sexto Sentido",[mt.psychoharmoniser]:"Harmonizador Psíquico",[mt.efficientSwarmIntelligence]:"Inteligência de Enxame Eficiente",[mt.overclocking_largeCargo]:"Overclocking (Cargueiro Grande)",[mt.gravitationSensors]:"Sensores de Gravitação",[mt.overclocking_battleship]:"Overclocking (Nave de Batalha)",[mt.psionicShieldMatrix]:"Matriz de Escudo Psiónico",[mt.kaeleshDiscovererEnhancement]:"Melhoramento de Descobridor dos Kaelesh"},Cl={darkMatter:"Matéria Negra"},Tl={tabs:{dateRanges:"Intervalo de datas",colors:"Cores",common:"Comum",importExport:"Importar/Exportar",expeditions:"Expedições",combats:"Combates",debrisFields:"Campos de Destroços",resourceBalance:"Resumo de Recursos",universeHistory:"Histórico do Universo",dangerZone:"Zona de Perigo",accessbility:"Acessibilidade",linkAccounts:"Linkar Contas",migrateOldData:"Migrar dados antigos"},dateRanges:{defaultNames:{today:"Hoje",yesterday:"Ontem",currentWeek:"Esta semana",lastWeek:"Semana passada",currentMonth:"Este mês",newRange:"novo intervalo"},since:e=>`Desde ${e}`,firstDayTemplate:"<primeiro dia>",headers:{label:"Label",type:"Tipo",rangeStart:"Início do intervalo",rangeContains:"Intervalo contem"},day:"dia",days:"dias",daysAgo:"dias atrás",week:"semana",weeks:"semanas",weeksAgo:"semanas atrás",month:"mês",months:"meses",monthsAgo:"meses atrás",year:"ano",years:"anos",yearsAgo:"anos atrás"},colors:{combatResults:"Resultados do combate",expeditionEvents:"Eventos de Expedição",expeditionEventSizes:"Tamanhos dos eventos de Expedição",expeditionDepletionLevels:"Desgaste do Sistema",lifeformDiscoveries:"Descobertas de Formas de Vida",lifeforms:"Formas de Vida",resources:"Recursos",ships:"Naves"},common:{conversionRates:{title:"Taxas de conversão",msuLong:"Converter para Metal",dsuLong:"Converter para Deutério"},extensionLanguage:"Idioma (dentro do OGame Tracker)",extensionLanguageFallbackHint:"Textos serão mostrados em Inglês se não existir tradução para o idioma selecionado.",serverSettings:{title:"Dados do Servidor",lastUpdate:"Última Actualização",forceUpdate:"Actualizar dados do servidor"}},expeditions:{resourceUnitFactorsOfShipFoundOnExpeditions:"Factores de unidades de recursos das naves encontradas em expedições"},combats:{resourceUnitFactorsOfLostShips:"Factor de unidades de recurso das naves perdidas em combate",ignoreEspionageCombats:{title:"Ignorar combates de espionagem",label:"Ignorar combates de espionagem para a monitorização dos combates"}},resourceBalance:{detailedResourceBalance:{header:"Resumo detalhado dos Recursos",checkboxLabel:"Mostrar resumo detalhado dos recursos"},includeShipsFoundOnExpeditions:{header:"Naves encontradas em expedições",checkboxLabel:"Incluir os recursos das naves encontradas em expedições no Resumo dos Recursos"},includeShipsLostInCombats:{header:"Naves destruidas em combates",checkboxLabel:"Incluir os recursos das naves perdidas em combate no Resumo dos Recursos"},includeLostLootResources:{header:"Recursos perdidos em combates",checkboxLabel:"Incluir os recursos perdidos em combate no Resumo dos Recursos"}},showConvertedUnitsInTables:{title:"MSU/DSU em tabelas",label:"Mostrar valores MSU/DSU convertidos nas tabelas",infoAmortization:"Tempo de amortização, ainda assim, será calculado cusando o custo e produção em MSU/DSU"},reset:"Restaurar definições",setDefaultRoute:"Marcar como default",setDefaultSubRoute:"Marcar como default para esta área",dangerZone:{doYouWantToContinue:"TENS A CERTEZA QUE QUERES CONTINUAR?",deleteExpeditions:{button:e=>`Apagar todas as expedições monitorizadas na conta actualmente selecionada (${e})`,confirmationText:(e,t)=>`Se confirmares, todas as ${t} expedições monitorizadas serão apagadas da conta actualmente selecionada (${e}).`},deleteCombats:{button:e=>`Apagar todos os combates monitorizados na conta actualmente selecionada (${e})`,confirmationText:(e,t)=>`Se confirmares, todos os ${t} combates monitorizados serão apagados da conta actualmente selecionda (${e}).`},deleteDebrisFieldReports:{button:e=>`Apagar todos os relatórios de reciclagem de campos de destroços monitorizados na conta actualmente selecionada (${e})`,confirmationText:(e,t)=>`Se confirmares, todos os ${t} relatórios de reciclagem de campos de destroços serão apagados da conta actualmente selecionada (${e}).`},deleteAccount:{button:e=>`Apagar toda a informação da conta actualmente selecionada (${e})`,confirmationText:e=>`Se confirmares, todos os dados da conta actualmente selecionada (${e}) serão apagados.\nIsto inclui o histórico do universo se não existir outra conta monitorizada nesse universo.`},deleteUniverseHistory:{button:e=>`Apagar o histórico do universo da conta actualmente selecionada (${e})`,confirmationText:e=>`Se confirmares, todo o histórico do universo da conta actualmente selecionada (${e}) será apagado.`},deleteEverything:{button:"Apagar todos os dados",confirmationText1:"Se confirmares, todos os dados serão apagados.\nIsto inclui to todos de todas as contas incluindo expedições, combates, reciclagem de campos de destroços, historico dos universos e mais.",confirmationText2:"Confirma novamente que é para apagar todos os dados."}},importExport:{export:{header:"Exportar",description:"Aqui podes exportar os teus dados. Irá incluir dados relevantes de todas as tuas contas monitorizadas e os seus servidores.",includeUniverseHistory:"incluir o historico do universo no export (isto vai aumentar significativamente o tamanho do ficheiro assim como do tempo de importação!)",button:"Iniciar exportação",wait:"Aguarda enquanto os dados são preparados para a exportação...",errors:{unexpectedError:"Ocorreu um erro inesperado durante a exportação dos teus dados."}},import:{header:"Importar",description:"Aqui poderás importar os teus dados a partir de um ficheiro. Seleciona o ficheiro.",button:"Iniciar importação",wait:"Aguarda enquanto os teus dados são importados...",errors:{invalidFormat:"O formato do ficheiro é inválido.",unexpectedError:"Ocorreu um erro inesperado durante a importação dos teus dados."}},importCallbacks:{importingSettings:"A importar as tuas definições",importingBasicData:"A importar a conta default e os dados do servidor",importingUniverseHistories:(e,t,r,a)=>`A importar historico dos universos (servidor ${e+1}/${t}, entrada ${r+1}/${a})`,importingAccounts:(e,t,r,a,n)=>{const o="A importar contas",i=`${e+1}/${t}`;if("account"==r)return`${o} (${i})`;if("combat-reports"==r)return`${o} (${i}, combate ${a+1}/${n})`;if("expeditions"==r)return`${o} (${i}, expedição ${a+1}/${n})`;if("debris-fields"==r)return`${o} (${i}, campo de detritos ${a+1}/${n})`;if("lifeform-discoveries"==r)return`${o} (${i}, missão de descoberta de formas de vida ${a+1}/${n})`;if("empire.data"==r)return`${o} (${i}, dados básicos do império)`;if("empire.planets"==r)return`${o} (${i}, planeta ${a+1}/${n})`;if("empire.moons"==r)return`${o} (${i}, lua ${a+1}/${n})`;if("universe-specific-settings"==r)return`${o} (${i}, definições específicas do universo)`;throw new Error(`Invalid type '${r}'`)}}},accessibility:{showSimplifiedResults:{title:"Vista simplificada",label:"Vista simplificada, esconde as mensagens originais dos resultados das expedições e dos relatórios de reciclagem dos campos de destroços e mostra icons nas notificações."}},debrisFields:{separateExpeditionDebrisFields:{title:"Posição 16 separada",label:"Separar as reciclagem dos campos de destroços da posição 16 das outras (1-15)"}},linkAccounts:{header:e=>`Linkar contas com a conta actualmente selecionada (${e})`,descriptionHtml:e=>`Só deverás linkar contas se quiseres que o Ogame Tracker consider os dados das contas a link como dados da conta actualmente selecionada (${e}).<br/>Isto é comum acontecer quando existe uma fusão de universos e as contas passam a ser consideradas outras pelo OGame Tracker.<br/><br/>Examplo: <br/><ol>\n                    <li>O jogador "OGame Professional" está a jogar no servidor "EN Milkyway"</li>\n                    <li>O servidor "EN Milkyway" é tornado exodus durante a fusão</li>\n                    <li>O jogador "OGame Professional" faz merge da sua conta para o servidor "EN Cartwheel"</li>   \n                    <li>Depois do merge, o OGame Tracker não mostra quais quer dados do servidor original "EN Milkyway" para a nova conta que foi merged</li>\n                    <li>No OGame Tracker a conta antigo "OGame Professional" no servidor "EN Milkyway" é linkada para nova conta "OGame Professional" no servidor "EN Cartwheel"</li>\n                    <li>Os dados que foram enviados e guardados do antigo servidor "EN Milkyway" serão agora mostrados na nova conta no servidor "EN Cartwheel"</li>\n                </ol>\n            `,linkAccount:"Linkar outra conta:",linkedAccounts:"Contas linkadas:"}},Pl={[ee.metal]:"Metal",[ee.crystal]:"Cristal",[ee.deuterium]:"Deutério",energy:"Energia"},Dl={ogame:{buildings:bl,lifeforms:xl,lifeformBuildings:Sl,lifeformTechnologies:kl,premium:Cl,resources:Pl,research:wl,ships:yl,defenses:vl},extension:{common:{averagePerDay:"⌀ por dia",chart:"Gráfico",table:"Tabela",sum:"Soma",total:"total",resourceUnits:"Unidades de Recursos",dsu:"DSU",msu:"MSU",date:"Data",dateTime:"Data & Hora",madeWithLove1:"Feito com",madeWithLove2:"por Wonkydonky"},settings:Tl,resources:Pl,expeditions:{header:"Expedições",tabHeaders:{overview:"Resumo",foundResources:"Recursos",foundShips:"Naves",foundDarkMatter:Cl.darkMatter,foundItems:"Items",depletion:"Desgaste",info:{header:"Info",topFinds:"Melhores Descobertas",possibleFinds:"Lista de possíveis descobertas"},subHeaders:{amount:"Quantidade",sizes:"Tamanhos",resources:"Unidades de recurso",count:"Contagem",sizesByResource:"Tamanhos por recursos"}},expeditionEvents:{[vt.nothing]:"Sem evento",[vt.resources]:"Recursos",[vt.fleet]:"Naves",[vt.delay]:"Atraso",[vt.early]:"Cedo",[vt.darkMatter]:Cl.darkMatter,[vt.pirates]:"Piratas",[vt.aliens]:"Aliens",[vt.combat]:"Combate",[vt.item]:"Item",[vt.trader]:"Mercador",[vt.lostFleet]:"Frota Perdida"},expeditionEventSizes:{[yt.small]:"Descoberta Comum",[yt.medium]:"Descoberta Grande",[yt.large]:"Descoberta Enorme","fled-death-star":"Inimigos fugiram"},depletionLevels:{[bt.none]:"Muito baixo",[bt.low]:"Baixo",[bt.medium]:"Médio",[bt.high]:"Alto",unknown:"Desconhecido"},expeditions:"Expedições",finds:"Descobertas",shipsFound:"Naves encontradas",depletion:"Desgate do sistema",topFinds:{title:e=>`Melhores descobertas (${e})`,shipUnits:"Unidades de naves",size:"Tamanho",amount:"Quantidade",date:"Data"},possibleFinds:{info:{playerClass:"Classe do Jogador",economySpeed:"Velocidade da Economia",resourceFindBonus:"Bónus de descobertas de recursos",shipFindBonus:"Bónus de decobertas de naves",darkMatterFindBonus:"Bónus de descobertas de Matéria Negra",discovererBonus:"Bónus de Classe de Descobridor"},maximumFinds:"Máximo de Descobertas",findsDarkMatter:"Limites das descobertas de MN",listOfPossibleFinds:"Lista de possíveis descobertas (recursos, naves)",findSizes:e=>`Possíveis quantidades de descobertas (${e})`,shipUnits:"Unidades de naves"}},combats:{header:"Combates",tabHeaders:{overview:"Resumo",loot:"Pilhagem",lostShips:"Naves Perdidas",subHeaders:{againstPlayers:"Contra Jogadoress",onExpeditions:"Em Expedições",amount:"Quantidade",resources:"Unidades de Recursos"}},combats:"Combates",shipsLost:"Naves Perdidas",combatResults:{[J.won]:"Vitórias",[J.lost]:"Derrotas",[J.draw]:"Empates"}},donate:{header:"Doação",subHeader:"Doar para ajudar o desenvolvimento do OGame Tracker",crypto:{header:"Doar criptomoedas"},kofi:{header:"Doar através do PayPal ou cartão de crédito/débito",buttonText:"Doar através do Ko-Fi",message:"Não é necessário criar uma conta para doar através do Ko-fi. Todas as doações vão directamente para o programador."}},debrisFields:{header:"Campo de Destroços",addDebrisFieldManually:{title:"Adicionar campo de destroços manualmente",buttonText:"Adicionar"},position:"Posição"},resourceBalance:{header:"Estimativa de Recursos","combat-report":"de combates","debris-field-report":"de campos de destroços",expedition:"de expedições"},empire:{header:"Império",planet:"Planeta",production:{header:"Produção",subHeaders:{resourceProduction:"Produção de Recursos",mineOverview:"Resumo das Minas"},averagePerHour:"⌀ por hora",totalPerHour:"total por hora",totalPerDay:"total por dia",totalPerWeek:"total por semana",activeProductionSettings:"Definições de Produção Activas",messageProduction100:"Os valores apresentados são com base no factor de produção de 100% e não tem em conta a falta de energia.",mines:{crawlersAvailable:"disponivel",crawlersToReachLimit:e=>`${e} rastejadores para bonús máximo`},items:"Items Activos",breakdown:{basicIncome:"Produção Básica",mineProduction:"Produção da Mina",consumption:"Consumo",lifeformBuildings:"Edifícios de Forma de Vida",crawlers:"Rastejadores",items:"Items",geologist:"Geólogo",commandStaff:"Equipa de Comando",playerClass:"Classe do Jogador",allianceClass:"Classe da Aliança",lifeformTechnologies:"Tecnologias de Forma de Vida"},settings:{reset:"Reset",header:"Definições de Produção",applyAndClose:"Aplicar e fechar definições de produção"}},amortization:{header:"Amortização",table:{cost:"Custo",levels:"Níveis",productionPlus:"Diferença de Produção",amortizationTime:"Tempo de Amortização",groupSelectedItems:"Agrupar items selecionados",showOriginalItems:"Mostrar todos os items individualmente",levelsOnPlanets:(e,t)=>`${e} ${1==e?"nível":"níveis"} ${1==t?"no":"nos"} ${t} ${1==t?"planeta":"planetas"}`},settings:{header:"Definições",applyAndClose:"Aplicar definições e fechar",includeSettings:{header:"Incluído no cálculo",mines:"Minas",expeditions:"Expedições",astrophysicsPerformanceNote:"Nota: Requer bastante processamento, irá afectar muito o desempenho"},playerSettings:{header:"Definições Gerais",optimizeForResources:"Optimizar para recursos selecionados",officers:"Oficiais",playerClass:"Classe do Jogador",allianceClass:"Classe da Aliança",currentLevelOf:e=>`Nível Actual de ${e}`,lifeformLevels:"Níveis de Forma de Vida",unusedRaidColonySlots:"Slots de colónias não usados actualmente"},astrophysicsSettings:{header:e=>`${e} definições`,newColony:"nova Colónia"},planetSettings:{header:"Definições do Planeta",global:{deselectItems:"Desmarcar todos os items",ignoreInactiveLifeformTechnologySlots:"Ignorar slots de tecnologias inactivas de forma de vida para todos os planetas"},includeInResult:"Incluir no cálculo",position:"Posição",maxTemperature:"Temp. Max.",activeItems:"Items Activos",crawlers:{title:"Rastejadores",percentage:"% Produção",fixCount:"Contagem Fixa",maxCount:"Contagem Max."},mines:"Nível Actual das Minas",lifeform:"Forma de Vida",lifeformSettings:"Definições de Forma de Vida",relevantLifeformBuildings:"Edíficios Relevantes de Forma de Vida",lifeformTechnologies:"Tecnologias de Forma de Vida",ignoreEmptySlots:"Ignorar slots inactivos"},expeditionSettings:{header:"Definições de Expedições",averageWavesPerDay:"⌀ Vagas por dia",items:"Slots de item",averageExpeditionsPerDay:"⌀ Expedições por dia",shipUnitFactors:"Factor de recurso de naves",topPlayerScore:"Pontuação do Top player"}},info:{generatingItems:"A calcular os próximos melhores items",slowCalculation:"O cálculo da amortização ficará bastante mais lento agora que os edifícios e tecnologias das formas de vida foram incluídas. Isto será, provavelmente, optimizado no futuro.",ctrlClick:"Ctrl + Click numa checkbox para (des)selecionar todos os item até ao selecionado."},saveLoad:{saveButton:"Gravar resultados do cálculo da amortização",loadButton:e=>`Carregar gravação (${e})`,loadedSave:(e,t)=>`A ver os resultados guardados (${e}) - ${t} entradas escondidas`,abandonedPlanet:"Planeta Destruído"},generateItems:e=>`${e} registos`},lifeforms:{header:"Formas de Vida",subHeaders:{overview:"Resumo",progress:"Progresso",discoveryMissions:"Missões",discoveryResults:"Resultados",experience:"Experiência",researchBonuses:"Bonus de Pesquisas",planetBonuses:"Bónus efectivo nos planetas"},planet:"Planeta",lifeform:"Forma de Vida",buildings:"Edifícios de Forma de Vida",technologies:"Tecnologias de Forma de Vida",tier:"Escalão",level:"Nível",totalLifeformExperience:"Experiência (total)",discoveryDateUnknown:"Desconhecido",notDiscoveredYet:"Ainda não descoberto",discoveryMissions:"Missões de Descoberta",eventTypes:{[kt.nothing]:"Nada encontrado",[kt.lostShip]:"Frota de exploração perdida",[kt.newLifeformFound]:"Nova Forma de Vida",[kt.knownLifeformFound]:"Experiência de Forma de Vida",[kt.artifacts]:"Artefactos encontrados"},artifactFindingSizes:{[Ct.small]:"Descoberta Comum",[Ct.medium]:"Descoberta Grande",[Ct.large]:"Descoberta Enorme",[Ct.storageFull]:"Armazenamento Cheio"},lifeformFound:"Forma de Vida encontrada",alwaysAvailable:"Sempre disponível",artifacts:"Artefactos",experiencePoints:"Pontos de Experiência",discoveredOn:"Forma de Vida descoberta em",numberOfLifeformDiscoveries:"Número de descobertas",researchBonuses:{breakdown:{slot:"Slot",research:"Pesquisa",bonus:"Bónus",lifeformBuildingsBoost:"Boost de Edifícios de Forma de Vida",lifeformLevelBoost:(e,t)=>`Boost de Nível de Forma de Vida (${e}: ${t})`,bugBoost:"Boost causado por bugs"},production:{header:"Produção de Recursos"},expeditionFinds:{header:"Descobertas das Expedições",resources:"Recursos",ships:"Naves",fleetLoss:"Frotas Perdidas"},expeditionSpeed:{header:"Média da elocidade de chegada das Expedições",bonus:"Bónus de Velocidade"},ships:{header:"Naves",armor:"Blindagem",shield:"Escudo",damage:"Dano",cargo:"Capacidade",speed:"Velocidade"},defenses:{header:"Defesas"},fuelConsumption:{header:"Consumo de Deutério"},fuelReturn:{header:"Deutério recuperado ao voltar para trás",bonus:"Deutério recuperado"},buildingCostTime:{header:"Custo&Tempo dos Edifícios",cost:"Custo",time:"Tempo"},researchCostTime:{header:"Custo&Tempo das Pesquisas",researches:"Pesquisas",lifeformResearches:"Pesquisas de Formas de Vida"},crawlers:{header:"Rastejadores",productionBonus:"Produção de Recursos",energyConsumption:"Consumo de Energia"},denCapacity:{header:"Capacidade do Den"},phalanxRange:{header:"Alcance do Phalanx"},discoveryMissions:{header:"Velocidade de Missões de Descoberta"},playerClasses:{header:"Classes de Jogador",collector:{productionBonus:"Aumenta a produção das minas",energyProductionBonus:"Aumenta a produção de Energia",transporterSpeedBonus:"Bónus de velocidade dos cargueiros",transporterCargoBonus:"Bónus de capacidade dos cargueiros",crawlerProductionBonus:"Bónus na produção dos Rastejadores",geologistCrawlerAmountBonus:"Mais capacidade para Rastejadores com o Geólogo"},discoverer:{researchDuration:"Reduz tempo de pesquisa",increasedExpeditionFinds:"Aumenta ganhos com expedições",largerPlanets:"Maiores planetas ao colonizar",additionalExpeditionSlots:"Slots adicionais para expedições",reducedExpeditionCombatChance:"Reduz probabilidade de inimigos na expedição",phalanxRange:"Maior alcance do Phalax"},general:{combatShipSpeed:"Bónus de velocidade em naves de combate",recyclerSpeed:"Bónus de velocidade nos recicladores",fuelConsumption:"Reduz o consumo de deutério em todas as naves",increasedCargoRecyclersPathfinders:"Aumenta a capacidade dos recicladores e exploradoras",additionalCombatResearchLevels:"Níveis adicionais nas pesquisas de combate",additionalFleetSlots:"Slots adicionais para frota",additionalMoonFields:"Campos adicionais nas luas"},classBonus:"Bónus da Classe",bonus:"Bónus",baseValue:"Valor Base",valueWithBonuses:"Valor com Bónus"}},planetBonuses:{resourceProduction:{header:"Produção de recursos"},lifeformResearchCostTime:{header:"Tempo e Custo de Pesquisas de Forma de Vida"},wreckfield:{header:"Campo de Destroços"}},topFinds:{topFinds:"Melhores Descobertas",worstFinds:"Piores Descobertas",size:"Tamanho",amount:"Quantidade",date:"Data",artifacts:"Artifactos",experience:"XP"}}},switchAccounts:{title:"Seleciona uma conta para abrir numa nova tab"},about:{faqHelp:{header:"Ajuda",faq:{header:"F.A.Q.",fleetLostOnExpedition:{header:"Porque que é que as naves perdidas em expedições não são contabilizadas?",text:"Contabilizar as naves perdidas em expedições requer fazer monitorização permanente a todas as frotas, o que não é possível."},syncBetweenDevices:{header:"Porque é que não existe sincronização dos meus dados entre vários dispositivos?",text:"O Ogame Tracker guarda mais informação do que aquela que pode ser sincronizada usando a tua conta (Google, Microsoft, etc). A sincronização com um servidor externos poderá ser uma possibilidade no futuro."},productionInResourceBalance:{header:"Porque é que a estimativa de recursos não inclui a minha produção de recursos?",text:"A tua produção de recursos depende de vários factores e seria necessário uma monitorização permanente. É possível mas a implementação desta funcionalidade é muito mais complexa do que a utilizade real para o jogador."},whatAreAverages:{header:"O que significa '⌀ por dia'?",text:"Significa a média global de dias com pelo menos um evento."}},tips:{header:"Dicas",rightClickDefaultRoute:"Podes usar o botão direito do ratona tab principal do lado esquerdo ou em qualquer sub-menu para o tornar como standard para a rota selecionada.",numbersKeyboardNavigation:"Podes abrir as tab carregando no respectivo digito no teclado.",amortizationTable:{part1:"Queres saber o que construir ou pesquisar para aumentar a tua produção de recursos da maneira mais eficiente? Tenta a ",name:"calculadora de amortização interactiva",part2:"."},inlineSettings:"Poderás altera as definições relacionadas clicando no ícone da roda dentada no lado direito.",switchAccountHtml:'Poderás abrir o OGame Tracker para uma outra conta clicando no ícone <span class="mdi mdi-account-multiple"></span> e selecionando a respectiva conta.'},messageDiscord:{part1:"Precisas de ajuda, encontraste um bug ou tens alguma funcionalidade que queiras ver implementada? Entra no ",discordServer:"Discord",part2:" e escreve uma mensagem no canal adequado."}},info:{header:"Info",table:{currentAccount:{header:"Informação acerca da conta selecionada",numberOfTrackedExpeditions:"Número de expedições monitorizadas",numberOfTrackedCombatReports:"Número de relatórios de combate monitorizados ",numberOfTrackedDebrisFieldReports:"Número de relatórios de reciclagem monitorizados",numberOfTrackedLifeformDiscoveries:"Número de explorações monitorizadas",lastUpdateServerSettings:"Última actualização das definições do servidor",numberOfUniverseHistoryEntries:"Número de registos no historico do universo"},global:{header:"Informação acerca de todos os dados no OGame Tracker",numberOfTrackedAccounts:"Número de contas monitorizadas",estimatedSize:"Tamanho dos dados guardados em disco"}}}},universeHistory:{header:"Histórico do Universo",settings:{messages:{notEnabledHtml:"\n            <b>Monitorização do histórico das tabelas de pontuação não está activo.</b><br/>\n            Activar esta funcionalidade fará com que as pontuações dos jogadores e alianças sejam monitorizados.",historyTrackingNotEnabledHtml:'\n            <b>Monitorização do histórico do universo não está activado.</b><br/>\n            Activar esta funcionalidade fará com que todas as alterações a jogadores ou alianças seja monitorizada.<br/>\n            Isto incluíra nomes de jogadores e alianças, tags de alianças, entradas e saídas de membros de alianças, \n            estados dos jogadores e alterações relativas a planetas e luas \n            incluindo nomes, coordenadas e abandonos/destruição de planetas e tuas .<br />\n            <i>Isto irá gerar uma grande quantidade de dados!\n            Poderás desactivar esta funcionalidade <a href="#/settings/universe-history">neste menu de definições</a>.</i>\n            ',trackingTimesHtml:"\n            Pelo menos uma vez por dia as pontuações e os dados do universo serão actualizados (se a funcionalidade estiver activa).<br/>\n            Poderás ver o momento do update abaixo.\n            Se uma actualização for perdida por algum motivo será feita novamente assim que possível."},enableHighscoreTrackingOnly:"Activar monitorização das pontuações do universo",enableHistoryTracking:"Activar a monitorização do historico do universo"},tabs:{players:"Jogadores",alliances:"Alianças",subtabs:{highscore:"Pontuações",history:"Histórico"}},playerSelection:{header:"Seleção de jogadores",search:"procurar jogador"},allianceSelection:{header:"Seleção de alianças",search:"procurar aliança"},highscoreTabs:{total:"Total",economy:"Economia",research:"Pesquisas",military:"Militar",militaryBuilt:"Militar construído",militaryDestroyed:"Militar destruído",militaryLost:"Militar perdido",honor:"Honra",numberOfShips:"Número de naves",lifeform:"Formas de Vida",lifeformDiscoveries:"Descobertas de Formas de Vida",lifeformEconomy:"Economia de Formas de Vida",lifeformTechnology:"Tecnologia de Formas de Vida"},historyTabs:{status:"Estado",nicknames:"Nicks",alliances:"Alianças",planetAndMoons:"Planetas e Luas",tags:"Tags",names:"Nomes",members:"Membros"},noAlliance:"Sem Aliança",today:"hoje",name:"Nome",tag:"Tag",members:"Membros",alliance:"Aliança",from:"De",until:"Até",status:{active:"Activo",vacation:"Modo de Férias",inactive:"Inactivo (>= 7 dias)",inactiveLong:"Ianctivo (>= 28 dias)",banned:"Banido",outlaw:"Fora da Lei",deleted:"Apagado",admin:"Administrado"},loadingTakingLong:"Carregar os dados está a demorar mais do que era esperado. A base de dados poderá está a ser actualizada neste momento. Espera um pouco mais ou tenta mais tarde."},notifications:{combatTracking:{title:e=>"1"==e?`${e} novo relatorio de combate monitorizado`:`${e} novos relatórios de combate monitorizados`,message:e=>"1"==e?`${e} novo relatorio de combate foi gravado.`:`${e} novos relatórios de combate foram gravados.`},debrisFieldReportTracking:{title:e=>"1"==e?`${e} novo campo de destroços monitorizado`:`${e} novos campos de destroços monitorizados`,message:e=>"1"==e?`${e} novo campo de destroços foi gravado.`:`${e} novos campos de destroços foram gravados.`},expeditionTracking:{fleetLost:{title:e=>"1"==e?`${e} frota perdida`:`${e} frotas perdidas`,message:e=>"1"==e?`${e} frota não retornou da expedição.`:`${e} frotas nao retornaram das expedições.`},result:{title:e=>"1"==e?`${e} nova expedição monitorizada`:`${e} novas expedições monitorizadas`,summary:"Resumo das descobertas",events:"Eventos de Expedições"}},lifeformDiscoveryTracking:{title:e=>"1"==e?`${e} nova descoberta de forma de vida monitorizada`:`${e} novas descobertas de forma de vida monitorizadas`,message:e=>"1"==e?`${e} nova descoberta de forma de vida guardada.`:`${e} novas descobertas de forma de vida guardadas.`},messageTrackingError:{title:e=>"1"==e?`Falhou o processamento de ${e} mensagem`:`Falhou o processamento de ${e} mensagens`,message:e=>"1"==e?`${e} mensagem causou um erro e não foi monitorizada. A mensagem em causa foi marcada a vermelho. Contacta o developer via Discord.`:`${e} mensagens causaram um erro e não foram monitorizadas. As mensagens em causa doram marcadas a vermelho. Contacata o developer via Discord.`}},tools:{signatureGenerator:{header:"Gerador de Assinatura",averagePerHour:"⌀/hora",totalPerHour:"por hora",totalPerDay:"por dia",totalPerWeek:"por semana",production:"Produção",expeditions:"Expedições",lifeformDiscoveries:"Missões FV",combats:"Combates",debrisFieldReports:"Destroços reciclados"},scrapyardMerchant:{header:"Mercador de Sucata",percentage:"% no Mercador de Sucata",count:"Contagem"}},excelExport:{header:"Exportar para Excel",chooseBelowMessage:"Escolhe que dados queres incluir na exportação:",groups:{expeditions:{header:"Expedições",rawData:"Dados em bruto (todos os registos guardados)",dailyOverview:"Resumo dos resultados por dia",dailyDepletion:"Resumo do desgaste do sistema por dia",dailyResources:"Descobertas de recursos por dia",dailyResourceSizes:"Tamanho das descobertas de recursos por dia",dailyShips:"Descobertas de naves por dia",dailyShipSizes:"Tamanho das descobertas de naves por dia",dailyDarkMatter:"Descobertas de Matéria Negra por dia",dailyDarkMatterSizes:"Tamanho das descobertas de Matéria Negra por dia"},combats:{header:"Combates",rawData:"Dados em bruto (todos os registos guardados)",dailyResults:"Resultados dos comabtes por dia",dailyLoot:"Montante de pilhagem por dia",dailyLostShips:"Naves perdidas por dia"},debrisFields:{header:"Campos de Destroços",rawData:"Dados em bruto (todos os registos guardados)",dailyResources:"Recursos reciclados por dia"},lifeformDiscoveries:{header:"Missões de Descoberta",rawData:"Dados em bruto (todos os registos guardados)",dailyExperience:"Experiencia ganha por dia"}},generateButton:"Gerar ficheiro de Excel",expeditions:{prefix:"EX",sheets:{rawData:"Dados em bruto",dailyDepletion:"Desgaste diário do sistema",dailyResults:"Resultados - diário",dailyResources:"Recursos - diário",dailyResourcesSize:"Recursos - diário (tamanhos)",dailyShips:"Naves - diário",dailyShipsSize:"Naves - diário (tamanho)",dailyDarkMatter:"Matéria Negra - diário",dailyDarkMatterSize:"Matéria Negra - diário (tamanho)"},eventType:"Tipo",eventSize:"Tamanho",item:"Item"},combats:{prefix:"CR",sheets:{rawData:"Dados em bruto",dailyResults:"Resultados - diário",dailyLoot:"Pilhagem - diário",dailyLostShips:"Naves perdidas - diário"},result:"Resultado do combate",coordinates:"Coordenadas",galaxy:"Galáxia",system:"Sistema",position:"Posição",targetType:"Tipo de alvo",combatType:"Tipo de combate",expeditionCombatOpponent:"Adversário de combate de expedição",loot:"Pilhagem",lostShips:"Naves Perdidas",debrisField:"Campo de Destroços",moon:"Lua",planet:"Planeta",expeditionCombat:"Combate de Expedição",playerCombat:"Combate de Jogador",pirates:"Piratas",aliens:"Aliens",againstPlayers:"Contra jogadores",onExpeditions:"Em expedições"},debrisFields:{prefix:"DF",sheets:{rawData:"Dados em bruto",dailyResources:"Recursos - diário"}},lifeformDiscoveries:{prefix:"LF",sheets:{rawData:"Dados em bruto",dailyExperience:"Experiência - diário"},result:"Descobertas",experience:"Experiência",lifeform:"Forma de Vida",artifacts:"Artefactos",artifactsSize:"Tamanho"}},playerClasses:{collector:"Colecionador",discoverer:"Descobridor",general:"General",none:"Nenhuma"}}},El={[at.lightFighter]:"Chasseur léger",[at.heavyFighter]:"Chasseur lourd",[at.cruiser]:"Croiseur",[at.battleship]:"Vaisseau de bataille",[at.battlecruiser]:"Traqueur",[at.bomber]:"Bombardier",[at.destroyer]:"Destructeur",[at.deathStar]:"Étoile de la mort",[at.reaper]:"Faucheur",[at.pathfinder]:"Éclaireur",[at.smallCargo]:"Petit transporteur",[at.largeCargo]:"Grand transporteur",[at.colonyShip]:"Vaisseau de colonisation",[at.recycler]:"Recycleur",[at.espionageProbe]:"Sonde d`espionnage",[at.solarSatellite]:"Satellite solaire",[at.crawler]:"Foreuse"},Ml={[Ys.rocketLauncher]:"Lanceur de missiles",[Ys.lightLaser]:"Artillerie laser légère",[Ys.heavyLaser]:"Artillerie laser lourde",[Ys.gaussCannon]:"Canon de Gauss",[Ys.ionCannon]:"Artillerie à ions",[Ys.plasmaTurret]:"Lanceur de plasma",[Ys.smallShieldDome]:"Petit bouclier",[Ys.largeShieldDome]:"Grand bouclier"},Al={[We.metalMine]:"Mine de métal",[We.metalStorage]:"Hangar de métal",[We.crystalMine]:"Mine de cristal",[We.crystalStorage]:"Hangar de cristal",[We.deuteriumSynthesizer]:"Synthétiseur de deutérium",[We.deuteriumTank]:"Réservoir de deutérium",[We.solarPlant]:"Centrale électrique solaire",[We.fusionReactor]:"Centrale électrique de fusion",[We.roboticsFactory]:"Usine de robots",[We.naniteFactory]:"Usine de nanites",[We.shipyard]:"Chantier spatial",[We.spaceDock]:"Dock spatial",[We.missileSilo]:"Silo de missiles",[We.researchLab]:"Laboratoire de recherche",[We.allianceDepot]:"Dépôt de ravitaillement",[We.terraformer]:"Terraformeur",[We.lunarBase]:"Base lunaire",[We.sensorPhalanx]:"Phalange de capteur",[We.jumpGate]:"Porte de saut spatial"},Fl={[ot.energyTechnology]:"Technologie énergétique",[ot.laserTechnology]:"Technologie Laser",[ot.ionTechnology]:"Technologie à ions",[ot.hyperspaceTechnology]:"Technologie hyperespace",[ot.plasmaTechnology]:"Technologie Plasma",[ot.espionageTechnology]:"Technologie Espionnage",[ot.computerTechnology]:"Technologie Ordinateur",[ot.astrophysics]:"Astrophysique",[ot.intergalacticResearchNetwork]:"Réseau de recherche intergalactique",[ot.gravitonTechnology]:"Technologie Graviton",[ot.combustionDrive]:"Réacteur à combustion",[ot.impulseDrive]:"Réacteur à impulsion",[ot.hyperspaceDrive]:"Propulsion hyperespace",[ot.weaponsTechnology]:"Technologie Armes",[ot.shieldingTechnology]:"Technologie Bouclier",[ot.armorTechnology]:"Technologie Protection des vaisseaux spatiaux"},Il={[lt.none]:"Aucune forme de vie",[lt.humans]:"Les Humains",[lt.rocktal]:"Roctas",[lt.mechas]:"Mécas",[lt.kaelesh]:"Kaeleshs"},Rl={[dt.residentialSector]:"Secteur résidentiel",[dt.biosphereFarm]:"Ferme biosphérique",[dt.researchCentre]:"Centre de recherche",[dt.academyOfSciences]:"Académie des sciences",[dt.neuroCalibrationCentre]:"Centre de neurocalibrage",[dt.highEnergySmelting]:"Fusion à haute énergie",[dt.foodSilo]:"Réserve alimentaire",[dt.fusionPoweredProduction]:"Extraction par fusion",[dt.skyscraper]:"Tour d`habitation",[dt.biotechLab]:"Laboratoire de biotechnologie",[dt.metropolis]:"Métropolis",[dt.planetaryShield]:"Bouclier planétaire",[dt.meditationEnclave]:"Enclave stoïque",[dt.crystalFarm]:"Culture du cristal",[dt.runeTechnologium]:"Centre technologique runique",[dt.runeForge]:"Forge runique",[dt.oriktorium]:"Orictorium",[dt.magmaForge]:"Fusion magmatique",[dt.disruptionChamber]:"Chambre de disruption",[dt.megalith]:"Monument rocheux",[dt.crystalRefinery]:"Raffinerie de cristaux",[dt.deuteriumSynthesiser]:"Syntoniseur de deutérium",[dt.mineralResearchCentre]:"Centre de recherche sur les minéraux",[dt.advancedRecyclingPlant]:"Usine de traitement à haut rendement",[dt.assemblyLine]:"Chaîne de production",[dt.fusionCellFactory]:"Usine de fusion de cellules",[dt.roboticsResearchCentre]:"Centre de recherche en robotique",[dt.updateNetwork]:"Réseau d`actualisation",[dt.quantumComputerCentre]:"Centre d`informatique quantique",[dt.automatisedAssemblyCentre]:"Centre d`assemblage automatisé",[dt.highPerformanceTransformer]:"Transformateur hyperpuissant",[dt.microchipAssemblyLine]:"Chaîne de production de micropuces",[dt.productionAssemblyHall]:"Atelier de montage",[dt.highPerformanceSynthesiser]:"Synthétiseur à haut rendement",[dt.chipMassProduction]:"Production de masse de puces",[dt.nanoRepairBots]:"Nanorobots réparateurs",[dt.sanctuary]:"Refugium",[dt.antimatterCondenser]:"Condensateur d`antimatière",[dt.vortexChamber]:"Salle à vortex",[dt.hallsOfRealisation]:"Maison du savoir",[dt.forumOfTranscendence]:"Forum de la transcendance",[dt.antimatterConvector]:"Convecteur d`antimatière",[dt.cloningLaboratory]:"Laboratoire de clonage",[dt.chrysalisAccelerator]:"Accélérateur par chrysalide",[dt.bioModifier]:"Biomodificateur",[dt.psionicModulator]:"Modulateur psionique",[dt.shipManufacturingHall]:"Hangar de construction de vaisseau",[dt.supraRefractor]:"Supraréfracteur"},Ol={[mt.intergalacticEnvoys]:"Ambassadeurs intergalactiques",[mt.highPerformanceExtractors]:"Extracteurs à haute performance",[mt.fusionDrives]:"Moteurs à fusion",[mt.stealthFieldGenerator]:"Générateur de champ de camouflage",[mt.orbitalDen]:"Planque orbitale",[mt.researchAI]:"IA de recherche",[mt.highPerformanceTerraformer]:"Terraformeur à haute performance",[mt.enhancedProductionTechnologies]:"Technologies d`extraction améliorées",[mt.lightFighterMkII]:"Chasseur léger Mk II",[mt.cruiserMkII]:"Croiseur Mk II",[mt.improvedLabTechnology]:"Technologie de laboratoire améliorée",[mt.plasmaTerraformer]:"Terraformeur à plasma",[mt.lowTemperatureDrives]:"Propulseurs à faible température",[mt.bomberMkII]:"Bombardier Mk II",[mt.destroyerMkII]:"Destructeur Mk II",[mt.battlecruiserMkII]:"Traqueur Mk II",[mt.robotAssistants]:"Assistants robotiques",[mt.supercomputer]:"Superordinateur",[mt.volcanicBatteries]:"Batteries volcaniques",[mt.acousticScanning]:"Sondage acoustique",[mt.highEnergyPumpSystems]:"Système de pompage à haute énergie",[mt.cargoHoldExpansion_CivilianShips]:"Extension d`espace fret (vaisseaux civils)",[mt.magmaPoweredProduction]:"Extraction magmatique",[mt.geothermalPowerPlants]:"Centrales géothermiques",[mt.depthSounding]:"Sondage en profondeur",[mt.ionCrystalEnhancement_heavyFighter]:"Renforcement à cristaux ioniques (chasseurs lourds)",[mt.improvedStellarator]:"Stellarator amélioré",[mt.hardenedDiamondDrillHeads]:"Têtes de forage en diamant renforcées",[mt.seismicMiningTechnology]:"Technologies d`extraction sismique",[mt.magmaPoweredPumpSystems]:"Pompes au magma",[mt.ionCrystalModules]:"Module à cristaux ioniques",[mt.optimisedSiloConstructionMethod]:"Construction optimisée de silos",[mt.diamondEnergyTransmitter]:"Émetteur d`énergie à diamants",[mt.obsidianShieldReinforcement]:"Intensification du bouclier à l`obsidienne",[mt.runeShields]:"Boucliers runiques",[mt.rocktalCollectorEnhancement]:"Renfort du collecteur rocta",[mt.catalyserTechnology]:"Technique de catalyse",[mt.plasmaDrive]:"Moteur à plasma",[mt.efficiencyModule]:"Module d`optimisation",[mt.depotAI]:"IA du dépôt",[mt.generalOverhaul_lightFighter]:"Révision complète (chasseur léger)",[mt.automatedTransportLines]:"Chaîne de production automatisée",[mt.improvedDroneAI]:"IA de drone améliorée",[mt.experimentalRecyclingTechnology]:"Technique de recyclage expérimental",[mt.generalOverhaul_cruiser]:"Révision complète (croiseur)",[mt.slingshotAutopilot]:"Pilote automatique Slingshot",[mt.highTemperatureSuperconductors]:"Supraconducteurs à haute température",[mt.generalOverhaul_battleship]:"Révision complète (vaisseau de bataille)",[mt.artificialSwarmIntelligence]:"Intelligence artificielle collective",[mt.generalOverhaul_battlecruiser]:"Révision complète (traqueur)",[mt.generalOverhaul_bomber]:"Révision complète (bombardier)",[mt.generalOverhaul_destroyer]:"Révision complète (destructeur)",[mt.experimentalWeaponsTechnology]:"Technique d`armement expérimentale",[mt.mechanGeneralEnhancement]:"Renforcement du général des Mécas",[mt.heatRecovery]:"Récupération de chaleur",[mt.sulphideProcess]:"Traitement au sulfure",[mt.psionicNetwork]:"Réseau psionique",[mt.telekineticTractorBeam]:"Faisceau de traction télékinésique",[mt.enhancedSensorTechnology]:"Technologie de détection améliorée",[mt.neuromodalCompressor]:"Compresseur neuromodal",[mt.neuroInterface]:"Neuro-interface",[mt.interplanetaryAnalysisNetwork]:"Réseau d`analyse superglobal",[mt.overclocking_heavyFighter]:"Surcadençage (chasseur lourd)",[mt.telekineticDrive]:"Système de propulsion télékinétique",[mt.sixthSense]:"Sixième sens",[mt.psychoharmoniser]:"Harmonisateur psychique",[mt.efficientSwarmIntelligence]:"Intelligence collective optimisée",[mt.overclocking_largeCargo]:"Surcadençage (grand transporteur)",[mt.gravitationSensors]:"Capteurs gravitationnels",[mt.overclocking_battleship]:"Surcadençage (vaisseau de bataille)",[mt.psionicShieldMatrix]:"Matrice de protection psionique",[mt.kaeleshDiscovererEnhancement]:"Renforcement d`explorateur kaelesh"},Ll={darkMatter:"Antimatière (AM)"},$l={tabs:{dateRanges:"Plages de dates",colors:"Couleurs",common:"Commun",importExport:"Importation/Exportation",expeditions:"Expéditions",combats:"Combats",debrisFields:"Champs de débris",resourceBalance:"Balance des ressources",universeHistory:"Historique de l'univers",dangerZone:"Zone dangereuse",accessbility:"Accessibilité",linkAccounts:"Lier les comptes",migrateOldData:"Migrer les anciennes données"},dateRanges:{defaultNames:{today:"Aujourd'hui",yesterday:"Hier",currentWeek:"Semaine en cours",lastWeek:"Semaine dernière",currentMonth:"Mois en cours",newRange:"nouvelle plage"},since:e=>`Depuis le ${e}`,firstDayTemplate:"<premier jour>",headers:{label:"Étiquette",type:"Type",rangeStart:"Début de la plage",rangeContains:"La plage contient"},day:"jour",days:"jours",daysAgo:"jours auparavant",week:"semaine",weeks:"semaines",weeksAgo:"semaines auparavant",month:"mois",months:"mois",monthsAgo:"mois auparavant",year:"année",years:"années",yearsAgo:"années auparavant"},colors:{combatResults:"Résultats des combats",expeditionEvents:"Événements d'expédition",expeditionEventSizes:"Tailles d'événements d'expédition",expeditionDepletionLevels:"Épuisement du système",lifeformDiscoveries:"Découvertes de formes de vie",lifeforms:"Formes de vie",resources:"Ressources",ships:"Vaisseaux"},common:{conversionRates:{title:"Taux de conversion",msuLong:"Convertir en Métal (USM)",dsuLong:"Convertir en Deutérium (USD)"},extensionLanguage:"Langue de l'interface utilisateur (dans OGame Tracker)",extensionLanguageFallbackHint:"Les textes en anglais seront affichés si les textes ne sont pas disponibles dans la langue sélectionnée.",serverSettings:{title:"Données du serveur",lastUpdate:"Dernière mise à jour",forceUpdate:"Mettre à jour les données du serveur"}},expeditions:{resourceUnitFactorsOfShipFoundOnExpeditions:"Pondération de la valeur en ressources des vaisseaux trouvés lors des expéditions"},combats:{resourceUnitFactorsOfLostShips:"Pondération de la valeur en ressources des vaisseaux perdus en combat",ignoreEspionageCombats:{title:"Ignorer les combats d'espionnage",label:"Ignorer les rapports de combat d'espionnage pour le suivi des combats"}},resourceBalance:{detailedResourceBalance:{header:"Bilan détaillé des ressources",checkboxLabel:"Afficher le bilan détaillé des ressources"},includeShipsFoundOnExpeditions:{header:"Vaisseaux trouvés lors des expéditions",checkboxLabel:"Inclure les ressources des vaisseaux trouvés lors des expéditions dans le bilan des ressources"},includeShipsLostInCombats:{header:"Vaisseaux perdus en combats",checkboxLabel:"Inclure les ressources des vaisseaux perdus en combats dans le bilan des ressources"},includeLostLootResources:{header:"Ressources perdues en combats",checkboxLabel:"Inclure les ressources perdues en combats dans le bilan des ressources"}},showConvertedUnitsInTables:{title:"USM/USD dans les tables",label:"Afficher les valeurs converties USM/USD dans les tables",infoAmortization:"Le temps d'amortissement sera toujours calculé en utilisant le coût et la production en USM/USD"},reset:"Réinitialiser les paramètres",setDefaultRoute:"Définir comme par défaut",setDefaultSubRoute:"Définir comme par défaut pour cette zone",dangerZone:{doYouWantToContinue:"ÊTES-VOUS SÛR DE VOULOIR CONTINUER ?",deleteExpeditions:{button:e=>`Supprimer toutes les expéditions suivies pour le compte actuellement sélectionné (${e})`,confirmationText:(e,t)=>`Si vous confirmez, toutes les ${t} expéditions suivies seront supprimées pour le compte actuellement sélectionné (${e}).`},deleteCombats:{button:e=>`Supprimer tous les combats suivis pour le compte actuellement sélectionné (${e})`,confirmationText:(e,t)=>`Si vous confirmez, tous les ${t} combats suivis seront supprimés pour le compte actuellement sélectionné (${e}).`},deleteDebrisFieldReports:{button:e=>`Supprimer tous les rapports de récolte de champs de débris suivis pour le compte actuellement sélectionné (${e})`,confirmationText:(e,t)=>`Si vous confirmez, tous les ${t} rapports de récolte de champs de débris suivis seront supprimés pour le compte actuellement sélectionné (${e}).`},deleteAccount:{button:e=>`Supprimer toutes les données du compte actuellement sélectionné (${e})`,confirmationText:e=>`Si vous confirmez, toutes les données suivies pour le compte actuellement sélectionné (${e}) seront supprimées.\nCela inclut les données suivies de l'historique de l'univers s'il n'y a pas d'autre compte suivi pour cet univers.`},deleteUniverseHistory:{button:e=>`Supprimer l'historique de l'univers suivi du serveur actuellement sélectionné (${e})`,confirmationText:e=>`Si vous confirmez, toutes les données d'historique de l'univers suivies pour le serveur actuellement sélectionné (${e}) seront supprimées.`},deleteEverything:{button:"Supprimer toutes les données",confirmationText1:"Si vous confirmez, toutes les données seront supprimées.\nCela inclut les données suivies de chaque compte, y compris les expéditions suivies, les combats suivis, les rapports de récolte de champs de débris suivis, les données d'historique de l'univers et plus encore.",confirmationText2:"Veuillez confirmer à nouveau que vous voulez supprimer toutes les données."}},importExport:{export:{header:"Exporter",description:"Ici, vous pouvez exporter vos données. Cela inclura les données pertinentes de tous vos comptes suivis et de leurs serveurs.",includeUniverseHistory:"inclure l'historique de l'univers dans l'exportation (cela peut considérablement augmenter la taille du fichier et le temps d'importation !)",button:"Commencer l'exportation",wait:"Veuillez patienter pendant que vos données sont préparées pour l'exportation...",errors:{unexpectedError:"Une erreur inattendue s'est produite lors de l'exportation de vos données."}},import:{header:"Importer",description:"Ici, vous pouvez importer vos données à partir d'un fichier. Veuillez sélectionner votre fichier.",button:"Commencer l'importation",wait:"Veuillez patienter pendant que vos données sont importées...",errors:{invalidFormat:"Le format du fichier est invalide.",unexpectedError:"Une erreur inattendue s'est produite lors de l'importation de vos données."}},importCallbacks:{importingSettings:"Importation de vos paramètres",importingBasicData:"Importation des données de base du compte et du serveur",importingUniverseHistories:(e,t,r,a)=>`Importation de l'historique de l'univers du serveur (serveur ${e+1}/${t}, entrée ${r+1}/${a})`,importingAccounts:(e,t,r,a,n)=>{const o="Importation des comptes",i=`${e+1}/${t}`;if("account"==r)return`${o} (${i})`;if("combat-reports"==r)return`${o} (${i}, combat ${a+1}/${n})`;if("expeditions"==r)return`${o} (${i}, expédition ${a+1}/${n})`;if("debris-fields"==r)return`${o} (${i}, champ de débris ${a+1}/${n})`;if("lifeform-discoveries"==r)return`${o} (${i}, mission de découverte ${a+1}/${n})`;if("empire.data"==r)return`${o} (${i}, données de base de l'empire)`;if("empire.planets"==r)return`${o} (${i}, planète ${a+1}/${n})`;if("empire.moons"==r)return`${o} (${i}, lune ${a+1}/${n})`;if("universe-specific-settings"==r)return`${o} (${i}, paramètres spécifiques à l'univers)`;throw new Error(`Invalid type '${r}'`)}}},accessibility:{showSimplifiedResults:{title:"Visualisation simplifiée",label:"Visualisation simplifiée, masque les messages originaux des résultats d'expédition et des rapports de récolte de champs de débris, et affiche des icônes au lieu de textes dans les notifications."}},debrisFields:{separateExpeditionDebrisFields:{title:"Séparer la position 16",label:"Séparer les champs de débris récoltés en position 16 des positions 1 à 15"}},linkAccounts:{header:e=>`Lier des comptes avec le compte actuel (${e})`,descriptionHtml:e=>`Vous ne devriez lier des comptes que si vous voulez que l'OGame Tracker considère les données des comptes liés comme des données du compte actuel (${e}).<br/>C'est souvent le cas lorsque qu'un compte a été fusionné avec un autre serveur et est traité comme un compte distinct dans l'OGame Tracker.<br/><br/>Exemple: <br/><ol>\n                    <li>le joueur "OGame Professional" joue sur le serveur "FR Voie Lactée"</li>\n                    <li>le serveur "FR Voie Lactée" devient un univers exode lors d'une fusion</li>\n                    <li>le joueur "OGame Professional" fusionne son compte avec "FR Trèfle"</li>\n                    <li>après la fusion, l'OGame Tracker ne montre aucune expédition de l'ancien serveur "FR Voie Lactée" pour le compte fusionné</li>\n                    <li>dans l'OGame Tracker, l'ancien compte "OGame Professional" sur le serveur "FR Voie Lactée" est lié au nouveau compte "OGame Professional" sur le serveur "FR Trèfle"</li>\n                    <li>les expéditions qui ont été envoyées sur l'ancien serveur "FR Voie Lactée" apparaîtront maintenant à nouveau pour le compte fusionné sur "FR Trèfle"</li>\n                </ol>\n            `,linkAccount:"lier un autre compte :",linkedAccounts:"Comptes liés :"}},Nl={[ee.metal]:"Métal",[ee.crystal]:"Cristal",[ee.deuterium]:"Deutérium",energy:"Énergie"},_l={de:ol,en:gl,"pt-pt":Dl,fr:{ogame:{buildings:Al,lifeforms:Il,lifeformBuildings:Rl,lifeformTechnologies:Ol,premium:Ll,resources:Nl,research:Fl,ships:El,defenses:Ml},extension:{common:{averagePerDay:"⌀ par jour",chart:"Graphique",table:"Tableau",sum:"Somme",total:"Total",resourceUnits:"Unités des ressources",dsu:"USD",msu:"USM",date:"Date",dateTime:"Date et heure",madeWithLove1:"Créé avec",madeWithLove2:"par Wonkydonky"},settings:$l,resources:Nl,expeditions:{header:"Expéditions",tabHeaders:{overview:"Vue d'ensemble",foundResources:"Ressources",foundShips:"Vaisseaux",foundDarkMatter:Ll.darkMatter,foundItems:"Objets",depletion:"Épuisement",info:{header:"Info",topFinds:"Meilleures découvertes",possibleFinds:"Liste des découvertes possibles"},subHeaders:{amount:"Quantité",sizes:"Tailles",resources:"Unités de ressources",count:"Nombre",sizesByResource:"Tailles par ressource"}},expeditionEvents:{[vt.nothing]:"Aucun événement",[vt.resources]:"Ressources",[vt.fleet]:"Vaisseaux",[vt.delay]:"Retard",[vt.early]:"Avance",[vt.darkMatter]:Ll.darkMatter,[vt.pirates]:"Pirates",[vt.aliens]:"Aliens",[vt.combat]:"Combat",[vt.item]:"Objet",[vt.trader]:"Marchand",[vt.lostFleet]:"Flotte perdue"},expeditionEventSizes:{[yt.small]:"Découverte commune",[yt.medium]:"Découverte importante",[yt.large]:"Découverte exceptionnelle","fled-death-star":"Ennemis ont fui"},depletionLevels:{[bt.none]:"Très bas",[bt.low]:"Bas",[bt.medium]:"Moyen",[bt.high]:"Élevé",unknown:"Inconnu"},expeditions:"Expéditions",finds:"Découvertes",shipsFound:"Vaisseaux trouvés",depletion:"Épuisement du système",topFinds:{title:e=>`Meilleures découvertes (${e})`,shipUnits:"Unités de vaisseaux",size:"Taille",amount:"Quantité",date:"Date"},possibleFinds:{info:{playerClass:"Classe du joueur",economySpeed:"Vitesse économique",resourceFindBonus:"Bonus de découvertes de ressources",shipFindBonus:"Bonus de découvertes de vaisseaux",darkMatterFindBonus:"Bonus de découvertes d'Antimatière",discovererBonus:"Bonus de classe Explorateur"},maximumFinds:"Découvertes maximales",findsDarkMatter:"Plages de découvertes d'Antimatière",listOfPossibleFinds:"Liste des découvertes possibles (ressources, unités de vaisseaux)",findSizes:e=>`Quantités possibles (${e})`,shipUnits:"Unités de vaisseaux"}},combats:{header:"Combats",tabHeaders:{overview:"Vue d'ensemble",loot:"Butin",lostShips:"Vaisseaux perdus",subHeaders:{againstPlayers:"Contre les joueurs",onExpeditions:"En expéditions",amount:"Quantité",resources:"Unités de ressources"}},combats:"Combats",shipsLost:"Vaisseaux perdus",combatResults:{[J.won]:"Victoires",[J.lost]:"Défaites",[J.draw]:"Matchs nuls"}},donate:{header:"Faire un don",subHeader:"Faire un don pour soutenir le développement d'OGame Tracker",crypto:{header:"Faire un don en cryptomonnaie"},kofi:{header:"Faire un don avec PayPal ou carte de débit/crédit",buttonText:"Faire un don sur Ko-Fi",message:"Vous n'avez pas besoin de créer un compte sur Ko-Fi pour faire un don. Tous les dons sont directement transmis au développeur."}},debrisFields:{header:"Champs de débris",addDebrisFieldManually:{title:"Ajouter manuellement un champ de débris",buttonText:"Ajouter"},position:"Position"},resourceBalance:{header:"Bilan des ressources","combat-report":"des combats","debris-field-report":"des champs de débris",expedition:"des expéditions"},empire:{header:"Empire",planet:"Planète",production:{header:"Production",subHeaders:{resourceProduction:"Production de ressources",mineOverview:"Vue d'ensemble des mines"},averagePerHour:"⌀ par heure",totalPerHour:"total par heure",totalPerDay:"total par jour",totalPerWeek:"total par semaine",activeProductionSettings:"Paramètres de production actifs",messageProduction100:"Les valeurs affichées se réfèrent à un facteur de production de 100% et ne tiennent pas compte du manque d'énergie.",mines:{crawlersAvailable:"disponibles",crawlersToReachLimit:e=>`${e} foreuses pour le bonus maximum`},items:"Objets actifs",breakdown:{basicIncome:"Revenu de base",mineProduction:"Production de mine",consumption:"Consommation",lifeformBuildings:"Bâtiments formes de vie",crawlers:"Foreuses",items:"Objets",geologist:"Géologue",commandStaff:"Conseil d'officiers",playerClass:"Classe de joueur",allianceClass:"Classe d'alliance",lifeformTechnologies:"Technologies formes de vie"},settings:{reset:"Réinitialiser",header:"Paramètres de production",applyAndClose:"Appliquer et fermer les paramètres de production"}},amortization:{header:"Amortissement",table:{cost:"Coût",levels:"Niveaux",productionPlus:"Production en plus",amortizationTime:"Temps d'amortissement",groupSelectedItems:"Regrouper les objets sélectionnés",showOriginalItems:"Afficher tous les objets individuellement",levelsOnPlanets:(e,t)=>`${e} ${1==e?"niveau":"niveaux"} sur ${t} ${1==t?"planète":"planètes"}`},settings:{header:"Paramètres",applyAndClose:"Appliquer les paramètres et fermer",includeSettings:{header:"Inclure dans le calcul",mines:"Mines",expeditions:"Expéditions",expeditionsRequirement:'Remarque : Nécessite "Recherche des formes de vie" et/ou "Astrophysique" activée',astrophysicsAndColony:"Astrophysique et nouvelles colonies",astrophysicsPerformanceNote:"Remarque : Intensif en calcul, affectera considérablement les performances"},playerSettings:{header:"Paramètres généraux",optimizeForResources:"Optimiser pour les ressources sélectionnées",officers:"Officiers",playerClass:"Classe de joueur",allianceClass:"Classe d'alliance",currentLevelOf:e=>`Niveau actuel de ${e}`,lifeformLevels:"Niveaux de la forme de vie",unusedRaidColonySlots:'Emplacements de colonie à réserver pour le raid ("volante")'},astrophysicsSettings:{header:e=>`Paramètres ${e}`,newColony:"Nouvelle colonie"},planetSettings:{header:"Paramètres de la planète",global:{deselectItems:"Désélectionner tous les éléments",ignoreInactiveLifeformTechnologySlots:"Ignorer les emplacements inactifs des technologies forme de vie pour toutes les planètes",deselectAllPlanets:"Désélectionner toutes les planètes"},includeInResult:"Inclure dans le calcul",position:"Position",maxTemperature:"Température max",activeItems:"Objets actifs",crawlers:{title:"Foreuses",percentage:"% Production",fixCount:"Compte fixe",maxCount:"Compte max"},mines:"Niveaux actuels des mines",lifeform:"Forme de vie",lifeformSettings:"Paramètres de la forme de vie",relevantLifeformBuildings:"Bâtiments pertinents de la forme de vie",lifeformTechnologies:"Technologies de la forme de vie",ignoreEmptySlots:"Ignorer les emplacements inactifs"},expeditionSettings:{header:"Paramètres d'expédition",averageWavesPerDay:"⌀ Vagues par jour",items:"Objets d'expédition",averageExpeditionsPerDay:"⌀ Expéditions par jour",shipUnitFactors:"Facteurs d'unité de ressources des vaisseaux",topPlayerScore:"Score du meilleur joueur"}},info:{generatingItems:"Calcul des prochains meilleurs investissements",slowCalculation:"Le calcul d'amortissement est devenu assez lent maintenant qu'il inclut les bâtiments et technologies formes de vie. Cela devrait être amélioré à l'avenir.",ctrlClick:"Ctrl + Clic sur une case pour (dé)sélectionner tous les éléments jusqu'à celui sélectionné."},saveLoad:{saveButton:"Enregistrer les résultats d'amortissement calculés",loadButton:e=>`Charger la sauvegarde (${e})`,loadedSave:(e,t)=>`Affichage des résultats sauvegardés (${e}) - ${t} lignes masquées`,abandonedPlanet:"Planète abandonnée"},generateItems:e=>`${e} entrées`},lifeforms:{header:"Formes de vie",subHeaders:{overview:"Vue d'ensemble",progress:"Progression",discoveryMissions:"Missions de découverte",discoveryResults:"Résultats",experience:"Expérience",researchBonuses:"Bonus de recherche globaux",planetBonuses:"Bonus de planète effectifs"},planet:"Planète",lifeform:"Forme de vie",buildings:"Bâtiments forme de vie",technologies:"Technologies forme de vie",tier:"Tier",level:"Niveau",totalLifeformExperience:"Expérience totale de la forme de vie",discoveryDateUnknown:"Inconnue",notDiscoveredYet:"Pas encore découverte",discoveryMissions:"Missions de découverte",eventTypes:{[kt.nothing]:"Aucune découverte",[kt.lostShip]:"Vaisseau d'exploration perdu",[kt.newLifeformFound]:"Nouvelle forme de vie",[kt.knownLifeformFound]:"Expérience de la forme de vie",[kt.artifacts]:"Artéfacts trouvés"},artifactFindingSizes:{[Ct.small]:"Découverte commune",[Ct.medium]:"Découverte importante",[Ct.large]:"Découverte énorme",[Ct.storageFull]:"Stockage plein"},lifeformFound:"Forme de vie trouvée",alwaysAvailable:"Toujours disponible",artifacts:"Artéfacts",experiencePoints:"Points d'expérience",discoveredOn:"Forme de vie découverte le",numberOfLifeformDiscoveries:"Nombre de découvertes de formes de vie",globalResearchBonus:"Bonus de recherche global",researchBonuses:{breakdown:{slot:"Emplacement",research:"Recherche",bonus:"Bonus",lifeformBuildingsBoost:"Amélioration des bâtiments de la forme de vie",lifeformLevelBoost:(e,t)=>`Amélioration du niveau de la forme de vie (${e} : ${t})`,bugBoost:"Bonus causé par des bugs"},production:{header:"Production de ressources"},expeditionFinds:{header:"Découvertes d'expédition",resources:"Ressources",ships:"Vaisseaux",fleetLoss:"Pertes de flotte"},expeditionSpeed:{header:"Vitesse d'arrivée en expédition",bonus:"Bonus de vitesse"},ships:{header:"Vaisseaux",armor:"Armure",shield:"Bouclier",damage:"Dégâts",cargo:"Fret",speed:"Vitesse"},defenses:{header:"Défenses"},fuelConsumption:{header:"Consommation de carburant"},fuelReturn:{header:"Retour de carburant lors du rappel",bonus:"Retour de carburant"},buildingCostTime:{header:"Coût et temps de construction",cost:"Coût",time:"Temps"},researchCostTime:{header:"Coût et temps de recherche",researches:"Recherches",lifeformResearches:"Recherches forme de vie"},crawlers:{header:"Foreuses",productionBonus:"Production de ressources",energyConsumption:"Consommation d'énergie"},denCapacity:{header:"Capacité de la cachette"},phalanxRange:{header:"Portée de la phalange"},discoveryMissions:{header:"Vitesse des missions de découverte"},playerClasses:{header:"Classes de joueur",collector:{productionBonus:"Augmentation de la production des mines",energyProductionBonus:"Augmentation de la production d'énergie",transporterSpeedBonus:"Bonus de vitesse pour les transporteurs",transporterCargoBonus:"Bonus de cargo pour les transporteurs",crawlerProductionBonus:"Bonus de production des foreuses",geologistCrawlerAmountBonus:"Bonus de foreuses utilisables avec le géologue"},discoverer:{researchDuration:"Durée des recherches",increasedExpeditionFinds:"Gain accru lors des expéditions",largerPlanets:"Planètes plus grandes lors de la colonisation",additionalExpeditionSlots:"Slot d'expédition supplémentaires",reducedExpeditionCombatChance:"Réduction du risque de combats lors des expéditions",phalanxRange:"Augmentation de la portée de la phalange"},general:{combatShipSpeed:"Bonus de vitesse des vaisseaux de combat",recyclerSpeed:"Bonus de vitesse des recycleurs",fuelConsumption:"Consommation de carburant pour tous les vaisseaux",increasedCargoRecyclersPathfinders:"Augmentation de la capacité de charge des recycleurs/éclaireurs",additionalCombatResearchLevels:"Niveaux des recherches de combat supplémentaires",additionalFleetSlots:"Flottes supplémentaires",additionalMoonFields:"Champs de lune supplémentaires"},classBonus:"Bonus de classe",bonus:"Bonus",baseValue:"Valeur de base",valueWithBonuses:"Valeur avec bonus"}},planetBonuses:{resourceProduction:{header:"Production de ressources"},lifeformResearchCostTime:{header:"Coût et temps de recherche des formes de vie"},wreckfield:{header:"Champ de débris"}},topFinds:{topFinds:"Meilleures découvertes",worstFinds:"Pires découvertes",size:"Taille",amount:"Quantité",date:"Date",artifacts:"Artéfacts",experience:"Expérience"}}},switchAccounts:{title:"Sélectionner le compte à afficher dans un nouvel onglet"},about:{faqHelp:{header:"Aide",faq:{header:"F.A.Q.",fleetLostOnExpedition:{header:"Pourquoi les vaisseaux que j'ai perdus en expédition ne sont-ils pas suivis?",text:"Le suivi des vaisseaux perdus en expédition nécessite un suivi permanent de la flotte, ce qui n'est pas réalisable."},syncBetweenDevices:{header:"Pourquoi n'y a-t-il pas de synchronisation de mes données entre plusieurs appareils?",text:"Le tracker enregistre beaucoup plus de données que ce qui peut être synchronisé avec votre compte utilisateur (Google, Microsoft, etc.). Une synchronisation avec un serveur externe pourrait être possible à l'avenir."},productionInResourceBalance:{header:"Pourquoi la balance des ressources n'inclut-elle pas ma production de ressources?",text:"Votre production de ressources dépend de divers facteurs, et leurs changements devraient être suivis en permanence. Bien que cela soit possible, une mise en œuvre de cette fonctionnalité serait beaucoup plus complexe qu'elle ne serait utile pour ses utilisateurs."},whatAreAverages:{header:"Que signifie la mention '⌀ par jour'?",text:"Il s'agit de la moyenne sur tous les jours avec au moins un événement suivi."}},tips:{header:"Conseils",rightClickDefaultRoute:"Vous pouvez faire un clic droit sur un onglet principal du côté gauche ou sur l'un de ses sous-menu pour définir comme par défaut.",numbersKeyboardNavigation:"Vous pouvez ouvrir les pages des onglets avec un chiffre en appuyant sur la touche de chiffre respective de votre clavier.",amortizationTable:{part1:"Vous voulez savoir quoi construire ou rechercher ensuite pour améliorer votre production de ressources de la manière la plus efficace? Essayez le ",name:"calculateur d'amortissement interactif",part2:"."},inlineSettings:"Vous pouvez changer les paramètres liés immédiatement en appuyant sur la petite icône d'engrenage sur le côté droit.",switchAccountHtml:"Vous pouvez ouvrir l'interface OGame Tracker pour un autre compte suivi en cliquant sur l'icône <span class=\"mdi mdi-account-multiple\"></span> et en sélectionnant le compte."},messageDiscord:{part1:"Besoin d'aide ? avez-vous trouvé un bug ou avez-vous une demande de fonctionnalité ? Rejoignez le ",discordServer:"serveur Discord",part2:" et écrivez un message dans le canal correspondant."}},info:{header:"Info",table:{currentAccount:{header:"Informations sur le compte sélectionné",numberOfTrackedExpeditions:"Nombre d'expéditions suivies",numberOfTrackedCombatReports:"Nombre de rapports de combat suivis",numberOfTrackedDebrisFieldReports:"Nombre de rapports de récolte CDR suivis",numberOfTrackedLifeformDiscoveries:"Nombre de missions de découverte de formes de vie suivies",lastUpdateServerSettings:"Dernière mise à jour des paramètres du serveur",numberOfUniverseHistoryEntries:"Nombre d'entrées dans l'historique de l'univers"},global:{header:"Informations sur l'ensemble des données dans OGame Tracker",numberOfTrackedAccounts:"Nombre de comptes suivis",estimatedSize:"Taille de toutes les données enregistrées sur le disque"}}}},universeHistory:{header:"Historique de l`'univers",settings:{messages:{notEnabledHtml:"\n                <b>Le suivi du classement de l'univers n'est pas activé.</b><br/>\n                Activer cette fonctionnalité permettra de suivre les changements de classement pour les joueurs et les alliances.\n            ",historyTrackingNotEnabledHtml:"\n                <b>Le suivi de l'historique de l'univers n'est pas activé.</b><br/>\n                Activer cette fonctionnalité permettra de suivre également tous les changements pour les joueurs et les alliances.<br/>\n                Cela inclut les changements de nom et de tag des joueurs et des alliances, les changements de membres d'alliance,\n                les changements d'état des joueurs et les changements concernant les planètes et les lunes, y compris les noms, les coordonnées,\n                et les planètes et lunes abandonnées/détruites.<br />\n                <i>Cela peut générer beaucoup de données !\n                Vous pouvez désactiver cette fonctionnalité <a href=\"#/settings/universe-history\">dans le menu des paramètres</a>\n                à nouveau.</i>\n            ",trackingTimesHtml:"\n                Au moins une fois par jour, les classements et les données de l'univers (si activés) seront mis à jour.<br/>\n                Vous pouvez définir les heures de mise à jour ci-dessous.\n                Si une mise à jour est manquée, elle sera effectuée dès que possible par la suite.\n            "},enableHighscoreTrackingOnly:"Activer uniquement le suivi du classement de l'univers",enableHistoryTracking:"Activer le suivi de l'historique de l'univers"},tabs:{players:"Joueurs",alliances:"Alliances",subtabs:{highscore:"Classement",history:"Historique"}},playerSelection:{header:"Sélection du joueur",search:"Rechercher un joueur"},allianceSelection:{header:"Sélection de l'alliance",search:"Rechercher une alliance"},highscoreTabs:{total:"Total",economy:"Économie",research:"Recherche",military:"Militaire",militaryBuilt:"Militaire construit",militaryDestroyed:"Militaire détruit",militaryLost:"Militaire perdu",honor:"Honneur",numberOfShips:"Nombre de vaisseaux",lifeform:"Forme de vie",lifeformDiscoveries:"Découvertes des formes de vie",lifeformEconomy:"Économie des formes de vie",lifeformTechnology:"Technologie des formes de vie"},historyTabs:{status:"Statut",nicknames:"Alias",alliances:"Alliances",planetAndMoons:"Planètes et Lunes",tags:"Balises",names:"Noms",members:"Membres"},noAlliance:"pas d'alliance",today:"aujourd'hui",name:"Nom",tag:"Balise",members:"Membres",alliance:"Alliance",from:"De",until:"Jusqu'à",status:{active:"Actif",vacation:"Mode vacances",inactive:"Inactif (>= 7 jours)",inactiveLong:"Inactif (>= 28 jours)",banned:"Banni",outlaw:"Hors-la-loi",deleted:"Supprimé",admin:"Admin"},loadingTakingLong:"Le chargement des données prend plus de temps que prévu. La base de données est probablement en train de se mettre à jour, veuillez patienter ou réessayer plus tard."},notifications:{combatTracking:{title:e=>"1"==e?`${e} nouveau rapport de combat suivi`:`${e} nouveaux rapports de combat suivis`,message:e=>"1"==e?`${e} nouveau rapport de combat a été suivi.`:`${e} nouveaux rapports de combat ont été suivis.`},debrisFieldReportTracking:{title:e=>"1"==e?`${e} nouveau rapport d'exploitation de champ de débris suivi`:`${e} nouveaux rapports d'exploitation de champ de débris suivis`,message:e=>"1"==e?`${e} nouveau rapport d'exploitation de champ de débris a été suivi.`:`${e} nouveaux rapports d'exploitation de champ de débris ont été suivis.`},expeditionTracking:{fleetLost:{title:e=>"1"==e?`${e} flotte perdue`:`${e} flottes perdues`,message:e=>"1"==e?`${e} flotte n'est pas revenue de son expédition.`:`${e} flottes ne sont pas revenues de leurs expéditions.`},result:{title:e=>"1"==e?`${e} nouvelle expédition suivie`:`${e} nouvelles expéditions suivies`,summary:"Résumé des découvertes",events:"Événements d'expédition"}},lifeformDiscoveryTracking:{title:e=>"1"==e?`${e} nouvelle mission de découverte de forme de vie suivie`:`${e} nouvelles missions de découverte de forme de vie suivies`,message:e=>"1"==e?`${e} nouvelle mission de découverte de forme de vie a été suivie.`:`${e} nouvelles missions de découverte de forme de vie ont été suivies.`},messageTrackingError:{title:e=>"1"==e?`Échec du traitement de ${e} message`:`Échec du traitement de ${e} messages`,message:e=>"1"==e?`${e} message a provoqué une erreur et n'a pas été suivi. Le message responsable a été marqué en rouge. Veuillez contacter le développeur.`:`${e} messages ont provoqué une erreur et n'ont pas été suivis. Les messages responsables ont été marqués en rouge. Veuillez contacter le développeur.`}},tools:{signatureGenerator:{header:"Générateur de signature",averagePerHour:"⌀/heure",totalPerHour:"par heure",totalPerDay:"par jour",totalPerWeek:"par semaine",production:"Production",expeditions:"Expéditions",lifeformDiscoveries:"Découvertes FdV",combats:"Combats",debrisFieldReports:"Rapports de champs de débris"},scrapyardMerchant:{header:"Ferrailleur",percentage:"% au ferrailleur",count:"Compte"}},excelExport:{header:"Export Excel",chooseBelowMessage:"Choisissez ci-dessous les données que vous souhaitez inclure dans l'exportation :",groups:{expeditions:{header:"Expéditions",rawData:"Données brutes (chaque expédition suivie)",dailyOverview:"Vue d'ensemble des résultats par jour",dailyDepletion:"Vue d'ensemble de l'épuisement du système par jour",dailyResources:"Découvertes de ressources par jour",dailyResourceSizes:"Tailles des découvertes de ressources par jour",dailyShips:"Découvertes de vaisseaux par jour",dailyShipSizes:"Tailles des découvertes de vaisseaux par jour",dailyDarkMatter:"Découvertes d'Antimatière par jour",dailyDarkMatterSizes:"Tailles des découvertes de d'Antimatière par jour"},combats:{header:"Combats",rawData:"Données brutes (chaque résultat de combat suivi)",dailyResults:"Résultats de combat par jour",dailyLoot:"Bilan du butin par jour",dailyLostShips:"Vaisseaux perdus par jour"},debrisFields:{header:"Champs de débris",rawData:"Données brutes (chaque rapport de récolte suivi)",dailyResources:"Ressources récoltées par jour"},lifeformDiscoveries:{header:"Missions de découverte",rawData:"Données brutes (chaque mission de découverte suivie)",dailyExperience:"Expérience gagnée par jour"}},generateButton:"Générer l'export Excel",expeditions:{prefix:"EX",sheets:{rawData:"Données brutes",dailyDepletion:"Épuisement quotidien du système",dailyResults:"Résultats quotidiens",dailyResources:"Ressources quotidiennes",dailyResourcesSize:"Ressources quotidiennes (Taille)",dailyShips:"Vaisseaux quotidiens",dailyShipsSize:"Vaisseaux quotidiens (Taille)",dailyDarkMatter:"Antimatière quotidienne",dailyDarkMatterSize:"Antimatière quotidienne (Taille)"},eventType:"Type",eventSize:"Taille",item:"Objet"},combats:{prefix:"CR",sheets:{rawData:"Données brutes",dailyResults:"Résultats quotidiens",dailyLoot:"Butin quotidien",dailyLostShips:"Vaisseaux perdus quotidiens"},result:"Résultat du combat",coordinates:"Coordonnées",galaxy:"Galaxie",system:"Système",position:"Position",targetType:"Type de cible",combatType:"Type de combat",expeditionCombatOpponent:"Opposant de combat en expédition",loot:"Butin",lostShips:"Vaisseaux perdus",debrisField:"Champ de débris",moon:"Lune",planet:"Planète",expeditionCombat:"Combat en expédition",playerCombat:"Combat de joueur",pirates:"Pirates",aliens:"Aliens",againstPlayers:"Contre les joueurs",onExpeditions:"En expéditions"},debrisFields:{prefix:"DF",sheets:{rawData:"Données brutes",dailyResources:"Ressources quotidiennes"}},lifeformDiscoveries:{prefix:"LF",sheets:{rawData:"Données brutes",dailyExperience:"Expérience quotidienne"},result:"Découverte",experience:"Expérience",lifeform:"Forme de vie",artifacts:"Artéfacts",artifactsSize:"Taille"}},playerClasses:{collector:"Collecteur",discoverer:"Explorateur",general:"Général",none:"Aucune"}}}};class Bl{#b;#w={};constructor(e,t){this.#b=e,this.#x(t)}#x(e){Object.keys(Ot).forEach((t=>{this.#S(this,e[t]??{},t,"")}))}#S(e,t,r,a){Object.keys(t).forEach((n=>{const o=t[n],i=`$${n}`,s=e[i]??={},l=`${""==a?"":`${a}.`}${n}`;o instanceof Object&&"object"==typeof o&&Object.getPrototypeOf(o)===Object.prototype?(this.#S(s,o,r,l),Object.getOwnPropertyNames(e).includes(n)||Object.defineProperty(e,n,{get:()=>(this.#b.throwOnDisabled(),e[i])})):(s[r]=o,(this.#w[r]??={})[l]=o,Object.getOwnPropertyNames(e).includes(n)||Object.defineProperty(e,n,{get:()=>(this.#b.throwOnDisabled(),this.#k(l))}))}))}#k(e){let t=this.#w[this.#b.locale]?.[e];if(null!=t)return t;let r=this.#b.locale;for(const a of this.#b.fallbackLocales){if(t=this.#w[a]?.[e],null!=t)return t;r=a}De(`$i18n: did not find key '${e}' for any locale`)}}let zl=class extends To{enabled=!0;locale=Ot.de;localeRegion=null;_proxy=null;fallbackLocales=[Ot.en];$t=null;dateTimeFormats=null;init(e){return this._proxy=new Bl(this,e.messages),this.$t=this._proxy,this.dateTimeFormats=new Bl(this,e.dateTimeFormats),this.locale=e.locale,this.localeRegion=e.localeRegion??null,this.fallbackLocales=e.fallbackLocales,this}throwOnDisabled(){if(!this.enabled)throw new Error("I18n object is disabled")}get fullLocaleIdentifier(){return null==this.localeRegion?this.locale:`${this.locale}-${this.localeRegion}`}$d(e,t){this.throwOnDisabled();const r=this.dateTimeFormats[t]??De(`unknown datetime format key "${t}"`);return"string"==typeof r?ie(e,r):new Intl.DateTimeFormat(this.fullLocaleIdentifier,r).format(e)}$n(e,t){return this.throwOnDisabled(),new Intl.NumberFormat(this.fullLocaleIdentifier,t).format(e)}$timespan(e){let t=BigInt(Math.ceil(e));const r=t%60n;t=(t-r)/60n;const a=t%60n;t=(t-a)/60n;const n=t%24n;t=(t-n)/24n;const o=`${n.toString().padStart(2,"0")}:${a.toString().padStart(2,"0")}:${r.toString().padStart(2,"0")}`;if(0n==t)return o;const i=t%7n;t=(t-i)/7n;const s=`${i}d `+o;if(0n==t)return s;const l=t;return`${this.$n(Number(l))}w `+s}};zl=function(e,t,r,a){var n,o=arguments.length,i=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,r):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,r,a);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(i=(o<3?n(i):o>3?n(t,r,i):n(t,r))||i);return o>3&&i&&Object.defineProperty(t,r,i),i}([Vs({})],zl);const Ul=(new zl).init({messages:_l,dateTimeFormats:{de:{date:{year:"numeric",month:"2-digit",day:"2-digit"},datetime:{year:"numeric",month:"2-digit",day:"2-digit",hour12:!1,hour:"2-digit",minute:"2-digit",second:"2-digit"},time:{hour12:!1,hour:"2-digit",minute:"2-digit",second:"2-digit"},time_hm:{hour12:!1,hour:"2-digit",minute:"2-digit"}},en:{date:{year:"numeric",month:"2-digit",day:"2-digit"},datetime:{year:"numeric",month:"2-digit",day:"2-digit",hour12:!0,hour:"2-digit",minute:"2-digit",second:"2-digit"},time:{hour12:!0,hour:"2-digit",minute:"2-digit",second:"2-digit"},time_hm:{hour12:!0,hour:"2-digit",minute:"2-digit"}}},locale:Ot.en,fallbackLocales:[Ot.en,Ot.de]});async function jl(e){const t=await Re(),r=Lt(function(e){const t=Ul.locale;Ul.locale=e;const r={dateRanges:[{label:Ul.$t.extension.settings.dateRanges.defaultNames.today,type:"day",skip:0,take:1},{label:Ul.$t.extension.settings.dateRanges.defaultNames.yesterday,type:"day",skip:1,take:1},{label:Ul.$t.extension.settings.dateRanges.defaultNames.currentWeek,type:"week",skip:0,take:1},{label:Ul.$t.extension.settings.dateRanges.defaultNames.lastWeek,type:"week",skip:1,take:1},{label:Ul.$t.extension.settings.dateRanges.defaultNames.currentMonth,type:"month",skip:0,take:1},{type:"all"}],lostShipsResourceUnits:{factor:1,deuteriumFactor:1},resourceBalance:{showDetailedBreakdown:!1,includeExpeditionFoundShipsResourceUnits:!0,includeLostShipsResourceUnits:!0,includeLostLootResources:!0},conversionRates:{mode:"msu",msu:{crystal:1.5,deuterium:3},dsu:{metal:3,crystal:2}},showCellsWithConvertedResourceUnits:!0,expeditionFoundShipsResourceUnits:{factor:1,deuteriumFactor:1},extensionLanguage:e,defaultRoutes:{},colors:{combatResults:{[J.won]:"#00c23a",[J.draw]:"#aaaaaa",[J.lost]:"#d11515"},resources:{[ee.metal]:"#ff5e00",[ee.crystal]:"#1a9fff",[ee.deuterium]:"#1bee8f",totalConverted:"#999999"},ships:{[at.lightFighter]:"#2472f3",[at.heavyFighter]:"#c72525",[at.cruiser]:"#fbbc04",[at.battleship]:"#9ecc00",[at.bomber]:"#00a95e",[at.battlecruiser]:"#075263",[at.destroyer]:"#de5200",[at.reaper]:"#16a8d4",[at.pathfinder]:"#ad135e",[at.smallCargo]:"#888888",[at.largeCargo]:"#ffffff",[at.espionageProbe]:"#4b17da",[at.deathStar]:"#262530",[at.recycler]:"#8aff8e",[at.colonyShip]:"#d7b58e",[at.crawler]:"#94b4ff",[at.solarSatellite]:"#dd94ff"},expeditions:{events:{[vt.nothing]:"#404040",[vt.resources]:"#2242e2",[vt.fleet]:"#dddddd",[vt.delay]:"#ff5e00",[vt.early]:"#00c23a",[vt.darkMatter]:"#33bcdb",[vt.pirates]:"#ffb592",[vt.aliens]:"#92ffdc",[vt.combat]:"#ffb592",[vt.item]:"#6f23e1",[vt.trader]:"#fbbc04",[vt.lostFleet]:"#d11515"},sizes:{[yt.small]:"#404040",[yt.medium]:"#3e85fe",[yt.large]:"#e01a76","fled-death-star":"#dddddd"},depletion:{[bt.none]:"#00c23a",[bt.low]:"#fbbc04",[bt.medium]:"#ff5e00",[bt.high]:"#c72525",unknown:"#404040"}},lifeformDiscoveries:{events:{[kt.nothing]:"#404040",[kt.lostShip]:"#d11515",[kt.knownLifeformFound]:"#33bcdb",[kt.newLifeformFound]:"#00c23a",[kt.artifacts]:"#fbbc04"},artifactFindingSizes:{[Ct.small]:"#404040",[Ct.medium]:"#3e85fe",[Ct.large]:"#e01a76",[Ct.storageFull]:"#d11515"}},lifeforms:{[lt.humans]:"#7ec000",[lt.rocktal]:"#df6642",[lt.mechas]:"#4b91e7",[lt.kaelesh]:"#9863e9"}},universeHistory:{updateTimes:[72e6],enabled:!1,trackHistory:!1},combatTracking:{ignoreEspionageFights:!0},messageTracking:{showSimplifiedResults:!0},debrisFields:{separateExpeditionDebrisFields:!1}};return Ul.locale=t,r}(e),await t.get("settings",0)??{});return r}const Hl={ar:Ot["es-ar"],br:Ot["pt-br"],cz:Ot.cs,de:Ot.de,dk:Ot.da,en:Ot.en,es:Ot["es-es"],fr:Ot.fr,gr:Ot.el,hr:Ot.hr,hu:Ot.hu,it:Ot.it,mx:Ot["es-mx"],nl:Ot.nl,pl:Ot.pl,pt:Ot["pt-pt"],ro:Ot.ro,ru:Ot.ru,si:Ot.sl,tr:Ot.tr,us:Ot.en,tw:Ot["zh-tw"]};var Kl;!function(e){e[e.total=0]="total",e[e.economy=1]="economy",e[e.research=2]="research",e[e.militaryAndNumberOfShips=3]="militaryAndNumberOfShips",e[e.militaryLost=4]="militaryLost",e[e.militaryBuilt=5]="militaryBuilt",e[e.militaryDestroyed=6]="militaryDestroyed",e[e.honor=7]="honor",e[e.lifeform=8]="lifeform",e[e.lifeformEconomy=9]="lifeformEconomy",e[e.lifeformTechnology=10]="lifeformTechnology",e[e.lifeformDiscoveries=11]="lifeformDiscoveries"}(Kl||(Kl={}));const ql=["total","economy","research","military","militaryBuilt","militaryDestroyed","militaryLost","honor","numberOfShips","lifeform","lifeformEconomy","lifeformTechnology","lifeformDiscoveries"];var Gl;!function(e){e[e.planet=1]="planet",e[e.moon=3]="moon",e[e.debrisField=2]="debrisField"}(Gl||(Gl={}));const Vl=/^\[?(?<galaxy>\d+):(?<system>\d+):(?<position>\d+)\]?$/;function Wl(t,r){e(2,arguments);var a=n(t),o=v(r);return isNaN(o)?new Date(NaN):o?(a.setDate(a.getDate()+o),a):a}class Yl{updateTimes=[];parser=new At.XMLParser({attributeNamePrefix:"",ignoreAttributes:!1,parseAttributeValue:!1});meta;timeout=void 0;inUpdate=!1;get settings(){return Xl.settings.universeHistory}constructor(e){this.meta=e}async init(){if(await Xl.ready,await this.initSettings(),!this.settings.enabled)return de("universe history tracking is disabled"),void clearTimeout(this.timeout);await this.initTracking()}async initSettings(){this.updateTimes=[...this.settings.updateTimes].sort(((e,t)=>e-t))}async initTracking(){const t=await Ie(this.meta),r=await t.get("_lastUpdate",0)??0,a=Date.now(),o=[];if(0==r)o.push(a);else{let t=function(t){e(1,arguments);var r=n(t);return r.setHours(0,0,0,0),r}(r).getTime(),i=0;for(;0==o.length||o[o.length-1]<a;){const e=t+this.updateTimes[i];e>r&&o.push(e),i++,i>=this.updateTimes.length&&(i=0,t=Wl(t,1).getTime())}}const i=1==o.length?o[0]:o.find(((e,t)=>o[t+1]>=a))??De("failed to find next update time for universe history"),s=Math.max(0,i-a);de(`next universe history tracking in ${s} ms (${new Date(Date.now()+s)}) for universe ${this.meta.serverId} ${this.meta.language.toUpperCase()}`),clearTimeout(this.timeout),this.timeout=setTimeout((async()=>await this.trackUniverseUpdates()),s)}async trackUniverseUpdates(){if(!this.inUpdate){this.inUpdate=!0;try{de(`tracking universe history for universe ${this.meta.serverId} ${this.meta.language.toUpperCase()}`);const e=await this.getPlayers(),t=await this.getAlliances(),r=await this.getAllPlayerScores(),a=this.settings.trackHistory?await this.getPlanets():[];de("loaded current states, updating in db (this may take a while)");const n=await Ie(this.meta),o=["_lastUpdate","players","playerNames","playerAlliances","playerStates","playerScores","planets","planetNames","planetStates","planetCoordinates","moons","moonNames","moonStates","alliances","allianceTags","allianceNames","allianceMembers","allianceStates","allianceScores"],i=n.transaction(o,"readwrite");await this.updateHistory(i,e,t,r,a),await i.done,de("updated universe history");const s={ogameMeta:this.meta,senderUuid:Ge,type:Q.NotifyUniverseHistoryUpdate};await $e(s),await this.initTracking()}catch(e){setTimeout((async()=>await this.initTracking()),3e5)}finally{this.inUpdate=!1}}}async updateHistory(e,t,r,a,n){const o=Date.now();await this.updatePlayers(e,t,o,a),await this.updateAlliances(e,r,o,t,a),this.settings.trackHistory&&await this.updatePlanets(e,n,o),await e.objectStore("_lastUpdate").put(o,0)}async updateAlliances(e,t,r,a,n){de("updating alliance history"),await this.updateKnownAlliances(e,t),await this.updateAllianceTags(e,t,r,!this.settings.trackHistory),await this.updateAllianceNames(e,t,r,!this.settings.trackHistory),await this.updateAllianceScores(e,t,a,n,r),this.settings.trackHistory&&(await this.updateAllianceMembers(e,t,a,r),await this.updateAllianceStates(e,t,r))}async updateKnownAlliances(e,t){for(const r of t)await e.objectStore("alliances").put({id:r.id})}async updateAllianceTags(e,t,r,a=!1){const n={},o={},i=e.objectStore("allianceTags");if(a)await i.clear();else{let e=await i.openCursor();for(;null!=e;){const t=e.value;(o[t.allianceId]??-1)<t.date&&(o[t.allianceId]=t.date,n[t.allianceId]=t.tag),e=await e.continue()}}for(const e of t)e.tag!=n[e.id]&&await i.put({allianceId:e.id,date:r,tag:e.tag})}async updateAllianceNames(e,t,r,a=!1){const n={},o={},i=e.objectStore("allianceNames");if(a)await i.clear();else{let e=await i.openCursor();for(;null!=e;){const t=e.value;(o[t.allianceId]??-1)<t.date&&(o[t.allianceId]=t.date,n[t.allianceId]=t.name),e=await e.continue()}}for(const e of t)e.name!=n[e.id]&&await i.put({allianceId:e.id,date:r,name:e.name})}async updateAllianceMembers(e,t,r,a){const n={},o={},i=e.objectStore("allianceMembers");let s=await i.openCursor();for(;null!=s;){const e=s.value;(o[e.allianceId]??-1)<e.date&&(o[e.allianceId]=e.date,n[e.allianceId]=e.members),s=await s.continue()}for(const e of t){const t=r.filter((t=>t.alliance==e.id)).map((e=>e.id));this.arraysEqual(t,n[e.id]??[])||await i.put({allianceId:e.id,date:a,members:t})}}async updateAllianceStates(e,t,r){const a={},n={},o=e.objectStore("allianceStates");let i=await o.openCursor();for(;null!=i;){const e=i.value;(n[e.allianceId]??-1)<e.date&&(n[e.allianceId]=e.date,a[e.allianceId]=e.state),i=await i.continue()}for(const e of t)e.id in a&&null==a[e.id]||await o.put({allianceId:e.id,date:r,state:null});const s=t.map((e=>e.id)),l=Object.keys(a).map((e=>et(e,10))).filter((e=>!s.includes(e)));for(const e of l)"deleted"!=a[e]&&await o.put({allianceId:e,date:r,state:"deleted"})}async updateAllianceScores(e,t,r,a,n){const o={},i={},s=e.objectStore("allianceScores");let l=await s.openCursor();for(;null!=l;){const e=l.value,t=`${e.allianceId}.${e.type}`;(i[t]??-1)<e.date&&(i[t]=e.date,o[t]={score:e.score,position:e.position}),l=await l.continue()}const c=ql,d={};c.forEach((e=>d[e]={}));for(const e of t){const t=r.filter((t=>t.alliance==e.id)).map((e=>a[e.id]));for(const r of c){const a=d[r],n=t.map((e=>e?.[r]?.score??0)).reduce(((e,t)=>e+t),0);a[e.id]=n}}const u={};c.forEach((e=>{const t=d[e],r=[...new Set(Object.values(t).filter((e=>null!=e)))].sort(((e,t)=>t-e));u[e]=r}));for(const e of t)for(const t of c){let r=d[t][e.id];const a=null==r?0:u[t].indexOf(r)+1;r??=0;const i=o[`${e.id}.${t}`];i?.position==a&&i?.score==r||await s.put({allianceId:e.id,date:n,type:t,position:a,score:r})}}async updatePlayers(e,t,r,a){de("updating player history"),await this.updateKnownPlayers(e,t),await this.updatePlayerScores(e,t,a,r),await this.updatePlayerNames(e,t,r,!this.settings.trackHistory),this.settings.trackHistory&&(await this.updatePlayerAlliances(e,t,r),await this.updatePlayerStates(e,t,r))}async updateKnownPlayers(e,t){for(const r of t)await e.objectStore("players").put({id:r.id})}async updatePlayerNames(e,t,r,a=!1){const n={},o={},i=e.objectStore("playerNames");if(a)await i.clear();else{let e=await i.openCursor();for(;null!=e;){const t=e.value;(o[t.playerId]??-1)<t.date&&(o[t.playerId]=t.date,n[t.playerId]=t.name),e=await e.continue()}}for(const e of t)e.name!=n[e.id]&&await i.put({playerId:e.id,date:r,name:e.name})}async updatePlayerAlliances(e,t,r){const a={},n={},o=e.objectStore("playerAlliances");let i=await o.openCursor();for(;null!=i;){const e=i.value;(n[e.playerId]??-1)<e.date&&(n[e.playerId]=e.date,a[e.playerId]=e.allianceId),i=await i.continue()}for(const e of t)e.id in a&&e.alliance==a[e.id]||await o.put({playerId:e.id,date:r,allianceId:e.alliance})}async updatePlayerStates(e,t,r){const a={},n={},o=e.objectStore("playerStates");let i=await o.openCursor();for(;null!=i;){const e=i.value;(n[e.playerId]??-1)<e.date&&(n[e.playerId]=e.date,a[e.playerId]=e.state),i=await i.continue()}for(const e of t){const t=this.mapState(e.status);e.id in a&&this.playerStateEqual(t,a[e.id])||await o.put({playerId:e.id,date:r,state:t})}const s=t.map((e=>e.id)),l=Object.keys(a).map((e=>et(e,10))).filter((e=>!s.includes(e)));for(const e of l)"deleted"!=a[e]&&await o.put({playerId:e,date:r,state:"deleted"})}async updatePlayerScores(e,t,r,a){const n={},o={},i=e.objectStore("playerScores");let s=await i.openCursor();for(;null!=s;){const e=s.value,t=`${e.playerId}.${e.type}`;(o[t]??-1)<e.date&&(o[t]=e.date,n[t]={score:e.score,position:e.position}),s=await s.continue()}const l=ql,c={};l.forEach((e=>c[e]={}));for(const e of t)for(const t of l){const{score:o,position:s}=r[e.id]?.[t]??{score:0,position:0},l=`${e.id}.${t}`;n[l]?.position==s&&n[l]?.score==o||await i.put({playerId:e.id,date:a,type:t,position:s,score:o})}}playerStateEqual(e,t){return null==e||null==t||"deleted"==e||"deleted"==t?e==t:this.arraysEqual(e,t)}mapState(e){if(null==e)return null;const t={a:"admin",b:"banned",v:"vacation",i:"inactive",I:"inactive-long",o:"outlaw"},r=[];if(e.split("").forEach((e=>r.push(t[e]??De(`unknown player state '${e}'`)))),0==r.length)throw new Error("number of player stats was zero");return r}async updatePlanets(e,t,r){de("updating planet and moon history"),await this.updateKnownPlanets(e,t),await this.updatePlanetNames(e,t,r),await this.updatePlanetStates(e,t,r),await this.updatePlanetCoordinates(e,t,r);const a=t.map((e=>e.moon)).filter((e=>null!=e));await this.updateKnownMoons(e,a),await this.updateMoonNames(e,a,r),await this.updateMoonStates(e,a,r)}async updateKnownPlanets(e,t){const r=e.objectStore("planets");for(const e of t)await r.put({id:e.id,playerId:e.player})}async updatePlanetNames(e,t,r){const a={},n={},o=e.objectStore("planetNames");let i=await o.openCursor();for(;null!=i;){const e=i.value;(n[e.planetId]??-1)<e.date&&(n[e.planetId]=e.date,a[e.planetId]=e.name),i=await i.continue()}for(const e of t)e.name!=a[e.id]&&await o.put({planetId:e.id,date:r,name:e.name})}async updatePlanetStates(e,t,r){const a={},n={},o=e.objectStore("planetStates");let i=await o.openCursor();for(;null!=i;){const e=i.value;(n[e.planetId]??-1)<e.date&&(n[e.planetId]=e.date,a[e.planetId]=e.state),i=await i.continue()}for(const e of t)e.id in a&&null==a[e.id]||await o.put({planetId:e.id,date:r,state:null});const s=t.map((e=>e.id)),l=Object.keys(a).map((e=>et(e,10))).filter((e=>!s.includes(e)));for(const e of l)"deleted"!=a[e]&&await o.put({planetId:e,date:r,state:"deleted"})}async updatePlanetCoordinates(e,t,r){const a={},n={},o=e.objectStore("planetCoordinates");let i=await o.openCursor();for(;null!=i;){const e=i.value;(n[e.planetId]??-1)<e.date&&(n[e.planetId]=e.date,a[e.planetId]=e.coordinates),i=await i.continue()}for(const e of t)e.id in a&&this.coordinatesEqual(e.coordinates,a[e.id])||await o.put({planetId:e.id,date:r,coordinates:{galaxy:e.coordinates.galaxy,system:e.coordinates.system,position:e.coordinates.position}})}async updateKnownMoons(e,t){const r=e.objectStore("moons");for(const e of t)await r.put({id:e.id,size:e.size,planetId:e.planetId})}async updateMoonNames(e,t,r){const a={},n={},o=e.objectStore("moonNames");let i=await o.openCursor();for(;null!=i;){const e=i.value;(n[e.moonId]??-1)<e.date&&(n[e.moonId]=e.date,a[e.moonId]=e.name),i=await i.continue()}for(const e of t)e.name!=a[e.id]&&await o.put({moonId:e.id,date:r,name:e.name})}async updateMoonStates(e,t,r){const a={},n={},o=e.objectStore("moonStates");let i=await o.openCursor();for(;null!=i;){const e=i.value;(n[e.moonId]??-1)<e.date&&(n[e.moonId]=e.date,a[e.moonId]=e.state),i=await i.continue()}for(const e of t)e.id in a&&null==a[e.id]||await o.put({moonId:e.id,date:r,state:null});const s=t.map((e=>e.id)),l=Object.keys(a).map((e=>et(e,10))).filter((e=>!s.includes(e)));for(const e of l)"deleted"!=a[e]&&await o.put({moonId:e,date:r,state:"deleted"})}coordinatesEqual(e,t){return e.galaxy==t.galaxy&&e.system==t.system&&e.position==t.position}arraysEqual(e,t){return e.length==t.length&&e.every((e=>t.includes(e)))&&t.every((t=>e.includes(t)))}get apiUrlBase(){return`https://s${this.meta.serverId}-${this.meta.language}.ogame.gameforge.com/api`}async getXml(e){const t=`${this.apiUrlBase}/${e}`,r=await fetch(t,{cache:"no-cache"}),a=await r.text();return this.parser.parse(a)}async getPlanets(){const e=[];return(await this.getXml("universe.xml")).universe.planet.forEach((t=>{const r=et(t.id??De("no planet id found"),10),a=et(t.player??De("no planet player id found"),10),n=t.name??De("no planet name found"),o=function(e,t=Gl.planet){const r=e.match(Vl);if(null==r?.groups)throw new Error(`invalid coordinates '${e}'`);return{galaxy:et(r.groups.galaxy),system:et(r.groups.system),position:et(r.groups.position),type:t}}(t.coords??De("no planet coords found"));let i;if(null!=t.moon){const e=et(t.moon.id??De("no moon id found"),10),a=et(t.moon.size??De("no moon size found"),10);i={id:e,name:t.moon.name??De("no moon name found"),size:a,planetId:r}}e.push({id:r,player:a,name:n,coordinates:o,moon:i})})),e}async getPlayers(){const e=[];return(await this.getXml("players.xml")).players.player.forEach((t=>{const r=et(t.id??De("no player id found"),10),a=t.name??De("no player name found"),n=t.status??null,o=null==t.alliance?null:et(t.alliance,10);e.push({id:r,alliance:o,name:a,status:n})})),e}async getAlliances(){const e=[];return(await this.getXml("alliances.xml")).alliances.alliance.forEach((t=>{const r=et(t.id??De("no alliance id found"),10),a=t.name??De("no alliance name found"),n=t.tag??De("no alliance tag found");e.push({id:r,name:a,tag:n})})),e}async getAllPlayerScores(){const e={},t=await this.getPlayerScorePositions(Kl.total),r=await this.getPlayerScorePositions(Kl.economy),a=await this.getPlayerScorePositions(Kl.research),n=await this.getPlayerMilitaryScorePositions(),o=await this.getPlayerScorePositions(Kl.militaryBuilt),i=await this.getPlayerScorePositions(Kl.militaryDestroyed),s=await this.getPlayerScorePositions(Kl.militaryLost),l=await this.getPlayerScorePositions(Kl.honor);let c=await this.getPlayerScorePositions(Kl.lifeform),d=await this.getPlayerScorePositions(Kl.lifeformEconomy),u=await this.getPlayerScorePositions(Kl.lifeformTechnology),m=await this.getPlayerScorePositions(Kl.lifeformDiscoveries);return Object.keys(t).map((e=>et(e,10))).forEach((p=>{e[p]={total:t[p],economy:r[p],research:a[p],military:n[p].points,numberOfShips:n[p].numberOfShips,militaryBuilt:o[p],militaryDestroyed:i[p],militaryLost:s[p],honor:l[p],lifeform:c[p],lifeformEconomy:d[p],lifeformTechnology:u[p],lifeformDiscoveries:m[p]}})),e}async getPlayerScorePositions(e){const t={};return(await this.getXml(`highscore.xml?category=1&type=${e}`)).highscore.player.forEach((e=>{const r=et(e.id??De("no player id found"),10),a=et(e.score??De("no player score found"),10),n=et(e.position??De("no player position found"),10);t[r]={score:a,position:n}})),t}async getPlayerMilitaryScorePositions(){const e={},t=(await this.getXml(`highscore.xml?category=1&type=${Kl.militaryAndNumberOfShips}`)).highscore.player.map((e=>({id:et(e.id??De("no player id found"),10),score:et(e.score??De("no player score found"),10),position:et(e.position??De("no player position found"),10),numberOfShips:et(e.ships??"0",10)})));return t.sort(((e,t)=>t.numberOfShips-e.numberOfShips)),t.forEach(((t,r)=>{const{id:a,score:n,position:o,numberOfShips:i}=t,s=r+1;e[a]={points:{score:n,position:o},numberOfShips:{score:i,position:s}}})),e}}const Xl=new class{_settings=null;_ready;_resolveReady;get ready(){return this._ready}get settings(){return this._settings}constructor(){this._ready=new Promise((e=>this._resolveReady=e)),this.initSettings()}async initSettings(){this._settings=await jl("__internal__"),this._resolveReady()}async onMessage(e){switch(e.type){case Q.RequestSettings:await this.broadcastSettings(e.ogameMeta);break;case Q.NotifySettingsUpdate:await this.initSettings()}}async broadcastSettings(e,t){const r=function(e,t=!1){const r=Hl[e];return null==r&&t&&De(`unsupported language '${e}'`),r}(e.userLanguage)??Ot.en,a=await jl(r),n={ogameMeta:e,type:Q.Settings,data:a,senderUuid:t??Ge};await $e(n)}},Zl=[Xl,new class{expeditionModule=new Et;async onMessage(e){if(e.type!=Q.TrackExpedition)return;const t=e,r=await this.expeditionModule.tryTrackExpedition(t);if(!r.success){const r={ogameMeta:e.ogameMeta,type:Q.TrackingError,data:{id:t.data.id,type:"expedition"},senderUuid:Ge};return void await $e(r)}const{expedition:a,isAlreadyTracked:n}=r.result;if(n){const t={ogameMeta:e.ogameMeta,type:Q.Expedition,data:a,senderUuid:Ge};await $e(t)}else{const t={ogameMeta:e.ogameMeta,type:Q.NewExpedition,data:a,senderUuid:Ge};await $e(t)}}},new class{lifeformDiscoveryModule=new Mt;async onMessage(e){switch(e.type){case Q.TrackLifeformDiscovery:{const t=e,r=await this.lifeformDiscoveryModule.tryTrackExpedition(t);if(!r.success){const r={ogameMeta:e.ogameMeta,type:Q.TrackingError,data:{id:t.data.id,type:"lifeform-discovery"},senderUuid:Ge};return void await $e(r)}const{lifeformDiscovery:a,isAlreadyTracked:n}=r.result;if(n){const t={ogameMeta:e.ogameMeta,type:Q.LifeformDiscovery,data:a,senderUuid:Ge};await $e(t)}else{const t={ogameMeta:e.ogameMeta,type:Q.NewLifeformDiscovery,data:a,senderUuid:Ge};await $e(t)}break}}}},new class{combatReportModule=new Oe;async onMessage(e){switch(e.type){case Q.RequestSingleCombatReport:{const{data:t}=e,r=await this.combatReportModule.tryGetSingleReport(e);if(!r.success){const r={ogameMeta:e.ogameMeta,type:Q.CombatReportUnknown,data:t,senderUuid:Ge};await $e(r);break}if(r.result.ignored){const t={ogameMeta:e.ogameMeta,type:Q.WillNotBeTracked,data:{id:r.result.id,type:"combat-report"},senderUuid:Ge};await $e(t);break}const a={ogameMeta:e.ogameMeta,type:Q.CombatReport,data:r.result.report,senderUuid:Ge};await $e(a);break}case Q.TrackCombatReport:{const t=e,r=await this.combatReportModule.tryTrackCombatReport(t);if(!r.success){const r={ogameMeta:e.ogameMeta,type:Q.TrackingError,data:{id:t.data.id,type:"combat-report"},senderUuid:Ge};return void await $e(r)}if(r.result.ignored){const t={ogameMeta:e.ogameMeta,type:Q.WillNotBeTracked,data:{id:r.result.id,type:"combat-report"},senderUuid:Ge};await $e(t);break}if(r.result.isAlreadyTracked){const t={ogameMeta:e.ogameMeta,type:Q.CombatReport,data:r.result.report,senderUuid:Ge};await $e(t)}else{const t={ogameMeta:e.ogameMeta,type:Q.NewCombatReport,data:r.result.report,senderUuid:Ge};await $e(t)}break}}}},new class{dfModule=new Ve;async onMessage(e){switch(e.type){case Q.TrackDebrisFieldReport:{const t=e,r=await this.dfModule.tryTrackDebrisFieldReport(t);if(!r.success){const r={ogameMeta:e.ogameMeta,type:Q.TrackingError,data:{id:t.data.id,type:"debris-field-report"},senderUuid:Ge};return void await $e(r)}const{report:a,isAlreadyTracked:n}=r.result;if(n){const t={ogameMeta:e.ogameMeta,type:Q.DebrisFieldReport,data:a,senderUuid:Ge};await $e(t)}else{const t={ogameMeta:e.ogameMeta,type:Q.NewDebrisFieldReport,data:a,senderUuid:Ge};await $e(t)}break}case Q.TrackManualDebrisFieldReport:{const t=e;await this.dfModule.trackManualDebrisFieldReport(t);const r={ogameMeta:e.ogameMeta,type:Q.NewDebrisFieldReport,data:t.data,senderUuid:Ge};await $e(r)}}}},new class{empireModule=new ft;async onMessage(e){switch(e.type){case Q.UpdateActiveOfficers:{const t=e;await this.empireModule.updateOfficers(t.ogameMeta,t.data);break}case Q.UpdateAllianceClass:{const t=e;await this.empireModule.updateAlliance(t.ogameMeta,t.data);break}case Q.UpdatePlanetActiveItems:{const t=e;await this.empireModule.updateActiveItems(t.ogameMeta,t.data);break}case Q.UpdatePlanetBuildingLevels:{const t=e;await this.empireModule.updateBuildingLevels(t.ogameMeta,t.data);break}case Q.UpdatePlanetData:{const t=e;await this.empireModule.updateBasicPlanets(t.ogameMeta,t.data);break}case Q.UpdatePlanetDefenseCounts:{const t=e;await this.empireModule.updatePlanetDefenses(t.ogameMeta,t.data);break}case Q.UpdatePlanetMissileCounts:{const t=e;await this.empireModule.updatePlanetMissiles(t.ogameMeta,t.data);break}case Q.UpdatePlanetShipCounts:{const t=e;await this.empireModule.updatePlanetShips(t.ogameMeta,t.data);break}case Q.UpdatePlayerClass:{const t=e;await this.empireModule.updatePlayerClass(t.ogameMeta,t.data);break}case Q.UpdateResearchLevels:{const t=e;await this.empireModule.updateResearchLevels(t.ogameMeta,t.data);break}case Q.UpdatePlanetProductionSettings:{const t=e;await this.empireModule.updateProductionSettings(t.ogameMeta,t.data);break}case Q.UpdateSelectedLifeform:{const t=e;await this.empireModule.updateSelectedLifeform(t.ogameMeta,t.data);break}case Q.UpdateLifeformExperience:{const t=e;await this.empireModule.updateLifeformExperience(t.ogameMeta,t.data);break}case Q.UpdatePlanetActiveLifeformBuildingLevels:case Q.UpdatePlanetLifeformBuildingLevels:{const t=e;await this.empireModule.updatePlanetLifeformBuildings(t.ogameMeta,t.data);break}case Q.UpdatePlanetLifeformTechnologyLevels:{const t=e;await this.empireModule.updatePlanetLifeformTechnologies(t.ogameMeta,t.data);break}case Q.UpdatePlanetActiveLifeformTechnologyLevels:{const t=e;await this.empireModule.updatePlanetActiveLifeformTechnologies(t.ogameMeta,t.data);break}case Q.UpdateFleets:{const t=e;await this.empireModule.updateFleets(t.ogameMeta,t.data);break}default:return}await this.notifyEmpireUpdate(e.ogameMeta)}async notifyEmpireUpdate(e){const t={type:Q.NotifyEmpireDataUpdate,ogameMeta:e,senderUuid:Ge};await $e(t)}},new class{modules={};async onMessage(e){const t=Rt(e.ogameMeta,!1);if(e.type==Q.NotifySettingsUpdate){de("re-init universe history tracking after settings change");for(const e of Object.keys(this.modules))await this.modules[e].init()}if(null!=this.modules[t])return;const r=this.modules[t]=new Yl(e.ogameMeta);await r.init()}},new class{modules={};async onMessage(e){const t=await this.initModule(e.ogameMeta);e.type===Q.ForceUpdateServerSettings&&await t.update()}async initModule(e){const t=Rt(e,!1);let r=this.modules[t];return null!=r||(r=new It(e),this.modules[t]=r),r}},new class{async onMessage(e){switch(e.type){case Q.UpdatePlayerName:{const t=e,r=(await Re()).transaction("accounts","readwrite").objectStore("accounts"),a=await r.get([e.ogameMeta.serverId,e.ogameMeta.language,e.ogameMeta.playerId]);await r.put({id:e.ogameMeta.playerId,serverId:e.ogameMeta.serverId,serverLanguage:e.ogameMeta.language,...a,name:t.data});break}case Q.UpdateUniverseName:{const t=e,r=await Re();await r.put("servers",{id:e.ogameMeta.serverId,language:e.ogameMeta.language,name:t.data});break}}}},new class{async onMessage(e){switch(e.type){case Q.StayAlive:break;case Q.DropDatabaseConnections:!function(){for(const e of Object.keys(Ee))delete Ee[e]}()}}},{onMessage:async e=>{e.senderUuid!=Ge&&$e(e)}}];try{chrome.runtime.onInstalled.addListener((async()=>await async function(){const e=await chrome.storage.local.getBytesInUse()>0,t=await chrome.storage.local.get("migration-v1-to-v2");e&&1!=t["migration-v1-to-v2"]&&await chrome.tabs.create({active:!0,index:0,url:"/views/migrate.html"})}())),chrome.runtime.onMessage.addListener((async e=>await async function(e){if(de("got message",new Date,e),e.ogameMeta.playerId<=0||e.ogameMeta.serverId<=0)ce("skipping message because playerid <= 0 or serverid <= 0",e);else for(const t of Zl)await t.onMessage(e)}(e)))}catch(e){le(e)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,