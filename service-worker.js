/*! For license information please see service-worker.js.LICENSE.txt */
(()=>{var e={932:(e,t,r)=>{"use strict";const a=r(501),n=r(844),o=r(192);e.exports={XMLParser:n,XMLValidator:a,XMLBuilder:o}},849:(e,t)=>{"use strict";const r="[:A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*",a=new RegExp("^"+r+"$");t.isExist=function(e){return void 0!==e},t.isEmptyObject=function(e){return 0===Object.keys(e).length},t.merge=function(e,t,r){if(t){const a=Object.keys(t),n=a.length;for(let o=0;o<n;o++)e[a[o]]="strict"===r?[t[a[o]]]:t[a[o]]}},t.getValue=function(e){return t.isExist(e)?e:""},t.isName=function(e){return!(null==a.exec(e))},t.getAllMatches=function(e,t){const r=[];let a=t.exec(e);for(;a;){const n=[];n.startIndex=t.lastIndex-a[0].length;const o=a.length;for(let e=0;e<o;e++)n.push(a[e]);r.push(n),a=t.exec(e)}return r},t.nameRegexp=r},501:(e,t,r)=>{"use strict";const a=r(849),n={allowBooleanAttributes:!1,unpairedTags:[]};function o(e){return" "===e||"\t"===e||"\n"===e||"\r"===e}function i(e,t){const r=t;for(;t<e.length;t++)if("?"!=e[t]&&" "!=e[t]);else{const a=e.substr(r,t-r);if(t>5&&"xml"===a)return m("InvalidXml","XML declaration allowed only at the start of the document.",h(e,t));if("?"==e[t]&&">"==e[t+1]){t++;break}}return t}function s(e,t){if(e.length>t+5&&"-"===e[t+1]&&"-"===e[t+2]){for(t+=3;t<e.length;t++)if("-"===e[t]&&"-"===e[t+1]&&">"===e[t+2]){t+=2;break}}else if(e.length>t+8&&"D"===e[t+1]&&"O"===e[t+2]&&"C"===e[t+3]&&"T"===e[t+4]&&"Y"===e[t+5]&&"P"===e[t+6]&&"E"===e[t+7]){let r=1;for(t+=8;t<e.length;t++)if("<"===e[t])r++;else if(">"===e[t]&&(r--,0===r))break}else if(e.length>t+9&&"["===e[t+1]&&"C"===e[t+2]&&"D"===e[t+3]&&"A"===e[t+4]&&"T"===e[t+5]&&"A"===e[t+6]&&"["===e[t+7])for(t+=8;t<e.length;t++)if("]"===e[t]&&"]"===e[t+1]&&">"===e[t+2]){t+=2;break}return t}function l(e,t){let r="",a="",n=!1;for(;t<e.length;t++){if('"'===e[t]||"'"===e[t])""===a?a=e[t]:a!==e[t]||(a="");else if(">"===e[t]&&""===a){n=!0;break}r+=e[t]}return""===a&&{value:r,index:t,tagClosed:n}}t.validate=function(e,t){t=Object.assign({},n,t);const r=[];let c=!1,p=!1;"\ufeff"===e[0]&&(e=e.substr(1));for(let n=0;n<e.length;n++)if("<"===e[n]&&"?"===e[n+1]){if(n+=2,n=i(e,n),n.err)return n}else{if("<"!==e[n]){if(o(e[n]))continue;return m("InvalidChar","char '"+e[n]+"' is not expected.",h(e,n))}{let g=n;if(n++,"!"===e[n]){n=s(e,n);continue}{let y=!1;"/"===e[n]&&(y=!0,n++);let v="";for(;n<e.length&&">"!==e[n]&&" "!==e[n]&&"\t"!==e[n]&&"\n"!==e[n]&&"\r"!==e[n];n++)v+=e[n];if(v=v.trim(),"/"===v[v.length-1]&&(v=v.substring(0,v.length-1),n--),f=v,!a.isName(f)){let t;return t=0===v.trim().length?"Invalid space after '<'.":"Tag '"+v+"' is an invalid name.",m("InvalidTag",t,h(e,n))}const b=l(e,n);if(!1===b)return m("InvalidAttr","Attributes for '"+v+"' have open quote.",h(e,n));let w=b.value;if(n=b.index,"/"===w[w.length-1]){const r=n-w.length;w=w.substring(0,w.length-1);const a=d(w,t);if(!0!==a)return m(a.err.code,a.err.msg,h(e,r+a.err.line));c=!0}else if(y){if(!b.tagClosed)return m("InvalidTag","Closing tag '"+v+"' doesn't have proper closing.",h(e,n));if(w.trim().length>0)return m("InvalidTag","Closing tag '"+v+"' can't have attributes or invalid starting.",h(e,g));{const t=r.pop();if(v!==t.tagName){let r=h(e,t.tagStartPos);return m("InvalidTag","Expected closing tag '"+t.tagName+"' (opened in line "+r.line+", col "+r.col+") instead of closing tag '"+v+"'.",h(e,g))}0==r.length&&(p=!0)}}else{const a=d(w,t);if(!0!==a)return m(a.err.code,a.err.msg,h(e,n-w.length+a.err.line));if(!0===p)return m("InvalidXml","Multiple possible root nodes found.",h(e,n));-1!==t.unpairedTags.indexOf(v)||r.push({tagName:v,tagStartPos:g}),c=!0}for(n++;n<e.length;n++)if("<"===e[n]){if("!"===e[n+1]){n++,n=s(e,n);continue}if("?"!==e[n+1])break;if(n=i(e,++n),n.err)return n}else if("&"===e[n]){const t=u(e,n);if(-1==t)return m("InvalidChar","char '&' is not expected.",h(e,n));n=t}else if(!0===p&&!o(e[n]))return m("InvalidXml","Extra text at the end",h(e,n));"<"===e[n]&&n--}}}var f;return c?1==r.length?m("InvalidTag","Unclosed tag '"+r[0].tagName+"'.",h(e,r[0].tagStartPos)):!(r.length>0)||m("InvalidXml","Invalid '"+JSON.stringify(r.map((e=>e.tagName)),null,4).replace(/\r?\n/g,"")+"' found.",{line:1,col:1}):m("InvalidXml","Start tag expected.",1)};const c=new RegExp("(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['\"])(([\\s\\S])*?)\\5)?","g");function d(e,t){const r=a.getAllMatches(e,c),n={};for(let e=0;e<r.length;e++){if(0===r[e][1].length)return m("InvalidAttr","Attribute '"+r[e][2]+"' has no space in starting.",f(r[e]));if(void 0!==r[e][3]&&void 0===r[e][4])return m("InvalidAttr","Attribute '"+r[e][2]+"' is without value.",f(r[e]));if(void 0===r[e][3]&&!t.allowBooleanAttributes)return m("InvalidAttr","boolean attribute '"+r[e][2]+"' is not allowed.",f(r[e]));const a=r[e][2];if(!p(a))return m("InvalidAttr","Attribute '"+a+"' is an invalid name.",f(r[e]));if(n.hasOwnProperty(a))return m("InvalidAttr","Attribute '"+a+"' is repeated.",f(r[e]));n[a]=1}return!0}function u(e,t){if(";"===e[++t])return-1;if("#"===e[t])return function(e,t){let r=/\d/;for("x"===e[t]&&(t++,r=/[\da-fA-F]/);t<e.length;t++){if(";"===e[t])return t;if(!e[t].match(r))break}return-1}(e,++t);let r=0;for(;t<e.length;t++,r++)if(!(e[t].match(/\w/)&&r<20)){if(";"===e[t])break;return-1}return t}function m(e,t,r){return{err:{code:e,msg:t,line:r.line||r,col:r.col}}}function p(e){return a.isName(e)}function h(e,t){const r=e.substring(0,t).split(/\r?\n/);return{line:r.length,col:r[r.length-1].length+1}}function f(e){return e.startIndex+e[1].length}},192:(e,t,r)=>{"use strict";const a=r(592),n={attributeNamePrefix:"@_",attributesGroupName:!1,textNodeName:"#text",ignoreAttributes:!0,cdataPropName:!1,format:!1,indentBy:"  ",suppressEmptyNode:!1,suppressUnpairedNode:!0,suppressBooleanAttributes:!0,tagValueProcessor:function(e,t){return t},attributeValueProcessor:function(e,t){return t},preserveOrder:!1,commentPropName:!1,unpairedTags:[],entities:[{regex:new RegExp("&","g"),val:"&amp;"},{regex:new RegExp(">","g"),val:"&gt;"},{regex:new RegExp("<","g"),val:"&lt;"},{regex:new RegExp("'","g"),val:"&apos;"},{regex:new RegExp('"',"g"),val:"&quot;"}],processEntities:!0,stopNodes:[]};function o(e){this.options=Object.assign({},n,e),this.options.ignoreAttributes||this.options.attributesGroupName?this.isAttribute=function(){return!1}:(this.attrPrefixLen=this.options.attributeNamePrefix.length,this.isAttribute=h),this.processTextOrObjNode=s,this.options.format?(this.indentate=p,this.tagEndChar=">\n",this.newLine="\n"):(this.indentate=function(){return""},this.tagEndChar=">",this.newLine=""),this.options.suppressEmptyNode?(this.buildTextNode=m,this.buildObjNode=c):(this.buildTextNode=d,this.buildObjNode=l),this.buildTextValNode=d,this.buildObjectNode=l,this.replaceEntitiesValue=u,this.buildAttrPairStr=i}function i(e,t){return t=this.options.attributeValueProcessor(e,""+t),t=this.replaceEntitiesValue(t),this.options.suppressBooleanAttributes&&"true"===t?" "+e:" "+e+'="'+t+'"'}function s(e,t,r){const a=this.j2x(e,r+1);return void 0!==e[this.options.textNodeName]&&1===Object.keys(e).length?this.buildTextNode(e[this.options.textNodeName],t,a.attrStr,r):this.buildObjNode(a.val,t,a.attrStr,r)}function l(e,t,r,a){let n="</"+t+this.tagEndChar,o="";return"?"===t[0]&&(o="?",n=""),r&&-1===e.indexOf("<")?this.indentate(a)+"<"+t+r+o+">"+e+n:!1!==this.options.commentPropName&&t===this.options.commentPropName&&0===o.length?this.indentate(a)+`\x3c!--${e}--\x3e`+this.newLine:this.indentate(a)+"<"+t+r+o+this.tagEndChar+e+this.indentate(a)+n}function c(e,t,r,a){return""!==e?this.buildObjectNode(e,t,r,a):"?"===t[0]?this.indentate(a)+"<"+t+r+"?"+this.tagEndChar:this.indentate(a)+"<"+t+r+"/"+this.tagEndChar}function d(e,t,r,a){if(!1!==this.options.cdataPropName&&t===this.options.cdataPropName)return this.indentate(a)+`<![CDATA[${e}]]>`+this.newLine;if(!1!==this.options.commentPropName&&t===this.options.commentPropName)return this.indentate(a)+`\x3c!--${e}--\x3e`+this.newLine;{let n=this.options.tagValueProcessor(t,e);return n=this.replaceEntitiesValue(n),""===n&&-1!==this.options.unpairedTags.indexOf(t)?this.options.suppressUnpairedNode?this.indentate(a)+"<"+t+this.tagEndChar:this.indentate(a)+"<"+t+"/"+this.tagEndChar:this.indentate(a)+"<"+t+r+">"+n+"</"+t+this.tagEndChar}}function u(e){if(e&&e.length>0&&this.options.processEntities)for(let t=0;t<this.options.entities.length;t++){const r=this.options.entities[t];e=e.replace(r.regex,r.val)}return e}function m(e,t,r,a){return""===e&&-1!==this.options.unpairedTags.indexOf(t)?this.options.suppressUnpairedNode?this.indentate(a)+"<"+t+this.tagEndChar:this.indentate(a)+"<"+t+"/"+this.tagEndChar:""!==e?this.buildTextValNode(e,t,r,a):"?"===t[0]?this.indentate(a)+"<"+t+r+"?"+this.tagEndChar:this.indentate(a)+"<"+t+r+"/"+this.tagEndChar}function p(e){return this.options.indentBy.repeat(e)}function h(e){return!!e.startsWith(this.options.attributeNamePrefix)&&e.substr(this.attrPrefixLen)}o.prototype.build=function(e){return this.options.preserveOrder?a(e,this.options):(Array.isArray(e)&&this.options.arrayNodeName&&this.options.arrayNodeName.length>1&&(e={[this.options.arrayNodeName]:e}),this.j2x(e,0).val)},o.prototype.j2x=function(e,t){let r="",a="";for(let n in e)if(void 0===e[n]);else if(null===e[n])"?"===n[0]?a+=this.indentate(t)+"<"+n+"?"+this.tagEndChar:a+=this.indentate(t)+"<"+n+"/"+this.tagEndChar;else if(e[n]instanceof Date)a+=this.buildTextNode(e[n],n,"",t);else if("object"!=typeof e[n]){const o=this.isAttribute(n);if(o)r+=this.buildAttrPairStr(o,""+e[n]);else if(n===this.options.textNodeName){let t=this.options.tagValueProcessor(n,""+e[n]);a+=this.replaceEntitiesValue(t)}else a+=this.buildTextNode(e[n],n,"",t)}else if(Array.isArray(e[n])){const r=e[n].length;for(let o=0;o<r;o++){const r=e[n][o];void 0===r||(null===r?"?"===n[0]?a+=this.indentate(t)+"<"+n+"?"+this.tagEndChar:a+=this.indentate(t)+"<"+n+"/"+this.tagEndChar:a+="object"==typeof r?this.processTextOrObjNode(r,n,t):this.buildTextNode(r,n,"",t))}}else if(this.options.attributesGroupName&&n===this.options.attributesGroupName){const t=Object.keys(e[n]),a=t.length;for(let o=0;o<a;o++)r+=this.buildAttrPairStr(t[o],""+e[n][t[o]])}else a+=this.processTextOrObjNode(e[n],n,t);return{attrStr:r,val:a}},e.exports=o},592:e=>{function t(e,i,s,l){let c="",d="";i.format&&i.indentBy.length>0&&(d="\n"+i.indentBy.repeat(l));for(let u=0;u<e.length;u++){const m=e[u],p=r(m);let h="";if(h=0===s.length?p:`${s}.${p}`,p===i.textNodeName){let e=m[p];n(h,i)||(e=i.tagValueProcessor(p,e),e=o(e,i)),c+=d+e;continue}if(p===i.cdataPropName){c+=d+`<![CDATA[${m[p][0][i.textNodeName]}]]>`;continue}if(p===i.commentPropName){c+=d+`\x3c!--${m[p][0][i.textNodeName]}--\x3e`;continue}if("?"===p[0]){const e=a(m[":@"],i),t="?xml"===p?"":d;let r=m[p][0][i.textNodeName];r=0!==r.length?" "+r:"",c+=t+`<${p}${r}${e}?>`;continue}let f=d+`<${p}${a(m[":@"],i)}`,g=t(m[p],i,h,l+1);-1!==i.unpairedTags.indexOf(p)?i.suppressUnpairedNode?c+=f+">":c+=f+"/>":g&&0!==g.length||!i.suppressEmptyNode?c+=f+`>${g}${d}</${p}>`:c+=f+"/>"}return c}function r(e){const t=Object.keys(e);for(let e=0;e<t.length;e++){const r=t[e];if(":@"!==r)return r}}function a(e,t){let r="";if(e&&!t.ignoreAttributes)for(let a in e){let n=t.attributeValueProcessor(a,e[a]);n=o(n,t),!0===n&&t.suppressBooleanAttributes?r+=` ${a.substr(t.attributeNamePrefix.length)}`:r+=` ${a.substr(t.attributeNamePrefix.length)}="${n}"`}return r}function n(e,t){let r=(e=e.substr(0,e.length-t.textNodeName.length-1)).substr(e.lastIndexOf(".")+1);for(let a in t.stopNodes)if(t.stopNodes[a]===e||t.stopNodes[a]==="*."+r)return!0;return!1}function o(e,t){if(e&&e.length>0&&t.processEntities)for(let r=0;r<t.entities.length;r++){const a=t.entities[r];e=e.replace(a.regex,a.val)}return e}e.exports=function(e,r){return t(e,r,"",0)}},780:e=>{const t=RegExp("^\\s([a-zA-z0-0]+)[ \t](['\"])([^&]+)\\2");function r(e,r){const a=t.exec(e);a&&(r[a[1]]={regx:RegExp(`&${a[1]};`,"g"),val:a[3]})}e.exports=function(e,t){const a={};if("O"!==e[t+3]||"C"!==e[t+4]||"T"!==e[t+5]||"Y"!==e[t+6]||"P"!==e[t+7]||"E"!==e[t+8])throw new Error("Invalid Tag instead of DOCTYPE");{t+=9;let n=1,o=!1,i=!1,s=!1,l="";for(;t<e.length;t++)if("<"===e[t]){if(o&&"!"===e[t+1]&&"E"===e[t+2]&&"N"===e[t+3]&&"T"===e[t+4]&&"I"===e[t+5]&&"T"===e[t+6]&&"Y"===e[t+7])t+=7,i=!0;else if(o&&"!"===e[t+1]&&"E"===e[t+2]&&"L"===e[t+3]&&"E"===e[t+4]&&"M"===e[t+5]&&"E"===e[t+6]&&"N"===e[t+7]&&"T"===e[t+8])t+=8;else{if("!"!==e[t+1]||"-"!==e[t+2]||"-"!==e[t+3])throw new Error("Invalid DOCTYPE");s=!0}n++,l=""}else if(">"===e[t]){if(s){if("-"!==e[t-1]||"-"!==e[t-2])throw new Error("Invalid XML comment in DOCTYPE");s=!1}else i&&(r(l,a),i=!1);if(n--,0===n)break}else"["===e[t]?o=!0:l+=e[t];if(0!==n)throw new Error("Unclosed DOCTYPE")}return{entities:a,i:t}}},745:(e,t)=>{const r={preserveOrder:!1,attributeNamePrefix:"@_",attributesGroupName:!1,textNodeName:"#text",ignoreAttributes:!0,removeNSPrefix:!1,allowBooleanAttributes:!1,parseTagValue:!0,parseAttributeValue:!1,trimValues:!0,cdataPropName:!1,numberParseOptions:{hex:!0,leadingZeros:!0},tagValueProcessor:function(e,t){return t},attributeValueProcessor:function(e,t){return t},stopNodes:[],alwaysCreateTextNode:!1,isArray:()=>!1,commentPropName:!1,unpairedTags:[],processEntities:!0,htmlEntities:!1,ignoreDeclaration:!1,ignorePiTags:!1};t.buildOptions=function(e){return Object.assign({},r,e)},t.defaultOptions=r},78:(e,t,r)=>{"use strict";const a=r(849),n=r(311),o=r(780),i=r(153);function s(e){const t=Object.keys(e);for(let r=0;r<t.length;r++){const a=t[r];this.lastEntities[a]={regex:new RegExp("&"+a+";","g"),val:e[a]}}}function l(e,t,r,a,n,o,i){if(void 0!==e&&(this.options.trimValues&&!a&&(e=e.trim()),e.length>0)){i||(e=this.replaceEntitiesValue(e));const a=this.options.tagValueProcessor(t,e,r,n,o);return null==a?e:typeof a!=typeof e||a!==e?a:this.options.trimValues||e.trim()===e?b(e,this.options.parseTagValue,this.options.numberParseOptions):e}}function c(e){if(this.options.removeNSPrefix){const t=e.split(":"),r="/"===e.charAt(0)?"/":"";if("xmlns"===t[0])return"";2===t.length&&(e=r+t[1])}return e}"<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g,a.nameRegexp);const d=new RegExp("([^\\s=]+)\\s*(=\\s*(['\"])([\\s\\S]*?)\\3)?","gm");function u(e,t){if(!this.options.ignoreAttributes&&"string"==typeof e){const r=a.getAllMatches(e,d),n=r.length,o={};for(let e=0;e<n;e++){const a=this.resolveNameSpace(r[e][1]);let n=r[e][4];const i=this.options.attributeNamePrefix+a;if(a.length)if(void 0!==n){this.options.trimValues&&(n=n.trim()),n=this.replaceEntitiesValue(n);const e=this.options.attributeValueProcessor(a,n,t);o[i]=null==e?n:typeof e!=typeof n||e!==n?e:b(n,this.options.parseAttributeValue,this.options.numberParseOptions)}else this.options.allowBooleanAttributes&&(o[i]=!0)}if(!Object.keys(o).length)return;if(this.options.attributesGroupName){const e={};return e[this.options.attributesGroupName]=o,e}return o}}const m=function(e){e=e.replace(/\r\n?/g,"\n");const t=new n("!xml");let r=t,a="",i="";for(let s=0;s<e.length;s++)if("<"===e[s])if("/"===e[s+1]){const t=g(e,">",s,"Closing Tag is not closed.");let n=e.substring(s+2,t).trim();if(this.options.removeNSPrefix){const e=n.indexOf(":");-1!==e&&(n=n.substr(e+1))}r&&(a=this.saveTextToParentTag(a,r,i)),i=i.substr(0,i.lastIndexOf(".")),r=this.tagsNodeStack.pop(),a="",s=t}else if("?"===e[s+1]){let t=y(e,s,!1,"?>");if(!t)throw new Error("Pi Tag is not closed.");if(a=this.saveTextToParentTag(a,r,i),this.options.ignoreDeclaration&&"?xml"===t.tagName||this.options.ignorePiTags);else{const e=new n(t.tagName);e.add(this.options.textNodeName,""),t.tagName!==t.tagExp&&t.attrExpPresent&&(e[":@"]=this.buildAttributesMap(t.tagExp,i)),r.addChild(e)}s=t.closeIndex+1}else if("!--"===e.substr(s+1,3)){const t=g(e,"--\x3e",s+4,"Comment is not closed.");if(this.options.commentPropName){const n=e.substring(s+4,t-2);a=this.saveTextToParentTag(a,r,i),r.add(this.options.commentPropName,[{[this.options.textNodeName]:n}])}s=t}else if("!D"===e.substr(s+1,2)){const t=o(e,s);this.docTypeEntities=t.entities,s=t.i}else if("!["===e.substr(s+1,2)){const t=g(e,"]]>",s,"CDATA is not closed.")-2,n=e.substring(s+9,t);if(a=this.saveTextToParentTag(a,r,i),this.options.cdataPropName)r.add(this.options.cdataPropName,[{[this.options.textNodeName]:n}]);else{let e=this.parseTextData(n,r.tagname,i,!0,!1,!0);e||(e=""),r.add(this.options.textNodeName,e)}s=t+2}else{let o=y(e,s,this.options.removeNSPrefix),l=o.tagName,c=o.tagExp,d=o.attrExpPresent,u=o.closeIndex;r&&a&&"!xml"!==r.tagname&&(a=this.saveTextToParentTag(a,r,i,!1)),l!==t.tagname&&(i+=i?"."+l:l);const m=r;if(m&&-1!==this.options.unpairedTags.indexOf(m.tagname)&&(r=this.tagsNodeStack.pop()),this.isItStopNode(this.options.stopNodes,i,l)){let t="";if(c.length>0&&c.lastIndexOf("/")===c.length-1)s=o.closeIndex;else if(-1!==this.options.unpairedTags.indexOf(l))s=o.closeIndex;else{const r=this.readStopNodeData(e,l,u+1);if(!r)throw new Error(`Unexpected end of ${l}`);s=r.i,t=r.tagContent}const a=new n(l);l!==c&&d&&(a[":@"]=this.buildAttributesMap(c,i)),t&&(t=this.parseTextData(t,l,i,!0,d,!0,!0)),i=i.substr(0,i.lastIndexOf(".")),a.add(this.options.textNodeName,t),r.addChild(a)}else{if(c.length>0&&c.lastIndexOf("/")===c.length-1){"/"===l[l.length-1]?(l=l.substr(0,l.length-1),c=l):c=c.substr(0,c.length-1);const e=new n(l);l!==c&&d&&(e[":@"]=this.buildAttributesMap(c,i)),i=i.substr(0,i.lastIndexOf(".")),r.addChild(e)}else{const e=new n(l);this.tagsNodeStack.push(r),l!==c&&d&&(e[":@"]=this.buildAttributesMap(c,i)),r.addChild(e),r=e}a="",s=u}}else a+=e[s];return t.child},p=function(e){if(this.options.processEntities){for(let t in this.docTypeEntities){const r=this.docTypeEntities[t];e=e.replace(r.regx,r.val)}for(let t in this.lastEntities){const r=this.lastEntities[t];e=e.replace(r.regex,r.val)}if(this.options.htmlEntities)for(let t in this.htmlEntities){const r=this.htmlEntities[t];e=e.replace(r.regex,r.val)}}return e};function h(e,t,r,a){return e&&(void 0===a&&(a=0===Object.keys(t.child).length),void 0!==(e=this.parseTextData(e,t.tagname,r,!1,!!t[":@"]&&0!==Object.keys(t[":@"]).length,a))&&""!==e&&t.add(this.options.textNodeName,e),e=""),e}function f(e,t,r){const a="*."+r;for(const r in e){const n=e[r];if(a===n||t===n)return!0}return!1}function g(e,t,r,a){const n=e.indexOf(t,r);if(-1===n)throw new Error(a);return n+t.length-1}function y(e,t,r,a=">"){const n=function(e,t,r=">"){let a,n="";for(let o=t;o<e.length;o++){let t=e[o];if(a)t===a&&(a="");else if('"'===t||"'"===t)a=t;else if(t===r[0]){if(!r[1])return{data:n,index:o};if(e[o+1]===r[1])return{data:n,index:o}}else"\t"===t&&(t=" ");n+=t}}(e,t+1,a);if(!n)return;let o=n.data;const i=n.index,s=o.search(/\s/);let l=o,c=!0;if(-1!==s&&(l=o.substr(0,s).replace(/\s\s*$/,""),o=o.substr(s+1)),r){const e=l.indexOf(":");-1!==e&&(l=l.substr(e+1),c=l!==n.data.substr(e+1))}return{tagName:l,tagExp:o,closeIndex:i,attrExpPresent:c}}function v(e,t,r){const a=r;for(;r<e.length;r++)if("<"===e[r]&&"/"===e[r+1]){const n=g(e,">",r,`${t} is not closed`);if(e.substring(r+2,n).trim()===t)return{tagContent:e.substring(a,r),i:n};r=n}}function b(e,t,r){if(t&&"string"==typeof e){const t=e.trim();return"true"===t||"false"!==t&&i(e,r)}return a.isExist(e)?e:""}e.exports=class{constructor(e){this.options=e,this.currentNode=null,this.tagsNodeStack=[],this.docTypeEntities={},this.lastEntities={amp:{regex:/&(amp|#38|#x26);/g,val:"&"},apos:{regex:/&(apos|#39|#x27);/g,val:"'"},gt:{regex:/&(gt|#62|#x3E);/g,val:">"},lt:{regex:/&(lt|#60|#x3C);/g,val:"<"},quot:{regex:/&(quot|#34|#x22);/g,val:'"'}},this.htmlEntities={space:{regex:/&(nbsp|#160);/g,val:" "},cent:{regex:/&(cent|#162);/g,val:"¢"},pound:{regex:/&(pound|#163);/g,val:"£"},yen:{regex:/&(yen|#165);/g,val:"¥"},euro:{regex:/&(euro|#8364);/g,val:"€"},copyright:{regex:/&(copy|#169);/g,val:"©"},reg:{regex:/&(reg|#174);/g,val:"®"},inr:{regex:/&(inr|#8377);/g,val:"₹"}},this.addExternalEntities=s,this.parseXml=m,this.parseTextData=l,this.resolveNameSpace=c,this.buildAttributesMap=u,this.isItStopNode=f,this.replaceEntitiesValue=p,this.readStopNodeData=v,this.saveTextToParentTag=h}}},844:(e,t,r)=>{const{buildOptions:a}=r(745),n=r(78),{prettify:o}=r(997),i=r(501);e.exports=class{constructor(e){this.externalEntities={},this.options=a(e)}parse(e,t){if("string"==typeof e);else{if(!e.toString)throw new Error("XML data is accepted in String or Bytes[] form.");e=e.toString()}if(t){!0===t&&(t={});const r=i.validate(e,t);if(!0!==r)throw Error(`${r.err.msg}:${r.err.line}:${r.err.col}`)}const r=new n(this.options);r.addExternalEntities(this.externalEntities);const a=r.parseXml(e);return this.options.preserveOrder||void 0===a?a:o(a,this.options)}addEntity(e,t){if(-1!==t.indexOf("&"))throw new Error("Entity value can't have '&'");if(-1!==e.indexOf("&")||-1!==e.indexOf(";"))throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");this.externalEntities[e]=t}}},997:(e,t)=>{"use strict";function r(e,t,i){let s;const l={};for(let c=0;c<e.length;c++){const d=e[c],u=a(d);let m="";if(m=void 0===i?u:i+"."+u,u===t.textNodeName)void 0===s?s=d[u]:s+=""+d[u];else{if(void 0===u)continue;if(d[u]){let e=r(d[u],t,m);const a=o(e,t);d[":@"]?n(e,d[":@"],m,t):1!==Object.keys(e).length||void 0===e[t.textNodeName]||t.alwaysCreateTextNode?0===Object.keys(e).length&&(t.alwaysCreateTextNode?e[t.textNodeName]="":e=""):e=e[t.textNodeName],void 0!==l[u]?(Array.isArray(l[u])||(l[u]=[l[u]]),l[u].push(e)):t.isArray(u,m,a)?l[u]=[e]:l[u]=e}}}return"string"==typeof s?s.length>0&&(l[t.textNodeName]=s):void 0!==s&&(l[t.textNodeName]=s),l}function a(e){const t=Object.keys(e);for(let e=0;e<t.length;e++){const r=t[e];if(":@"!==r)return r}}function n(e,t,r,a){if(t){const n=Object.keys(t),o=n.length;for(let i=0;i<o;i++){const o=n[i];a.isArray(o,r+"."+o,!0,!0)?e[o]=[t[o]]:e[o]=t[o]}}}function o(e,t){const r=Object.keys(e).length;return!!(0===r||1===r&&e[t.textNodeName])}t.prettify=function(e,t){return r(e,t)}},311:e=>{"use strict";e.exports=class{constructor(e){this.tagname=e,this.child=[],this[":@"]={}}add(e,t){this.child.push({[e]:t})}addChild(e){e[":@"]&&Object.keys(e[":@"]).length>0?this.child.push({[e.tagname]:e.child,":@":e[":@"]}):this.child.push({[e.tagname]:e.child})}}},153:e=>{const t=/^[-+]?0x[a-fA-F0-9]+$/,r=/^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;!Number.parseInt&&window.parseInt&&(Number.parseInt=window.parseInt),!Number.parseFloat&&window.parseFloat&&(Number.parseFloat=window.parseFloat);const a={hex:!0,leadingZeros:!0,decimalPoint:".",eNotation:!0};e.exports=function(e,n={}){if(n=Object.assign({},a,n),!e||"string"!=typeof e)return e;let o=e.trim();if(void 0!==n.skipLike&&n.skipLike.test(o))return e;if(n.hex&&t.test(o))return Number.parseInt(o,16);{const t=r.exec(o);if(t){const r=t[1],a=t[2];let s=(i=t[3])&&-1!==i.indexOf(".")?("."===(i=i.replace(/0+$/,""))?i="0":"."===i[0]?i="0"+i:"."===i[i.length-1]&&(i=i.substr(0,i.length-1)),i):i;const l=t[4]||t[6];if(!n.leadingZeros&&a.length>0&&r&&"."!==o[2])return e;if(!n.leadingZeros&&a.length>0&&!r&&"."!==o[1])return e;{const t=Number(o),i=""+t;return-1!==i.search(/[eE]/)||l?n.eNotation?t:e:-1!==o.indexOf(".")?"0"===i&&""===s||i===s||r&&i==="-"+s?t:e:a?s===i||r+s===i?t:e:o===i||o===r+i?t:e}}return e}var i}}},t={};function r(a){var n=t[a];if(void 0!==n)return n.exports;var o=t[a]={exports:{}};return e[a](o,o.exports,r),o.exports}r.d=(e,t)=>{for(var a in t)r.o(t,a)&&!r.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var a={};(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(t){return e(1,arguments),t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)}function n(t){e(1,arguments);var r=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===r?new Date(t.getTime()):"number"==typeof t||"[object Number]"===r?new Date(t):("string"!=typeof t&&"[object String]"!==r||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function o(r){if(e(1,arguments),!t(r)&&"number"!=typeof r)return!1;var a=n(r);return!isNaN(Number(a))}r.d(a,{j:()=>Xl});var i={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function s(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=t.width?String(t.width):e.defaultWidth,a=e.formats[r]||e.formats[e.defaultWidth];return a}}const l={date:s({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:s({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:s({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var c={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function d(e){return function(t,r){var a,n=r||{};if("formatting"===(n.context?String(n.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,i=n.width?String(n.width):o;a=e.formattingValues[i]||e.formattingValues[o]}else{var s=e.defaultWidth,l=n.width?String(n.width):e.defaultWidth;a=e.values[l]||e.values[s]}return a[e.argumentCallback?e.argumentCallback(t):t]}}const u={ordinalNumber:function(e,t){var r=Number(e),a=r%100;if(a>20||a<10)switch(a%10){case 1:return r+"st";case 2:return r+"nd";case 3:return r+"rd"}return r+"th"},era:d({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:d({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:d({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:d({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:d({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function m(e){return function(t){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=r.width,n=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],o=t.match(n);if(!o)return null;var i,s=o[0],l=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(l)?h(l,(function(e){return e.test(s)})):p(l,(function(e){return e.test(s)}));i=e.valueCallback?e.valueCallback(c):c,i=r.valueCallback?r.valueCallback(i):i;var d=t.slice(s.length);return{value:i,rest:d}}}function p(e,t){for(var r in e)if(e.hasOwnProperty(r)&&t(e[r]))return r}function h(e,t){for(var r=0;r<e.length;r++)if(t(e[r]))return r}var f,g={ordinalNumber:(f={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=e.match(f.matchPattern);if(!r)return null;var a=r[0],n=e.match(f.parsePattern);if(!n)return null;var o=f.valueCallback?f.valueCallback(n[0]):n[0];o=t.valueCallback?t.valueCallback(o):o;var i=e.slice(a.length);return{value:o,rest:i}}),era:m({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:m({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:m({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:m({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:m({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const y={code:"en-US",formatDistance:function(e,t,r){var a,n=i[e];return a="string"==typeof n?n:1===t?n.one:n.other.replace("{{count}}",t.toString()),null!=r&&r.addSuffix?r.comparison&&r.comparison>0?"in "+a:a+" ago":a},formatLong:l,formatRelative:function(e,t,r,a){return c[e]},localize:u,match:g,options:{weekStartsOn:0,firstWeekContainsDate:1}};function v(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function b(t,r){e(2,arguments);var a=n(t).getTime(),o=v(r);return new Date(a+o)}function w(t,r){e(2,arguments);var a=v(r);return b(t,-a)}var x=864e5;function S(t){e(1,arguments);var r=1,a=n(t),o=a.getUTCDay(),i=(o<r?7:0)+o-r;return a.setUTCDate(a.getUTCDate()-i),a.setUTCHours(0,0,0,0),a}function k(t){e(1,arguments);var r=n(t),a=r.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(a+1,0,4),o.setUTCHours(0,0,0,0);var i=S(o),s=new Date(0);s.setUTCFullYear(a,0,4),s.setUTCHours(0,0,0,0);var l=S(s);return r.getTime()>=i.getTime()?a+1:r.getTime()>=l.getTime()?a:a-1}function C(t){e(1,arguments);var r=k(t),a=new Date(0);a.setUTCFullYear(r,0,4),a.setUTCHours(0,0,0,0);var n=S(a);return n}var T=6048e5;function P(t,r){e(1,arguments);var a=r||{},o=a.locale,i=o&&o.options&&o.options.weekStartsOn,s=null==i?0:v(i),l=null==a.weekStartsOn?s:v(a.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=n(t),d=c.getUTCDay(),u=(d<l?7:0)+d-l;return c.setUTCDate(c.getUTCDate()-u),c.setUTCHours(0,0,0,0),c}function D(t,r){e(1,arguments);var a=n(t),o=a.getUTCFullYear(),i=r||{},s=i.locale,l=s&&s.options&&s.options.firstWeekContainsDate,c=null==l?1:v(l),d=null==i.firstWeekContainsDate?c:v(i.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=new Date(0);u.setUTCFullYear(o+1,0,d),u.setUTCHours(0,0,0,0);var m=P(u,r),p=new Date(0);p.setUTCFullYear(o,0,d),p.setUTCHours(0,0,0,0);var h=P(p,r);return a.getTime()>=m.getTime()?o+1:a.getTime()>=h.getTime()?o:o-1}function E(t,r){e(1,arguments);var a=r||{},n=a.locale,o=n&&n.options&&n.options.firstWeekContainsDate,i=null==o?1:v(o),s=null==a.firstWeekContainsDate?i:v(a.firstWeekContainsDate),l=D(t,r),c=new Date(0);c.setUTCFullYear(l,0,s),c.setUTCHours(0,0,0,0);var d=P(c,r);return d}var M=6048e5;function A(e,t){for(var r=e<0?"-":"",a=Math.abs(e).toString();a.length<t;)a="0"+a;return r+a}const F=function(e,t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return A("yy"===t?a%100:a,t.length)},I=function(e,t){var r=e.getUTCMonth();return"M"===t?String(r+1):A(r+1,2)},R=function(e,t){return A(e.getUTCDate(),t.length)},O=function(e,t){return A(e.getUTCHours()%12||12,t.length)},L=function(e,t){return A(e.getUTCHours(),t.length)},$=function(e,t){return A(e.getUTCMinutes(),t.length)},N=function(e,t){return A(e.getUTCSeconds(),t.length)},_=function(e,t){var r=t.length,a=e.getUTCMilliseconds();return A(Math.floor(a*Math.pow(10,r-3)),t.length)};function B(e,t){var r=e>0?"-":"+",a=Math.abs(e),n=Math.floor(a/60),o=a%60;if(0===o)return r+String(n);var i=t||"";return r+String(n)+i+A(o,2)}function z(e,t){return e%60==0?(e>0?"-":"+")+A(Math.abs(e)/60,2):U(e,t)}function U(e,t){var r=t||"",a=e>0?"-":"+",n=Math.abs(e);return a+A(Math.floor(n/60),2)+r+A(n%60,2)}const j={G:function(e,t,r){var a=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return r.era(a,{width:"abbreviated"});case"GGGGG":return r.era(a,{width:"narrow"});default:return r.era(a,{width:"wide"})}},y:function(e,t,r){if("yo"===t){var a=e.getUTCFullYear(),n=a>0?a:1-a;return r.ordinalNumber(n,{unit:"year"})}return F(e,t)},Y:function(e,t,r,a){var n=D(e,a),o=n>0?n:1-n;return"YY"===t?A(o%100,2):"Yo"===t?r.ordinalNumber(o,{unit:"year"}):A(o,t.length)},R:function(e,t){return A(k(e),t.length)},u:function(e,t){return A(e.getUTCFullYear(),t.length)},Q:function(e,t,r){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(a);case"QQ":return A(a,2);case"Qo":return r.ordinalNumber(a,{unit:"quarter"});case"QQQ":return r.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return r.quarter(a,{width:"narrow",context:"formatting"});default:return r.quarter(a,{width:"wide",context:"formatting"})}},q:function(e,t,r){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(a);case"qq":return A(a,2);case"qo":return r.ordinalNumber(a,{unit:"quarter"});case"qqq":return r.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return r.quarter(a,{width:"narrow",context:"standalone"});default:return r.quarter(a,{width:"wide",context:"standalone"})}},M:function(e,t,r){var a=e.getUTCMonth();switch(t){case"M":case"MM":return I(e,t);case"Mo":return r.ordinalNumber(a+1,{unit:"month"});case"MMM":return r.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return r.month(a,{width:"narrow",context:"formatting"});default:return r.month(a,{width:"wide",context:"formatting"})}},L:function(e,t,r){var a=e.getUTCMonth();switch(t){case"L":return String(a+1);case"LL":return A(a+1,2);case"Lo":return r.ordinalNumber(a+1,{unit:"month"});case"LLL":return r.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return r.month(a,{width:"narrow",context:"standalone"});default:return r.month(a,{width:"wide",context:"standalone"})}},w:function(t,r,a,o){var i=function(t,r){e(1,arguments);var a=n(t),o=P(a,r).getTime()-E(a,r).getTime();return Math.round(o/M)+1}(t,o);return"wo"===r?a.ordinalNumber(i,{unit:"week"}):A(i,r.length)},I:function(t,r,a){var o=function(t){e(1,arguments);var r=n(t),a=S(r).getTime()-C(r).getTime();return Math.round(a/T)+1}(t);return"Io"===r?a.ordinalNumber(o,{unit:"week"}):A(o,r.length)},d:function(e,t,r){return"do"===t?r.ordinalNumber(e.getUTCDate(),{unit:"date"}):R(e,t)},D:function(t,r,a){var o=function(t){e(1,arguments);var r=n(t),a=r.getTime();r.setUTCMonth(0,1),r.setUTCHours(0,0,0,0);var o=r.getTime(),i=a-o;return Math.floor(i/x)+1}(t);return"Do"===r?a.ordinalNumber(o,{unit:"dayOfYear"}):A(o,r.length)},E:function(e,t,r){var a=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return r.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return r.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return r.day(a,{width:"short",context:"formatting"});default:return r.day(a,{width:"wide",context:"formatting"})}},e:function(e,t,r,a){var n=e.getUTCDay(),o=(n-a.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return A(o,2);case"eo":return r.ordinalNumber(o,{unit:"day"});case"eee":return r.day(n,{width:"abbreviated",context:"formatting"});case"eeeee":return r.day(n,{width:"narrow",context:"formatting"});case"eeeeee":return r.day(n,{width:"short",context:"formatting"});default:return r.day(n,{width:"wide",context:"formatting"})}},c:function(e,t,r,a){var n=e.getUTCDay(),o=(n-a.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return A(o,t.length);case"co":return r.ordinalNumber(o,{unit:"day"});case"ccc":return r.day(n,{width:"abbreviated",context:"standalone"});case"ccccc":return r.day(n,{width:"narrow",context:"standalone"});case"cccccc":return r.day(n,{width:"short",context:"standalone"});default:return r.day(n,{width:"wide",context:"standalone"})}},i:function(e,t,r){var a=e.getUTCDay(),n=0===a?7:a;switch(t){case"i":return String(n);case"ii":return A(n,t.length);case"io":return r.ordinalNumber(n,{unit:"day"});case"iii":return r.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return r.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return r.day(a,{width:"short",context:"formatting"});default:return r.day(a,{width:"wide",context:"formatting"})}},a:function(e,t,r){var a=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return r.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return r.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return r.dayPeriod(a,{width:"narrow",context:"formatting"});default:return r.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(e,t,r){var a,n=e.getUTCHours();switch(a=12===n?"noon":0===n?"midnight":n/12>=1?"pm":"am",t){case"b":case"bb":return r.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return r.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return r.dayPeriod(a,{width:"narrow",context:"formatting"});default:return r.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(e,t,r){var a,n=e.getUTCHours();switch(a=n>=17?"evening":n>=12?"afternoon":n>=4?"morning":"night",t){case"B":case"BB":case"BBB":return r.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return r.dayPeriod(a,{width:"narrow",context:"formatting"});default:return r.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(e,t,r){if("ho"===t){var a=e.getUTCHours()%12;return 0===a&&(a=12),r.ordinalNumber(a,{unit:"hour"})}return O(e,t)},H:function(e,t,r){return"Ho"===t?r.ordinalNumber(e.getUTCHours(),{unit:"hour"}):L(e,t)},K:function(e,t,r){var a=e.getUTCHours()%12;return"Ko"===t?r.ordinalNumber(a,{unit:"hour"}):A(a,t.length)},k:function(e,t,r){var a=e.getUTCHours();return 0===a&&(a=24),"ko"===t?r.ordinalNumber(a,{unit:"hour"}):A(a,t.length)},m:function(e,t,r){return"mo"===t?r.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):$(e,t)},s:function(e,t,r){return"so"===t?r.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):N(e,t)},S:function(e,t){return _(e,t)},X:function(e,t,r,a){var n=(a._originalDate||e).getTimezoneOffset();if(0===n)return"Z";switch(t){case"X":return z(n);case"XXXX":case"XX":return U(n);default:return U(n,":")}},x:function(e,t,r,a){var n=(a._originalDate||e).getTimezoneOffset();switch(t){case"x":return z(n);case"xxxx":case"xx":return U(n);default:return U(n,":")}},O:function(e,t,r,a){var n=(a._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+B(n,":");default:return"GMT"+U(n,":")}},z:function(e,t,r,a){var n=(a._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+B(n,":");default:return"GMT"+U(n,":")}},t:function(e,t,r,a){var n=a._originalDate||e;return A(Math.floor(n.getTime()/1e3),t.length)},T:function(e,t,r,a){return A((a._originalDate||e).getTime(),t.length)}};function H(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function K(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}const q={p:K,P:function(e,t){var r,a=e.match(/(P+)(p+)?/)||[],n=a[1],o=a[2];if(!o)return H(e,t);switch(n){case"P":r=t.dateTime({width:"short"});break;case"PP":r=t.dateTime({width:"medium"});break;case"PPP":r=t.dateTime({width:"long"});break;default:r=t.dateTime({width:"full"})}return r.replace("{{date}}",H(n,t)).replace("{{time}}",K(o,t))}};function G(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var V=["D","DD"],W=["YY","YYYY"];function Y(e){return-1!==V.indexOf(e)}function X(e){return-1!==W.indexOf(e)}function Z(e,t,r){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(r,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(r,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(r,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(r,"`; see: https://git.io/fxCyr"))}var Q,J,ee,te=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,re=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ae=/^'([^]*?)'?$/,ne=/''/g,oe=/[a-zA-Z]/;function ie(t,r,a){e(2,arguments);var i=String(r),s=a||{},l=s.locale||y,c=l.options&&l.options.firstWeekContainsDate,d=null==c?1:v(c),u=null==s.firstWeekContainsDate?d:v(s.firstWeekContainsDate);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=l.options&&l.options.weekStartsOn,p=null==m?0:v(m),h=null==s.weekStartsOn?p:v(s.weekStartsOn);if(!(h>=0&&h<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!l.localize)throw new RangeError("locale must contain localize property");if(!l.formatLong)throw new RangeError("locale must contain formatLong property");var f=n(t);if(!o(f))throw new RangeError("Invalid time value");var g=G(f),b=w(f,g),x={firstWeekContainsDate:u,weekStartsOn:h,locale:l,_originalDate:f},S=i.match(re).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,q[t])(e,l.formatLong,x):e})).join("").match(te).map((function(e){if("''"===e)return"'";var a=e[0];if("'"===a)return se(e);var n=j[a];if(n)return!s.useAdditionalWeekYearTokens&&X(e)&&Z(e,r,t),!s.useAdditionalDayOfYearTokens&&Y(e)&&Z(e,r,t),n(b,e,l.localize,x);if(a.match(oe))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return e})).join("");return S}function se(e){return e.match(ae)[1].replace(ne,"'")}function le(...e){console.error("[OGame Tracker]",...e)}function ce(...e){console.warn("[OGame Tracker]",...e)}function de(...e){console.debug("[OGame Tracker]",ie(Date.now(),"yyyy-MM-dd HH-mm-ss.SSS"),...e)}let ue,me;!function(e){e.StayAlive="internal/stay-alive",e.DropDatabaseConnections="internal/drop-db-connections",e.Notification="notification",e.TrackExpedition="expedition/track-expedition",e.Expedition="expedition/single",e.NewExpedition="expedition/new",e.DebrisFieldReport="debris-fields/single",e.NewDebrisFieldReport="debris-fields/new",e.TrackDebrisFieldReport="debris-fields/track",e.TrackManualDebrisFieldReport="debris-fields/track-manually",e.CombatReport="combat-reports/single",e.NewCombatReport="combat-reports/new",e.TrackCombatReport="combat-reports/track",e.RequestSingleCombatReport="combat-reports/request-single-report",e.CombatReportUnknown="combat-reports/is-unknown",e.WillNotBeTracked="message-tracking/no-tracking",e.TrackingError="message-tracking/error",e.UpdatePlanetData="empire/update-planet-data",e.UpdatePlanetActiveItems="empire/update-active-items",e.UpdatePlanetBuildingLevels="empire/update-buildings-levels",e.UpdateResearchLevels="empire/update-research-levels",e.UpdatePlanetShipCounts="empire/update-planet-ships",e.UpdatePlanetDefenseCounts="empire/update-planet-defenses",e.UpdatePlanetMissileCounts="empire/update-planet-missiles",e.UpdateActiveOfficers="empire/update-active-officers",e.UpdatePlayerClass="empire/update-player-class",e.UpdateAllianceClass="empire/update-alliance-class",e.UpdatePlanetProductionSettings="empire/update-planet-production-settings",e.UpdateFleets="empire/fleets",e.NotifyEmpireDataUpdate="empire/notify-update",e.RequestSettings="settings/request-data",e.Settings="settings/data",e.NotifySettingsUpdate="settings/notify-update",e.NotifyUniverseHistoryUpdate="universe-history/notify-update",e.NotifyServerSettingsUpdate="server-settings/notify-update",e.ForceUpdateServerSettings="server-settings/force-update",e.UpdatePlayerName="accounts/update-player-name",e.UpdateUniverseName="universes/update-universe-name",e.NotifyUniverseSpecificSettingsUpdate="universe-specific-settings/notify-update",e.UpdateLifeformExperience="lifeforms/update-lifeform-experience",e.UpdateSelectedLifeform="lifeforms/update-selected-lifeform",e.UpdatePlanetActiveLifeformBuildingLevels="lifeforms/update-active-building-levels",e.UpdatePlanetLifeformBuildingLevels="lifeforms/update-all-building-levels",e.UpdatePlanetActiveLifeformTechnologyLevels="lifeforms/update-active-technology-levels",e.UpdatePlanetLifeformTechnologyLevels="lifeforms/update-all-technology-levels",e.TrackLifeformDiscovery="lifeforms/track-discovery",e.LifeformDiscovery="lifeforms/discovery",e.NewLifeformDiscovery="lifeforms/new-discovery"}(Q||(Q={})),function(e){e.won="won",e.lost="lost",e.draw="draw"}(J||(J={})),J.won,J.draw,J.lost,function(e){e.metal="metal",e.crystal="crystal",e.deuterium="deuterium"}(ee||(ee={})),ee.metal,ee.crystal,ee.deuterium;const pe=new WeakMap,he=new WeakMap,fe=new WeakMap,ge=new WeakMap,ye=new WeakMap;let ve={get(e,t,r){if(e instanceof IDBTransaction){if("done"===t)return he.get(e);if("objectStoreNames"===t)return e.objectStoreNames||fe.get(e);if("store"===t)return r.objectStoreNames[1]?void 0:r.objectStore(r.objectStoreNames[0])}return we(e[t])},set:(e,t,r)=>(e[t]=r,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function be(e){return"function"==typeof e?(t=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(me||(me=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(xe(this),e),we(pe.get(this))}:function(...e){return we(t.apply(xe(this),e))}:function(e,...r){const a=t.call(xe(this),e,...r);return fe.set(a,e.sort?e.sort():[e]),we(a)}:(e instanceof IDBTransaction&&function(e){if(he.has(e))return;const t=new Promise(((t,r)=>{const a=()=>{e.removeEventListener("complete",n),e.removeEventListener("error",o),e.removeEventListener("abort",o)},n=()=>{t(),a()},o=()=>{r(e.error||new DOMException("AbortError","AbortError")),a()};e.addEventListener("complete",n),e.addEventListener("error",o),e.addEventListener("abort",o)}));he.set(e,t)}(e),r=e,(ue||(ue=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some((e=>r instanceof e))?new Proxy(e,ve):e);var t,r}function we(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,r)=>{const a=()=>{e.removeEventListener("success",n),e.removeEventListener("error",o)},n=()=>{t(we(e.result)),a()},o=()=>{r(e.error),a()};e.addEventListener("success",n),e.addEventListener("error",o)}));return t.then((t=>{t instanceof IDBCursor&&pe.set(t,e)})).catch((()=>{})),ye.set(t,e),t}(e);if(ge.has(e))return ge.get(e);const t=be(e);return t!==e&&(ge.set(e,t),ye.set(t,e)),t}const xe=e=>ye.get(e),Se=["get","getKey","getAll","getAllKeys","count"],ke=["put","add","delete","clear"],Ce=new Map;function Te(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(Ce.get(t))return Ce.get(t);const r=t.replace(/FromIndex$/,""),a=t!==r,n=ke.includes(r);if(!(r in(a?IDBIndex:IDBObjectStore).prototype)||!n&&!Se.includes(r))return;const o=async function(e,...t){const o=this.transaction(e,n?"readwrite":"readonly");let i=o.store;return a&&(i=i.index(t.shift())),(await Promise.all([i[r](...t),n&&o.done]))[0]};return Ce.set(t,o),o}var Pe;function De(e,t){if(null!=t)throw{message:e,data:t};throw new Error("[OGame Tracker] "+e)}Pe=e=>({...e,get:(t,r,a)=>Te(t,r)||e.get(t,r,a),has:(t,r)=>!!Te(t,r)||e.has(t,r)}),ve=Pe(ve);const Ee={};async function Me(e,t){let r=Ee[e];return null==r&&(Ee[e]=r=function(e,t,{blocked:r,upgrade:a,blocking:n,terminated:o}={}){const i=indexedDB.open(e,t),s=we(i);return a&&i.addEventListener("upgradeneeded",(e=>{a(we(i.result),e.oldVersion,e.newVersion,we(i.transaction))})),r&&i.addEventListener("blocked",(()=>r())),s.then((e=>{o&&e.addEventListener("close",(()=>o())),n&&e.addEventListener("versionchange",(()=>n()))})).catch((()=>{})),s}(e,8,{upgrade:t}),(await r).addEventListener("close",(t=>delete Ee[e]))),await r}async function Ae(e){const t=function(e){return e.serverId<=0&&De("Server ID is 0 or less"),e.playerId<=0&&De("Player ID is 0 or less"),`s${e.serverId}-${e.language}-${e.playerId}`}(e);return await Me(t,((e,t,r,a)=>{t<1&&(e.createObjectStore("combatReports",{keyPath:"id"}),e.createObjectStore("debrisFieldReports",{keyPath:"id"}),e.createObjectStore("expeditions",{keyPath:"id"}),e.createObjectStore("empire")),t<3&&e.createObjectStore("universeSpecificSettings"),t<7&&e.createObjectStore("lifeformDiscoveries",{keyPath:"id"}),t<8&&e.createObjectStore("combatReports.ignored")}))}async function Fe(e){const t=function(e){return e.serverId<=0&&De("Server ID is 0 or less"),`s${e.serverId}-${e.language}`}(e);return await Me(t,((e,t,r,a)=>{t<1&&e.createObjectStore("serverSettings")}))}async function Ie(e){const t=function(e){return e.serverId<=0&&De("Server ID is 0 or less"),`s${e.serverId}-${e.language}.universeHistory`}(e);return await Me(t,((e,t,r,a)=>{t<1&&(e.createObjectStore("_lastUpdate"),e.createObjectStore("alliances",{keyPath:"id"}),e.createObjectStore("allianceTags",{keyPath:["allianceId","date"]}).createIndex("allianceId","allianceId"),e.createObjectStore("allianceNames",{keyPath:["allianceId","date"]}).createIndex("allianceId","allianceId"),e.createObjectStore("allianceMembers",{keyPath:["allianceId","date"]}).createIndex("allianceId","allianceId"),e.createObjectStore("allianceStates",{keyPath:["allianceId","date"]}).createIndex("allianceId","allianceId"),e.createObjectStore("allianceScores",{keyPath:["allianceId","date","type"]}).createIndex("allianceId","allianceId"),e.createObjectStore("players",{keyPath:"id"}),e.createObjectStore("playerNames",{keyPath:["playerId","date"]}).createIndex("playerId","playerId"),e.createObjectStore("playerStates",{keyPath:["playerId","date"]}).createIndex("playerId","playerId"),e.createObjectStore("playerAlliances",{keyPath:["playerId","date"]}).createIndex("playerId","playerId"),e.createObjectStore("playerScores",{keyPath:["playerId","date","type"]}).createIndex("playerId","playerId"),e.createObjectStore("planets",{keyPath:"id"}).createIndex("playerId","playerId"),e.createObjectStore("planetNames",{keyPath:["planetId","date"]}).createIndex("planetId","planetId"),e.createObjectStore("planetStates",{keyPath:["planetId","date"]}).createIndex("planetId","planetId"),e.createObjectStore("planetCoordinates",{keyPath:["planetId","date"]}).createIndex("planetId","planetId"),e.createObjectStore("moons",{keyPath:"id"}).createIndex("planetId","planetId"),e.createObjectStore("moonNames",{keyPath:["moonId","date"]}).createIndex("moonId","moonId"),e.createObjectStore("moonStates",{keyPath:["moonId","date"]}).createIndex("moonId","moonId"))}))}async function Re(){return await Me("ogame-tracker",((e,t,r,a)=>{t<1&&(e.createObjectStore("settings"),e.createObjectStore("accounts",{keyPath:["serverId","serverLanguage","id"]}),e.createObjectStore("servers",{keyPath:["id","language"]})),t<2&&a.objectStore("accounts").createIndex("server",["serverId","serverLanguage"])}))}class Oe{async tryTrackCombatReport(e){const t=e.data,r=await Ae(e.ogameMeta),a=await r.get("combatReports",t.id);if(null!=a)return{success:!0,result:{report:a,isAlreadyTracked:!0,ignored:!1}};const n=Xl.settings.combatTracking.ignoreEspionageFights;if(null!=await r.get("combatReports.ignored",t.id)&&n)return{success:!0,result:{id:e.data.id,ignored:!0}};if(e.data.ogameCombatReport.isEspionageCombat&&n)return de(`ignoring espionage combat with id ${t.id}`),await r.put("combatReports.ignored",t.id,t.id),{success:!0,result:{id:e.data.id,ignored:!0}};let o;try{return o=this.parseCombatReport(t),await r.put("combatReports",o),{success:!0,result:{report:o,isAlreadyTracked:!1,ignored:!1}}}catch(t){return le({error:t,message:e}),{success:!1}}}async tryGetSingleReport(e){const t=await Ae(e.ogameMeta),r=await t.get("combatReports",e.data);if(null!=r)return{success:!0,result:{report:r,isAlreadyTracked:!0,ignored:!1}};const a=Xl.settings.combatTracking.ignoreEspionageFights;return null!=await t.get("combatReports.ignored",e.data)&&a?{success:!0,result:{id:e.data,ignored:!0}}:{success:!1}}parseCombatReport(e){const{id:t,date:r,ogameCombatReport:a}=e;let n=0;a.isExpedition||(a.isAttacker?n=1:a.isDefender&&(n=a.isOwner?-1:0)),n*="attacker"==a.winner?1:0;const o=a.isAttacker&&"attacker"==a.winner||a.isDefender&&"defender"==a.winner?J.won:"none"==a.winner?J.draw:J.lost,i={[ee.metal]:a.loot.metal*n,[ee.crystal]:a.loot.crystal*n,[ee.deuterium]:a.loot.deuterium*n},s={[ee.metal]:a.debris.metal,[ee.crystal]:a.debris.crystal,[ee.deuterium]:a.debris.deuterium},l=a.playerLosses;return{id:t,date:r,coordinates:a.coordinates,result:o,isExpedition:a.isExpedition,loot:i,debrisField:s,lostShips:l}}}function Le(){const e=chrome.runtime.lastError?.message;if(!["Receiving end does not exist.","The message port closed before a response was received."].some((t=>e?.includes(t)??!1)))throw chrome.runtime.lastError}async function $e(e){de("broadcasting message",e),function(e){chrome.runtime.sendMessage(e,Le)}(e),(await chrome.tabs.query({url:"*://*.ogame.gameforge.com/*"})).forEach((t=>{null!=t.id&&chrome.tabs.sendMessage(t.id,e,Le)}))}const Ne=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,_e=function(e){return"string"==typeof e&&Ne.test(e)};for(var Be=[],ze=0;ze<256;++ze)Be.push((ze+256).toString(16).substr(1));function Ue(e,t,r,a){switch(e){case 0:return t&r^~t&a;case 1:case 3:return t^r^a;case 2:return t&r^t&a^r&a}}function je(e,t){return e<<t|e>>>32-t}var He=function(e,t,r){function a(e,t,a,n){if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));for(var t=[],r=0;r<e.length;++r)t.push(e.charCodeAt(r));return t}(e)),"string"==typeof t&&(t=function(e){if(!_e(e))throw TypeError("Invalid UUID");var t,r=new Uint8Array(16);return r[0]=(t=parseInt(e.slice(0,8),16))>>>24,r[1]=t>>>16&255,r[2]=t>>>8&255,r[3]=255&t,r[4]=(t=parseInt(e.slice(9,13),16))>>>8,r[5]=255&t,r[6]=(t=parseInt(e.slice(14,18),16))>>>8,r[7]=255&t,r[8]=(t=parseInt(e.slice(19,23),16))>>>8,r[9]=255&t,r[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,r[11]=t/4294967296&255,r[12]=t>>>24&255,r[13]=t>>>16&255,r[14]=t>>>8&255,r[15]=255&t,r}(t)),16!==t.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var o=new Uint8Array(16+e.length);if(o.set(t),o.set(e,t.length),(o=r(o))[6]=15&o[6]|80,o[8]=63&o[8]|128,a){n=n||0;for(var i=0;i<16;++i)a[n+i]=o[i];return a}return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=(Be[e[t+0]]+Be[e[t+1]]+Be[e[t+2]]+Be[e[t+3]]+"-"+Be[e[t+4]]+Be[e[t+5]]+"-"+Be[e[t+6]]+Be[e[t+7]]+"-"+Be[e[t+8]]+Be[e[t+9]]+"-"+Be[e[t+10]]+Be[e[t+11]]+Be[e[t+12]]+Be[e[t+13]]+Be[e[t+14]]+Be[e[t+15]]).toLowerCase();if(!_e(r))throw TypeError("Stringified UUID is invalid");return r}(o)}try{a.name="v5"}catch(e){}return a.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",a.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",a}(0,0,(function(e){var t=[1518500249,1859775393,2400959708,3395469782],r=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){var a=unescape(encodeURIComponent(e));e=[];for(var n=0;n<a.length;++n)e.push(a.charCodeAt(n))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);for(var o=e.length/4+2,i=Math.ceil(o/16),s=new Array(i),l=0;l<i;++l){for(var c=new Uint32Array(16),d=0;d<16;++d)c[d]=e[64*l+4*d]<<24|e[64*l+4*d+1]<<16|e[64*l+4*d+2]<<8|e[64*l+4*d+3];s[l]=c}s[i-1][14]=8*(e.length-1)/Math.pow(2,32),s[i-1][14]=Math.floor(s[i-1][14]),s[i-1][15]=8*(e.length-1)&4294967295;for(var u=0;u<i;++u){for(var m=new Uint32Array(80),p=0;p<16;++p)m[p]=s[u][p];for(var h=16;h<80;++h)m[h]=je(m[h-3]^m[h-8]^m[h-14]^m[h-16],1);for(var f=r[0],g=r[1],y=r[2],v=r[3],b=r[4],w=0;w<80;++w){var x=Math.floor(w/20),S=je(f,5)+Ue(x,g,y,v)+b+t[x]+m[w]>>>0;b=v,v=y,y=je(g,30)>>>0,g=f,f=S}r[0]=r[0]+f>>>0,r[1]=r[1]+g>>>0,r[2]=r[2]+y>>>0,r[3]=r[3]+v>>>0,r[4]=r[4]+b>>>0}return[r[0]>>24&255,r[0]>>16&255,r[0]>>8&255,255&r[0],r[1]>>24&255,r[1]>>16&255,r[1]>>8&255,255&r[1],r[2]>>24&255,r[2]>>16&255,r[2]>>8&255,255&r[2],r[3]>>24&255,r[3]>>16&255,r[3]>>8&255,255&r[3],r[4]>>24&255,r[4]>>16&255,r[4]>>8&255,255&r[4]]}));const Ke=He,qe="774522d3-7912-4e5c-b55b-e17198620b32",Ge=Ke("service-worker",qe);Ke("message-tracking",qe),Ke("empire-tracking",qe),Ke("universe-account-tracking",qe),Ke("internal",qe);class Ve{async trackManualDebrisFieldReport(e){const t=e.data,r=await Ae(e.ogameMeta);await r.put("debrisFieldReports",t)}async tryTrackDebrisFieldReport(e){const t=e.data,r=await Ae(e.ogameMeta),a=await r.get("debrisFieldReports",t.id);if(null!=a)return{success:!0,result:{report:a,isAlreadyTracked:!0}};let n;try{return n=this.tryParseDebrisFieldReport(t).report,await r.put("debrisFieldReports",n),{success:!0,result:{report:n,isAlreadyTracked:!1}}}catch(t){return le({error:t,message:e}),{success:!1}}}tryParseDebrisFieldReport(e){const t=e.resources.deuterium??void 0,r=16==e.coords.system;return{success:!0,report:{id:e.id,date:e.date,metal:e.resources.metal,crystal:e.resources.crystal,deuterium:t,isExpeditionDebrisField:r}}}}var We;!function(e){e[e.metalMine=1]="metalMine",e[e.crystalMine=2]="crystalMine",e[e.deuteriumSynthesizer=3]="deuteriumSynthesizer",e[e.metalStorage=22]="metalStorage",e[e.crystalStorage=23]="crystalStorage",e[e.deuteriumTank=24]="deuteriumTank",e[e.solarPlant=4]="solarPlant",e[e.fusionReactor=12]="fusionReactor",e[e.roboticsFactory=14]="roboticsFactory",e[e.shipyard=21]="shipyard",e[e.researchLab=31]="researchLab",e[e.allianceDepot=34]="allianceDepot",e[e.missileSilo=44]="missileSilo",e[e.naniteFactory=15]="naniteFactory",e[e.terraformer=33]="terraformer",e[e.spaceDock=36]="spaceDock",e[e.lunarBase=41]="lunarBase",e[e.sensorPhalanx=42]="sensorPhalanx",e[e.jumpGate=43]="jumpGate"}(We||(We={}));class Ye{}new class extends Ye{get type(){return We.allianceDepot}getCost(e){return{metal:1e4*2**e,crystal:2e4*2**e,deuterium:0,energy:0}}};class Xe extends Ye{}new class extends Xe{get type(){return We.crystalMine}getProduction(e,t){const r=this.getProductionBoost(t.planet.position,t.serverSettings);return Math.trunc(20*t.serverSettings.economySpeed*(1+r)*e*1.1**e*t.productionSettings.crystalMine/100)}getProductionBoost(e,t){switch(e){case 1:return t.crystalBoost.pos1;case 2:return t.crystalBoost.pos2;case 3:return t.crystalBoost.pos3}return t.crystalBoost.default}getConsumption(e,t){return{metal:0,crystal:0,deuterium:0,energy:Math.ceil(10*e*1.1**e)}}getCost(e){return{metal:Math.floor(30*1.6**e),crystal:Math.floor(15*1.6**e),deuterium:0,energy:0}}};class Ze extends Ye{}new class extends Ze{get type(){return We.crystalStorage}getStorage(e){return 5e3*Math.floor(2.5*Math.E**(20*e/33))}getDenPercentage(e){return Math.min(.1,.01*e)}getCost(e){return{metal:500*2**e,crystal:250*2**e,deuterium:0,energy:0}}},new class extends Xe{get type(){return We.deuteriumSynthesizer}getProduction(e,t){return Math.trunc(10*e*1.1**e*t.serverSettings.economySpeed*(1.44-.004*t.planet.temperature)*t.productionSettings.deuteriumSynthesizer/100)}getConsumption(e,t){return{metal:0,crystal:0,deuterium:0,energy:Math.ceil(20*e*1.1**e)}}getCost(e){return{metal:Math.floor(150*1.5**e),crystal:Math.floor(50*1.5**e),deuterium:0,energy:0}}},new class extends Ze{get type(){return We.deuteriumTank}getStorage(e){return 5e3*Math.floor(2.5*Math.E**(20*e/33))}getDenPercentage(e){return Math.min(.1,.01*e)}getCost(e){return{metal:500*2**e,crystal:500*2**e,deuterium:0,energy:0}}},new class extends Xe{get type(){return We.fusionReactor}getProduction(e,t){throw new Error("not implemented")}getConsumption(e,t){return{metal:0,crystal:0,deuterium:Math.trunc(10*e*1.1**e*t.productionSettings.fusionReactor/100*t.serverSettings.economySpeed),energy:0}}getCost(e){return{metal:Math.floor(500*1.8**e),crystal:Math.floor(200*1.8**e),deuterium:Math.floor(100*1.8**e),energy:0}}},new class extends Ye{get type(){return We.jumpGate}getCost(e){return{metal:1e6*2**e,crystal:2e6*2**e,deuterium:1e6*2**e,energy:0}}},new class extends Ye{get type(){return We.lunarBase}getCost(e){return{metal:1e4*2**e,crystal:2e4*2**e,deuterium:1e4*2**e,energy:0}}},new class extends Xe{get type(){return We.metalMine}getProduction(e,t){const r=this.getProductionBoost(t.planet.position),a=30*t.serverSettings.economySpeed*(1+r);return Math.trunc(a*e*1.1**e*t.productionSettings.metalMine/100)}getProductionBoost(e){switch(e){case 8:return.35;case 7:case 9:return.23;case 6:case 10:return.17}return 0}getConsumption(e,t){return{metal:0,crystal:0,deuterium:0,energy:Math.ceil(10*e*1.1**e)}}getCost(e){return{metal:Math.floor(40*1.5**e),crystal:Math.floor(10*1.5**e),deuterium:0,energy:0}}},new class extends Ze{get type(){return We.metalStorage}getStorage(e){return 5e3*Math.floor(2.5*Math.E**(20*e/33))}getDenPercentage(e){return Math.min(.1,.01*e)}getCost(e){return{metal:500*2**e,crystal:0,deuterium:0,energy:0}}},new class extends Ye{get type(){return We.missileSilo}getCost(e){return{metal:1e4*2**e,crystal:1e4*2**e,deuterium:500*2**e,energy:0}}},new class extends Ye{get type(){return We.naniteFactory}getCost(e){return{metal:5e5*2**e,crystal:25e4*2**e,deuterium:5e4*2**e,energy:0}}},new class extends Ye{get type(){return We.researchLab}getCost(e){return{metal:100*2**e,crystal:200*2**e,deuterium:100*2**e,energy:0}}},new class extends Ye{get type(){return We.roboticsFactory}getCost(e){return{metal:200*2**e,crystal:60*2**e,deuterium:100*2**e,energy:0}}},new class extends Ye{get type(){return We.sensorPhalanx}getCost(e){return{metal:1e4*2**e,crystal:2e4*2**e,deuterium:1e4*2**e,energy:0}}},new class extends Ye{get type(){return We.shipyard}getCost(e){return{metal:200*2**e,crystal:100*2**e,deuterium:50*2**e,energy:0}}},new class extends Xe{get type(){return We.solarPlant}getProduction(e,t){throw new Error("not implemented")}getConsumption(e,t){return{metal:0,crystal:0,deuterium:0,energy:0}}getCost(e){return{metal:Math.floor(50*1.5**e),crystal:Math.floor(20*1.5**e),deuterium:0,energy:0}}},new class extends Ye{get type(){return We.spaceDock}getCost(e){return{metal:40*4**e,crystal:0,deuterium:10*5**e,energy:10*5**e}}getWreckfield(e,t){return(1-t)*(.01*Math.round(45*e**.08))}},new class extends Ye{get type(){return We.terraformer}getCost(e){return{metal:0,crystal:25e3*2**e,deuterium:5e4*2**e,energy:500*2**e}}};const Qe=(We.metalMine,We.crystalMine,We.deuteriumSynthesizer,We.metalStorage,We.crystalStorage,We.deuteriumTank,We.solarPlant,We.fusionReactor,We.roboticsFactory,We.shipyard,We.researchLab,We.allianceDepot,We.missileSilo,We.naniteFactory,We.terraformer,We.spaceDock,We.lunarBase,We.sensorPhalanx,We.jumpGate,[We.metalMine,We.crystalMine,We.deuteriumSynthesizer,We.metalStorage,We.crystalStorage,We.deuteriumTank,We.solarPlant,We.fusionReactor,We.roboticsFactory,We.shipyard,We.researchLab,We.allianceDepot,We.missileSilo,We.naniteFactory,We.terraformer,We.spaceDock]),Je=(We.metalMine,We.crystalMine,We.deuteriumSynthesizer,We.metalStorage,We.crystalStorage,We.deuteriumTank,We.solarPlant,We.fusionReactor,We.roboticsFactory,We.shipyard,We.researchLab,We.allianceDepot,We.missileSilo,We.naniteFactory,We.terraformer,We.spaceDock,We.metalStorage,We.crystalStorage,We.deuteriumTank,We.roboticsFactory,We.shipyard,We.lunarBase,We.sensorPhalanx,We.jumpGate,[We.metalStorage,We.crystalStorage,We.deuteriumTank,We.roboticsFactory,We.shipyard,We.lunarBase,We.sensorPhalanx,We.jumpGate]);function et(e,t=10){const r=parseInt(e,t);if(isNaN(r))throw new Error(`'${e}' is not a valid integer value`);return r}function tt(e){const t=parseFloat(e);if(isNaN(t))throw new Error(`'${e}' is not a valid integer value`);return t}We.metalMine,We.crystalMine,We.deuteriumSynthesizer,We.metalStorage,We.crystalStorage,We.deuteriumTank,We.solarPlant,We.fusionReactor,We.roboticsFactory,We.shipyard,We.researchLab,We.allianceDepot,We.missileSilo,We.naniteFactory,We.terraformer,We.spaceDock,We.lunarBase,We.sensorPhalanx,We.jumpGate;class rt{}var at;!function(e){e[e.smallCargo=202]="smallCargo",e[e.largeCargo=203]="largeCargo",e[e.lightFighter=204]="lightFighter",e[e.heavyFighter=205]="heavyFighter",e[e.cruiser=206]="cruiser",e[e.battleship=207]="battleship",e[e.colonyShip=208]="colonyShip",e[e.recycler=209]="recycler",e[e.espionageProbe=210]="espionageProbe",e[e.bomber=211]="bomber",e[e.solarSatellite=212]="solarSatellite",e[e.destroyer=213]="destroyer",e[e.deathStar=214]="deathStar",e[e.battlecruiser=215]="battlecruiser",e[e.crawler=217]="crawler",e[e.reaper=218]="reaper",e[e.pathfinder=219]="pathfinder"}(at||(at={}));new class extends rt{get type(){return at.battlecruiser}get cost(){return{metal:3e4,crystal:4e4,deuterium:15e3,energy:0}}baseHull(){return 7e4}baseShield(){return 400}baseDamage(){return 700}baseSpeed(){return 1e4}baseCargoCapacity(){return 750}fuelConsumption(){return 250}},new class extends rt{get type(){return at.battleship}get cost(){return{metal:45e3,crystal:15e3,deuterium:0,energy:0}}baseHull(){return 6e4}baseShield(){return 200}baseDamage(){return 1e3}baseSpeed(){return 1e4}baseCargoCapacity(){return 1500}fuelConsumption(){return 500}},new class extends rt{get type(){return at.bomber}get cost(){return{metal:5e4,crystal:25e3,deuterium:15e3,energy:0}}baseHull(){return 75e3}baseShield(){return 500}baseDamage(){return 1e3}baseSpeed(){return 5e3}baseCargoCapacity(){return 500}fuelConsumption(){return 700}},new class extends rt{get type(){return at.colonyShip}get cost(){return{metal:1e4,crystal:2e4,deuterium:1e4,energy:0}}baseHull(){return 3e4}baseShield(){return 100}baseDamage(){return 50}baseSpeed(){return 2500}baseCargoCapacity(){return 7500}fuelConsumption(){return 1e3}},new class extends rt{get type(){return at.crawler}get cost(){return{metal:2e3,crystal:2e3,deuterium:1e3,energy:0}}baseHull(){return 4e3}baseShield(){return 1}baseDamage(){return 1}baseSpeed(){return 0}baseCargoCapacity(){return 0}fuelConsumption(){return 0}},new class extends rt{get type(){return at.cruiser}get cost(){return{metal:2e4,crystal:7e3,deuterium:2e3,energy:0}}baseHull(){return 27e3}baseShield(){return 50}baseDamage(){return 400}baseSpeed(){return 15e3}baseCargoCapacity(){return 800}fuelConsumption(){return 300}},new class extends rt{get type(){return at.deathStar}get cost(){return{metal:5e6,crystal:4e6,deuterium:1e6,energy:0}}baseHull(){return 9e6}baseShield(){return 5e4}baseDamage(){return 2e5}baseSpeed(){return 100}baseCargoCapacity(){return 1e6}fuelConsumption(){return 1}},new class extends rt{get type(){return at.destroyer}get cost(){return{metal:6e4,crystal:5e4,deuterium:15e3,energy:0}}baseHull(){return 11e4}baseShield(){return 500}baseDamage(){return 2e3}baseSpeed(){return 5e3}baseCargoCapacity(){return 2e3}fuelConsumption(){return 1e3}},new class extends rt{get type(){return at.espionageProbe}get cost(){return{metal:0,crystal:1e3,deuterium:0,energy:0}}baseHull(){return 1e3}baseShield(){return 0}baseDamage(){return 0}baseSpeed(){return 1e8}baseCargoCapacity(){return 0}fuelConsumption(){return 1}},new class extends rt{get type(){return at.heavyFighter}get cost(){return{metal:6e3,crystal:4e3,deuterium:0,energy:0}}baseHull(){return 1e4}baseShield(){return 25}baseDamage(){return 150}baseSpeed(){return 1e4}baseCargoCapacity(){return 100}fuelConsumption(){return 75}},new class extends rt{get type(){return at.largeCargo}get cost(){return{metal:6e3,crystal:6e3,deuterium:0,energy:0}}baseHull(){return 12e3}baseShield(){return 25}baseDamage(){return 5}baseSpeed(){return 7500}baseCargoCapacity(){return 25e3}fuelConsumption(){return 50}},new class extends rt{get type(){return at.lightFighter}get cost(){return{metal:3e3,crystal:1e3,deuterium:0,energy:0}}baseHull(){return 4e3}baseShield(){return 10}baseDamage(){return 50}baseSpeed(){return 12500}baseCargoCapacity(){return 50}fuelConsumption(){return 20}},new class extends rt{get type(){return at.pathfinder}get cost(){return{metal:8e3,crystal:15e3,deuterium:8e3,energy:0}}baseHull(){return 23e3}baseShield(){return 100}baseDamage(){return 200}baseSpeed(){return 12e3}baseCargoCapacity(){return 1e4}fuelConsumption(){return 300}},new class extends rt{get type(){return at.reaper}get cost(){return{metal:85e3,crystal:55e3,deuterium:2e4,energy:0}}baseHull(){return 14e4}baseShield(){return 700}baseDamage(){return 2800}baseSpeed(){return 7e3}baseCargoCapacity(){return 1e4}fuelConsumption(){return 1100}},new class extends rt{get type(){return at.recycler}get cost(){return{metal:1e4,crystal:6e3,deuterium:2e3,energy:0}}baseHull(){return 16e3}baseShield(){return 10}baseDamage(){return 1}baseSpeed(){return 6e3}baseCargoCapacity(){return 2e4}fuelConsumption(){return 900}},new class extends rt{get type(){return at.smallCargo}get cost(){return{metal:2e3,crystal:2e3,deuterium:0,energy:0}}baseHull(){return 4e3}baseShield(){return 10}baseDamage(){return 5}baseSpeed(){return 1e4}baseCargoCapacity(){return 5e3}fuelConsumption(){return 20}},new class extends rt{get type(){return at.solarSatellite}get cost(){return{metal:0,crystal:2e3,deuterium:500,energy:0}}baseHull(){return 2e3}baseShield(){return 1}baseDamage(){return 1}baseSpeed(){return 0}baseCargoCapacity(){return 0}fuelConsumption(){return 0}};const nt=[at.smallCargo,at.largeCargo,at.lightFighter,at.heavyFighter,at.cruiser,at.battleship,at.colonyShip,at.recycler,at.espionageProbe,at.bomber,at.solarSatellite,at.destroyer,at.deathStar,at.battlecruiser,at.crawler,at.reaper,at.pathfinder];var ot;at.solarSatellite,at.crawler,at.smallCargo,at.largeCargo,at.lightFighter,at.heavyFighter,at.cruiser,at.battleship,at.colonyShip,at.recycler,at.espionageProbe,at.bomber,at.destroyer,at.deathStar,at.battlecruiser,at.reaper,at.pathfinder,at.smallCargo,at.largeCargo,at.lightFighter,at.heavyFighter,at.cruiser,at.battleship,at.colonyShip,at.recycler,at.espionageProbe,at.bomber,at.solarSatellite,at.destroyer,at.deathStar,at.battlecruiser,at.crawler,at.reaper,at.pathfinder,at.smallCargo,at.largeCargo,at.lightFighter,at.heavyFighter,at.cruiser,at.battleship,at.colonyShip,at.recycler,at.espionageProbe,at.bomber,at.solarSatellite,at.destroyer,at.deathStar,at.battlecruiser,at.reaper,at.pathfinder,at.lightFighter,at.heavyFighter,at.cruiser,at.battleship,at.battlecruiser,at.bomber,at.destroyer,at.deathStar,at.reaper,at.pathfinder,at.crawler,at.smallCargo,at.largeCargo,at.colonyShip,at.recycler,at.espionageProbe,at.solarSatellite,at.smallCargo,at.largeCargo,at.lightFighter,at.heavyFighter,at.cruiser,at.battleship,at.colonyShip,at.recycler,at.espionageProbe,at.bomber,at.solarSatellite,at.destroyer,at.deathStar,at.battlecruiser,at.crawler,at.reaper,at.pathfinder,function(e){e[e.espionageTechnology=106]="espionageTechnology",e[e.computerTechnology=108]="computerTechnology",e[e.weaponsTechnology=109]="weaponsTechnology",e[e.shieldingTechnology=110]="shieldingTechnology",e[e.armorTechnology=111]="armorTechnology",e[e.energyTechnology=113]="energyTechnology",e[e.hyperspaceTechnology=114]="hyperspaceTechnology",e[e.combustionDrive=115]="combustionDrive",e[e.impulseDrive=117]="impulseDrive",e[e.hyperspaceDrive=118]="hyperspaceDrive",e[e.laserTechnology=120]="laserTechnology",e[e.ionTechnology=121]="ionTechnology",e[e.plasmaTechnology=122]="plasmaTechnology",e[e.intergalacticResearchNetwork=123]="intergalacticResearchNetwork",e[e.astrophysics=124]="astrophysics",e[e.gravitonTechnology=199]="gravitonTechnology"}(ot||(ot={}));class it{}new class extends it{getCost(e){return{metal:500*2**e,crystal:0,deuterium:0,energy:0}}},new class extends it{getCost(e){return{metal:0,crystal:200*2**e,deuterium:300*2**e,energy:0}}},new class extends it{getCost(e){return{metal:100*2**e,crystal:500*2**e,deuterium:100*2**e,energy:0}}},new class extends it{getCost(e){return{metal:100*2**e,crystal:300*2**e,deuterium:0,energy:0}}},new class extends it{getCost(e){return{metal:400*2**e,crystal:100*2**e,deuterium:0,energy:0}}},new class extends it{getCost(e){return{metal:0,crystal:400*2**e,deuterium:200*2**e,energy:0}}},new class extends it{getCost(e){return{metal:0,crystal:2e3*2**e,deuterium:1e3*2**e,energy:0}}},new class extends it{getCost(e){return{metal:200*2**e,crystal:0,deuterium:300*2**e,energy:0}}},new class extends it{getCost(e){return{metal:1e3*2**e,crystal:2e3*2**e,deuterium:300*2**e,energy:0}}},new class extends it{getCost(e){return{metal:5e3*2**e,crystal:1e4*2**e,deuterium:3e3*2**e,energy:0}}},new class extends it{getCost(e){return{metal:100*2**e,crystal:50*2**e,deuterium:0,energy:0}}},new class extends it{getCost(e){return{metal:500*2**e,crystal:150*2**e,deuterium:50*2**e,energy:0}}},new class extends it{getCost(e){return{metal:1e3*2**e,crystal:2e3*2**e,deuterium:500*2**e,energy:0}}},new class extends it{getCost(e){return{metal:12e4*2**e,crystal:2e5*2**e,deuterium:8e4*2**e,energy:0}}},new class extends it{getCost(e){return{metal:Math.floor(4e3*1.75**(e-1)),crystal:Math.floor(8e3*1.75**(e-1)),deuterium:Math.floor(4e3*1.75**(e-1)),energy:0}}},new class extends it{getCost(e){return{metal:0,crystal:0,deuterium:0,energy:1e5*3**e}}};const st=[ot.espionageTechnology,ot.computerTechnology,ot.weaponsTechnology,ot.shieldingTechnology,ot.armorTechnology,ot.energyTechnology,ot.hyperspaceTechnology,ot.combustionDrive,ot.impulseDrive,ot.hyperspaceDrive,ot.laserTechnology,ot.ionTechnology,ot.plasmaTechnology,ot.intergalacticResearchNetwork,ot.astrophysics,ot.gravitonTechnology];var lt;ot.espionageTechnology,ot.computerTechnology,ot.weaponsTechnology,ot.shieldingTechnology,ot.armorTechnology,ot.energyTechnology,ot.hyperspaceTechnology,ot.combustionDrive,ot.impulseDrive,ot.hyperspaceDrive,ot.laserTechnology,ot.ionTechnology,ot.plasmaTechnology,ot.intergalacticResearchNetwork,ot.astrophysics,ot.gravitonTechnology,function(e){e.humans="humans",e.rocktal="rocktal",e.mechas="mechas",e.kaelesh="kaelesh",e.none="none"}(lt||(lt={}));const ct=[lt.humans,lt.rocktal,lt.mechas,lt.kaelesh];var dt;lt.none,lt.humans,lt.rocktal,lt.mechas,lt.kaelesh,function(e){e[e.residentialSector=11101]="residentialSector",e[e.biosphereFarm=11102]="biosphereFarm",e[e.researchCentre=11103]="researchCentre",e[e.academyOfSciences=11104]="academyOfSciences",e[e.neuroCalibrationCentre=11105]="neuroCalibrationCentre",e[e.highEnergySmelting=11106]="highEnergySmelting",e[e.foodSilo=11107]="foodSilo",e[e.fusionPoweredProduction=11108]="fusionPoweredProduction",e[e.skyscraper=11109]="skyscraper",e[e.biotechLab=11110]="biotechLab",e[e.metropolis=11111]="metropolis",e[e.planetaryShield=11112]="planetaryShield",e[e.meditationEnclave=12101]="meditationEnclave",e[e.crystalFarm=12102]="crystalFarm",e[e.runeTechnologium=12103]="runeTechnologium",e[e.runeForge=12104]="runeForge",e[e.oriktorium=12105]="oriktorium",e[e.magmaForge=12106]="magmaForge",e[e.disruptionChamber=12107]="disruptionChamber",e[e.megalith=12108]="megalith",e[e.crystalRefinery=12109]="crystalRefinery",e[e.deuteriumSynthesiser=12110]="deuteriumSynthesiser",e[e.mineralResearchCentre=12111]="mineralResearchCentre",e[e.advancedRecyclingPlant=12112]="advancedRecyclingPlant",e[e.assemblyLine=13101]="assemblyLine",e[e.fusionCellFactory=13102]="fusionCellFactory",e[e.roboticsResearchCentre=13103]="roboticsResearchCentre",e[e.updateNetwork=13104]="updateNetwork",e[e.quantumComputerCentre=13105]="quantumComputerCentre",e[e.automatisedAssemblyCentre=13106]="automatisedAssemblyCentre",e[e.highPerformanceTransformer=13107]="highPerformanceTransformer",e[e.microchipAssemblyLine=13108]="microchipAssemblyLine",e[e.productionAssemblyHall=13109]="productionAssemblyHall",e[e.highPerformanceSynthesiser=13110]="highPerformanceSynthesiser",e[e.chipMassProduction=13111]="chipMassProduction",e[e.nanoRepairBots=13112]="nanoRepairBots",e[e.sanctuary=14101]="sanctuary",e[e.antimatterCondenser=14102]="antimatterCondenser",e[e.vortexChamber=14103]="vortexChamber",e[e.hallsOfRealisation=14104]="hallsOfRealisation",e[e.forumOfTranscendence=14105]="forumOfTranscendence",e[e.antimatterConvector=14106]="antimatterConvector",e[e.cloningLaboratory=14107]="cloningLaboratory",e[e.chrysalisAccelerator=14108]="chrysalisAccelerator",e[e.bioModifier=14109]="bioModifier",e[e.psionicModulator=14110]="psionicModulator",e[e.shipManufacturingHall=14111]="shipManufacturingHall",e[e.supraRefractor=14112]="supraRefractor"}(dt||(dt={}));const ut=[dt.residentialSector,dt.biosphereFarm,dt.researchCentre,dt.academyOfSciences,dt.neuroCalibrationCentre,dt.highEnergySmelting,dt.foodSilo,dt.fusionPoweredProduction,dt.skyscraper,dt.biotechLab,dt.metropolis,dt.planetaryShield,dt.meditationEnclave,dt.crystalFarm,dt.runeTechnologium,dt.runeForge,dt.oriktorium,dt.magmaForge,dt.disruptionChamber,dt.megalith,dt.crystalRefinery,dt.deuteriumSynthesiser,dt.mineralResearchCentre,dt.advancedRecyclingPlant,dt.assemblyLine,dt.fusionCellFactory,dt.roboticsResearchCentre,dt.updateNetwork,dt.quantumComputerCentre,dt.automatisedAssemblyCentre,dt.highPerformanceTransformer,dt.microchipAssemblyLine,dt.productionAssemblyHall,dt.highPerformanceSynthesiser,dt.chipMassProduction,dt.nanoRepairBots,dt.sanctuary,dt.antimatterCondenser,dt.vortexChamber,dt.hallsOfRealisation,dt.forumOfTranscendence,dt.antimatterConvector,dt.cloningLaboratory,dt.chrysalisAccelerator,dt.bioModifier,dt.psionicModulator,dt.shipManufacturingHall,dt.supraRefractor];var mt;lt.none,lt.humans,dt.residentialSector,dt.biosphereFarm,dt.researchCentre,dt.academyOfSciences,dt.neuroCalibrationCentre,dt.highEnergySmelting,dt.foodSilo,dt.fusionPoweredProduction,dt.skyscraper,dt.biotechLab,dt.metropolis,dt.planetaryShield,lt.rocktal,dt.meditationEnclave,dt.crystalFarm,dt.runeTechnologium,dt.runeForge,dt.oriktorium,dt.magmaForge,dt.disruptionChamber,dt.megalith,dt.crystalRefinery,dt.deuteriumSynthesiser,dt.mineralResearchCentre,dt.advancedRecyclingPlant,lt.mechas,dt.assemblyLine,dt.fusionCellFactory,dt.roboticsResearchCentre,dt.updateNetwork,dt.quantumComputerCentre,dt.automatisedAssemblyCentre,dt.highPerformanceTransformer,dt.microchipAssemblyLine,dt.productionAssemblyHall,dt.highPerformanceSynthesiser,dt.chipMassProduction,dt.nanoRepairBots,lt.kaelesh,dt.sanctuary,dt.antimatterCondenser,dt.vortexChamber,dt.hallsOfRealisation,dt.forumOfTranscendence,dt.antimatterConvector,dt.cloningLaboratory,dt.chrysalisAccelerator,dt.bioModifier,dt.psionicModulator,dt.shipManufacturingHall,dt.supraRefractor,function(e){e[e.intergalacticEnvoys=11201]="intergalacticEnvoys",e[e.highPerformanceExtractors=11202]="highPerformanceExtractors",e[e.fusionDrives=11203]="fusionDrives",e[e.stealthFieldGenerator=11204]="stealthFieldGenerator",e[e.orbitalDen=11205]="orbitalDen",e[e.researchAI=11206]="researchAI",e[e.highPerformanceTerraformer=11207]="highPerformanceTerraformer",e[e.enhancedProductionTechnologies=11208]="enhancedProductionTechnologies",e[e.lightFighterMkII=11209]="lightFighterMkII",e[e.cruiserMkII=11210]="cruiserMkII",e[e.improvedLabTechnology=11211]="improvedLabTechnology",e[e.plasmaTerraformer=11212]="plasmaTerraformer",e[e.lowTemperatureDrives=11213]="lowTemperatureDrives",e[e.bomberMkII=11214]="bomberMkII",e[e.destroyerMkII=11215]="destroyerMkII",e[e.battlecruiserMkII=11216]="battlecruiserMkII",e[e.robotAssistants=11217]="robotAssistants",e[e.supercomputer=11218]="supercomputer",e[e.volcanicBatteries=12201]="volcanicBatteries",e[e.acousticScanning=12202]="acousticScanning",e[e.highEnergyPumpSystems=12203]="highEnergyPumpSystems",e[e.cargoHoldExpansion_CivilianShips=12204]="cargoHoldExpansion_CivilianShips",e[e.magmaPoweredProduction=12205]="magmaPoweredProduction",e[e.geothermalPowerPlants=12206]="geothermalPowerPlants",e[e.depthSounding=12207]="depthSounding",e[e.ionCrystalEnhancement_heavyFighter=12208]="ionCrystalEnhancement_heavyFighter",e[e.improvedStellarator=12209]="improvedStellarator",e[e.hardenedDiamondDrillHeads=12210]="hardenedDiamondDrillHeads",e[e.seismicMiningTechnology=12211]="seismicMiningTechnology",e[e.magmaPoweredPumpSystems=12212]="magmaPoweredPumpSystems",e[e.ionCrystalModules=12213]="ionCrystalModules",e[e.optimisedSiloConstructionMethod=12214]="optimisedSiloConstructionMethod",e[e.diamondEnergyTransmitter=12215]="diamondEnergyTransmitter",e[e.obsidianShieldReinforcement=12216]="obsidianShieldReinforcement",e[e.runeShields=12217]="runeShields",e[e.rocktalCollectorEnhancement=12218]="rocktalCollectorEnhancement",e[e.catalyserTechnology=13201]="catalyserTechnology",e[e.plasmaDrive=13202]="plasmaDrive",e[e.efficiencyModule=13203]="efficiencyModule",e[e.depotAI=13204]="depotAI",e[e.generalOverhaul_lightFighter=13205]="generalOverhaul_lightFighter",e[e.automatedTransportLines=13206]="automatedTransportLines",e[e.improvedDroneAI=13207]="improvedDroneAI",e[e.experimentalRecyclingTechnology=13208]="experimentalRecyclingTechnology",e[e.generalOverhaul_cruiser=13209]="generalOverhaul_cruiser",e[e.slingshotAutopilot=13210]="slingshotAutopilot",e[e.highTemperatureSuperconductors=13211]="highTemperatureSuperconductors",e[e.generalOverhaul_battleship=13212]="generalOverhaul_battleship",e[e.artificialSwarmIntelligence=13213]="artificialSwarmIntelligence",e[e.generalOverhaul_battlecruiser=13214]="generalOverhaul_battlecruiser",e[e.generalOverhaul_bomber=13215]="generalOverhaul_bomber",e[e.generalOverhaul_destroyer=13216]="generalOverhaul_destroyer",e[e.experimentalWeaponsTechnology=13217]="experimentalWeaponsTechnology",e[e.mechanGeneralEnhancement=13218]="mechanGeneralEnhancement",e[e.heatRecovery=14201]="heatRecovery",e[e.sulphideProcess=14202]="sulphideProcess",e[e.psionicNetwork=14203]="psionicNetwork",e[e.telekineticTractorBeam=14204]="telekineticTractorBeam",e[e.enhancedSensorTechnology=14205]="enhancedSensorTechnology",e[e.neuromodalCompressor=14206]="neuromodalCompressor",e[e.neuroInterface=14207]="neuroInterface",e[e.interplanetaryAnalysisNetwork=14208]="interplanetaryAnalysisNetwork",e[e.overclocking_heavyFighter=14209]="overclocking_heavyFighter",e[e.telekineticDrive=14210]="telekineticDrive",e[e.sixthSense=14211]="sixthSense",e[e.psychoharmoniser=14212]="psychoharmoniser",e[e.efficientSwarmIntelligence=14213]="efficientSwarmIntelligence",e[e.overclocking_largeCargo=14214]="overclocking_largeCargo",e[e.gravitationSensors=14215]="gravitationSensors",e[e.overclocking_battleship=14216]="overclocking_battleship",e[e.psionicShieldMatrix=14217]="psionicShieldMatrix",e[e.kaeleshDiscovererEnhancement=14218]="kaeleshDiscovererEnhancement"}(mt||(mt={}));const pt=[mt.intergalacticEnvoys,mt.highPerformanceExtractors,mt.fusionDrives,mt.stealthFieldGenerator,mt.orbitalDen,mt.researchAI,mt.highPerformanceTerraformer,mt.enhancedProductionTechnologies,mt.lightFighterMkII,mt.cruiserMkII,mt.improvedLabTechnology,mt.plasmaTerraformer,mt.lowTemperatureDrives,mt.bomberMkII,mt.destroyerMkII,mt.battlecruiserMkII,mt.robotAssistants,mt.supercomputer,mt.volcanicBatteries,mt.acousticScanning,mt.highEnergyPumpSystems,mt.cargoHoldExpansion_CivilianShips,mt.magmaPoweredProduction,mt.geothermalPowerPlants,mt.depthSounding,mt.ionCrystalEnhancement_heavyFighter,mt.improvedStellarator,mt.hardenedDiamondDrillHeads,mt.seismicMiningTechnology,mt.magmaPoweredPumpSystems,mt.ionCrystalModules,mt.optimisedSiloConstructionMethod,mt.diamondEnergyTransmitter,mt.obsidianShieldReinforcement,mt.runeShields,mt.rocktalCollectorEnhancement,mt.catalyserTechnology,mt.plasmaDrive,mt.efficiencyModule,mt.depotAI,mt.generalOverhaul_lightFighter,mt.automatedTransportLines,mt.improvedDroneAI,mt.experimentalRecyclingTechnology,mt.generalOverhaul_cruiser,mt.slingshotAutopilot,mt.highTemperatureSuperconductors,mt.generalOverhaul_battleship,mt.artificialSwarmIntelligence,mt.generalOverhaul_battlecruiser,mt.generalOverhaul_bomber,mt.generalOverhaul_destroyer,mt.experimentalWeaponsTechnology,mt.mechanGeneralEnhancement,mt.heatRecovery,mt.sulphideProcess,mt.psionicNetwork,mt.telekineticTractorBeam,mt.enhancedSensorTechnology,mt.neuromodalCompressor,mt.neuroInterface,mt.interplanetaryAnalysisNetwork,mt.overclocking_heavyFighter,mt.telekineticDrive,mt.sixthSense,mt.psychoharmoniser,mt.efficientSwarmIntelligence,mt.overclocking_largeCargo,mt.gravitationSensors,mt.overclocking_battleship,mt.psionicShieldMatrix,mt.kaeleshDiscovererEnhancement];function ht(e,t){const r={};return e.forEach((e=>r[e]=t instanceof Function?t(e):t)),r}mt.intergalacticEnvoys,mt.highPerformanceExtractors,mt.fusionDrives,mt.stealthFieldGenerator,mt.orbitalDen,mt.researchAI,mt.highPerformanceTerraformer,mt.enhancedProductionTechnologies,mt.lightFighterMkII,mt.cruiserMkII,mt.improvedLabTechnology,mt.plasmaTerraformer,mt.lowTemperatureDrives,mt.bomberMkII,mt.destroyerMkII,mt.battlecruiserMkII,mt.robotAssistants,mt.supercomputer,mt.volcanicBatteries,mt.acousticScanning,mt.highEnergyPumpSystems,mt.cargoHoldExpansion_CivilianShips,mt.magmaPoweredProduction,mt.geothermalPowerPlants,mt.depthSounding,mt.ionCrystalEnhancement_heavyFighter,mt.improvedStellarator,mt.hardenedDiamondDrillHeads,mt.seismicMiningTechnology,mt.magmaPoweredPumpSystems,mt.ionCrystalModules,mt.optimisedSiloConstructionMethod,mt.diamondEnergyTransmitter,mt.obsidianShieldReinforcement,mt.runeShields,mt.rocktalCollectorEnhancement,mt.catalyserTechnology,mt.plasmaDrive,mt.efficiencyModule,mt.depotAI,mt.generalOverhaul_lightFighter,mt.automatedTransportLines,mt.improvedDroneAI,mt.experimentalRecyclingTechnology,mt.generalOverhaul_cruiser,mt.slingshotAutopilot,mt.highTemperatureSuperconductors,mt.generalOverhaul_battleship,mt.artificialSwarmIntelligence,mt.generalOverhaul_battlecruiser,mt.generalOverhaul_bomber,mt.generalOverhaul_destroyer,mt.experimentalWeaponsTechnology,mt.mechanGeneralEnhancement,mt.heatRecovery,mt.sulphideProcess,mt.psionicNetwork,mt.telekineticTractorBeam,mt.enhancedSensorTechnology,mt.neuromodalCompressor,mt.neuroInterface,mt.interplanetaryAnalysisNetwork,mt.overclocking_heavyFighter,mt.telekineticDrive,mt.sixthSense,mt.psychoharmoniser,mt.efficientSwarmIntelligence,mt.overclocking_largeCargo,mt.gravitationSensors,mt.overclocking_battleship,mt.psionicShieldMatrix,mt.kaeleshDiscovererEnhancement,lt.none,lt.humans,mt.intergalacticEnvoys,mt.highPerformanceExtractors,mt.fusionDrives,mt.stealthFieldGenerator,mt.orbitalDen,mt.researchAI,mt.highPerformanceTerraformer,mt.enhancedProductionTechnologies,mt.lightFighterMkII,mt.cruiserMkII,mt.improvedLabTechnology,mt.plasmaTerraformer,mt.lowTemperatureDrives,mt.bomberMkII,mt.destroyerMkII,mt.battlecruiserMkII,mt.robotAssistants,mt.supercomputer,lt.rocktal,mt.volcanicBatteries,mt.acousticScanning,mt.highEnergyPumpSystems,mt.cargoHoldExpansion_CivilianShips,mt.magmaPoweredProduction,mt.geothermalPowerPlants,mt.depthSounding,mt.ionCrystalEnhancement_heavyFighter,mt.improvedStellarator,mt.hardenedDiamondDrillHeads,mt.seismicMiningTechnology,mt.magmaPoweredPumpSystems,mt.ionCrystalModules,mt.optimisedSiloConstructionMethod,mt.diamondEnergyTransmitter,mt.obsidianShieldReinforcement,mt.runeShields,mt.rocktalCollectorEnhancement,lt.mechas,mt.catalyserTechnology,mt.plasmaDrive,mt.efficiencyModule,mt.depotAI,mt.generalOverhaul_lightFighter,mt.automatedTransportLines,mt.improvedDroneAI,mt.experimentalRecyclingTechnology,mt.generalOverhaul_cruiser,mt.slingshotAutopilot,mt.highTemperatureSuperconductors,mt.generalOverhaul_battleship,mt.artificialSwarmIntelligence,mt.generalOverhaul_battlecruiser,mt.generalOverhaul_bomber,mt.generalOverhaul_destroyer,mt.experimentalWeaponsTechnology,mt.mechanGeneralEnhancement,lt.kaelesh,mt.heatRecovery,mt.sulphideProcess,mt.psionicNetwork,mt.telekineticTractorBeam,mt.enhancedSensorTechnology,mt.neuromodalCompressor,mt.neuroInterface,mt.interplanetaryAnalysisNetwork,mt.overclocking_heavyFighter,mt.telekineticDrive,mt.sixthSense,mt.psychoharmoniser,mt.efficientSwarmIntelligence,mt.overclocking_largeCargo,mt.gravitationSensors,mt.overclocking_battleship,mt.psionicShieldMatrix,mt.kaeleshDiscovererEnhancement;class ft{async updateOfficers(e,t){const r=await Ae(e);await r.put("empire",t,"officers")}async updateAlliance(e,t){const r=await Ae(e);await r.put("empire",t,"allianceClass")}async updateActiveItems(e,t){const r=await Ae(e),a=`${t.isMoon?"moon":"planet"}.${t.planetId}.activeItems`;await r.put("empire",t.data,a)}async updateBuildingLevels(e,t){const r=(await Ae(e)).transaction("empire","readwrite"),a=r.objectStore("empire");if(t.isMoon){const e=`moon.${t.planetId}.buildings`,r=await a.get(e),n={...ht(Je,0),...r};Object.keys(t.data).map((e=>et(e,10))).forEach((e=>n[e]=t.data[e]??n[e]??0)),await a.put(n,e)}else{const e=`planet.${t.planetId}.buildings`,r=await a.get(e),n={...ht(Qe,0),...r};Object.keys(t.data).map((e=>et(e,10))).forEach((e=>n[e]=t.data[e]??n[e]??0)),await a.put(n,e)}await r.done}async updateBasicPlanets(e,t){const r=(await Ae(e)).transaction("empire","readwrite"),a=r.objectStore("empire"),n=t.map((e=>e.id));await a.put(n,"planetOrder");for(const e of t)e.isMoon?await a.put(e,`moon.${e.id}`):await a.put(e,`planet.${e.id}`);const o=(await a.getAllKeys()).filter((e=>e.startsWith("moon.")||e.startsWith("planet."))).filter((e=>{const r=et(e.match(/^(planet|moon)\.(?<id>\d+)(\.|$)/)?.groups?.id??De("no match"),10);return!t.some((e=>e.id==r))}));for(const e of o)await a.delete(e);await r.done}async updatePlanetDefenses(e,t){const r=await Ae(e),a=`${t.isMoon?"moon":"planet"}.${t.planetId}.defenses`,n=t.data;await r.put("empire",n,a)}async updatePlanetMissiles(e,t){if(t.isMoon)return;const r=await Ae(e),a=`planet.${t.planetId}.missiles`,n=t.data;await r.put("empire",n,a)}async updatePlanetShips(e,t){const r=(await Ae(e)).transaction("empire","readwrite"),a=r.objectStore("empire"),n=`${t.isMoon?"moon":"planet"}.${t.planetId}.ships`,o=await a.get(n),i={...ht(nt,0),...o};Object.keys(t.data).map((e=>et(e,10))).forEach((e=>i[e]=t.data[e]??i[e]??0)),await a.put(i,n),await r.done}async updatePlayerClass(e,t){const r=await Ae(e);await r.put("empire",t,"playerClass")}async updateResearchLevels(e,t){const r=(await Ae(e)).transaction("empire","readwrite"),a=r.objectStore("empire"),n=await a.get("research"),o={...ht(st,0),...n};Object.keys(t).map((e=>et(e,10))).forEach((e=>o[e]=t[e]??o[e]??0)),await a.put(o,"research"),await r.done}async updateProductionSettings(e,t){if(t.isMoon)return;const r=await Ae(e),a=`planet.${t.planetId}.productionSettings`;await r.put("empire",t.data,a)}async updateSelectedLifeform(e,t){if(t.isMoon)return;const r=await Ae(e);await r.put("empire",t.data,`planet.${t.planetId}.lifeform`)}async updateLifeformExperience(e,t){const r=(await Ae(e)).transaction("empire","readwrite"),a=r.objectStore("empire"),n=await a.get("lifeformExperience"),o={...ht(ct,0),...n,...t};await a.put(o,"lifeformExperience"),await r.done}async updatePlanetLifeformBuildings(e,t){if(t.isMoon)return;const r=(await Ae(e)).transaction("empire","readwrite"),a=r.objectStore("empire"),n=`planet.${t.planetId}.lifeformBuildings`,o=await a.get(n),i={...ht(ut,0),...o};Object.keys(t.data).map((e=>et(e,10))).forEach((e=>i[e]=t.data[e]??i[e]??0)),await a.put(i,n),await r.done}async updatePlanetActiveLifeformTechnologies(e,t){if(t.isMoon)return;await this.updatePlanetLifeformTechnologies(e,t);const r=await Ae(e),a=Object.keys(t.data).map((e=>et(e,10)));await r.put("empire",a,`planet.${t.planetId}.activeLifeformTechnologies`)}async updatePlanetLifeformTechnologies(e,t){if(t.isMoon)return;const r=(await Ae(e)).transaction("empire","readwrite"),a=r.objectStore("empire"),n=`planet.${t.planetId}.lifeformTechnologies`,o=await a.get(n),i={...ht(pt,0),...o};Object.keys(t.data).map((e=>et(e,10))).forEach((e=>i[e]=t.data[e]??i[e]??0)),await a.put(i,n),await r.done}async updateFleets(e,t){const r=(await Ae(e)).transaction("empire","readwrite"),a=r.objectStore("empire");await a.put(t,"fleets"),await r.done}}const gt=[at.lightFighter,at.heavyFighter,at.cruiser,at.battleship,at.bomber,at.battlecruiser,at.destroyer,at.reaper,at.pathfinder,at.smallCargo,at.largeCargo,at.espionageProbe];var yt,vt,bt,wt,xt,St,kt,Ct,Tt,Pt,Dt;!function(e){e.small="small",e.medium="medium",e.large="large"}(yt||(yt={})),yt.small,yt.medium,yt.large,function(e){e.nothing="nothing",e.resources="resources",e.fleet="fleet",e.delay="delay",e.early="early",e.darkMatter="darkMatter",e.pirates="pirates",e.aliens="aliens",e.combat="combat",e.item="item",e.trader="trader",e.lostFleet="lostFleet"}(vt||(vt={})),vt.nothing,vt.resources,vt.fleet,vt.delay,vt.early,vt.darkMatter,vt.pirates,vt.aliens,vt.combat,vt.item,vt.trader,vt.lostFleet,function(e){e.none="none",e.low="low",e.medium="medium",e.high="high"}(bt||(bt={})),bt.none,bt.low,bt.medium,bt.high,function(e){e.resources="ressources",e.nothing="nothing",e.fleet="shipwrecks",e.combat="combat",e.item="items",e.delayOrEarly="navigation",e.lostFleet="fleetLost",e.darkMatter="darkmatter",e.trader="trader"}(wt||(wt={})),function(e){e[e.none=1]="none",e[e.low=2]="low",e[e.medium=3]="medium",e[e.high=4]="high"}(xt||(xt={})),function(e){e[e.small=2]="small",e[e.medium=1]="medium",e[e.large=0]="large"}(St||(St={}));class Et{async tryTrackExpedition(e){const t=e.data,r=await Ae(e.ogameMeta),a=await r.get("expeditions",t.id);if(null!=a)return{success:!0,result:{expedition:a,isAlreadyTracked:!0}};let n;try{return n=this.#e(t),await r.put("expeditions",n),{success:!0,result:{expedition:n,isAlreadyTracked:!1}}}catch(t){return ce({error:t,message:e}),{success:!1}}}#e(e){const t={[wt.combat]:()=>this.#t(e),[wt.darkMatter]:()=>this.#r(e),[wt.delayOrEarly]:()=>this.#a(e),[wt.fleet]:()=>this.#n(e),[wt.item]:()=>this.#o(e),[wt.lostFleet]:()=>this.#i(e),[wt.nothing]:()=>this.#s(e),[wt.resources]:()=>this.#l(e),[wt.trader]:()=>this.#c(e)}[e.type]();null==t&&De("Unknown expedition type");const r=this.#d(e);return null!=r&&(t.depletion=r),t}#d(e){if(null!=e.depletion)return{[xt.none]:bt.none,[xt.low]:bt.low,[xt.medium]:bt.medium,[xt.high]:bt.high}[e.depletion]}#s(e){return e.type!=wt.nothing&&De("unexpected raw expedition type"),{id:e.id,date:e.date,type:vt.nothing}}#i(e){return e.type!=wt.lostFleet&&De("unexpected raw expedition type"),{id:e.id,date:e.date,type:vt.lostFleet}}#t(e){e.type!=wt.combat&&De("unexpected raw expedition type");const t=this.#u(e.size)??De("missing expedition combat size");return{id:e.id,date:e.date,size:t,type:vt.combat}}#c(e){return e.type!=wt.trader&&De("unexpected raw expedition type"),{id:e.id,date:e.date,type:vt.trader}}#a(e){e.type!=wt.delayOrEarly&&De("unexpected raw expedition type");const t=this.#u(e.size)??De("missing expedition navigation event size"),r=e.navigationType??De("missing raw navigation event type");return{id:e.id,date:e.date,size:t,type:"delay"==r?vt.delay:vt.early}}#o(e){return e.type!=wt.item&&De("unexpected raw expedition type"),{type:vt.item,id:e.id,date:e.date,itemHash:e.item??De("missing item hash")}}#n(e){e.type!=wt.fleet&&De("unexpected raw expedition type");const t=this.#u(e.size)??De("missing ship find size"),r={};return gt.forEach((t=>{const a=e.ships?.[t];null!=a&&a>0&&(r[t]=a)})),0==Object.keys(r).length&&ce("found ships but there are no ship amounts"),{id:e.id,date:e.date,size:t,fleet:r,type:vt.fleet}}#r(e){e.type!=wt.darkMatter&&De("unexpected raw expedition type");const t=this.#u(e.size)??De("missing dark matter find size"),r=e.darkMatter??De("missing dark matter amount");return{id:e.id,date:e.date,darkMatter:r,size:t,type:vt.darkMatter}}#l(e){e.type!=wt.resources&&De("unexpected raw expedition type");const t=this.#u(e.size)??De("missing resource find size"),r={[ee.metal]:e.resources?.metal??0,[ee.crystal]:e.resources?.crystal??0,[ee.deuterium]:e.resources?.deuterium??0};return r.metal+r.crystal+r.deuterium==0&&ce("found resources but resource amounts are 0"),{type:vt.resources,id:e.id,date:e.date,resources:r,size:t}}#u(e){if(null!=e)return{[St.small]:yt.small,[St.medium]:yt.medium,[St.large]:yt.large}[e]}}!function(e){e.nothing="nothing",e.lostShip="lostShip",e.newLifeformFound="newLifeformFound",e.knownLifeformFound="knownLifeformFound",e.artifacts="artifacts"}(kt||(kt={})),kt.nothing,kt.lostShip,kt.newLifeformFound,kt.knownLifeformFound,kt.artifacts,function(e){e.storageFull="full",e.small="normal",e.medium="big",e.large="huge"}(Ct||(Ct={})),Ct.small,Ct.medium,Ct.large,Ct.storageFull,function(e){e.none="none",e.artifacts="artifacts",e.lifeformExperience="lifeform-xp",e.shipLost="ship-lost",e.lifeformFound="lifeform-found"}(Tt||(Tt={})),function(e){e.small="normal",e.medium="big",e.large="huge",e.fullStorage="full"}(Pt||(Pt={})),function(e){e[e.humans=1]="humans",e[e.rocktal=2]="rocktal",e[e.mechas=3]="mechas",e[e.kaelesh=4]="kaelesh"}(Dt||(Dt={}));class Mt{async tryTrackExpedition(e){const t=e.data,r=await Ae(e.ogameMeta),a=await r.get("lifeformDiscoveries",t.id);if(null!=a)return{success:!0,result:{lifeformDiscovery:a,isAlreadyTracked:!0}};let n;try{return n=this.#m(t),await r.put("lifeformDiscoveries",n),{success:!0,result:{lifeformDiscovery:n,isAlreadyTracked:!1}}}catch(t){return ce({error:t,message:e}),{success:!1}}}#m(e){const t={[Tt.none]:()=>this.#p(e),[Tt.artifacts]:()=>this.#h(e),[Tt.lifeformExperience]:()=>this.#f(e),[Tt.lifeformFound]:()=>this.#g(e),[Tt.shipLost]:()=>this.#y(e)}[e.type]();return null==t&&De("Unknown lifeform discovery type"),t}#p(e){return e.type!=Tt.none&&De("unexpected lifeform discovery type"),{id:e.id,date:e.date,type:kt.nothing}}#h(e){e.type!=Tt.artifacts&&De("unexpected lifeform discovery type");const t=e.artifactsFound??De("missing artifacts amount"),r=e.artifactsSize??De("missing artifact find size"),a={[Pt.small]:Ct.small,[Pt.medium]:Ct.medium,[Pt.large]:Ct.large,[Pt.fullStorage]:Ct.storageFull}[r];return{id:e.id,date:e.date,type:kt.artifacts,artifacts:t,size:a}}#y(e){return e.type!=Tt.shipLost&&De("unexpected lifeform discovery type"),{id:e.id,date:e.date,type:kt.lostShip}}#f(e){e.type!=Tt.lifeformExperience&&De("unexpected lifeform discovery type");const t=e.lifeform??De("missing lifeform"),r=this.#v(t),a=e.lifeformExperience??De("missing found experience");return{id:e.id,date:e.date,type:kt.knownLifeformFound,lifeform:r,experience:a}}#g(e){e.type!=Tt.lifeformFound&&De("unexpected lifeform discovery type");const t=e.lifeform??De("missing lifeform"),r=this.#v(t);return{id:e.id,date:e.date,type:kt.newLifeformFound,lifeform:r}}#v(e){return{[Dt.humans]:lt.humans,[Dt.rocktal]:lt.rocktal,[Dt.mechas]:lt.mechas,[Dt.kaelesh]:lt.kaelesh}[e]??De("invalid lifeform type")}}var At=r(932);const Ft={name:{fromKey:"name",toKey:"name",conversion:(e,t)=>e??`${t.language.toUpperCase()} ${t.number}`},number:{fromKey:"number",toKey:"number",type:String},language:{fromKey:"language",toKey:"language",type:String},timezone:{fromKey:"timezone",toKey:"timezone",type:String},timezoneOffset:{fromKey:"timezoneOffset",toKey:"timezoneOffset",type:String},domain:{fromKey:"domain",toKey:"domain",type:String},version:{fromKey:"version",toKey:"version",type:String},speed:{fromKey:"speed",toKey:"speed",type:Number},speedFleetPeaceful:{fromKey:"speedFleetPeaceful",toKey:"speedFleetPeaceful",type:Number},speedFleetWar:{fromKey:"speedFleetWar",toKey:"speedFleetWar",type:Number},speedFleetHolding:{fromKey:"speedFleetHolding",toKey:"speedFleetHolding",type:Number},galaxies:{fromKey:"galaxies",toKey:"galaxies",type:Number},systems:{fromKey:"systems",toKey:"systems",type:Number},acs:{fromKey:"acs",toKey:"acs",type:Boolean},rapidFire:{fromKey:"rapidFire",toKey:"rapidFire",type:Boolean},defToTF:{fromKey:"defToTF",toKey:"defToTF",type:Boolean},debrisFactor:{fromKey:"debrisFactor",toKey:"debrisFactor",type:Number},debrisFactorDef:{fromKey:"debrisFactorDef",toKey:"debrisFactorDef",type:Number},repairFactor:{fromKey:"repairFactor",toKey:"repairFactor",type:Number},newbieProtectionLimit:{fromKey:"newbieProtectionLimit",toKey:"newbieProtectionLimit",type:Number},newbieProtectionHigh:{fromKey:"newbieProtectionHigh",toKey:"newbieProtectionHigh",type:Number},topScore:{fromKey:"topScore",toKey:"topScore",type:Number},bonusFields:{fromKey:"bonusFields",toKey:"bonusFields",type:Number},donutGalaxy:{fromKey:"donutGalaxy",toKey:"donutGalaxy",type:Boolean},donutSystem:{fromKey:"donutSystem",toKey:"donutSystem",type:Boolean},wfEnabled:{fromKey:"wfEnabled",toKey:"wfEnabled",type:Boolean},wfMinimumRessLost:{fromKey:"wfMinimumRessLost",toKey:"wfMinimumRessLost",type:Number},wfMinimumLossPercentage:{fromKey:"wfMinimumLossPercentage",toKey:"wfMinimumLossPercentage",type:Number},wfBasicPercentageRepairable:{fromKey:"wfBasicPercentageRepairable",toKey:"wfBasicPercentageRepairable",type:Number},globalDeuteriumSaveFactor:{fromKey:"globalDeuteriumSaveFactor",toKey:"globalDeuteriumSaveFactor",type:Number},bashlimit:{fromKey:"bashlimit",toKey:"bashlimit",type:Number},probeCargo:{fromKey:"probeCargo",toKey:"probeCargo",type:Number},researchDurationDivisor:{fromKey:"researchDurationDivisor",toKey:"researchDurationDivisor",type:Number},darkMatterNewAcount:{fromKey:"darkMatterNewAcount",toKey:"darkMatterNewAcount",type:Number},cargoHyperspaceTechMultiplier:{fromKey:"cargoHyperspaceTechMultiplier",toKey:"cargoHyperspaceTechMultiplier",type:Number},marketplaceEnabled:{fromKey:"marketplaceEnabled",toKey:"marketplaceEnabled",type:Boolean},marketplaceBasicTradeRatioMetal:{fromKey:"marketplaceBasicTradeRatioMetal",toKey:"marketplaceBasicTradeRatioMetal",type:Number},marketplaceBasicTradeRatioCrystal:{fromKey:"marketplaceBasicTradeRatioCrystal",toKey:"marketplaceBasicTradeRatioCrystal",type:Number},marketplaceBasicTradeRatioDeuterium:{fromKey:"marketplaceBasicTradeRatioDeuterium",toKey:"marketplaceBasicTradeRatioDeuterium",type:Number},marketplacePriceRangeLower:{fromKey:"marketplacePriceRangeLower",toKey:"marketplacePriceRangeLower",type:Number},marketplacePriceRangeUpper:{fromKey:"marketplacePriceRangeUpper",toKey:"marketplacePriceRangeUpper",type:Number},marketplaceTaxNormalUser:{fromKey:"marketplaceTaxNormalUser",toKey:"marketplaceTaxNormalUser",type:Number},marketplaceTaxAdmiral:{fromKey:"marketplaceTaxAdmiral",toKey:"marketplaceTaxAdmiral",type:Number},marketplaceTaxCancelOffer:{fromKey:"marketplaceTaxCancelOffer",toKey:"marketplaceTaxCancelOffer",type:Number},marketplaceTaxNotSold:{fromKey:"marketplaceTaxNotSold",toKey:"marketplaceTaxNotSold",type:Number},marketplaceOfferTimeout:{fromKey:"marketplaceOfferTimeout",toKey:"marketplaceOfferTimeout",type:Number},characterClassesEnabled:{fromKey:"characterClassesEnabled",toKey:"characterClassesEnabled",type:Boolean},minerBonusResourceProduction:{fromKey:"minerBonusResourceProduction",toKey:"minerBonusResourceProduction",type:Number},minerBonusFasterTradingShips:{fromKey:"minerBonusFasterTradingShips",toKey:"minerBonusFasterTradingShips",type:Number},minerBonusIncreasedCargoCapacityForTradingShips:{fromKey:"minerBonusIncreasedCargoCapacityForTradingShips",toKey:"minerBonusIncreasedCargoCapacityForTradingShips",type:Number},minerBonusAdditionalFleetSlots:{fromKey:"minerBonusAdditionalFleetSlots",toKey:"minerBonusAdditionalFleetSlots",type:Number},minerBonusAdditionalMarketSlots:{fromKey:"minerBonusAdditionalMarketSlots",toKey:"minerBonusAdditionalMarketSlots",type:Number},minerBonusAdditionalCrawler:{fromKey:"minerBonusAdditionalCrawler",toKey:"minerBonusAdditionalCrawler",type:Number},minerBonusMaxCrawler:{fromKey:"minerBonusMaxCrawler",toKey:"minerBonusMaxCrawler",type:Number},minerBonusEnergy:{fromKey:"minerBonusEnergy",toKey:"minerBonusEnergy",type:Number},minerBonusOverloadCrawler:{fromKey:"minerBonusOverloadCrawler",toKey:"minerBonusOverloadCrawler",type:Boolean},resourceBuggyProductionBoost:{fromKey:"resourceBuggyProductionBoost",toKey:"resourceBuggyProductionBoost",type:Number},resourceBuggyMaxProductionBoost:{fromKey:"resourceBuggyMaxProductionBoost",toKey:"resourceBuggyMaxProductionBoost",type:Number},resourceBuggyEnergyConsumptionPerUnit:{fromKey:"resourceBuggyEnergyConsumptionPerUnit",toKey:"resourceBuggyEnergyConsumptionPerUnit",type:Number},warriorBonusFasterCombatShips:{fromKey:"warriorBonusFasterCombatShips",toKey:"warriorBonusFasterCombatShips",type:Number},warriorBonusFasterRecyclers:{fromKey:"warriorBonusFasterRecyclers",toKey:"warriorBonusFasterRecyclers",type:Number},warriorBonusFuelConsumption:{fromKey:"warriorBonusFuelConsumption",toKey:"warriorBonusFuelConsumption",type:Number},warriorBonusRecyclerFuelConsumption:{fromKey:"warriorBonusRecyclerFuelConsumption",toKey:"warriorBonusRecyclerFuelConsumption",type:Number},warriorBonusRecyclerCargoCapacity:{fromKey:"warriorBonusRecyclerCargoCapacity",toKey:"warriorBonusRecyclerCargoCapacity",type:Number},warriorBonusAdditionalFleetSlots:{fromKey:"warriorBonusAdditionalFleetSlots",toKey:"warriorBonusAdditionalFleetSlots",type:Number},warriorBonusAdditionalMoonFields:{fromKey:"warriorBonusAdditionalMoonFields",toKey:"warriorBonusAdditionalMoonFields",type:Number},warriorBonusFleetHalfSpeed:{fromKey:"warriorBonusFleetHalfSpeed",toKey:"warriorBonusFleetHalfSpeed",type:Boolean},warriorBonusAttackerWreckfield:{fromKey:"warriorBonusAttackerWreckfield",toKey:"warriorBonusAttackerWreckfield",type:Boolean},combatDebrisFieldLimit:{fromKey:"combatDebrisFieldLimit",toKey:"combatDebrisFieldLimit",type:Number},explorerBonusIncreasedResearchSpeed:{fromKey:"explorerBonusIncreasedResearchSpeed",toKey:"explorerBonusIncreasedResearchSpeed",type:Number},explorerBonusIncreasedExpeditionOutcome:{fromKey:"explorerBonusIncreasedExpeditionOutcome",toKey:"explorerBonusIncreasedExpeditionOutcome",type:Number},explorerBonusLargerPlanets:{fromKey:"explorerBonusLargerPlanets",toKey:"explorerBonusLargerPlanets",type:Number},explorerUnitItemsPerDay:{fromKey:"explorerUnitItemsPerDay",toKey:"explorerUnitItemsPerDay",type:Number},explorerBonusPhalanxRange:{fromKey:"explorerBonusPhalanxRange",toKey:"explorerBonusPhalanxRange",type:Number},explorerBonusPlunderInactive:{fromKey:"explorerBonusPlunderInactive",toKey:"explorerBonusPlunderInactive",type:Boolean},explorerBonusExpeditionEnemyReduction:{fromKey:"explorerBonusExpeditionEnemyReduction",toKey:"explorerBonusExpeditionEnemyReduction",type:Number},explorerBonusAdditionalExpeditionSlots:{fromKey:"explorerBonusAdditionalExpeditionSlots",toKey:"explorerBonusAdditionalExpeditionSlots",type:Number},resourceProductionIncreaseCrystalDefault:{fromKey:"resourceProductionIncreaseCrystalDefault",toKey:"resourceProductionIncreaseCrystalDefault",type:Number},resourceProductionIncreaseCrystalPos1:{fromKey:"resourceProductionIncreaseCrystalPos1",toKey:"resourceProductionIncreaseCrystalPos1",type:Number},resourceProductionIncreaseCrystalPos2:{fromKey:"resourceProductionIncreaseCrystalPos2",toKey:"resourceProductionIncreaseCrystalPos2",type:Number},resourceProductionIncreaseCrystalPos3:{fromKey:"resourceProductionIncreaseCrystalPos3",toKey:"resourceProductionIncreaseCrystalPos3",type:Number},exodusRatioMetal:{fromKey:"exodusRatioMetal",toKey:"exodusRatioMetal",type:Number},exodusRatioCrystal:{fromKey:"exodusRatioCrystal",toKey:"exodusRatioCrystal",type:Number},exodusRatioDeuterium:{fromKey:"exodusRatioDeuterium",toKey:"exodusRatioDeuterium",type:Number},lifeformSettings:{fromKey:"lifeformSettings",toKey:"lifeformsEnabled",conversion:e=>null!=e}};class It{interval=432e5;meta;parser=new At.XMLParser({attributeNamePrefix:"",ignoreAttributes:!1,parseAttributeValue:!1});constructor(e){this.meta=e,this.init()}async init(){try{de(`initializing server settings updates for universe ${this.meta.serverId} ${this.meta.language.toUpperCase()}`);const e=await Fe(this.meta),t=await e.get("serverSettings","_lastUpdate"),r=Math.max(0,this.interval-(Date.now()-t));setTimeout((async()=>{await this.update()}),r)}catch(e){setTimeout((async()=>{await this.update()}),3e5)}}async update(){await this.updateServerSettings(),await this.init()}async updateServerSettings(){const{serverData:e}=await this.getXml("serverData.xml"),t=await this.getXml("highscore.xml?category=1&type=0"),r=Math.max(parseFloat(t.highscore.player[0].score),parseFloat(e.topScore)),a=(await Fe(this.meta)).transaction("serverSettings","readwrite"),n=a.objectStore("serverSettings");for(const t of Object.keys(Ft)){const r=Ft[t],a=e[t];let o;"type"in r?r.type==String?("string"!=typeof a&&"number"!=typeof a&&De(`Expected string or number, got object of type '${typeof a}' for key '${t}'`),o=a.toString()):r.type==Number?("string"!=typeof a&&"number"!=typeof a&&De(`Expected string or number, got object of type '${typeof a}' for key '${t}'`),o=tt(a)):r.type==Boolean?("string"!=typeof a&&"number"!=typeof a&&De(`Expected string or number, got object of type '${typeof a}' for key '${t}'`),o="1"==a):De("invalid type",r.type):o=r.conversion(a,e),await n.put(o,r.toKey)}await n.put(Date.now(),"_lastUpdate"),await n.put(r,"topScore"),await a.done;const o={type:Q.NotifyServerSettingsUpdate,ogameMeta:this.meta,senderUuid:Ge};await $e(o)}get apiUrlBase(){return`https://s${this.meta.serverId}-${this.meta.language}.ogame.gameforge.com/api`}async getXml(e){const t=`${this.apiUrlBase}/${e}`,r=await fetch(t,{cache:"no-cache"}),a=await r.text();return this.parser.parse(a)}}function Rt(e,t){const{serverId:r,language:a,playerId:n}=e,o=`s${r}-${a}`;return t?`${o}-${n}`:o}var Ot;function Lt(e,t){const r={...e};return Object.keys(t).forEach((e=>{const a=t[e];if(e in r){const t=r[e];if("object"==typeof t&&!(t instanceof Array))return void(r[e]=Lt(t,a))}r[e]=a})),r}!function(e){e.cs="cs",e.de="de",e.da="da",e.el="el",e.en="en",e["es-es"]="es-es",e["es-ar"]="es-ar",e["es-mx"]="es-mx",e.fr="fr",e.hr="hr",e.hu="hu",e.it="it",e.nl="nl",e.pl="pl",e["pt-br"]="pt-br",e["pt-pt"]="pt-pt",e.ro="ro",e.ru="ru",e.sl="sl",e.tr="tr",e["zh-tw"]="zh-tw"}(Ot||(Ot={})),Object.create,Object.create;var $t=Object.freeze({}),Nt=Array.isArray;function _t(e){return null==e}function Bt(e){return null!=e}function zt(e){return!0===e}function Ut(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function jt(e){return"function"==typeof e}function Ht(e){return null!==e&&"object"==typeof e}var Kt=Object.prototype.toString;function qt(e){return"[object Object]"===Kt.call(e)}function Gt(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function Vt(e){return Bt(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function Wt(e){return null==e?"":Array.isArray(e)||qt(e)&&e.toString===Kt?JSON.stringify(e,null,2):String(e)}function Yt(e){var t=parseFloat(e);return isNaN(t)?e:t}function Xt(e,t){for(var r=Object.create(null),a=e.split(","),n=0;n<a.length;n++)r[a[n]]=!0;return t?function(e){return r[e.toLowerCase()]}:function(e){return r[e]}}Xt("slot,component",!0);var Zt=Xt("key,ref,slot,slot-scope,is");function Qt(e,t){if(e.length){var r=e.indexOf(t);if(r>-1)return e.splice(r,1)}}var Jt=Object.prototype.hasOwnProperty;function er(e,t){return Jt.call(e,t)}function tr(e){var t=Object.create(null);return function(r){return t[r]||(t[r]=e(r))}}var rr=/-(\w)/g,ar=tr((function(e){return e.replace(rr,(function(e,t){return t?t.toUpperCase():""}))})),nr=tr((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),or=/\B([A-Z])/g,ir=tr((function(e){return e.replace(or,"-$1").toLowerCase()})),sr=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function r(r){var a=arguments.length;return a?a>1?e.apply(t,arguments):e.call(t,r):e.call(t)}return r._length=e.length,r};function lr(e,t){t=t||0;for(var r=e.length-t,a=new Array(r);r--;)a[r]=e[r+t];return a}function cr(e,t){for(var r in t)e[r]=t[r];return e}function dr(e){for(var t={},r=0;r<e.length;r++)e[r]&&cr(t,e[r]);return t}function ur(e,t,r){}var mr=function(e,t,r){return!1},pr=function(e){return e};function hr(e,t){if(e===t)return!0;var r=Ht(e),a=Ht(t);if(!r||!a)return!r&&!a&&String(e)===String(t);try{var n=Array.isArray(e),o=Array.isArray(t);if(n&&o)return e.length===t.length&&e.every((function(e,r){return hr(e,t[r])}));if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(n||o)return!1;var i=Object.keys(e),s=Object.keys(t);return i.length===s.length&&i.every((function(r){return hr(e[r],t[r])}))}catch(e){return!1}}function fr(e,t){for(var r=0;r<e.length;r++)if(hr(e[r],t))return r;return-1}function gr(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}function yr(e,t){return e===t?0===e&&1/e!=1/t:e==e||t==t}var vr="data-server-rendered",br=["component","directive","filter"],wr=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],xr={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:mr,isReservedAttr:mr,isUnknownElement:mr,getTagNamespace:ur,parsePlatformTagName:pr,mustUseProp:mr,async:!0,_lifecycleHooks:wr};function Sr(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function kr(e,t,r,a){Object.defineProperty(e,t,{value:r,enumerable:!!a,writable:!0,configurable:!0})}var Cr=new RegExp("[^".concat(/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/.source,".$_\\d]")),Tr="__proto__"in{},Pr="undefined"!=typeof window,Dr=Pr&&window.navigator.userAgent.toLowerCase(),Er=Dr&&/msie|trident/.test(Dr),Mr=Dr&&Dr.indexOf("msie 9.0")>0,Ar=Dr&&Dr.indexOf("edge/")>0;Dr&&Dr.indexOf("android");var Fr=Dr&&/iphone|ipad|ipod|ios/.test(Dr);Dr&&/chrome\/\d+/.test(Dr),Dr&&/phantomjs/.test(Dr);var Ir,Rr=Dr&&Dr.match(/firefox\/(\d+)/),Or={}.watch,Lr=!1;if(Pr)try{var $r={};Object.defineProperty($r,"passive",{get:function(){Lr=!0}}),window.addEventListener("test-passive",null,$r)}catch(e){}var Nr=function(){return void 0===Ir&&(Ir=!Pr&&void 0!==r.g&&r.g.process&&"server"===r.g.process.env.VUE_ENV),Ir},_r=Pr&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function Br(e){return"function"==typeof e&&/native code/.test(e.toString())}var zr,Ur="undefined"!=typeof Symbol&&Br(Symbol)&&"undefined"!=typeof Reflect&&Br(Reflect.ownKeys);zr="undefined"!=typeof Set&&Br(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var jr=null;function Hr(e){void 0===e&&(e=null),e||jr&&jr._scope.off(),jr=e,e&&e._scope.on()}var Kr=function(){function e(e,t,r,a,n,o,i,s){this.tag=e,this.data=t,this.children=r,this.text=a,this.elm=n,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=i,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(e.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),e}(),qr=function(e){void 0===e&&(e="");var t=new Kr;return t.text=e,t.isComment=!0,t};function Gr(e){return new Kr(void 0,void 0,void 0,String(e))}function Vr(e){var t=new Kr(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var Wr=0,Yr=function(){function e(){this.id=Wr++,this.subs=[]}return e.prototype.addSub=function(e){this.subs.push(e)},e.prototype.removeSub=function(e){Qt(this.subs,e)},e.prototype.depend=function(t){e.target&&e.target.addDep(this)},e.prototype.notify=function(e){for(var t=this.subs.slice(),r=0,a=t.length;r<a;r++)t[r].update()},e}();Yr.target=null;var Xr=[];function Zr(e){Xr.push(e),Yr.target=e}function Qr(){Xr.pop(),Yr.target=Xr[Xr.length-1]}var Jr=Array.prototype,ea=Object.create(Jr);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var t=Jr[e];kr(ea,e,(function(){for(var r=[],a=0;a<arguments.length;a++)r[a]=arguments[a];var n,o=t.apply(this,r),i=this.__ob__;switch(e){case"push":case"unshift":n=r;break;case"splice":n=r.slice(2)}return n&&i.observeArray(n),i.dep.notify(),o}))}));var ta=Object.getOwnPropertyNames(ea),ra={},aa=!0;function na(e){aa=e}var oa={notify:ur,depend:ur,addSub:ur,removeSub:ur},ia=function(){function e(e,t,r){if(void 0===t&&(t=!1),void 0===r&&(r=!1),this.value=e,this.shallow=t,this.mock=r,this.dep=r?oa:new Yr,this.vmCount=0,kr(e,"__ob__",this),Nt(e)){if(!r)if(Tr)e.__proto__=ea;else for(var a=0,n=ta.length;a<n;a++)kr(e,i=ta[a],ea[i]);t||this.observeArray(e)}else{var o=Object.keys(e);for(a=0;a<o.length;a++){var i;la(e,i=o[a],ra,void 0,t,r)}}}return e.prototype.observeArray=function(e){for(var t=0,r=e.length;t<r;t++)sa(e[t],!1,this.mock)},e}();function sa(e,t,r){var a;if(!(!Ht(e)||ha(e)||e instanceof Kr))return er(e,"__ob__")&&e.__ob__ instanceof ia?a=e.__ob__:!aa||!r&&Nr()||!Nt(e)&&!qt(e)||!Object.isExtensible(e)||e.__v_skip||(a=new ia(e,t,r)),a}function la(e,t,r,a,n,o){var i=new Yr,s=Object.getOwnPropertyDescriptor(e,t);if(!s||!1!==s.configurable){var l=s&&s.get,c=s&&s.set;l&&!c||r!==ra&&2!==arguments.length||(r=e[t]);var d=!n&&sa(r,!1,o);return Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=l?l.call(e):r;return Yr.target&&(i.depend(),d&&(d.dep.depend(),Nt(t)&&ua(t))),ha(t)&&!n?t.value:t},set:function(t){var a=l?l.call(e):r;if(yr(a,t)){if(c)c.call(e,t);else{if(l)return;if(ha(a)&&!ha(t))return void(a.value=t);r=t}d=!n&&sa(t,!1,o),i.notify()}}}),i}}function ca(e,t,r){if(!pa(e)){var a=e.__ob__;return Nt(e)&&Gt(t)?(e.length=Math.max(e.length,t),e.splice(t,1,r),a&&!a.shallow&&a.mock&&sa(r,!1,!0),r):t in e&&!(t in Object.prototype)?(e[t]=r,r):e._isVue||a&&a.vmCount?r:a?(la(a.value,t,r,void 0,a.shallow,a.mock),a.dep.notify(),r):(e[t]=r,r)}}function da(e,t){if(Nt(e)&&Gt(t))e.splice(t,1);else{var r=e.__ob__;e._isVue||r&&r.vmCount||pa(e)||er(e,t)&&(delete e[t],r&&r.dep.notify())}}function ua(e){for(var t=void 0,r=0,a=e.length;r<a;r++)(t=e[r])&&t.__ob__&&t.__ob__.dep.depend(),Nt(t)&&ua(t)}function ma(e){return function(e,t){pa(e)||sa(e,t,Nr())}(e,!0),kr(e,"__v_isShallow",!0),e}function pa(e){return!(!e||!e.__v_isReadonly)}function ha(e){return!(!e||!0!==e.__v_isRef)}function fa(e,t,r){Object.defineProperty(e,r,{enumerable:!0,configurable:!0,get:function(){var e=t[r];if(ha(e))return e.value;var a=e&&e.__ob__;return a&&a.dep.depend(),e},set:function(e){var a=t[r];ha(a)&&!ha(e)?a.value=e:t[r]=e}})}var ga,ya="watcher";"".concat(ya," callback"),"".concat(ya," getter"),"".concat(ya," cleanup");var va=function(){function e(e){void 0===e&&(e=!1),this.active=!0,this.effects=[],this.cleanups=[],!e&&ga&&(this.parent=ga,this.index=(ga.scopes||(ga.scopes=[])).push(this)-1)}return e.prototype.run=function(e){if(this.active){var t=ga;try{return ga=this,e()}finally{ga=t}}},e.prototype.on=function(){ga=this},e.prototype.off=function(){ga=this.parent},e.prototype.stop=function(e){if(this.active){var t=void 0,r=void 0;for(t=0,r=this.effects.length;t<r;t++)this.effects[t].teardown();for(t=0,r=this.cleanups.length;t<r;t++)this.cleanups[t]();if(this.scopes)for(t=0,r=this.scopes.length;t<r;t++)this.scopes[t].stop(!0);if(this.parent&&!e){var a=this.parent.scopes.pop();a&&a!==this&&(this.parent.scopes[this.index]=a,a.index=this.index)}this.active=!1}},e}();function ba(e,t){if(jr){var r=jr._provided,a=jr.$parent&&jr.$parent._provided;a===r&&(r=jr._provided=Object.create(a)),r[e]=t}}var wa=tr((function(e){var t="&"===e.charAt(0),r="~"===(e=t?e.slice(1):e).charAt(0),a="!"===(e=r?e.slice(1):e).charAt(0);return{name:e=a?e.slice(1):e,once:r,capture:a,passive:t}}));function xa(e,t){function r(){var e=r.fns;if(!Nt(e))return nn(e,null,arguments,t,"v-on handler");for(var a=e.slice(),n=0;n<a.length;n++)nn(a[n],null,arguments,t,"v-on handler")}return r.fns=e,r}function Sa(e,t,r,a,n,o){var i,s,l,c;for(i in e)s=e[i],l=t[i],c=wa(i),_t(s)||(_t(l)?(_t(s.fns)&&(s=e[i]=xa(s,o)),zt(c.once)&&(s=e[i]=n(c.name,s,c.capture)),r(c.name,s,c.capture,c.passive,c.params)):s!==l&&(l.fns=s,e[i]=l));for(i in t)_t(e[i])&&a((c=wa(i)).name,t[i],c.capture)}function ka(e,t,r){var a;e instanceof Kr&&(e=e.data.hook||(e.data.hook={}));var n=e[t];function o(){r.apply(this,arguments),Qt(a.fns,o)}_t(n)?a=xa([o]):Bt(n.fns)&&zt(n.merged)?(a=n).fns.push(o):a=xa([n,o]),a.merged=!0,e[t]=a}function Ca(e,t,r,a,n){if(Bt(t)){if(er(t,r))return e[r]=t[r],n||delete t[r],!0;if(er(t,a))return e[r]=t[a],n||delete t[a],!0}return!1}function Ta(e){return Ut(e)?[Gr(e)]:Nt(e)?Da(e):void 0}function Pa(e){return Bt(e)&&Bt(e.text)&&!1===e.isComment}function Da(e,t){var r,a,n,o,i=[];for(r=0;r<e.length;r++)_t(a=e[r])||"boolean"==typeof a||(o=i[n=i.length-1],Nt(a)?a.length>0&&(Pa((a=Da(a,"".concat(t||"","_").concat(r)))[0])&&Pa(o)&&(i[n]=Gr(o.text+a[0].text),a.shift()),i.push.apply(i,a)):Ut(a)?Pa(o)?i[n]=Gr(o.text+a):""!==a&&i.push(Gr(a)):Pa(a)&&Pa(o)?i[n]=Gr(o.text+a.text):(zt(e._isVList)&&Bt(a.tag)&&_t(a.key)&&Bt(t)&&(a.key="__vlist".concat(t,"_").concat(r,"__")),i.push(a)));return i}function Ea(e,t){var r,a,n,o,i=null;if(Nt(e)||"string"==typeof e)for(i=new Array(e.length),r=0,a=e.length;r<a;r++)i[r]=t(e[r],r);else if("number"==typeof e)for(i=new Array(e),r=0;r<e;r++)i[r]=t(r+1,r);else if(Ht(e))if(Ur&&e[Symbol.iterator]){i=[];for(var s=e[Symbol.iterator](),l=s.next();!l.done;)i.push(t(l.value,i.length)),l=s.next()}else for(n=Object.keys(e),i=new Array(n.length),r=0,a=n.length;r<a;r++)o=n[r],i[r]=t(e[o],o,r);return Bt(i)||(i=[]),i._isVList=!0,i}function Ma(e,t,r,a){var n,o=this.$scopedSlots[e];o?(r=r||{},a&&(r=cr(cr({},a),r)),n=o(r)||(jt(t)?t():t)):n=this.$slots[e]||(jt(t)?t():t);var i=r&&r.slot;return i?this.$createElement("template",{slot:i},n):n}function Aa(e){return lo(this.$options,"filters",e)||pr}function Fa(e,t){return Nt(e)?-1===e.indexOf(t):e!==t}function Ia(e,t,r,a,n){var o=xr.keyCodes[t]||r;return n&&a&&!xr.keyCodes[t]?Fa(n,a):o?Fa(o,e):a?ir(a)!==t:void 0===e}function Ra(e,t,r,a,n){if(r&&Ht(r)){Nt(r)&&(r=dr(r));var o=void 0,i=function(i){if("class"===i||"style"===i||Zt(i))o=e;else{var s=e.attrs&&e.attrs.type;o=a||xr.mustUseProp(t,s,i)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var l=ar(i),c=ir(i);l in o||c in o||(o[i]=r[i],n&&((e.on||(e.on={}))["update:".concat(i)]=function(e){r[i]=e}))};for(var s in r)i(s)}return e}function Oa(e,t){var r=this._staticTrees||(this._staticTrees=[]),a=r[e];return a&&!t||$a(a=r[e]=this.$options.staticRenderFns[e].call(this._renderProxy,this._c,this),"__static__".concat(e),!1),a}function La(e,t,r){return $a(e,"__once__".concat(t).concat(r?"_".concat(r):""),!0),e}function $a(e,t,r){if(Nt(e))for(var a=0;a<e.length;a++)e[a]&&"string"!=typeof e[a]&&Na(e[a],"".concat(t,"_").concat(a),r);else Na(e,t,r)}function Na(e,t,r){e.isStatic=!0,e.key=t,e.isOnce=r}function _a(e,t){if(t&&qt(t)){var r=e.on=e.on?cr({},e.on):{};for(var a in t){var n=r[a],o=t[a];r[a]=n?[].concat(n,o):o}}return e}function Ba(e,t,r,a){t=t||{$stable:!r};for(var n=0;n<e.length;n++){var o=e[n];Nt(o)?Ba(o,t,r):o&&(o.proxy&&(o.fn.proxy=!0),t[o.key]=o.fn)}return a&&(t.$key=a),t}function za(e,t){for(var r=0;r<t.length;r+=2){var a=t[r];"string"==typeof a&&a&&(e[t[r]]=t[r+1])}return e}function Ua(e,t){return"string"==typeof e?t+e:e}function ja(e){e._o=La,e._n=Yt,e._s=Wt,e._l=Ea,e._t=Ma,e._q=hr,e._i=fr,e._m=Oa,e._f=Aa,e._k=Ia,e._b=Ra,e._v=Gr,e._e=qr,e._u=Ba,e._g=_a,e._d=za,e._p=Ua}function Ha(e,t){if(!e||!e.length)return{};for(var r={},a=0,n=e.length;a<n;a++){var o=e[a],i=o.data;if(i&&i.attrs&&i.attrs.slot&&delete i.attrs.slot,o.context!==t&&o.fnContext!==t||!i||null==i.slot)(r.default||(r.default=[])).push(o);else{var s=i.slot,l=r[s]||(r[s]=[]);"template"===o.tag?l.push.apply(l,o.children||[]):l.push(o)}}for(var c in r)r[c].every(Ka)&&delete r[c];return r}function Ka(e){return e.isComment&&!e.asyncFactory||" "===e.text}function qa(e){return e.isComment&&e.asyncFactory}function Ga(e,t,r,a){var n,o=Object.keys(r).length>0,i=t?!!t.$stable:!o,s=t&&t.$key;if(t){if(t._normalized)return t._normalized;if(i&&a&&a!==$t&&s===a.$key&&!o&&!a.$hasNormal)return a;for(var l in n={},t)t[l]&&"$"!==l[0]&&(n[l]=Va(e,r,l,t[l]))}else n={};for(var c in r)c in n||(n[c]=Wa(r,c));return t&&Object.isExtensible(t)&&(t._normalized=n),kr(n,"$stable",i),kr(n,"$key",s),kr(n,"$hasNormal",o),n}function Va(e,t,r,a){var n=function(){var t=jr;Hr(e);var r=arguments.length?a.apply(null,arguments):a({}),n=(r=r&&"object"==typeof r&&!Nt(r)?[r]:Ta(r))&&r[0];return Hr(t),r&&(!n||1===r.length&&n.isComment&&!qa(n))?void 0:r};return a.proxy&&Object.defineProperty(t,r,{get:n,enumerable:!0,configurable:!0}),n}function Wa(e,t){return function(){return e[t]}}function Ya(e,t,r,a){var n=!1;for(var o in t)o in e?t[o]!==r[o]&&(n=!0):(n=!0,Xa(e,o,a));for(var o in e)o in t||(n=!0,delete e[o]);return n}function Xa(e,t,r){Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){return r.$attrs[t]}})}function Za(e,t){for(var r in t)e[r]=t[r];for(var r in e)r in t||delete e[r]}var Qa=null;function Ja(e,t){return(e.__esModule||Ur&&"Module"===e[Symbol.toStringTag])&&(e=e.default),Ht(e)?t.extend(e):e}function en(e){if(Nt(e))for(var t=0;t<e.length;t++){var r=e[t];if(Bt(r)&&(Bt(r.componentOptions)||qa(r)))return r}}function tn(e,t,r,a,n,o){return(Nt(r)||Ut(r))&&(n=a,a=r,r=void 0),zt(o)&&(n=2),function(e,t,r,a,n){if(Bt(r)&&Bt(r.__ob__))return qr();if(Bt(r)&&Bt(r.is)&&(t=r.is),!t)return qr();var o,i;if(Nt(a)&&jt(a[0])&&((r=r||{}).scopedSlots={default:a[0]},a.length=0),2===n?a=Ta(a):1===n&&(a=function(e){for(var t=0;t<e.length;t++)if(Nt(e[t]))return Array.prototype.concat.apply([],e);return e}(a)),"string"==typeof t){var s=void 0;i=e.$vnode&&e.$vnode.ns||xr.getTagNamespace(t),o=xr.isReservedTag(t)?new Kr(xr.parsePlatformTagName(t),r,a,void 0,void 0,e):r&&r.pre||!Bt(s=lo(e.$options,"components",t))?new Kr(t,r,a,void 0,void 0,e):Qn(s,r,e,a,t)}else o=Qn(t,r,e,a);return Nt(o)?o:Bt(o)?(Bt(i)&&rn(o,i),Bt(r)&&function(e){Ht(e.style)&&wn(e.style),Ht(e.class)&&wn(e.class)}(r),o):qr()}(e,t,r,a,n)}function rn(e,t,r){if(e.ns=t,"foreignObject"===e.tag&&(t=void 0,r=!0),Bt(e.children))for(var a=0,n=e.children.length;a<n;a++){var o=e.children[a];Bt(o.tag)&&(_t(o.ns)||zt(r)&&"svg"!==o.tag)&&rn(o,t,r)}}function an(e,t,r){Zr();try{if(t)for(var a=t;a=a.$parent;){var n=a.$options.errorCaptured;if(n)for(var o=0;o<n.length;o++)try{if(!1===n[o].call(a,e,t,r))return}catch(e){on(e,a,"errorCaptured hook")}}on(e,t,r)}finally{Qr()}}function nn(e,t,r,a,n){var o;try{(o=r?e.apply(t,r):e.call(t))&&!o._isVue&&Vt(o)&&!o._handled&&(o.catch((function(e){return an(e,a,n+" (Promise/async)")})),o._handled=!0)}catch(e){an(e,a,n)}return o}function on(e,t,r){if(xr.errorHandler)try{return xr.errorHandler.call(null,e,t,r)}catch(t){t!==e&&sn(t)}sn(e)}function sn(e,t,r){if(!Pr||"undefined"==typeof console)throw e;console.error(e)}var ln,cn=!1,dn=[],un=!1;function mn(){un=!1;var e=dn.slice(0);dn.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&Br(Promise)){var pn=Promise.resolve();ln=function(){pn.then(mn),Fr&&setTimeout(ur)},cn=!0}else if(Er||"undefined"==typeof MutationObserver||!Br(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())ln="undefined"!=typeof setImmediate&&Br(setImmediate)?function(){setImmediate(mn)}:function(){setTimeout(mn,0)};else{var hn=1,fn=new MutationObserver(mn),gn=document.createTextNode(String(hn));fn.observe(gn,{characterData:!0}),ln=function(){hn=(hn+1)%2,gn.data=String(hn)},cn=!0}function yn(e,t){var r;if(dn.push((function(){if(e)try{e.call(t)}catch(e){an(e,t,"nextTick")}else r&&r(t)})),un||(un=!0,ln()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){r=e}))}function vn(e){return function(t,r){if(void 0===r&&(r=jr),r)return function(e,t,r){var a=e.$options;a[t]=no(a[t],r)}(r,e,t)}}vn("beforeMount"),vn("mounted"),vn("beforeUpdate"),vn("updated"),vn("beforeDestroy"),vn("destroyed"),vn("errorCaptured"),vn("activated"),vn("deactivated"),vn("serverPrefetch"),vn("renderTracked"),vn("renderTriggered");var bn=new zr;function wn(e){return xn(e,bn),bn.clear(),e}function xn(e,t){var r,a,n=Nt(e);if(!(!n&&!Ht(e)||Object.isFrozen(e)||e instanceof Kr)){if(e.__ob__){var o=e.__ob__.dep.id;if(t.has(o))return;t.add(o)}if(n)for(r=e.length;r--;)xn(e[r],t);else if(ha(e))xn(e.value,t);else for(r=(a=Object.keys(e)).length;r--;)xn(e[a[r]],t)}}var Sn,kn=0,Cn=function(){function e(e,t,r,a,n){var o;void 0===(o=ga||(e?e._scope:void 0))&&(o=ga),o&&o.active&&o.effects.push(this),(this.vm=e)&&n&&(e._watcher=this),a?(this.deep=!!a.deep,this.user=!!a.user,this.lazy=!!a.lazy,this.sync=!!a.sync,this.before=a.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=r,this.id=++kn,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new zr,this.newDepIds=new zr,this.expression="",jt(t)?this.getter=t:(this.getter=function(e){if(!Cr.test(e)){var t=e.split(".");return function(e){for(var r=0;r<t.length;r++){if(!e)return;e=e[t[r]]}return e}}}(t),this.getter||(this.getter=ur)),this.value=this.lazy?void 0:this.get()}return e.prototype.get=function(){var e;Zr(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;an(e,t,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&wn(e),Qr(),this.cleanupDeps()}return e},e.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},e.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var r=this.depIds;this.depIds=this.newDepIds,this.newDepIds=r,this.newDepIds.clear(),r=this.deps,this.deps=this.newDeps,this.newDeps=r,this.newDeps.length=0},e.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;if(null==Nn[t]&&(e!==Yr.target||!e.noRecurse)){if(Nn[t]=!0,Bn){for(var r=Ln.length-1;r>zn&&Ln[r].id>e.id;)r--;Ln.splice(r+1,0,e)}else Ln.push(e);_n||(_n=!0,yn(Kn))}}(this)},e.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||Ht(e)||this.deep){var t=this.value;if(this.value=e,this.user){var r='callback for watcher "'.concat(this.expression,'"');nn(this.cb,this.vm,[e,t],this.vm,r)}else this.cb.call(this.vm,e,t)}}},e.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},e.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},e.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&Qt(this.vm._scope.effects,this),this.active){for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},e}();function Tn(e,t){Sn.$on(e,t)}function Pn(e,t){Sn.$off(e,t)}function Dn(e,t){var r=Sn;return function a(){var n=t.apply(null,arguments);null!==n&&r.$off(e,a)}}function En(e,t,r){Sn=e,Sa(t,r||{},Tn,Pn,Dn,e),Sn=void 0}var Mn=null;function An(e){var t=Mn;return Mn=e,function(){Mn=t}}function Fn(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function In(e,t){if(t){if(e._directInactive=!1,Fn(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var r=0;r<e.$children.length;r++)In(e.$children[r]);On(e,"activated")}}function Rn(e,t){if(!(t&&(e._directInactive=!0,Fn(e))||e._inactive)){e._inactive=!0;for(var r=0;r<e.$children.length;r++)Rn(e.$children[r]);On(e,"deactivated")}}function On(e,t,r,a){void 0===a&&(a=!0),Zr();var n=jr;a&&Hr(e);var o=e.$options[t],i="".concat(t," hook");if(o)for(var s=0,l=o.length;s<l;s++)nn(o[s],e,r||null,e,i);e._hasHookEvent&&e.$emit("hook:"+t),a&&Hr(n),Qr()}var Ln=[],$n=[],Nn={},_n=!1,Bn=!1,zn=0,Un=0,jn=Date.now;if(Pr&&!Er){var Hn=window.performance;Hn&&"function"==typeof Hn.now&&jn()>document.createEvent("Event").timeStamp&&(jn=function(){return Hn.now()})}function Kn(){var e,t;for(Un=jn(),Bn=!0,Ln.sort((function(e,t){return e.id-t.id})),zn=0;zn<Ln.length;zn++)(e=Ln[zn]).before&&e.before(),t=e.id,Nn[t]=null,e.run();var r=$n.slice(),a=Ln.slice();zn=Ln.length=$n.length=0,Nn={},_n=Bn=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,In(e[t],!0)}(r),function(e){for(var t=e.length;t--;){var r=e[t],a=r.vm;a&&a._watcher===r&&a._isMounted&&!a._isDestroyed&&On(a,"updated")}}(a),_r&&xr.devtools&&_r.emit("flush")}function qn(e,t){if(e){for(var r=Object.create(null),a=Ur?Reflect.ownKeys(e):Object.keys(e),n=0;n<a.length;n++){var o=a[n];if("__ob__"!==o){var i=e[o].from;if(i in t._provided)r[o]=t._provided[i];else if("default"in e[o]){var s=e[o].default;r[o]=jt(s)?s.call(t):s}}}return r}}function Gn(e,t,r,a,n){var o,i=this,s=n.options;er(a,"_uid")?(o=Object.create(a))._original=a:(o=a,a=a._original);var l=zt(s._compiled),c=!l;this.data=e,this.props=t,this.children=r,this.parent=a,this.listeners=e.on||$t,this.injections=qn(s.inject,a),this.slots=function(){return i.$slots||Ga(a,e.scopedSlots,i.$slots=Ha(r,a)),i.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return Ga(a,e.scopedSlots,this.slots())}}),l&&(this.$options=s,this.$slots=this.slots(),this.$scopedSlots=Ga(a,e.scopedSlots,this.$slots)),s._scopeId?this._c=function(e,t,r,n){var i=tn(o,e,t,r,n,c);return i&&!Nt(i)&&(i.fnScopeId=s._scopeId,i.fnContext=a),i}:this._c=function(e,t,r,a){return tn(o,e,t,r,a,c)}}function Vn(e,t,r,a,n){var o=Vr(e);return o.fnContext=r,o.fnOptions=a,t.slot&&((o.data||(o.data={})).slot=t.slot),o}function Wn(e,t){for(var r in t)e[ar(r)]=t[r]}function Yn(e){return e.name||e.__name||e._componentTag}ja(Gn.prototype);var Xn={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var r=e;Xn.prepatch(r,r)}else(e.componentInstance=function(e,t){var r={_isComponent:!0,_parentVnode:e,parent:t},a=e.data.inlineTemplate;return Bt(a)&&(r.render=a.render,r.staticRenderFns=a.staticRenderFns),new e.componentOptions.Ctor(r)}(e,Mn)).$mount(t?e.elm:void 0,t)},prepatch:function(e,t){var r=t.componentOptions;!function(e,t,r,a,n){var o=a.data.scopedSlots,i=e.$scopedSlots,s=!!(o&&!o.$stable||i!==$t&&!i.$stable||o&&e.$scopedSlots.$key!==o.$key||!o&&e.$scopedSlots.$key),l=!!(n||e.$options._renderChildren||s),c=e.$vnode;e.$options._parentVnode=a,e.$vnode=a,e._vnode&&(e._vnode.parent=a),e.$options._renderChildren=n;var d=a.data.attrs||$t;if(e._attrsProxy&&Ya(e._attrsProxy,d,c.data&&c.data.attrs||$t,e)&&(l=!0),e.$attrs=d,e.$listeners=r||$t,t&&e.$options.props){na(!1);for(var u=e._props,m=e.$options._propKeys||[],p=0;p<m.length;p++){var h=m[p],f=e.$options.props;u[h]=co(h,f,t,e)}na(!0),e.$options.propsData=t}r=r||$t;var g=e.$options._parentListeners;e.$options._parentListeners=r,En(e,r,g),l&&(e.$slots=Ha(n,a.context),e.$forceUpdate())}(t.componentInstance=e.componentInstance,r.propsData,r.listeners,t,r.children)},insert:function(e){var t,r=e.context,a=e.componentInstance;a._isMounted||(a._isMounted=!0,On(a,"mounted")),e.data.keepAlive&&(r._isMounted?((t=a)._inactive=!1,$n.push(t)):In(a,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?Rn(t,!0):t.$destroy())}},Zn=Object.keys(Xn);function Qn(e,t,r,a,n){if(!_t(e)){var o=r.$options._base;if(Ht(e)&&(e=o.extend(e)),"function"==typeof e){var i;if(_t(e.cid)&&(e=function(e,t){if(zt(e.error)&&Bt(e.errorComp))return e.errorComp;if(Bt(e.resolved))return e.resolved;var r=Qa;if(r&&Bt(e.owners)&&-1===e.owners.indexOf(r)&&e.owners.push(r),zt(e.loading)&&Bt(e.loadingComp))return e.loadingComp;if(r&&!Bt(e.owners)){var a=e.owners=[r],n=!0,o=null,i=null;r.$on("hook:destroyed",(function(){return Qt(a,r)}));var s=function(e){for(var t=0,r=a.length;t<r;t++)a[t].$forceUpdate();e&&(a.length=0,null!==o&&(clearTimeout(o),o=null),null!==i&&(clearTimeout(i),i=null))},l=gr((function(r){e.resolved=Ja(r,t),n?a.length=0:s(!0)})),c=gr((function(t){Bt(e.errorComp)&&(e.error=!0,s(!0))})),d=e(l,c);return Ht(d)&&(Vt(d)?_t(e.resolved)&&d.then(l,c):Vt(d.component)&&(d.component.then(l,c),Bt(d.error)&&(e.errorComp=Ja(d.error,t)),Bt(d.loading)&&(e.loadingComp=Ja(d.loading,t),0===d.delay?e.loading=!0:o=setTimeout((function(){o=null,_t(e.resolved)&&_t(e.error)&&(e.loading=!0,s(!1))}),d.delay||200)),Bt(d.timeout)&&(i=setTimeout((function(){i=null,_t(e.resolved)&&c(null)}),d.timeout)))),n=!1,e.loading?e.loadingComp:e.resolved}}(i=e,o),void 0===e))return function(e,t,r,a,n){var o=qr();return o.asyncFactory=e,o.asyncMeta={data:t,context:r,children:a,tag:n},o}(i,t,r,a,n);t=t||{},Co(e),Bt(t.model)&&function(e,t){var r=e.model&&e.model.prop||"value",a=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[r]=t.model.value;var n=t.on||(t.on={}),o=n[a],i=t.model.callback;Bt(o)?(Nt(o)?-1===o.indexOf(i):o!==i)&&(n[a]=[i].concat(o)):n[a]=i}(e.options,t);var s=function(e,t,r){var a=t.options.props;if(!_t(a)){var n={},o=e.attrs,i=e.props;if(Bt(o)||Bt(i))for(var s in a){var l=ir(s);Ca(n,i,s,l,!0)||Ca(n,o,s,l,!1)}return n}}(t,e);if(zt(e.options.functional))return function(e,t,r,a,n){var o=e.options,i={},s=o.props;if(Bt(s))for(var l in s)i[l]=co(l,s,t||$t);else Bt(r.attrs)&&Wn(i,r.attrs),Bt(r.props)&&Wn(i,r.props);var c=new Gn(r,i,n,a,e),d=o.render.call(null,c._c,c);if(d instanceof Kr)return Vn(d,r,c.parent,o);if(Nt(d)){for(var u=Ta(d)||[],m=new Array(u.length),p=0;p<u.length;p++)m[p]=Vn(u[p],r,c.parent,o);return m}}(e,s,t,r,a);var l=t.on;if(t.on=t.nativeOn,zt(e.options.abstract)){var c=t.slot;t={},c&&(t.slot=c)}!function(e){for(var t=e.hook||(e.hook={}),r=0;r<Zn.length;r++){var a=Zn[r],n=t[a],o=Xn[a];n===o||n&&n._merged||(t[a]=n?Jn(o,n):o)}}(t);var d=Yn(e.options)||n;return new Kr("vue-component-".concat(e.cid).concat(d?"-".concat(d):""),t,void 0,void 0,void 0,r,{Ctor:e,propsData:s,listeners:l,tag:n,children:a},i)}}}function Jn(e,t){var r=function(r,a){e(r,a),t(r,a)};return r._merged=!0,r}var eo=ur,to=xr.optionMergeStrategies;function ro(e,t){if(!t)return e;for(var r,a,n,o=Ur?Reflect.ownKeys(t):Object.keys(t),i=0;i<o.length;i++)"__ob__"!==(r=o[i])&&(a=e[r],n=t[r],er(e,r)?a!==n&&qt(a)&&qt(n)&&ro(a,n):ca(e,r,n));return e}function ao(e,t,r){return r?function(){var a=jt(t)?t.call(r,r):t,n=jt(e)?e.call(r,r):e;return a?ro(a,n):n}:t?e?function(){return ro(jt(t)?t.call(this,this):t,jt(e)?e.call(this,this):e)}:t:e}function no(e,t){var r=t?e?e.concat(t):Nt(t)?t:[t]:e;return r?function(e){for(var t=[],r=0;r<e.length;r++)-1===t.indexOf(e[r])&&t.push(e[r]);return t}(r):r}function oo(e,t,r,a){var n=Object.create(e||null);return t?cr(n,t):n}to.data=function(e,t,r){return r?ao(e,t,r):t&&"function"!=typeof t?e:ao(e,t)},wr.forEach((function(e){to[e]=no})),br.forEach((function(e){to[e+"s"]=oo})),to.watch=function(e,t,r,a){if(e===Or&&(e=void 0),t===Or&&(t=void 0),!t)return Object.create(e||null);if(!e)return t;var n={};for(var o in cr(n,e),t){var i=n[o],s=t[o];i&&!Nt(i)&&(i=[i]),n[o]=i?i.concat(s):Nt(s)?s:[s]}return n},to.props=to.methods=to.inject=to.computed=function(e,t,r,a){if(!e)return t;var n=Object.create(null);return cr(n,e),t&&cr(n,t),n},to.provide=ao;var io=function(e,t){return void 0===t?e:t};function so(e,t,r){if(jt(t)&&(t=t.options),function(e,t){var r=e.props;if(r){var a,n,o={};if(Nt(r))for(a=r.length;a--;)"string"==typeof(n=r[a])&&(o[ar(n)]={type:null});else if(qt(r))for(var i in r)n=r[i],o[ar(i)]=qt(n)?n:{type:n};e.props=o}}(t),function(e,t){var r=e.inject;if(r){var a=e.inject={};if(Nt(r))for(var n=0;n<r.length;n++)a[r[n]]={from:r[n]};else if(qt(r))for(var o in r){var i=r[o];a[o]=qt(i)?cr({from:o},i):{from:i}}}}(t),function(e){var t=e.directives;if(t)for(var r in t){var a=t[r];jt(a)&&(t[r]={bind:a,update:a})}}(t),!t._base&&(t.extends&&(e=so(e,t.extends,r)),t.mixins))for(var a=0,n=t.mixins.length;a<n;a++)e=so(e,t.mixins[a],r);var o,i={};for(o in e)s(o);for(o in t)er(e,o)||s(o);function s(a){var n=to[a]||io;i[a]=n(e[a],t[a],r,a)}return i}function lo(e,t,r,a){if("string"==typeof r){var n=e[t];if(er(n,r))return n[r];var o=ar(r);if(er(n,o))return n[o];var i=nr(o);return er(n,i)?n[i]:n[r]||n[o]||n[i]}}function co(e,t,r,a){var n=t[e],o=!er(r,e),i=r[e],s=ho(Boolean,n.type);if(s>-1)if(o&&!er(n,"default"))i=!1;else if(""===i||i===ir(e)){var l=ho(String,n.type);(l<0||s<l)&&(i=!0)}if(void 0===i){i=function(e,t,r){if(er(t,"default")){var a=t.default;return e&&e.$options.propsData&&void 0===e.$options.propsData[r]&&void 0!==e._props[r]?e._props[r]:jt(a)&&"Function"!==mo(t.type)?a.call(e):a}}(a,n,e);var c=aa;na(!0),sa(i),na(c)}return i}var uo=/^\s*function (\w+)/;function mo(e){var t=e&&e.toString().match(uo);return t?t[1]:""}function po(e,t){return mo(e)===mo(t)}function ho(e,t){if(!Nt(t))return po(t,e)?0:-1;for(var r=0,a=t.length;r<a;r++)if(po(t[r],e))return r;return-1}var fo={enumerable:!0,configurable:!0,get:ur,set:ur};function go(e,t,r){fo.get=function(){return this[t][r]},fo.set=function(e){this[t][r]=e},Object.defineProperty(e,r,fo)}function yo(e){var t=e.$options;if(t.props&&function(e,t){var r=e.$options.propsData||{},a=e._props=ma({}),n=e.$options._propKeys=[];e.$parent&&na(!1);var o=function(o){n.push(o);var i=co(o,t,r,e);la(a,o,i),o in e||go(e,"_props",o)};for(var i in t)o(i);na(!0)}(e,t.props),function(e){var t=e.$options,r=t.setup;if(r){var a=e._setupContext=function(e){return{get attrs(){return function(e){if(!e._attrsProxy){var t=e._attrsProxy={};kr(t,"_v_attr_proxy",!0),Ya(t,e.$attrs,$t,e)}return e._attrsProxy}(e)},get slots(){return function(e){return e._slotsProxy||Za(e._slotsProxy={},e.$scopedSlots),e._slotsProxy}(e)},emit:sr(e.$emit,e),expose:function(t){t&&Object.keys(t).forEach((function(r){return fa(e,t,r)}))}}}(e);Hr(e),Zr();var n=nn(r,null,[e._props||ma({}),a],e,"setup");if(Qr(),Hr(),jt(n))t.render=n;else if(Ht(n))if(e._setupState=n,n.__sfc){var o=e._setupProxy={};for(var i in n)"__sfc"!==i&&fa(o,n,i)}else for(var i in n)Sr(i)||fa(e,n,i)}}(e),t.methods&&function(e,t){for(var r in e.$options.props,t)e[r]="function"!=typeof t[r]?ur:sr(t[r],e)}(e,t.methods),t.data)!function(e){var t=e.$options.data;qt(t=e._data=jt(t)?function(e,t){Zr();try{return e.call(t,t)}catch(e){return an(e,t,"data()"),{}}finally{Qr()}}(t,e):t||{})||(t={});for(var r=Object.keys(t),a=e.$options.props,n=(e.$options.methods,r.length);n--;){var o=r[n];a&&er(a,o)||Sr(o)||go(e,"_data",o)}var i=sa(t);i&&i.vmCount++}(e);else{var r=sa(e._data={});r&&r.vmCount++}t.computed&&function(e,t){var r=e._computedWatchers=Object.create(null),a=Nr();for(var n in t){var o=t[n],i=jt(o)?o:o.get;a||(r[n]=new Cn(e,i||ur,ur,vo)),n in e||bo(e,n,o)}}(e,t.computed),t.watch&&t.watch!==Or&&function(e,t){for(var r in t){var a=t[r];if(Nt(a))for(var n=0;n<a.length;n++)So(e,r,a[n]);else So(e,r,a)}}(e,t.watch)}var vo={lazy:!0};function bo(e,t,r){var a=!Nr();jt(r)?(fo.get=a?wo(t):xo(r),fo.set=ur):(fo.get=r.get?a&&!1!==r.cache?wo(t):xo(r.get):ur,fo.set=r.set||ur),Object.defineProperty(e,t,fo)}function wo(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),Yr.target&&t.depend(),t.value}}function xo(e){return function(){return e.call(this,this)}}function So(e,t,r,a){return qt(r)&&(a=r,r=r.handler),"string"==typeof r&&(r=e[r]),e.$watch(t,r,a)}var ko=0;function Co(e){var t=e.options;if(e.super){var r=Co(e.super);if(r!==e.superOptions){e.superOptions=r;var a=function(e){var t,r=e.options,a=e.sealedOptions;for(var n in r)r[n]!==a[n]&&(t||(t={}),t[n]=r[n]);return t}(e);a&&cr(e.extendOptions,a),(t=e.options=so(r,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function To(e){this._init(e)}function Po(e){return e&&(Yn(e.Ctor.options)||e.tag)}function Do(e,t){return Nt(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:(r=e,!("[object RegExp]"!==Kt.call(r))&&e.test(t));var r}function Eo(e,t){var r=e.cache,a=e.keys,n=e._vnode;for(var o in r){var i=r[o];if(i){var s=i.name;s&&!t(s)&&Mo(r,o,a,n)}}}function Mo(e,t,r,a){var n=e[t];!n||a&&n.tag===a.tag||n.componentInstance.$destroy(),e[t]=null,Qt(r,t)}To.prototype._init=function(e){var t=this;t._uid=ko++,t._isVue=!0,t.__v_skip=!0,t._scope=new va(!0),e&&e._isComponent?function(e,t){var r=e.$options=Object.create(e.constructor.options),a=t._parentVnode;r.parent=t.parent,r._parentVnode=a;var n=a.componentOptions;r.propsData=n.propsData,r._parentListeners=n.listeners,r._renderChildren=n.children,r._componentTag=n.tag,t.render&&(r.render=t.render,r.staticRenderFns=t.staticRenderFns)}(t,e):t.$options=so(Co(t.constructor),e||{},t),t._renderProxy=t,t._self=t,function(e){var t=e.$options,r=t.parent;if(r&&!t.abstract){for(;r.$options.abstract&&r.$parent;)r=r.$parent;r.$children.push(e)}e.$parent=r,e.$root=r?r.$root:e,e.$children=[],e.$refs={},e._provided=r?r._provided:Object.create(null),e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(t),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&En(e,t)}(t),function(e){e._vnode=null,e._staticTrees=null;var t=e.$options,r=e.$vnode=t._parentVnode,a=r&&r.context;e.$slots=Ha(t._renderChildren,a),e.$scopedSlots=$t,e._c=function(t,r,a,n){return tn(e,t,r,a,n,!1)},e.$createElement=function(t,r,a,n){return tn(e,t,r,a,n,!0)};var n=r&&r.data;la(e,"$attrs",n&&n.attrs||$t,null,!0),la(e,"$listeners",t._parentListeners||$t,null,!0)}(t),On(t,"beforeCreate",void 0,!1),function(e){var t=qn(e.$options.inject,e);t&&(na(!1),Object.keys(t).forEach((function(r){la(e,r,t[r])})),na(!0))}(t),yo(t),function(e){var t=e.$options.provide;if(t){var r=jt(t)?t.call(e):t;if(!Ht(r))return;var a=Ur?Reflect.ownKeys(r):Object.keys(r);Hr(e);for(var n=0;n<a.length;n++)ba(a[n],r[a[n]]);Hr()}}(t),On(t,"created"),t.$options.el&&t.$mount(t.$options.el)},function(e){Object.defineProperty(e.prototype,"$data",{get:function(){return this._data}}),Object.defineProperty(e.prototype,"$props",{get:function(){return this._props}}),e.prototype.$set=ca,e.prototype.$delete=da,e.prototype.$watch=function(e,t,r){var a=this;if(qt(t))return So(a,e,t,r);(r=r||{}).user=!0;var n=new Cn(a,e,t,r);if(r.immediate){var o='callback for immediate watcher "'.concat(n.expression,'"');Zr(),nn(t,a,[n.value],a,o),Qr()}return function(){n.teardown()}}}(To),function(e){var t=/^hook:/;e.prototype.$on=function(e,r){var a=this;if(Nt(e))for(var n=0,o=e.length;n<o;n++)a.$on(e[n],r);else(a._events[e]||(a._events[e]=[])).push(r),t.test(e)&&(a._hasHookEvent=!0);return a},e.prototype.$once=function(e,t){var r=this;function a(){r.$off(e,a),t.apply(r,arguments)}return a.fn=t,r.$on(e,a),r},e.prototype.$off=function(e,t){var r=this;if(!arguments.length)return r._events=Object.create(null),r;if(Nt(e)){for(var a=0,n=e.length;a<n;a++)r.$off(e[a],t);return r}var o,i=r._events[e];if(!i)return r;if(!t)return r._events[e]=null,r;for(var s=i.length;s--;)if((o=i[s])===t||o.fn===t){i.splice(s,1);break}return r},e.prototype.$emit=function(e){var t=this,r=t._events[e];if(r){r=r.length>1?lr(r):r;for(var a=lr(arguments,1),n='event handler for "'.concat(e,'"'),o=0,i=r.length;o<i;o++)nn(r[o],t,a,t,n)}return t}}(To),function(e){e.prototype._update=function(e,t){var r=this,a=r.$el,n=r._vnode,o=An(r);r._vnode=e,r.$el=n?r.__patch__(n,e):r.__patch__(r.$el,e,t,!1),o(),a&&(a.__vue__=null),r.$el&&(r.$el.__vue__=r),r.$vnode&&r.$parent&&r.$vnode===r.$parent._vnode&&(r.$parent.$el=r.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){On(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||Qt(t.$children,e),e._scope.stop(),e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),On(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(To),function(e){ja(e.prototype),e.prototype.$nextTick=function(e){return yn(e,this)},e.prototype._render=function(){var e,t=this,r=t.$options,a=r.render,n=r._parentVnode;n&&(t.$scopedSlots=Ga(t.$parent,n.data.scopedSlots,t.$slots,t.$scopedSlots),t._slotsProxy&&Za(t._slotsProxy,t.$scopedSlots)),t.$vnode=n;try{Hr(t),Qa=t,e=a.call(t._renderProxy,t.$createElement)}catch(r){an(r,t,"render"),e=t._vnode}finally{Qa=null,Hr()}return Nt(e)&&1===e.length&&(e=e[0]),e instanceof Kr||(e=qr()),e.parent=n,e}}(To);var Ao=[String,RegExp,Array],Fo={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Ao,exclude:Ao,max:[String,Number]},methods:{cacheVNode:function(){var e=this,t=e.cache,r=e.keys,a=e.vnodeToCache,n=e.keyToCache;if(a){var o=a.tag,i=a.componentInstance,s=a.componentOptions;t[n]={name:Po(s),tag:o,componentInstance:i},r.push(n),this.max&&r.length>parseInt(this.max)&&Mo(t,r[0],r,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)Mo(this.cache,e,this.keys)},mounted:function(){var e=this;this.cacheVNode(),this.$watch("include",(function(t){Eo(e,(function(e){return Do(t,e)}))})),this.$watch("exclude",(function(t){Eo(e,(function(e){return!Do(t,e)}))}))},updated:function(){this.cacheVNode()},render:function(){var e=this.$slots.default,t=en(e),r=t&&t.componentOptions;if(r){var a=Po(r),n=this.include,o=this.exclude;if(n&&(!a||!Do(n,a))||o&&a&&Do(o,a))return t;var i=this.cache,s=this.keys,l=null==t.key?r.Ctor.cid+(r.tag?"::".concat(r.tag):""):t.key;i[l]?(t.componentInstance=i[l].componentInstance,Qt(s,l),s.push(l)):(this.vnodeToCache=t,this.keyToCache=l),t.data.keepAlive=!0}return t||e&&e[0]}}};!function(e){var t={get:function(){return xr}};Object.defineProperty(e,"config",t),e.util={warn:eo,extend:cr,mergeOptions:so,defineReactive:la},e.set=ca,e.delete=da,e.nextTick=yn,e.observable=function(e){return sa(e),e},e.options=Object.create(null),br.forEach((function(t){e.options[t+"s"]=Object.create(null)})),e.options._base=e,cr(e.options.components,Fo),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var r=lr(arguments,1);return r.unshift(this),jt(e.install)?e.install.apply(e,r):jt(e)&&e.apply(null,r),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=so(this.options,e),this}}(e),function(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var r=this,a=r.cid,n=e._Ctor||(e._Ctor={});if(n[a])return n[a];var o=Yn(e)||Yn(r.options),i=function(e){this._init(e)};return(i.prototype=Object.create(r.prototype)).constructor=i,i.cid=t++,i.options=so(r.options,e),i.super=r,i.options.props&&function(e){var t=e.options.props;for(var r in t)go(e.prototype,"_props",r)}(i),i.options.computed&&function(e){var t=e.options.computed;for(var r in t)bo(e.prototype,r,t[r])}(i),i.extend=r.extend,i.mixin=r.mixin,i.use=r.use,br.forEach((function(e){i[e]=r[e]})),o&&(i.options.components[o]=i),i.superOptions=r.options,i.extendOptions=e,i.sealedOptions=cr({},i.options),n[a]=i,i}}(e),function(e){br.forEach((function(t){e[t]=function(e,r){return r?("component"===t&&qt(r)&&(r.name=r.name||e,r=this.options._base.extend(r)),"directive"===t&&jt(r)&&(r={bind:r,update:r}),this.options[t+"s"][e]=r,r):this.options[t+"s"][e]}}))}(e)}(To),Object.defineProperty(To.prototype,"$isServer",{get:Nr}),Object.defineProperty(To.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(To,"FunctionalRenderContext",{value:Gn}),To.version="2.7.5";var Io=Xt("style,class"),Ro=Xt("input,textarea,option,select,progress"),Oo=Xt("contenteditable,draggable,spellcheck"),Lo=Xt("events,caret,typing,plaintext-only"),$o=Xt("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),No="http://www.w3.org/1999/xlink",_o=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},Bo=function(e){return _o(e)?e.slice(6,e.length):""},zo=function(e){return null==e||!1===e};function Uo(e,t){return{staticClass:jo(e.staticClass,t.staticClass),class:Bt(e.class)?[e.class,t.class]:t.class}}function jo(e,t){return e?t?e+" "+t:e:t||""}function Ho(e){return Array.isArray(e)?function(e){for(var t,r="",a=0,n=e.length;a<n;a++)Bt(t=Ho(e[a]))&&""!==t&&(r&&(r+=" "),r+=t);return r}(e):Ht(e)?function(e){var t="";for(var r in e)e[r]&&(t&&(t+=" "),t+=r);return t}(e):"string"==typeof e?e:""}var Ko={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},qo=Xt("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Go=Xt("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Vo=function(e){return qo(e)||Go(e)},Wo=Object.create(null),Yo=Xt("text,number,password,search,email,tel,url"),Xo=Object.freeze({__proto__:null,createElement:function(e,t){var r=document.createElement(e);return"select"!==e||t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&r.setAttribute("multiple","multiple"),r},createElementNS:function(e,t){return document.createElementNS(Ko[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,r){e.insertBefore(t,r)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),Zo={create:function(e,t){Qo(t)},update:function(e,t){e.data.ref!==t.data.ref&&(Qo(e,!0),Qo(t))},destroy:function(e){Qo(e,!0)}};function Qo(e,t){var r=e.data.ref;if(Bt(r)){var a=e.context,n=e.componentInstance||e.elm,o=t?null:n,i=t?void 0:n;if(jt(r))nn(r,a,[o],a,"template ref function");else{var s=e.data.refInFor,l="string"==typeof r||"number"==typeof r,c=ha(r),d=a.$refs;if(l||c)if(s){var u=l?d[r]:r.value;t?Nt(u)&&Qt(u,n):Nt(u)?u.includes(n)||u.push(n):l?(d[r]=[n],Jo(a,r,d[r])):r.value=[n]}else if(l){if(t&&d[r]!==n)return;d[r]=i,Jo(a,r,o)}else if(c){if(t&&r.value!==n)return;r.value=o}}}}function Jo(e,t,r){var a=e._setupState;a&&er(a,t)&&(ha(a[t])?a[t].value=r:a[t]=r)}var ei=new Kr("",{},[]),ti=["create","activate","update","remove","destroy"];function ri(e,t){return e.key===t.key&&e.asyncFactory===t.asyncFactory&&(e.tag===t.tag&&e.isComment===t.isComment&&Bt(e.data)===Bt(t.data)&&function(e,t){if("input"!==e.tag)return!0;var r,a=Bt(r=e.data)&&Bt(r=r.attrs)&&r.type,n=Bt(r=t.data)&&Bt(r=r.attrs)&&r.type;return a===n||Yo(a)&&Yo(n)}(e,t)||zt(e.isAsyncPlaceholder)&&_t(t.asyncFactory.error))}function ai(e,t,r){var a,n,o={};for(a=t;a<=r;++a)Bt(n=e[a].key)&&(o[n]=a);return o}var ni={create:oi,update:oi,destroy:function(e){oi(e,ei)}};function oi(e,t){(e.data.directives||t.data.directives)&&function(e,t){var r,a,n,o=e===ei,i=t===ei,s=si(e.data.directives,e.context),l=si(t.data.directives,t.context),c=[],d=[];for(r in l)a=s[r],n=l[r],a?(n.oldValue=a.value,n.oldArg=a.arg,ci(n,"update",t,e),n.def&&n.def.componentUpdated&&d.push(n)):(ci(n,"bind",t,e),n.def&&n.def.inserted&&c.push(n));if(c.length){var u=function(){for(var r=0;r<c.length;r++)ci(c[r],"inserted",t,e)};o?ka(t,"insert",u):u()}if(d.length&&ka(t,"postpatch",(function(){for(var r=0;r<d.length;r++)ci(d[r],"componentUpdated",t,e)})),!o)for(r in s)l[r]||ci(s[r],"unbind",e,e,i)}(e,t)}var ii=Object.create(null);function si(e,t){var r,a,n=Object.create(null);if(!e)return n;for(r=0;r<e.length;r++)(a=e[r]).modifiers||(a.modifiers=ii),n[li(a)]=a,t._setupState&&t._setupState.__sfc&&(a.def=a.def||lo(t,"_setupState","v-"+a.name)),a.def=a.def||lo(t.$options,"directives",a.name);return n}function li(e){return e.rawName||"".concat(e.name,".").concat(Object.keys(e.modifiers||{}).join("."))}function ci(e,t,r,a,n){var o=e.def&&e.def[t];if(o)try{o(r.elm,e,r,a,n)}catch(a){an(a,r.context,"directive ".concat(e.name," ").concat(t," hook"))}}var di=[Zo,ni];function ui(e,t){var r=t.componentOptions;if(!(Bt(r)&&!1===r.Ctor.options.inheritAttrs||_t(e.data.attrs)&&_t(t.data.attrs))){var a,n,o=t.elm,i=e.data.attrs||{},s=t.data.attrs||{};for(a in(Bt(s.__ob__)||zt(s._v_attr_proxy))&&(s=t.data.attrs=cr({},s)),s)n=s[a],i[a]!==n&&mi(o,a,n,t.data.pre);for(a in(Er||Ar)&&s.value!==i.value&&mi(o,"value",s.value),i)_t(s[a])&&(_o(a)?o.removeAttributeNS(No,Bo(a)):Oo(a)||o.removeAttribute(a))}}function mi(e,t,r,a){a||e.tagName.indexOf("-")>-1?pi(e,t,r):$o(t)?zo(r)?e.removeAttribute(t):(r="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,r)):Oo(t)?e.setAttribute(t,function(e,t){return zo(t)||"false"===t?"false":"contenteditable"===e&&Lo(t)?t:"true"}(t,r)):_o(t)?zo(r)?e.removeAttributeNS(No,Bo(t)):e.setAttributeNS(No,t,r):pi(e,t,r)}function pi(e,t,r){if(zo(r))e.removeAttribute(t);else{if(Er&&!Mr&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==r&&!e.__ieph){var a=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",a)};e.addEventListener("input",a),e.__ieph=!0}e.setAttribute(t,r)}}var hi={create:ui,update:ui};function fi(e,t){var r=t.elm,a=t.data,n=e.data;if(!(_t(a.staticClass)&&_t(a.class)&&(_t(n)||_t(n.staticClass)&&_t(n.class)))){var o=function(e){for(var t=e.data,r=e,a=e;Bt(a.componentInstance);)(a=a.componentInstance._vnode)&&a.data&&(t=Uo(a.data,t));for(;Bt(r=r.parent);)r&&r.data&&(t=Uo(t,r.data));return n=t.staticClass,o=t.class,Bt(n)||Bt(o)?jo(n,Ho(o)):"";var n,o}(t),i=r._transitionClasses;Bt(i)&&(o=jo(o,Ho(i))),o!==r._prevClass&&(r.setAttribute("class",o),r._prevClass=o)}}var gi,yi={create:fi,update:fi};function vi(e,t,r){var a=gi;return function n(){var o=t.apply(null,arguments);null!==o&&xi(e,n,r,a)}}var bi=cn&&!(Rr&&Number(Rr[1])<=53);function wi(e,t,r,a){if(bi){var n=Un,o=t;t=o._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=n||e.timeStamp<=0||e.target.ownerDocument!==document)return o.apply(this,arguments)}}gi.addEventListener(e,t,Lr?{capture:r,passive:a}:r)}function xi(e,t,r,a){(a||gi).removeEventListener(e,t._wrapper||t,r)}function Si(e,t){if(!_t(e.data.on)||!_t(t.data.on)){var r=t.data.on||{},a=e.data.on||{};gi=t.elm||e.elm,function(e){if(Bt(e.__r)){var t=Er?"change":"input";e[t]=[].concat(e.__r,e[t]||[]),delete e.__r}Bt(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(r),Sa(r,a,wi,xi,vi,t.context),gi=void 0}}var ki,Ci={create:Si,update:Si,destroy:function(e){return Si(e,ei)}};function Ti(e,t){if(!_t(e.data.domProps)||!_t(t.data.domProps)){var r,a,n=t.elm,o=e.data.domProps||{},i=t.data.domProps||{};for(r in(Bt(i.__ob__)||zt(i._v_attr_proxy))&&(i=t.data.domProps=cr({},i)),o)r in i||(n[r]="");for(r in i){if(a=i[r],"textContent"===r||"innerHTML"===r){if(t.children&&(t.children.length=0),a===o[r])continue;1===n.childNodes.length&&n.removeChild(n.childNodes[0])}if("value"===r&&"PROGRESS"!==n.tagName){n._value=a;var s=_t(a)?"":String(a);Pi(n,s)&&(n.value=s)}else if("innerHTML"===r&&Go(n.tagName)&&_t(n.innerHTML)){(ki=ki||document.createElement("div")).innerHTML="<svg>".concat(a,"</svg>");for(var l=ki.firstChild;n.firstChild;)n.removeChild(n.firstChild);for(;l.firstChild;)n.appendChild(l.firstChild)}else if(a!==o[r])try{n[r]=a}catch(e){}}}}function Pi(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var r=!0;try{r=document.activeElement!==e}catch(e){}return r&&e.value!==t}(e,t)||function(e,t){var r=e.value,a=e._vModifiers;if(Bt(a)){if(a.number)return Yt(r)!==Yt(t);if(a.trim)return r.trim()!==t.trim()}return r!==t}(e,t))}var Di={create:Ti,update:Ti},Ei=tr((function(e){var t={},r=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var a=e.split(r);a.length>1&&(t[a[0].trim()]=a[1].trim())}})),t}));function Mi(e){var t=Ai(e.style);return e.staticStyle?cr(e.staticStyle,t):t}function Ai(e){return Array.isArray(e)?dr(e):"string"==typeof e?Ei(e):e}var Fi,Ii=/^--/,Ri=/\s*!important$/,Oi=function(e,t,r){if(Ii.test(t))e.style.setProperty(t,r);else if(Ri.test(r))e.style.setProperty(ir(t),r.replace(Ri,""),"important");else{var a=$i(t);if(Array.isArray(r))for(var n=0,o=r.length;n<o;n++)e.style[a]=r[n];else e.style[a]=r}},Li=["Webkit","Moz","ms"],$i=tr((function(e){if(Fi=Fi||document.createElement("div").style,"filter"!==(e=ar(e))&&e in Fi)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<Li.length;r++){var a=Li[r]+t;if(a in Fi)return a}}));function Ni(e,t){var r=t.data,a=e.data;if(!(_t(r.staticStyle)&&_t(r.style)&&_t(a.staticStyle)&&_t(a.style))){var n,o,i=t.elm,s=a.staticStyle,l=a.normalizedStyle||a.style||{},c=s||l,d=Ai(t.data.style)||{};t.data.normalizedStyle=Bt(d.__ob__)?cr({},d):d;var u=function(e,t){for(var r,a={},n=e;n.componentInstance;)(n=n.componentInstance._vnode)&&n.data&&(r=Mi(n.data))&&cr(a,r);(r=Mi(e.data))&&cr(a,r);for(var o=e;o=o.parent;)o.data&&(r=Mi(o.data))&&cr(a,r);return a}(t);for(o in c)_t(u[o])&&Oi(i,o,"");for(o in u)(n=u[o])!==c[o]&&Oi(i,o,null==n?"":n)}}var _i={create:Ni,update:Ni},Bi=/\s+/;function zi(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(Bi).forEach((function(t){return e.classList.add(t)})):e.classList.add(t);else{var r=" ".concat(e.getAttribute("class")||""," ");r.indexOf(" "+t+" ")<0&&e.setAttribute("class",(r+t).trim())}}function Ui(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(Bi).forEach((function(t){return e.classList.remove(t)})):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var r=" ".concat(e.getAttribute("class")||""," "),a=" "+t+" ";r.indexOf(a)>=0;)r=r.replace(a," ");(r=r.trim())?e.setAttribute("class",r):e.removeAttribute("class")}}function ji(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&cr(t,Hi(e.name||"v")),cr(t,e),t}return"string"==typeof e?Hi(e):void 0}}var Hi=tr((function(e){return{enterClass:"".concat(e,"-enter"),enterToClass:"".concat(e,"-enter-to"),enterActiveClass:"".concat(e,"-enter-active"),leaveClass:"".concat(e,"-leave"),leaveToClass:"".concat(e,"-leave-to"),leaveActiveClass:"".concat(e,"-leave-active")}})),Ki=Pr&&!Mr,qi="transition",Gi="animation",Vi="transition",Wi="transitionend",Yi="animation",Xi="animationend";Ki&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Vi="WebkitTransition",Wi="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Yi="WebkitAnimation",Xi="webkitAnimationEnd"));var Zi=Pr?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function Qi(e){Zi((function(){Zi(e)}))}function Ji(e,t){var r=e._transitionClasses||(e._transitionClasses=[]);r.indexOf(t)<0&&(r.push(t),zi(e,t))}function es(e,t){e._transitionClasses&&Qt(e._transitionClasses,t),Ui(e,t)}function ts(e,t,r){var a=as(e,t),n=a.type,o=a.timeout,i=a.propCount;if(!n)return r();var s=n===qi?Wi:Xi,l=0,c=function(){e.removeEventListener(s,d),r()},d=function(t){t.target===e&&++l>=i&&c()};setTimeout((function(){l<i&&c()}),o+1),e.addEventListener(s,d)}var rs=/\b(transform|all)(,|$)/;function as(e,t){var r,a=window.getComputedStyle(e),n=(a[Vi+"Delay"]||"").split(", "),o=(a[Vi+"Duration"]||"").split(", "),i=ns(n,o),s=(a[Yi+"Delay"]||"").split(", "),l=(a[Yi+"Duration"]||"").split(", "),c=ns(s,l),d=0,u=0;return t===qi?i>0&&(r=qi,d=i,u=o.length):t===Gi?c>0&&(r=Gi,d=c,u=l.length):u=(r=(d=Math.max(i,c))>0?i>c?qi:Gi:null)?r===qi?o.length:l.length:0,{type:r,timeout:d,propCount:u,hasTransform:r===qi&&rs.test(a[Vi+"Property"])}}function ns(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map((function(t,r){return os(t)+os(e[r])})))}function os(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function is(e,t){var r=e.elm;Bt(r._leaveCb)&&(r._leaveCb.cancelled=!0,r._leaveCb());var a=ji(e.data.transition);if(!_t(a)&&!Bt(r._enterCb)&&1===r.nodeType){for(var n=a.css,o=a.type,i=a.enterClass,s=a.enterToClass,l=a.enterActiveClass,c=a.appearClass,d=a.appearToClass,u=a.appearActiveClass,m=a.beforeEnter,p=a.enter,h=a.afterEnter,f=a.enterCancelled,g=a.beforeAppear,y=a.appear,v=a.afterAppear,b=a.appearCancelled,w=a.duration,x=Mn,S=Mn.$vnode;S&&S.parent;)x=S.context,S=S.parent;var k=!x._isMounted||!e.isRootInsert;if(!k||y||""===y){var C=k&&c?c:i,T=k&&u?u:l,P=k&&d?d:s,D=k&&g||m,E=k&&jt(y)?y:p,M=k&&v||h,A=k&&b||f,F=Yt(Ht(w)?w.enter:w),I=!1!==n&&!Mr,R=cs(E),O=r._enterCb=gr((function(){I&&(es(r,P),es(r,T)),O.cancelled?(I&&es(r,C),A&&A(r)):M&&M(r),r._enterCb=null}));e.data.show||ka(e,"insert",(function(){var t=r.parentNode,a=t&&t._pending&&t._pending[e.key];a&&a.tag===e.tag&&a.elm._leaveCb&&a.elm._leaveCb(),E&&E(r,O)})),D&&D(r),I&&(Ji(r,C),Ji(r,T),Qi((function(){es(r,C),O.cancelled||(Ji(r,P),R||(ls(F)?setTimeout(O,F):ts(r,o,O)))}))),e.data.show&&(t&&t(),E&&E(r,O)),I||R||O()}}}function ss(e,t){var r=e.elm;Bt(r._enterCb)&&(r._enterCb.cancelled=!0,r._enterCb());var a=ji(e.data.transition);if(_t(a)||1!==r.nodeType)return t();if(!Bt(r._leaveCb)){var n=a.css,o=a.type,i=a.leaveClass,s=a.leaveToClass,l=a.leaveActiveClass,c=a.beforeLeave,d=a.leave,u=a.afterLeave,m=a.leaveCancelled,p=a.delayLeave,h=a.duration,f=!1!==n&&!Mr,g=cs(d),y=Yt(Ht(h)?h.leave:h),v=r._leaveCb=gr((function(){r.parentNode&&r.parentNode._pending&&(r.parentNode._pending[e.key]=null),f&&(es(r,s),es(r,l)),v.cancelled?(f&&es(r,i),m&&m(r)):(t(),u&&u(r)),r._leaveCb=null}));p?p(b):b()}function b(){v.cancelled||(!e.data.show&&r.parentNode&&((r.parentNode._pending||(r.parentNode._pending={}))[e.key]=e),c&&c(r),f&&(Ji(r,i),Ji(r,l),Qi((function(){es(r,i),v.cancelled||(Ji(r,s),g||(ls(y)?setTimeout(v,y):ts(r,o,v)))}))),d&&d(r,v),f||g||v())}}function ls(e){return"number"==typeof e&&!isNaN(e)}function cs(e){if(_t(e))return!1;var t=e.fns;return Bt(t)?cs(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function ds(e,t){!0!==t.data.show&&is(t)}var us=function(e){var t,r,a={},n=e.modules,o=e.nodeOps;for(t=0;t<ti.length;++t)for(a[ti[t]]=[],r=0;r<n.length;++r)Bt(n[r][ti[t]])&&a[ti[t]].push(n[r][ti[t]]);function i(e){var t=o.parentNode(e);Bt(t)&&o.removeChild(t,e)}function s(e,t,r,n,i,s,u){if(Bt(e.elm)&&Bt(s)&&(e=s[u]=Vr(e)),e.isRootInsert=!i,!function(e,t,r,n){var o=e.data;if(Bt(o)){var i=Bt(e.componentInstance)&&o.keepAlive;if(Bt(o=o.hook)&&Bt(o=o.init)&&o(e,!1),Bt(e.componentInstance))return l(e,t),c(r,e.elm,n),zt(i)&&function(e,t,r,n){for(var o,i=e;i.componentInstance;)if(Bt(o=(i=i.componentInstance._vnode).data)&&Bt(o=o.transition)){for(o=0;o<a.activate.length;++o)a.activate[o](ei,i);t.push(i);break}c(r,e.elm,n)}(e,t,r,n),!0}}(e,t,r,n)){var h=e.data,f=e.children,g=e.tag;Bt(g)?(e.elm=e.ns?o.createElementNS(e.ns,g):o.createElement(g,e),p(e),d(e,f,t),Bt(h)&&m(e,t),c(r,e.elm,n)):zt(e.isComment)?(e.elm=o.createComment(e.text),c(r,e.elm,n)):(e.elm=o.createTextNode(e.text),c(r,e.elm,n))}}function l(e,t){Bt(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,u(e)?(m(e,t),p(e)):(Qo(e),t.push(e))}function c(e,t,r){Bt(e)&&(Bt(r)?o.parentNode(r)===e&&o.insertBefore(e,t,r):o.appendChild(e,t))}function d(e,t,r){if(Nt(t))for(var a=0;a<t.length;++a)s(t[a],r,e.elm,null,!0,t,a);else Ut(e.text)&&o.appendChild(e.elm,o.createTextNode(String(e.text)))}function u(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return Bt(e.tag)}function m(e,r){for(var n=0;n<a.create.length;++n)a.create[n](ei,e);Bt(t=e.data.hook)&&(Bt(t.create)&&t.create(ei,e),Bt(t.insert)&&r.push(e))}function p(e){var t;if(Bt(t=e.fnScopeId))o.setStyleScope(e.elm,t);else for(var r=e;r;)Bt(t=r.context)&&Bt(t=t.$options._scopeId)&&o.setStyleScope(e.elm,t),r=r.parent;Bt(t=Mn)&&t!==e.context&&t!==e.fnContext&&Bt(t=t.$options._scopeId)&&o.setStyleScope(e.elm,t)}function h(e,t,r,a,n,o){for(;a<=n;++a)s(r[a],o,e,t,!1,r,a)}function f(e){var t,r,n=e.data;if(Bt(n))for(Bt(t=n.hook)&&Bt(t=t.destroy)&&t(e),t=0;t<a.destroy.length;++t)a.destroy[t](e);if(Bt(t=e.children))for(r=0;r<e.children.length;++r)f(e.children[r])}function g(e,t,r){for(;t<=r;++t){var a=e[t];Bt(a)&&(Bt(a.tag)?(y(a),f(a)):i(a.elm))}}function y(e,t){if(Bt(t)||Bt(e.data)){var r,n=a.remove.length+1;for(Bt(t)?t.listeners+=n:t=function(e,t){function r(){0==--r.listeners&&i(e)}return r.listeners=t,r}(e.elm,n),Bt(r=e.componentInstance)&&Bt(r=r._vnode)&&Bt(r.data)&&y(r,t),r=0;r<a.remove.length;++r)a.remove[r](e,t);Bt(r=e.data.hook)&&Bt(r=r.remove)?r(e,t):t()}else i(e.elm)}function v(e,t,r,a){for(var n=r;n<a;n++){var o=t[n];if(Bt(o)&&ri(e,o))return n}}function b(e,t,r,n,i,l){if(e!==t){Bt(t.elm)&&Bt(n)&&(t=n[i]=Vr(t));var c=t.elm=e.elm;if(zt(e.isAsyncPlaceholder))Bt(t.asyncFactory.resolved)?S(e.elm,t,r):t.isAsyncPlaceholder=!0;else if(zt(t.isStatic)&&zt(e.isStatic)&&t.key===e.key&&(zt(t.isCloned)||zt(t.isOnce)))t.componentInstance=e.componentInstance;else{var d,m=t.data;Bt(m)&&Bt(d=m.hook)&&Bt(d=d.prepatch)&&d(e,t);var p=e.children,f=t.children;if(Bt(m)&&u(t)){for(d=0;d<a.update.length;++d)a.update[d](e,t);Bt(d=m.hook)&&Bt(d=d.update)&&d(e,t)}_t(t.text)?Bt(p)&&Bt(f)?p!==f&&function(e,t,r,a,n){for(var i,l,c,d=0,u=0,m=t.length-1,p=t[0],f=t[m],y=r.length-1,w=r[0],x=r[y],S=!n;d<=m&&u<=y;)_t(p)?p=t[++d]:_t(f)?f=t[--m]:ri(p,w)?(b(p,w,a,r,u),p=t[++d],w=r[++u]):ri(f,x)?(b(f,x,a,r,y),f=t[--m],x=r[--y]):ri(p,x)?(b(p,x,a,r,y),S&&o.insertBefore(e,p.elm,o.nextSibling(f.elm)),p=t[++d],x=r[--y]):ri(f,w)?(b(f,w,a,r,u),S&&o.insertBefore(e,f.elm,p.elm),f=t[--m],w=r[++u]):(_t(i)&&(i=ai(t,d,m)),_t(l=Bt(w.key)?i[w.key]:v(w,t,d,m))?s(w,a,e,p.elm,!1,r,u):ri(c=t[l],w)?(b(c,w,a,r,u),t[l]=void 0,S&&o.insertBefore(e,c.elm,p.elm)):s(w,a,e,p.elm,!1,r,u),w=r[++u]);d>m?h(e,_t(r[y+1])?null:r[y+1].elm,r,u,y,a):u>y&&g(t,d,m)}(c,p,f,r,l):Bt(f)?(Bt(e.text)&&o.setTextContent(c,""),h(c,null,f,0,f.length-1,r)):Bt(p)?g(p,0,p.length-1):Bt(e.text)&&o.setTextContent(c,""):e.text!==t.text&&o.setTextContent(c,t.text),Bt(m)&&Bt(d=m.hook)&&Bt(d=d.postpatch)&&d(e,t)}}}function w(e,t,r){if(zt(r)&&Bt(e.parent))e.parent.data.pendingInsert=t;else for(var a=0;a<t.length;++a)t[a].data.hook.insert(t[a])}var x=Xt("attrs,class,staticClass,staticStyle,key");function S(e,t,r,a){var n,o=t.tag,i=t.data,s=t.children;if(a=a||i&&i.pre,t.elm=e,zt(t.isComment)&&Bt(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(Bt(i)&&(Bt(n=i.hook)&&Bt(n=n.init)&&n(t,!0),Bt(n=t.componentInstance)))return l(t,r),!0;if(Bt(o)){if(Bt(s))if(e.hasChildNodes())if(Bt(n=i)&&Bt(n=n.domProps)&&Bt(n=n.innerHTML)){if(n!==e.innerHTML)return!1}else{for(var c=!0,u=e.firstChild,p=0;p<s.length;p++){if(!u||!S(u,s[p],r,a)){c=!1;break}u=u.nextSibling}if(!c||u)return!1}else d(t,s,r);if(Bt(i)){var h=!1;for(var f in i)if(!x(f)){h=!0,m(t,r);break}!h&&i.class&&wn(i.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,r,n){if(!_t(t)){var i,l=!1,c=[];if(_t(e))l=!0,s(t,c);else{var d=Bt(e.nodeType);if(!d&&ri(e,t))b(e,t,c,null,null,n);else{if(d){if(1===e.nodeType&&e.hasAttribute(vr)&&(e.removeAttribute(vr),r=!0),zt(r)&&S(e,t,c))return w(t,c,!0),e;i=e,e=new Kr(o.tagName(i).toLowerCase(),{},[],void 0,i)}var m=e.elm,p=o.parentNode(m);if(s(t,c,m._leaveCb?null:p,o.nextSibling(m)),Bt(t.parent))for(var h=t.parent,y=u(t);h;){for(var v=0;v<a.destroy.length;++v)a.destroy[v](h);if(h.elm=t.elm,y){for(var x=0;x<a.create.length;++x)a.create[x](ei,h);var k=h.data.hook.insert;if(k.merged)for(var C=1;C<k.fns.length;C++)k.fns[C]()}else Qo(h);h=h.parent}Bt(p)?g([e],0,0):Bt(e.tag)&&f(e)}}return w(t,c,l),t.elm}Bt(e)&&f(e)}}({nodeOps:Xo,modules:[hi,yi,Ci,Di,_i,Pr?{create:ds,activate:ds,remove:function(e,t){!0!==e.data.show?ss(e,t):t()}}:{}].concat(di)});Mr&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&bs(e,"input")}));var ms={inserted:function(e,t,r,a){"select"===r.tag?(a.elm&&!a.elm._vOptions?ka(r,"postpatch",(function(){ms.componentUpdated(e,t,r)})):ps(e,t,r.context),e._vOptions=[].map.call(e.options,gs)):("textarea"===r.tag||Yo(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",ys),e.addEventListener("compositionend",vs),e.addEventListener("change",vs),Mr&&(e.vmodel=!0)))},componentUpdated:function(e,t,r){if("select"===r.tag){ps(e,t,r.context);var a=e._vOptions,n=e._vOptions=[].map.call(e.options,gs);n.some((function(e,t){return!hr(e,a[t])}))&&(e.multiple?t.value.some((function(e){return fs(e,n)})):t.value!==t.oldValue&&fs(t.value,n))&&bs(e,"change")}}};function ps(e,t,r){hs(e,t),(Er||Ar)&&setTimeout((function(){hs(e,t)}),0)}function hs(e,t,r){var a=t.value,n=e.multiple;if(!n||Array.isArray(a)){for(var o,i,s=0,l=e.options.length;s<l;s++)if(i=e.options[s],n)o=fr(a,gs(i))>-1,i.selected!==o&&(i.selected=o);else if(hr(gs(i),a))return void(e.selectedIndex!==s&&(e.selectedIndex=s));n||(e.selectedIndex=-1)}}function fs(e,t){return t.every((function(t){return!hr(t,e)}))}function gs(e){return"_value"in e?e._value:e.value}function ys(e){e.target.composing=!0}function vs(e){e.target.composing&&(e.target.composing=!1,bs(e.target,"input"))}function bs(e,t){var r=document.createEvent("HTMLEvents");r.initEvent(t,!0,!0),e.dispatchEvent(r)}function ws(e){return!e.componentInstance||e.data&&e.data.transition?e:ws(e.componentInstance._vnode)}var xs={model:ms,show:{bind:function(e,t,r){var a=t.value,n=(r=ws(r)).data&&r.data.transition,o=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;a&&n?(r.data.show=!0,is(r,(function(){e.style.display=o}))):e.style.display=a?o:"none"},update:function(e,t,r){var a=t.value;!a!=!t.oldValue&&((r=ws(r)).data&&r.data.transition?(r.data.show=!0,a?is(r,(function(){e.style.display=e.__vOriginalDisplay})):ss(r,(function(){e.style.display="none"}))):e.style.display=a?e.__vOriginalDisplay:"none")},unbind:function(e,t,r,a,n){n||(e.style.display=e.__vOriginalDisplay)}}},Ss={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ks(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?ks(en(t.children)):e}function Cs(e){var t={},r=e.$options;for(var a in r.propsData)t[a]=e[a];var n=r._parentListeners;for(var a in n)t[ar(a)]=n[a];return t}function Ts(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var Ps=function(e){return e.tag||qa(e)},Ds=function(e){return"show"===e.name},Es={name:"transition",props:Ss,abstract:!0,render:function(e){var t=this,r=this.$slots.default;if(r&&(r=r.filter(Ps)).length){var a=this.mode,n=r[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return n;var o=ks(n);if(!o)return n;if(this._leaving)return Ts(e,n);var i="__transition-".concat(this._uid,"-");o.key=null==o.key?o.isComment?i+"comment":i+o.tag:Ut(o.key)?0===String(o.key).indexOf(i)?o.key:i+o.key:o.key;var s=(o.data||(o.data={})).transition=Cs(this),l=this._vnode,c=ks(l);if(o.data.directives&&o.data.directives.some(Ds)&&(o.data.show=!0),c&&c.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(o,c)&&!qa(c)&&(!c.componentInstance||!c.componentInstance._vnode.isComment)){var d=c.data.transition=cr({},s);if("out-in"===a)return this._leaving=!0,ka(d,"afterLeave",(function(){t._leaving=!1,t.$forceUpdate()})),Ts(e,n);if("in-out"===a){if(qa(o))return l;var u,m=function(){u()};ka(s,"afterEnter",m),ka(s,"enterCancelled",m),ka(d,"delayLeave",(function(e){u=e}))}}return n}}},Ms=cr({tag:String,moveClass:String},Ss);delete Ms.mode;var As={props:Ms,beforeMount:function(){var e=this,t=this._update;this._update=function(r,a){var n=An(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,n(),t.call(e,r,a)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",r=Object.create(null),a=this.prevChildren=this.children,n=this.$slots.default||[],o=this.children=[],i=Cs(this),s=0;s<n.length;s++)(d=n[s]).tag&&null!=d.key&&0!==String(d.key).indexOf("__vlist")&&(o.push(d),r[d.key]=d,(d.data||(d.data={})).transition=i);if(a){var l=[],c=[];for(s=0;s<a.length;s++){var d;(d=a[s]).data.transition=i,d.data.pos=d.elm.getBoundingClientRect(),r[d.key]?l.push(d):c.push(d)}this.kept=e(t,null,l),this.removed=c}return e(t,null,o)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(Fs),e.forEach(Is),e.forEach(Rs),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var r=e.elm,a=r.style;Ji(r,t),a.transform=a.WebkitTransform=a.transitionDuration="",r.addEventListener(Wi,r._moveCb=function e(a){a&&a.target!==r||a&&!/transform$/.test(a.propertyName)||(r.removeEventListener(Wi,e),r._moveCb=null,es(r,t))})}})))},methods:{hasMove:function(e,t){if(!Ki)return!1;if(this._hasMove)return this._hasMove;var r=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){Ui(r,e)})),zi(r,t),r.style.display="none",this.$el.appendChild(r);var a=as(r);return this.$el.removeChild(r),this._hasMove=a.hasTransform}}};function Fs(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function Is(e){e.data.newPos=e.elm.getBoundingClientRect()}function Rs(e){var t=e.data.pos,r=e.data.newPos,a=t.left-r.left,n=t.top-r.top;if(a||n){e.data.moved=!0;var o=e.elm.style;o.transform=o.WebkitTransform="translate(".concat(a,"px,").concat(n,"px)"),o.transitionDuration="0s"}}var Os={Transition:Es,TransitionGroup:As};function Ls(e){return Ls="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ls(e)}function $s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Ns(){return"undefined"!=typeof Reflect&&Reflect.defineMetadata&&Reflect.getOwnMetadataKeys}function _s(e,t){Bs(e,t),Object.getOwnPropertyNames(t.prototype).forEach((function(r){Bs(e.prototype,t.prototype,r)})),Object.getOwnPropertyNames(t).forEach((function(r){Bs(e,t,r)}))}function Bs(e,t,r){(r?Reflect.getOwnMetadataKeys(t,r):Reflect.getOwnMetadataKeys(t)).forEach((function(a){var n=r?Reflect.getOwnMetadata(a,t,r):Reflect.getOwnMetadata(a,t);r?Reflect.defineMetadata(a,n,e,r):Reflect.defineMetadata(a,n,e)}))}To.config.mustUseProp=function(e,t,r){return"value"===r&&Ro(e)&&"button"!==t||"selected"===r&&"option"===e||"checked"===r&&"input"===e||"muted"===r&&"video"===e},To.config.isReservedTag=Vo,To.config.isReservedAttr=Io,To.config.getTagNamespace=function(e){return Go(e)?"svg":"math"===e?"math":void 0},To.config.isUnknownElement=function(e){if(!Pr)return!0;if(Vo(e))return!1;if(e=e.toLowerCase(),null!=Wo[e])return Wo[e];var t=document.createElement(e);return e.indexOf("-")>-1?Wo[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:Wo[e]=/HTMLUnknownElement/.test(t.toString())},cr(To.options.directives,xs),cr(To.options.components,Os),To.prototype.__patch__=Pr?us:ur,To.prototype.$mount=function(e,t){return function(e,t,r){var a;e.$el=t,e.$options.render||(e.$options.render=qr),On(e,"beforeMount"),a=function(){e._update(e._render(),r)},new Cn(e,a,ur,{before:function(){e._isMounted&&!e._isDestroyed&&On(e,"beforeUpdate")}},!0),r=!1;var n=e._preWatchers;if(n)for(var o=0;o<n.length;o++)n[o].run();return null==e.$vnode&&(e._isMounted=!0,On(e,"mounted")),e}(this,e=e&&Pr?function(e){return"string"==typeof e?document.querySelector(e)||document.createElement("div"):e}(e):void 0,t)},Pr&&setTimeout((function(){xr.devtools&&_r&&_r.emit("init",To)}),0);var zs={__proto__:[]}instanceof Array;function Us(e,t){var r=t.prototype._init;t.prototype._init=function(){var t=this,r=Object.getOwnPropertyNames(e);if(e.$options.props)for(var a in e.$options.props)e.hasOwnProperty(a)||r.push(a);r.forEach((function(r){Object.defineProperty(t,r,{get:function(){return e[r]},set:function(t){e[r]=t},configurable:!0})}))};var a=new t;t.prototype._init=r;var n={};return Object.keys(a).forEach((function(e){void 0!==a[e]&&(n[e]=a[e])})),n}var js=["data","beforeCreate","created","beforeMount","mounted","beforeDestroy","destroyed","beforeUpdate","updated","activated","deactivated","render","errorCaptured","serverPrefetch"];function Hs(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};t.name=t.name||e._componentTag||e.name;var r=e.prototype;Object.getOwnPropertyNames(r).forEach((function(e){if("constructor"!==e)if(js.indexOf(e)>-1)t[e]=r[e];else{var a=Object.getOwnPropertyDescriptor(r,e);void 0!==a.value?"function"==typeof a.value?(t.methods||(t.methods={}))[e]=a.value:(t.mixins||(t.mixins=[])).push({data:function(){return $s({},e,a.value)}}):(a.get||a.set)&&((t.computed||(t.computed={}))[e]={get:a.get,set:a.set})}})),(t.mixins||(t.mixins=[])).push({data:function(){return Us(this,e)}});var a=e.__decorators__;a&&(a.forEach((function(e){return e(t)})),delete e.__decorators__);var n=Object.getPrototypeOf(e.prototype),o=n instanceof To?n.constructor:To,i=o.extend(t);return qs(i,e,o),Ns()&&_s(i,e),i}var Ks={prototype:!0,arguments:!0,callee:!0,caller:!0};function qs(e,t,r){Object.getOwnPropertyNames(t).forEach((function(a){if(!Ks[a]){var n=Object.getOwnPropertyDescriptor(e,a);if(!n||n.configurable){var o,i,s=Object.getOwnPropertyDescriptor(t,a);if(!zs){if("cid"===a)return;var l=Object.getOwnPropertyDescriptor(r,a);if(i=Ls(o=s.value),null!=o&&("object"===i||"function"===i)&&l&&l.value===s.value)return}Object.defineProperty(e,a,s)}}}))}function Gs(e){return"function"==typeof e?Hs(e):function(t){return Hs(t,e)}}Gs.registerHooks=function(e){var t;js.push.apply(js,function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(t=e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}())};const Vs=Gs;"undefined"!=typeof Reflect&&Reflect.getMetadata;const Ws={[at.lightFighter]:"Leichter Jäger",[at.heavyFighter]:"Schwerer Jäger",[at.cruiser]:"Kreuzer",[at.battleship]:"Schlachtschiff",[at.battlecruiser]:"Schlachtkreuzer",[at.bomber]:"Bomber",[at.destroyer]:"Zerstörer",[at.deathStar]:"Todesstern",[at.reaper]:"Reaper",[at.pathfinder]:"Pathfinder",[at.smallCargo]:"Kleiner Transporter",[at.largeCargo]:"Großer Transporter",[at.colonyShip]:"Kolonieschiff",[at.recycler]:"Recycler",[at.espionageProbe]:"Spionagesonde",[at.solarSatellite]:"Solarsatellit",[at.crawler]:"Crawler"};var Ys;!function(e){e[e.rocketLauncher=401]="rocketLauncher",e[e.lightLaser=402]="lightLaser",e[e.heavyLaser=403]="heavyLaser",e[e.gaussCannon=404]="gaussCannon",e[e.ionCannon=405]="ionCannon",e[e.plasmaTurret=406]="plasmaTurret",e[e.smallShieldDome=407]="smallShieldDome",e[e.largeShieldDome=408]="largeShieldDome"}(Ys||(Ys={}));const Xs={[Ys.rocketLauncher]:"Raketenwerfer",[Ys.lightLaser]:"Leichtes Lasergeschütz",[Ys.heavyLaser]:"Schweres Lasergeschütz",[Ys.gaussCannon]:"Gaußkanone",[Ys.ionCannon]:"Ionengeschütz",[Ys.plasmaTurret]:"Plasmawerfer",[Ys.smallShieldDome]:"Kleine Schildkuppel",[Ys.largeShieldDome]:"Große Schildkuppel"},Zs={[We.metalMine]:"Metallmine",[We.metalStorage]:"Metallspeicher",[We.crystalMine]:"Kristallmine",[We.crystalStorage]:"Kristallspeicher",[We.deuteriumSynthesizer]:"Deuterium-Synthetisierer",[We.deuteriumTank]:"Deuteriumtank",[We.solarPlant]:"Solarkraftwerk",[We.fusionReactor]:"Fusionskraftwerk",[We.roboticsFactory]:"Roboterfabrik",[We.naniteFactory]:"Nanitenfabrik",[We.shipyard]:"Raumschiffswerft",[We.spaceDock]:"Raumdock",[We.missileSilo]:"Raketensilo",[We.researchLab]:"Forschungslabor",[We.allianceDepot]:"Allianzdepot",[We.terraformer]:"Terraformer",[We.lunarBase]:"Mondbasis",[We.sensorPhalanx]:"Sensorphalanx",[We.jumpGate]:"Sprungtor"},Qs={[ot.energyTechnology]:"Energietechnik",[ot.laserTechnology]:"Lasertechnik",[ot.ionTechnology]:"Ionentechnik",[ot.hyperspaceTechnology]:"Hyperraumtechnik",[ot.plasmaTechnology]:"Plasmatechnik",[ot.espionageTechnology]:"Spionagetechnik",[ot.computerTechnology]:"Computertechnik",[ot.astrophysics]:"Astrophysik",[ot.intergalacticResearchNetwork]:"Intergalaktisches Forschungsnetzwerk",[ot.gravitonTechnology]:"Gravitonforschung",[ot.combustionDrive]:"Verbrennungstriebwerk",[ot.impulseDrive]:"Impulstriebwerk",[ot.hyperspaceDrive]:"Hyperraumantrieb",[ot.weaponsTechnology]:"Waffentechnik",[ot.shieldingTechnology]:"Schildtechnik",[ot.armorTechnology]:"Raumschiffpanzerung"},Js={[lt.none]:"Keine Lebensform",[lt.humans]:"Menschen",[lt.rocktal]:"Rock'tal",[lt.mechas]:"Mechas",[lt.kaelesh]:"Kaelesh"},el={[dt.residentialSector]:"Wohnsektor",[dt.biosphereFarm]:"Biosphären-Farm",[dt.researchCentre]:"Forschungszentrum",[dt.academyOfSciences]:"Akademie der Wissenschaften",[dt.neuroCalibrationCentre]:"Neuro-Kalibrierungszentrum",[dt.highEnergySmelting]:"Hochenergie-Schmelze",[dt.foodSilo]:"Nahrungsspeicher",[dt.fusionPoweredProduction]:"Fusionsbetriebene Förderung",[dt.skyscraper]:"Skyscraper",[dt.biotechLab]:"Biotech-Labor",[dt.metropolis]:"Metropolis",[dt.planetaryShield]:"Planetar-Schild",[dt.meditationEnclave]:"Meditationsenklave",[dt.crystalFarm]:"Kristallzucht",[dt.runeTechnologium]:"Runentechnologikum",[dt.runeForge]:"Runenschmiede",[dt.oriktorium]:"Oriktorium",[dt.magmaForge]:"Magma-Schmelze",[dt.disruptionChamber]:"Disruptionskammer",[dt.megalith]:"Felsenmonument",[dt.crystalRefinery]:"Kristall-Raffinerie",[dt.deuteriumSynthesiser]:"Deuterium-Syntonisierer",[dt.mineralResearchCentre]:"Mineral-Forschungszentrum",[dt.advancedRecyclingPlant]:"Hochleistungs-Verwertungsanlage",[dt.assemblyLine]:"Fertigungsstraße",[dt.fusionCellFactory]:"Fusionszellen-Fabrik",[dt.roboticsResearchCentre]:"Robotik-Forschungszentrum",[dt.updateNetwork]:"Update-Netzwerk",[dt.quantumComputerCentre]:"Quanten-Computerzentrum",[dt.automatisedAssemblyCentre]:"Automatisiertes Montagezentrum",[dt.highPerformanceTransformer]:"Hochleistungs-Transformator",[dt.microchipAssemblyLine]:"Mikrochip-Fertigungsstraße",[dt.productionAssemblyHall]:"Fließband-Montagehalle",[dt.highPerformanceSynthesiser]:"Hochleistungs-Synthetisierer",[dt.chipMassProduction]:"Chip-Massenproduktion",[dt.nanoRepairBots]:"Nano-Reparaturbots",[dt.sanctuary]:"Refugium",[dt.antimatterCondenser]:"Antimaterie-Kondensator",[dt.vortexChamber]:"Vortexkammer",[dt.hallsOfRealisation]:"Hallen der Erkenntnis",[dt.forumOfTranscendence]:"Forum der Transzendenz",[dt.antimatterConvector]:"Antimaterie-Konvektor",[dt.cloningLaboratory]:"Klonlabor",[dt.chrysalisAccelerator]:"Chrysalis-Akzelerator",[dt.bioModifier]:"Bio-Modifikator",[dt.psionicModulator]:"Psionischer Modulator",[dt.shipManufacturingHall]:"Schiffs-Fabrikationshalle",[dt.supraRefractor]:"Supra-Refraktor"},tl={[mt.intergalacticEnvoys]:"Intergalaktische Botschafter",[mt.highPerformanceExtractors]:"Hochleistungs-Extraktoren",[mt.fusionDrives]:"Fusionstriebwerke",[mt.stealthFieldGenerator]:"Tarnfeld-Generator",[mt.orbitalDen]:"Orbital-Versteck",[mt.researchAI]:"Forschungs-KI",[mt.highPerformanceTerraformer]:"Hochleistungs-Terraformer",[mt.enhancedProductionTechnologies]:"Verbesserte Förderungstechnologien",[mt.lightFighterMkII]:"Leichter Jäger Mk II",[mt.cruiserMkII]:"Kreuzer Mk II",[mt.improvedLabTechnology]:"Verbesserte Labortechnik",[mt.plasmaTerraformer]:"Plasma-Terraformer",[mt.lowTemperatureDrives]:"Niedrigtemperatur-Triebwerke",[mt.bomberMkII]:"Bomber Mk II",[mt.destroyerMkII]:"Zerstörer Mk II",[mt.battlecruiserMkII]:"Schlachtkreuzer Mk II",[mt.robotAssistants]:"Roboter-Assistenten",[mt.supercomputer]:"Supercomputer",[mt.volcanicBatteries]:"Vulkanische Batterien",[mt.acousticScanning]:"Akustische Sondierung",[mt.highEnergyPumpSystems]:"Hochenergie-Pumpsysteme",[mt.cargoHoldExpansion_CivilianShips]:"Laderaum-Erweiterung (Zivile Schiffe)",[mt.magmaPoweredProduction]:"Magmabetriebene Förderung",[mt.geothermalPowerPlants]:"Geothermie-Kraftwerke",[mt.depthSounding]:"Tiefensondierung",[mt.ionCrystalEnhancement_heavyFighter]:"Ionenkristall-Verstärkung (Schwerer Jäger)",[mt.improvedStellarator]:"Verbesserter Stellarator",[mt.hardenedDiamondDrillHeads]:"Gehärtete Diamant-Bohrköpfe",[mt.seismicMiningTechnology]:"Seismische Abbautechnologien",[mt.magmaPoweredPumpSystems]:"Magmabetriebenes Pumpsystem",[mt.ionCrystalModules]:"Ionenkristall-Module",[mt.optimisedSiloConstructionMethod]:"Optimierte Silo-Bauweise",[mt.diamondEnergyTransmitter]:"Diamant-Energietransmitter",[mt.obsidianShieldReinforcement]:"Obsidian-Schildverstärkung",[mt.runeShields]:"Runenschilde",[mt.rocktalCollectorEnhancement]:"Rock`tal-Kollektorverstärkung",[mt.catalyserTechnology]:"Katalysator-Technik",[mt.plasmaDrive]:"Plasma-Antrieb",[mt.efficiencyModule]:"Effizienz-Modul",[mt.depotAI]:"Depot-KI",[mt.generalOverhaul_lightFighter]:"Generalüberholung (Leichter Jäger)",[mt.automatedTransportLines]:"Automatisierte Förderstraßen",[mt.improvedDroneAI]:"Verbesserte Drohnen-KI",[mt.experimentalRecyclingTechnology]:"Experimentelle Wiederaufbereitungstechnik",[mt.generalOverhaul_cruiser]:"Generalüberholung (Kreuzer)",[mt.slingshotAutopilot]:"Slingshot-Autopilot",[mt.highTemperatureSuperconductors]:"Hochtemperatur-Supraleiter",[mt.generalOverhaul_battleship]:"Generalüberholung (Schlachtschiff)",[mt.artificialSwarmIntelligence]:"Künstliche Schwarmintelligenz",[mt.generalOverhaul_battlecruiser]:"Generalüberholung (Schlachtkreuzer)",[mt.generalOverhaul_bomber]:"Generalüberholung (Bomber)",[mt.generalOverhaul_destroyer]:"Generalüberholung (Zerstörer)",[mt.experimentalWeaponsTechnology]:"Experimentelle Waffentechnik",[mt.mechanGeneralEnhancement]:"Mecha-Generalverstärkung",[mt.heatRecovery]:"Wärme-Rückgewinnung",[mt.sulphideProcess]:"Sulfid-Prozesstechnik",[mt.psionicNetwork]:"Psionisches Netzwerk",[mt.telekineticTractorBeam]:"Telekinese-Traktorstrahl",[mt.enhancedSensorTechnology]:"Verbesserte Sensortechnik",[mt.neuromodalCompressor]:"Neuromodaler Komprimator",[mt.neuroInterface]:"Neuro-Interface",[mt.interplanetaryAnalysisNetwork]:"Superglobales Analysenetzwerk",[mt.overclocking_heavyFighter]:"Übertaktung (Schwerer Jäger)",[mt.telekineticDrive]:"Telekinetisches Schubsystem",[mt.sixthSense]:"Sechster Sinn",[mt.psychoharmoniser]:"Psycho-Harmonisierer",[mt.efficientSwarmIntelligence]:"Effiziente Schwarmintelligenz",[mt.overclocking_largeCargo]:"Übertaktung (Großer Transporter)",[mt.gravitationSensors]:"Gravitationssensoren",[mt.overclocking_battleship]:"Übertaktung (Schlachtschiff)",[mt.psionicShieldMatrix]:"Psionische Schutzmatrix",[mt.kaeleshDiscovererEnhancement]:"Kaelesh-Entdeckerverstärkung"},rl={darkMatter:"Dunkle Materie"},al={tabs:{dateRanges:"Datumsbereiche",colors:"Farben",common:"Allgemein",importExport:"Import/Export",expeditions:"Expeditionen",combats:"Kämpfe",debrisFields:"Trümmerfelder",resourceBalance:"Rohstoffbilanz",universeHistory:"Universumshistorie",dangerZone:"Gefahrenzone",accessbility:"Barrierefreiheit",linkAccounts:"Accounts verknüpfen",migrateOldData:"Altdaten migrieren"},dateRanges:{defaultNames:{today:"Heute",yesterday:"Gestern",currentWeek:"Aktuelle Woche",lastWeek:"Letzte Woche",currentMonth:"Aktueller Monat",newRange:"Neuer Bereich"},since:e=>`Seit ${e}`,firstDayTemplate:"<erster Tag>",headers:{label:"Benennung",type:"Typ",rangeStart:"Bereich startet vor",rangeContains:"Bereich enthält"},day:"Tag",days:"Tag",daysAgo:"Tagen",week:"Woche",weeks:"Wochen",weeksAgo:"Wochen",month:"Monat",months:"Monate",monthsAgo:"Monaten",year:"Jahr",years:"Jahre",yearsAgo:"Jahren"},colors:{combatResults:"Kampfergebnis",expeditionEvents:"Expeditionsereignisse",expeditionEventSizes:"Ereignisgrößen",expeditionDepletionLevels:"Systemauslastung",lifeformDiscoveries:"Entdeckungsmissionen",lifeforms:"Lebensformen",resources:"Rohstoffe",ships:"Schiffe"},common:{extensionLanguage:"UI-Sprache (im OGame Tracker)",extensionLanguageFallbackHint:"Sollten Texte nicht in der gewählten Sprache verfügbar sein, werden englische Texte angezeigt.",conversionRates:{title:"Umrechnungskurse",msuLong:"Umrechnung nach Metall",dsuLong:"Umrechnung nach Deuterium"},serverSettings:{title:"Serverdaten",lastUpdate:"Letzte Aktualisierung",forceUpdate:"Serverdaten aktualisieren"}},expeditions:{resourceUnitFactorsOfShipFoundOnExpeditions:"Faktoren der Rohstoffeinheiten auf Expeditionen gefundener Schiffe"},combats:{resourceUnitFactorsOfLostShips:"Faktoren der Rohstoffeinheiten in Kämpfen verlorener Schiffe",ignoreEspionageCombats:{title:"Spionagekämpfe ignorieren",label:"Spionage-Kampfberichte für das Tracking ignorieren"}},resourceBalance:{detailedResourceBalance:{header:"Detaillierte Rohstoffbilanz",checkboxLabel:"detaillierte Anzeige der Rohstoffbilanz"},includeShipsFoundOnExpeditions:{header:"Auf Expeditionen gefundene Schiffe",checkboxLabel:"Rohstoffeinheiten auf Expeditionen gefundener Schiffe in die Rohstoffbilanz einbeziehen"},includeShipsLostInCombats:{header:"In Kämpfen verlorene Schiffe",checkboxLabel:"Rohstoffeinheiten in Kämpfen verlorener Schiffe in die Rohstoffbilanz einbeziehen"},includeLostLootResources:{header:"In Kämpfen verlorene Rohstoffe",checkboxLabel:"in Kämpfen verlorene Rohstoffeinheiten in die Rohstoffbilanz einbeziehen"}},showConvertedUnitsInTables:{title:"MSE/DSE in Tabellen",label:"Umgerechnete MSE/DSE-Werte in Tabellen anzeigen",infoAmortization:"Amotisationszeit wird weiterhin anhand von Kosten und Produktion in MSE/DSE errechnet"},reset:"Einstellungen zurücksetzen",setDefaultRoute:"als Standardauswahl festlegen",setDefaultSubRoute:"als Standardauswahl für diesen Bereich auswählen",dangerZone:{doYouWantToContinue:"BIST DU SICHER, DASS DU FORTFAHREN WILLST?",deleteExpeditions:{button:e=>`Alle getrackten Expeditionen des aktuell gewählten Accounts (${e}) entfernen`,confirmationText:(e,t)=>`Nach dem Bestätigen dieser Aktion werden alle ${t} getrackten Expeditionen des aktuell gewählten Accounts (${e}) gelöscht.`},deleteCombats:{button:e=>`Alle getrackten Kämpfe des aktuell gewählten Accounts (${e}) entfernen`,confirmationText:(e,t)=>`Nach dem Bestätigen dieser Aktion werden alle ${t} getrackten Kämpfe des aktuell gewählten Accounts (${e}) gelöscht.`},deleteDebrisFieldReports:{button:e=>`Alle getrackten TF-Abbauberichte des aktuell gewählten Accounts (${e}) entfernen`,confirmationText:(e,t)=>`Nach dem Bestätigen dieser Aktion werden alle ${t} getrackten TF-Abbauberichte des aktuell gewählten Accounts (${e}) gelöscht.`},deleteAccount:{button:e=>`Alle Daten des aktuell gewählten Accounts (${e}) entfernen`,confirmationText:e=>`Nach dem Bestätigen dieser Aktion werden alle gespeicherten Daten des aktuell gewählten Accounts (${e}) gelöscht.\nDies beinhaltet die getrackte Universumshistorie dieses Servers sofern kein anderer Account für diesen Server getrackt ist.`},deleteUniverseHistory:{button:e=>`Universumshistorie des aktuell gewählten Universums (${e}) entfernen`,confirmationText:e=>`Nach dem Bestätigen dieser Aktion werden alle getrackten Daten zur Universumshistorie des aktuell gewählten Universums (${e}) gelöscht.`},deleteEverything:{button:"Alle Daten entfernen",confirmationText1:"Nach dem Bestätigen dieser Aktion werden alle Daten gelöscht.\nDas heißt, alle Daten inklusive getrackter Expeditionen, Kämpfe, TF-Abbauberichte, Universumshistorie und mehr, werden entfernt.",confirmationText2:"Bitte bestätige erneut, dass du alle Daten löschen möchtest."}},importExport:{export:{header:"Export",description:"Hier kannst du deine Daten exportieren. Der Export enthält alle relevanten Daten deiner getrackten Accounts und dazugehörigen Servern.",includeUniverseHistory:"auch Universumshistorie exportieren (kann die Dateigröße und Importzeit deutlich erhöhen!)",button:"Export starten",wait:"Bitte warte während deine Daten für den Export vorbereitet werden...",errors:{unexpectedError:"Ein unerwarteter Fehler ist während des Exports aufgetreten."}},import:{header:"Import",description:"Hier kannst du deine Daten aus einer Datei importieren. Bitte wähle die Importdatei.",button:"Import starten",wait:"Bitte warte während deine Daten importiert werden...",errors:{invalidFormat:"Das Dateiformat ist ungültig.",unexpectedError:"Ein unerwarteter Fehler ist während des Imports aufgetreten."}},importCallbacks:{importingSettings:"Einstellungen werden imporiert",importingBasicData:"Grundlegende Account- und Server-Informationen werden importiert",importingUniverseHistories:(e,t,r,a)=>`Universumshistorien werden importiert (Server ${e+1}/${t}, Eintrag ${r+1}/${a})`,importingAccounts:(e,t,r,a,n)=>{const o="Accounts werden importiert",i=`${e+1}/${t}`;if("account"==r)return`${o} (${i})`;if("combat-reports"==r)return`${o} (${i}, Kampf ${a+1}/${n})`;if("expeditions"==r)return`${o} (${i}, Expedition ${a+1}/${n})`;if("debris-fields"==r)return`${o} (${i}, TF-Berícht ${a+1}/${n})`;if("lifeform-discoveries"==r)return`${o} (${i}, LF-Mission ${a+1}/${n})`;if("empire.data"==r)return`${o} (${i}, grundlegende Imperiumsdaten)`;if("empire.planets"==r)return`${o} (${i}, Planet ${a+1}/${n})`;if("empire.moons"==r)return`${o} (${i}, Mond ${a+1}/${n})`;if("universe-specific-settings"==r)return`${o} (${i}, universumsspezifische Einstellungen)`;throw new Error(`Invalid type '${r}'`)}}},accessibility:{showSimplifiedResults:{title:"Vereinfachte Ansicht",label:"Vereinfachte Ansicht, versteckt Originaltexte von Expeditionsergebnissen und TF-Abbauberichten, und zeigt Icons anstatt Texten in den Benachrichtigungen."}},debrisFields:{separateExpeditionDebrisFields:{title:"TFs von Position 16 separat anzeigen",label:"TFs von Position 16 separat anzeigen"}},linkAccounts:{header:e=>`Accounts mit dem aktuellen Account (${e}) verknüpfen`,descriptionHtml:e=>`Hier sollten nur Accounts miteinander verknüpft werden, wenn die Daten der gewählten Accounts als Daten des aktuellen Accounts (${e}) behandelt werden sollen.<br/>Dies ist zum Beispiel gewünscht, wenn ein Account aufgrund einer Fusion von einem Server auf einen anderen verschoben wurde und somit im Tracker als separater Account behandelt wird, aber bspw. die Expeditionen des ursprügnlichen Accounts weiterhin angezeigt werden sollen.<br/><br/>Beispiel: <br/><ol>\n                    <li>der Spieler "OGame Profi" spielt auf dem Server "DE Milchstraße"</li>\n                    <li>der Server "DE Milchstraße" wird nun Exodusuni bei einer Fusion</li>\n                    <li>der Spieler "OGame Profi" fusioniert also seinen Account nach "DE Wagenrad"</li>   \n                    <li>der OGame Tracker zeigt für den Account nach der Fusion keine Expeditionen mehr vom Ursprungsserver "DE Milchstraße"</li>\n                    <li>im OGame Tracker wird der Account "OGame Profi" vom Server "DE Milchstraße" mit dem Account vom Server "DE Wagenrad" verknüpft</li>\n                    <li>Expeditionen, die auf dem Ursprungsserver "DE Milchstraße" gesendet wurden, werden nun auch für den fusionierten Account auf dem Server "DE Wagenrad" angezeigt</li>\n                </ol>\n            `,linkAccount:"weiteren Account verknüpfen:",linkedAccounts:"Verknüpfte Accounts:"}},nl={[ee.metal]:"Metall",[ee.crystal]:"Kristall",[ee.deuterium]:"Deuterium",energy:"Energie"},ol={ogame:{buildings:Zs,lifeforms:Js,lifeformBuildings:el,lifeformTechnologies:tl,premium:rl,resources:nl,research:Qs,ships:Ws,defenses:Xs},extension:{common:{averagePerDay:"⌀ pro Tag",chart:"Diagramm",table:"Tabelle",sum:"Summe",total:"gesamt",resourceUnits:"Rohstoffeinheiten",dsu:"DSE",msu:"MSE",date:"Datum",dateTime:"Datum & Zeit",madeWithLove1:"Mit",madeWithLove2:"von Wonkydonky entwickelt"},settings:al,resources:nl,expeditions:{header:"Expeditionen",tabHeaders:{overview:"Übersicht",foundResources:"Rohstofffunde",foundShips:"Flottenfunde",foundDarkMatter:rl.darkMatter,foundItems:"Itemfunde",depletion:"Auslastung",info:{header:"Info",topFinds:"Top-Funde",possibleFinds:"Liste möglicher Funde"},subHeaders:{amount:"Menge",sizes:"Fundgrößen",resources:"Rohstoffeinheiten",count:"Anzahl",sizesByResource:"Fundgrößen nach Rohstoff"}},expeditionEvents:{[vt.nothing]:"ohne Ereignis",[vt.resources]:"Rohstofffund",[vt.fleet]:"Flottenfund",[vt.delay]:"Verspätung",[vt.early]:"Verfrühung",[vt.darkMatter]:rl.darkMatter,[vt.pirates]:"Piraten",[vt.aliens]:"Aliens",[vt.combat]:"Kampf",[vt.item]:"Item",[vt.trader]:"Händler",[vt.lostFleet]:"Flottenverlust"},expeditionEventSizes:{[yt.small]:"normaler Fund",[yt.medium]:"großer Fund",[yt.large]:"riesiger Fund","fled-death-star":"Gegner sind geflohen"},depletionLevels:{[bt.none]:"Sehr Gering",[bt.low]:"Gering",[bt.medium]:"Mittel",[bt.high]:"Hoch",unknown:"Unbekannt"},expeditions:"Expeditionen",finds:"Funde",shipsFound:"Schiffe gefunden",depletion:"Systemauslastung",topFinds:{title:e=>`Top-Funde (${e})`,shipUnits:"Schiffseinheiten",shipAmount:"Schiffsanzahl",size:"Größe",amount:"Menge",date:"Datum"},possibleFinds:{info:{playerClass:"Spieler-Klasse",economySpeed:"Ökonomie-Geschwindigkeit",resourceFindBonus:"Bonus Rohstofffunde",shipFindBonus:"Bonus Schiffsfunde",darkMatterFindBonus:"Bonus DM-Funde",discovererBonus:"Bonus Entdeckerklasse"},maximumFinds:"Maximalfunde",findsDarkMatter:"Bereiche der DM-Funde",listOfPossibleFinds:"Liste derzeit möglicher Funde (Rohstoffe, Schiffseinheiten)",findSizes:e=>`Fundmengen (${e})`,shipUnits:"Schiffseinheiten",shipMaxUnitsConverted:"Max. Schiffseinheiten"}},combats:{header:"Kämpfe",tabHeaders:{overview:"Übersicht",loot:"Beute",lostShips:"Verlorenene Schiffe",subHeaders:{againstPlayers:"Gegen Spieler",onExpeditions:"Auf Expeditionen",amount:"Menge",resources:"Rohstoffeinheiten"}},combats:"Kämpfe",shipsLost:"verlorene Schiffe",combatResults:{[J.won]:"gewonnene Kämpfe",[J.lost]:"verlorene Kämpfe",[J.draw]:"Unentschieden"}},donate:{header:"Spenden",subHeader:"Spende, um die Entwicklung des OGame Trackers zu unterstützen",crypto:{header:"Crypto spenden"},kofi:{header:"Mit PayPal oder Kredit-/Debitkarte spenden",buttonText:"Auf Ko-Fi spenden",message:"Du brauchst keinen Account auf Ko-Fi, um dort zu spenden. Alle Spenden werden direkt an den Entwickler weitergeleitet."}},debrisFields:{header:"Trümmerfelder",addDebrisFieldManually:{title:"Trümmerfeld manuell hinzufügen",buttonText:"Hinzufügen"},position:"Position"},resourceBalance:{header:"Rohstoffbilanz","combat-report":"aus Kämpfen","debris-field-report":"aus Trümmerfeldern",expedition:"aus Expeditionen"},empire:{header:"Imperium",planet:"Planet",overview:{header:"Übersicht",supplyBuildings:"Versorgungsgebäude",facilityBuildings:"Anlagen"},production:{header:"Produktion",subHeaders:{resourceProduction:"Rohstoffproduktion",mineOverview:"Minenübersicht"},averagePerHour:"⌀ pro Stunde",totalPerHour:"gesamt pro Stunde",totalPerDay:"gesamt pro Tag",totalPerWeek:"gesamt pro Woche",activeProductionSettings:"aktive Produktionseinstellungen",messageProduction100:"Die angezeigten Werte beziehen sich auf einen Produktionsfaktor von 100% und berücksichtigen einen Energiemangel nicht.",mines:{crawlersAvailable:"verfügbar",crawlersToReachLimit:e=>`${e} Crawler für Maximalbonus`},items:"Aktive Items",breakdown:{basicIncome:"Grundproduktion",mineProduction:"Minenproduktion",consumption:"Verbrauch",lifeformBuildings:"Lebensform-Gebäude",crawlers:"Crawler",items:"Items",geologist:"Geologe",commandStaff:"Kommandostab",playerClass:"Spielerklasse",allianceClass:"Allianzklasse",lifeformTechnologies:"Lebensform-Technologien"},settings:{reset:"Zurücksetzen",header:"Produktionseinstellungen",applyAndClose:"Produktionseinstellungen anwenden und schließen"}},amortization:{header:"Amortisation",table:{cost:"Kosten",levels:"Stufen",productionPlus:"Produktionsplus",amortizationTime:"Amortisationszeit",groupSelectedItems:"Gewählte Elemente gruppieren",showOriginalItems:"All Elemente einzeln anzeigen",levelsOnPlanets:(e,t)=>`${e} ${1==e?"Stufe":"Stufen"} auf ${t} Planeten`},settings:{header:"Einstellungen",applyAndClose:"Einstellungen anwenden und schließen",includeSettings:{header:"Für Berechnung berücksichtigen",mines:"Minen",expeditions:"Expeditionen",expeditionsRequirement:"Hinweis: Benötigt Wahl von Lebensform-Expeditionsbonusforschungen, Lebensform-Forschungsbonusgebäuden, und/oder Astrophysik",lifeformProductionBonusBuildings:"Lebensform-Produktionsbonusgebäude",lifeformTechnologyBoostBuildings:"Lebensform-Forschungsbonusgebäude",lifeformProductionBonusTechnologies:"Lebensform-Produktionsbonusforschungen",lifeformExpeditionBonusTechnologies:"Lebensform-Expeditionsbonusforschungen",astrophysicsAndColony:"Astrophysik und neue Kolonien",astrophysicsPerformanceNote:"Hinweis: Rechenintensiv, hat starken Einfluss auf Berechnungsgeschwindigkeit"},playerSettings:{header:"Allgemeine Einstellungen",optimizeForResources:"Für gewählte Rohstoffe optimieren",officers:"Offiziere",playerClass:"Spielerklasse",allianceClass:"Allianzklasse",currentLevelOf:e=>`aktuelle Stufe ${e}`,lifeformLevels:"Lebenform-Levels",unusedRaidColonySlots:"Derzeit ungenutzte Raidkolo-Slots"},astrophysicsSettings:{header:e=>`Einstellungen zu ${e}`,newColony:"neue Kolonie"},planetSettings:{header:"Einstellungen der Planeten",global:{deselectItems:"Alle Items abwählen",ignoreInactiveLifeformTechnologySlots:"Inaktive Lebensform-Technologie-Slots für alle Planeten ignorieren",deselectAllPlanets:"Alle Planeten abwählen"},includeInResult:"für Berechnung berücksichtigen",position:"Position",maxTemperature:"Max. Temperatur",activeItems:"Aktive Items",crawlers:{title:"Crawler",percentage:"% Produktion",fixCount:"Feste Anzahl",maxCount:"Max. Anzahl"},mines:"Aktuelle Minenstufen",lifeform:"Lebensform",lifeformSettings:"Lebensform-Einstellungen",relevantLifeformBuildings:"Relevante Lebensform-Gebäude",lifeformTechnologies:"Lebensform-Technologien",ignoreEmptySlots:"Inaktive Slots ignorieren"},expeditionSettings:{header:"Expeditionseinstellungen",averageWavesPerDay:"⌀ Wellen pro Tag",items:"Slot-Items",averageExpeditionsPerDay:"⌀ Expeditionen pro Tag",shipUnitFactors:"Faktoren für Schiffseinheiten",topPlayerScore:"Punkte Platz 1"}},info:{generatingItems:"Berechne nächste Einträge",slowCalculation:"Die Amortisationsberechnung ist leider etwas langsam geworden, seitdem Lebensformen und deren Gebäude und Technologien berücksichtigt werden. Die Performance wird weiterhin untersucht und wird hoffentlich in der Zukunft verbessert.",ctrlClick:"Strg + Klick auf eine Checkbox, um alle Elemente bis zum gewählten Element an-/abzuwählen."},saveLoad:{saveButton:"Amortisationsergebnisse speichern",loadButton:e=>`Speicherstand laden (${e})`,loadedSave:(e,t)=>`Speicherstand wird angezeigt (${e}) - ${t} ausgeblendete Zeilen`,abandonedPlanet:"Aufgegebener Planet"},generateItems:e=>`${e} Einträge`},lifeforms:{header:"Lebensformen",subHeaders:{overview:"Übersicht",progress:"Fortschritt",discoveryMissions:"Missionen",discoveryResults:"Ergebnisse",experience:"Erfahrung",researchBonuses:"Globale Forschungsboni",planetBonuses:"Effektive Boni pro Planet"},planet:"Planet",lifeform:"Lebensform",buildings:"Lebensform-Gebäude",technologies:"Lebensform-Technologien",tier:"Tier",level:"Level",totalLifeformExperience:"Erfahrung (gesamt)",discoveryDateUnknown:"Unbekannt",notDiscoveredYet:"Noch nicht entdeckt",discoveryMissions:"Entdeckungsmissionen",eventTypes:{[kt.nothing]:"Kein Fund",[kt.lostShip]:"Schiff verloren",[kt.newLifeformFound]:"Neue Lebensform",[kt.knownLifeformFound]:"Lebensform-Erfahrung",[kt.artifacts]:"Artefaktfund"},artifactFindingSizes:{[Ct.small]:"normaler Fund",[Ct.medium]:"großer Fund",[Ct.large]:"riesiger Fund",[Ct.storageFull]:"Speicher voll"},lifeformFound:"Lebensform gefunden",alwaysAvailable:"Immer verfügbar",artifacts:"Artefakte",experiencePoints:"Erfahrungspunkte",discoveredOn:"Lebensform entdeckt am",numberOfLifeformDiscoveries:"Anzahl Entdeckungen",globalResearchBonus:"Globaler Forschungsbonus",researchBonuses:{breakdown:{slot:"Slot",research:"Forschung",bonus:"Bonus",lifeformBuildingsBoost:"Lebensformgebäude-Boost",lifeformLevelBoost:(e,t)=>`Lebensform-Level-Boost (${e}: ${t})`,bugBoost:"durch Bugs verursachter Boost"},production:{header:"Rohstoffproduktion"},expeditionFinds:{header:"Expeditionsfunde",resources:"Rohstoffe",ships:"Schiffe",fleetLoss:"Flottenverluste"},expeditionSpeed:{header:"Geschwindigkeit zum Expeditionsort",bonus:"Geschwindigkeitsbonus"},ships:{header:"Schiffe",armor:"Panzerung",shield:"Schild",damage:"Schaden",cargo:"Laderaum",speed:"Geschwindigkeit"},defenses:{header:"Verteidigungsanlagen"},fuelConsumption:{header:"Treibstoffverbrauch"},fuelReturn:{header:"Treibstoffrückgewinn bei Rückruf",bonus:"Treibstoffrückgewinn"},buildingCostTime:{header:"Gebäude Kosten & Zeit",cost:"Kosten",time:"Zeit"},researchCostTime:{header:"Forschungen Kosten & Zeit",researches:"Forschungen",lifeformResearches:"Lebensform-Forschungen"},crawlers:{header:"Crawler",productionBonus:"Rohstoffproduktion",energyConsumption:"Energieverbrauch"},denCapacity:{header:"Versteckkapazität"},phalanxRange:{header:"Phalanx-Reichweite"},discoveryMissions:{header:"Geschwindigkeit Entdeckungsmissionen"},playerClasses:{header:"Spielerklassen",collector:{productionBonus:"Erhöhte Minenproduktion",energyProductionBonus:"Erhöhte Energieproduktion",transporterSpeedBonus:"Transporter-Geschwindigkeitsbonus",transporterCargoBonus:"Transporter-Laderaumbonus",crawlerProductionBonus:"Crawler-Produktionsbonus",geologistCrawlerAmountBonus:"Mehr verwendbare Crawler mit Geologe"},discoverer:{researchDuration:"Forschungszeit",increasedExpeditionFinds:"Erhöhter Ertrag bei Expeditionen",largerPlanets:"Größere Planeten bei Kolonisierung",additionalExpeditionSlots:"Zusätzliche Expeditionsslots",reducedExpeditionCombatChance:"Change auf Expeditionsgegner",phalanxRange:"Erhöhte Phalanx-Reichweite"},general:{combatShipSpeed:"Kampfschiff-Geschwindigkeitsbonus",recyclerSpeed:"Recycler-Geschwindigkeitsbonus",fuelConsumption:"Treibstoffverbrauch für alle Schiffe",increasedCargoRecyclersPathfinders:"Erhöhter Laderaum für Recycler/Pathfinder",additionalCombatResearchLevels:"Zusätzliche Kampfforschungsstufen",additionalFleetSlots:"Zusätzliche Flottenslots",additionalMoonFields:"Zusätzliche Mondfelder"},classBonus:"Klassenbonus",bonus:"Bonus",baseValue:"Basiswert",valueWithBonuses:"Wert inkl. Boni"}},planetBonuses:{resourceProduction:{header:"Rohstoffproduktion"},lifeformResearchCostTime:{header:"Lebensformforschungen Kosten & Zeit"},wreckfield:{header:"Wrackfeld"}},topFinds:{topFinds:"Beste Funde",worstFinds:"Schlechteste Funde",size:"Größe",amount:"Menge",date:"Datum",artifacts:"Artefakte",experience:"XP"}}},switchAccounts:{title:"Account wählen, um Daten in neuem Tab anzusehen"},about:{faqHelp:{header:"Hilfe",faq:{header:"F.A.Q.",fleetLostOnExpedition:{header:"Warum werden deine Schiffe nicht getrackt, die du auf Expeditionen verloren hast?",text:"Das Tracking verlorener Schiffe erfordert dauerhaftes Flottentracking, was nicht möglich ist."},syncBetweenDevices:{header:"Warum werden deine Daten nicht auf mehreren Geräten synchronisiert?",text:"Die Menge der vom Tracker erfassten Daten übersteigt die Größe der Daten, die über deinen Nutzeraccount (Google, Microsoft, o.ä.) synchronisiert werden können. Eine Synchronisierung über einen externen Server wird eventuell in der Zukunft möglich sein."},productionInResourceBalance:{header:"Warum wird deine Rohstoffproduktion nicht in der Rohstoffbilanz berücksichtigt?",text:"Die Rohstoffproduktion hängt von vielen Faktoren ab, deren Änderungen dauerhaft getrackt werden müssten. Dies ist zwar möglich, jedoch übersteigt die Komplexität dieses Features die des zusätzlichen Nutzens."},whatAreAverages:{header:"Was bedeutet '⌀ pro Tag'?",text:"Dies ist der Durchschnitt über alle Tage mit mindestens einem getrackten Ereignis."}},tips:{header:"Tipps",rightClickDefaultRoute:"Du kannst einen der linken Tabs im Hauptmenü sowie untergeordnete Menüs rechtsklicken, um dieses (Unter-)Menü als Standardmenü für die gewählte Route auszuwählen.",numbersKeyboardNavigation:"Die mit Ziffern versehenen Tabs können auch über die Tastatur geöffnet werden, indem man die passende Zifferntaste drückt.",amortizationTable:{part1:"Du möchtest wissen, was du als nächstes bauen oder forschen solltest, um deine Produktion möglichst effizient zu erhöhen? Probiere den ",name:"interaktiven Amortisationsrechner",part2:"."},inlineSettings:"Du kannst dazugehörige Einstellungen direkt ändern, indem du auf einer passenden Seite das kleine Zahnrad-Icon auf dem rechten Seite klickst.",switchAccountHtml:'Du kannst das Interface des OGame Trackers für einen anderen getrackten Accounts ansehen, indem du im Menü das Icon <span class="mdi mdi-account-multiple"></span> klickst und den passenden Account wählst.'},messageDiscord:{part1:"Du brauchst Hilfe, hast einen Bug gefunden, oder hast eine Feature-Anfrage? Tritt dem ",discordServer:"Discord-Server",part2:" bei und schreibe eine Nachricht im passenden Channel."}},info:{header:"Info",table:{currentAccount:{header:"Informationen über den ausgewählten Account",numberOfTrackedExpeditions:"Anzahl getrackter Expeditionen",numberOfTrackedCombatReports:"Anzahl getrackter Kämpfe",numberOfTrackedDebrisFieldReports:"Anzahl getrackter TF-Abbauberichte",numberOfTrackedLifeformDiscoveries:"Anzahl getrackter Entdeckungsmissionen",lastUpdateServerSettings:"Letzte Aktualisierung der Serverinformationen",numberOfUniverseHistoryEntries:"Anzahl Einträge in Universumshistorie"},global:{header:"Informationen über alle Daten im OGame Tracker",numberOfTrackedAccounts:"Anzahl getrackter Accounts",estimatedSize:"Größe aller gespeichtern Daten"}}}},universeHistory:{header:"Universumshistorie",settings:{messages:{notEnabledHtml:"\n            <b>Highscore-Tracking des Universums ist deaktiviert.</b><br/>\n            Aktivieren dieses Features sorgt dafür, dass Highscoreveränderungen \n            für alle Spieler und Allianzen getrackt werden.\n            ",historyTrackingNotEnabledHtml:'\n            <b>Tracking der Universumshistorie ist deaktiviert.</b><br/>\n            Ist dieses Feature aktiviert, werden zusätzlich alle Änderungen von Spieler-\n            und Allianzinformationen getrackt.<br />\n            Dies beinhaltet Änderungen an Spieler- und Allianznamen und -Tags, Allianzmitgliedschaften,\n            Veränderungen an Spielerstatus, sowie Änderungen zu Planeten und Monden inklusive\n            Veränderungen der Namen und Koordinaten, und verlassene/zerstörte Planeten und Monde.<br/>\n\n            <i>Dies kann eine Menge Daten generieren! \n            Wird die Datenmenge zu groß, \n            kann das Feature <a href="#/settings/universe-history">in den Einstellungen</a> \n            wieder deaktiviert werden.</i>\n            ',trackingTimesHtml:"\n            Mindestens einmal täglich werden Highscores und Universumsinformationen (sofern aktiviert) aktualisiert.<br/>\n            Die Uhrzeiten für die Aktualisierungen können unten eingestellt werden.\n            Falls eine Aktualisierung zu einer Uhrzeit verpasst wurde, wird das Update so früh wie möglich nachgeholt.\n            "},enableHighscoreTrackingOnly:"Highscore-Tracking aktivieren",enableHistoryTracking:"Tracking der Universumshistorie aktivieren"},tabs:{players:"Spieler",alliances:"Allianzen",subtabs:{highscore:"Highscore",history:"Historie"}},playerSelection:{header:"Spielerauswahl",search:"Spieler suchen"},allianceSelection:{header:"Allianzauswahl",search:"Allianz suchen"},highscoreTabs:{total:"Gesamt",economy:"Ökonomie",research:"Forschung",military:"Militär",militaryBuilt:"Militär gebaut",militaryDestroyed:"Militär zerstört",militaryLost:"Militär verloren",honor:"Ehrenpunkte",numberOfShips:"Anzahl Schiffe",lifeform:"Lebensform",lifeformDiscoveries:"Lebensform-Entdeckungen",lifeformEconomy:"Lebensform-Ökonomie",lifeformTechnology:"Lebensform-Technologie"},historyTabs:{status:"Status",nicknames:"Nicknamen",alliances:"Allianzen",planetAndMoons:"Planeten & Monde",tags:"Tags",names:"Namen",members:"Mitglieder"},noAlliance:"keine Allianz",today:"heute",name:"Name",tag:"Tag",members:"Mitglieder",alliance:"Allianz",from:"Von",until:"Bis",status:{active:"Aktiv",vacation:"Urlaubsmodus",inactive:"Inaktiv (>= 7 Tage)",inactiveLong:"Inaktiv (>= 28 Tage)",banned:"Gesperrt",outlaw:"Vogelfrei",deleted:"Gelöscht",admin:"Admin"},loadingTakingLong:"Das Laden der Daten dauert länger als erwartet. Vermutlich wird die Datenbank gerade aktualisiert, bitte warte oder versuch es später erneut."},notifications:{combatTracking:{title:e=>"1"==e?`${e} neuer Kampfbericht getrackt`:`${e} neue Kampfberichte getrackt`,message:e=>"1"==e?`Es wurde ${e} neuer Kampfbericht getrackt.`:`Es wurden ${e} neue Kampfberichte getrackt.`},debrisFieldReportTracking:{title:e=>"1"==e?`${e} neuer TF-Abbaubericht getrackt`:`${e} neue TF-Abbauberichte getrackt`,message:e=>"1"==e?`Es wurde ${e} neuer TF-Abbaubericht getrackt.`:`Es wurden ${e} neue TF-Abbauberichte getrackt.`},expeditionTracking:{fleetLost:{title:e=>"1"==e?`${e} Flottenverlust`:`${e} Flottenverluste`,message:e=>"1"==e?`${e} Flotte ist nicht von ihrer Expedition zurückgekehrt.`:`${e} Flotten sind nicht von ihrer Expedition zurückgekehrt.`},result:{title:e=>"1"==e?`${e} neue Expedition getrackt`:`${e} neue Expeditionen getrackt`,summary:"Zusammenfassung der Funde",events:"Expeditionsereignisse"}},lifeformDiscoveryTracking:{title:e=>"1"==e?`${e} neue LF-Entdeckungsmission getrackt`:`${e} neue LF-Entdeckungsmissionen getrackt`,message:e=>"1"==e?`${e} neue Lebensform-Entdeckungsmission wurde getrackt.`:`${e} neue Lebensform-Entdeckungsmissionen wurden getrackt.`},messageTrackingError:{title:e=>"1"==e?`Fehler beim Verarbeiten von ${e} Nachricht`:`Fehler beim Verarbeiten von ${e} Nachrichten`,message:e=>"1"==e?`${e} Nachricht hat einen Fehler verursacht und wurde nicht getrackt. Die fehlerhafte Nachricht wurden rot markiert. Bitte kontaktiere den Entwickler.`:`${e} Nachrichten haben einen Fehler verursacht und wurden nicht getrackt. Die fehlerhaften Nachrichten wurden rot markiert. Bitte kontaktiere den Entwickler.`}},tools:{signatureGenerator:{header:"Signatur-Generator",averagePerHour:"⌀/Stunde",totalPerHour:"pro Stunde",totalPerDay:"pro Tag",totalPerWeek:"pro Woche",production:"Produktion",expeditions:"Expeditionen",lifeformDiscoveries:"LF-Missionen",combats:"Kämpfe",debrisFieldReports:"Abgebaute TFs"},scrapyardMerchant:{header:"Schrotthändler",percentage:"% beim Schrotthändler",count:"Anzahl"}},excelExport:{header:"Excel-Export",chooseBelowMessage:"Wähle die zu exportierenden Daten:",groups:{expeditions:{header:"Expeditionen",rawData:"Rohdaten (jede einzelne getrackte Expedition)",dailyOverview:"Übersicht über Ergebnisse pro Tag",dailyDepletion:"Übersicht über Systemauslastung pro Tag",dailyResources:"Rohstofffunde pro Tag",dailyResourceSizes:"Größen der Rohstofffunde pro Tag",dailyShips:"Schiffsfunde pro Tag",dailyShipSizes:"Größen der Schiffsfunde pro Tag",dailyDarkMatter:"DM-Funde pro Tag",dailyDarkMatterSizes:"Größen der DM-Funde pro Tag"},combats:{header:"Kämpfe",rawData:"Rohdaten (jedes einzelne Kampfergebnis)",dailyResults:"Kampfergebnisse pro Tag",dailyLoot:"Beutebilanz pro Tag",dailyLostShips:"Verlorene Schiffe pro Tag"},debrisFields:{header:"Trümmerfelder",rawData:"Rohdaten (jeder einzelne getrackte TF-Abbaubericht)",dailyResources:"Abgebaute Rohstoffe pro Tag"},lifeformDiscoveries:{header:"Entdeckungsmissionen",rawData:"Rohdaten (jede einzelne getrackte Mission)",dailyExperience:"Gesammelte Erfahrung pro Tag"}},generateButton:"Excel-Export generieren",expeditions:{prefix:"EX",sheets:{rawData:"Rohdaten",dailyDepletion:"Tägl. Systemauslastung",dailyResults:"Tägl. Ergebnisse",dailyResources:"Tägl. Rohstoffe",dailyResourcesSize:"Tägl. Rohstoffe (Größen",dailyShips:"Tägl. Schiffe",dailyShipsSize:"Tägl. Schiffe (Größe)",dailyDarkMatter:"Tägl. DM",dailyDarkMatterSize:"Tägl. DM (Größe)"},eventType:"Typ",eventSize:"Größe",item:"Item"},combats:{prefix:"KB",sheets:{rawData:"Rohdaten",dailyResults:"Tägliche Ergebnisse",dailyLoot:"Tägliche Beute",dailyLostShips:"Täglich verlorene Schiffe"},result:"Kampfergebnis",coordinates:"Koordinaten",galaxy:"Galaxie",system:"System",position:"Position",targetType:"Zieltyp",combatType:"Kampftyp",expeditionCombatOpponent:"Expeditionskampfgegner",loot:"Beute",lostShips:"Verlorene Schiffe",debrisField:"Trümmerfeld",moon:"Mond",planet:"Planet",expeditionCombat:"Expeditionskampf",playerCombat:"Spielerkampf",pirates:"Piraten",aliens:"Aliens",againstPlayers:"Gegen Spieler",onExpeditions:"Auf Expeditionen"},debrisFields:{prefix:"TF",sheets:{rawData:"Rohdaten",dailyResources:"Tägliche Rohstoffe"}},lifeformDiscoveries:{prefix:"LF",sheets:{rawData:"Rohdaten",dailyExperience:"Tägliche Erfahrung"},result:"Fund",experience:"Erfahrung",lifeform:"Lebensform",artifacts:"Artefakte",artifactsSize:"Größe"}},playerClasses:{collector:"Kollektor",discoverer:"Entdecker",general:"General",none:"keine"}}},il={[at.lightFighter]:"Light Fighter",[at.heavyFighter]:"Heavy Fighter",[at.cruiser]:"Cruiser",[at.battleship]:"Battleship",[at.battlecruiser]:"Battlecruiser",[at.bomber]:"Bomber",[at.destroyer]:"Destroyer",[at.deathStar]:"Deathstar",[at.reaper]:"Reaper",[at.pathfinder]:"Pathfinder",[at.smallCargo]:"Small Cargo",[at.largeCargo]:"Large Cargo",[at.recycler]:"Recycler",[at.colonyShip]:"Colony Ship",[at.espionageProbe]:"Espionage Probe",[at.crawler]:"Crawler",[at.solarSatellite]:"Solar Satellite"},sl={[Ys.rocketLauncher]:"Rocket Launcher",[Ys.lightLaser]:"Light Laser",[Ys.heavyLaser]:"Heavy Laser",[Ys.gaussCannon]:"Gauss Cannon",[Ys.ionCannon]:"Ion Cannon",[Ys.plasmaTurret]:"Plasma Turret",[Ys.smallShieldDome]:"Small Shield Dome",[Ys.largeShieldDome]:"Large Shield Dome"},ll={[We.metalMine]:"Metal Mine",[We.metalStorage]:"Metal Storage",[We.crystalMine]:"Crystal Mine",[We.crystalStorage]:"Crystal Storage",[We.deuteriumSynthesizer]:"Deuterium Synthesizer",[We.deuteriumTank]:"Deuterium Tank",[We.solarPlant]:"Solar Plant",[We.fusionReactor]:"Fusion Reactor",[We.roboticsFactory]:"Robotics Factory",[We.naniteFactory]:"Nanite Factory",[We.shipyard]:"Shipyard",[We.spaceDock]:"Space Dock",[We.missileSilo]:"Missile Silo",[We.researchLab]:"Research Lab",[We.allianceDepot]:"Alliance Depot",[We.terraformer]:"Terraformer",[We.lunarBase]:"Lunar Base",[We.sensorPhalanx]:"Sensor Phalanx",[We.jumpGate]:"Jump Gate"},cl={[ot.energyTechnology]:"Energy Technology",[ot.laserTechnology]:"Laser Technology",[ot.ionTechnology]:"Ion Technology",[ot.hyperspaceTechnology]:"Hyperspace Technology",[ot.plasmaTechnology]:"Plasma Technology",[ot.espionageTechnology]:"Espionage Technology",[ot.computerTechnology]:"Computer Technology",[ot.astrophysics]:"Astrophysics",[ot.intergalacticResearchNetwork]:"Intergalactic Research Network",[ot.gravitonTechnology]:"Graviton Technology",[ot.combustionDrive]:"Combustion Drive",[ot.impulseDrive]:"Impulse Drive",[ot.hyperspaceDrive]:"Hyperspace Drive",[ot.weaponsTechnology]:"Weapons Technology",[ot.shieldingTechnology]:"Shielding Technology",[ot.armorTechnology]:"Armour Technology"},dl={[lt.none]:"No Lifeform",[lt.humans]:"Humans",[lt.rocktal]:"Rock'tal",[lt.mechas]:"Mechas",[lt.kaelesh]:"Kaelesh"},ul={[dt.residentialSector]:"Residential Sector",[dt.biosphereFarm]:"Biosphere Farm",[dt.researchCentre]:"Research Centre",[dt.academyOfSciences]:"Academy of Sciences",[dt.neuroCalibrationCentre]:"Neuro-Calibration Centre",[dt.highEnergySmelting]:"High Energy Smelting",[dt.foodSilo]:"Food Silo",[dt.fusionPoweredProduction]:"Fusion-Powered Production",[dt.skyscraper]:"Skyscraper",[dt.biotechLab]:"Biotech Lab",[dt.metropolis]:"Metropolis",[dt.planetaryShield]:"Planetary Shield",[dt.meditationEnclave]:"Meditation Enclave",[dt.crystalFarm]:"Crystal Farm",[dt.runeTechnologium]:"Rune Technologium",[dt.runeForge]:"Rune Forge",[dt.oriktorium]:"Oriktorium",[dt.magmaForge]:"Magma Forge",[dt.disruptionChamber]:"Disruption Chamber",[dt.megalith]:"Megalith",[dt.crystalRefinery]:"Crystal Refinery",[dt.deuteriumSynthesiser]:"Deuterium Synthesiser",[dt.mineralResearchCentre]:"Mineral Research Centre",[dt.advancedRecyclingPlant]:"Advanced Recycling Plant",[dt.assemblyLine]:"Assembly Line",[dt.fusionCellFactory]:"Fusion Cell Factory",[dt.roboticsResearchCentre]:"Robotics Research Centre",[dt.updateNetwork]:"Update Network",[dt.quantumComputerCentre]:"Quantum Computer Centre",[dt.automatisedAssemblyCentre]:"Automatised Assembly Centre",[dt.highPerformanceTransformer]:"High-Performance Transformer",[dt.microchipAssemblyLine]:"Microchip Assembly Line",[dt.productionAssemblyHall]:"Production Assembly Hall",[dt.highPerformanceSynthesiser]:"High-Performance Synthesiser",[dt.chipMassProduction]:"Chip Mass Production",[dt.nanoRepairBots]:"Nano Repair Bots",[dt.sanctuary]:"Sanctuary",[dt.antimatterCondenser]:"Antimatter Condenser",[dt.vortexChamber]:"Vortex Chamber",[dt.hallsOfRealisation]:"Halls of Realisation",[dt.forumOfTranscendence]:"Forum of Transcendence",[dt.antimatterConvector]:"Antimatter Convector",[dt.cloningLaboratory]:"Cloning Laboratory",[dt.chrysalisAccelerator]:"Chrysalis Accelerator",[dt.bioModifier]:"Bio Modifier",[dt.psionicModulator]:"Psionic Modulator",[dt.shipManufacturingHall]:"Ship Manufacturing Hall",[dt.supraRefractor]:"Supra Refractor"},ml={[mt.intergalacticEnvoys]:"Intergalactic Envoys",[mt.highPerformanceExtractors]:"High-Performance Extractors",[mt.fusionDrives]:"Fusion Drives",[mt.stealthFieldGenerator]:"Stealth Field Generator",[mt.orbitalDen]:"Orbital Den",[mt.researchAI]:"Research AI",[mt.highPerformanceTerraformer]:"High-Performance Terraformer",[mt.enhancedProductionTechnologies]:"Enhanced Production Technologies",[mt.lightFighterMkII]:"Light Fighter Mk II",[mt.cruiserMkII]:"Cruiser Mk II",[mt.improvedLabTechnology]:"Improved Lab Technology",[mt.plasmaTerraformer]:"Plasma Terraformer",[mt.lowTemperatureDrives]:"Low-Temperature Drives",[mt.bomberMkII]:"Bomber Mk II",[mt.destroyerMkII]:"Destroyer Mk II",[mt.battlecruiserMkII]:"Battlecruiser Mk II",[mt.robotAssistants]:"Robot Assistants",[mt.supercomputer]:"Supercomputer",[mt.volcanicBatteries]:"Volcanic Batteries",[mt.acousticScanning]:"Acoustic Scanning",[mt.highEnergyPumpSystems]:"High Energy Pump Systems",[mt.cargoHoldExpansion_CivilianShips]:"Cargo Hold Expansion (Civilian Ships)",[mt.magmaPoweredProduction]:"Magma-Powered Production",[mt.geothermalPowerPlants]:"Geothermal Power Plants",[mt.depthSounding]:"Depth Sounding",[mt.ionCrystalEnhancement_heavyFighter]:"Ion Crystal Enhancement (Heavy Fighter)",[mt.improvedStellarator]:"Improved Stellarator",[mt.hardenedDiamondDrillHeads]:"Hardened Diamond Drill Heads",[mt.seismicMiningTechnology]:"Seismic Mining Technology",[mt.magmaPoweredPumpSystems]:"Magma-Powered Pump Systems",[mt.ionCrystalModules]:"Ion Crystal Modules",[mt.optimisedSiloConstructionMethod]:"Optimised Silo Construction Method",[mt.diamondEnergyTransmitter]:"Diamond Energy Transmitter",[mt.obsidianShieldReinforcement]:"Obsidian Shield Reinforcement",[mt.runeShields]:"Rune Shields",[mt.rocktalCollectorEnhancement]:"Rock'tal Collector Enhancement",[mt.catalyserTechnology]:"Catalyser Technology",[mt.plasmaDrive]:"Plasma Drive",[mt.efficiencyModule]:"Efficiency Module",[mt.depotAI]:"Depot AI",[mt.generalOverhaul_lightFighter]:"General Overhaul (Light Fighter)",[mt.automatedTransportLines]:"Automated Transport Lines",[mt.improvedDroneAI]:"Improved Drone AI",[mt.experimentalRecyclingTechnology]:"Experimental Recycling Technology",[mt.generalOverhaul_cruiser]:"General Overhaul (Cruiser)",[mt.slingshotAutopilot]:"Slingshot Autopilot",[mt.highTemperatureSuperconductors]:"High-Temperature Superconductors",[mt.generalOverhaul_battleship]:"General Overhaul (Battleship)",[mt.artificialSwarmIntelligence]:"Artificial Swarm Intelligence",[mt.generalOverhaul_battlecruiser]:"General Overhaul (Battlecruiser)",[mt.generalOverhaul_bomber]:"General Overhaul (Bomber)",[mt.generalOverhaul_destroyer]:"General Overhaul (Destroyer)",[mt.experimentalWeaponsTechnology]:"Experimental Weapons Technology",[mt.mechanGeneralEnhancement]:"Mechan General Enhancement",[mt.heatRecovery]:"Heat Recovery",[mt.sulphideProcess]:"Sulphide Process",[mt.psionicNetwork]:"Psionic Network",[mt.telekineticTractorBeam]:"Telekinetic Tractor Beam",[mt.enhancedSensorTechnology]:"Enhanced Sensor Technology",[mt.neuromodalCompressor]:"Neuromodal Compressor",[mt.neuroInterface]:"Neuro-Interface",[mt.interplanetaryAnalysisNetwork]:"Interplanetary Analysis Network",[mt.overclocking_heavyFighter]:"Overclocking (Heavy Fighter)",[mt.telekineticDrive]:"Telekinetic Drive",[mt.sixthSense]:"Sixth Sense",[mt.psychoharmoniser]:"Psychoharmoniser",[mt.efficientSwarmIntelligence]:"Efficient Swarm Intelligence",[mt.overclocking_largeCargo]:"Overclocking (Large Cargo)",[mt.gravitationSensors]:"Gravitation Sensors",[mt.overclocking_battleship]:"Overclocking (Battleship)",[mt.psionicShieldMatrix]:"Psionic Shield Matrix",[mt.kaeleshDiscovererEnhancement]:"Kaelesh Discoverer Enhancement"},pl={darkMatter:"Dark Matter"},hl={tabs:{dateRanges:"Date Ranges",colors:"Colors",common:"Common",importExport:"Import/Export",expeditions:"Expeditions",combats:"Combats",debrisFields:"Debris Fields",resourceBalance:"Resource Balance",universeHistory:"Universe History",dangerZone:"Danger Zone",accessbility:"Accessibility",linkAccounts:"Link Accounts",migrateOldData:"Migrate old data"},dateRanges:{defaultNames:{today:"Today",yesterday:"Yesterday",currentWeek:"Current week",lastWeek:"Last week",currentMonth:"Current month",newRange:"new range"},since:e=>`Since ${e}`,firstDayTemplate:"<first day>",headers:{label:"Label",type:"Type",rangeStart:"Range starts",rangeContains:"Range contains"},day:"day",days:"days",daysAgo:"days ago",week:"week",weeks:"weeks",weeksAgo:"weeks ago",month:"month",months:"months",monthsAgo:"months ago",year:"year",years:"years",yearsAgo:"years ago"},colors:{combatResults:"Combat results",expeditionEvents:"Expedition events",expeditionEventSizes:"Expedition event sizes",expeditionDepletionLevels:"System depletion",lifeformDiscoveries:"Lifeform discoveries",lifeforms:"Lifeforms",resources:"Resources",ships:"Ships"},common:{conversionRates:{title:"Conversion rates",msuLong:"Convert to Metal",dsuLong:"Convert to Deuterium"},extensionLanguage:"UI language (within OGame Tracker)",extensionLanguageFallbackHint:"English texts will be shown if texts are not available in the selected language.",serverSettings:{title:"Server data",lastUpdate:"Last update",forceUpdate:"Update server data"}},expeditions:{resourceUnitFactorsOfShipFoundOnExpeditions:"Factors of resource units of ships found on expeditions"},combats:{resourceUnitFactorsOfLostShips:"Factor of resource units of ships lost in combat",ignoreEspionageCombats:{title:"Ignore espionage combats",label:"Ignore espionage combat reports for combat tracking"}},resourceBalance:{detailedResourceBalance:{header:"Detailed resource balance",checkboxLabel:"Show detailed resource balance"},includeShipsFoundOnExpeditions:{header:"Ships found in expeditions",checkboxLabel:"Include resources of ships found on expeditions in resource balance"},includeShipsLostInCombats:{header:"Ships lost in combats",checkboxLabel:"Include resources of ships lost in combats in resource balance"},includeLostLootResources:{header:"Resource lost in combats",checkboxLabel:"Include resources that were lost in combats in resource balance"}},showConvertedUnitsInTables:{title:"MSU/DSU in tables",label:"Show converted MSU/DSU values in tables",infoAmortization:"Amortization time will still be calculated using cost and production in MSU/DSU"},reset:"Reset settings",setDefaultRoute:"Set as default",setDefaultSubRoute:"Set as default for this area",dangerZone:{doYouWantToContinue:"ARE YOU SURE YOU WANT TO CONTINUE?",deleteExpeditions:{button:e=>`Delete all tracked expeditions for the currently selected account (${e})`,confirmationText:(e,t)=>`If you confirm, all ${t} tracked expeditions will be deleted for the currently selected account (${e}).`},deleteCombats:{button:e=>`Delete all tracked combats for the currently selected account (${e})`,confirmationText:(e,t)=>`If you confirm, all ${t} tracked combats will be deleted for the currently selected account (${e}).`},deleteDebrisFieldReports:{button:e=>`Delete all tracked debris field harvest reports for the currently selected account (${e})`,confirmationText:(e,t)=>`If you confirm, all ${t} tracked debris field harvest reports will be deleted for the currently selected account (${e}).`},deleteAccount:{button:e=>`Delete all data of the currently selected account (${e})`,confirmationText:e=>`If you confirm, all tracked data for the currently selected account (${e}) will be deleted.\nThis includes tracked universe history data if there is no other account tracked for this universe.`},deleteUniverseHistory:{button:e=>`Delete tracked universe history of currently selected universe (${e})`,confirmationText:e=>`If you confirm, all tracked universe history data for the currently selected universe (${e}) will be deleted.`},deleteEverything:{button:"Delete all data",confirmationText1:"If you confirm, all data will be deleted.\nThis includes tracked data of every account including tracked expeditions, combats, debris field reports, universe history data, and more.",confirmationText2:"Please confirm again that you want to delete all data."}},importExport:{export:{header:"Export",description:"Here you can export your data. This will include relevant data of all your tracked accounts and their servers.",includeUniverseHistory:"include universe history in export (this may greatly increase file size and import time!)",button:"Start export",wait:"Please wait while your data is being prepared for the export...",errors:{unexpectedError:"An unexpected error occured while exporting your data."}},import:{header:"Import",description:"Here you can import your data from a file. Please select your file.",button:"Start import",wait:"Please wait while your data is being imported...",errors:{invalidFormat:"The file format is invalid.",unexpectedError:"An unexpected error occured while importing your data."}},importCallbacks:{importingSettings:"Importing your settings",importingBasicData:"Importing basic account and server data",importingUniverseHistories:(e,t,r,a)=>`Importing server universe history (server ${e+1}/${t}, entry ${r+1}/${a})`,importingAccounts:(e,t,r,a,n)=>{const o="Importing accounts",i=`${e+1}/${t}`;if("account"==r)return`${o} (${i})`;if("combat-reports"==r)return`${o} (${i}, combat ${a+1}/${n})`;if("expeditions"==r)return`${o} (${i}, expedition ${a+1}/${n})`;if("debris-fields"==r)return`${o} (${i}, debris field ${a+1}/${n})`;if("lifeform-discoveries"==r)return`${o} (${i}, lifeform mission ${a+1}/${n})`;if("empire.data"==r)return`${o} (${i}, basic empire data)`;if("empire.planets"==r)return`${o} (${i}, planet ${a+1}/${n})`;if("empire.moons"==r)return`${o} (${i}, moon ${a+1}/${n})`;if("universe-specific-settings"==r)return`${o} (${i}, universe specific settings)`;throw new Error(`Invalid type '${r}'`)}}},accessibility:{showSimplifiedResults:{title:"Simplified visualization",label:"Simplified visualization, hides original messages of expedition results and DF harvest reports, and shows icons instead of texts in notifications."}},debrisFields:{separateExpeditionDebrisFields:{title:"Separate position 16",label:"Separate debris fields harvested at position 16 from position 1-15"}},linkAccounts:{header:e=>`Link accounts with the current account (${e})`,descriptionHtml:e=>`You should only link accounts if you want the OGame Tracker to consider data of the linked accounts as data of the current account (${e}).<br/>This is often the case when an account has been merged to another server and is handled as a separate account in the OGame Tracker.<br/><br/>Example: <br/><ol>\n                    <li>the player "OGame Professional" is playing on the server "EN Milkyway"</li>\n                    <li>the server "EN Milkyway" becomes exodus universe during a merge</li>\n                    <li>the player "OGame Professional" merges their account to "EN Cartwheel"</li>   \n                    <li>after the merge, the OGame Tracker shows no expeditions from the original server "EN Milkyway" for the merged account</li>\n                    <li>in the OGame Tracker the old account "OGame Professional" on server "EN Milkyway" is linked to the new account "OGame Professional" on server "EN Cartwheel"</li>\n                    <li>expeditions that were sent on the old server "EN Milkyway" will now show up again for the merged account on "EN Cartwheel"</li>\n                </ol>\n            `,linkAccount:"link another account:",linkedAccounts:"Linked accounts:"}},fl={[ee.metal]:"Metal",[ee.crystal]:"Crystal",[ee.deuterium]:"Deuterium",energy:"Energy"},gl={ogame:{buildings:ll,lifeforms:dl,lifeformBuildings:ul,lifeformTechnologies:ml,premium:pl,resources:fl,research:cl,ships:il,defenses:sl},extension:{common:{averagePerDay:"⌀ per day",chart:"Chart",table:"Table",sum:"Sum",total:"total",resourceUnits:"Resource units",dsu:"DSU",msu:"MSU",date:"Date",dateTime:"Date & Time",madeWithLove1:"Made with",madeWithLove2:"by Wonkydonky"},settings:hl,resources:fl,expeditions:{header:"Expeditions",tabHeaders:{overview:"Overview",foundResources:"Resources",foundShips:"Ships",foundDarkMatter:pl.darkMatter,foundItems:"Items",depletion:"Depletion",info:{header:"Info",topFinds:"Top Finds",possibleFinds:"List of Possible Finds"},subHeaders:{amount:"Amount",sizes:"Sizes",resources:"Resource Units",count:"Count",sizesByResource:"Sizes by Resource"}},expeditionEvents:{[vt.nothing]:"No Event",[vt.resources]:"Resources",[vt.fleet]:"Ships",[vt.delay]:"Delay",[vt.early]:"Early",[vt.darkMatter]:pl.darkMatter,[vt.pirates]:"Pirates",[vt.aliens]:"Aliens",[vt.combat]:"Combat",[vt.item]:"Item",[vt.trader]:"Trader",[vt.lostFleet]:"Lost Fleet"},expeditionEventSizes:{[yt.small]:"Common Find",[yt.medium]:"Large Find",[yt.large]:"Huge Find","fled-death-star":"Enemies fled"},depletionLevels:{[bt.none]:"Very Low",[bt.low]:"Low",[bt.medium]:"Medium",[bt.high]:"High",unknown:"Unknown"},expeditions:"Expeditions",finds:"Finds",shipsFound:"Ships found",depletion:"System depletion",topFinds:{title:e=>`Top finds (${e})`,shipUnits:"Ship units",shipAmount:"Ship amount",size:"Size",amount:"Amount",date:"Date"},possibleFinds:{info:{playerClass:"Player class",economySpeed:"Economy speed",resourceFindBonus:"Bonus resource finds",shipFindBonus:"Bonus ship finds",darkMatterFindBonus:"Bonus Dark Matter finds",discovererBonus:"Discoverer class bonus"},maximumFinds:"Maximum Finds",findsDarkMatter:"Ranges of DM finds",listOfPossibleFinds:"List of possible finds (resources, ship units)",findSizes:e=>`Possible find amounts (${e})`,shipUnits:"Ship units",shipMaxUnitsConverted:"Max. Ship units"}},combats:{header:"Combats",tabHeaders:{overview:"Overview",loot:"Loot",lostShips:"Lost Ships",subHeaders:{againstPlayers:"Against Players",onExpeditions:"On Expeditions",amount:"Amount",resources:"Resource Units"}},combats:"Combats",shipsLost:"Ships Lost",combatResults:{[J.won]:"Wins",[J.lost]:"Losses",[J.draw]:"Draws"}},donate:{header:"Donate",subHeader:"Donate to support the development of the OGame Tracker",crypto:{header:"Donate crypto"},kofi:{header:"Donate with PayPal or debit/credit card",buttonText:"Donate on Ko-Fi",message:"You don't need to create an account on Ko-Fi to donate. All donations are forwarded directly to the developer."}},debrisFields:{header:"Debris Fields",addDebrisFieldManually:{title:"Add debris field manually",buttonText:"Add"},position:"Position"},resourceBalance:{header:"Resource Balance","combat-report":"from combats","debris-field-report":"from debris fields",expedition:"from expeditions"},empire:{header:"Empire",planet:"Planet",overview:{header:"Overview",supplyBuildings:"Supply Buildings",facilityBuildings:"Facilities"},production:{header:"Production",subHeaders:{resourceProduction:"Resource Production",mineOverview:"Mine Overview"},averagePerHour:"⌀ per hour",totalPerHour:"total per hour",totalPerDay:"total per day",totalPerWeek:"total per week",activeProductionSettings:"Active Production Settings",messageProduction100:"The shown values refer to a production factor of 100% and do not take lack of energy into account.",mines:{crawlersAvailable:"available",crawlersToReachLimit:e=>`${e} crawlers for maximum bonus`},items:"Active items",breakdown:{basicIncome:"Basic Income",mineProduction:"Mine Production",consumption:"Consumption",lifeformBuildings:"Lifeform Buildings",crawlers:"Crawlers",items:"Items",geologist:"Geologist",commandStaff:"Command Staff",playerClass:"Player Class",allianceClass:"Alliance Class",lifeformTechnologies:"Lifeform Technologies"},settings:{reset:"Reset",header:"Production settings",applyAndClose:"Apply and close production settings"}},amortization:{header:"Amortization",table:{cost:"Cost",levels:"Levels",productionPlus:"Production Plus",amortizationTime:"Amortization Time",groupSelectedItems:"Group selected items",showOriginalItems:"Show all items individually",levelsOnPlanets:(e,t)=>`${e} ${1==e?"level":"levels"} on ${t} ${1==t?"planet":"planets"}`},settings:{header:"Settings",applyAndClose:"Apply settings and close",includeSettings:{header:"Include in calculation",mines:"Mines",expeditions:"Expeditions",expeditionsRequirement:"Note: Requires at least one of lifeform expedition bonus researches, lifeform research bonus buildings, and astrophysics to be selected",lifeformProductionBonusBuildings:"Lifeform production bonus buildings",lifeformTechnologyBoostBuildings:"Lifeform research bonus buildings",lifeformProductionBonusTechnologies:"Lifeform production bonus researches",lifeformExpeditionBonusTechnologies:"Lifeform expedition bonus researches",astrophysicsAndColony:"Astrophysics and new colonies",astrophysicsPerformanceNote:"Note: Computationally intensive, will greatly affect performance"},playerSettings:{header:"General Settings",optimizeForResources:"Optimize for selected resources",officers:"Officers",playerClass:"Player Class",allianceClass:"Alliance Class",currentLevelOf:e=>`Current Level of ${e}`,lifeformLevels:"Lifeform Levels",unusedRaidColonySlots:"Currently unused raid colony slots"},astrophysicsSettings:{header:e=>`${e} Settings`,newColony:"new Colony"},planetSettings:{header:"Planet Settings",global:{deselectItems:"Deselect all items",ignoreInactiveLifeformTechnologySlots:"Ignore inactive lifeform technology slots for all planets",deselectAllPlanets:"Deselect all planets"},includeInResult:"Include in calculation",position:"Position",maxTemperature:"Max. Temperature",activeItems:"Active Items",crawlers:{title:"Crawlers",percentage:"% Production",fixCount:"Fixed Count",maxCount:"Max. Count"},mines:"Current Mine Levels",lifeform:"Lifeform",lifeformSettings:"Lifeform settings",relevantLifeformBuildings:"Relevant Lifeform Buildings",lifeformTechnologies:"Lifeform Technologies",ignoreEmptySlots:"Ignore inactive slots"},expeditionSettings:{header:"Expedition Settings",averageWavesPerDay:"⌀ Waves per day",items:"Slot items",averageExpeditionsPerDay:"⌀ Expeditions per day",shipUnitFactors:"Ship resource unit factors",topPlayerScore:"Top player score"}},info:{generatingItems:"Calculating next best items",slowCalculation:"The amortization calculation became pretty slow now that it includes lifeform buildings and technologies. This will hopefully be improved in the future.",ctrlClick:"Ctrl + Click on a check to (de)select all items up to the selected one."},saveLoad:{saveButton:"Save calculated amortization results",loadButton:e=>`Load save (${e})`,loadedSave:(e,t)=>`Viewing saved results (${e}) - ${t} hidden rows`,abandonedPlanet:"Abandoned Planet"},generateItems:e=>`${e} entries`},lifeforms:{header:"Lifeforms",subHeaders:{overview:"Overview",progress:"Progress",discoveryMissions:"Missions",discoveryResults:"Results",experience:"Experience",researchBonuses:"Global Research Bonuses",planetBonuses:"Effective Planet Bonuses"},planet:"Planet",lifeform:"Lifeform",buildings:"Lifeform Buildings",technologies:"Lifeform Technologies",tier:"Tier",level:"Level",totalLifeformExperience:"Experience (total)",discoveryDateUnknown:"Unknown",notDiscoveredYet:"Not discovered yet",discoveryMissions:"Discovery Missions",eventTypes:{[kt.nothing]:"No finding",[kt.lostShip]:"Lost exploration ship",[kt.newLifeformFound]:"New lifeform",[kt.knownLifeformFound]:"Lifeform experience",[kt.artifacts]:"Artifacts found"},artifactFindingSizes:{[Ct.small]:"Common Find",[Ct.medium]:"Large Find",[Ct.large]:"Huge Find",[Ct.storageFull]:"Storage Full"},lifeformFound:"Lifeform found",alwaysAvailable:"Always available",artifacts:"Artifacts",experiencePoints:"Experience Points",discoveredOn:"Lifeform discovered on",numberOfLifeformDiscoveries:"Number of discoveries",globalResearchBonus:"Global research bonus",researchBonuses:{breakdown:{slot:"Slot",research:"Research",bonus:"Bonus",lifeformBuildingsBoost:"Lifeform Building Boost",lifeformLevelBoost:(e,t)=>`Lifeform Level Boost (${e}: ${t})`,bugBoost:"Boost caused by bugs"},production:{header:"Resource Production"},expeditionFinds:{header:"Expedition Finds",resources:"Resources",ships:"Ships",fleetLoss:"Fleet losses"},expeditionSpeed:{header:"Expedition Arrival Speed",bonus:"Speed Bonus"},ships:{header:"Ships",armor:"Armor",shield:"Shield",damage:"Damage",cargo:"Cargo",speed:"Speed"},defenses:{header:"Defenses"},fuelConsumption:{header:"Fuel Consumption"},fuelReturn:{header:"Fuel Return on Recall",bonus:"Fuel Return"},buildingCostTime:{header:"Building Cost & Time",cost:"Cost",time:"Time"},researchCostTime:{header:"Research Cost & Time",researches:"Researches",lifeformResearches:"Lifeform Researches"},crawlers:{header:"Crawlers",productionBonus:"Resource Production",energyConsumption:"Energy Consumption"},denCapacity:{header:"Den Capacity"},phalanxRange:{header:"Phalanx Range"},discoveryMissions:{header:"Discovery Mission Speed"},playerClasses:{header:"Player Classes",collector:{productionBonus:"Increased mine production",energyProductionBonus:"Increased energy production",transporterSpeedBonus:"Transporter speed bonus",transporterCargoBonus:"Transporter cargo bonus",crawlerProductionBonus:"Crawler production bonus",geologistCrawlerAmountBonus:"More usable crawlers with Geologist"},discoverer:{researchDuration:"Research time",increasedExpeditionFinds:"Increased gain on expeditions",largerPlanets:"Larger planets on colonization",additionalExpeditionSlots:"Additional expedition slots",reducedExpeditionCombatChance:"Chance of expedition combats",phalanxRange:"Increased phalanx range"},general:{combatShipSpeed:"Combat ship speed bonus",recyclerSpeed:"recycler speed bonus",fuelConsumption:"Fuel consumption for all ships",increasedCargoRecyclersPathfinders:"Increased cargo for Recyclers/Pathfinders",additionalCombatResearchLevels:"Additional combat research levels",additionalFleetSlots:"Additional fleet slots",additionalMoonFields:"Additional moon fields"},classBonus:"Class Bonus",bonus:"Bonus",baseValue:"Base Value",valueWithBonuses:"Value with Bonuses"}},planetBonuses:{resourceProduction:{header:"Resource Production"},lifeformResearchCostTime:{header:"Lifeform Research Cost & Time"},wreckfield:{header:"Wreckfield"}},topFinds:{topFinds:"Best Finds",worstFinds:"Worst Finds",size:"Size",amount:"Amount",date:"Date",artifacts:"Artifacts",experience:"XP"}}},switchAccounts:{title:"Select account to view in a new tab"},about:{faqHelp:{header:"Help",faq:{header:"F.A.Q.",fleetLostOnExpedition:{header:"Why are the ships not tracked that I lost on expeditions?",text:"Tracking lost ships on expeditions requires permanent fleet tracking which is not feasible."},syncBetweenDevices:{header:"Why is there no synchronization of my data between multiple devices?",text:"The tracker saves a lot more data than can be synchronized using your user account (Google, Microsoft, etc). A synchronization with an external server might be possible in the future."},productionInResourceBalance:{header:"Why does the resource balance not include my resource production?",text:"Your resource production depends on various factors, and their changes would have to be tracked permanently. While this is possible, an implementation of this feature would be much more complex than it would be of use for its users."},whatAreAverages:{header:"What does the '⌀ per day' mean?",text:"This is the average over all days with at least one tracked event."}},tips:{header:"Tips",rightClickDefaultRoute:"You can right-click a main tab on the left side or any of its sub-menu items to set this menu as standard for the selected route.",numbersKeyboardNavigation:"You can open the pages of the tabs with a digit by pressing the respective digit key on your keyboard.",amortizationTable:{part1:"Want to know what to build or research next to improve your resource production the most efficient way? Try the ",name:"interactive amortization calculator",part2:"."},inlineSettings:"You can change related settings immediately by pressing the small gear icon on the right side.",switchAccountHtml:'You can open the OGame Tracker interface for another tracked account by clicking the <span class="mdi mdi-account-multiple"></span> icon and selecting the account.'},messageDiscord:{part1:"Need help, found a bug, or have a feature request? Join the ",discordServer:"Discord server",part2:" and write a message in the related channel."}},info:{header:"Info",table:{currentAccount:{header:"Information about the selected account",numberOfTrackedExpeditions:"Number of tracked expeditions",numberOfTrackedCombatReports:"Number of tracked combat reports",numberOfTrackedDebrisFieldReports:"Number of tracked harvest reports",numberOfTrackedLifeformDiscoveries:"Number of tracked discovery missiongs",lastUpdateServerSettings:"Latest server settings update",numberOfUniverseHistoryEntries:"Number of entries in universe history"},global:{header:"Information about all data in the OGame Tracker",numberOfTrackedAccounts:"Number of tracked accounts",estimatedSize:"Size of all saved data on disk"}}}},universeHistory:{header:"Universe History",settings:{messages:{notEnabledHtml:"\n            <b>Universe highscore tracking is not enabled.</b><br/>\n            Enabling this feature will track highscore changes for players and alliances.\n            ",historyTrackingNotEnabledHtml:'\n            <b>Universe history tracking is not enabled.</b><br/>\n            Enabling this feature will additionally track all changes for players and alliances.<br/>\n            This includes player and alliance name and tag changes, alliance membership changes, \n            player status changes, and changes regarding planets and moons \n            including names, coordinates, and abandoned/destroyed planets and moons.<br />\n            <i>This can generate a lot of data!\n            You can deactivate this feature <a href="#/settings/universe-history">in the settings menu</a> \n            again.</i>\n            ',trackingTimesHtml:"\n            At least once every day the highscores and universe data (if enabled) will be updated.<br/>\n            You can set the update times below.\n            If an update was missed then it will update as soon as possible afterwards.\n            "},enableHighscoreTrackingOnly:"Enable universe highscore tracking",enableHistoryTracking:"Enable universe history tracking"},tabs:{players:"Players",alliances:"Alliances",subtabs:{highscore:"Highscore",history:"History"}},playerSelection:{header:"Player selection",search:"search for player"},allianceSelection:{header:"Alliance selection",search:"search for alliance"},highscoreTabs:{total:"Total",economy:"Economy",research:"Research",military:"Military",militaryBuilt:"Military built",militaryDestroyed:"Military destroyed",militaryLost:"Military lost",honor:"Honor",numberOfShips:"Number of ships",lifeform:"Lifeform",lifeformDiscoveries:"Lifeform discoveries",lifeformEconomy:"Lifeform economy",lifeformTechnology:"Lifeform technology"},historyTabs:{status:"Status",nicknames:"Nicknames",alliances:"Alliances",planetAndMoons:"Planets & Moons",tags:"Tags",names:"Names",members:"Members"},noAlliance:"no alliance",today:"today",name:"Name",tag:"Tag",members:"Members",alliance:"Alliance",from:"From",until:"Until",status:{active:"Active",vacation:"Vacation Mode",inactive:"Inactive (>= 7 days)",inactiveLong:"Inactive (>= 28 days)",banned:"Banned",outlaw:"Outlaw",deleted:"Deleted",admin:"Admin"},loadingTakingLong:"Loading the data is taking longer than expected. The database is probably updating right now, so please be patient or try again later."},notifications:{combatTracking:{title:e=>"1"==e?`${e} new combat report tracked`:`${e} new combat reports tracked`,message:e=>"1"==e?`${e} new combat report has been tracked.`:`${e} new combat reports have been tracked.`},debrisFieldReportTracking:{title:e=>"1"==e?`${e} new debris field report tracked`:`${e} new debris field reports tracked`,message:e=>"1"==e?`${e} new debris field report has been tracked.`:`${e} new debris field reports have been tracked.`},expeditionTracking:{fleetLost:{title:e=>`${e} lost fleet`,message:e=>"1"==e?`${e} fleet did not return from its expedition.`:`${e} fleets did not return from their expeditions.`},result:{title:e=>"1"==e?`${e} new expedition tracked`:`${e} new expeditions tracked`,summary:"Summary of findings",events:"Expedition events"}},lifeformDiscoveryTracking:{title:e=>"1"==e?`${e} new lifeform discovery mission tracked`:`${e} new lifeform discovery missions tracked`,message:e=>"1"==e?`${e} new lifeform discovery mission has been tracked.`:`${e} new lifeform discovery missions have been tracked.`},messageTrackingError:{title:e=>"1"==e?`Failed to process ${e} message`:`Failed to process ${e} messages`,message:e=>"1"==e?`${e} message caused an error and has not been tracked. The causing message has been marked in red. Please contact the developer.`:`${e} messages caused an error and have not been tracked. The causing messages have been marked in red. Please contact the developer.`}},tools:{signatureGenerator:{header:"Signature Generator",averagePerHour:"⌀/hour",totalPerHour:"per hour",totalPerDay:"per day",totalPerWeek:"per week",production:"Production",expeditions:"Expeditions",lifeformDiscoveries:"LF Missions",combats:"Combats",debrisFieldReports:"Harvested DFs"},scrapyardMerchant:{header:"Scrapyard Merchant",percentage:"% at the scrapyard merchant",count:"Count"}},excelExport:{header:"Excel Export",chooseBelowMessage:"Choose below which data you want to include in the export:",groups:{expeditions:{header:"Expeditions",rawData:"Raw data (every single tracked expedition)",dailyOverview:"Overview of results per day",dailyDepletion:"Overview of system depletion per day",dailyResources:"Resource findings per day",dailyResourceSizes:"Sizes of resource findings per day",dailyShips:"Ship findings per day",dailyShipSizes:"Sizes of ship findings per day",dailyDarkMatter:"Dark matter findings per day",dailyDarkMatterSizes:"Sizes of dark matter findings per day"},combats:{header:"Combats",rawData:"Raw data (every single tracked combat result)",dailyResults:"Combat results per day",dailyLoot:"Loot balance per day",dailyLostShips:"Lost ships per day"},debrisFields:{header:"Debris Fields",rawData:"Raw data (every single tracked harvest report)",dailyResources:"Harvested resources per day"},lifeformDiscoveries:{header:"Discovery Missions",rawData:"Raw data (every single tracked discovery mission)",dailyExperience:"Gained experience per day"}},generateButton:"Generate Excel export",expeditions:{prefix:"EX",sheets:{rawData:"Raw Data",dailyDepletion:"Daily System Depletion",dailyResults:"Daily Results",dailyResources:"Daily Resources",dailyResourcesSize:"Daily Resources (Size)",dailyShips:"Daily Ships",dailyShipsSize:"Daily Ships (Size)",dailyDarkMatter:"Daily Dark Matter",dailyDarkMatterSize:"Daily Dark Matter (Size)"},eventType:"Type",eventSize:"Size",item:"Item"},combats:{prefix:"CR",sheets:{rawData:"Raw Data",dailyResults:"Daily Results",dailyLoot:"Daily Loot",dailyLostShips:"Daily Lost Ships"},result:"Combat Result",coordinates:"Coordinates",galaxy:"Galaxy",system:"System",position:"Position",targetType:"Target Type",combatType:"Combat Type",expeditionCombatOpponent:"Expedition Combat Opponent",loot:"Loot",lostShips:"Lost Ships",debrisField:"Debris Field",moon:"Moon",planet:"Planet",expeditionCombat:"Expedition Combat",playerCombat:"Player Combat",pirates:"Pirates",aliens:"Aliens",againstPlayers:"Against Players",onExpeditions:"On Expeditions"},debrisFields:{prefix:"DF",sheets:{rawData:"Raw Data",dailyResources:"Daily Resources"}},lifeformDiscoveries:{prefix:"LF",sheets:{rawData:"Raw Data",dailyExperience:"Daily Experience"},result:"Finding",experience:"Experience",lifeform:"Lifeform",artifacts:"Artifacts",artifactsSize:"Size"}},playerClasses:{collector:"Collector",discoverer:"Discoverer",general:"General",none:"none"}}},yl={[at.lightFighter]:"Caça Ligeiro",[at.heavyFighter]:"Caça Pesado",[at.cruiser]:"Cruzador",[at.battleship]:"Nave de Batalha",[at.battlecruiser]:"Interceptor",[at.bomber]:"Bombardeiro",[at.destroyer]:"Destruidor",[at.deathStar]:"Estrela da Morte",[at.reaper]:"Ceifeira",[at.pathfinder]:"Exploradora",[at.smallCargo]:"Cargueiro Pequeno",[at.largeCargo]:"Cargueiro Grande",[at.colonyShip]:"Nave de Colonização",[at.recycler]:"Reciclador",[at.espionageProbe]:"Sonda de Espionagem",[at.solarSatellite]:"Satélite Solar",[at.crawler]:"Rastejador"},vl={[Ys.rocketLauncher]:"Lançador de Misséis",[Ys.lightLaser]:"Laser Ligeiro",[Ys.heavyLaser]:"Laser Pesado",[Ys.gaussCannon]:"Canhão de Gauss",[Ys.ionCannon]:"Canhão de Iões",[Ys.plasmaTurret]:"Canhão de Plasma",[Ys.smallShieldDome]:"Pequeno Escudo Planetário",[Ys.largeShieldDome]:"Grande Escudo Planetário"},bl={[We.metalMine]:"Mina de Metal",[We.crystalMine]:"Mina de Cristal",[We.deuteriumSynthesizer]:"Sintetizador de Deutério",[We.metalStorage]:"Armazém de Metal",[We.crystalStorage]:"Armazém de Cristal",[We.deuteriumTank]:"Tanque de Deutério",[We.solarPlant]:"Planta de Energia Solar",[We.fusionReactor]:"Planta de Fusão",[We.roboticsFactory]:"Fábrica de Robots",[We.shipyard]:"Hangar",[We.researchLab]:"Laboratório de Pesquisas",[We.allianceDepot]:"Depósito da Aliança",[We.missileSilo]:"Silo de Mísseis",[We.naniteFactory]:"Fábrica de Nanites",[We.terraformer]:"Terra-Formador",[We.spaceDock]:"Estaleiro Espacial",[We.lunarBase]:"Base Lunar",[We.sensorPhalanx]:"Sensor Phalanx",[We.jumpGate]:"Portal de Salto Quântico"},wl={[ot.energyTechnology]:"Tecnologia de Energia",[ot.laserTechnology]:"Tecnologia Laser",[ot.ionTechnology]:"Tecnologia de Iões",[ot.hyperspaceTechnology]:"Tecnologia de Hiperespaço",[ot.plasmaTechnology]:"Tecnologia de Plasma",[ot.espionageTechnology]:"Tecnologia de Espionagem",[ot.computerTechnology]:"Tecnologia de Computadores",[ot.astrophysics]:"Astrofísica",[ot.intergalacticResearchNetwork]:"Rede Intergaláctica de Pesquisas",[ot.gravitonTechnology]:"Tecnologia de Gravitação",[ot.combustionDrive]:"Motor de Combustão",[ot.impulseDrive]:"Motor de Impulsão",[ot.hyperspaceDrive]:"Motor Propulsor de Hiperespaço",[ot.weaponsTechnology]:"Tecnologia de Armas",[ot.shieldingTechnology]:"Tecnologia de Escudo",[ot.armorTechnology]:"Tecnologia de Blindagem"},xl={[lt.none]:"Nenhuma forma de vida",[lt.humans]:"Humanos",[lt.rocktal]:"Rock'tal",[lt.mechas]:"Mechas",[lt.kaelesh]:"Kaelesh"},Sl={[dt.residentialSector]:"Setor Residencial",[dt.biosphereFarm]:"Quinta de Biosfera",[dt.researchCentre]:"Centro de Pesquisa",[dt.academyOfSciences]:"Academia de Ciências",[dt.neuroCalibrationCentre]:"Centro de Neurocalibragem",[dt.highEnergySmelting]:"Fundição de Alta Energia",[dt.foodSilo]:"Silo de Comida",[dt.fusionPoweredProduction]:"Produção com Recurso a Fusão",[dt.skyscraper]:"Arranha-céus",[dt.biotechLab]:"Laboratório de Biotecnologia",[dt.metropolis]:"Metrópole",[dt.planetaryShield]:"Escudo Planetário",[dt.meditationEnclave]:"Enclave de Meditação",[dt.crystalFarm]:"Quinta de Cristal",[dt.runeTechnologium]:"Tecnologium Rúnico",[dt.runeForge]:"Forja Rúnica",[dt.oriktorium]:"Oriktorium",[dt.magmaForge]:"Forja de Magma",[dt.disruptionChamber]:"Câmara de Disrupção",[dt.megalith]:"Megálito",[dt.crystalRefinery]:"Refinaria de Cristal",[dt.deuteriumSynthesiser]:"Sintetizador de Deutério",[dt.mineralResearchCentre]:"Centro de Pesquisa de Minerais",[dt.advancedRecyclingPlant]:"Centro de Reciclagem Avançada",[dt.assemblyLine]:"Linha de Montagem",[dt.fusionCellFactory]:"Fábrica de Células de Fusão",[dt.roboticsResearchCentre]:"Centro de Pesquisa Robótica",[dt.updateNetwork]:"Rede de Atualização",[dt.quantumComputerCentre]:"Centro de Computação Quântica",[dt.automatisedAssemblyCentre]:"Centro de Montagem Automatizado",[dt.highPerformanceTransformer]:"Transformador de Alto Desempenho",[dt.microchipAssemblyLine]:"Linha de Montagem de Microchips",[dt.productionAssemblyHall]:"Sala de Montagem da Linha de Produção",[dt.highPerformanceSynthesiser]:"Sintetizador de Alto Desempenho",[dt.chipMassProduction]:"Produção Massiva de Chips",[dt.nanoRepairBots]:"Nanorobôs de Reparação",[dt.sanctuary]:"Santuário",[dt.antimatterCondenser]:"Condensador de Antimatéria",[dt.vortexChamber]:"Câmara do Vórtice",[dt.hallsOfRealisation]:"Salões do Conhecimento",[dt.forumOfTranscendence]:"Fórum da Transcendência",[dt.antimatterConvector]:"Convetor de Antimatéria",[dt.cloningLaboratory]:"Laboratório de Clonagem",[dt.chrysalisAccelerator]:"Acelerador de Crisálidas",[dt.bioModifier]:"Biomodificador",[dt.psionicModulator]:"Modulador Psiónico",[dt.shipManufacturingHall]:"Sala de Produção de Naves",[dt.supraRefractor]:"Super-refrator"},kl={[mt.intergalacticEnvoys]:"Emissários Intergalácticos",[mt.highPerformanceExtractors]:"Extratores de Alto Desempenho",[mt.fusionDrives]:"Motores de Fusão",[mt.stealthFieldGenerator]:"Geradores de Campo Furtivo",[mt.orbitalDen]:"Esconderijo Orbital",[mt.researchAI]:"IA de Pesquisa",[mt.highPerformanceTerraformer]:"Terra-Formador de Alto Desempenho",[mt.enhancedProductionTechnologies]:"Tecnologias de Produção Melhoradas",[mt.lightFighterMkII]:"Caça Ligeiro V2",[mt.cruiserMkII]:"Cruzador V2",[mt.improvedLabTechnology]:"Tecnologias de Laboratório Melhoradas",[mt.plasmaTerraformer]:"Terra-Formador a Plasma",[mt.lowTemperatureDrives]:"Motores de Baixa Temperatura",[mt.bomberMkII]:"Bombardeiro V2",[mt.destroyerMkII]:"Destruidor V2",[mt.battlecruiserMkII]:"Interceptor V2",[mt.robotAssistants]:"Assistentes Robóticos",[mt.supercomputer]:"Supercomputador",[mt.volcanicBatteries]:"Baterias Vulcânicas",[mt.acousticScanning]:"Varrimento Acústico",[mt.highEnergyPumpSystems]:"Sistemas de Bomba de Alto Desempenho",[mt.cargoHoldExpansion_CivilianShips]:"Expansão da Baía de Carga (Naves Civis)",[mt.magmaPoweredProduction]:"Produção com Recurso a Magma",[mt.geothermalPowerPlants]:"Centrais de Energia Geotérmica",[mt.depthSounding]:"Sonda de Profundidade",[mt.ionCrystalEnhancement_heavyFighter]:"Melhoramento de Cristal de Iões (Caça Pesado)",[mt.improvedStellarator]:"Gerador Estelar Melhorado",[mt.hardenedDiamondDrillHeads]:"Cabeças de Broca de Diamante Endurecido",[mt.seismicMiningTechnology]:"Tecnologia de Extração Sísmica",[mt.magmaPoweredPumpSystems]:"Sistemas de Bomba com Recurso a Magma",[mt.ionCrystalModules]:"Módulos de Cristais de Iões",[mt.optimisedSiloConstructionMethod]:"Método Otimizado de Construção de Silos",[mt.diamondEnergyTransmitter]:"Transmissor de Energia de Diamante",[mt.obsidianShieldReinforcement]:"Escudo Reforçado com Obsidiana",[mt.runeShields]:"Escudos Rúnicos",[mt.rocktalCollectorEnhancement]:"Melhoramento de Colecionador dos Rock’tal",[mt.catalyserTechnology]:"Tecnologia de Catalisador",[mt.plasmaDrive]:"Motor de Plasma",[mt.efficiencyModule]:"Módulo de Eficiência",[mt.depotAI]:"IA de Depósito",[mt.generalOverhaul_lightFighter]:"Remodelação Geral (Caça Ligeiro)",[mt.automatedTransportLines]:"Linhas de Transporte Automatizadas",[mt.improvedDroneAI]:"IA de Drones Melhorada",[mt.experimentalRecyclingTechnology]:"Tecnologia de Reciclagem Experimental",[mt.generalOverhaul_cruiser]:"Remodelação Geral (Cruzador)",[mt.slingshotAutopilot]:"Piloto Automático Gravítico",[mt.highTemperatureSuperconductors]:"Supercondutores de Alta Temperatura",[mt.generalOverhaul_battleship]:"Remodelação Geral (Nave de Batalha)",[mt.artificialSwarmIntelligence]:"Inteligência Artificial de Enxame",[mt.generalOverhaul_battlecruiser]:"Remodelação Geral (Interceptor)",[mt.generalOverhaul_bomber]:"Remodelação Geral (Bombardeiro)",[mt.generalOverhaul_destroyer]:"Remodelação Geral (Destruidor)",[mt.experimentalWeaponsTechnology]:"Tecnologia de Armas Experimental",[mt.mechanGeneralEnhancement]:"Melhoramento de General dos Mechas",[mt.heatRecovery]:"Recuperação de Calor",[mt.sulphideProcess]:"Processamento de Sulfuretos",[mt.psionicNetwork]:"Rede Psiónica",[mt.telekineticTractorBeam]:"Feixe de Captura Telecinético",[mt.enhancedSensorTechnology]:"Tecnologias de Sensores Melhoradas",[mt.neuromodalCompressor]:"Compressor Neuromodular",[mt.neuroInterface]:"Neurointerface",[mt.interplanetaryAnalysisNetwork]:"Rede de Análise Interplanetária",[mt.overclocking_heavyFighter]:"Overclocking (Caça Pesado)",[mt.telekineticDrive]:"Motor Telecinético",[mt.sixthSense]:"Sexto Sentido",[mt.psychoharmoniser]:"Harmonizador Psíquico",[mt.efficientSwarmIntelligence]:"Inteligência de Enxame Eficiente",[mt.overclocking_largeCargo]:"Overclocking (Cargueiro Grande)",[mt.gravitationSensors]:"Sensores de Gravitação",[mt.overclocking_battleship]:"Overclocking (Nave de Batalha)",[mt.psionicShieldMatrix]:"Matriz de Escudo Psiónico",[mt.kaeleshDiscovererEnhancement]:"Melhoramento de Descobridor dos Kaelesh"},Cl={darkMatter:"Matéria Negra"},Tl={tabs:{dateRanges:"Intervalo de datas",colors:"Cores",common:"Comum",importExport:"Importar/Exportar",expeditions:"Expedições",combats:"Combates",debrisFields:"Campos de Destroços",resourceBalance:"Resumo de Recursos",universeHistory:"Histórico do Universo",dangerZone:"Zona de Perigo",accessbility:"Acessibilidade",linkAccounts:"Linkar Contas",migrateOldData:"Migrar dados antigos"},dateRanges:{defaultNames:{today:"Hoje",yesterday:"Ontem",currentWeek:"Esta semana",lastWeek:"Semana passada",currentMonth:"Este mês",newRange:"novo intervalo"},since:e=>`Desde ${e}`,firstDayTemplate:"<primeiro dia>",headers:{label:"Label",type:"Tipo",rangeStart:"Início do intervalo",rangeContains:"Intervalo contem"},day:"dia",days:"dias",daysAgo:"dias atrás",week:"semana",weeks:"semanas",weeksAgo:"semanas atrás",month:"mês",months:"meses",monthsAgo:"meses atrás",year:"ano",years:"anos",yearsAgo:"anos atrás"},colors:{combatResults:"Resultados do combate",expeditionEvents:"Eventos de Expedição",expeditionEventSizes:"Tamanhos dos eventos de Expedição",expeditionDepletionLevels:"Desgaste do Sistema",lifeformDiscoveries:"Descobertas de Formas de Vida",lifeforms:"Formas de Vida",resources:"Recursos",ships:"Naves"},common:{conversionRates:{title:"Taxas de conversão",msuLong:"Converter para Metal",dsuLong:"Converter para Deutério"},extensionLanguage:"Idioma (dentro do OGame Tracker)",extensionLanguageFallbackHint:"Textos serão mostrados em Inglês se não existir tradução para o idioma selecionado.",serverSettings:{title:"Dados do Servidor",lastUpdate:"Última Actualização",forceUpdate:"Actualizar dados do servidor"}},expeditions:{resourceUnitFactorsOfShipFoundOnExpeditions:"Factores de unidades de recursos das naves encontradas em expedições"},combats:{resourceUnitFactorsOfLostShips:"Factor de unidades de recurso das naves perdidas em combate",ignoreEspionageCombats:{title:"Ignorar combates de espionagem",label:"Ignorar combates de espionagem para a monitorização dos combates"}},resourceBalance:{detailedResourceBalance:{header:"Resumo detalhado dos Recursos",checkboxLabel:"Mostrar resumo detalhado dos recursos"},includeShipsFoundOnExpeditions:{header:"Naves encontradas em expedições",checkboxLabel:"Incluir os recursos das naves encontradas em expedições no Resumo dos Recursos"},includeShipsLostInCombats:{header:"Naves destruidas em combates",checkboxLabel:"Incluir os recursos das naves perdidas em combate no Resumo dos Recursos"},includeLostLootResources:{header:"Recursos perdidos em combates",checkboxLabel:"Incluir os recursos perdidos em combate no Resumo dos Recursos"}},showConvertedUnitsInTables:{title:"MSU/DSU em tabelas",label:"Mostrar valores MSU/DSU convertidos nas tabelas",infoAmortization:"Tempo de amortização, ainda assim, será calculado cusando o custo e produção em MSU/DSU"},reset:"Restaurar definições",setDefaultRoute:"Marcar como default",setDefaultSubRoute:"Marcar como default para esta área",dangerZone:{doYouWantToContinue:"TENS A CERTEZA QUE QUERES CONTINUAR?",deleteExpeditions:{button:e=>`Apagar todas as expedições monitorizadas na conta actualmente selecionada (${e})`,confirmationText:(e,t)=>`Se confirmares, todas as ${t} expedições monitorizadas serão apagadas da conta actualmente selecionada (${e}).`},deleteCombats:{button:e=>`Apagar todos os combates monitorizados na conta actualmente selecionada (${e})`,confirmationText:(e,t)=>`Se confirmares, todos os ${t} combates monitorizados serão apagados da conta actualmente selecionda (${e}).`},deleteDebrisFieldReports:{button:e=>`Apagar todos os relatórios de reciclagem de campos de destroços monitorizados na conta actualmente selecionada (${e})`,confirmationText:(e,t)=>`Se confirmares, todos os ${t} relatórios de reciclagem de campos de destroços serão apagados da conta actualmente selecionada (${e}).`},deleteAccount:{button:e=>`Apagar toda a informação da conta actualmente selecionada (${e})`,confirmationText:e=>`Se confirmares, todos os dados da conta actualmente selecionada (${e}) serão apagados.\nIsto inclui o histórico do universo se não existir outra conta monitorizada nesse universo.`},deleteUniverseHistory:{button:e=>`Apagar o histórico do universo da conta actualmente selecionada (${e})`,confirmationText:e=>`Se confirmares, todo o histórico do universo da conta actualmente selecionada (${e}) será apagado.`},deleteEverything:{button:"Apagar todos os dados",confirmationText1:"Se confirmares, todos os dados serão apagados.\nIsto inclui to todos de todas as contas incluindo expedições, combates, reciclagem de campos de destroços, historico dos universos e mais.",confirmationText2:"Confirma novamente que é para apagar todos os dados."}},importExport:{export:{header:"Exportar",description:"Aqui podes exportar os teus dados. Irá incluir dados relevantes de todas as tuas contas monitorizadas e os seus servidores.",includeUniverseHistory:"incluir o historico do universo no export (isto vai aumentar significativamente o tamanho do ficheiro assim como do tempo de importação!)",button:"Iniciar exportação",wait:"Aguarda enquanto os dados são preparados para a exportação...",errors:{unexpectedError:"Ocorreu um erro inesperado durante a exportação dos teus dados."}},import:{header:"Importar",description:"Aqui poderás importar os teus dados a partir de um ficheiro. Seleciona o ficheiro.",button:"Iniciar importação",wait:"Aguarda enquanto os teus dados são importados...",errors:{invalidFormat:"O formato do ficheiro é inválido.",unexpectedError:"Ocorreu um erro inesperado durante a importação dos teus dados."}},importCallbacks:{importingSettings:"A importar as tuas definições",importingBasicData:"A importar a conta default e os dados do servidor",importingUniverseHistories:(e,t,r,a)=>`A importar historico dos universos (servidor ${e+1}/${t}, entrada ${r+1}/${a})`,importingAccounts:(e,t,r,a,n)=>{const o="A importar contas",i=`${e+1}/${t}`;if("account"==r)return`${o} (${i})`;if("combat-reports"==r)return`${o} (${i}, combate ${a+1}/${n})`;if("expeditions"==r)return`${o} (${i}, expedição ${a+1}/${n})`;if("debris-fields"==r)return`${o} (${i}, campo de detritos ${a+1}/${n})`;if("lifeform-discoveries"==r)return`${o} (${i}, missão de descoberta de formas de vida ${a+1}/${n})`;if("empire.data"==r)return`${o} (${i}, dados básicos do império)`;if("empire.planets"==r)return`${o} (${i}, planeta ${a+1}/${n})`;if("empire.moons"==r)return`${o} (${i}, lua ${a+1}/${n})`;if("universe-specific-settings"==r)return`${o} (${i}, definições específicas do universo)`;throw new Error(`Invalid type '${r}'`)}}},accessibility:{showSimplifiedResults:{title:"Vista simplificada",label:"Vista simplificada, esconde as mensagens originais dos resultados das expedições e dos relatórios de reciclagem dos campos de destroços e mostra icons nas notificações."}},debrisFields:{separateExpeditionDebrisFields:{title:"Posição 16 separada",label:"Separar as reciclagem dos campos de destroços da posição 16 das outras (1-15)"}},linkAccounts:{header:e=>`Linkar contas com a conta actualmente selecionada (${e})`,descriptionHtml:e=>`Só deverás linkar contas se quiseres que o Ogame Tracker consider os dados das contas a link como dados da conta actualmente selecionada (${e}).<br/>Isto é comum acontecer quando existe uma fusão de universos e as contas passam a ser consideradas outras pelo OGame Tracker.<br/><br/>Examplo: <br/><ol>\n                    <li>O jogador "OGame Professional" está a jogar no servidor "EN Milkyway"</li>\n                    <li>O servidor "EN Milkyway" é tornado exodus durante a fusão</li>\n                    <li>O jogador "OGame Professional" faz merge da sua conta para o servidor "EN Cartwheel"</li>   \n                    <li>Depois do merge, o OGame Tracker não mostra quais quer dados do servidor original "EN Milkyway" para a nova conta que foi merged</li>\n                    <li>No OGame Tracker a conta antigo "OGame Professional" no servidor "EN Milkyway" é linkada para nova conta "OGame Professional" no servidor "EN Cartwheel"</li>\n                    <li>Os dados que foram enviados e guardados do antigo servidor "EN Milkyway" serão agora mostrados na nova conta no servidor "EN Cartwheel"</li>\n                </ol>\n            `,linkAccount:"Linkar outra conta:",linkedAccounts:"Contas linkadas:"}},Pl={[ee.metal]:"Metal",[ee.crystal]:"Cristal",[ee.deuterium]:"Deutério",energy:"Energia"},Dl={ogame:{buildings:bl,lifeforms:xl,lifeformBuildings:Sl,lifeformTechnologies:kl,premium:Cl,resources:Pl,research:wl,ships:yl,defenses:vl},extension:{common:{averagePerDay:"⌀ por dia",chart:"Gráfico",table:"Tabela",sum:"Soma",total:"total",resourceUnits:"Unidades de Recursos",dsu:"DSU",msu:"MSU",date:"Data",dateTime:"Data & Hora",madeWithLove1:"Feito com",madeWithLove2:"por Wonkydonky"},settings:Tl,resources:Pl,expeditions:{header:"Expedições",tabHeaders:{overview:"Resumo",foundResources:"Recursos",foundShips:"Naves",foundDarkMatter:Cl.darkMatter,foundItems:"Items",depletion:"Desgaste",info:{header:"Info",topFinds:"Melhores Descobertas",possibleFinds:"Lista de possíveis descobertas"},subHeaders:{amount:"Quantidade",sizes:"Tamanhos",resources:"Unidades de recurso",count:"Contagem",sizesByResource:"Tamanhos por recursos"}},expeditionEvents:{[vt.nothing]:"Sem evento",[vt.resources]:"Recursos",[vt.fleet]:"Naves",[vt.delay]:"Atraso",[vt.early]:"Cedo",[vt.darkMatter]:Cl.darkMatter,[vt.pirates]:"Piratas",[vt.aliens]:"Aliens",[vt.combat]:"Combate",[vt.item]:"Item",[vt.trader]:"Mercador",[vt.lostFleet]:"Frota Perdida"},expeditionEventSizes:{[yt.small]:"Descoberta Comum",[yt.medium]:"Descoberta Grande",[yt.large]:"Descoberta Enorme","fled-death-star":"Inimigos fugiram"},depletionLevels:{[bt.none]:"Muito baixo",[bt.low]:"Baixo",[bt.medium]:"Médio",[bt.high]:"Alto",unknown:"Desconhecido"},expeditions:"Expedições",finds:"Descobertas",shipsFound:"Naves encontradas",depletion:"Desgate do sistema",topFinds:{title:e=>`Melhores descobertas (${e})`,shipUnits:"Unidades de naves",size:"Tamanho",amount:"Quantidade",date:"Data"},possibleFinds:{info:{playerClass:"Classe do Jogador",economySpeed:"Velocidade da Economia",resourceFindBonus:"Bónus de descobertas de recursos",shipFindBonus:"Bónus de decobertas de naves",darkMatterFindBonus:"Bónus de descobertas de Matéria Negra",discovererBonus:"Bónus de Classe de Descobridor"},maximumFinds:"Máximo de Descobertas",findsDarkMatter:"Limites das descobertas de MN",listOfPossibleFinds:"Lista de possíveis descobertas (recursos, naves)",findSizes:e=>`Possíveis quantidades de descobertas (${e})`,shipUnits:"Unidades de naves"}},combats:{header:"Combates",tabHeaders:{overview:"Resumo",loot:"Pilhagem",lostShips:"Naves Perdidas",subHeaders:{againstPlayers:"Contra Jogadoress",onExpeditions:"Em Expedições",amount:"Quantidade",resources:"Unidades de Recursos"}},combats:"Combates",shipsLost:"Naves Perdidas",combatResults:{[J.won]:"Vitórias",[J.lost]:"Derrotas",[J.draw]:"Empates"}},donate:{header:"Doação",subHeader:"Doar para ajudar o desenvolvimento do OGame Tracker",crypto:{header:"Doar criptomoedas"},kofi:{header:"Doar através do PayPal ou cartão de crédito/débito",buttonText:"Doar através do Ko-Fi",message:"Não é necessário criar uma conta para doar através do Ko-fi. Todas as doações vão directamente para o programador."}},debrisFields:{header:"Campo de Destroços",addDebrisFieldManually:{title:"Adicionar campo de destroços manualmente",buttonText:"Adicionar"},position:"Posição"},resourceBalance:{header:"Estimativa de Recursos","combat-report":"de combates","debris-field-report":"de campos de destroços",expedition:"de expedições"},empire:{header:"Império",planet:"Planeta",production:{header:"Produção",subHeaders:{resourceProduction:"Produção de Recursos",mineOverview:"Resumo das Minas"},averagePerHour:"⌀ por hora",totalPerHour:"total por hora",totalPerDay:"total por dia",totalPerWeek:"total por semana",activeProductionSettings:"Definições de Produção Activas",messageProduction100:"Os valores apresentados são com base no factor de produção de 100% e não tem em conta a falta de energia.",mines:{crawlersAvailable:"disponivel",crawlersToReachLimit:e=>`${e} rastejadores para bonús máximo`},items:"Items Activos",breakdown:{basicIncome:"Produção Básica",mineProduction:"Produção da Mina",consumption:"Consumo",lifeformBuildings:"Edifícios de Forma de Vida",crawlers:"Rastejadores",items:"Items",geologist:"Geólogo",commandStaff:"Equipa de Comando",playerClass:"Classe do Jogador",allianceClass:"Classe da Aliança",lifeformTechnologies:"Tecnologias de Forma de Vida"},settings:{reset:"Reset",header:"Definições de Produção",applyAndClose:"Aplicar e fechar definições de produção"}},amortization:{header:"Amortização",table:{cost:"Custo",levels:"Níveis",productionPlus:"Diferença de Produção",amortizationTime:"Tempo de Amortização",groupSelectedItems:"Agrupar items selecionados",showOriginalItems:"Mostrar todos os items individualmente",levelsOnPlanets:(e,t)=>`${e} ${1==e?"nível":"níveis"} ${1==t?"no":"nos"} ${t} ${1==t?"planeta":"planetas"}`},settings:{header:"Definições",applyAndClose:"Aplicar definições e fechar",includeSettings:{header:"Incluído no cálculo",mines:"Minas",expeditions:"Expedições",astrophysicsPerformanceNote:"Nota: Requer bastante processamento, irá afectar muito o desempenho"},playerSettings:{header:"Definições Gerais",optimizeForResources:"Optimizar para recursos selecionados",officers:"Oficiais",playerClass:"Classe do Jogador",allianceClass:"Classe da Aliança",currentLevelOf:e=>`Nível Actual de ${e}`,lifeformLevels:"Níveis de Forma de Vida",unusedRaidColonySlots:"Slots de colónias não usados actualmente"},astrophysicsSettings:{header:e=>`${e} definições`,newColony:"nova Colónia"},planetSettings:{header:"Definições do Planeta",global:{deselectItems:"Desmarcar todos os items",ignoreInactiveLifeformTechnologySlots:"Ignorar slots de tecnologias inactivas de forma de vida para todos os planetas"},includeInResult:"Incluir no cálculo",position:"Posição",maxTemperature:"Temp. Max.",activeItems:"Items Activos",crawlers:{title:"Rastejadores",percentage:"% Produção",fixCount:"Contagem Fixa",maxCount:"Contagem Max."},mines:"Nível Actual das Minas",lifeform:"Forma de Vida",lifeformSettings:"Definições de Forma de Vida",relevantLifeformBuildings:"Edíficios Relevantes de Forma de Vida",lifeformTechnologies:"Tecnologias de Forma de Vida",ignoreEmptySlots:"Ignorar slots inactivos"},expeditionSettings:{header:"Definições de Expedições",averageWavesPerDay:"⌀ Vagas por dia",items:"Slots de item",averageExpeditionsPerDay:"⌀ Expedições por dia",shipUnitFactors:"Factor de recurso de naves",topPlayerScore:"Pontuação do Top player"}},info:{generatingItems:"A calcular os próximos melhores items",slowCalculation:"O cálculo da amortização ficará bastante mais lento agora que os edifícios e tecnologias das formas de vida foram incluídas. Isto será, provavelmente, optimizado no futuro.",ctrlClick:"Ctrl + Click numa checkbox para (des)selecionar todos os item até ao selecionado."},saveLoad:{saveButton:"Gravar resultados do cálculo da amortização",loadButton:e=>`Carregar gravação (${e})`,loadedSave:(e,t)=>`A ver os resultados guardados (${e}) - ${t} entradas escondidas`,abandonedPlanet:"Planeta Destruído"},generateItems:e=>`${e} registos`},lifeforms:{header:"Formas de Vida",subHeaders:{overview:"Resumo",progress:"Progresso",discoveryMissions:"Missões",discoveryResults:"Resultados",experience:"Experiência",researchBonuses:"Bonus de Pesquisas",planetBonuses:"Bónus efectivo nos planetas"},planet:"Planeta",lifeform:"Forma de Vida",buildings:"Edifícios de Forma de Vida",technologies:"Tecnologias de Forma de Vida",tier:"Escalão",level:"Nível",totalLifeformExperience:"Experiência (total)",discoveryDateUnknown:"Desconhecido",notDiscoveredYet:"Ainda não descoberto",discoveryMissions:"Missões de Descoberta",eventTypes:{[kt.nothing]:"Nada encontrado",[kt.lostShip]:"Frota de exploração perdida",[kt.newLifeformFound]:"Nova Forma de Vida",[kt.knownLifeformFound]:"Experiência de Forma de Vida",[kt.artifacts]:"Artefactos encontrados"},artifactFindingSizes:{[Ct.small]:"Descoberta Comum",[Ct.medium]:"Descoberta Grande",[Ct.large]:"Descoberta Enorme",[Ct.storageFull]:"Armazenamento Cheio"},lifeformFound:"Forma de Vida encontrada",alwaysAvailable:"Sempre disponível",artifacts:"Artefactos",experiencePoints:"Pontos de Experiência",discoveredOn:"Forma de Vida descoberta em",numberOfLifeformDiscoveries:"Número de descobertas",researchBonuses:{breakdown:{slot:"Slot",research:"Pesquisa",bonus:"Bónus",lifeformBuildingsBoost:"Boost de Edifícios de Forma de Vida",lifeformLevelBoost:(e,t)=>`Boost de Nível de Forma de Vida (${e}: ${t})`,bugBoost:"Boost causado por bugs"},production:{header:"Produção de Recursos"},expeditionFinds:{header:"Descobertas das Expedições",resources:"Recursos",ships:"Naves",fleetLoss:"Frotas Perdidas"},expeditionSpeed:{header:"Média da elocidade de chegada das Expedições",bonus:"Bónus de Velocidade"},ships:{header:"Naves",armor:"Blindagem",shield:"Escudo",damage:"Dano",cargo:"Capacidade",speed:"Velocidade"},defenses:{header:"Defesas"},fuelConsumption:{header:"Consumo de Deutério"},fuelReturn:{header:"Deutério recuperado ao voltar para trás",bonus:"Deutério recuperado"},buildingCostTime:{header:"Custo&Tempo dos Edifícios",cost:"Custo",time:"Tempo"},researchCostTime:{header:"Custo&Tempo das Pesquisas",researches:"Pesquisas",lifeformResearches:"Pesquisas de Formas de Vida"},crawlers:{header:"Rastejadores",productionBonus:"Produção de Recursos",energyConsumption:"Consumo de Energia"},denCapacity:{header:"Capacidade do Den"},phalanxRange:{header:"Alcance do Phalanx"},discoveryMissions:{header:"Velocidade de Missões de Descoberta"},playerClasses:{header:"Classes de Jogador",collector:{productionBonus:"Aumenta a produção das minas",energyProductionBonus:"Aumenta a produção de Energia",transporterSpeedBonus:"Bónus de velocidade dos cargueiros",transporterCargoBonus:"Bónus de capacidade dos cargueiros",crawlerProductionBonus:"Bónus na produção dos Rastejadores",geologistCrawlerAmountBonus:"Mais capacidade para Rastejadores com o Geólogo"},discoverer:{researchDuration:"Reduz tempo de pesquisa",increasedExpeditionFinds:"Aumenta ganhos com expedições",largerPlanets:"Maiores planetas ao colonizar",additionalExpeditionSlots:"Slots adicionais para expedições",reducedExpeditionCombatChance:"Reduz probabilidade de inimigos na expedição",phalanxRange:"Maior alcance do Phalax"},general:{combatShipSpeed:"Bónus de velocidade em naves de combate",recyclerSpeed:"Bónus de velocidade nos recicladores",fuelConsumption:"Reduz o consumo de deutério em todas as naves",increasedCargoRecyclersPathfinders:"Aumenta a capacidade dos recicladores e exploradoras",additionalCombatResearchLevels:"Níveis adicionais nas pesquisas de combate",additionalFleetSlots:"Slots adicionais para frota",additionalMoonFields:"Campos adicionais nas luas"},classBonus:"Bónus da Classe",bonus:"Bónus",baseValue:"Valor Base",valueWithBonuses:"Valor com Bónus"}},planetBonuses:{resourceProduction:{header:"Produção de recursos"},lifeformResearchCostTime:{header:"Tempo e Custo de Pesquisas de Forma de Vida"},wreckfield:{header:"Campo de Destroços"}},topFinds:{topFinds:"Melhores Descobertas",worstFinds:"Piores Descobertas",size:"Tamanho",amount:"Quantidade",date:"Data",artifacts:"Artifactos",experience:"XP"}}},switchAccounts:{title:"Seleciona uma conta para abrir numa nova tab"},about:{faqHelp:{header:"Ajuda",faq:{header:"F.A.Q.",fleetLostOnExpedition:{header:"Porque que é que as naves perdidas em expedições não são contabilizadas?",text:"Contabilizar as naves perdidas em expedições requer fazer monitorização permanente a todas as frotas, o que não é possível."},syncBetweenDevices:{header:"Porque é que não existe sincronização dos meus dados entre vários dispositivos?",text:"O Ogame Tracker guarda mais informação do que aquela que pode ser sincronizada usando a tua conta (Google, Microsoft, etc). A sincronização com um servidor externos poderá ser uma possibilidade no futuro."},productionInResourceBalance:{header:"Porque é que a estimativa de recursos não inclui a minha produção de recursos?",text:"A tua produção de recursos depende de vários factores e seria necessário uma monitorização permanente. É possível mas a implementação desta funcionalidade é muito mais complexa do que a utilizade real para o jogador."},whatAreAverages:{header:"O que significa '⌀ por dia'?",text:"Significa a média global de dias com pelo menos um evento."}},tips:{header:"Dicas",rightClickDefaultRoute:"Podes usar o botão direito do ratona tab principal do lado esquerdo ou em qualquer sub-menu para o tornar como standard para a rota selecionada.",numbersKeyboardNavigation:"Podes abrir as tab carregando no respectivo digito no teclado.",amortizationTable:{part1:"Queres saber o que construir ou pesquisar para aumentar a tua produção de recursos da maneira mais eficiente? Tenta a ",name:"calculadora de amortização interactiva",part2:"."},inlineSettings:"Poderás altera as definições relacionadas clicando no ícone da roda dentada no lado direito.",switchAccountHtml:'Poderás abrir o OGame Tracker para uma outra conta clicando no ícone <span class="mdi mdi-account-multiple"></span> e selecionando a respectiva conta.'},messageDiscord:{part1:"Precisas de ajuda, encontraste um bug ou tens alguma funcionalidade que queiras ver implementada? Entra no ",discordServer:"Discord",part2:" e escreve uma mensagem no canal adequado."}},info:{header:"Info",table:{currentAccount:{header:"Informação acerca da conta selecionada",numberOfTrackedExpeditions:"Número de expedições monitorizadas",numberOfTrackedCombatReports:"Número de relatórios de combate monitorizados ",numberOfTrackedDebrisFieldReports:"Número de relatórios de reciclagem monitorizados",numberOfTrackedLifeformDiscoveries:"Número de explorações monitorizadas",lastUpdateServerSettings:"Última actualização das definições do servidor",numberOfUniverseHistoryEntries:"Número de registos no historico do universo"},global:{header:"Informação acerca de todos os dados no OGame Tracker",numberOfTrackedAccounts:"Número de contas monitorizadas",estimatedSize:"Tamanho dos dados guardados em disco"}}}},universeHistory:{header:"Histórico do Universo",settings:{messages:{notEnabledHtml:"\n            <b>Monitorização do histórico das tabelas de pontuação não está activo.</b><br/>\n            Activar esta funcionalidade fará com que as pontuações dos jogadores e alianças sejam monitorizados.",historyTrackingNotEnabledHtml:'\n            <b>Monitorização do histórico do universo não está activado.</b><br/>\n            Activar esta funcionalidade fará com que todas as alterações a jogadores ou alianças seja monitorizada.<br/>\n            Isto incluíra nomes de jogadores e alianças, tags de alianças, entradas e saídas de membros de alianças, \n            estados dos jogadores e alterações relativas a planetas e luas \n            incluindo nomes, coordenadas e abandonos/destruição de planetas e tuas .<br />\n            <i>Isto irá gerar uma grande quantidade de dados!\n            Poderás desactivar esta funcionalidade <a href="#/settings/universe-history">neste menu de definições</a>.</i>\n            ',trackingTimesHtml:"\n            Pelo menos uma vez por dia as pontuações e os dados do universo serão actualizados (se a funcionalidade estiver activa).<br/>\n            Poderás ver o momento do update abaixo.\n            Se uma actualização for perdida por algum motivo será feita novamente assim que possível."},enableHighscoreTrackingOnly:"Activar monitorização das pontuações do universo",enableHistoryTracking:"Activar a monitorização do historico do universo"},tabs:{players:"Jogadores",alliances:"Alianças",subtabs:{highscore:"Pontuações",history:"Histórico"}},playerSelection:{header:"Seleção de jogadores",search:"procurar jogador"},allianceSelection:{header:"Seleção de alianças",search:"procurar aliança"},highscoreTabs:{total:"Total",economy:"Economia",research:"Pesquisas",military:"Militar",militaryBuilt:"Militar construído",militaryDestroyed:"Militar destruído",militaryLost:"Militar perdido",honor:"Honra",numberOfShips:"Número de naves",lifeform:"Formas de Vida",lifeformDiscoveries:"Descobertas de Formas de Vida",lifeformEconomy:"Economia de Formas de Vida",lifeformTechnology:"Tecnologia de Formas de Vida"},historyTabs:{status:"Estado",nicknames:"Nicks",alliances:"Alianças",planetAndMoons:"Planetas e Luas",tags:"Tags",names:"Nomes",members:"Membros"},noAlliance:"Sem Aliança",today:"hoje",name:"Nome",tag:"Tag",members:"Membros",alliance:"Aliança",from:"De",until:"Até",status:{active:"Activo",vacation:"Modo de Férias",inactive:"Inactivo (>= 7 dias)",inactiveLong:"Ianctivo (>= 28 dias)",banned:"Banido",outlaw:"Fora da Lei",deleted:"Apagado",admin:"Administrado"},loadingTakingLong:"Carregar os dados está a demorar mais do que era esperado. A base de dados poderá está a ser actualizada neste momento. Espera um pouco mais ou tenta mais tarde."},notifications:{combatTracking:{title:e=>"1"==e?`${e} novo relatorio de combate monitorizado`:`${e} novos relatórios de combate monitorizados`,message:e=>"1"==e?`${e} novo relatorio de combate foi gravado.`:`${e} novos relatórios de combate foram gravados.`},debrisFieldReportTracking:{title:e=>"1"==e?`${e} novo campo de destroços monitorizado`:`${e} novos campos de destroços monitorizados`,message:e=>"1"==e?`${e} novo campo de destroços foi gravado.`:`${e} novos campos de destroços foram gravados.`},expeditionTracking:{fleetLost:{title:e=>"1"==e?`${e} frota perdida`:`${e} frotas perdidas`,message:e=>"1"==e?`${e} frota não retornou da expedição.`:`${e} frotas nao retornaram das expedições.`},result:{title:e=>"1"==e?`${e} nova expedição monitorizada`:`${e} novas expedições monitorizadas`,summary:"Resumo das descobertas",events:"Eventos de Expedições"}},lifeformDiscoveryTracking:{title:e=>"1"==e?`${e} nova descoberta de forma de vida monitorizada`:`${e} novas descobertas de forma de vida monitorizadas`,message:e=>"1"==e?`${e} nova descoberta de forma de vida guardada.`:`${e} novas descobertas de forma de vida guardadas.`},messageTrackingError:{title:e=>"1"==e?`Falhou o processamento de ${e} mensagem`:`Falhou o processamento de ${e} mensagens`,message:e=>"1"==e?`${e} mensagem causou um erro e não foi monitorizada. A mensagem em causa foi marcada a vermelho. Contacta o developer via Discord.`:`${e} mensagens causaram um erro e não foram monitorizadas. As mensagens em causa doram marcadas a vermelho. Contacata o developer via Discord.`}},tools:{signatureGenerator:{header:"Gerador de Assinatura",averagePerHour:"⌀/hora",totalPerHour:"por hora",totalPerDay:"por dia",totalPerWeek:"por semana",production:"Produção",expeditions:"Expedições",lifeformDiscoveries:"Missões FV",combats:"Combates",debrisFieldReports:"Destroços reciclados"},scrapyardMerchant:{header:"Mercador de Sucata",percentage:"% no Mercador de Sucata",count:"Contagem"}},excelExport:{header:"Exportar para Excel",chooseBelowMessage:"Escolhe que dados queres incluir na exportação:",groups:{expeditions:{header:"Expedições",rawData:"Dados em bruto (todos os registos guardados)",dailyOverview:"Resumo dos resultados por dia",dailyDepletion:"Resumo do desgaste do sistema por dia",dailyResources:"Descobertas de recursos por dia",dailyResourceSizes:"Tamanho das descobertas de recursos por dia",dailyShips:"Descobertas de naves por dia",dailyShipSizes:"Tamanho das descobertas de naves por dia",dailyDarkMatter:"Descobertas de Matéria Negra por dia",dailyDarkMatterSizes:"Tamanho das descobertas de Matéria Negra por dia"},combats:{header:"Combates",rawData:"Dados em bruto (todos os registos guardados)",dailyResults:"Resultados dos comabtes por dia",dailyLoot:"Montante de pilhagem por dia",dailyLostShips:"Naves perdidas por dia"},debrisFields:{header:"Campos de Destroços",rawData:"Dados em bruto (todos os registos guardados)",dailyResources:"Recursos reciclados por dia"},lifeformDiscoveries:{header:"Missões de Descoberta",rawData:"Dados em bruto (todos os registos guardados)",dailyExperience:"Experiencia ganha por dia"}},generateButton:"Gerar ficheiro de Excel",expeditions:{prefix:"EX",sheets:{rawData:"Dados em bruto",dailyDepletion:"Desgaste diário do sistema",dailyResults:"Resultados - diário",dailyResources:"Recursos - diário",dailyResourcesSize:"Recursos - diário (tamanhos)",dailyShips:"Naves - diário",dailyShipsSize:"Naves - diário (tamanho)",dailyDarkMatter:"Matéria Negra - diário",dailyDarkMatterSize:"Matéria Negra - diário (tamanho)"},eventType:"Tipo",eventSize:"Tamanho",item:"Item"},combats:{prefix:"CR",sheets:{rawData:"Dados em bruto",dailyResults:"Resultados - diário",dailyLoot:"Pilhagem - diário",dailyLostShips:"Naves perdidas - diário"},result:"Resultado do combate",coordinates:"Coordenadas",galaxy:"Galáxia",system:"Sistema",position:"Posição",targetType:"Tipo de alvo",combatType:"Tipo de combate",expeditionCombatOpponent:"Adversário de combate de expedição",loot:"Pilhagem",lostShips:"Naves Perdidas",debrisField:"Campo de Destroços",moon:"Lua",planet:"Planeta",expeditionCombat:"Combate de Expedição",playerCombat:"Combate de Jogador",pirates:"Piratas",aliens:"Aliens",againstPlayers:"Contra jogadores",onExpeditions:"Em expedições"},debrisFields:{prefix:"DF",sheets:{rawData:"Dados em bruto",dailyResources:"Recursos - diário"}},lifeformDiscoveries:{prefix:"LF",sheets:{rawData:"Dados em bruto",dailyExperience:"Experiência - diário"},result:"Descobertas",experience:"Experiência",lifeform:"Forma de Vida",artifacts:"Artefactos",artifactsSize:"Tamanho"}},playerClasses:{collector:"Colecionador",discoverer:"Descobridor",general:"General",none:"Nenhuma"}}},El={[at.lightFighter]:"Chasseur léger",[at.heavyFighter]:"Chasseur lourd",[at.cruiser]:"Croiseur",[at.battleship]:"Vaisseau de bataille",[at.battlecruiser]:"Traqueur",[at.bomber]:"Bombardier",[at.destroyer]:"Destructeur",[at.deathStar]:"Étoile de la mort",[at.reaper]:"Faucheur",[at.pathfinder]:"Éclaireur",[at.smallCargo]:"Petit transporteur",[at.largeCargo]:"Grand transporteur",[at.colonyShip]:"Vaisseau de colonisation",[at.recycler]:"Recycleur",[at.espionageProbe]:"Sonde d`espionnage",[at.solarSatellite]:"Satellite solaire",[at.crawler]:"Foreuse"},Ml={[Ys.rocketLauncher]:"Lanceur de missiles",[Ys.lightLaser]:"Artillerie laser légère",[Ys.heavyLaser]:"Artillerie laser lourde",[Ys.gaussCannon]:"Canon de Gauss",[Ys.ionCannon]:"Artillerie à ions",[Ys.plasmaTurret]:"Lanceur de plasma",[Ys.smallShieldDome]:"Petit bouclier",[Ys.largeShieldDome]:"Grand bouclier"},Al={[We.metalMine]:"Mine de métal",[We.metalStorage]:"Hangar de métal",[We.crystalMine]:"Mine de cristal",[We.crystalStorage]:"Hangar de cristal",[We.deuteriumSynthesizer]:"Synthétiseur de deutérium",[We.deuteriumTank]:"Réservoir de deutérium",[We.solarPlant]:"Centrale électrique solaire",[We.fusionReactor]:"Centrale électrique de fusion",[We.roboticsFactory]:"Usine de robots",[We.naniteFactory]:"Usine de nanites",[We.shipyard]:"Chantier spatial",[We.spaceDock]:"Dock spatial",[We.missileSilo]:"Silo de missiles",[We.researchLab]:"Laboratoire de recherche",[We.allianceDepot]:"Dépôt de ravitaillement",[We.terraformer]:"Terraformeur",[We.lunarBase]:"Base lunaire",[We.sensorPhalanx]:"Phalange de capteur",[We.jumpGate]:"Porte de saut spatial"},Fl={[ot.energyTechnology]:"Technologie énergétique",[ot.laserTechnology]:"Technologie Laser",[ot.ionTechnology]:"Technologie à ions",[ot.hyperspaceTechnology]:"Technologie hyperespace",[ot.plasmaTechnology]:"Technologie Plasma",[ot.espionageTechnology]:"Technologie Espionnage",[ot.computerTechnology]:"Technologie Ordinateur",[ot.astrophysics]:"Astrophysique",[ot.intergalacticResearchNetwork]:"Réseau de recherche intergalactique",[ot.gravitonTechnology]:"Technologie Graviton",[ot.combustionDrive]:"Réacteur à combustion",[ot.impulseDrive]:"Réacteur à impulsion",[ot.hyperspaceDrive]:"Propulsion hyperespace",[ot.weaponsTechnology]:"Technologie Armes",[ot.shieldingTechnology]:"Technologie Bouclier",[ot.armorTechnology]:"Technologie Protection des vaisseaux spatiaux"},Il={[lt.none]:"Aucune forme de vie",[lt.humans]:"Les Humains",[lt.rocktal]:"Roctas",[lt.mechas]:"Mécas",[lt.kaelesh]:"Kaeleshs"},Rl={[dt.residentialSector]:"Secteur résidentiel",[dt.biosphereFarm]:"Ferme biosphérique",[dt.researchCentre]:"Centre de recherche",[dt.academyOfSciences]:"Académie des sciences",[dt.neuroCalibrationCentre]:"Centre de neurocalibrage",[dt.highEnergySmelting]:"Fusion à haute énergie",[dt.foodSilo]:"Réserve alimentaire",[dt.fusionPoweredProduction]:"Extraction par fusion",[dt.skyscraper]:"Tour d`habitation",[dt.biotechLab]:"Laboratoire de biotechnologie",[dt.metropolis]:"Métropolis",[dt.planetaryShield]:"Bouclier planétaire",[dt.meditationEnclave]:"Enclave stoïque",[dt.crystalFarm]:"Culture du cristal",[dt.runeTechnologium]:"Centre technologique runique",[dt.runeForge]:"Forge runique",[dt.oriktorium]:"Orictorium",[dt.magmaForge]:"Fusion magmatique",[dt.disruptionChamber]:"Chambre de disruption",[dt.megalith]:"Monument rocheux",[dt.crystalRefinery]:"Raffinerie de cristaux",[dt.deuteriumSynthesiser]:"Syntoniseur de deutérium",[dt.mineralResearchCentre]:"Centre de recherche sur les minéraux",[dt.advancedRecyclingPlant]:"Usine de traitement à haut rendement",[dt.assemblyLine]:"Chaîne de production",[dt.fusionCellFactory]:"Usine de fusion de cellules",[dt.roboticsResearchCentre]:"Centre de recherche en robotique",[dt.updateNetwork]:"Réseau d`actualisation",[dt.quantumComputerCentre]:"Centre d`informatique quantique",[dt.automatisedAssemblyCentre]:"Centre d`assemblage automatisé",[dt.highPerformanceTransformer]:"Transformateur hyperpuissant",[dt.microchipAssemblyLine]:"Chaîne de production de micropuces",[dt.productionAssemblyHall]:"Atelier de montage",[dt.highPerformanceSynthesiser]:"Synthétiseur à haut rendement",[dt.chipMassProduction]:"Production de masse de puces",[dt.nanoRepairBots]:"Nanorobots réparateurs",[dt.sanctuary]:"Refugium",[dt.antimatterCondenser]:"Condensateur d`antimatière",[dt.vortexChamber]:"Salle à vortex",[dt.hallsOfRealisation]:"Maison du savoir",[dt.forumOfTranscendence]:"Forum de la transcendance",[dt.antimatterConvector]:"Convecteur d`antimatière",[dt.cloningLaboratory]:"Laboratoire de clonage",[dt.chrysalisAccelerator]:"Accélérateur par chrysalide",[dt.bioModifier]:"Biomodificateur",[dt.psionicModulator]:"Modulateur psionique",[dt.shipManufacturingHall]:"Hangar de construction de vaisseau",[dt.supraRefractor]:"Supraréfracteur"},Ol={[mt.intergalacticEnvoys]:"Ambassadeurs intergalactiques",[mt.highPerformanceExtractors]:"Extracteurs à haute performance",[mt.fusionDrives]:"Moteurs à fusion",[mt.stealthFieldGenerator]:"Générateur de champ de camouflage",[mt.orbitalDen]:"Planque orbitale",[mt.researchAI]:"IA de recherche",[mt.highPerformanceTerraformer]:"Terraformeur à haute performance",[mt.enhancedProductionTechnologies]:"Technologies d`extraction améliorées",[mt.lightFighterMkII]:"Chasseur léger Mk II",[mt.cruiserMkII]:"Croiseur Mk II",[mt.improvedLabTechnology]:"Technologie de laboratoire améliorée",[mt.plasmaTerraformer]:"Terraformeur à plasma",[mt.lowTemperatureDrives]:"Propulseurs à faible température",[mt.bomberMkII]:"Bombardier Mk II",[mt.destroyerMkII]:"Destructeur Mk II",[mt.battlecruiserMkII]:"Traqueur Mk II",[mt.robotAssistants]:"Assistants robotiques",[mt.supercomputer]:"Superordinateur",[mt.volcanicBatteries]:"Batteries volcaniques",[mt.acousticScanning]:"Sondage acoustique",[mt.highEnergyPumpSystems]:"Système de pompage à haute énergie",[mt.cargoHoldExpansion_CivilianShips]:"Extension d`espace fret (vaisseaux civils)",[mt.magmaPoweredProduction]:"Extraction magmatique",[mt.geothermalPowerPlants]:"Centrales géothermiques",[mt.depthSounding]:"Sondage en profondeur",[mt.ionCrystalEnhancement_heavyFighter]:"Renforcement à cristaux ioniques (chasseurs lourds)",[mt.improvedStellarator]:"Stellarator amélioré",[mt.hardenedDiamondDrillHeads]:"Têtes de forage en diamant renforcées",[mt.seismicMiningTechnology]:"Technologies d`extraction sismique",[mt.magmaPoweredPumpSystems]:"Pompes au magma",[mt.ionCrystalModules]:"Module à cristaux ioniques",[mt.optimisedSiloConstructionMethod]:"Construction optimisée de silos",[mt.diamondEnergyTransmitter]:"Émetteur d`énergie à diamants",[mt.obsidianShieldReinforcement]:"Intensification du bouclier à l`obsidienne",[mt.runeShields]:"Boucliers runiques",[mt.rocktalCollectorEnhancement]:"Renfort du collecteur rocta",[mt.catalyserTechnology]:"Technique de catalyse",[mt.plasmaDrive]:"Moteur à plasma",[mt.efficiencyModule]:"Module d`optimisation",[mt.depotAI]:"IA du dépôt",[mt.generalOverhaul_lightFighter]:"Révision complète (chasseur léger)",[mt.automatedTransportLines]:"Chaîne de production automatisée",[mt.improvedDroneAI]:"IA de drone améliorée",[mt.experimentalRecyclingTechnology]:"Technique de recyclage expérimental",[mt.generalOverhaul_cruiser]:"Révision complète (croiseur)",[mt.slingshotAutopilot]:"Pilote automatique Slingshot",[mt.highTemperatureSuperconductors]:"Supraconducteurs à haute température",[mt.generalOverhaul_battleship]:"Révision complète (vaisseau de bataille)",[mt.artificialSwarmIntelligence]:"Intelligence artificielle collective",[mt.generalOverhaul_battlecruiser]:"Révision complète (traqueur)",[mt.generalOverhaul_bomber]:"Révision complète (bombardier)",[mt.generalOverhaul_destroyer]:"Révision complète (destructeur)",[mt.experimentalWeaponsTechnology]:"Technique d`armement expérimentale",[mt.mechanGeneralEnhancement]:"Renforcement du général des Mécas",[mt.heatRecovery]:"Récupération de chaleur",[mt.sulphideProcess]:"Traitement au sulfure",[mt.psionicNetwork]:"Réseau psionique",[mt.telekineticTractorBeam]:"Faisceau de traction télékinésique",[mt.enhancedSensorTechnology]:"Technologie de détection améliorée",[mt.neuromodalCompressor]:"Compresseur neuromodal",[mt.neuroInterface]:"Neuro-interface",[mt.interplanetaryAnalysisNetwork]:"Réseau d`analyse superglobal",[mt.overclocking_heavyFighter]:"Surcadençage (chasseur lourd)",[mt.telekineticDrive]:"Système de propulsion télékinétique",[mt.sixthSense]:"Sixième sens",[mt.psychoharmoniser]:"Harmonisateur psychique",[mt.efficientSwarmIntelligence]:"Intelligence collective optimisée",[mt.overclocking_largeCargo]:"Surcadençage (grand transporteur)",[mt.gravitationSensors]:"Capteurs gravitationnels",[mt.overclocking_battleship]:"Surcadençage (vaisseau de bataille)",[mt.psionicShieldMatrix]:"Matrice de protection psionique",[mt.kaeleshDiscovererEnhancement]:"Renforcement d`explorateur kaelesh"},Ll={darkMatter:"Antimatière (AM)"},$l={tabs:{dateRanges:"Plages de dates",colors:"Couleurs",common:"Commun",importExport:"Importation/Exportation",expeditions:"Expéditions",combats:"Combats",debrisFields:"Champs de débris",resourceBalance:"Balance des ressources",universeHistory:"Historique de l'univers",dangerZone:"Zone dangereuse",accessbility:"Accessibilité",linkAccounts:"Lier les comptes",migrateOldData:"Migrer les anciennes données"},dateRanges:{defaultNames:{today:"Aujourd'hui",yesterday:"Hier",currentWeek:"Semaine en cours",lastWeek:"Semaine dernière",currentMonth:"Mois en cours",newRange:"nouvelle plage"},since:e=>`Depuis le ${e}`,firstDayTemplate:"<premier jour>",headers:{label:"Étiquette",type:"Type",rangeStart:"Début de la plage",rangeContains:"La plage contient"},day:"jour",days:"jours",daysAgo:"jours auparavant",week:"semaine",weeks:"semaines",weeksAgo:"semaines auparavant",month:"mois",months:"mois",monthsAgo:"mois auparavant",year:"année",years:"années",yearsAgo:"années auparavant"},colors:{combatResults:"Résultats des combats",expeditionEvents:"Événements d'expédition",expeditionEventSizes:"Tailles d'événements d'expédition",expeditionDepletionLevels:"Épuisement du système",lifeformDiscoveries:"Découvertes de formes de vie",lifeforms:"Formes de vie",resources:"Ressources",ships:"Vaisseaux"},common:{conversionRates:{title:"Taux de conversion",msuLong:"Convertir en Métal (USM)",dsuLong:"Convertir en Deutérium (USD)"},extensionLanguage:"Langue de l'interface utilisateur (dans OGame Tracker)",extensionLanguageFallbackHint:"Les textes en anglais seront affichés si les textes ne sont pas disponibles dans la langue sélectionnée.",serverSettings:{title:"Données du serveur",lastUpdate:"Dernière mise à jour",forceUpdate:"Mettre à jour les données du serveur"}},expeditions:{resourceUnitFactorsOfShipFoundOnExpeditions:"Pondération de la valeur en ressources des vaisseaux trouvés lors des expéditions"},combats:{resourceUnitFactorsOfLostShips:"Pondération de la valeur en ressources des vaisseaux perdus en combat",ignoreEspionageCombats:{title:"Ignorer les combats d'espionnage",label:"Ignorer les rapports de combat d'espionnage pour le suivi des combats"}},resourceBalance:{detailedResourceBalance:{header:"Bilan détaillé des ressources",checkboxLabel:"Afficher le bilan détaillé des ressources"},includeShipsFoundOnExpeditions:{header:"Vaisseaux trouvés lors des expéditions",checkboxLabel:"Inclure les ressources des vaisseaux trouvés lors des expéditions dans le bilan des ressources"},includeShipsLostInCombats:{header:"Vaisseaux perdus en combats",checkboxLabel:"Inclure les ressources des vaisseaux perdus en combats dans le bilan des ressources"},includeLostLootResources:{header:"Ressources perdues en combats",checkboxLabel:"Inclure les ressources perdues en combats dans le bilan des ressources"}},showConvertedUnitsInTables:{title:"USM/USD dans les tables",label:"Afficher les valeurs converties USM/USD dans les tables",infoAmortization:"Le temps d'amortissement sera toujours calculé en utilisant le coût et la production en USM/USD"},reset:"Réinitialiser les paramètres",setDefaultRoute:"Définir comme par défaut",setDefaultSubRoute:"Définir comme par défaut pour cette zone",dangerZone:{doYouWantToContinue:"ÊTES-VOUS SÛR DE VOULOIR CONTINUER ?",deleteExpeditions:{button:e=>`Supprimer toutes les expéditions suivies pour le compte actuellement sélectionné (${e})`,confirmationText:(e,t)=>`Si vous confirmez, toutes les ${t} expéditions suivies seront supprimées pour le compte actuellement sélectionné (${e}).`},deleteCombats:{button:e=>`Supprimer tous les combats suivis pour le compte actuellement sélectionné (${e})`,confirmationText:(e,t)=>`Si vous confirmez, tous les ${t} combats suivis seront supprimés pour le compte actuellement sélectionné (${e}).`},deleteDebrisFieldReports:{button:e=>`Supprimer tous les rapports de récolte de champs de débris suivis pour le compte actuellement sélectionné (${e})`,confirmationText:(e,t)=>`Si vous confirmez, tous les ${t} rapports de récolte de champs de débris suivis seront supprimés pour le compte actuellement sélectionné (${e}).`},deleteAccount:{button:e=>`Supprimer toutes les données du compte actuellement sélectionné (${e})`,confirmationText:e=>`Si vous confirmez, toutes les données suivies pour le compte actuellement sélectionné (${e}) seront supprimées.\nCela inclut les données suivies de l'historique de l'univers s'il n'y a pas d'autre compte suivi pour cet univers.`},deleteUniverseHistory:{button:e=>`Supprimer l'historique de l'univers suivi du serveur actuellement sélectionné (${e})`,confirmationText:e=>`Si vous confirmez, toutes les données d'historique de l'univers suivies pour le serveur actuellement sélectionné (${e}) seront supprimées.`},deleteEverything:{button:"Supprimer toutes les données",confirmationText1:"Si vous confirmez, toutes les données seront supprimées.\nCela inclut les données suivies de chaque compte, y compris les expéditions suivies, les combats suivis, les rapports de récolte de champs de débris suivis, les données d'historique de l'univers et plus encore.",confirmationText2:"Veuillez confirmer à nouveau que vous voulez supprimer toutes les données."}},importExport:{export:{header:"Exporter",description:"Ici, vous pouvez exporter vos données. Cela inclura les données pertinentes de tous vos comptes suivis et de leurs serveurs.",includeUniverseHistory:"inclure l'historique de l'univers dans l'exportation (cela peut considérablement augmenter la taille du fichier et le temps d'importation !)",button:"Commencer l'exportation",wait:"Veuillez patienter pendant que vos données sont préparées pour l'exportation...",errors:{unexpectedError:"Une erreur inattendue s'est produite lors de l'exportation de vos données."}},import:{header:"Importer",description:"Ici, vous pouvez importer vos données à partir d'un fichier. Veuillez sélectionner votre fichier.",button:"Commencer l'importation",wait:"Veuillez patienter pendant que vos données sont importées...",errors:{invalidFormat:"Le format du fichier est invalide.",unexpectedError:"Une erreur inattendue s'est produite lors de l'importation de vos données."}},importCallbacks:{importingSettings:"Importation de vos paramètres",importingBasicData:"Importation des données de base du compte et du serveur",importingUniverseHistories:(e,t,r,a)=>`Importation de l'historique de l'univers du serveur (serveur ${e+1}/${t}, entrée ${r+1}/${a})`,importingAccounts:(e,t,r,a,n)=>{const o="Importation des comptes",i=`${e+1}/${t}`;if("account"==r)return`${o} (${i})`;if("combat-reports"==r)return`${o} (${i}, combat ${a+1}/${n})`;if("expeditions"==r)return`${o} (${i}, expédition ${a+1}/${n})`;if("debris-fields"==r)return`${o} (${i}, champ de débris ${a+1}/${n})`;if("lifeform-discoveries"==r)return`${o} (${i}, mission de découverte ${a+1}/${n})`;if("empire.data"==r)return`${o} (${i}, données de base de l'empire)`;if("empire.planets"==r)return`${o} (${i}, planète ${a+1}/${n})`;if("empire.moons"==r)return`${o} (${i}, lune ${a+1}/${n})`;if("universe-specific-settings"==r)return`${o} (${i}, paramètres spécifiques à l'univers)`;throw new Error(`Invalid type '${r}'`)}}},accessibility:{showSimplifiedResults:{title:"Visualisation simplifiée",label:"Visualisation simplifiée, masque les messages originaux des résultats d'expédition et des rapports de récolte de champs de débris, et affiche des icônes au lieu de textes dans les notifications."}},debrisFields:{separateExpeditionDebrisFields:{title:"Séparer la position 16",label:"Séparer les champs de débris récoltés en position 16 des positions 1 à 15"}},linkAccounts:{header:e=>`Lier des comptes avec le compte actuel (${e})`,descriptionHtml:e=>`Vous ne devriez lier des comptes que si vous voulez que l'OGame Tracker considère les données des comptes liés comme des données du compte actuel (${e}).<br/>C'est souvent le cas lorsque qu'un compte a été fusionné avec un autre serveur et est traité comme un compte distinct dans l'OGame Tracker.<br/><br/>Exemple: <br/><ol>\n                    <li>le joueur "OGame Professional" joue sur le serveur "FR Voie Lactée"</li>\n                    <li>le serveur "FR Voie Lactée" devient un univers exode lors d'une fusion</li>\n                    <li>le joueur "OGame Professional" fusionne son compte avec "FR Trèfle"</li>\n                    <li>après la fusion, l'OGame Tracker ne montre aucune expédition de l'ancien serveur "FR Voie Lactée" pour le compte fusionné</li>\n                    <li>dans l'OGame Tracker, l'ancien compte "OGame Professional" sur le serveur "FR Voie Lactée" est lié au nouveau compte "OGame Professional" sur le serveur "FR Trèfle"</li>\n                    <li>les expéditions qui ont été envoyées sur l'ancien serveur "FR Voie Lactée" apparaîtront maintenant à nouveau pour le compte fusionné sur "FR Trèfle"</li>\n                </ol>\n            `,linkAccount:"lier un autre compte :",linkedAccounts:"Comptes liés :"}},Nl={[ee.metal]:"Métal",[ee.crystal]:"Cristal",[ee.deuterium]:"Deutérium",energy:"Énergie"},_l={de:ol,en:gl,"pt-pt":Dl,fr:{ogame:{buildings:Al,lifeforms:Il,lifeformBuildings:Rl,lifeformTechnologies:Ol,premium:Ll,resources:Nl,research:Fl,ships:El,defenses:Ml},extension:{common:{averagePerDay:"⌀ par jour",chart:"Graphique",table:"Tableau",sum:"Somme",total:"Total",resourceUnits:"Unités des ressources",dsu:"USD",msu:"USM",date:"Date",dateTime:"Date et heure",madeWithLove1:"Créé avec",madeWithLove2:"par Wonkydonky"},settings:$l,resources:Nl,expeditions:{header:"Expéditions",tabHeaders:{overview:"Vue d'ensemble",foundResources:"Ressources",foundShips:"Vaisseaux",foundDarkMatter:Ll.darkMatter,foundItems:"Objets",depletion:"Épuisement",info:{header:"Info",topFinds:"Meilleures découvertes",possibleFinds:"Liste des découvertes possibles"},subHeaders:{amount:"Quantité",sizes:"Tailles",resources:"Unités de ressources",count:"Nombre",sizesByResource:"Tailles par ressource"}},expeditionEvents:{[vt.nothing]:"Aucun événement",[vt.resources]:"Ressources",[vt.fleet]:"Vaisseaux",[vt.delay]:"Retard",[vt.early]:"Avance",[vt.darkMatter]:Ll.darkMatter,[vt.pirates]:"Pirates",[vt.aliens]:"Aliens",[vt.combat]:"Combat",[vt.item]:"Objet",[vt.trader]:"Marchand",[vt.lostFleet]:"Flotte perdue"},expeditionEventSizes:{[yt.small]:"Découverte commune",[yt.medium]:"Découverte importante",[yt.large]:"Découverte exceptionnelle","fled-death-star":"Ennemis ont fui"},depletionLevels:{[bt.none]:"Très bas",[bt.low]:"Bas",[bt.medium]:"Moyen",[bt.high]:"Élevé",unknown:"Inconnu"},expeditions:"Expéditions",finds:"Découvertes",shipsFound:"Vaisseaux trouvés",depletion:"Épuisement du système",topFinds:{title:e=>`Meilleures découvertes (${e})`,shipUnits:"Unités de vaisseaux",size:"Taille",amount:"Quantité",date:"Date"},possibleFinds:{info:{playerClass:"Classe du joueur",economySpeed:"Vitesse économique",resourceFindBonus:"Bonus de découvertes de ressources",shipFindBonus:"Bonus de découvertes de vaisseaux",darkMatterFindBonus:"Bonus de découvertes d'Antimatière",discovererBonus:"Bonus de classe Explorateur"},maximumFinds:"Découvertes maximales",findsDarkMatter:"Plages de découvertes d'Antimatière",listOfPossibleFinds:"Liste des découvertes possibles (ressources, unités de vaisseaux)",findSizes:e=>`Quantités possibles (${e})`,shipUnits:"Unités de vaisseaux"}},combats:{header:"Combats",tabHeaders:{overview:"Vue d'ensemble",loot:"Butin",lostShips:"Vaisseaux perdus",subHeaders:{againstPlayers:"Contre les joueurs",onExpeditions:"En expéditions",amount:"Quantité",resources:"Unités de ressources"}},combats:"Combats",shipsLost:"Vaisseaux perdus",combatResults:{[J.won]:"Victoires",[J.lost]:"Défaites",[J.draw]:"Matchs nuls"}},donate:{header:"Faire un don",subHeader:"Faire un don pour soutenir le développement d'OGame Tracker",crypto:{header:"Faire un don en cryptomonnaie"},kofi:{header:"Faire un don avec PayPal ou carte de débit/crédit",buttonText:"Faire un don sur Ko-Fi",message:"Vous n'avez pas besoin de créer un compte sur Ko-Fi pour faire un don. Tous les dons sont directement transmis au développeur."}},debrisFields:{header:"Champs de débris",addDebrisFieldManually:{title:"Ajouter manuellement un champ de débris",buttonText:"Ajouter"},position:"Position"},resourceBalance:{header:"Bilan des ressources","combat-report":"des combats","debris-field-report":"des champs de débris",expedition:"des expéditions"},empire:{header:"Empire",planet:"Planète",production:{header:"Production",subHeaders:{resourceProduction:"Production de ressources",mineOverview:"Vue d'ensemble des mines"},averagePerHour:"⌀ par heure",totalPerHour:"total par heure",totalPerDay:"total par jour",totalPerWeek:"total par semaine",activeProductionSettings:"Paramètres de production actifs",messageProduction100:"Les valeurs affichées se réfèrent à un facteur de production de 100% et ne tiennent pas compte du manque d'énergie.",mines:{crawlersAvailable:"disponibles",crawlersToReachLimit:e=>`${e} foreuses pour le bonus maximum`},items:"Objets actifs",breakdown:{basicIncome:"Revenu de base",mineProduction:"Production de mine",consumption:"Consommation",lifeformBuildings:"Bâtiments formes de vie",crawlers:"Foreuses",items:"Objets",geologist:"Géologue",commandStaff:"Conseil d'officiers",playerClass:"Classe de joueur",allianceClass:"Classe d'alliance",lifeformTechnologies:"Technologies formes de vie"},settings:{reset:"Réinitialiser",header:"Paramètres de production",applyAndClose:"Appliquer et fermer les paramètres de production"}},amortization:{header:"Amortissement",table:{cost:"Coût",levels:"Niveaux",productionPlus:"Production en plus",amortizationTime:"Temps d'amortissement",groupSelectedItems:"Regrouper les objets sélectionnés",showOriginalItems:"Afficher tous les objets individuellement",levelsOnPlanets:(e,t)=>`${e} ${1==e?"niveau":"niveaux"} sur ${t} ${1==t?"planète":"planètes"}`},settings:{header:"Paramètres",applyAndClose:"Appliquer les paramètres et fermer",includeSettings:{header:"Inclure dans le calcul",mines:"Mines",expeditions:"Expéditions",expeditionsRequirement:'Remarque : Nécessite "Recherche des formes de vie" et/ou "Astrophysique" activée',astrophysicsAndColony:"Astrophysique et nouvelles colonies",astrophysicsPerformanceNote:"Remarque : Intensif en calcul, affectera considérablement les performances"},playerSettings:{header:"Paramètres généraux",optimizeForResources:"Optimiser pour les ressources sélectionnées",officers:"Officiers",playerClass:"Classe de joueur",allianceClass:"Classe d'alliance",currentLevelOf:e=>`Niveau actuel de ${e}`,lifeformLevels:"Niveaux de la forme de vie",unusedRaidColonySlots:'Emplacements de colonie à réserver pour le raid ("volante")'},astrophysicsSettings:{header:e=>`Paramètres ${e}`,newColony:"Nouvelle colonie"},planetSettings:{header:"Paramètres de la planète",global:{deselectItems:"Désélectionner tous les éléments",ignoreInactiveLifeformTechnologySlots:"Ignorer les emplacements inactifs des technologies forme de vie pour toutes les planètes",deselectAllPlanets:"Désélectionner toutes les planètes"},includeInResult:"Inclure dans le calcul",position:"Position",maxTemperature:"Température max",activeItems:"Objets actifs",crawlers:{title:"Foreuses",percentage:"% Production",fixCount:"Compte fixe",maxCount:"Compte max"},mines:"Niveaux actuels des mines",lifeform:"Forme de vie",lifeformSettings:"Paramètres de la forme de vie",relevantLifeformBuildings:"Bâtiments pertinents de la forme de vie",lifeformTechnologies:"Technologies de la forme de vie",ignoreEmptySlots:"Ignorer les emplacements inactifs"},expeditionSettings:{header:"Paramètres d'expédition",averageWavesPerDay:"⌀ Vagues par jour",items:"Objets d'expédition",averageExpeditionsPerDay:"⌀ Expéditions par jour",shipUnitFactors:"Facteurs d'unité de ressources des vaisseaux",topPlayerScore:"Score du meilleur joueur"}},info:{generatingItems:"Calcul des prochains meilleurs investissements",slowCalculation:"Le calcul d'amortissement est devenu assez lent maintenant qu'il inclut les bâtiments et technologies formes de vie. Cela devrait être amélioré à l'avenir.",ctrlClick:"Ctrl + Clic sur une case pour (dé)sélectionner tous les éléments jusqu'à celui sélectionné."},saveLoad:{saveButton:"Enregistrer les résultats d'amortissement calculés",loadButton:e=>`Charger la sauvegarde (${e})`,loadedSave:(e,t)=>`Affichage des résultats sauvegardés (${e}) - ${t} lignes masquées`,abandonedPlanet:"Planète abandonnée"},generateItems:e=>`${e} entrées`},lifeforms:{header:"Formes de vie",subHeaders:{overview:"Vue d'ensemble",progress:"Progression",discoveryMissions:"Missions de découverte",discoveryResults:"Résultats",experience:"Expérience",researchBonuses:"Bonus de recherche globaux",planetBonuses:"Bonus de planète effectifs"},planet:"Planète",lifeform:"Forme de vie",buildings:"Bâtiments forme de vie",technologies:"Technologies forme de vie",tier:"Tier",level:"Niveau",totalLifeformExperience:"Expérience totale de la forme de vie",discoveryDateUnknown:"Inconnue",notDiscoveredYet:"Pas encore découverte",discoveryMissions:"Missions de découverte",eventTypes:{[kt.nothing]:"Aucune découverte",[kt.lostShip]:"Vaisseau d'exploration perdu",[kt.newLifeformFound]:"Nouvelle forme de vie",[kt.knownLifeformFound]:"Expérience de la forme de vie",[kt.artifacts]:"Artéfacts trouvés"},artifactFindingSizes:{[Ct.small]:"Découverte commune",[Ct.medium]:"Découverte importante",[Ct.large]:"Découverte énorme",[Ct.storageFull]:"Stockage plein"},lifeformFound:"Forme de vie trouvée",alwaysAvailable:"Toujours disponible",artifacts:"Artéfacts",experiencePoints:"Points d'expérience",discoveredOn:"Forme de vie découverte le",numberOfLifeformDiscoveries:"Nombre de découvertes de formes de vie",globalResearchBonus:"Bonus de recherche global",researchBonuses:{breakdown:{slot:"Emplacement",research:"Recherche",bonus:"Bonus",lifeformBuildingsBoost:"Amélioration des bâtiments de la forme de vie",lifeformLevelBoost:(e,t)=>`Amélioration du niveau de la forme de vie (${e} : ${t})`,bugBoost:"Bonus causé par des bugs"},production:{header:"Production de ressources"},expeditionFinds:{header:"Découvertes d'expédition",resources:"Ressources",ships:"Vaisseaux",fleetLoss:"Pertes de flotte"},expeditionSpeed:{header:"Vitesse d'arrivée en expédition",bonus:"Bonus de vitesse"},ships:{header:"Vaisseaux",armor:"Armure",shield:"Bouclier",damage:"Dégâts",cargo:"Fret",speed:"Vitesse"},defenses:{header:"Défenses"},fuelConsumption:{header:"Consommation de carburant"},fuelReturn:{header:"Retour de carburant lors du rappel",bonus:"Retour de carburant"},buildingCostTime:{header:"Coût et temps de construction",cost:"Coût",time:"Temps"},researchCostTime:{header:"Coût et temps de recherche",researches:"Recherches",lifeformResearches:"Recherches forme de vie"},crawlers:{header:"Foreuses",productionBonus:"Production de ressources",energyConsumption:"Consommation d'énergie"},denCapacity:{header:"Capacité de la cachette"},phalanxRange:{header:"Portée de la phalange"},discoveryMissions:{header:"Vitesse des missions de découverte"},playerClasses:{header:"Classes de joueur",collector:{productionBonus:"Augmentation de la production des mines",energyProductionBonus:"Augmentation de la production d'énergie",transporterSpeedBonus:"Bonus de vitesse pour les transporteurs",transporterCargoBonus:"Bonus de cargo pour les transporteurs",crawlerProductionBonus:"Bonus de production des foreuses",geologistCrawlerAmountBonus:"Bonus de foreuses utilisables avec le géologue"},discoverer:{researchDuration:"Durée des recherches",increasedExpeditionFinds:"Gain accru lors des expéditions",largerPlanets:"Planètes plus grandes lors de la colonisation",additionalExpeditionSlots:"Slot d'expédition supplémentaires",reducedExpeditionCombatChance:"Réduction du risque de combats lors des expéditions",phalanxRange:"Augmentation de la portée de la phalange"},general:{combatShipSpeed:"Bonus de vitesse des vaisseaux de combat",recyclerSpeed:"Bonus de vitesse des recycleurs",fuelConsumption:"Consommation de carburant pour tous les vaisseaux",increasedCargoRecyclersPathfinders:"Augmentation de la capacité de charge des recycleurs/éclaireurs",additionalCombatResearchLevels:"Niveaux des recherches de combat supplémentaires",additionalFleetSlots:"Flottes supplémentaires",additionalMoonFields:"Champs de lune supplémentaires"},classBonus:"Bonus de classe",bonus:"Bonus",baseValue:"Valeur de base",valueWithBonuses:"Valeur avec bonus"}},planetBonuses:{resourceProduction:{header:"Production de ressources"},lifeformResearchCostTime:{header:"Coût et temps de recherche des formes de vie"},wreckfield:{header:"Champ de débris"}},topFinds:{topFinds:"Meilleures découvertes",worstFinds:"Pires découvertes",size:"Taille",amount:"Quantité",date:"Date",artifacts:"Artéfacts",experience:"Expérience"}}},switchAccounts:{title:"Sélectionner le compte à afficher dans un nouvel onglet"},about:{faqHelp:{header:"Aide",faq:{header:"F.A.Q.",fleetLostOnExpedition:{header:"Pourquoi les vaisseaux que j'ai perdus en expédition ne sont-ils pas suivis?",text:"Le suivi des vaisseaux perdus en expédition nécessite un suivi permanent de la flotte, ce qui n'est pas réalisable."},syncBetweenDevices:{header:"Pourquoi n'y a-t-il pas de synchronisation de mes données entre plusieurs appareils?",text:"Le tracker enregistre beaucoup plus de données que ce qui peut être synchronisé avec votre compte utilisateur (Google, Microsoft, etc.). Une synchronisation avec un serveur externe pourrait être possible à l'avenir."},productionInResourceBalance:{header:"Pourquoi la balance des ressources n'inclut-elle pas ma production de ressources?",text:"Votre production de ressources dépend de divers facteurs, et leurs changements devraient être suivis en permanence. Bien que cela soit possible, une mise en œuvre de cette fonctionnalité serait beaucoup plus complexe qu'elle ne serait utile pour ses utilisateurs."},whatAreAverages:{header:"Que signifie la mention '⌀ par jour'?",text:"Il s'agit de la moyenne sur tous les jours avec au moins un événement suivi."}},tips:{header:"Conseils",rightClickDefaultRoute:"Vous pouvez faire un clic droit sur un onglet principal du côté gauche ou sur l'un de ses sous-menu pour définir comme par défaut.",numbersKeyboardNavigation:"Vous pouvez ouvrir les pages des onglets avec un chiffre en appuyant sur la touche de chiffre respective de votre clavier.",amortizationTable:{part1:"Vous voulez savoir quoi construire ou rechercher ensuite pour améliorer votre production de ressources de la manière la plus efficace? Essayez le ",name:"calculateur d'amortissement interactif",part2:"."},inlineSettings:"Vous pouvez changer les paramètres liés immédiatement en appuyant sur la petite icône d'engrenage sur le côté droit.",switchAccountHtml:"Vous pouvez ouvrir l'interface OGame Tracker pour un autre compte suivi en cliquant sur l'icône <span class=\"mdi mdi-account-multiple\"></span> et en sélectionnant le compte."},messageDiscord:{part1:"Besoin d'aide ? avez-vous trouvé un bug ou avez-vous une demande de fonctionnalité ? Rejoignez le ",discordServer:"serveur Discord",part2:" et écrivez un message dans le canal correspondant."}},info:{header:"Info",table:{currentAccount:{header:"Informations sur le compte sélectionné",numberOfTrackedExpeditions:"Nombre d'expéditions suivies",numberOfTrackedCombatReports:"Nombre de rapports de combat suivis",numberOfTrackedDebrisFieldReports:"Nombre de rapports de récolte CDR suivis",numberOfTrackedLifeformDiscoveries:"Nombre de missions de découverte de formes de vie suivies",lastUpdateServerSettings:"Dernière mise à jour des paramètres du serveur",numberOfUniverseHistoryEntries:"Nombre d'entrées dans l'historique de l'univers"},global:{header:"Informations sur l'ensemble des données dans OGame Tracker",numberOfTrackedAccounts:"Nombre de comptes suivis",estimatedSize:"Taille de toutes les données enregistrées sur le disque"}}}},universeHistory:{header:"Historique de l`'univers",settings:{messages:{notEnabledHtml:"\n                <b>Le suivi du classement de l'univers n'est pas activé.</b><br/>\n                Activer cette fonctionnalité permettra de suivre les changements de classement pour les joueurs et les alliances.\n            ",historyTrackingNotEnabledHtml:"\n                <b>Le suivi de l'historique de l'univers n'est pas activé.</b><br/>\n                Activer cette fonctionnalité permettra de suivre également tous les changements pour les joueurs et les alliances.<br/>\n                Cela inclut les changements de nom et de tag des joueurs et des alliances, les changements de membres d'alliance,\n                les changements d'état des joueurs et les changements concernant les planètes et les lunes, y compris les noms, les coordonnées,\n                et les planètes et lunes abandonnées/détruites.<br />\n                <i>Cela peut générer beaucoup de données !\n                Vous pouvez désactiver cette fonctionnalité <a href=\"#/settings/universe-history\">dans le menu des paramètres</a>\n                à nouveau.</i>\n            ",trackingTimesHtml:"\n                Au moins une fois par jour, les classements et les données de l'univers (si activés) seront mis à jour.<br/>\n                Vous pouvez définir les heures de mise à jour ci-dessous.\n                Si une mise à jour est manquée, elle sera effectuée dès que possible par la suite.\n            "},enableHighscoreTrackingOnly:"Activer uniquement le suivi du classement de l'univers",enableHistoryTracking:"Activer le suivi de l'historique de l'univers"},tabs:{players:"Joueurs",alliances:"Alliances",subtabs:{highscore:"Classement",history:"Historique"}},playerSelection:{header:"Sélection du joueur",search:"Rechercher un joueur"},allianceSelection:{header:"Sélection de l'alliance",search:"Rechercher une alliance"},highscoreTabs:{total:"Total",economy:"Économie",research:"Recherche",military:"Militaire",militaryBuilt:"Militaire construit",militaryDestroyed:"Militaire détruit",militaryLost:"Militaire perdu",honor:"Honneur",numberOfShips:"Nombre de vaisseaux",lifeform:"Forme de vie",lifeformDiscoveries:"Découvertes des formes de vie",lifeformEconomy:"Économie des formes de vie",lifeformTechnology:"Technologie des formes de vie"},historyTabs:{status:"Statut",nicknames:"Alias",alliances:"Alliances",planetAndMoons:"Planètes et Lunes",tags:"Balises",names:"Noms",members:"Membres"},noAlliance:"pas d'alliance",today:"aujourd'hui",name:"Nom",tag:"Balise",members:"Membres",alliance:"Alliance",from:"De",until:"Jusqu'à",status:{active:"Actif",vacation:"Mode vacances",inactive:"Inactif (>= 7 jours)",inactiveLong:"Inactif (>= 28 jours)",banned:"Banni",outlaw:"Hors-la-loi",deleted:"Supprimé",admin:"Admin"},loadingTakingLong:"Le chargement des données prend plus de temps que prévu. La base de données est probablement en train de se mettre à jour, veuillez patienter ou réessayer plus tard."},notifications:{combatTracking:{title:e=>"1"==e?`${e} nouveau rapport de combat suivi`:`${e} nouveaux rapports de combat suivis`,message:e=>"1"==e?`${e} nouveau rapport de combat a été suivi.`:`${e} nouveaux rapports de combat ont été suivis.`},debrisFieldReportTracking:{title:e=>"1"==e?`${e} nouveau rapport d'exploitation de champ de débris suivi`:`${e} nouveaux rapports d'exploitation de champ de débris suivis`,message:e=>"1"==e?`${e} nouveau rapport d'exploitation de champ de débris a été suivi.`:`${e} nouveaux rapports d'exploitation de champ de débris ont été suivis.`},expeditionTracking:{fleetLost:{title:e=>"1"==e?`${e} flotte perdue`:`${e} flottes perdues`,message:e=>"1"==e?`${e} flotte n'est pas revenue de son expédition.`:`${e} flottes ne sont pas revenues de leurs expéditions.`},result:{title:e=>"1"==e?`${e} nouvelle expédition suivie`:`${e} nouvelles expéditions suivies`,summary:"Résumé des découvertes",events:"Événements d'expédition"}},lifeformDiscoveryTracking:{title:e=>"1"==e?`${e} nouvelle mission de découverte de forme de vie suivie`:`${e} nouvelles missions de découverte de forme de vie suivies`,message:e=>"1"==e?`${e} nouvelle mission de découverte de forme de vie a été suivie.`:`${e} nouvelles missions de découverte de forme de vie ont été suivies.`},messageTrackingError:{title:e=>"1"==e?`Échec du traitement de ${e} message`:`Échec du traitement de ${e} messages`,message:e=>"1"==e?`${e} message a provoqué une erreur et n'a pas été suivi. Le message responsable a été marqué en rouge. Veuillez contacter le développeur.`:`${e} messages ont provoqué une erreur et n'ont pas été suivis. Les messages responsables ont été marqués en rouge. Veuillez contacter le développeur.`}},tools:{signatureGenerator:{header:"Générateur de signature",averagePerHour:"⌀/heure",totalPerHour:"par heure",totalPerDay:"par jour",totalPerWeek:"par semaine",production:"Production",expeditions:"Expéditions",lifeformDiscoveries:"Découvertes FdV",combats:"Combats",debrisFieldReports:"Rapports de champs de débris"},scrapyardMerchant:{header:"Ferrailleur",percentage:"% au ferrailleur",count:"Compte"}},excelExport:{header:"Export Excel",chooseBelowMessage:"Choisissez ci-dessous les données que vous souhaitez inclure dans l'exportation :",groups:{expeditions:{header:"Expéditions",rawData:"Données brutes (chaque expédition suivie)",dailyOverview:"Vue d'ensemble des résultats par jour",dailyDepletion:"Vue d'ensemble de l'épuisement du système par jour",dailyResources:"Découvertes de ressources par jour",dailyResourceSizes:"Tailles des découvertes de ressources par jour",dailyShips:"Découvertes de vaisseaux par jour",dailyShipSizes:"Tailles des découvertes de vaisseaux par jour",dailyDarkMatter:"Découvertes d'Antimatière par jour",dailyDarkMatterSizes:"Tailles des découvertes de d'Antimatière par jour"},combats:{header:"Combats",rawData:"Données brutes (chaque résultat de combat suivi)",dailyResults:"Résultats de combat par jour",dailyLoot:"Bilan du butin par jour",dailyLostShips:"Vaisseaux perdus par jour"},debrisFields:{header:"Champs de débris",rawData:"Données brutes (chaque rapport de récolte suivi)",dailyResources:"Ressources récoltées par jour"},lifeformDiscoveries:{header:"Missions de découverte",rawData:"Données brutes (chaque mission de découverte suivie)",dailyExperience:"Expérience gagnée par jour"}},generateButton:"Générer l'export Excel",expeditions:{prefix:"EX",sheets:{rawData:"Données brutes",dailyDepletion:"Épuisement quotidien du système",dailyResults:"Résultats quotidiens",dailyResources:"Ressources quotidiennes",dailyResourcesSize:"Ressources quotidiennes (Taille)",dailyShips:"Vaisseaux quotidiens",dailyShipsSize:"Vaisseaux quotidiens (Taille)",dailyDarkMatter:"Antimatière quotidienne",dailyDarkMatterSize:"Antimatière quotidienne (Taille)"},eventType:"Type",eventSize:"Taille",item:"Objet"},combats:{prefix:"CR",sheets:{rawData:"Données brutes",dailyResults:"Résultats quotidiens",dailyLoot:"Butin quotidien",dailyLostShips:"Vaisseaux perdus quotidiens"},result:"Résultat du combat",coordinates:"Coordonnées",galaxy:"Galaxie",system:"Système",position:"Position",targetType:"Type de cible",combatType:"Type de combat",expeditionCombatOpponent:"Opposant de combat en expédition",loot:"Butin",lostShips:"Vaisseaux perdus",debrisField:"Champ de débris",moon:"Lune",planet:"Planète",expeditionCombat:"Combat en expédition",playerCombat:"Combat de joueur",pirates:"Pirates",aliens:"Aliens",againstPlayers:"Contre les joueurs",onExpeditions:"En expéditions"},debrisFields:{prefix:"DF",sheets:{rawData:"Données brutes",dailyResources:"Ressources quotidiennes"}},lifeformDiscoveries:{prefix:"LF",sheets:{rawData:"Données brutes",dailyExperience:"Expérience quotidienne"},result:"Découverte",experience:"Expérience",lifeform:"Forme de vie",artifacts:"Artéfacts",artifactsSize:"Taille"}},playerClasses:{collector:"Collecteur",discoverer:"Explorateur",general:"Général",none:"Aucune"}}}};class Bl{#b;#w={};constructor(e,t){this.#b=e,this.#x(t)}#x(e){Object.keys(Ot).forEach((t=>{this.#S(this,e[t]??{},t,"")}))}#S(e,t,r,a){Object.keys(t).forEach((n=>{const o=t[n],i=`$${n}`,s=e[i]??={},l=`${""==a?"":`${a}.`}${n}`;o instanceof Object&&"object"==typeof o&&Object.getPrototypeOf(o)===Object.prototype?(this.#S(s,o,r,l),Object.getOwnPropertyNames(e).includes(n)||Object.defineProperty(e,n,{get:()=>(this.#b.throwOnDisabled(),e[i])})):(s[r]=o,(this.#w[r]??={})[l]=o,Object.getOwnPropertyNames(e).includes(n)||Object.defineProperty(e,n,{get:()=>(this.#b.throwOnDisabled(),this.#k(l))}))}))}#k(e){let t=this.#w[this.#b.locale]?.[e];if(null!=t)return t;let r=this.#b.locale;for(const a of this.#b.fallbackLocales){if(t=this.#w[a]?.[e],null!=t)return t;r=a}De(`$i18n: did not find key '${e}' for any locale`)}}let zl=class extends To{enabled=!0;locale=Ot.de;localeRegion=null;_proxy=null;fallbackLocales=[Ot.en];$t=null;dateTimeFormats=null;init(e){return this._proxy=new Bl(this,e.messages),this.$t=this._proxy,this.dateTimeFormats=new Bl(this,e.dateTimeFormats),this.locale=e.locale,this.localeRegion=e.localeRegion??null,this.fallbackLocales=e.fallbackLocales,this}throwOnDisabled(){if(!this.enabled)throw new Error("I18n object is disabled")}get fullLocaleIdentifier(){return null==this.localeRegion?this.locale:`${this.locale}-${this.localeRegion}`}$d(e,t){this.throwOnDisabled();const r=this.dateTimeFormats[t]??De(`unknown datetime format key "${t}"`);return"string"==typeof r?ie(e,r):new Intl.DateTimeFormat(this.fullLocaleIdentifier,r).format(e)}$n(e,t){return this.throwOnDisabled(),new Intl.NumberFormat(this.fullLocaleIdentifier,t).format(e)}$timespan(e){let t=BigInt(Math.ceil(e));const r=t%60n;t=(t-r)/60n;const a=t%60n;t=(t-a)/60n;const n=t%24n;t=(t-n)/24n;const o=`${n.toString().padStart(2,"0")}:${a.toString().padStart(2,"0")}:${r.toString().padStart(2,"0")}`;if(0n==t)return o;const i=t%7n;t=(t-i)/7n;const s=`${i}d `+o;if(0n==t)return s;const l=t;return`${this.$n(Number(l))}w `+s}};zl=function(e,t,r,a){var n,o=arguments.length,i=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,r):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,r,a);else for(var s=e.length-1;s>=0;s--)(n=e[s])&&(i=(o<3?n(i):o>3?n(t,r,i):n(t,r))||i);return o>3&&i&&Object.defineProperty(t,r,i),i}([Vs({})],zl);const Ul=(new zl).init({messages:_l,dateTimeFormats:{de:{date:{year:"numeric",month:"2-digit",day:"2-digit"},datetime:{year:"numeric",month:"2-digit",day:"2-digit",hour12:!1,hour:"2-digit",minute:"2-digit",second:"2-digit"},time:{hour12:!1,hour:"2-digit",minute:"2-digit",second:"2-digit"},time_hm:{hour12:!1,hour:"2-digit",minute:"2-digit"}},en:{date:{year:"numeric",month:"2-digit",day:"2-digit"},datetime:{year:"numeric",month:"2-digit",day:"2-digit",hour12:!0,hour:"2-digit",minute:"2-digit",second:"2-digit"},time:{hour12:!0,hour:"2-digit",minute:"2-digit",second:"2-digit"},time_hm:{hour12:!0,hour:"2-digit",minute:"2-digit"}}},locale:Ot.en,fallbackLocales:[Ot.en,Ot.de]});async function jl(e){const t=await Re(),r=Lt(function(e){const t=Ul.locale;Ul.locale=e;const r={dateRanges:[{label:Ul.$t.extension.settings.dateRanges.defaultNames.today,type:"day",skip:0,take:1},{label:Ul.$t.extension.settings.dateRanges.defaultNames.yesterday,type:"day",skip:1,take:1},{label:Ul.$t.extension.settings.dateRanges.defaultNames.currentWeek,type:"week",skip:0,take:1},{label:Ul.$t.extension.settings.dateRanges.defaultNames.lastWeek,type:"week",skip:1,take:1},{label:Ul.$t.extension.settings.dateRanges.defaultNames.currentMonth,type:"month",skip:0,take:1},{type:"all"}],lostShipsResourceUnits:{factor:1,deuteriumFactor:1},resourceBalance:{showDetailedBreakdown:!1,includeExpeditionFoundShipsResourceUnits:!0,includeLostShipsResourceUnits:!0,includeLostLootResources:!0},conversionRates:{mode:"msu",msu:{crystal:1.5,deuterium:3},dsu:{metal:3,crystal:2}},showCellsWithConvertedResourceUnits:!0,expeditionFoundShipsResourceUnits:{factor:1,deuteriumFactor:1},extensionLanguage:e,defaultRoutes:{},colors:{combatResults:{[J.won]:"#00c23a",[J.draw]:"#aaaaaa",[J.lost]:"#d11515"},resources:{[ee.metal]:"#ff5e00",[ee.crystal]:"#1a9fff",[ee.deuterium]:"#1bee8f",totalConverted:"#999999"},ships:{[at.lightFighter]:"#2472f3",[at.heavyFighter]:"#c72525",[at.cruiser]:"#fbbc04",[at.battleship]:"#9ecc00",[at.bomber]:"#00a95e",[at.battlecruiser]:"#075263",[at.destroyer]:"#de5200",[at.reaper]:"#16a8d4",[at.pathfinder]:"#ad135e",[at.smallCargo]:"#888888",[at.largeCargo]:"#ffffff",[at.espionageProbe]:"#4b17da",[at.deathStar]:"#262530",[at.recycler]:"#8aff8e",[at.colonyShip]:"#d7b58e",[at.crawler]:"#94b4ff",[at.solarSatellite]:"#dd94ff"},expeditions:{events:{[vt.nothing]:"#404040",[vt.resources]:"#2242e2",[vt.fleet]:"#dddddd",[vt.delay]:"#ff5e00",[vt.early]:"#00c23a",[vt.darkMatter]:"#33bcdb",[vt.pirates]:"#ffb592",[vt.aliens]:"#92ffdc",[vt.combat]:"#ffb592",[vt.item]:"#6f23e1",[vt.trader]:"#fbbc04",[vt.lostFleet]:"#d11515"},sizes:{[yt.small]:"#404040",[yt.medium]:"#3e85fe",[yt.large]:"#e01a76","fled-death-star":"#dddddd"},depletion:{[bt.none]:"#00c23a",[bt.low]:"#fbbc04",[bt.medium]:"#ff5e00",[bt.high]:"#c72525",unknown:"#404040"}},lifeformDiscoveries:{events:{[kt.nothing]:"#404040",[kt.lostShip]:"#d11515",[kt.knownLifeformFound]:"#33bcdb",[kt.newLifeformFound]:"#00c23a",[kt.artifacts]:"#fbbc04"},artifactFindingSizes:{[Ct.small]:"#404040",[Ct.medium]:"#3e85fe",[Ct.large]:"#e01a76",[Ct.storageFull]:"#d11515"}},lifeforms:{[lt.humans]:"#7ec000",[lt.rocktal]:"#df6642",[lt.mechas]:"#4b91e7",[lt.kaelesh]:"#9863e9"}},universeHistory:{updateTimes:[72e6],enabled:!1,trackHistory:!1},combatTracking:{ignoreEspionageFights:!0},messageTracking:{showSimplifiedResults:!0},debrisFields:{separateExpeditionDebrisFields:!1}};return Ul.locale=t,r}(e),await t.get("settings",0)??{});return r}const Hl={ar:Ot["es-ar"],br:Ot["pt-br"],cz:Ot.cs,de:Ot.de,dk:Ot.da,en:Ot.en,es:Ot["es-es"],fr:Ot.fr,gr:Ot.el,hr:Ot.hr,hu:Ot.hu,it:Ot.it,mx:Ot["es-mx"],nl:Ot.nl,pl:Ot.pl,pt:Ot["pt-pt"],ro:Ot.ro,ru:Ot.ru,si:Ot.sl,tr:Ot.tr,us:Ot.en,tw:Ot["zh-tw"]};var Kl;!function(e){e[e.total=0]="total",e[e.economy=1]="economy",e[e.research=2]="research",e[e.militaryAndNumberOfShips=3]="militaryAndNumberOfShips",e[e.militaryLost=4]="militaryLost",e[e.militaryBuilt=5]="militaryBuilt",e[e.militaryDestroyed=6]="militaryDestroyed",e[e.honor=7]="honor",e[e.lifeform=8]="lifeform",e[e.lifeformEconomy=9]="lifeformEconomy",e[e.lifeformTechnology=10]="lifeformTechnology",e[e.lifeformDiscoveries=11]="lifeformDiscoveries"}(Kl||(Kl={}));const ql=["total","economy","research","military","militaryBuilt","militaryDestroyed","militaryLost","honor","numberOfShips","lifeform","lifeformEconomy","lifeformTechnology","lifeformDiscoveries"];var Gl;!function(e){e[e.planet=1]="planet",e[e.moon=3]="moon",e[e.debrisField=2]="debrisField"}(Gl||(Gl={}));const Vl=/^\[?(?<galaxy>\d+):(?<system>\d+):(?<position>\d+)\]?$/;function Wl(t,r){e(2,arguments);var a=n(t),o=v(r);return isNaN(o)?new Date(NaN):o?(a.setDate(a.getDate()+o),a):a}class Yl{updateTimes=[];parser=new At.XMLParser({attributeNamePrefix:"",ignoreAttributes:!1,parseAttributeValue:!1});meta;timeout=void 0;inUpdate=!1;get settings(){return Xl.settings.universeHistory}constructor(e){this.meta=e}async init(){if(await Xl.ready,await this.initSettings(),!this.settings.enabled)return de("universe history tracking is disabled"),void clearTimeout(this.timeout);await this.initTracking()}async initSettings(){this.updateTimes=[...this.settings.updateTimes].sort(((e,t)=>e-t))}async initTracking(){const t=await Ie(this.meta),r=await t.get("_lastUpdate",0)??0,a=Date.now(),o=[];if(0==r)o.push(a);else{let t=function(t){e(1,arguments);var r=n(t);return r.setHours(0,0,0,0),r}(r).getTime(),i=0;for(;0==o.length||o[o.length-1]<a;){const e=t+this.updateTimes[i];e>r&&o.push(e),i++,i>=this.updateTimes.length&&(i=0,t=Wl(t,1).getTime())}}const i=1==o.length?o[0]:o.find(((e,t)=>o[t+1]>=a))??De("failed to find next update time for universe history"),s=Math.max(0,i-a);de(`next universe history tracking in ${s} ms (${new Date(Date.now()+s)}) for universe ${this.meta.serverId} ${this.meta.language.toUpperCase()}`),clearTimeout(this.timeout),this.timeout=setTimeout((async()=>await this.trackUniverseUpdates()),s)}async trackUniverseUpdates(){if(!this.inUpdate){this.inUpdate=!0;try{de(`tracking universe history for universe ${this.meta.serverId} ${this.meta.language.toUpperCase()}`);const e=await this.getPlayers(),t=await this.getAlliances(),r=await this.getAllPlayerScores(),a=this.settings.trackHistory?await this.getPlanets():[];de("loaded current states, updating in db (this may take a while)");const n=await Ie(this.meta),o=["_lastUpdate","players","playerNames","playerAlliances","playerStates","playerScores","planets","planetNames","planetStates","planetCoordinates","moons","moonNames","moonStates","alliances","allianceTags","allianceNames","allianceMembers","allianceStates","allianceScores"],i=n.transaction(o,"readwrite");await this.updateHistory(i,e,t,r,a),await i.done,de("updated universe history");const s={ogameMeta:this.meta,senderUuid:Ge,type:Q.NotifyUniverseHistoryUpdate};await $e(s),await this.initTracking()}catch(e){setTimeout((async()=>await this.initTracking()),3e5)}finally{this.inUpdate=!1}}}async updateHistory(e,t,r,a,n){const o=Date.now();await this.updatePlayers(e,t,o,a),await this.updateAlliances(e,r,o,t,a),this.settings.trackHistory&&await this.updatePlanets(e,n,o),await e.objectStore("_lastUpdate").put(o,0)}async updateAlliances(e,t,r,a,n){de("updating alliance history"),await this.updateKnownAlliances(e,t),await this.updateAllianceTags(e,t,r,!this.settings.trackHistory),await this.updateAllianceNames(e,t,r,!this.settings.trackHistory),await this.updateAllianceScores(e,t,a,n,r),this.settings.trackHistory&&(await this.updateAllianceMembers(e,t,a,r),await this.updateAllianceStates(e,t,r))}async updateKnownAlliances(e,t){for(const r of t)await e.objectStore("alliances").put({id:r.id})}async updateAllianceTags(e,t,r,a=!1){const n={},o={},i=e.objectStore("allianceTags");if(a)await i.clear();else{let e=await i.openCursor();for(;null!=e;){const t=e.value;(o[t.allianceId]??-1)<t.date&&(o[t.allianceId]=t.date,n[t.allianceId]=t.tag),e=await e.continue()}}for(const e of t)e.tag!=n[e.id]&&await i.put({allianceId:e.id,date:r,tag:e.tag})}async updateAllianceNames(e,t,r,a=!1){const n={},o={},i=e.objectStore("allianceNames");if(a)await i.clear();else{let e=await i.openCursor();for(;null!=e;){const t=e.value;(o[t.allianceId]??-1)<t.date&&(o[t.allianceId]=t.date,n[t.allianceId]=t.name),e=await e.continue()}}for(const e of t)e.name!=n[e.id]&&await i.put({allianceId:e.id,date:r,name:e.name})}async updateAllianceMembers(e,t,r,a){const n={},o={},i=e.objectStore("allianceMembers");let s=await i.openCursor();for(;null!=s;){const e=s.value;(o[e.allianceId]??-1)<e.date&&(o[e.allianceId]=e.date,n[e.allianceId]=e.members),s=await s.continue()}for(const e of t){const t=r.filter((t=>t.alliance==e.id)).map((e=>e.id));this.arraysEqual(t,n[e.id]??[])||await i.put({allianceId:e.id,date:a,members:t})}}async updateAllianceStates(e,t,r){const a={},n={},o=e.objectStore("allianceStates");let i=await o.openCursor();for(;null!=i;){const e=i.value;(n[e.allianceId]??-1)<e.date&&(n[e.allianceId]=e.date,a[e.allianceId]=e.state),i=await i.continue()}for(const e of t)e.id in a&&null==a[e.id]||await o.put({allianceId:e.id,date:r,state:null});const s=t.map((e=>e.id)),l=Object.keys(a).map((e=>et(e,10))).filter((e=>!s.includes(e)));for(const e of l)"deleted"!=a[e]&&await o.put({allianceId:e,date:r,state:"deleted"})}async updateAllianceScores(e,t,r,a,n){const o={},i={},s=e.objectStore("allianceScores");let l=await s.openCursor();for(;null!=l;){const e=l.value,t=`${e.allianceId}.${e.type}`;(i[t]??-1)<e.date&&(i[t]=e.date,o[t]={score:e.score,position:e.position}),l=await l.continue()}const c=ql,d={};c.forEach((e=>d[e]={}));for(const e of t){const t=r.filter((t=>t.alliance==e.id)).map((e=>a[e.id]));for(const r of c){const a=d[r],n=t.map((e=>e?.[r]?.score??0)).reduce(((e,t)=>e+t),0);a[e.id]=n}}const u={};c.forEach((e=>{const t=d[e],r=[...new Set(Object.values(t).filter((e=>null!=e)))].sort(((e,t)=>t-e));u[e]=r}));for(const e of t)for(const t of c){let r=d[t][e.id];const a=null==r?0:u[t].indexOf(r)+1;r??=0;const i=o[`${e.id}.${t}`];i?.position==a&&i?.score==r||await s.put({allianceId:e.id,date:n,type:t,position:a,score:r})}}async updatePlayers(e,t,r,a){de("updating player history"),await this.updateKnownPlayers(e,t),await this.updatePlayerScores(e,t,a,r),await this.updatePlayerNames(e,t,r,!this.settings.trackHistory),this.settings.trackHistory&&(await this.updatePlayerAlliances(e,t,r),await this.updatePlayerStates(e,t,r))}async updateKnownPlayers(e,t){for(const r of t)await e.objectStore("players").put({id:r.id})}async updatePlayerNames(e,t,r,a=!1){const n={},o={},i=e.objectStore("playerNames");if(a)await i.clear();else{let e=await i.openCursor();for(;null!=e;){const t=e.value;(o[t.playerId]??-1)<t.date&&(o[t.playerId]=t.date,n[t.playerId]=t.name),e=await e.continue()}}for(const e of t)e.name!=n[e.id]&&await i.put({playerId:e.id,date:r,name:e.name})}async updatePlayerAlliances(e,t,r){const a={},n={},o=e.objectStore("playerAlliances");let i=await o.openCursor();for(;null!=i;){const e=i.value;(n[e.playerId]??-1)<e.date&&(n[e.playerId]=e.date,a[e.playerId]=e.allianceId),i=await i.continue()}for(const e of t)e.id in a&&e.alliance==a[e.id]||await o.put({playerId:e.id,date:r,allianceId:e.alliance})}async updatePlayerStates(e,t,r){const a={},n={},o=e.objectStore("playerStates");let i=await o.openCursor();for(;null!=i;){const e=i.value;(n[e.playerId]??-1)<e.date&&(n[e.playerId]=e.date,a[e.playerId]=e.state),i=await i.continue()}for(const e of t){const t=this.mapState(e.status);e.id in a&&this.playerStateEqual(t,a[e.id])||await o.put({playerId:e.id,date:r,state:t})}const s=t.map((e=>e.id)),l=Object.keys(a).map((e=>et(e,10))).filter((e=>!s.includes(e)));for(const e of l)"deleted"!=a[e]&&await o.put({playerId:e,date:r,state:"deleted"})}async updatePlayerScores(e,t,r,a){const n={},o={},i=e.objectStore("playerScores");let s=await i.openCursor();for(;null!=s;){const e=s.value,t=`${e.playerId}.${e.type}`;(o[t]??-1)<e.date&&(o[t]=e.date,n[t]={score:e.score,position:e.position}),s=await s.continue()}const l=ql,c={};l.forEach((e=>c[e]={}));for(const e of t)for(const t of l){const{score:o,position:s}=r[e.id]?.[t]??{score:0,position:0},l=`${e.id}.${t}`;n[l]?.position==s&&n[l]?.score==o||await i.put({playerId:e.id,date:a,type:t,position:s,score:o})}}playerStateEqual(e,t){return null==e||null==t||"deleted"==e||"deleted"==t?e==t:this.arraysEqual(e,t)}mapState(e){if(null==e)return null;const t={a:"admin",b:"banned",v:"vacation",i:"inactive",I:"inactive-long",o:"outlaw"},r=[];if(e.split("").forEach((e=>r.push(t[e]??De(`unknown player state '${e}'`)))),0==r.length)throw new Error("number of player stats was zero");return r}async updatePlanets(e,t,r){de("updating planet and moon history"),await this.updateKnownPlanets(e,t),await this.updatePlanetNames(e,t,r),await this.updatePlanetStates(e,t,r),await this.updatePlanetCoordinates(e,t,r);const a=t.map((e=>e.moon)).filter((e=>null!=e));await this.updateKnownMoons(e,a),await this.updateMoonNames(e,a,r),await this.updateMoonStates(e,a,r)}async updateKnownPlanets(e,t){const r=e.objectStore("planets");for(const e of t)await r.put({id:e.id,playerId:e.player})}async updatePlanetNames(e,t,r){const a={},n={},o=e.objectStore("planetNames");let i=await o.openCursor();for(;null!=i;){const e=i.value;(n[e.planetId]??-1)<e.date&&(n[e.planetId]=e.date,a[e.planetId]=e.name),i=await i.continue()}for(const e of t)e.name!=a[e.id]&&await o.put({planetId:e.id,date:r,name:e.name})}async updatePlanetStates(e,t,r){const a={},n={},o=e.objectStore("planetStates");let i=await o.openCursor();for(;null!=i;){const e=i.value;(n[e.planetId]??-1)<e.date&&(n[e.planetId]=e.date,a[e.planetId]=e.state),i=await i.continue()}for(const e of t)e.id in a&&null==a[e.id]||await o.put({planetId:e.id,date:r,state:null});const s=t.map((e=>e.id)),l=Object.keys(a).map((e=>et(e,10))).filter((e=>!s.includes(e)));for(const e of l)"deleted"!=a[e]&&await o.put({planetId:e,date:r,state:"deleted"})}async updatePlanetCoordinates(e,t,r){const a={},n={},o=e.objectStore("planetCoordinates");let i=await o.openCursor();for(;null!=i;){const e=i.value;(n[e.planetId]??-1)<e.date&&(n[e.planetId]=e.date,a[e.planetId]=e.coordinates),i=await i.continue()}for(const e of t)e.id in a&&this.coordinatesEqual(e.coordinates,a[e.id])||await o.put({planetId:e.id,date:r,coordinates:{galaxy:e.coordinates.galaxy,system:e.coordinates.system,position:e.coordinates.position}})}async updateKnownMoons(e,t){const r=e.objectStore("moons");for(const e of t)await r.put({id:e.id,size:e.size,planetId:e.planetId})}async updateMoonNames(e,t,r){const a={},n={},o=e.objectStore("moonNames");let i=await o.openCursor();for(;null!=i;){const e=i.value;(n[e.moonId]??-1)<e.date&&(n[e.moonId]=e.date,a[e.moonId]=e.name),i=await i.continue()}for(const e of t)e.name!=a[e.id]&&await o.put({moonId:e.id,date:r,name:e.name})}async updateMoonStates(e,t,r){const a={},n={},o=e.objectStore("moonStates");let i=await o.openCursor();for(;null!=i;){const e=i.value;(n[e.moonId]??-1)<e.date&&(n[e.moonId]=e.date,a[e.moonId]=e.state),i=await i.continue()}for(const e of t)e.id in a&&null==a[e.id]||await o.put({moonId:e.id,date:r,state:null});const s=t.map((e=>e.id)),l=Object.keys(a).map((e=>et(e,10))).filter((e=>!s.includes(e)));for(const e of l)"deleted"!=a[e]&&await o.put({moonId:e,date:r,state:"deleted"})}coordinatesEqual(e,t){return e.galaxy==t.galaxy&&e.system==t.system&&e.position==t.position}arraysEqual(e,t){return e.length==t.length&&e.every((e=>t.includes(e)))&&t.every((t=>e.includes(t)))}get apiUrlBase(){return`https://s${this.meta.serverId}-${this.meta.language}.ogame.gameforge.com/api`}async getXml(e){const t=`${this.apiUrlBase}/${e}`,r=await fetch(t,{cache:"no-cache"}),a=await r.text();return this.parser.parse(a)}async getPlanets(){const e=[];return(await this.getXml("universe.xml")).universe.planet.forEach((t=>{const r=et(t.id??De("no planet id found"),10),a=et(t.player??De("no planet player id found"),10),n=t.name??De("no planet name found"),o=function(e,t=Gl.planet){const r=e.match(Vl);if(null==r?.groups)throw new Error(`invalid coordinates '${e}'`);return{galaxy:et(r.groups.galaxy),system:et(r.groups.system),position:et(r.groups.position),type:t}}(t.coords??De("no planet coords found"));let i;if(null!=t.moon){const e=et(t.moon.id??De("no moon id found"),10),a=et(t.moon.size??De("no moon size found"),10);i={id:e,name:t.moon.name??De("no moon name found"),size:a,planetId:r}}e.push({id:r,player:a,name:n,coordinates:o,moon:i})})),e}async getPlayers(){const e=[];return(await this.getXml("players.xml")).players.player.forEach((t=>{const r=et(t.id??De("no player id found"),10),a=t.name??De("no player name found"),n=t.status??null,o=null==t.alliance?null:et(t.alliance,10);e.push({id:r,alliance:o,name:a,status:n})})),e}async getAlliances(){const e=[];return(await this.getXml("alliances.xml")).alliances.alliance.forEach((t=>{const r=et(t.id??De("no alliance id found"),10),a=t.name??De("no alliance name found"),n=t.tag??De("no alliance tag found");e.push({id:r,name:a,tag:n})})),e}async getAllPlayerScores(){const e={},t=await this.getPlayerScorePositions(Kl.total),r=await this.getPlayerScorePositions(Kl.economy),a=await this.getPlayerScorePositions(Kl.research),n=await this.getPlayerMilitaryScorePositions(),o=await this.getPlayerScorePositions(Kl.militaryBuilt),i=await this.getPlayerScorePositions(Kl.militaryDestroyed),s=await this.getPlayerScorePositions(Kl.militaryLost),l=await this.getPlayerScorePositions(Kl.honor);let c=await this.getPlayerScorePositions(Kl.lifeform),d=await this.getPlayerScorePositions(Kl.lifeformEconomy),u=await this.getPlayerScorePositions(Kl.lifeformTechnology),m=await this.getPlayerScorePositions(Kl.lifeformDiscoveries);return Object.keys(t).map((e=>et(e,10))).forEach((p=>{e[p]={total:t[p],economy:r[p],research:a[p],military:n[p].points,numberOfShips:n[p].numberOfShips,militaryBuilt:o[p],militaryDestroyed:i[p],militaryLost:s[p],honor:l[p],lifeform:c[p],lifeformEconomy:d[p],lifeformTechnology:u[p],lifeformDiscoveries:m[p]}})),e}async getPlayerScorePositions(e){const t={};return(await this.getXml(`highscore.xml?category=1&type=${e}`)).highscore.player.forEach((e=>{const r=et(e.id??De("no player id found"),10),a=et(e.score??De("no player score found"),10),n=et(e.position??De("no player position found"),10);t[r]={score:a,position:n}})),t}async getPlayerMilitaryScorePositions(){const e={},t=(await this.getXml(`highscore.xml?category=1&type=${Kl.militaryAndNumberOfShips}`)).highscore.player.map((e=>({id:et(e.id??De("no player id found"),10),score:et(e.score??De("no player score found"),10),position:et(e.position??De("no player position found"),10),numberOfShips:et(e.ships??"0",10)})));return t.sort(((e,t)=>t.numberOfShips-e.numberOfShips)),t.forEach(((t,r)=>{const{id:a,score:n,position:o,numberOfShips:i}=t,s=r+1;e[a]={points:{score:n,position:o},numberOfShips:{score:i,position:s}}})),e}}const Xl=new class{_settings=null;_ready;_resolveReady;get ready(){return this._ready}get settings(){return this._settings}constructor(){this._ready=new Promise((e=>this._resolveReady=e)),this.initSettings()}async initSettings(){this._settings=await jl("__internal__"),this._resolveReady()}async onMessage(e){switch(e.type){case Q.RequestSettings:await this.broadcastSettings(e.ogameMeta);break;case Q.NotifySettingsUpdate:await this.initSettings()}}async broadcastSettings(e,t){const r=function(e,t=!1){const r=Hl[e];return null==r&&t&&De(`unsupported language '${e}'`),r}(e.userLanguage)??Ot.en,a=await jl(r),n={ogameMeta:e,type:Q.Settings,data:a,senderUuid:t??Ge};await $e(n)}},Zl=[Xl,new class{expeditionModule=new Et;async onMessage(e){if(e.type!=Q.TrackExpedition)return;const t=e,r=await this.expeditionModule.tryTrackExpedition(t);if(!r.success){const r={ogameMeta:e.ogameMeta,type:Q.TrackingError,data:{id:t.data.id,type:"expedition"},senderUuid:Ge};return void await $e(r)}const{expedition:a,isAlreadyTracked:n}=r.result;if(n){const t={ogameMeta:e.ogameMeta,type:Q.Expedition,data:a,senderUuid:Ge};await $e(t)}else{const t={ogameMeta:e.ogameMeta,type:Q.NewExpedition,data:a,senderUuid:Ge};await $e(t)}}},new class{lifeformDiscoveryModule=new Mt;async onMessage(e){switch(e.type){case Q.TrackLifeformDiscovery:{const t=e,r=await this.lifeformDiscoveryModule.tryTrackExpedition(t);if(!r.success){const r={ogameMeta:e.ogameMeta,type:Q.TrackingError,data:{id:t.data.id,type:"lifeform-discovery"},senderUuid:Ge};return void await $e(r)}const{lifeformDiscovery:a,isAlreadyTracked:n}=r.result;if(n){const t={ogameMeta:e.ogameMeta,type:Q.LifeformDiscovery,data:a,senderUuid:Ge};await $e(t)}else{const t={ogameMeta:e.ogameMeta,type:Q.NewLifeformDiscovery,data:a,senderUuid:Ge};await $e(t)}break}}}},new class{combatReportModule=new Oe;async onMessage(e){switch(e.type){case Q.RequestSingleCombatReport:{const{data:t}=e,r=await this.combatReportModule.tryGetSingleReport(e);if(!r.success){const r={ogameMeta:e.ogameMeta,type:Q.CombatReportUnknown,data:t,senderUuid:Ge};await $e(r);break}if(r.result.ignored){const t={ogameMeta:e.ogameMeta,type:Q.WillNotBeTracked,data:{id:r.result.id,type:"combat-report"},senderUuid:Ge};await $e(t);break}const a={ogameMeta:e.ogameMeta,type:Q.CombatReport,data:r.result.report,senderUuid:Ge};await $e(a);break}case Q.TrackCombatReport:{const t=e,r=await this.combatReportModule.tryTrackCombatReport(t);if(!r.success){const r={ogameMeta:e.ogameMeta,type:Q.TrackingError,data:{id:t.data.id,type:"combat-report"},senderUuid:Ge};return void await $e(r)}if(r.result.ignored){const t={ogameMeta:e.ogameMeta,type:Q.WillNotBeTracked,data:{id:r.result.id,type:"combat-report"},senderUuid:Ge};await $e(t);break}if(r.result.isAlreadyTracked){const t={ogameMeta:e.ogameMeta,type:Q.CombatReport,data:r.result.report,senderUuid:Ge};await $e(t)}else{const t={ogameMeta:e.ogameMeta,type:Q.NewCombatReport,data:r.result.report,senderUuid:Ge};await $e(t)}break}}}},new class{dfModule=new Ve;async onMessage(e){switch(e.type){case Q.TrackDebrisFieldReport:{const t=e,r=await this.dfModule.tryTrackDebrisFieldReport(t);if(!r.success){const r={ogameMeta:e.ogameMeta,type:Q.TrackingError,data:{id:t.data.id,type:"debris-field-report"},senderUuid:Ge};return void await $e(r)}const{report:a,isAlreadyTracked:n}=r.result;if(n){const t={ogameMeta:e.ogameMeta,type:Q.DebrisFieldReport,data:a,senderUuid:Ge};await $e(t)}else{const t={ogameMeta:e.ogameMeta,type:Q.NewDebrisFieldReport,data:a,senderUuid:Ge};await $e(t)}break}case Q.TrackManualDebrisFieldReport:{const t=e;await this.dfModule.trackManualDebrisFieldReport(t);const r={ogameMeta:e.ogameMeta,type:Q.NewDebrisFieldReport,data:t.data,senderUuid:Ge};await $e(r)}}}},new class{empireModule=new ft;async onMessage(e){switch(e.type){case Q.UpdateActiveOfficers:{const t=e;await this.empireModule.updateOfficers(t.ogameMeta,t.data);break}case Q.UpdateAllianceClass:{const t=e;await this.empireModule.updateAlliance(t.ogameMeta,t.data);break}case Q.UpdatePlanetActiveItems:{const t=e;await this.empireModule.updateActiveItems(t.ogameMeta,t.data);break}case Q.UpdatePlanetBuildingLevels:{const t=e;await this.empireModule.updateBuildingLevels(t.ogameMeta,t.data);break}case Q.UpdatePlanetData:{const t=e;await this.empireModule.updateBasicPlanets(t.ogameMeta,t.data);break}case Q.UpdatePlanetDefenseCounts:{const t=e;await this.empireModule.updatePlanetDefenses(t.ogameMeta,t.data);break}case Q.UpdatePlanetMissileCounts:{const t=e;await this.empireModule.updatePlanetMissiles(t.ogameMeta,t.data);break}case Q.UpdatePlanetShipCounts:{const t=e;await this.empireModule.updatePlanetShips(t.ogameMeta,t.data);break}case Q.UpdatePlayerClass:{const t=e;await this.empireModule.updatePlayerClass(t.ogameMeta,t.data);break}case Q.UpdateResearchLevels:{const t=e;await this.empireModule.updateResearchLevels(t.ogameMeta,t.data);break}case Q.UpdatePlanetProductionSettings:{const t=e;await this.empireModule.updateProductionSettings(t.ogameMeta,t.data);break}case Q.UpdateSelectedLifeform:{const t=e;await this.empireModule.updateSelectedLifeform(t.ogameMeta,t.data);break}case Q.UpdateLifeformExperience:{const t=e;await this.empireModule.updateLifeformExperience(t.ogameMeta,t.data);break}case Q.UpdatePlanetActiveLifeformBuildingLevels:case Q.UpdatePlanetLifeformBuildingLevels:{const t=e;await this.empireModule.updatePlanetLifeformBuildings(t.ogameMeta,t.data);break}case Q.UpdatePlanetLifeformTechnologyLevels:{const t=e;await this.empireModule.updatePlanetLifeformTechnologies(t.ogameMeta,t.data);break}case Q.UpdatePlanetActiveLifeformTechnologyLevels:{const t=e;await this.empireModule.updatePlanetActiveLifeformTechnologies(t.ogameMeta,t.data);break}case Q.UpdateFleets:{const t=e;await this.empireModule.updateFleets(t.ogameMeta,t.data);break}default:return}await this.notifyEmpireUpdate(e.ogameMeta)}async notifyEmpireUpdate(e){const t={type:Q.NotifyEmpireDataUpdate,ogameMeta:e,senderUuid:Ge};await $e(t)}},new class{modules={};async onMessage(e){const t=Rt(e.ogameMeta,!1);if(e.type==Q.NotifySettingsUpdate){de("re-init universe history tracking after settings change");for(const e of Object.keys(this.modules))await this.modules[e].init()}if(null!=this.modules[t])return;const r=this.modules[t]=new Yl(e.ogameMeta);await r.init()}},new class{modules={};async onMessage(e){const t=await this.initModule(e.ogameMeta);e.type===Q.ForceUpdateServerSettings&&await t.update()}async initModule(e){const t=Rt(e,!1);let r=this.modules[t];return null!=r||(r=new It(e),this.modules[t]=r),r}},new class{async onMessage(e){switch(e.type){case Q.UpdatePlayerName:{const t=e,r=(await Re()).transaction("accounts","readwrite").objectStore("accounts"),a=await r.get([e.ogameMeta.serverId,e.ogameMeta.language,e.ogameMeta.playerId]);await r.put({id:e.ogameMeta.playerId,serverId:e.ogameMeta.serverId,serverLanguage:e.ogameMeta.language,...a,name:t.data});break}case Q.UpdateUniverseName:{const t=e,r=await Re();await r.put("servers",{id:e.ogameMeta.serverId,language:e.ogameMeta.language,name:t.data});break}}}},new class{async onMessage(e){switch(e.type){case Q.StayAlive:break;case Q.DropDatabaseConnections:!function(){for(const e of Object.keys(Ee))delete Ee[e]}()}}},{onMessage:async e=>{e.senderUuid!=Ge&&$e(e)}}];try{chrome.runtime.onInstalled.addListener((async()=>await async function(){const e=await chrome.storage.local.getBytesInUse()>0,t=await chrome.storage.local.get("migration-v1-to-v2");e&&1!=t["migration-v1-to-v2"]&&await chrome.tabs.create({active:!0,index:0,url:"/views/migrate.html"})}())),chrome.runtime.onMessage.addListener((async e=>await async function(e){if(de("got message",new Date,e),e.ogameMeta.playerId<=0||e.ogameMeta.serverId<=0)ce("skipping message because playerid <= 0 or serverid <= 0",e);else for(const t of Zl)await t.onMessage(e)}(e)))}catch(e){le(e)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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VWQsVUFBWSxFQUNqRWpHLEdBQVksMERBQTJENWUsUUFJM0UsSUFBSyxNQUFNeTZGLEtBQVc5RixTQUNaOEYsRUFBUVQsVUFBVWg2RixHQTVCZ0NnNkYsQ0FBVWg2RixLQUN4RSxNQUFPMmUsR0FDTEQsR0FBVUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMvZnhwLmpzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy91dGlsLmpzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9ub2RlX21vZHVsZXMvZmFzdC14bWwtcGFyc2VyL3NyYy92YWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbGJ1aWxkZXIvanNvbjJ4bWwuanMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbGJ1aWxkZXIvb3JkZXJlZEpzMlhtbC5qcyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMveG1scGFyc2VyL0RvY1R5cGVSZWFkZXIuanMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbHBhcnNlci9PcHRpb25zQnVpbGRlci5qcyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vbm9kZV9tb2R1bGVzL2Zhc3QteG1sLXBhcnNlci9zcmMveG1scGFyc2VyL09yZGVyZWRPYmpQYXJzZXIuanMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbHBhcnNlci9YTUxQYXJzZXIuanMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbHBhcnNlci9ub2RlMmpzb24uanMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL25vZGVfbW9kdWxlcy9mYXN0LXhtbC1wYXJzZXIvc3JjL3htbHBhcnNlci94bWxOb2RlLmpzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9ub2RlX21vZHVsZXMvc3RybnVtL3N0cm51bS5qcyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNEYXRlL2luZGV4LmpzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3RvRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1ZhbGlkL2luZGV4LmpzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2xvY2FsaXplL2luZGV4LmpzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9tYXRjaC9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3RvSW50ZWdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9hZGRNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9saWdodEZvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvZm9ybWF0dGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZm9ybWF0L2luZGV4LmpzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21lc3NhZ2VzL01lc3NhZ2VUeXBlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9jb21iYXQtcmVwb3J0cy9Db21iYXRSZXN1bHRUeXBlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9yZXNvdXJjZXMvUmVzb3VyY2VUeXBlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL3V0aWxzL19sb2cudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL25vZGVfbW9kdWxlcy9pZGIvYnVpbGQvd3JhcC1pZGItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL25vZGVfbW9kdWxlcy9pZGIvYnVpbGQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvdXRpbHMvX3Rocm93LnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2RiL3NjaGVtYS9pbmRleC50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9kYi9hY2Nlc3MudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zZXJ2aWNlLXdvcmtlci9jb21iYXQtcmVwb3J0cy9Db21iYXRSZXBvcnRNb2R1bGUudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvY29tbXVuaWNhdGlvbi9pZ25vcmVTdHVwaWRNZXNzYWdlUG9ydEVycm9ycy50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9jb21tdW5pY2F0aW9uL2Jyb2FkY2FzdE1lc3NhZ2UudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvY29tbXVuaWNhdGlvbi9zZW5kTWVzc2FnZS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9yZWdleC5qcyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92YWxpZGF0ZS5qcyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvc2hhMS5qcyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92NS5qcyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92MzUuanMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcGFyc2UuanMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvdXVpZC9pbmRleC50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NlcnZpY2Utd29ya2VyL2RlYnJpcy1maWVsZHMtcmVwb3J0cy9EZWJyaXNGaWVsZFJlcG9ydE1vZHVsZS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvYnVpbGRpbmdzL0J1aWxkaW5nVHlwZS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvYnVpbGRpbmdzL0J1aWxkaW5nLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9idWlsZGluZ3MvQWxsaWFuY2VEZXBvdC50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvYnVpbGRpbmdzL1Byb2R1Y3Rpb25CdWlsZGluZy50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvYnVpbGRpbmdzL0NyeXN0YWxNaW5lLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9idWlsZGluZ3MvU3RvcmFnZUJ1aWxkaW5nLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9idWlsZGluZ3MvQ3J5c3RhbFN0b3JhZ2UudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL2J1aWxkaW5ncy9EZXV0ZXJpdW1TeW50aGVzaXplci50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvYnVpbGRpbmdzL0RldXRlcml1bVRhbmsudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL2J1aWxkaW5ncy9GdXNpb25SZWFjdG9yLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9idWlsZGluZ3MvSnVtcEdhdGUudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL2J1aWxkaW5ncy9MdW5hckJhc2UudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL2J1aWxkaW5ncy9NZXRhbE1pbmUudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL2J1aWxkaW5ncy9NZXRhbFN0b3JhZ2UudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL2J1aWxkaW5ncy9NaXNzaWxlU2lsby50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvYnVpbGRpbmdzL05hbml0ZUZhY3RvcnkudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL2J1aWxkaW5ncy9SZXNlYXJjaExhYi50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvYnVpbGRpbmdzL1JvYm90aWNzRmFjdG9yeS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvYnVpbGRpbmdzL1NlbnNvclBoYWxhbngudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL2J1aWxkaW5ncy9TaGlweWFyZC50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvYnVpbGRpbmdzL1NvbGFyUGxhbnQudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL2J1aWxkaW5ncy9TcGFjZURvY2sudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL2J1aWxkaW5ncy9UZXJyYWZvcm1lci50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvYnVpbGRpbmdzL0J1aWxkaW5nVHlwZXMudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvdXRpbHMvcGFyc2VOdW1iZXJzLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9zaGlwcy9TaGlwLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9zaGlwcy9TaGlwVHlwZS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvc2hpcHMvQmF0dGxlY3J1aXNlci50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvc2hpcHMvQmF0dGxlc2hpcC50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvc2hpcHMvQm9tYmVyLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9zaGlwcy9Db2xvbnlTaGlwLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9zaGlwcy9DcmF3bGVyLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9zaGlwcy9DcnVpc2VyLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9zaGlwcy9EZWF0aFN0YXIudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL3NoaXBzL0Rlc3Ryb3llci50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvc2hpcHMvRXNwaW9uYWdlUHJvYmUudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL3NoaXBzL0hlYXZ5RmlnaHRlci50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvc2hpcHMvTGFyZ2VDYXJnby50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvc2hpcHMvTGlnaHRGaWdodGVyLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9zaGlwcy9QYXRoZmluZGVyLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9zaGlwcy9SZWFwZXIudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL3NoaXBzL1JlY3ljbGVyLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9zaGlwcy9TbWFsbENhcmdvLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9zaGlwcy9Tb2xhclNhdGVsbGl0ZS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvc2hpcHMvU2hpcFR5cGVzLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9yZXNlYXJjaC9SZXNlYXJjaFR5cGUudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL3Jlc2VhcmNoL1Jlc2VhcmNoLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9yZXNlYXJjaC9Bcm1vclRlY2hub2xvZ3kudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL3Jlc2VhcmNoL0NvbXB1dGVyVGVjaG5vbG9neS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvcmVzZWFyY2gvRXNwaW9uYWdlVGVjaG5vbG9neS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvcmVzZWFyY2gvU2hpZWxkaW5nVGVjaG5vbG9neS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvcmVzZWFyY2gvV2VhcG9uc1RlY2hub2xvZ3kudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL3Jlc2VhcmNoL0VuZXJneVRlY2hub2xvZ3kudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL3Jlc2VhcmNoL0h5cGVyc3BhY2VUZWNobm9sb2d5LnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9yZXNlYXJjaC9Db21idXN0aW9uRHJpdmUudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL3Jlc2VhcmNoL0ltcHVsc2VEcml2ZS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvcmVzZWFyY2gvSHlwZXJzcGFjZURyaXZlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9yZXNlYXJjaC9MYXNlclRlY2hub2xvZ3kudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL3Jlc2VhcmNoL0lvblRlY2hub2xvZ3kudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL3Jlc2VhcmNoL1BsYXNtYVRlY2hub2xvZ3kudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL3Jlc2VhcmNoL0ludGVyZ2FsYWN0aWNSZXNlYXJjaE5ldHdvcmsudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL3Jlc2VhcmNoL0FzdHJvcGh5c2ljcy50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvcmVzZWFyY2gvR3Jhdml0b25UZWNobm9sb2d5LnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9yZXNlYXJjaC9SZXNlYXJjaFR5cGVzLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9saWZlZm9ybXMvTGlmZWZvcm1UeXBlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9saWZlZm9ybXMvTGlmZWZvcm1CdWlsZGluZ1R5cGUudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL2xpZmVmb3Jtcy9MaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL3V0aWxzL2NyZWF0ZVJlY29yZC50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NlcnZpY2Utd29ya2VyL2VtcGlyZS9FbXBpcmVNb2R1bGUudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL2V4cGVkaXRpb25zL0V4cGVkaXRpb25FdmVudHMudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL2V4cGVkaXRpb25zL0V4cGVkaXRpb25FdmVudFNpemUudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL2V4cGVkaXRpb25zL0V4cGVkaXRpb25FdmVudFR5cGUudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL2V4cGVkaXRpb25zL0V4cGVkaXRpb25EZXBsZXRpb25MZXZlbC50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvbWVzc2FnZXMvT2dhbWVSYXdFeHBlZGl0aW9uUmVzdWx0VHlwZS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvbWVzc2FnZXMvT2dhbWVSYXdFeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWwudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL21lc3NhZ2VzL09nYW1lUmF3RXhwZWRpdGlvblNpemUudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL2xpZmVmb3JtLWRpc2NvdmVyaWVzL0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9saWZlZm9ybS1kaXNjb3Zlcmllcy9MaWZlZm9ybURpc2NvdmVyeUV2ZW50QXJ0aWZhY3RGaW5kaW5nU2l6ZS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvbWVzc2FnZXMvT2dhbWVSYXdMaWZlZm9ybURpc2NvdmVyeVR5cGUudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL21lc3NhZ2VzL09nYW1lUmF3QXJ0aWZhY3RGaW5kU2l6ZS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvbWVzc2FnZXMvT2dhbWVSYXdMaWZlZm9ybVR5cGUudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zZXJ2aWNlLXdvcmtlci9leHBlZGl0aW9ucy9FeHBlZGl0aW9uTW9kdWxlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2VydmljZS13b3JrZXIvbGlmZWZvcm0tZGlzY292ZXJpZXMvTGlmZWZvcm1EaXNjb3ZlcnlNb2R1bGUudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zZXJ2aWNlLXdvcmtlci9zZXJ2ZXItc2V0dGluZ3MvU2VydmVyU2V0dGluZ3NNb2R1bGUudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvdXRpbHMvZ2V0U3RvcmFnZUtleVByZWZpeC50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL0xhbmd1YWdlS2V5LnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL3V0aWxzL21lcmdlRGVlcC50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vbm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vbm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5ydW50aW1lLmVzbS5qcyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vbm9kZV9tb2R1bGVzL3Z1ZS1jbGFzcy1jb21wb25lbnQvZGlzdC92dWUtY2xhc3MtY29tcG9uZW50LmVzbS5qcyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vbm9kZV9tb2R1bGVzL3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3IvbGliL2hlbHBlcnMvbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9vZ2FtZS9zaGlwcy9kZS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9tb2RlbHMvb2dhbWUvZGVmZW5zZXMvRGVmZW5zZVR5cGUudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9vZ2FtZS9kZWZlbnNlcy9kZS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL29nYW1lL2J1aWxkaW5ncy9kZS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL29nYW1lL3Jlc2VhcmNoL2RlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vb2dhbWUvbGlmZWZvcm1zL2RlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vb2dhbWUvbGlmZWZvcm1zL2J1aWxkaW5ncy9kZS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL29nYW1lL2xpZmVmb3Jtcy90ZWNobm9sb2dpZXMvZGUudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9vZ2FtZS9wcmVtaXVtL2RlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vZXh0ZW5zaW9uL3NldHRpbmdzL2RlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vb2dhbWUvcmVzb3VyY2VzL2RlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vZXh0ZW5zaW9uL2RlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vZXh0ZW5zaW9uL3Jlc291cmNlcy9kZS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9jb21tb24vZGUudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9leHRlbnNpb24vZXhwZWRpdGlvbnMvZGUudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9vZ2FtZS9mYWN0aW9ucy9kZS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9jb21iYXRzL2RlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vZXh0ZW5zaW9uL2RvbmF0ZS9kZS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9kZWJyaXNGaWVsZHMvZGUudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9leHRlbnNpb24vcmVzb3VyY2VCYWxhbmNlL2RlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vZXh0ZW5zaW9uL2VtcGlyZS9kZS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9zd2l0Y2hBY2NvdW50cy9kZS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9hYm91dC9kZS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi91bml2ZXJzZUhpc3RvcnkvZGUudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9leHRlbnNpb24vbm90aWZpY2F0aW9ucy9kZS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi90b29scy9kZS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9leGNlbEV4cG9ydC9kZS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9wbGF5ZXJDbGFzc2VzL2RlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vb2dhbWUvc2hpcHMvZW4udHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9vZ2FtZS9kZWZlbnNlcy9lbi50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL29nYW1lL2J1aWxkaW5ncy9lbi50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL29nYW1lL3Jlc2VhcmNoL2VuLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vb2dhbWUvbGlmZWZvcm1zL2VuLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vb2dhbWUvbGlmZWZvcm1zL2J1aWxkaW5ncy9lbi50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL29nYW1lL2xpZmVmb3Jtcy90ZWNobm9sb2dpZXMvZW4udHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9vZ2FtZS9wcmVtaXVtL2VuLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vZXh0ZW5zaW9uL3NldHRpbmdzL2VuLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vb2dhbWUvcmVzb3VyY2VzL2VuLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vZXh0ZW5zaW9uL2VuLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vZXh0ZW5zaW9uL3Jlc291cmNlcy9lbi50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9jb21tb24vZW4udHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9leHRlbnNpb24vZXhwZWRpdGlvbnMvZW4udHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9vZ2FtZS9mYWN0aW9ucy9lbi50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9jb21iYXRzL2VuLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vZXh0ZW5zaW9uL2RvbmF0ZS9lbi50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9kZWJyaXNGaWVsZHMvZW4udHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9leHRlbnNpb24vcmVzb3VyY2VCYWxhbmNlL2VuLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vZXh0ZW5zaW9uL2VtcGlyZS9lbi50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9zd2l0Y2hBY2NvdW50cy9lbi50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9hYm91dC9lbi50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi91bml2ZXJzZUhpc3RvcnkvZW4udHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9leHRlbnNpb24vbm90aWZpY2F0aW9ucy9lbi50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi90b29scy9lbi50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9leGNlbEV4cG9ydC9lbi50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9wbGF5ZXJDbGFzc2VzL2VuLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vb2dhbWUvc2hpcHMvcHRfcHQudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9vZ2FtZS9kZWZlbnNlcy9wdF9wdC50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL29nYW1lL2J1aWxkaW5ncy9wdF9wdC50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL29nYW1lL3Jlc2VhcmNoL3B0X3B0LnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vb2dhbWUvbGlmZWZvcm1zL3B0X3B0LnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vb2dhbWUvbGlmZWZvcm1zL2J1aWxkaW5ncy9wdF9wdC50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL29nYW1lL2xpZmVmb3Jtcy90ZWNobm9sb2dpZXMvcHRfcHQudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9vZ2FtZS9wcmVtaXVtL3B0X3B0LnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vZXh0ZW5zaW9uL3NldHRpbmdzL3B0X3B0LnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vb2dhbWUvcmVzb3VyY2VzL3B0X3B0LnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vZXh0ZW5zaW9uL3B0X3B0LnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vZXh0ZW5zaW9uL3Jlc291cmNlcy9wdF9wdC50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9jb21tb24vcHRfcHQudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9leHRlbnNpb24vZXhwZWRpdGlvbnMvcHRfcHQudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9vZ2FtZS9mYWN0aW9ucy9wdF9wdC50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9jb21iYXRzL3B0X3B0LnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vZXh0ZW5zaW9uL2RvbmF0ZS9wdF9wdC50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9kZWJyaXNGaWVsZHMvcHRfcHQudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9leHRlbnNpb24vcmVzb3VyY2VCYWxhbmNlL3B0X3B0LnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vZXh0ZW5zaW9uL2VtcGlyZS9wdF9wdC50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9zd2l0Y2hBY2NvdW50cy9wdF9wdC50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9hYm91dC9wdF9wdC50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi91bml2ZXJzZUhpc3RvcnkvcHRfcHQudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9leHRlbnNpb24vbm90aWZpY2F0aW9ucy9wdF9wdC50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi90b29scy9wdF9wdC50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9leGNlbEV4cG9ydC9wdF9wdC50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9wbGF5ZXJDbGFzc2VzL3B0X3B0LnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vb2dhbWUvc2hpcHMvZnIudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9vZ2FtZS9kZWZlbnNlcy9mci50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL29nYW1lL2J1aWxkaW5ncy9mci50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL29nYW1lL3Jlc2VhcmNoL2ZyLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vb2dhbWUvbGlmZWZvcm1zL2ZyLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vb2dhbWUvbGlmZWZvcm1zL2J1aWxkaW5ncy9mci50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL29nYW1lL2xpZmVmb3Jtcy90ZWNobm9sb2dpZXMvZnIudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9vZ2FtZS9wcmVtaXVtL2ZyLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vZXh0ZW5zaW9uL3NldHRpbmdzL2ZyLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vb2dhbWUvcmVzb3VyY2VzL2ZyLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vZXh0ZW5zaW9uL2luZGV4LnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vZXh0ZW5zaW9uL2ZyLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vZXh0ZW5zaW9uL3Jlc291cmNlcy9mci50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9jb21tb24vZnIudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9leHRlbnNpb24vZXhwZWRpdGlvbnMvZnIudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9vZ2FtZS9mYWN0aW9ucy9mci50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9jb21iYXRzL2ZyLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vZXh0ZW5zaW9uL2RvbmF0ZS9mci50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9kZWJyaXNGaWVsZHMvZnIudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9leHRlbnNpb24vcmVzb3VyY2VCYWxhbmNlL2ZyLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vZXh0ZW5zaW9uL2VtcGlyZS9mci50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9zd2l0Y2hBY2NvdW50cy9mci50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9hYm91dC9mci50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi91bml2ZXJzZUhpc3RvcnkvZnIudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvaTE4bi9leHRlbnNpb24vbm90aWZpY2F0aW9ucy9mci50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi90b29scy9mci50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9leGNlbEV4cG9ydC9mci50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2V4dGVuc2lvbi9wbGF5ZXJDbGFzc2VzL2ZyLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL2kxOG4vZXh0ZW5zaW9uLyRpMThuLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9zZXR0aW5ncy9sb2FkU2V0dGluZ3MudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL3NldHRpbmdzL2dldERlZmF1bHRTZXR0aW5ncy50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NoYXJlZC9pMThuL2dldExhbmd1YWdlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9oaWdoc2NvcmUudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zaGFyZWQvbW9kZWxzL29nYW1lL2NvbW1vbi9QbGFuZXRUeXBlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2hhcmVkL3V0aWxzL3BhcnNlQ29vcmRpbmF0ZXMudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYWRkRGF5cy9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NlcnZpY2Utd29ya2VyL3VuaXZlcnNlLWhpc3RvcnkvVW5pdmVyc2VIaXN0b3J5TW9kdWxlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3N0YXJ0T2ZEYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zZXJ2aWNlLXdvcmtlci9tYWluLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2VydmljZS13b3JrZXIvc2V0dGluZ3MvU2V0dGluZ3NTZXJ2aWNlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2VydmljZS13b3JrZXIvZXhwZWRpdGlvbnMvRXhwZWRpdGlvblNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zZXJ2aWNlLXdvcmtlci9saWZlZm9ybS1kaXNjb3Zlcmllcy9MaWZlZm9ybURpc2NvdmVyeVNlcnZpY2UudHMiLCJ3ZWJwYWNrOi8vb2dhbWUtdHJhY2tlci8uL3NyYy9zZXJ2aWNlLXdvcmtlci9jb21iYXQtcmVwb3J0cy9Db21iYXRSZXBvcnRTZXJ2aWNlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2VydmljZS13b3JrZXIvZGVicmlzLWZpZWxkcy1yZXBvcnRzL0RlYnJpc0ZpZWxkUmVwb3J0U2VydmljZS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NlcnZpY2Utd29ya2VyL2VtcGlyZS9FbXBpcmVTZXJ2aWNlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2VydmljZS13b3JrZXIvdW5pdmVyc2UtaGlzdG9yeS9Vbml2ZXJzZUhpc3RvcnlTZXJ2aWNlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2VydmljZS13b3JrZXIvc2VydmVyLXNldHRpbmdzL1NlcnZlclNldHRpbmdzU2VydmljZS50cyIsIndlYnBhY2s6Ly9vZ2FtZS10cmFja2VyLy4vc3JjL3NlcnZpY2Utd29ya2VyL3VuaXZlcnNlcy1hbmQtYWNjb3VudHMvVW5pdmVyc2VzQW5kQWNjb3VudHNTZXJ2aWNlLnRzIiwid2VicGFjazovL29nYW1lLXRyYWNrZXIvLi9zcmMvc2VydmljZS13b3JrZXIvSW50ZXJuYWxTZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdmFsaWRhdG9yID0gcmVxdWlyZSgnLi92YWxpZGF0b3InKTtcbmNvbnN0IFhNTFBhcnNlciA9IHJlcXVpcmUoJy4veG1scGFyc2VyL1hNTFBhcnNlcicpO1xuY29uc3QgWE1MQnVpbGRlciA9IHJlcXVpcmUoJy4veG1sYnVpbGRlci9qc29uMnhtbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgWE1MUGFyc2VyOiBYTUxQYXJzZXIsXG4gIFhNTFZhbGlkYXRvcjogdmFsaWRhdG9yLFxuICBYTUxCdWlsZGVyOiBYTUxCdWlsZGVyXG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBuYW1lU3RhcnRDaGFyID0gJzpBLVphLXpfXFxcXHUwMEMwLVxcXFx1MDBENlxcXFx1MDBEOC1cXFxcdTAwRjZcXFxcdTAwRjgtXFxcXHUwMkZGXFxcXHUwMzcwLVxcXFx1MDM3RFxcXFx1MDM3Ri1cXFxcdTFGRkZcXFxcdTIwMEMtXFxcXHUyMDBEXFxcXHUyMDcwLVxcXFx1MjE4RlxcXFx1MkMwMC1cXFxcdTJGRUZcXFxcdTMwMDEtXFxcXHVEN0ZGXFxcXHVGOTAwLVxcXFx1RkRDRlxcXFx1RkRGMC1cXFxcdUZGRkQnO1xuY29uc3QgbmFtZUNoYXIgPSBuYW1lU3RhcnRDaGFyICsgJ1xcXFwtLlxcXFxkXFxcXHUwMEI3XFxcXHUwMzAwLVxcXFx1MDM2RlxcXFx1MjAzRi1cXFxcdTIwNDAnO1xuY29uc3QgbmFtZVJlZ2V4cCA9ICdbJyArIG5hbWVTdGFydENoYXIgKyAnXVsnICsgbmFtZUNoYXIgKyAnXSonXG5jb25zdCByZWdleE5hbWUgPSBuZXcgUmVnRXhwKCdeJyArIG5hbWVSZWdleHAgKyAnJCcpO1xuXG5jb25zdCBnZXRBbGxNYXRjaGVzID0gZnVuY3Rpb24oc3RyaW5nLCByZWdleCkge1xuICBjb25zdCBtYXRjaGVzID0gW107XG4gIGxldCBtYXRjaCA9IHJlZ2V4LmV4ZWMoc3RyaW5nKTtcbiAgd2hpbGUgKG1hdGNoKSB7XG4gICAgY29uc3QgYWxsbWF0Y2hlcyA9IFtdO1xuICAgIGFsbG1hdGNoZXMuc3RhcnRJbmRleCA9IHJlZ2V4Lmxhc3RJbmRleCAtIG1hdGNoWzBdLmxlbmd0aDtcbiAgICBjb25zdCBsZW4gPSBtYXRjaC5sZW5ndGg7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGxlbjsgaW5kZXgrKykge1xuICAgICAgYWxsbWF0Y2hlcy5wdXNoKG1hdGNoW2luZGV4XSk7XG4gICAgfVxuICAgIG1hdGNoZXMucHVzaChhbGxtYXRjaGVzKTtcbiAgICBtYXRjaCA9IHJlZ2V4LmV4ZWMoc3RyaW5nKTtcbiAgfVxuICByZXR1cm4gbWF0Y2hlcztcbn07XG5cbmNvbnN0IGlzTmFtZSA9IGZ1bmN0aW9uKHN0cmluZykge1xuICBjb25zdCBtYXRjaCA9IHJlZ2V4TmFtZS5leGVjKHN0cmluZyk7XG4gIHJldHVybiAhKG1hdGNoID09PSBudWxsIHx8IHR5cGVvZiBtYXRjaCA9PT0gJ3VuZGVmaW5lZCcpO1xufTtcblxuZXhwb3J0cy5pc0V4aXN0ID0gZnVuY3Rpb24odikge1xuICByZXR1cm4gdHlwZW9mIHYgIT09ICd1bmRlZmluZWQnO1xufTtcblxuZXhwb3J0cy5pc0VtcHR5T2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn07XG5cbi8qKlxuICogQ29weSBhbGwgdGhlIHByb3BlcnRpZXMgb2YgYSBpbnRvIGIuXG4gKiBAcGFyYW0geyp9IHRhcmdldFxuICogQHBhcmFtIHsqfSBhXG4gKi9cbmV4cG9ydHMubWVyZ2UgPSBmdW5jdGlvbih0YXJnZXQsIGEsIGFycmF5TW9kZSkge1xuICBpZiAoYSkge1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhhKTsgLy8gd2lsbCByZXR1cm4gYW4gYXJyYXkgb2Ygb3duIHByb3BlcnRpZXNcbiAgICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDsgLy9kb24ndCBtYWtlIGl0IGlubGluZVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChhcnJheU1vZGUgPT09ICdzdHJpY3QnKSB7XG4gICAgICAgIHRhcmdldFtrZXlzW2ldXSA9IFsgYVtrZXlzW2ldXSBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W2tleXNbaV1dID0gYVtrZXlzW2ldXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG4vKiBleHBvcnRzLm1lcmdlID1mdW5jdGlvbiAoYixhKXtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYixhKTtcbn0gKi9cblxuZXhwb3J0cy5nZXRWYWx1ZSA9IGZ1bmN0aW9uKHYpIHtcbiAgaWYgKGV4cG9ydHMuaXNFeGlzdCh2KSkge1xuICAgIHJldHVybiB2O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAnJztcbiAgfVxufTtcblxuLy8gY29uc3QgZmFrZUNhbGwgPSBmdW5jdGlvbihhKSB7cmV0dXJuIGE7fTtcbi8vIGNvbnN0IGZha2VDYWxsTm9SZXR1cm4gPSBmdW5jdGlvbigpIHt9O1xuXG5leHBvcnRzLmlzTmFtZSA9IGlzTmFtZTtcbmV4cG9ydHMuZ2V0QWxsTWF0Y2hlcyA9IGdldEFsbE1hdGNoZXM7XG5leHBvcnRzLm5hbWVSZWdleHAgPSBuYW1lUmVnZXhwO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICBhbGxvd0Jvb2xlYW5BdHRyaWJ1dGVzOiBmYWxzZSwgLy9BIHRhZyBjYW4gaGF2ZSBhdHRyaWJ1dGVzIHdpdGhvdXQgYW55IHZhbHVlXG4gIHVucGFpcmVkVGFnczogW11cbn07XG5cbi8vY29uc3QgdGFnc1BhdHRlcm4gPSBuZXcgUmVnRXhwKFwiPFxcXFwvPyhbXFxcXHc6XFxcXC1fXFwuXSspXFxcXHMqXFwvPz5cIixcImdcIik7XG5leHBvcnRzLnZhbGlkYXRlID0gZnVuY3Rpb24gKHhtbERhdGEsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcblxuICAvL3htbERhdGEgPSB4bWxEYXRhLnJlcGxhY2UoLyhcXHJcXG58XFxufFxccikvZ20sXCJcIik7Ly9tYWtlIGl0IHNpbmdsZSBsaW5lXG4gIC8veG1sRGF0YSA9IHhtbERhdGEucmVwbGFjZSgvKF5cXHMqPFxcP3htbC4qP1xcPz4pL2csXCJcIik7Ly9SZW1vdmUgWE1MIHN0YXJ0aW5nIHRhZ1xuICAvL3htbERhdGEgPSB4bWxEYXRhLnJlcGxhY2UoLyg8IURPQ1RZUEVbXFxzXFx3XFxcIlxcLlxcL1xcLVxcOl0rKFxcWy4qXFxdKSpcXHMqPikvZyxcIlwiKTsvL1JlbW92ZSBET0NUWVBFXG4gIGNvbnN0IHRhZ3MgPSBbXTtcbiAgbGV0IHRhZ0ZvdW5kID0gZmFsc2U7XG5cbiAgLy9pbmRpY2F0ZXMgdGhhdCB0aGUgcm9vdCB0YWcgaGFzIGJlZW4gY2xvc2VkIChha2EuIGRlcHRoIDAgaGFzIGJlZW4gcmVhY2hlZClcbiAgbGV0IHJlYWNoZWRSb290ID0gZmFsc2U7XG5cbiAgaWYgKHhtbERhdGFbMF0gPT09ICdcXHVmZWZmJykge1xuICAgIC8vIGNoZWNrIGZvciBieXRlIG9yZGVyIG1hcmsgKEJPTSlcbiAgICB4bWxEYXRhID0geG1sRGF0YS5zdWJzdHIoMSk7XG4gIH1cbiAgXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgeG1sRGF0YS5sZW5ndGg7IGkrKykge1xuXG4gICAgaWYgKHhtbERhdGFbaV0gPT09ICc8JyAmJiB4bWxEYXRhW2krMV0gPT09ICc/Jykge1xuICAgICAgaSs9MjtcbiAgICAgIGkgPSByZWFkUEkoeG1sRGF0YSxpKTtcbiAgICAgIGlmIChpLmVycikgcmV0dXJuIGk7XG4gICAgfWVsc2UgaWYgKHhtbERhdGFbaV0gPT09ICc8Jykge1xuICAgICAgLy9zdGFydGluZyBvZiB0YWdcbiAgICAgIC8vcmVhZCB1bnRpbCB5b3UgcmVhY2ggdG8gJz4nIGF2b2lkaW5nIGFueSAnPicgaW4gYXR0cmlidXRlIHZhbHVlXG4gICAgICBsZXQgdGFnU3RhcnRQb3MgPSBpO1xuICAgICAgaSsrO1xuICAgICAgXG4gICAgICBpZiAoeG1sRGF0YVtpXSA9PT0gJyEnKSB7XG4gICAgICAgIGkgPSByZWFkQ29tbWVudEFuZENEQVRBKHhtbERhdGEsIGkpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBjbG9zaW5nVGFnID0gZmFsc2U7XG4gICAgICAgIGlmICh4bWxEYXRhW2ldID09PSAnLycpIHtcbiAgICAgICAgICAvL2Nsb3NpbmcgdGFnXG4gICAgICAgICAgY2xvc2luZ1RhZyA9IHRydWU7XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIC8vcmVhZCB0YWduYW1lXG4gICAgICAgIGxldCB0YWdOYW1lID0gJyc7XG4gICAgICAgIGZvciAoOyBpIDwgeG1sRGF0YS5sZW5ndGggJiZcbiAgICAgICAgICB4bWxEYXRhW2ldICE9PSAnPicgJiZcbiAgICAgICAgICB4bWxEYXRhW2ldICE9PSAnICcgJiZcbiAgICAgICAgICB4bWxEYXRhW2ldICE9PSAnXFx0JyAmJlxuICAgICAgICAgIHhtbERhdGFbaV0gIT09ICdcXG4nICYmXG4gICAgICAgICAgeG1sRGF0YVtpXSAhPT0gJ1xccic7IGkrK1xuICAgICAgICApIHtcbiAgICAgICAgICB0YWdOYW1lICs9IHhtbERhdGFbaV07XG4gICAgICAgIH1cbiAgICAgICAgdGFnTmFtZSA9IHRhZ05hbWUudHJpbSgpO1xuICAgICAgICAvL2NvbnNvbGUubG9nKHRhZ05hbWUpO1xuXG4gICAgICAgIGlmICh0YWdOYW1lW3RhZ05hbWUubGVuZ3RoIC0gMV0gPT09ICcvJykge1xuICAgICAgICAgIC8vc2VsZiBjbG9zaW5nIHRhZyB3aXRob3V0IGF0dHJpYnV0ZXNcbiAgICAgICAgICB0YWdOYW1lID0gdGFnTmFtZS5zdWJzdHJpbmcoMCwgdGFnTmFtZS5sZW5ndGggLSAxKTtcbiAgICAgICAgICAvL2NvbnRpbnVlO1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXZhbGlkYXRlVGFnTmFtZSh0YWdOYW1lKSkge1xuICAgICAgICAgIGxldCBtc2c7XG4gICAgICAgICAgaWYgKHRhZ05hbWUudHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgbXNnID0gXCJJbnZhbGlkIHNwYWNlIGFmdGVyICc8Jy5cIjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbXNnID0gXCJUYWcgJ1wiK3RhZ05hbWUrXCInIGlzIGFuIGludmFsaWQgbmFtZS5cIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkVGFnJywgbXNnLCBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgaSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVhZEF0dHJpYnV0ZVN0cih4bWxEYXRhLCBpKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRBdHRyJywgXCJBdHRyaWJ1dGVzIGZvciAnXCIrdGFnTmFtZStcIicgaGF2ZSBvcGVuIHF1b3RlLlwiLCBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgaSkpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBhdHRyU3RyID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpID0gcmVzdWx0LmluZGV4O1xuXG4gICAgICAgIGlmIChhdHRyU3RyW2F0dHJTdHIubGVuZ3RoIC0gMV0gPT09ICcvJykge1xuICAgICAgICAgIC8vc2VsZiBjbG9zaW5nIHRhZ1xuICAgICAgICAgIGNvbnN0IGF0dHJTdHJTdGFydCA9IGkgLSBhdHRyU3RyLmxlbmd0aDtcbiAgICAgICAgICBhdHRyU3RyID0gYXR0clN0ci5zdWJzdHJpbmcoMCwgYXR0clN0ci5sZW5ndGggLSAxKTtcbiAgICAgICAgICBjb25zdCBpc1ZhbGlkID0gdmFsaWRhdGVBdHRyaWJ1dGVTdHJpbmcoYXR0clN0ciwgb3B0aW9ucyk7XG4gICAgICAgICAgaWYgKGlzVmFsaWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHRhZ0ZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vY29udGludWU7IC8vdGV4dCBtYXkgcHJlc2VudHMgYWZ0ZXIgc2VsZiBjbG9zaW5nIHRhZ1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL3RoZSByZXN1bHQgZnJvbSB0aGUgbmVzdGVkIGZ1bmN0aW9uIHJldHVybnMgdGhlIHBvc2l0aW9uIG9mIHRoZSBlcnJvciB3aXRoaW4gdGhlIGF0dHJpYnV0ZVxuICAgICAgICAgICAgLy9pbiBvcmRlciB0byBnZXQgdGhlICd0cnVlJyBlcnJvciBsaW5lLCB3ZSBuZWVkIHRvIGNhbGN1bGF0ZSB0aGUgcG9zaXRpb24gd2hlcmUgdGhlIGF0dHJpYnV0ZSBiZWdpbnMgKGkgLSBhdHRyU3RyLmxlbmd0aCkgYW5kIHRoZW4gYWRkIHRoZSBwb3NpdGlvbiB3aXRoaW4gdGhlIGF0dHJpYnV0ZVxuICAgICAgICAgICAgLy90aGlzIGdpdmVzIHVzIHRoZSBhYnNvbHV0ZSBpbmRleCBpbiB0aGUgZW50aXJlIHhtbCwgd2hpY2ggd2UgY2FuIHVzZSB0byBmaW5kIHRoZSBsaW5lIGF0IGxhc3RcbiAgICAgICAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdChpc1ZhbGlkLmVyci5jb2RlLCBpc1ZhbGlkLmVyci5tc2csIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBhdHRyU3RyU3RhcnQgKyBpc1ZhbGlkLmVyci5saW5lKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGNsb3NpbmdUYWcpIHtcbiAgICAgICAgICBpZiAoIXJlc3VsdC50YWdDbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZFRhZycsIFwiQ2xvc2luZyB0YWcgJ1wiK3RhZ05hbWUrXCInIGRvZXNuJ3QgaGF2ZSBwcm9wZXIgY2xvc2luZy5cIiwgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIGkpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGF0dHJTdHIudHJpbSgpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZFRhZycsIFwiQ2xvc2luZyB0YWcgJ1wiK3RhZ05hbWUrXCInIGNhbid0IGhhdmUgYXR0cmlidXRlcyBvciBpbnZhbGlkIHN0YXJ0aW5nLlwiLCBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgdGFnU3RhcnRQb3MpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgb3RnID0gdGFncy5wb3AoKTtcbiAgICAgICAgICAgIGlmICh0YWdOYW1lICE9PSBvdGcudGFnTmFtZSkge1xuICAgICAgICAgICAgICBsZXQgb3BlblBvcyA9IGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBvdGcudGFnU3RhcnRQb3MpO1xuICAgICAgICAgICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRUYWcnLFxuICAgICAgICAgICAgICAgIFwiRXhwZWN0ZWQgY2xvc2luZyB0YWcgJ1wiK290Zy50YWdOYW1lK1wiJyAob3BlbmVkIGluIGxpbmUgXCIrb3BlblBvcy5saW5lK1wiLCBjb2wgXCIrb3BlblBvcy5jb2wrXCIpIGluc3RlYWQgb2YgY2xvc2luZyB0YWcgJ1wiK3RhZ05hbWUrXCInLlwiLFxuICAgICAgICAgICAgICAgIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCB0YWdTdGFydFBvcykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL3doZW4gdGhlcmUgYXJlIG5vIG1vcmUgdGFncywgd2UgcmVhY2hlZCB0aGUgcm9vdCBsZXZlbC5cbiAgICAgICAgICAgIGlmICh0YWdzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgIHJlYWNoZWRSb290ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgaXNWYWxpZCA9IHZhbGlkYXRlQXR0cmlidXRlU3RyaW5nKGF0dHJTdHIsIG9wdGlvbnMpO1xuICAgICAgICAgIGlmIChpc1ZhbGlkICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAvL3RoZSByZXN1bHQgZnJvbSB0aGUgbmVzdGVkIGZ1bmN0aW9uIHJldHVybnMgdGhlIHBvc2l0aW9uIG9mIHRoZSBlcnJvciB3aXRoaW4gdGhlIGF0dHJpYnV0ZVxuICAgICAgICAgICAgLy9pbiBvcmRlciB0byBnZXQgdGhlICd0cnVlJyBlcnJvciBsaW5lLCB3ZSBuZWVkIHRvIGNhbGN1bGF0ZSB0aGUgcG9zaXRpb24gd2hlcmUgdGhlIGF0dHJpYnV0ZSBiZWdpbnMgKGkgLSBhdHRyU3RyLmxlbmd0aCkgYW5kIHRoZW4gYWRkIHRoZSBwb3NpdGlvbiB3aXRoaW4gdGhlIGF0dHJpYnV0ZVxuICAgICAgICAgICAgLy90aGlzIGdpdmVzIHVzIHRoZSBhYnNvbHV0ZSBpbmRleCBpbiB0aGUgZW50aXJlIHhtbCwgd2hpY2ggd2UgY2FuIHVzZSB0byBmaW5kIHRoZSBsaW5lIGF0IGxhc3RcbiAgICAgICAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdChpc1ZhbGlkLmVyci5jb2RlLCBpc1ZhbGlkLmVyci5tc2csIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBpIC0gYXR0clN0ci5sZW5ndGggKyBpc1ZhbGlkLmVyci5saW5lKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy9pZiB0aGUgcm9vdCBsZXZlbCBoYXMgYmVlbiByZWFjaGVkIGJlZm9yZSAuLi5cbiAgICAgICAgICBpZiAocmVhY2hlZFJvb3QgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZFhtbCcsICdNdWx0aXBsZSBwb3NzaWJsZSByb290IG5vZGVzIGZvdW5kLicsIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBpKSk7XG4gICAgICAgICAgfSBlbHNlIGlmKG9wdGlvbnMudW5wYWlyZWRUYWdzLmluZGV4T2YodGFnTmFtZSkgIT09IC0xKXtcbiAgICAgICAgICAgIC8vZG9uJ3QgcHVzaCBpbnRvIHN0YWNrXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhZ3MucHVzaCh7dGFnTmFtZSwgdGFnU3RhcnRQb3N9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGFnRm91bmQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9za2lwIHRhZyB0ZXh0IHZhbHVlXG4gICAgICAgIC8vSXQgbWF5IGluY2x1ZGUgY29tbWVudHMgYW5kIENEQVRBIHZhbHVlXG4gICAgICAgIGZvciAoaSsrOyBpIDwgeG1sRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICh4bWxEYXRhW2ldID09PSAnPCcpIHtcbiAgICAgICAgICAgIGlmICh4bWxEYXRhW2kgKyAxXSA9PT0gJyEnKSB7XG4gICAgICAgICAgICAgIC8vY29tbWVudCBvciBDQURBVEFcbiAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICBpID0gcmVhZENvbW1lbnRBbmRDREFUQSh4bWxEYXRhLCBpKTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHhtbERhdGFbaSsxXSA9PT0gJz8nKSB7XG4gICAgICAgICAgICAgIGkgPSByZWFkUEkoeG1sRGF0YSwgKytpKTtcbiAgICAgICAgICAgICAgaWYgKGkuZXJyKSByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZXtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICh4bWxEYXRhW2ldID09PSAnJicpIHtcbiAgICAgICAgICAgIGNvbnN0IGFmdGVyQW1wID0gdmFsaWRhdGVBbXBlcnNhbmQoeG1sRGF0YSwgaSk7XG4gICAgICAgICAgICBpZiAoYWZ0ZXJBbXAgPT0gLTEpXG4gICAgICAgICAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZENoYXInLCBcImNoYXIgJyYnIGlzIG5vdCBleHBlY3RlZC5cIiwgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIGkpKTtcbiAgICAgICAgICAgIGkgPSBhZnRlckFtcDtcbiAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGlmIChyZWFjaGVkUm9vdCA9PT0gdHJ1ZSAmJiAhaXNXaGl0ZVNwYWNlKHhtbERhdGFbaV0pKSB7XG4gICAgICAgICAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZFhtbCcsIFwiRXh0cmEgdGV4dCBhdCB0aGUgZW5kXCIsIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vZW5kIG9mIHJlYWRpbmcgdGFnIHRleHQgdmFsdWVcbiAgICAgICAgaWYgKHhtbERhdGFbaV0gPT09ICc8Jykge1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIGlzV2hpdGVTcGFjZSh4bWxEYXRhW2ldKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZENoYXInLCBcImNoYXIgJ1wiK3htbERhdGFbaV0rXCInIGlzIG5vdCBleHBlY3RlZC5cIiwgZ2V0TGluZU51bWJlckZvclBvc2l0aW9uKHhtbERhdGEsIGkpKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIXRhZ0ZvdW5kKSB7XG4gICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkWG1sJywgJ1N0YXJ0IHRhZyBleHBlY3RlZC4nLCAxKTtcbiAgfWVsc2UgaWYgKHRhZ3MubGVuZ3RoID09IDEpIHtcbiAgICAgIHJldHVybiBnZXRFcnJvck9iamVjdCgnSW52YWxpZFRhZycsIFwiVW5jbG9zZWQgdGFnICdcIit0YWdzWzBdLnRhZ05hbWUrXCInLlwiLCBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgdGFnc1swXS50YWdTdGFydFBvcykpO1xuICB9ZWxzZSBpZiAodGFncy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRYbWwnLCBcIkludmFsaWQgJ1wiK1xuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHRhZ3MubWFwKHQgPT4gdC50YWdOYW1lKSwgbnVsbCwgNCkucmVwbGFjZSgvXFxyP1xcbi9nLCAnJykrXG4gICAgICAgICAgXCInIGZvdW5kLlwiLCB7bGluZTogMSwgY29sOiAxfSk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIGlzV2hpdGVTcGFjZShjaGFyKXtcbiAgcmV0dXJuIGNoYXIgPT09ICcgJyB8fCBjaGFyID09PSAnXFx0JyB8fCBjaGFyID09PSAnXFxuJyAgfHwgY2hhciA9PT0gJ1xccic7XG59XG4vKipcbiAqIFJlYWQgUHJvY2Vzc2luZyBpbnNzdHJ1Y3Rpb25zIGFuZCBza2lwXG4gKiBAcGFyYW0geyp9IHhtbERhdGFcbiAqIEBwYXJhbSB7Kn0gaVxuICovXG5mdW5jdGlvbiByZWFkUEkoeG1sRGF0YSwgaSkge1xuICBjb25zdCBzdGFydCA9IGk7XG4gIGZvciAoOyBpIDwgeG1sRGF0YS5sZW5ndGg7IGkrKykge1xuICAgIGlmICh4bWxEYXRhW2ldID09ICc/JyB8fCB4bWxEYXRhW2ldID09ICcgJykge1xuICAgICAgLy90YWduYW1lXG4gICAgICBjb25zdCB0YWduYW1lID0geG1sRGF0YS5zdWJzdHIoc3RhcnQsIGkgLSBzdGFydCk7XG4gICAgICBpZiAoaSA+IDUgJiYgdGFnbmFtZSA9PT0gJ3htbCcpIHtcbiAgICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkWG1sJywgJ1hNTCBkZWNsYXJhdGlvbiBhbGxvd2VkIG9ubHkgYXQgdGhlIHN0YXJ0IG9mIHRoZSBkb2N1bWVudC4nLCBnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24oeG1sRGF0YSwgaSkpO1xuICAgICAgfSBlbHNlIGlmICh4bWxEYXRhW2ldID09ICc/JyAmJiB4bWxEYXRhW2kgKyAxXSA9PSAnPicpIHtcbiAgICAgICAgLy9jaGVjayBpZiB2YWxpZCBhdHRyaWJ1dCBzdHJpbmdcbiAgICAgICAgaSsrO1xuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gaTtcbn1cblxuZnVuY3Rpb24gcmVhZENvbW1lbnRBbmRDREFUQSh4bWxEYXRhLCBpKSB7XG4gIGlmICh4bWxEYXRhLmxlbmd0aCA+IGkgKyA1ICYmIHhtbERhdGFbaSArIDFdID09PSAnLScgJiYgeG1sRGF0YVtpICsgMl0gPT09ICctJykge1xuICAgIC8vY29tbWVudFxuICAgIGZvciAoaSArPSAzOyBpIDwgeG1sRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHhtbERhdGFbaV0gPT09ICctJyAmJiB4bWxEYXRhW2kgKyAxXSA9PT0gJy0nICYmIHhtbERhdGFbaSArIDJdID09PSAnPicpIHtcbiAgICAgICAgaSArPSAyO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoXG4gICAgeG1sRGF0YS5sZW5ndGggPiBpICsgOCAmJlxuICAgIHhtbERhdGFbaSArIDFdID09PSAnRCcgJiZcbiAgICB4bWxEYXRhW2kgKyAyXSA9PT0gJ08nICYmXG4gICAgeG1sRGF0YVtpICsgM10gPT09ICdDJyAmJlxuICAgIHhtbERhdGFbaSArIDRdID09PSAnVCcgJiZcbiAgICB4bWxEYXRhW2kgKyA1XSA9PT0gJ1knICYmXG4gICAgeG1sRGF0YVtpICsgNl0gPT09ICdQJyAmJlxuICAgIHhtbERhdGFbaSArIDddID09PSAnRSdcbiAgKSB7XG4gICAgbGV0IGFuZ2xlQnJhY2tldHNDb3VudCA9IDE7XG4gICAgZm9yIChpICs9IDg7IGkgPCB4bWxEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoeG1sRGF0YVtpXSA9PT0gJzwnKSB7XG4gICAgICAgIGFuZ2xlQnJhY2tldHNDb3VudCsrO1xuICAgICAgfSBlbHNlIGlmICh4bWxEYXRhW2ldID09PSAnPicpIHtcbiAgICAgICAgYW5nbGVCcmFja2V0c0NvdW50LS07XG4gICAgICAgIGlmIChhbmdsZUJyYWNrZXRzQ291bnQgPT09IDApIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChcbiAgICB4bWxEYXRhLmxlbmd0aCA+IGkgKyA5ICYmXG4gICAgeG1sRGF0YVtpICsgMV0gPT09ICdbJyAmJlxuICAgIHhtbERhdGFbaSArIDJdID09PSAnQycgJiZcbiAgICB4bWxEYXRhW2kgKyAzXSA9PT0gJ0QnICYmXG4gICAgeG1sRGF0YVtpICsgNF0gPT09ICdBJyAmJlxuICAgIHhtbERhdGFbaSArIDVdID09PSAnVCcgJiZcbiAgICB4bWxEYXRhW2kgKyA2XSA9PT0gJ0EnICYmXG4gICAgeG1sRGF0YVtpICsgN10gPT09ICdbJ1xuICApIHtcbiAgICBmb3IgKGkgKz0gODsgaSA8IHhtbERhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh4bWxEYXRhW2ldID09PSAnXScgJiYgeG1sRGF0YVtpICsgMV0gPT09ICddJyAmJiB4bWxEYXRhW2kgKyAyXSA9PT0gJz4nKSB7XG4gICAgICAgIGkgKz0gMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGk7XG59XG5cbmNvbnN0IGRvdWJsZVF1b3RlID0gJ1wiJztcbmNvbnN0IHNpbmdsZVF1b3RlID0gXCInXCI7XG5cbi8qKlxuICogS2VlcCByZWFkaW5nIHhtbERhdGEgdW50aWwgJzwnIGlzIGZvdW5kIG91dHNpZGUgdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB4bWxEYXRhXG4gKiBAcGFyYW0ge251bWJlcn0gaVxuICovXG5mdW5jdGlvbiByZWFkQXR0cmlidXRlU3RyKHhtbERhdGEsIGkpIHtcbiAgbGV0IGF0dHJTdHIgPSAnJztcbiAgbGV0IHN0YXJ0Q2hhciA9ICcnO1xuICBsZXQgdGFnQ2xvc2VkID0gZmFsc2U7XG4gIGZvciAoOyBpIDwgeG1sRGF0YS5sZW5ndGg7IGkrKykge1xuICAgIGlmICh4bWxEYXRhW2ldID09PSBkb3VibGVRdW90ZSB8fCB4bWxEYXRhW2ldID09PSBzaW5nbGVRdW90ZSkge1xuICAgICAgaWYgKHN0YXJ0Q2hhciA9PT0gJycpIHtcbiAgICAgICAgc3RhcnRDaGFyID0geG1sRGF0YVtpXTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhcnRDaGFyICE9PSB4bWxEYXRhW2ldKSB7XG4gICAgICAgIC8vaWYgdmF1ZSBpcyBlbmNsb3NlZCB3aXRoIGRvdWJsZSBxdW90ZSB0aGVuIHNpbmdsZSBxdW90ZXMgYXJlIGFsbG93ZWQgaW5zaWRlIHRoZSB2YWx1ZSBhbmQgdmljZSB2ZXJzYVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhcnRDaGFyID0gJyc7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh4bWxEYXRhW2ldID09PSAnPicpIHtcbiAgICAgIGlmIChzdGFydENoYXIgPT09ICcnKSB7XG4gICAgICAgIHRhZ0Nsb3NlZCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBhdHRyU3RyICs9IHhtbERhdGFbaV07XG4gIH1cbiAgaWYgKHN0YXJ0Q2hhciAhPT0gJycpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHZhbHVlOiBhdHRyU3RyLFxuICAgIGluZGV4OiBpLFxuICAgIHRhZ0Nsb3NlZDogdGFnQ2xvc2VkXG4gIH07XG59XG5cbi8qKlxuICogU2VsZWN0IGFsbCB0aGUgYXR0cmlidXRlcyB3aGV0aGVyIHZhbGlkIG9yIGludmFsaWQuXG4gKi9cbmNvbnN0IHZhbGlkQXR0clN0clJlZ3hwID0gbmV3IFJlZ0V4cCgnKFxcXFxzKikoW15cXFxccz1dKykoXFxcXHMqPSk/KFxcXFxzKihbXFwnXCJdKSgoW1xcXFxzXFxcXFNdKSo/KVxcXFw1KT8nLCAnZycpO1xuXG4vL2F0dHIsID1cInNkXCIsIGE9XCJhbWl0J3NcIiwgYT1cInNkXCJiPVwic2FmXCIsIGFiICBjZD1cIlwiXG5cbmZ1bmN0aW9uIHZhbGlkYXRlQXR0cmlidXRlU3RyaW5nKGF0dHJTdHIsIG9wdGlvbnMpIHtcbiAgLy9jb25zb2xlLmxvZyhcInN0YXJ0OlwiK2F0dHJTdHIrXCI6ZW5kXCIpO1xuXG4gIC8vaWYoYXR0clN0ci50cmltKCkubGVuZ3RoID09PSAwKSByZXR1cm4gdHJ1ZTsgLy9lbXB0eSBzdHJpbmdcblxuICBjb25zdCBtYXRjaGVzID0gdXRpbC5nZXRBbGxNYXRjaGVzKGF0dHJTdHIsIHZhbGlkQXR0clN0clJlZ3hwKTtcbiAgY29uc3QgYXR0ck5hbWVzID0ge307XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXRjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKG1hdGNoZXNbaV1bMV0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAvL25vc3BhY2UgYmVmb3JlIGF0dHJpYnV0ZSBuYW1lOiBhPVwic2RcImI9XCJzYWZcIlxuICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkQXR0cicsIFwiQXR0cmlidXRlICdcIittYXRjaGVzW2ldWzJdK1wiJyBoYXMgbm8gc3BhY2UgaW4gc3RhcnRpbmcuXCIsIGdldFBvc2l0aW9uRnJvbU1hdGNoKG1hdGNoZXNbaV0pKVxuICAgIH0gZWxzZSBpZiAobWF0Y2hlc1tpXVszXSAhPT0gdW5kZWZpbmVkICYmIG1hdGNoZXNbaV1bNF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkQXR0cicsIFwiQXR0cmlidXRlICdcIittYXRjaGVzW2ldWzJdK1wiJyBpcyB3aXRob3V0IHZhbHVlLlwiLCBnZXRQb3NpdGlvbkZyb21NYXRjaChtYXRjaGVzW2ldKSk7XG4gICAgfSBlbHNlIGlmIChtYXRjaGVzW2ldWzNdID09PSB1bmRlZmluZWQgJiYgIW9wdGlvbnMuYWxsb3dCb29sZWFuQXR0cmlidXRlcykge1xuICAgICAgLy9pbmRlcGVuZGVudCBhdHRyaWJ1dGU6IGFiXG4gICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRBdHRyJywgXCJib29sZWFuIGF0dHJpYnV0ZSAnXCIrbWF0Y2hlc1tpXVsyXStcIicgaXMgbm90IGFsbG93ZWQuXCIsIGdldFBvc2l0aW9uRnJvbU1hdGNoKG1hdGNoZXNbaV0pKTtcbiAgICB9XG4gICAgLyogZWxzZSBpZihtYXRjaGVzW2ldWzZdID09PSB1bmRlZmluZWQpey8vYXR0cmlidXRlIHdpdGhvdXQgdmFsdWU6IGFiPVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBlcnI6IHsgY29kZTpcIkludmFsaWRBdHRyXCIsbXNnOlwiYXR0cmlidXRlIFwiICsgbWF0Y2hlc1tpXVsyXSArIFwiIGhhcyBubyB2YWx1ZSBhc3NpZ25lZC5cIn19O1xuICAgICAgICAgICAgICAgIH0gKi9cbiAgICBjb25zdCBhdHRyTmFtZSA9IG1hdGNoZXNbaV1bMl07XG4gICAgaWYgKCF2YWxpZGF0ZUF0dHJOYW1lKGF0dHJOYW1lKSkge1xuICAgICAgcmV0dXJuIGdldEVycm9yT2JqZWN0KCdJbnZhbGlkQXR0cicsIFwiQXR0cmlidXRlICdcIithdHRyTmFtZStcIicgaXMgYW4gaW52YWxpZCBuYW1lLlwiLCBnZXRQb3NpdGlvbkZyb21NYXRjaChtYXRjaGVzW2ldKSk7XG4gICAgfVxuICAgIGlmICghYXR0ck5hbWVzLmhhc093blByb3BlcnR5KGF0dHJOYW1lKSkge1xuICAgICAgLy9jaGVjayBmb3IgZHVwbGljYXRlIGF0dHJpYnV0ZS5cbiAgICAgIGF0dHJOYW1lc1thdHRyTmFtZV0gPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZ2V0RXJyb3JPYmplY3QoJ0ludmFsaWRBdHRyJywgXCJBdHRyaWJ1dGUgJ1wiK2F0dHJOYW1lK1wiJyBpcyByZXBlYXRlZC5cIiwgZ2V0UG9zaXRpb25Gcm9tTWF0Y2gobWF0Y2hlc1tpXSkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZU51bWJlckFtcGVyc2FuZCh4bWxEYXRhLCBpKSB7XG4gIGxldCByZSA9IC9cXGQvO1xuICBpZiAoeG1sRGF0YVtpXSA9PT0gJ3gnKSB7XG4gICAgaSsrO1xuICAgIHJlID0gL1tcXGRhLWZBLUZdLztcbiAgfVxuICBmb3IgKDsgaSA8IHhtbERhdGEubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoeG1sRGF0YVtpXSA9PT0gJzsnKVxuICAgICAgcmV0dXJuIGk7XG4gICAgaWYgKCF4bWxEYXRhW2ldLm1hdGNoKHJlKSlcbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVBbXBlcnNhbmQoeG1sRGF0YSwgaSkge1xuICAvLyBodHRwczovL3d3dy53My5vcmcvVFIveG1sLyNkdC1jaGFycmVmXG4gIGkrKztcbiAgaWYgKHhtbERhdGFbaV0gPT09ICc7JylcbiAgICByZXR1cm4gLTE7XG4gIGlmICh4bWxEYXRhW2ldID09PSAnIycpIHtcbiAgICBpKys7XG4gICAgcmV0dXJuIHZhbGlkYXRlTnVtYmVyQW1wZXJzYW5kKHhtbERhdGEsIGkpO1xuICB9XG4gIGxldCBjb3VudCA9IDA7XG4gIGZvciAoOyBpIDwgeG1sRGF0YS5sZW5ndGg7IGkrKywgY291bnQrKykge1xuICAgIGlmICh4bWxEYXRhW2ldLm1hdGNoKC9cXHcvKSAmJiBjb3VudCA8IDIwKVxuICAgICAgY29udGludWU7XG4gICAgaWYgKHhtbERhdGFbaV0gPT09ICc7JylcbiAgICAgIGJyZWFrO1xuICAgIHJldHVybiAtMTtcbiAgfVxuICByZXR1cm4gaTtcbn1cblxuZnVuY3Rpb24gZ2V0RXJyb3JPYmplY3QoY29kZSwgbWVzc2FnZSwgbGluZU51bWJlcikge1xuICByZXR1cm4ge1xuICAgIGVycjoge1xuICAgICAgY29kZTogY29kZSxcbiAgICAgIG1zZzogbWVzc2FnZSxcbiAgICAgIGxpbmU6IGxpbmVOdW1iZXIubGluZSB8fCBsaW5lTnVtYmVyLFxuICAgICAgY29sOiBsaW5lTnVtYmVyLmNvbCxcbiAgICB9LFxuICB9O1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUF0dHJOYW1lKGF0dHJOYW1lKSB7XG4gIHJldHVybiB1dGlsLmlzTmFtZShhdHRyTmFtZSk7XG59XG5cbi8vIGNvbnN0IHN0YXJ0c1dpdGhYTUwgPSAvXnhtbC9pO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZVRhZ05hbWUodGFnbmFtZSkge1xuICByZXR1cm4gdXRpbC5pc05hbWUodGFnbmFtZSkgLyogJiYgIXRhZ25hbWUubWF0Y2goc3RhcnRzV2l0aFhNTCkgKi87XG59XG5cbi8vdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBsaW5lIG51bWJlciBmb3IgdGhlIGNoYXJhY3RlciBhdCB0aGUgZ2l2ZW4gaW5kZXhcbmZ1bmN0aW9uIGdldExpbmVOdW1iZXJGb3JQb3NpdGlvbih4bWxEYXRhLCBpbmRleCkge1xuICBjb25zdCBsaW5lcyA9IHhtbERhdGEuc3Vic3RyaW5nKDAsIGluZGV4KS5zcGxpdCgvXFxyP1xcbi8pO1xuICByZXR1cm4ge1xuICAgIGxpbmU6IGxpbmVzLmxlbmd0aCxcblxuICAgIC8vIGNvbHVtbiBudW1iZXIgaXMgbGFzdCBsaW5lJ3MgbGVuZ3RoICsgMSwgYmVjYXVzZSBjb2x1bW4gbnVtYmVyaW5nIHN0YXJ0cyBhdCAxOlxuICAgIGNvbDogbGluZXNbbGluZXMubGVuZ3RoIC0gMV0ubGVuZ3RoICsgMVxuICB9O1xufVxuXG4vL3RoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcG9zaXRpb24gb2YgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBtYXRjaCB3aXRoaW4gYXR0clN0clxuZnVuY3Rpb24gZ2V0UG9zaXRpb25Gcm9tTWF0Y2gobWF0Y2gpIHtcbiAgcmV0dXJuIG1hdGNoLnN0YXJ0SW5kZXggKyBtYXRjaFsxXS5sZW5ndGg7XG59XG4iLCIndXNlIHN0cmljdCc7XG4vL3BhcnNlIEVtcHR5IE5vZGUgYXMgc2VsZiBjbG9zaW5nIG5vZGVcbmNvbnN0IGJ1aWxkRnJvbU9yZGVyZWRKcyA9IHJlcXVpcmUoJy4vb3JkZXJlZEpzMlhtbCcpO1xuXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgYXR0cmlidXRlTmFtZVByZWZpeDogJ0BfJyxcbiAgYXR0cmlidXRlc0dyb3VwTmFtZTogZmFsc2UsXG4gIHRleHROb2RlTmFtZTogJyN0ZXh0JyxcbiAgaWdub3JlQXR0cmlidXRlczogdHJ1ZSxcbiAgY2RhdGFQcm9wTmFtZTogZmFsc2UsXG4gIGZvcm1hdDogZmFsc2UsXG4gIGluZGVudEJ5OiAnICAnLFxuICBzdXBwcmVzc0VtcHR5Tm9kZTogZmFsc2UsXG4gIHN1cHByZXNzVW5wYWlyZWROb2RlOiB0cnVlLFxuICBzdXBwcmVzc0Jvb2xlYW5BdHRyaWJ1dGVzOiB0cnVlLFxuICB0YWdWYWx1ZVByb2Nlc3NvcjogZnVuY3Rpb24oa2V5LCBhKSB7XG4gICAgcmV0dXJuIGE7XG4gIH0sXG4gIGF0dHJpYnV0ZVZhbHVlUHJvY2Vzc29yOiBmdW5jdGlvbihhdHRyTmFtZSwgYSkge1xuICAgIHJldHVybiBhO1xuICB9LFxuICBwcmVzZXJ2ZU9yZGVyOiBmYWxzZSxcbiAgY29tbWVudFByb3BOYW1lOiBmYWxzZSxcbiAgdW5wYWlyZWRUYWdzOiBbXSxcbiAgZW50aXRpZXM6IFtcbiAgICB7IHJlZ2V4OiBuZXcgUmVnRXhwKFwiJlwiLCBcImdcIiksIHZhbDogXCImYW1wO1wiIH0sLy9pdCBtdXN0IGJlIG9uIHRvcFxuICAgIHsgcmVnZXg6IG5ldyBSZWdFeHAoXCI+XCIsIFwiZ1wiKSwgdmFsOiBcIiZndDtcIiB9LFxuICAgIHsgcmVnZXg6IG5ldyBSZWdFeHAoXCI8XCIsIFwiZ1wiKSwgdmFsOiBcIiZsdDtcIiB9LFxuICAgIHsgcmVnZXg6IG5ldyBSZWdFeHAoXCJcXCdcIiwgXCJnXCIpLCB2YWw6IFwiJmFwb3M7XCIgfSxcbiAgICB7IHJlZ2V4OiBuZXcgUmVnRXhwKFwiXFxcIlwiLCBcImdcIiksIHZhbDogXCImcXVvdDtcIiB9XG4gIF0sXG4gIHByb2Nlc3NFbnRpdGllczogdHJ1ZSxcbiAgc3RvcE5vZGVzOiBbXVxufTtcblxuZnVuY3Rpb24gQnVpbGRlcihvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcbiAgaWYgKHRoaXMub3B0aW9ucy5pZ25vcmVBdHRyaWJ1dGVzIHx8IHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVzR3JvdXBOYW1lKSB7XG4gICAgdGhpcy5pc0F0dHJpYnV0ZSA9IGZ1bmN0aW9uKC8qYSovKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmF0dHJQcmVmaXhMZW4gPSB0aGlzLm9wdGlvbnMuYXR0cmlidXRlTmFtZVByZWZpeC5sZW5ndGg7XG4gICAgdGhpcy5pc0F0dHJpYnV0ZSA9IGlzQXR0cmlidXRlO1xuICB9XG5cbiAgdGhpcy5wcm9jZXNzVGV4dE9yT2JqTm9kZSA9IHByb2Nlc3NUZXh0T3JPYmpOb2RlXG5cbiAgaWYgKHRoaXMub3B0aW9ucy5mb3JtYXQpIHtcbiAgICB0aGlzLmluZGVudGF0ZSA9IGluZGVudGF0ZTtcbiAgICB0aGlzLnRhZ0VuZENoYXIgPSAnPlxcbic7XG4gICAgdGhpcy5uZXdMaW5lID0gJ1xcbic7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5pbmRlbnRhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9O1xuICAgIHRoaXMudGFnRW5kQ2hhciA9ICc+JztcbiAgICB0aGlzLm5ld0xpbmUgPSAnJztcbiAgfVxuXG4gIGlmICh0aGlzLm9wdGlvbnMuc3VwcHJlc3NFbXB0eU5vZGUpIHtcbiAgICB0aGlzLmJ1aWxkVGV4dE5vZGUgPSBidWlsZEVtcHR5VGV4dE5vZGU7XG4gICAgdGhpcy5idWlsZE9iak5vZGUgPSBidWlsZEVtcHR5T2JqTm9kZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmJ1aWxkVGV4dE5vZGUgPSBidWlsZFRleHRWYWxOb2RlO1xuICAgIHRoaXMuYnVpbGRPYmpOb2RlID0gYnVpbGRPYmplY3ROb2RlO1xuICB9XG5cbiAgdGhpcy5idWlsZFRleHRWYWxOb2RlID0gYnVpbGRUZXh0VmFsTm9kZTtcbiAgdGhpcy5idWlsZE9iamVjdE5vZGUgPSBidWlsZE9iamVjdE5vZGU7XG5cbiAgdGhpcy5yZXBsYWNlRW50aXRpZXNWYWx1ZSA9IHJlcGxhY2VFbnRpdGllc1ZhbHVlO1xuICB0aGlzLmJ1aWxkQXR0clBhaXJTdHIgPSBidWlsZEF0dHJQYWlyU3RyO1xufVxuXG5CdWlsZGVyLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uKGpPYmopIHtcbiAgaWYodGhpcy5vcHRpb25zLnByZXNlcnZlT3JkZXIpe1xuICAgIHJldHVybiBidWlsZEZyb21PcmRlcmVkSnMoak9iaiwgdGhpcy5vcHRpb25zKTtcbiAgfWVsc2Uge1xuICAgIGlmKEFycmF5LmlzQXJyYXkoak9iaikgJiYgdGhpcy5vcHRpb25zLmFycmF5Tm9kZU5hbWUgJiYgdGhpcy5vcHRpb25zLmFycmF5Tm9kZU5hbWUubGVuZ3RoID4gMSl7XG4gICAgICBqT2JqID0ge1xuICAgICAgICBbdGhpcy5vcHRpb25zLmFycmF5Tm9kZU5hbWVdIDogak9ialxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5qMngoak9iaiwgMCkudmFsO1xuICB9XG59O1xuXG5CdWlsZGVyLnByb3RvdHlwZS5qMnggPSBmdW5jdGlvbihqT2JqLCBsZXZlbCkge1xuICBsZXQgYXR0clN0ciA9ICcnO1xuICBsZXQgdmFsID0gJyc7XG4gIGZvciAobGV0IGtleSBpbiBqT2JqKSB7XG4gICAgaWYgKHR5cGVvZiBqT2JqW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBzdXByZXNzIHVuZGVmaW5lZCBub2RlXG4gICAgfSBlbHNlIGlmIChqT2JqW2tleV0gPT09IG51bGwpIHtcbiAgICAgIGlmKGtleVswXSA9PT0gXCI/XCIpIHZhbCArPSB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyAnPCcgKyBrZXkgKyAnPycgKyB0aGlzLnRhZ0VuZENoYXI7XG4gICAgICBlbHNlIHZhbCArPSB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyAnPCcgKyBrZXkgKyAnLycgKyB0aGlzLnRhZ0VuZENoYXI7XG4gICAgICAvLyB2YWwgKz0gdGhpcy5pbmRlbnRhdGUobGV2ZWwpICsgJzwnICsga2V5ICsgJy8nICsgdGhpcy50YWdFbmRDaGFyO1xuICAgIH0gZWxzZSBpZiAoak9ialtrZXldIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgdmFsICs9IHRoaXMuYnVpbGRUZXh0Tm9kZShqT2JqW2tleV0sIGtleSwgJycsIGxldmVsKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBqT2JqW2tleV0gIT09ICdvYmplY3QnKSB7XG4gICAgICAvL3ByZW1pdGl2ZSB0eXBlXG4gICAgICBjb25zdCBhdHRyID0gdGhpcy5pc0F0dHJpYnV0ZShrZXkpO1xuICAgICAgaWYgKGF0dHIpIHtcbiAgICAgICAgYXR0clN0ciArPSB0aGlzLmJ1aWxkQXR0clBhaXJTdHIoYXR0ciwgJycgKyBqT2JqW2tleV0pO1xuICAgICAgfWVsc2Uge1xuICAgICAgICAvL3RhZyB2YWx1ZVxuICAgICAgICBpZiAoa2V5ID09PSB0aGlzLm9wdGlvbnMudGV4dE5vZGVOYW1lKSB7XG4gICAgICAgICAgbGV0IG5ld3ZhbCA9IHRoaXMub3B0aW9ucy50YWdWYWx1ZVByb2Nlc3NvcihrZXksICcnICsgak9ialtrZXldKTtcbiAgICAgICAgICB2YWwgKz0gdGhpcy5yZXBsYWNlRW50aXRpZXNWYWx1ZShuZXd2YWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbCArPSB0aGlzLmJ1aWxkVGV4dE5vZGUoak9ialtrZXldLCBrZXksICcnLCBsZXZlbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoak9ialtrZXldKSkge1xuICAgICAgLy9yZXBlYXRlZCBub2Rlc1xuICAgICAgY29uc3QgYXJyTGVuID0gak9ialtrZXldLmxlbmd0aDtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYXJyTGVuOyBqKyspIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGpPYmpba2V5XVtqXTtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIC8vIHN1cHJlc3MgdW5kZWZpbmVkIG5vZGVcbiAgICAgICAgfSBlbHNlIGlmIChpdGVtID09PSBudWxsKSB7XG4gICAgICAgICAgaWYoa2V5WzBdID09PSBcIj9cIikgdmFsICs9IHRoaXMuaW5kZW50YXRlKGxldmVsKSArICc8JyArIGtleSArICc/JyArIHRoaXMudGFnRW5kQ2hhcjtcbiAgICAgICAgICBlbHNlIHZhbCArPSB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyAnPCcgKyBrZXkgKyAnLycgKyB0aGlzLnRhZ0VuZENoYXI7XG4gICAgICAgICAgLy8gdmFsICs9IHRoaXMuaW5kZW50YXRlKGxldmVsKSArICc8JyArIGtleSArICcvJyArIHRoaXMudGFnRW5kQ2hhcjtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICB2YWwgKz0gdGhpcy5wcm9jZXNzVGV4dE9yT2JqTm9kZShpdGVtLCBrZXksIGxldmVsKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbCArPSB0aGlzLmJ1aWxkVGV4dE5vZGUoaXRlbSwga2V5LCAnJywgbGV2ZWwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vbmVzdGVkIG5vZGVcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYXR0cmlidXRlc0dyb3VwTmFtZSAmJiBrZXkgPT09IHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVzR3JvdXBOYW1lKSB7XG4gICAgICAgIGNvbnN0IEtzID0gT2JqZWN0LmtleXMoak9ialtrZXldKTtcbiAgICAgICAgY29uc3QgTCA9IEtzLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBMOyBqKyspIHtcbiAgICAgICAgICBhdHRyU3RyICs9IHRoaXMuYnVpbGRBdHRyUGFpclN0cihLc1tqXSwgJycgKyBqT2JqW2tleV1bS3Nbal1dKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsICs9IHRoaXMucHJvY2Vzc1RleHRPck9iak5vZGUoak9ialtrZXldLCBrZXksIGxldmVsKVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4ge2F0dHJTdHI6IGF0dHJTdHIsIHZhbDogdmFsfTtcbn07XG5cbmZ1bmN0aW9uIGJ1aWxkQXR0clBhaXJTdHIoYXR0ck5hbWUsIHZhbCl7XG4gIHZhbCA9IHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVWYWx1ZVByb2Nlc3NvcihhdHRyTmFtZSwgJycgKyB2YWwpO1xuICB2YWwgPSB0aGlzLnJlcGxhY2VFbnRpdGllc1ZhbHVlKHZhbCk7XG4gIGlmICh0aGlzLm9wdGlvbnMuc3VwcHJlc3NCb29sZWFuQXR0cmlidXRlcyAmJiB2YWwgPT09IFwidHJ1ZVwiKSB7XG4gICAgcmV0dXJuICcgJyArIGF0dHJOYW1lO1xuICB9IGVsc2UgcmV0dXJuICcgJyArIGF0dHJOYW1lICsgJz1cIicgKyB2YWwgKyAnXCInO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzVGV4dE9yT2JqTm9kZSAob2JqZWN0LCBrZXksIGxldmVsKSB7XG4gIGNvbnN0IHJlc3VsdCA9IHRoaXMuajJ4KG9iamVjdCwgbGV2ZWwgKyAxKTtcbiAgaWYgKG9iamVjdFt0aGlzLm9wdGlvbnMudGV4dE5vZGVOYW1lXSAhPT0gdW5kZWZpbmVkICYmIE9iamVjdC5rZXlzKG9iamVjdCkubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVpbGRUZXh0Tm9kZShvYmplY3RbdGhpcy5vcHRpb25zLnRleHROb2RlTmFtZV0sIGtleSwgcmVzdWx0LmF0dHJTdHIsIGxldmVsKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhpcy5idWlsZE9iak5vZGUocmVzdWx0LnZhbCwga2V5LCByZXN1bHQuYXR0clN0ciwgbGV2ZWwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJ1aWxkT2JqZWN0Tm9kZSh2YWwsIGtleSwgYXR0clN0ciwgbGV2ZWwpIHtcbiAgbGV0IHRhZ0VuZEV4cCA9ICc8LycgKyBrZXkgKyB0aGlzLnRhZ0VuZENoYXI7XG4gIGxldCBwaUNsb3NpbmdDaGFyID0gXCJcIjtcbiAgXG4gIGlmKGtleVswXSA9PT0gXCI/XCIpIHtcbiAgICBwaUNsb3NpbmdDaGFyID0gXCI/XCI7XG4gICAgdGFnRW5kRXhwID0gXCJcIjtcbiAgfVxuXG4gIGlmIChhdHRyU3RyICYmIHZhbC5pbmRleE9mKCc8JykgPT09IC0xKSB7XG4gICAgcmV0dXJuICggdGhpcy5pbmRlbnRhdGUobGV2ZWwpICsgJzwnICsgIGtleSArIGF0dHJTdHIgKyBwaUNsb3NpbmdDaGFyICsgJz4nICsgdmFsICsgdGFnRW5kRXhwICk7XG4gIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmNvbW1lbnRQcm9wTmFtZSAhPT0gZmFsc2UgJiYga2V5ID09PSB0aGlzLm9wdGlvbnMuY29tbWVudFByb3BOYW1lICYmIHBpQ2xvc2luZ0NoYXIubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5kZW50YXRlKGxldmVsKSArIGA8IS0tJHt2YWx9LS0+YCArIHRoaXMubmV3TGluZTtcbiAgfWVsc2Uge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyAnPCcgKyBrZXkgKyBhdHRyU3RyICsgcGlDbG9zaW5nQ2hhciArIHRoaXMudGFnRW5kQ2hhciArXG4gICAgICB2YWwgK1xuICAgICAgdGhpcy5pbmRlbnRhdGUobGV2ZWwpICsgdGFnRW5kRXhwICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYnVpbGRFbXB0eU9iak5vZGUodmFsLCBrZXksIGF0dHJTdHIsIGxldmVsKSB7XG4gIGlmICh2YWwgIT09ICcnKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVpbGRPYmplY3ROb2RlKHZhbCwga2V5LCBhdHRyU3RyLCBsZXZlbCk7XG4gIH0gZWxzZSB7XG4gICAgaWYoa2V5WzBdID09PSBcIj9cIikgcmV0dXJuICB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyAnPCcgKyBrZXkgKyBhdHRyU3RyKyAnPycgKyB0aGlzLnRhZ0VuZENoYXI7XG4gICAgZWxzZSByZXR1cm4gIHRoaXMuaW5kZW50YXRlKGxldmVsKSArICc8JyArIGtleSArIGF0dHJTdHIgKyAnLycgKyB0aGlzLnRhZ0VuZENoYXI7XG4gIH1cbn1cblxuZnVuY3Rpb24gYnVpbGRUZXh0VmFsTm9kZSh2YWwsIGtleSwgYXR0clN0ciwgbGV2ZWwpIHtcbiAgaWYgKHRoaXMub3B0aW9ucy5jZGF0YVByb3BOYW1lICE9PSBmYWxzZSAmJiBrZXkgPT09IHRoaXMub3B0aW9ucy5jZGF0YVByb3BOYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5kZW50YXRlKGxldmVsKSArIGA8IVtDREFUQVske3ZhbH1dXT5gICsgIHRoaXMubmV3TGluZTtcbiAgfWVsc2UgaWYgKHRoaXMub3B0aW9ucy5jb21tZW50UHJvcE5hbWUgIT09IGZhbHNlICYmIGtleSA9PT0gdGhpcy5vcHRpb25zLmNvbW1lbnRQcm9wTmFtZSkge1xuICAgIHJldHVybiB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyBgPCEtLSR7dmFsfS0tPmAgKyAgdGhpcy5uZXdMaW5lO1xuICB9ZWxzZXtcbiAgICBsZXQgdGV4dFZhbHVlID0gdGhpcy5vcHRpb25zLnRhZ1ZhbHVlUHJvY2Vzc29yKGtleSwgdmFsKTtcbiAgICB0ZXh0VmFsdWUgPSB0aGlzLnJlcGxhY2VFbnRpdGllc1ZhbHVlKHRleHRWYWx1ZSk7XG4gIFxuICAgIGlmKCB0ZXh0VmFsdWUgPT09ICcnICYmIHRoaXMub3B0aW9ucy51bnBhaXJlZFRhZ3MuaW5kZXhPZihrZXkpICE9PSAtMSl7IC8vdW5wYWlyZWRcbiAgICAgIGlmKHRoaXMub3B0aW9ucy5zdXBwcmVzc1VucGFpcmVkTm9kZSl7XG4gICAgICAgIHJldHVybiB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyAnPCcgKyBrZXkgKyB0aGlzLnRhZ0VuZENoYXI7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZW50YXRlKGxldmVsKSArICc8JyArIGtleSArIFwiL1wiICsgdGhpcy50YWdFbmRDaGFyO1xuICAgICAgfVxuICAgIH0gZWxzZXtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMuaW5kZW50YXRlKGxldmVsKSArICc8JyArIGtleSArIGF0dHJTdHIgKyAnPicgK1xuICAgICAgICAgdGV4dFZhbHVlICtcbiAgICAgICAgJzwvJyArIGtleSArIHRoaXMudGFnRW5kQ2hhciAgKTtcbiAgICB9XG5cbiAgfVxufVxuXG5mdW5jdGlvbiByZXBsYWNlRW50aXRpZXNWYWx1ZSh0ZXh0VmFsdWUpe1xuICBpZih0ZXh0VmFsdWUgJiYgdGV4dFZhbHVlLmxlbmd0aCA+IDAgJiYgdGhpcy5vcHRpb25zLnByb2Nlc3NFbnRpdGllcyl7XG4gICAgZm9yIChsZXQgaT0wOyBpPHRoaXMub3B0aW9ucy5lbnRpdGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZW50aXR5ID0gdGhpcy5vcHRpb25zLmVudGl0aWVzW2ldO1xuICAgICAgdGV4dFZhbHVlID0gdGV4dFZhbHVlLnJlcGxhY2UoZW50aXR5LnJlZ2V4LCBlbnRpdHkudmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRleHRWYWx1ZTtcbn1cblxuZnVuY3Rpb24gYnVpbGRFbXB0eVRleHROb2RlKHZhbCwga2V5LCBhdHRyU3RyLCBsZXZlbCkge1xuICBpZiggdmFsID09PSAnJyAmJiB0aGlzLm9wdGlvbnMudW5wYWlyZWRUYWdzLmluZGV4T2Yoa2V5KSAhPT0gLTEpeyAvL3VucGFpcmVkXG4gICAgaWYodGhpcy5vcHRpb25zLnN1cHByZXNzVW5wYWlyZWROb2RlKXtcbiAgICAgIHJldHVybiB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyAnPCcgKyBrZXkgKyB0aGlzLnRhZ0VuZENoYXI7XG4gICAgfWVsc2V7XG4gICAgICByZXR1cm4gdGhpcy5pbmRlbnRhdGUobGV2ZWwpICsgJzwnICsga2V5ICsgXCIvXCIgKyB0aGlzLnRhZ0VuZENoYXI7XG4gICAgfVxuICB9ZWxzZSBpZiAodmFsICE9PSAnJykgeyAvL2VtcHR5XG4gICAgcmV0dXJuIHRoaXMuYnVpbGRUZXh0VmFsTm9kZSh2YWwsIGtleSwgYXR0clN0ciwgbGV2ZWwpO1xuICB9IGVsc2Uge1xuICAgIGlmKGtleVswXSA9PT0gXCI/XCIpIHJldHVybiAgdGhpcy5pbmRlbnRhdGUobGV2ZWwpICsgJzwnICsga2V5ICsgYXR0clN0cisgJz8nICsgdGhpcy50YWdFbmRDaGFyOyAvL1BJIHRhZ1xuICAgIGVsc2UgcmV0dXJuICB0aGlzLmluZGVudGF0ZShsZXZlbCkgKyAnPCcgKyBrZXkgKyBhdHRyU3RyICsgJy8nICsgdGhpcy50YWdFbmRDaGFyOyAvL25vcm1hbFxuICB9XG59XG5cbmZ1bmN0aW9uIGluZGVudGF0ZShsZXZlbCkge1xuICByZXR1cm4gdGhpcy5vcHRpb25zLmluZGVudEJ5LnJlcGVhdChsZXZlbCk7XG59XG5cbmZ1bmN0aW9uIGlzQXR0cmlidXRlKG5hbWUgLyosIG9wdGlvbnMqLykge1xuICBpZiAobmFtZS5zdGFydHNXaXRoKHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVOYW1lUHJlZml4KSkge1xuICAgIHJldHVybiBuYW1lLnN1YnN0cih0aGlzLmF0dHJQcmVmaXhMZW4pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJ1aWxkZXI7XG4iLCJjb25zdCBFT0wgPSBcIlxcblwiO1xuXG4vKipcbiAqIFxuICogQHBhcmFtIHthcnJheX0gakFycmF5IFxuICogQHBhcmFtIHthbnl9IG9wdGlvbnMgXG4gKiBAcmV0dXJucyBcbiAqL1xuZnVuY3Rpb24gdG9YbWwoakFycmF5LCBvcHRpb25zKXtcbiAgICByZXR1cm4gYXJyVG9TdHIoIGpBcnJheSwgb3B0aW9ucywgXCJcIiwgMCk7XG59XG5cbmZ1bmN0aW9uIGFyclRvU3RyKGFyciwgb3B0aW9ucywgalBhdGgsIGxldmVsKXtcbiAgICBsZXQgeG1sU3RyID0gXCJcIjtcblxuICAgIGxldCBpbmRlbnRhdGlvbiA9IFwiXCI7XG4gICAgaWYob3B0aW9ucy5mb3JtYXQgJiYgb3B0aW9ucy5pbmRlbnRCeS5sZW5ndGggPiAwKXsvL1RPRE86IHRoaXMgbG9naWMgY2FuIGJlIGF2b2lkZWQgZm9yIGVhY2ggY2FsbFxuICAgICAgICBpbmRlbnRhdGlvbiA9IEVPTCArIFwiXCIgKyBvcHRpb25zLmluZGVudEJ5LnJlcGVhdChsZXZlbCk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgdGFnT2JqID0gYXJyW2ldO1xuICAgICAgICBjb25zdCB0YWdOYW1lID0gcHJvcE5hbWUodGFnT2JqKTtcbiAgICAgICAgbGV0IG5ld0pQYXRoID0gXCJcIjtcbiAgICAgICAgaWYoalBhdGgubGVuZ3RoID09PSAwKSBuZXdKUGF0aCA9IHRhZ05hbWVcbiAgICAgICAgZWxzZSBuZXdKUGF0aCA9IGAke2pQYXRofS4ke3RhZ05hbWV9YDtcblxuICAgICAgICBpZih0YWdOYW1lID09PSBvcHRpb25zLnRleHROb2RlTmFtZSl7XG4gICAgICAgICAgICBsZXQgdGFnVGV4dCA9IHRhZ09ialt0YWdOYW1lXTtcbiAgICAgICAgICAgIGlmKCFpc1N0b3BOb2RlKG5ld0pQYXRoLCBvcHRpb25zKSl7XG4gICAgICAgICAgICAgICAgdGFnVGV4dCA9IG9wdGlvbnMudGFnVmFsdWVQcm9jZXNzb3IoIHRhZ05hbWUsIHRhZ1RleHQpO1xuICAgICAgICAgICAgICAgIHRhZ1RleHQgPSByZXBsYWNlRW50aXRpZXNWYWx1ZSh0YWdUZXh0LCBvcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHhtbFN0ciArPSBpbmRlbnRhdGlvbiArIHRhZ1RleHQ7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfWVsc2UgaWYoIHRhZ05hbWUgPT09IG9wdGlvbnMuY2RhdGFQcm9wTmFtZSl7XG4gICAgICAgICAgICB4bWxTdHIgKz0gaW5kZW50YXRpb24gKyBgPCFbQ0RBVEFbJHt0YWdPYmpbdGFnTmFtZV1bMF1bb3B0aW9ucy50ZXh0Tm9kZU5hbWVdfV1dPmA7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfWVsc2UgaWYoIHRhZ05hbWUgPT09IG9wdGlvbnMuY29tbWVudFByb3BOYW1lKXtcbiAgICAgICAgICAgIHhtbFN0ciArPSBpbmRlbnRhdGlvbiArIGA8IS0tJHt0YWdPYmpbdGFnTmFtZV1bMF1bb3B0aW9ucy50ZXh0Tm9kZU5hbWVdfS0tPmA7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfWVsc2UgaWYoIHRhZ05hbWVbMF0gPT09IFwiP1wiKXtcbiAgICAgICAgICAgIGNvbnN0IGF0dFN0ciA9IGF0dHJfdG9fc3RyKHRhZ09ialtcIjpAXCJdLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IHRlbXBJbmQgPSB0YWdOYW1lID09PSBcIj94bWxcIiA/IFwiXCIgOiBpbmRlbnRhdGlvbjtcbiAgICAgICAgICAgIGxldCBwaVRleHROb2RlTmFtZSA9IHRhZ09ialt0YWdOYW1lXVswXVtvcHRpb25zLnRleHROb2RlTmFtZV07XG4gICAgICAgICAgICBwaVRleHROb2RlTmFtZSA9IHBpVGV4dE5vZGVOYW1lLmxlbmd0aCAhPT0gMCA/IFwiIFwiICsgcGlUZXh0Tm9kZU5hbWUgOiBcIlwiOyAvL3JlbW92ZSBleHRyYSBzcGFjaW5nXG4gICAgICAgICAgICB4bWxTdHIgKz0gdGVtcEluZCArIGA8JHt0YWdOYW1lfSR7cGlUZXh0Tm9kZU5hbWV9JHthdHRTdHJ9Pz5gO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXR0U3RyID0gYXR0cl90b19zdHIodGFnT2JqW1wiOkBcIl0sIG9wdGlvbnMpO1xuICAgICAgICBsZXQgdGFnU3RhcnQgPSAgaW5kZW50YXRpb24gKyBgPCR7dGFnTmFtZX0ke2F0dFN0cn1gO1xuICAgICAgICBsZXQgdGFnVmFsdWUgPSBhcnJUb1N0cih0YWdPYmpbdGFnTmFtZV0sIG9wdGlvbnMsIG5ld0pQYXRoLCBsZXZlbCArIDEpO1xuICAgICAgICBpZihvcHRpb25zLnVucGFpcmVkVGFncy5pbmRleE9mKHRhZ05hbWUpICE9PSAtMSl7XG4gICAgICAgICAgICBpZihvcHRpb25zLnN1cHByZXNzVW5wYWlyZWROb2RlKSAgeG1sU3RyICs9IHRhZ1N0YXJ0ICsgXCI+XCI7IFxuICAgICAgICAgICAgZWxzZSB4bWxTdHIgKz0gdGFnU3RhcnQgKyBcIi8+XCI7IFxuICAgICAgICB9ZWxzZSBpZiggKCF0YWdWYWx1ZSB8fCB0YWdWYWx1ZS5sZW5ndGggPT09IDApICYmIG9wdGlvbnMuc3VwcHJlc3NFbXB0eU5vZGUpeyBcbiAgICAgICAgICAgIHhtbFN0ciArPSB0YWdTdGFydCArIFwiLz5cIjsgXG4gICAgICAgIH1lbHNleyBcbiAgICAgICAgICAgIC8vVE9ETzogbm9kZSB3aXRoIG9ubHkgdGV4dCB2YWx1ZSBzaG91bGQgbm90IHBhcnNlIHRoZSB0ZXh0IHZhbHVlIGluIG5leHQgbGluZVxuICAgICAgICAgICAgeG1sU3RyICs9IHRhZ1N0YXJ0ICsgYD4ke3RhZ1ZhbHVlfSR7aW5kZW50YXRpb259PC8ke3RhZ05hbWV9PmAgO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB4bWxTdHI7XG59XG5cbmZ1bmN0aW9uIHByb3BOYW1lKG9iail7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYoa2V5ICE9PSBcIjpAXCIpIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG5cbmZ1bmN0aW9uIGF0dHJfdG9fc3RyKGF0dHJNYXAsIG9wdGlvbnMpe1xuICAgIGxldCBhdHRyU3RyID0gXCJcIjtcbiAgICBpZihhdHRyTWFwICYmICFvcHRpb25zLmlnbm9yZUF0dHJpYnV0ZXMpe1xuICAgICAgICBmb3IgKGxldCBhdHRyIGluIGF0dHJNYXApe1xuICAgICAgICAgICAgbGV0IGF0dHJWYWwgPSBvcHRpb25zLmF0dHJpYnV0ZVZhbHVlUHJvY2Vzc29yKGF0dHIsIGF0dHJNYXBbYXR0cl0pO1xuICAgICAgICAgICAgYXR0clZhbCA9IHJlcGxhY2VFbnRpdGllc1ZhbHVlKGF0dHJWYWwsIG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYoYXR0clZhbCA9PT0gdHJ1ZSAmJiBvcHRpb25zLnN1cHByZXNzQm9vbGVhbkF0dHJpYnV0ZXMpe1xuICAgICAgICAgICAgICAgIGF0dHJTdHIrPSBgICR7YXR0ci5zdWJzdHIob3B0aW9ucy5hdHRyaWJ1dGVOYW1lUHJlZml4Lmxlbmd0aCl9YDtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGF0dHJTdHIrPSBgICR7YXR0ci5zdWJzdHIob3B0aW9ucy5hdHRyaWJ1dGVOYW1lUHJlZml4Lmxlbmd0aCl9PVwiJHthdHRyVmFsfVwiYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXR0clN0cjtcbn1cblxuZnVuY3Rpb24gaXNTdG9wTm9kZShqUGF0aCwgb3B0aW9ucyl7XG4gICAgalBhdGggPSBqUGF0aC5zdWJzdHIoMCxqUGF0aC5sZW5ndGggLSBvcHRpb25zLnRleHROb2RlTmFtZS5sZW5ndGggLSAxKTtcbiAgICBsZXQgdGFnTmFtZSA9IGpQYXRoLnN1YnN0cihqUGF0aC5sYXN0SW5kZXhPZihcIi5cIikgKyAxKTtcbiAgICBmb3IobGV0IGluZGV4IGluIG9wdGlvbnMuc3RvcE5vZGVzKXtcbiAgICAgICAgaWYob3B0aW9ucy5zdG9wTm9kZXNbaW5kZXhdID09PSBqUGF0aCB8fCBvcHRpb25zLnN0b3BOb2Rlc1tpbmRleF0gPT09IFwiKi5cIit0YWdOYW1lKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlRW50aXRpZXNWYWx1ZSh0ZXh0VmFsdWUsIG9wdGlvbnMpe1xuICAgIGlmKHRleHRWYWx1ZSAmJiB0ZXh0VmFsdWUubGVuZ3RoID4gMCAmJiBvcHRpb25zLnByb2Nlc3NFbnRpdGllcyl7XG4gICAgICBmb3IgKGxldCBpPTA7IGk8IG9wdGlvbnMuZW50aXRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgZW50aXR5ID0gb3B0aW9ucy5lbnRpdGllc1tpXTtcbiAgICAgICAgdGV4dFZhbHVlID0gdGV4dFZhbHVlLnJlcGxhY2UoZW50aXR5LnJlZ2V4LCBlbnRpdHkudmFsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRleHRWYWx1ZTtcbiAgfVxubW9kdWxlLmV4cG9ydHMgPSB0b1htbDsiLCIvL1RPRE86IGhhbmRsZSBjb21tZW50c1xuZnVuY3Rpb24gcmVhZERvY1R5cGUoeG1sRGF0YSwgaSl7XG4gICAgXG4gICAgY29uc3QgZW50aXRpZXMgPSB7fTtcbiAgICBpZiggeG1sRGF0YVtpICsgM10gPT09ICdPJyAmJlxuICAgICAgICAgeG1sRGF0YVtpICsgNF0gPT09ICdDJyAmJlxuICAgICAgICAgeG1sRGF0YVtpICsgNV0gPT09ICdUJyAmJlxuICAgICAgICAgeG1sRGF0YVtpICsgNl0gPT09ICdZJyAmJlxuICAgICAgICAgeG1sRGF0YVtpICsgN10gPT09ICdQJyAmJlxuICAgICAgICAgeG1sRGF0YVtpICsgOF0gPT09ICdFJylcbiAgICB7ICAgIFxuICAgICAgICBpID0gaSs5O1xuICAgICAgICBsZXQgYW5nbGVCcmFja2V0c0NvdW50ID0gMTtcbiAgICAgICAgbGV0IGhhc0JvZHkgPSBmYWxzZSwgZW50aXR5ID0gZmFsc2UsIGNvbW1lbnQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGV4cCA9IFwiXCI7XG4gICAgICAgIGZvcig7aTx4bWxEYXRhLmxlbmd0aDtpKyspe1xuICAgICAgICAgICAgaWYgKHhtbERhdGFbaV0gPT09ICc8Jykge1xuICAgICAgICAgICAgICAgIGlmKCBoYXNCb2R5ICYmIFxuICAgICAgICAgICAgICAgICAgICAgeG1sRGF0YVtpKzFdID09PSAnIScgJiZcbiAgICAgICAgICAgICAgICAgICAgIHhtbERhdGFbaSsyXSA9PT0gJ0UnICYmXG4gICAgICAgICAgICAgICAgICAgICB4bWxEYXRhW2krM10gPT09ICdOJyAmJlxuICAgICAgICAgICAgICAgICAgICAgeG1sRGF0YVtpKzRdID09PSAnVCcgJiZcbiAgICAgICAgICAgICAgICAgICAgIHhtbERhdGFbaSs1XSA9PT0gJ0knICYmXG4gICAgICAgICAgICAgICAgICAgICB4bWxEYXRhW2krNl0gPT09ICdUJyAmJlxuICAgICAgICAgICAgICAgICAgICAgeG1sRGF0YVtpKzddID09PSAnWSdcbiAgICAgICAgICAgICAgICApe1xuICAgICAgICAgICAgICAgICAgICBpICs9IDc7XG4gICAgICAgICAgICAgICAgICAgIGVudGl0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYoIGhhc0JvZHkgJiYgXG4gICAgICAgICAgICAgICAgICAgIHhtbERhdGFbaSsxXSA9PT0gJyEnICYmXG4gICAgICAgICAgICAgICAgICAgICB4bWxEYXRhW2krMl0gPT09ICdFJyAmJlxuICAgICAgICAgICAgICAgICAgICAgeG1sRGF0YVtpKzNdID09PSAnTCcgJiZcbiAgICAgICAgICAgICAgICAgICAgIHhtbERhdGFbaSs0XSA9PT0gJ0UnICYmXG4gICAgICAgICAgICAgICAgICAgICB4bWxEYXRhW2krNV0gPT09ICdNJyAmJlxuICAgICAgICAgICAgICAgICAgICAgeG1sRGF0YVtpKzZdID09PSAnRScgJiZcbiAgICAgICAgICAgICAgICAgICAgIHhtbERhdGFbaSs3XSA9PT0gJ04nICYmXG4gICAgICAgICAgICAgICAgICAgICB4bWxEYXRhW2krOF0gPT09ICdUJ1xuICAgICAgICAgICAgICAgICl7XG4gICAgICAgICAgICAgICAgICAgIC8vTm90IHN1cHBvcnRlZFxuICAgICAgICAgICAgICAgICAgICBpICs9IDg7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYoIC8vY29tbWVudFxuICAgICAgICAgICAgICAgICAgICB4bWxEYXRhW2krMV0gPT09ICchJyAmJlxuICAgICAgICAgICAgICAgICAgICB4bWxEYXRhW2krMl0gPT09ICctJyAmJlxuICAgICAgICAgICAgICAgICAgICB4bWxEYXRhW2krM10gPT09ICctJ1xuICAgICAgICAgICAgICAgICl7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1lbnQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIERPQ1RZUEVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFuZ2xlQnJhY2tldHNDb3VudCsrO1xuICAgICAgICAgICAgICAgIGV4cCA9IFwiXCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHhtbERhdGFbaV0gPT09ICc+Jykge1xuICAgICAgICAgICAgICAgIGlmKGNvbW1lbnQpe1xuICAgICAgICAgICAgICAgICAgICBpZiggeG1sRGF0YVtpIC0gMV0gPT09IFwiLVwiICYmIHhtbERhdGFbaSAtIDJdID09PSBcIi1cIil7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIFhNTCBjb21tZW50IGluIERPQ1RZUEVgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1lbHNlIGlmKGVudGl0eSl7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlRW50aXR5RXhwKGV4cCwgZW50aXRpZXMpO1xuICAgICAgICAgICAgICAgICAgICBlbnRpdHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYW5nbGVCcmFja2V0c0NvdW50LS07XG4gICAgICAgICAgICAgICAgaWYgKGFuZ2xlQnJhY2tldHNDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfWVsc2UgaWYoIHhtbERhdGFbaV0gPT09ICdbJyl7XG4gICAgICAgICAgICAgICAgaGFzQm9keSA9IHRydWU7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBleHAgKz0geG1sRGF0YVtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZihhbmdsZUJyYWNrZXRzQ291bnQgIT09IDApe1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmNsb3NlZCBET0NUWVBFYCk7XG4gICAgICAgIH1cbiAgICB9ZWxzZXtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIFRhZyBpbnN0ZWFkIG9mIERPQ1RZUEVgKTtcbiAgICB9XG4gICAgcmV0dXJuIHtlbnRpdGllcywgaX07XG59XG5cbmNvbnN0IGVudGl0eVJlZ2V4ID0gUmVnRXhwKFwiXlxcXFxzKFthLXpBLXowLTBdKylbIFxcdF0oWydcXFwiXSkoW14mXSspXFxcXDJcIik7XG5mdW5jdGlvbiBwYXJzZUVudGl0eUV4cChleHAsIGVudGl0aWVzKXtcbiAgICBjb25zdCBtYXRjaCA9IGVudGl0eVJlZ2V4LmV4ZWMoZXhwKTtcbiAgICBpZihtYXRjaCl7XG4gICAgICAgIGVudGl0aWVzWyBtYXRjaFsxXSBdID0ge1xuICAgICAgICAgICAgcmVneCA6IFJlZ0V4cCggYCYke21hdGNoWzFdfTtgLFwiZ1wiKSxcbiAgICAgICAgICAgIHZhbDogbWF0Y2hbM11cbiAgICAgICAgfTtcbiAgICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHJlYWREb2NUeXBlOyIsIlxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgcHJlc2VydmVPcmRlcjogZmFsc2UsXG4gICAgYXR0cmlidXRlTmFtZVByZWZpeDogJ0BfJyxcbiAgICBhdHRyaWJ1dGVzR3JvdXBOYW1lOiBmYWxzZSxcbiAgICB0ZXh0Tm9kZU5hbWU6ICcjdGV4dCcsXG4gICAgaWdub3JlQXR0cmlidXRlczogdHJ1ZSxcbiAgICByZW1vdmVOU1ByZWZpeDogZmFsc2UsIC8vIHJlbW92ZSBOUyBmcm9tIHRhZyBuYW1lIG9yIGF0dHJpYnV0ZSBuYW1lIGlmIHRydWVcbiAgICBhbGxvd0Jvb2xlYW5BdHRyaWJ1dGVzOiBmYWxzZSwgLy9hIHRhZyBjYW4gaGF2ZSBhdHRyaWJ1dGVzIHdpdGhvdXQgYW55IHZhbHVlXG4gICAgLy9pZ25vcmVSb290RWxlbWVudCA6IGZhbHNlLFxuICAgIHBhcnNlVGFnVmFsdWU6IHRydWUsXG4gICAgcGFyc2VBdHRyaWJ1dGVWYWx1ZTogZmFsc2UsXG4gICAgdHJpbVZhbHVlczogdHJ1ZSwgLy9UcmltIHN0cmluZyB2YWx1ZXMgb2YgdGFnIGFuZCBhdHRyaWJ1dGVzXG4gICAgY2RhdGFQcm9wTmFtZTogZmFsc2UsXG4gICAgbnVtYmVyUGFyc2VPcHRpb25zOiB7XG4gICAgICBoZXg6IHRydWUsXG4gICAgICBsZWFkaW5nWmVyb3M6IHRydWVcbiAgICB9LFxuICAgIHRhZ1ZhbHVlUHJvY2Vzc29yOiBmdW5jdGlvbih0YWdOYW1lLCB2YWwpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfSxcbiAgICBhdHRyaWJ1dGVWYWx1ZVByb2Nlc3NvcjogZnVuY3Rpb24oYXR0ck5hbWUsIHZhbCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9LFxuICAgIHN0b3BOb2RlczogW10sIC8vbmVzdGVkIHRhZ3Mgd2lsbCBub3QgYmUgcGFyc2VkIGV2ZW4gZm9yIGVycm9yc1xuICAgIGFsd2F5c0NyZWF0ZVRleHROb2RlOiBmYWxzZSxcbiAgICBpc0FycmF5OiAoKSA9PiBmYWxzZSxcbiAgICBjb21tZW50UHJvcE5hbWU6IGZhbHNlLFxuICAgIHVucGFpcmVkVGFnczogW10sXG4gICAgcHJvY2Vzc0VudGl0aWVzOiB0cnVlLFxuICAgIGh0bWxFbnRpdGllczogZmFsc2UsXG4gICAgaWdub3JlRGVjbGFyYXRpb246IGZhbHNlLFxuICAgIGlnbm9yZVBpVGFnczogZmFsc2Vcbn07XG4gICBcbmNvbnN0IGJ1aWxkT3B0aW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xufTtcblxuZXhwb3J0cy5idWlsZE9wdGlvbnMgPSBidWlsZE9wdGlvbnM7XG5leHBvcnRzLmRlZmF1bHRPcHRpb25zID0gZGVmYXVsdE9wdGlvbnM7IiwiJ3VzZSBzdHJpY3QnO1xuLy8vQHRzLWNoZWNrXG5cbmNvbnN0IHV0aWwgPSByZXF1aXJlKCcuLi91dGlsJyk7XG5jb25zdCB4bWxOb2RlID0gcmVxdWlyZSgnLi94bWxOb2RlJyk7XG5jb25zdCByZWFkRG9jVHlwZSA9IHJlcXVpcmUoXCIuL0RvY1R5cGVSZWFkZXJcIik7XG5jb25zdCB0b051bWJlciA9IHJlcXVpcmUoXCJzdHJudW1cIik7XG5cbmNvbnN0IHJlZ3ggPVxuICAnPCgoIVxcXFxbQ0RBVEFcXFxcWyhbXFxcXHNcXFxcU10qPykoXV0+KSl8KChOQU1FOik/KE5BTUUpKShbXj5dKik+fCgoXFxcXC8pKE5BTUUpXFxcXHMqPikpKFtePF0qKSdcbiAgLnJlcGxhY2UoL05BTUUvZywgdXRpbC5uYW1lUmVnZXhwKTtcblxuLy9jb25zdCB0YWdzUmVneCA9IG5ldyBSZWdFeHAoXCI8KFxcXFwvP1tcXFxcdzpcXFxcLVxcLl9dKykoW14+XSopPihcXFxccypcIitjZGF0YVJlZ3grXCIpKihbXjxdKyk/XCIsXCJnXCIpO1xuLy9jb25zdCB0YWdzUmVneCA9IG5ldyBSZWdFeHAoXCI8KFxcXFwvPykoKFxcXFx3KjopPyhbXFxcXHc6XFxcXC1cXC5fXSspKShbXj5dKik+KFtePF0qKShcIitjZGF0YVJlZ3grXCIoW148XSopKSooW148XSspP1wiLFwiZ1wiKTtcblxuY2xhc3MgT3JkZXJlZE9ialBhcnNlcntcbiAgY29uc3RydWN0b3Iob3B0aW9ucyl7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmN1cnJlbnROb2RlID0gbnVsbDtcbiAgICB0aGlzLnRhZ3NOb2RlU3RhY2sgPSBbXTtcbiAgICB0aGlzLmRvY1R5cGVFbnRpdGllcyA9IHt9O1xuICAgIHRoaXMubGFzdEVudGl0aWVzID0ge1xuICAgICAgXCJhbXBcIiA6IHsgcmVnZXg6IC8mKGFtcHwjMzh8I3gyNik7L2csIHZhbCA6IFwiJlwifSxcbiAgICAgIFwiYXBvc1wiIDogeyByZWdleDogLyYoYXBvc3wjMzl8I3gyNyk7L2csIHZhbCA6IFwiJ1wifSxcbiAgICAgIFwiZ3RcIiA6IHsgcmVnZXg6IC8mKGd0fCM2MnwjeDNFKTsvZywgdmFsIDogXCI+XCJ9LFxuICAgICAgXCJsdFwiIDogeyByZWdleDogLyYobHR8IzYwfCN4M0MpOy9nLCB2YWwgOiBcIjxcIn0sXG4gICAgICBcInF1b3RcIiA6IHsgcmVnZXg6IC8mKHF1b3R8IzM0fCN4MjIpOy9nLCB2YWwgOiBcIlxcXCJcIn0sXG4gICAgfTtcbiAgICB0aGlzLmh0bWxFbnRpdGllcyA9IHtcbiAgICAgIFwic3BhY2VcIjogeyByZWdleDogLyYobmJzcHwjMTYwKTsvZywgdmFsOiBcIiBcIiB9LFxuICAgICAgLy8gXCJsdFwiIDogeyByZWdleDogLyYobHR8IzYwKTsvZywgdmFsOiBcIjxcIiB9LFxuICAgICAgLy8gXCJndFwiIDogeyByZWdleDogLyYoZ3R8IzYyKTsvZywgdmFsOiBcIj5cIiB9LFxuICAgICAgLy8gXCJhbXBcIiA6IHsgcmVnZXg6IC8mKGFtcHwjMzgpOy9nLCB2YWw6IFwiJlwiIH0sXG4gICAgICAvLyBcInF1b3RcIiA6IHsgcmVnZXg6IC8mKHF1b3R8IzM0KTsvZywgdmFsOiBcIlxcXCJcIiB9LFxuICAgICAgLy8gXCJhcG9zXCIgOiB7IHJlZ2V4OiAvJihhcG9zfCMzOSk7L2csIHZhbDogXCInXCIgfSxcbiAgICAgIFwiY2VudFwiIDogeyByZWdleDogLyYoY2VudHwjMTYyKTsvZywgdmFsOiBcIsKiXCIgfSxcbiAgICAgIFwicG91bmRcIiA6IHsgcmVnZXg6IC8mKHBvdW5kfCMxNjMpOy9nLCB2YWw6IFwiwqNcIiB9LFxuICAgICAgXCJ5ZW5cIiA6IHsgcmVnZXg6IC8mKHllbnwjMTY1KTsvZywgdmFsOiBcIsKlXCIgfSxcbiAgICAgIFwiZXVyb1wiIDogeyByZWdleDogLyYoZXVyb3wjODM2NCk7L2csIHZhbDogXCLigqxcIiB9LFxuICAgICAgXCJjb3B5cmlnaHRcIiA6IHsgcmVnZXg6IC8mKGNvcHl8IzE2OSk7L2csIHZhbDogXCLCqVwiIH0sXG4gICAgICBcInJlZ1wiIDogeyByZWdleDogLyYocmVnfCMxNzQpOy9nLCB2YWw6IFwiwq5cIiB9LFxuICAgICAgXCJpbnJcIiA6IHsgcmVnZXg6IC8mKGlucnwjODM3Nyk7L2csIHZhbDogXCLigrlcIiB9LFxuICAgIH07XG4gICAgdGhpcy5hZGRFeHRlcm5hbEVudGl0aWVzID0gYWRkRXh0ZXJuYWxFbnRpdGllcztcbiAgICB0aGlzLnBhcnNlWG1sID0gcGFyc2VYbWw7XG4gICAgdGhpcy5wYXJzZVRleHREYXRhID0gcGFyc2VUZXh0RGF0YTtcbiAgICB0aGlzLnJlc29sdmVOYW1lU3BhY2UgPSByZXNvbHZlTmFtZVNwYWNlO1xuICAgIHRoaXMuYnVpbGRBdHRyaWJ1dGVzTWFwID0gYnVpbGRBdHRyaWJ1dGVzTWFwO1xuICAgIHRoaXMuaXNJdFN0b3BOb2RlID0gaXNJdFN0b3BOb2RlO1xuICAgIHRoaXMucmVwbGFjZUVudGl0aWVzVmFsdWUgPSByZXBsYWNlRW50aXRpZXNWYWx1ZTtcbiAgICB0aGlzLnJlYWRTdG9wTm9kZURhdGEgPSByZWFkU3RvcE5vZGVEYXRhO1xuICAgIHRoaXMuc2F2ZVRleHRUb1BhcmVudFRhZyA9IHNhdmVUZXh0VG9QYXJlbnRUYWc7XG4gIH1cblxufVxuXG5mdW5jdGlvbiBhZGRFeHRlcm5hbEVudGl0aWVzKGV4dGVybmFsRW50aXRpZXMpe1xuICBjb25zdCBlbnRLZXlzID0gT2JqZWN0LmtleXMoZXh0ZXJuYWxFbnRpdGllcyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZW50S2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGVudCA9IGVudEtleXNbaV07XG4gICAgdGhpcy5sYXN0RW50aXRpZXNbZW50XSA9IHtcbiAgICAgICByZWdleDogbmV3IFJlZ0V4cChcIiZcIitlbnQrXCI7XCIsXCJnXCIpLFxuICAgICAgIHZhbCA6IGV4dGVybmFsRW50aXRpZXNbZW50XVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWxcbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30galBhdGhcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gZG9udFRyaW1cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaGFzQXR0cmlidXRlc1xuICogQHBhcmFtIHtib29sZWFufSBpc0xlYWZOb2RlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGVzY2FwZUVudGl0aWVzXG4gKi9cbmZ1bmN0aW9uIHBhcnNlVGV4dERhdGEodmFsLCB0YWdOYW1lLCBqUGF0aCwgZG9udFRyaW0sIGhhc0F0dHJpYnV0ZXMsIGlzTGVhZk5vZGUsIGVzY2FwZUVudGl0aWVzKSB7XG4gIGlmICh2YWwgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMudHJpbVZhbHVlcyAmJiAhZG9udFRyaW0pIHtcbiAgICAgIHZhbCA9IHZhbC50cmltKCk7XG4gICAgfVxuICAgIGlmKHZhbC5sZW5ndGggPiAwKXtcbiAgICAgIGlmKCFlc2NhcGVFbnRpdGllcykgdmFsID0gdGhpcy5yZXBsYWNlRW50aXRpZXNWYWx1ZSh2YWwpO1xuICAgICAgXG4gICAgICBjb25zdCBuZXd2YWwgPSB0aGlzLm9wdGlvbnMudGFnVmFsdWVQcm9jZXNzb3IodGFnTmFtZSwgdmFsLCBqUGF0aCwgaGFzQXR0cmlidXRlcywgaXNMZWFmTm9kZSk7XG4gICAgICBpZihuZXd2YWwgPT09IG51bGwgfHwgbmV3dmFsID09PSB1bmRlZmluZWQpe1xuICAgICAgICAvL2Rvbid0IHBhcnNlXG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9ZWxzZSBpZih0eXBlb2YgbmV3dmFsICE9PSB0eXBlb2YgdmFsIHx8IG5ld3ZhbCAhPT0gdmFsKXtcbiAgICAgICAgLy9vdmVyd3JpdGVcbiAgICAgICAgcmV0dXJuIG5ld3ZhbDtcbiAgICAgIH1lbHNlIGlmKHRoaXMub3B0aW9ucy50cmltVmFsdWVzKXtcbiAgICAgICAgcmV0dXJuIHBhcnNlVmFsdWUodmFsLCB0aGlzLm9wdGlvbnMucGFyc2VUYWdWYWx1ZSwgdGhpcy5vcHRpb25zLm51bWJlclBhcnNlT3B0aW9ucyk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgY29uc3QgdHJpbW1lZFZhbCA9IHZhbC50cmltKCk7XG4gICAgICAgIGlmKHRyaW1tZWRWYWwgPT09IHZhbCl7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlVmFsdWUodmFsLCB0aGlzLm9wdGlvbnMucGFyc2VUYWdWYWx1ZSwgdGhpcy5vcHRpb25zLm51bWJlclBhcnNlT3B0aW9ucyk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIHJldHVybiB2YWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZU5hbWVTcGFjZSh0YWduYW1lKSB7XG4gIGlmICh0aGlzLm9wdGlvbnMucmVtb3ZlTlNQcmVmaXgpIHtcbiAgICBjb25zdCB0YWdzID0gdGFnbmFtZS5zcGxpdCgnOicpO1xuICAgIGNvbnN0IHByZWZpeCA9IHRhZ25hbWUuY2hhckF0KDApID09PSAnLycgPyAnLycgOiAnJztcbiAgICBpZiAodGFnc1swXSA9PT0gJ3htbG5zJykge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBpZiAodGFncy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHRhZ25hbWUgPSBwcmVmaXggKyB0YWdzWzFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGFnbmFtZTtcbn1cblxuLy9UT0RPOiBjaGFuZ2UgcmVnZXggdG8gY2FwdHVyZSBOU1xuLy9jb25zdCBhdHRyc1JlZ3ggPSBuZXcgUmVnRXhwKFwiKFtcXFxcd1xcXFwtXFxcXC5cXFxcOl0rKVxcXFxzKj1cXFxccyooWydcXFwiXSkoKC58XFxuKSo/KVxcXFwyXCIsXCJnbVwiKTtcbmNvbnN0IGF0dHJzUmVneCA9IG5ldyBSZWdFeHAoJyhbXlxcXFxzPV0rKVxcXFxzKig9XFxcXHMqKFtcXCdcIl0pKFtcXFxcc1xcXFxTXSo/KVxcXFwzKT8nLCAnZ20nKTtcblxuZnVuY3Rpb24gYnVpbGRBdHRyaWJ1dGVzTWFwKGF0dHJTdHIsIGpQYXRoKSB7XG4gIGlmICghdGhpcy5vcHRpb25zLmlnbm9yZUF0dHJpYnV0ZXMgJiYgdHlwZW9mIGF0dHJTdHIgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gYXR0clN0ciA9IGF0dHJTdHIucmVwbGFjZSgvXFxyP1xcbi9nLCAnICcpO1xuICAgIC8vYXR0clN0ciA9IGF0dHJTdHIgfHwgYXR0clN0ci50cmltKCk7XG5cbiAgICBjb25zdCBtYXRjaGVzID0gdXRpbC5nZXRBbGxNYXRjaGVzKGF0dHJTdHIsIGF0dHJzUmVneCk7XG4gICAgY29uc3QgbGVuID0gbWF0Y2hlcy5sZW5ndGg7IC8vZG9uJ3QgbWFrZSBpdCBpbmxpbmVcbiAgICBjb25zdCBhdHRycyA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IGF0dHJOYW1lID0gdGhpcy5yZXNvbHZlTmFtZVNwYWNlKG1hdGNoZXNbaV1bMV0pO1xuICAgICAgbGV0IG9sZFZhbCA9IG1hdGNoZXNbaV1bNF07XG4gICAgICBjb25zdCBhTmFtZSA9IHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVOYW1lUHJlZml4ICsgYXR0ck5hbWU7XG4gICAgICBpZiAoYXR0ck5hbWUubGVuZ3RoKSB7XG4gICAgICAgIGlmIChvbGRWYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudHJpbVZhbHVlcykge1xuICAgICAgICAgICAgb2xkVmFsID0gb2xkVmFsLnRyaW0oKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb2xkVmFsID0gdGhpcy5yZXBsYWNlRW50aXRpZXNWYWx1ZShvbGRWYWwpO1xuICAgICAgICAgIGNvbnN0IG5ld1ZhbCA9IHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVWYWx1ZVByb2Nlc3NvcihhdHRyTmFtZSwgb2xkVmFsLCBqUGF0aCk7XG4gICAgICAgICAgaWYobmV3VmFsID09PSBudWxsIHx8IG5ld1ZhbCA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgIC8vZG9uJ3QgcGFyc2VcbiAgICAgICAgICAgIGF0dHJzW2FOYW1lXSA9IG9sZFZhbDtcbiAgICAgICAgICB9ZWxzZSBpZih0eXBlb2YgbmV3VmFsICE9PSB0eXBlb2Ygb2xkVmFsIHx8IG5ld1ZhbCAhPT0gb2xkVmFsKXtcbiAgICAgICAgICAgIC8vb3ZlcndyaXRlXG4gICAgICAgICAgICBhdHRyc1thTmFtZV0gPSBuZXdWYWw7XG4gICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAvL3BhcnNlXG4gICAgICAgICAgICBhdHRyc1thTmFtZV0gPSBwYXJzZVZhbHVlKFxuICAgICAgICAgICAgICBvbGRWYWwsXG4gICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5wYXJzZUF0dHJpYnV0ZVZhbHVlLFxuICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMubnVtYmVyUGFyc2VPcHRpb25zXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuYWxsb3dCb29sZWFuQXR0cmlidXRlcykge1xuICAgICAgICAgIGF0dHJzW2FOYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFPYmplY3Qua2V5cyhhdHRycykubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMuYXR0cmlidXRlc0dyb3VwTmFtZSkge1xuICAgICAgY29uc3QgYXR0ckNvbGxlY3Rpb24gPSB7fTtcbiAgICAgIGF0dHJDb2xsZWN0aW9uW3RoaXMub3B0aW9ucy5hdHRyaWJ1dGVzR3JvdXBOYW1lXSA9IGF0dHJzO1xuICAgICAgcmV0dXJuIGF0dHJDb2xsZWN0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gYXR0cnM7XG4gIH1cbn1cblxuY29uc3QgcGFyc2VYbWwgPSBmdW5jdGlvbih4bWxEYXRhKSB7XG4gIHhtbERhdGEgPSB4bWxEYXRhLnJlcGxhY2UoL1xcclxcbj8vZywgXCJcXG5cIik7IC8vVE9ETzogcmVtb3ZlIHRoaXMgbGluZVxuICBjb25zdCB4bWxPYmogPSBuZXcgeG1sTm9kZSgnIXhtbCcpO1xuICBsZXQgY3VycmVudE5vZGUgPSB4bWxPYmo7XG4gIGxldCB0ZXh0RGF0YSA9IFwiXCI7XG4gIGxldCBqUGF0aCA9IFwiXCI7XG4gIGZvcihsZXQgaT0wOyBpPCB4bWxEYXRhLmxlbmd0aDsgaSsrKXsvL2ZvciBlYWNoIGNoYXIgaW4gWE1MIGRhdGFcbiAgICBjb25zdCBjaCA9IHhtbERhdGFbaV07XG4gICAgaWYoY2ggPT09ICc8Jyl7XG4gICAgICAvLyBjb25zdCBuZXh0SW5kZXggPSBpKzE7XG4gICAgICAvLyBjb25zdCBfMm5kQ2hhciA9IHhtbERhdGFbbmV4dEluZGV4XTtcbiAgICAgIGlmKCB4bWxEYXRhW2krMV0gPT09ICcvJykgey8vQ2xvc2luZyBUYWdcbiAgICAgICAgY29uc3QgY2xvc2VJbmRleCA9IGZpbmRDbG9zaW5nSW5kZXgoeG1sRGF0YSwgXCI+XCIsIGksIFwiQ2xvc2luZyBUYWcgaXMgbm90IGNsb3NlZC5cIilcbiAgICAgICAgbGV0IHRhZ05hbWUgPSB4bWxEYXRhLnN1YnN0cmluZyhpKzIsY2xvc2VJbmRleCkudHJpbSgpO1xuXG4gICAgICAgIGlmKHRoaXMub3B0aW9ucy5yZW1vdmVOU1ByZWZpeCl7XG4gICAgICAgICAgY29uc3QgY29sb25JbmRleCA9IHRhZ05hbWUuaW5kZXhPZihcIjpcIik7XG4gICAgICAgICAgaWYoY29sb25JbmRleCAhPT0gLTEpe1xuICAgICAgICAgICAgdGFnTmFtZSA9IHRhZ05hbWUuc3Vic3RyKGNvbG9uSW5kZXgrMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoY3VycmVudE5vZGUpe1xuICAgICAgICAgIHRleHREYXRhID0gdGhpcy5zYXZlVGV4dFRvUGFyZW50VGFnKHRleHREYXRhLCBjdXJyZW50Tm9kZSwgalBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgalBhdGggPSBqUGF0aC5zdWJzdHIoMCwgalBhdGgubGFzdEluZGV4T2YoXCIuXCIpKTtcbiAgICAgICAgXG4gICAgICAgIGN1cnJlbnROb2RlID0gdGhpcy50YWdzTm9kZVN0YWNrLnBvcCgpOy8vYXZvaWQgcmVjdXJzc2lvbiwgc2V0IHRoZSBwYXJlbnQgdGFnIHNjb3BlXG4gICAgICAgIHRleHREYXRhID0gXCJcIjtcbiAgICAgICAgaSA9IGNsb3NlSW5kZXg7XG4gICAgICB9IGVsc2UgaWYoIHhtbERhdGFbaSsxXSA9PT0gJz8nKSB7XG5cbiAgICAgICAgbGV0IHRhZ0RhdGEgPSByZWFkVGFnRXhwKHhtbERhdGEsaSwgZmFsc2UsIFwiPz5cIik7XG4gICAgICAgIGlmKCF0YWdEYXRhKSB0aHJvdyBuZXcgRXJyb3IoXCJQaSBUYWcgaXMgbm90IGNsb3NlZC5cIik7XG5cbiAgICAgICAgdGV4dERhdGEgPSB0aGlzLnNhdmVUZXh0VG9QYXJlbnRUYWcodGV4dERhdGEsIGN1cnJlbnROb2RlLCBqUGF0aCk7XG4gICAgICAgIGlmKCAodGhpcy5vcHRpb25zLmlnbm9yZURlY2xhcmF0aW9uICYmIHRhZ0RhdGEudGFnTmFtZSA9PT0gXCI/eG1sXCIpIHx8IHRoaXMub3B0aW9ucy5pZ25vcmVQaVRhZ3Mpe1xuXG4gICAgICAgIH1lbHNle1xuICBcbiAgICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBuZXcgeG1sTm9kZSh0YWdEYXRhLnRhZ05hbWUpO1xuICAgICAgICAgIGNoaWxkTm9kZS5hZGQodGhpcy5vcHRpb25zLnRleHROb2RlTmFtZSwgXCJcIik7XG4gICAgICAgICAgXG4gICAgICAgICAgaWYodGFnRGF0YS50YWdOYW1lICE9PSB0YWdEYXRhLnRhZ0V4cCAmJiB0YWdEYXRhLmF0dHJFeHBQcmVzZW50KXtcbiAgICAgICAgICAgIGNoaWxkTm9kZVtcIjpAXCJdID0gdGhpcy5idWlsZEF0dHJpYnV0ZXNNYXAodGFnRGF0YS50YWdFeHAsIGpQYXRoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudE5vZGUuYWRkQ2hpbGQoY2hpbGROb2RlKTtcblxuICAgICAgICB9XG5cblxuICAgICAgICBpID0gdGFnRGF0YS5jbG9zZUluZGV4ICsgMTtcbiAgICAgIH0gZWxzZSBpZih4bWxEYXRhLnN1YnN0cihpICsgMSwgMykgPT09ICchLS0nKSB7XG4gICAgICAgIGNvbnN0IGVuZEluZGV4ID0gZmluZENsb3NpbmdJbmRleCh4bWxEYXRhLCBcIi0tPlwiLCBpKzQsIFwiQ29tbWVudCBpcyBub3QgY2xvc2VkLlwiKVxuICAgICAgICBpZih0aGlzLm9wdGlvbnMuY29tbWVudFByb3BOYW1lKXtcbiAgICAgICAgICBjb25zdCBjb21tZW50ID0geG1sRGF0YS5zdWJzdHJpbmcoaSArIDQsIGVuZEluZGV4IC0gMik7XG5cbiAgICAgICAgICB0ZXh0RGF0YSA9IHRoaXMuc2F2ZVRleHRUb1BhcmVudFRhZyh0ZXh0RGF0YSwgY3VycmVudE5vZGUsIGpQYXRoKTtcblxuICAgICAgICAgIGN1cnJlbnROb2RlLmFkZCh0aGlzLm9wdGlvbnMuY29tbWVudFByb3BOYW1lLCBbIHsgW3RoaXMub3B0aW9ucy50ZXh0Tm9kZU5hbWVdIDogY29tbWVudCB9IF0pO1xuICAgICAgICB9XG4gICAgICAgIGkgPSBlbmRJbmRleDtcbiAgICAgIH0gZWxzZSBpZiggeG1sRGF0YS5zdWJzdHIoaSArIDEsIDIpID09PSAnIUQnKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlYWREb2NUeXBlKHhtbERhdGEsIGkpO1xuICAgICAgICB0aGlzLmRvY1R5cGVFbnRpdGllcyA9IHJlc3VsdC5lbnRpdGllcztcbiAgICAgICAgaSA9IHJlc3VsdC5pO1xuICAgICAgfWVsc2UgaWYoeG1sRGF0YS5zdWJzdHIoaSArIDEsIDIpID09PSAnIVsnKSB7XG4gICAgICAgIGNvbnN0IGNsb3NlSW5kZXggPSBmaW5kQ2xvc2luZ0luZGV4KHhtbERhdGEsIFwiXV0+XCIsIGksIFwiQ0RBVEEgaXMgbm90IGNsb3NlZC5cIikgLSAyO1xuICAgICAgICBjb25zdCB0YWdFeHAgPSB4bWxEYXRhLnN1YnN0cmluZyhpICsgOSxjbG9zZUluZGV4KTtcblxuICAgICAgICB0ZXh0RGF0YSA9IHRoaXMuc2F2ZVRleHRUb1BhcmVudFRhZyh0ZXh0RGF0YSwgY3VycmVudE5vZGUsIGpQYXRoKTtcblxuICAgICAgICAvL2NkYXRhIHNob3VsZCBiZSBzZXQgZXZlbiBpZiBpdCBpcyAwIGxlbmd0aCBzdHJpbmdcbiAgICAgICAgaWYodGhpcy5vcHRpb25zLmNkYXRhUHJvcE5hbWUpe1xuICAgICAgICAgIC8vIGxldCB2YWwgPSB0aGlzLnBhcnNlVGV4dERhdGEodGFnRXhwLCB0aGlzLm9wdGlvbnMuY2RhdGFQcm9wTmFtZSwgalBhdGggKyBcIi5cIiArIHRoaXMub3B0aW9ucy5jZGF0YVByb3BOYW1lLCB0cnVlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgLy8gaWYoIXZhbCkgdmFsID0gXCJcIjtcbiAgICAgICAgICBjdXJyZW50Tm9kZS5hZGQodGhpcy5vcHRpb25zLmNkYXRhUHJvcE5hbWUsIFsgeyBbdGhpcy5vcHRpb25zLnRleHROb2RlTmFtZV0gOiB0YWdFeHAgfSBdKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgbGV0IHZhbCA9IHRoaXMucGFyc2VUZXh0RGF0YSh0YWdFeHAsIGN1cnJlbnROb2RlLnRhZ25hbWUsIGpQYXRoLCB0cnVlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgaWYoIXZhbCkgdmFsID0gXCJcIjtcbiAgICAgICAgICBjdXJyZW50Tm9kZS5hZGQodGhpcy5vcHRpb25zLnRleHROb2RlTmFtZSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaSA9IGNsb3NlSW5kZXggKyAyO1xuICAgICAgfWVsc2Ugey8vT3BlbmluZyB0YWdcbiAgICAgICBcbiAgICAgICAgbGV0IHJlc3VsdCA9IHJlYWRUYWdFeHAoeG1sRGF0YSxpLCB0aGlzLiBvcHRpb25zLnJlbW92ZU5TUHJlZml4KTtcbiAgICAgICAgbGV0IHRhZ05hbWU9IHJlc3VsdC50YWdOYW1lO1xuICAgICAgICBsZXQgdGFnRXhwID0gcmVzdWx0LnRhZ0V4cDtcbiAgICAgICAgbGV0IGF0dHJFeHBQcmVzZW50ID0gcmVzdWx0LmF0dHJFeHBQcmVzZW50O1xuICAgICAgICBsZXQgY2xvc2VJbmRleCA9IHJlc3VsdC5jbG9zZUluZGV4O1xuICAgICAgICBcbiAgICAgICAgLy9zYXZlIHRleHQgYXMgY2hpbGQgbm9kZVxuICAgICAgICBpZiAoY3VycmVudE5vZGUgJiYgdGV4dERhdGEpIHtcbiAgICAgICAgICBpZihjdXJyZW50Tm9kZS50YWduYW1lICE9PSAnIXhtbCcpe1xuICAgICAgICAgICAgLy93aGVuIG5lc3RlZCB0YWcgaXMgZm91bmRcbiAgICAgICAgICAgIHRleHREYXRhID0gdGhpcy5zYXZlVGV4dFRvUGFyZW50VGFnKHRleHREYXRhLCBjdXJyZW50Tm9kZSwgalBhdGgsIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZih0YWdOYW1lICE9PSB4bWxPYmoudGFnbmFtZSl7XG4gICAgICAgICAgalBhdGggKz0galBhdGggPyBcIi5cIiArIHRhZ05hbWUgOiB0YWdOYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9jaGVjayBpZiBsYXN0IHRhZyB3YXMgdW5wYWlyZWQgdGFnXG4gICAgICAgIGNvbnN0IGxhc3RUYWcgPSBjdXJyZW50Tm9kZTtcbiAgICAgICAgaWYobGFzdFRhZyAmJiB0aGlzLm9wdGlvbnMudW5wYWlyZWRUYWdzLmluZGV4T2YobGFzdFRhZy50YWduYW1lKSAhPT0gLTEgKXtcbiAgICAgICAgICBjdXJyZW50Tm9kZSA9IHRoaXMudGFnc05vZGVTdGFjay5wb3AoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmlzSXRTdG9wTm9kZSh0aGlzLm9wdGlvbnMuc3RvcE5vZGVzLCBqUGF0aCwgdGFnTmFtZSkpIHsgLy9UT0RPOiBuYW1lc3BhY2VcbiAgICAgICAgICBsZXQgdGFnQ29udGVudCA9IFwiXCI7XG4gICAgICAgICAgLy9zZWxmLWNsb3NpbmcgdGFnXG4gICAgICAgICAgaWYodGFnRXhwLmxlbmd0aCA+IDAgJiYgdGFnRXhwLmxhc3RJbmRleE9mKFwiL1wiKSA9PT0gdGFnRXhwLmxlbmd0aCAtIDEpe1xuICAgICAgICAgICAgaSA9IHJlc3VsdC5jbG9zZUluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvL2Jvb2xlYW4gdGFnXG4gICAgICAgICAgZWxzZSBpZih0aGlzLm9wdGlvbnMudW5wYWlyZWRUYWdzLmluZGV4T2YodGFnTmFtZSkgIT09IC0xKXtcbiAgICAgICAgICAgIGkgPSByZXN1bHQuY2xvc2VJbmRleDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy9ub3JtYWwgdGFnXG4gICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgIC8vcmVhZCB1bnRpbCBjbG9zaW5nIHRhZyBpcyBmb3VuZFxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5yZWFkU3RvcE5vZGVEYXRhKHhtbERhdGEsIHRhZ05hbWUsIGNsb3NlSW5kZXggKyAxKTtcbiAgICAgICAgICAgIGlmKCFyZXN1bHQpIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBlbmQgb2YgJHt0YWdOYW1lfWApO1xuICAgICAgICAgICAgaSA9IHJlc3VsdC5pO1xuICAgICAgICAgICAgdGFnQ29udGVudCA9IHJlc3VsdC50YWdDb250ZW50O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGNoaWxkTm9kZSA9IG5ldyB4bWxOb2RlKHRhZ05hbWUpO1xuICAgICAgICAgIGlmKHRhZ05hbWUgIT09IHRhZ0V4cCAmJiBhdHRyRXhwUHJlc2VudCl7XG4gICAgICAgICAgICBjaGlsZE5vZGVbXCI6QFwiXSA9IHRoaXMuYnVpbGRBdHRyaWJ1dGVzTWFwKHRhZ0V4cCwgalBhdGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZih0YWdDb250ZW50KSB7XG4gICAgICAgICAgICB0YWdDb250ZW50ID0gdGhpcy5wYXJzZVRleHREYXRhKHRhZ0NvbnRlbnQsIHRhZ05hbWUsIGpQYXRoLCB0cnVlLCBhdHRyRXhwUHJlc2VudCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIGpQYXRoID0galBhdGguc3Vic3RyKDAsIGpQYXRoLmxhc3RJbmRleE9mKFwiLlwiKSk7XG4gICAgICAgICAgY2hpbGROb2RlLmFkZCh0aGlzLm9wdGlvbnMudGV4dE5vZGVOYW1lLCB0YWdDb250ZW50KTtcbiAgICAgICAgICBcbiAgICAgICAgICBjdXJyZW50Tm9kZS5hZGRDaGlsZChjaGlsZE5vZGUpO1xuICAgICAgICB9ZWxzZXtcbiAgLy9zZWxmQ2xvc2luZyB0YWdcbiAgICAgICAgICBpZih0YWdFeHAubGVuZ3RoID4gMCAmJiB0YWdFeHAubGFzdEluZGV4T2YoXCIvXCIpID09PSB0YWdFeHAubGVuZ3RoIC0gMSl7XG4gICAgICAgICAgICBpZih0YWdOYW1lW3RhZ05hbWUubGVuZ3RoIC0gMV0gPT09IFwiL1wiKXsgLy9yZW1vdmUgdHJhaWxpbmcgJy8nXG4gICAgICAgICAgICAgIHRhZ05hbWUgPSB0YWdOYW1lLnN1YnN0cigwLCB0YWdOYW1lLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgICB0YWdFeHAgPSB0YWdOYW1lO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgIHRhZ0V4cCA9IHRhZ0V4cC5zdWJzdHIoMCwgdGFnRXhwLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBuZXcgeG1sTm9kZSh0YWdOYW1lKTtcbiAgICAgICAgICAgIGlmKHRhZ05hbWUgIT09IHRhZ0V4cCAmJiBhdHRyRXhwUHJlc2VudCl7XG4gICAgICAgICAgICAgIGNoaWxkTm9kZVtcIjpAXCJdID0gdGhpcy5idWlsZEF0dHJpYnV0ZXNNYXAodGFnRXhwLCBqUGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBqUGF0aCA9IGpQYXRoLnN1YnN0cigwLCBqUGF0aC5sYXN0SW5kZXhPZihcIi5cIikpO1xuICAgICAgICAgICAgY3VycmVudE5vZGUuYWRkQ2hpbGQoY2hpbGROb2RlKTtcbiAgICAgICAgICB9XG4gICAgLy9vcGVuaW5nIHRhZ1xuICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICBjb25zdCBjaGlsZE5vZGUgPSBuZXcgeG1sTm9kZSggdGFnTmFtZSk7XG4gICAgICAgICAgICB0aGlzLnRhZ3NOb2RlU3RhY2sucHVzaChjdXJyZW50Tm9kZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmKHRhZ05hbWUgIT09IHRhZ0V4cCAmJiBhdHRyRXhwUHJlc2VudCl7XG4gICAgICAgICAgICAgIGNoaWxkTm9kZVtcIjpAXCJdID0gdGhpcy5idWlsZEF0dHJpYnV0ZXNNYXAodGFnRXhwLCBqUGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50Tm9kZS5hZGRDaGlsZChjaGlsZE5vZGUpO1xuICAgICAgICAgICAgY3VycmVudE5vZGUgPSBjaGlsZE5vZGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRleHREYXRhID0gXCJcIjtcbiAgICAgICAgICBpID0gY2xvc2VJbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1lbHNle1xuICAgICAgdGV4dERhdGEgKz0geG1sRGF0YVtpXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHhtbE9iai5jaGlsZDtcbn1cblxuY29uc3QgcmVwbGFjZUVudGl0aWVzVmFsdWUgPSBmdW5jdGlvbih2YWwpe1xuICBpZih0aGlzLm9wdGlvbnMucHJvY2Vzc0VudGl0aWVzKXtcbiAgICBmb3IobGV0IGVudGl0eU5hbWUgaW4gdGhpcy5kb2NUeXBlRW50aXRpZXMpe1xuICAgICAgY29uc3QgZW50aXR5ID0gdGhpcy5kb2NUeXBlRW50aXRpZXNbZW50aXR5TmFtZV07XG4gICAgICB2YWwgPSB2YWwucmVwbGFjZSggZW50aXR5LnJlZ3gsIGVudGl0eS52YWwpO1xuICAgIH1cbiAgICBmb3IobGV0IGVudGl0eU5hbWUgaW4gdGhpcy5sYXN0RW50aXRpZXMpe1xuICAgICAgY29uc3QgZW50aXR5ID0gdGhpcy5sYXN0RW50aXRpZXNbZW50aXR5TmFtZV07XG4gICAgICB2YWwgPSB2YWwucmVwbGFjZSggZW50aXR5LnJlZ2V4LCBlbnRpdHkudmFsKTtcbiAgICB9XG4gICAgaWYodGhpcy5vcHRpb25zLmh0bWxFbnRpdGllcyl7XG4gICAgICBmb3IobGV0IGVudGl0eU5hbWUgaW4gdGhpcy5odG1sRW50aXRpZXMpe1xuICAgICAgICBjb25zdCBlbnRpdHkgPSB0aGlzLmh0bWxFbnRpdGllc1tlbnRpdHlOYW1lXTtcbiAgICAgICAgdmFsID0gdmFsLnJlcGxhY2UoIGVudGl0eS5yZWdleCwgZW50aXR5LnZhbCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWw7XG59XG5mdW5jdGlvbiBzYXZlVGV4dFRvUGFyZW50VGFnKHRleHREYXRhLCBjdXJyZW50Tm9kZSwgalBhdGgsIGlzTGVhZk5vZGUpIHtcbiAgaWYgKHRleHREYXRhKSB7IC8vc3RvcmUgcHJldmlvdXNseSBjb2xsZWN0ZWQgZGF0YSBhcyB0ZXh0Tm9kZVxuICAgIGlmKGlzTGVhZk5vZGUgPT09IHVuZGVmaW5lZCkgaXNMZWFmTm9kZSA9IE9iamVjdC5rZXlzKGN1cnJlbnROb2RlLmNoaWxkKS5sZW5ndGggPT09IDBcbiAgICBcbiAgICB0ZXh0RGF0YSA9IHRoaXMucGFyc2VUZXh0RGF0YSh0ZXh0RGF0YSxcbiAgICAgIGN1cnJlbnROb2RlLnRhZ25hbWUsXG4gICAgICBqUGF0aCxcbiAgICAgIGZhbHNlLFxuICAgICAgY3VycmVudE5vZGVbXCI6QFwiXSA/IE9iamVjdC5rZXlzKGN1cnJlbnROb2RlW1wiOkBcIl0pLmxlbmd0aCAhPT0gMCA6IGZhbHNlLFxuICAgICAgaXNMZWFmTm9kZSk7XG5cbiAgICBpZiAodGV4dERhdGEgIT09IHVuZGVmaW5lZCAmJiB0ZXh0RGF0YSAhPT0gXCJcIilcbiAgICAgIGN1cnJlbnROb2RlLmFkZCh0aGlzLm9wdGlvbnMudGV4dE5vZGVOYW1lLCB0ZXh0RGF0YSk7XG4gICAgdGV4dERhdGEgPSBcIlwiO1xuICB9XG4gIHJldHVybiB0ZXh0RGF0YTtcbn1cblxuLy9UT0RPOiB1c2UgalBhdGggdG8gc2ltcGxpZnkgdGhlIGxvZ2ljXG4vKipcbiAqIFxuICogQHBhcmFtIHtzdHJpbmdbXX0gc3RvcE5vZGVzIFxuICogQHBhcmFtIHtzdHJpbmd9IGpQYXRoXG4gKiBAcGFyYW0ge3N0cmluZ30gY3VycmVudFRhZ05hbWUgXG4gKi9cbmZ1bmN0aW9uIGlzSXRTdG9wTm9kZShzdG9wTm9kZXMsIGpQYXRoLCBjdXJyZW50VGFnTmFtZSl7XG4gIGNvbnN0IGFsbE5vZGVzRXhwID0gXCIqLlwiICsgY3VycmVudFRhZ05hbWU7XG4gIGZvciAoY29uc3Qgc3RvcE5vZGVQYXRoIGluIHN0b3BOb2Rlcykge1xuICAgIGNvbnN0IHN0b3BOb2RlRXhwID0gc3RvcE5vZGVzW3N0b3BOb2RlUGF0aF07XG4gICAgaWYoIGFsbE5vZGVzRXhwID09PSBzdG9wTm9kZUV4cCB8fCBqUGF0aCA9PT0gc3RvcE5vZGVFeHAgICkgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHRhZyBFeHByZXNzaW9uIGFuZCB3aGVyZSBpdCBpcyBlbmRpbmcgaGFuZGxpbmcgc2luZ2xlLWRvYnVsZSBxdW90ZXMgc2l0dWF0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30geG1sRGF0YSBcbiAqIEBwYXJhbSB7bnVtYmVyfSBpIHN0YXJ0aW5nIGluZGV4XG4gKiBAcmV0dXJucyBcbiAqL1xuZnVuY3Rpb24gdGFnRXhwV2l0aENsb3NpbmdJbmRleCh4bWxEYXRhLCBpLCBjbG9zaW5nQ2hhciA9IFwiPlwiKXtcbiAgbGV0IGF0dHJCb3VuZGFyeTtcbiAgbGV0IHRhZ0V4cCA9IFwiXCI7XG4gIGZvciAobGV0IGluZGV4ID0gaTsgaW5kZXggPCB4bWxEYXRhLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGxldCBjaCA9IHhtbERhdGFbaW5kZXhdO1xuICAgIGlmIChhdHRyQm91bmRhcnkpIHtcbiAgICAgICAgaWYgKGNoID09PSBhdHRyQm91bmRhcnkpIGF0dHJCb3VuZGFyeSA9IFwiXCI7Ly9yZXNldFxuICAgIH0gZWxzZSBpZiAoY2ggPT09ICdcIicgfHwgY2ggPT09IFwiJ1wiKSB7XG4gICAgICAgIGF0dHJCb3VuZGFyeSA9IGNoO1xuICAgIH0gZWxzZSBpZiAoY2ggPT09IGNsb3NpbmdDaGFyWzBdKSB7XG4gICAgICBpZihjbG9zaW5nQ2hhclsxXSl7XG4gICAgICAgIGlmKHhtbERhdGFbaW5kZXggKyAxXSA9PT0gY2xvc2luZ0NoYXJbMV0pe1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhOiB0YWdFeHAsXG4gICAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1lbHNle1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhdGE6IHRhZ0V4cCxcbiAgICAgICAgICBpbmRleDogaW5kZXhcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY2ggPT09ICdcXHQnKSB7XG4gICAgICBjaCA9IFwiIFwiXG4gICAgfVxuICAgIHRhZ0V4cCArPSBjaDtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kQ2xvc2luZ0luZGV4KHhtbERhdGEsIHN0ciwgaSwgZXJyTXNnKXtcbiAgY29uc3QgY2xvc2luZ0luZGV4ID0geG1sRGF0YS5pbmRleE9mKHN0ciwgaSk7XG4gIGlmKGNsb3NpbmdJbmRleCA9PT0gLTEpe1xuICAgIHRocm93IG5ldyBFcnJvcihlcnJNc2cpXG4gIH1lbHNle1xuICAgIHJldHVybiBjbG9zaW5nSW5kZXggKyBzdHIubGVuZ3RoIC0gMTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWFkVGFnRXhwKHhtbERhdGEsaSwgcmVtb3ZlTlNQcmVmaXgsIGNsb3NpbmdDaGFyID0gXCI+XCIpe1xuICBjb25zdCByZXN1bHQgPSB0YWdFeHBXaXRoQ2xvc2luZ0luZGV4KHhtbERhdGEsIGkrMSwgY2xvc2luZ0NoYXIpO1xuICBpZighcmVzdWx0KSByZXR1cm47XG4gIGxldCB0YWdFeHAgPSByZXN1bHQuZGF0YTtcbiAgY29uc3QgY2xvc2VJbmRleCA9IHJlc3VsdC5pbmRleDtcbiAgY29uc3Qgc2VwYXJhdG9ySW5kZXggPSB0YWdFeHAuc2VhcmNoKC9cXHMvKTtcbiAgbGV0IHRhZ05hbWUgPSB0YWdFeHA7XG4gIGxldCBhdHRyRXhwUHJlc2VudCA9IHRydWU7XG4gIGlmKHNlcGFyYXRvckluZGV4ICE9PSAtMSl7Ly9zZXBhcmF0ZSB0YWcgbmFtZSBhbmQgYXR0cmlidXRlcyBleHByZXNzaW9uXG4gICAgdGFnTmFtZSA9IHRhZ0V4cC5zdWJzdHIoMCwgc2VwYXJhdG9ySW5kZXgpLnJlcGxhY2UoL1xcc1xccyokLywgJycpO1xuICAgIHRhZ0V4cCA9IHRhZ0V4cC5zdWJzdHIoc2VwYXJhdG9ySW5kZXggKyAxKTtcbiAgfVxuXG4gIGlmKHJlbW92ZU5TUHJlZml4KXtcbiAgICBjb25zdCBjb2xvbkluZGV4ID0gdGFnTmFtZS5pbmRleE9mKFwiOlwiKTtcbiAgICBpZihjb2xvbkluZGV4ICE9PSAtMSl7XG4gICAgICB0YWdOYW1lID0gdGFnTmFtZS5zdWJzdHIoY29sb25JbmRleCsxKTtcbiAgICAgIGF0dHJFeHBQcmVzZW50ID0gdGFnTmFtZSAhPT0gcmVzdWx0LmRhdGEuc3Vic3RyKGNvbG9uSW5kZXggKyAxKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRhZ05hbWU6IHRhZ05hbWUsXG4gICAgdGFnRXhwOiB0YWdFeHAsXG4gICAgY2xvc2VJbmRleDogY2xvc2VJbmRleCxcbiAgICBhdHRyRXhwUHJlc2VudDogYXR0ckV4cFByZXNlbnQsXG4gIH1cbn1cbi8qKlxuICogZmluZCBwYWlyZWQgdGFnIGZvciBhIHN0b3Agbm9kZVxuICogQHBhcmFtIHtzdHJpbmd9IHhtbERhdGEgXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZSBcbiAqIEBwYXJhbSB7bnVtYmVyfSBpIFxuICovXG5mdW5jdGlvbiByZWFkU3RvcE5vZGVEYXRhKHhtbERhdGEsIHRhZ05hbWUsIGkpe1xuICBjb25zdCBzdGFydEluZGV4ID0gaTtcbiAgZm9yICg7IGkgPCB4bWxEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYoIHhtbERhdGFbaV0gPT09IFwiPFwiICYmIHhtbERhdGFbaSsxXSA9PT0gXCIvXCIpeyBcbiAgICAgICAgY29uc3QgY2xvc2VJbmRleCA9IGZpbmRDbG9zaW5nSW5kZXgoeG1sRGF0YSwgXCI+XCIsIGksIGAke3RhZ05hbWV9IGlzIG5vdCBjbG9zZWRgKTtcbiAgICAgICAgbGV0IGNsb3NlVGFnTmFtZSA9IHhtbERhdGEuc3Vic3RyaW5nKGkrMixjbG9zZUluZGV4KS50cmltKCk7XG4gICAgICAgIGlmKGNsb3NlVGFnTmFtZSA9PT0gdGFnTmFtZSl7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRhZ0NvbnRlbnQ6IHhtbERhdGEuc3Vic3RyaW5nKHN0YXJ0SW5kZXgsIGkpLFxuICAgICAgICAgICAgaSA6IGNsb3NlSW5kZXhcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaT1jbG9zZUluZGV4O1xuICAgICAgfVxuICB9Ly9lbmQgZm9yIGxvb3Bcbn1cblxuZnVuY3Rpb24gcGFyc2VWYWx1ZSh2YWwsIHNob3VsZFBhcnNlLCBvcHRpb25zKSB7XG4gIGlmIChzaG91bGRQYXJzZSAmJiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIC8vY29uc29sZS5sb2cob3B0aW9ucylcbiAgICBjb25zdCBuZXd2YWwgPSB2YWwudHJpbSgpO1xuICAgIGlmKG5ld3ZhbCA9PT0gJ3RydWUnICkgcmV0dXJuIHRydWU7XG4gICAgZWxzZSBpZihuZXd2YWwgPT09ICdmYWxzZScgKSByZXR1cm4gZmFsc2U7XG4gICAgZWxzZSByZXR1cm4gdG9OdW1iZXIodmFsLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodXRpbC5pc0V4aXN0KHZhbCkpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cbn1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IE9yZGVyZWRPYmpQYXJzZXI7XG4iLCJjb25zdCB7IGJ1aWxkT3B0aW9uc30gPSByZXF1aXJlKFwiLi9PcHRpb25zQnVpbGRlclwiKTtcbmNvbnN0IE9yZGVyZWRPYmpQYXJzZXIgPSByZXF1aXJlKFwiLi9PcmRlcmVkT2JqUGFyc2VyXCIpO1xuY29uc3QgeyBwcmV0dGlmeX0gPSByZXF1aXJlKFwiLi9ub2RlMmpzb25cIik7XG5jb25zdCB2YWxpZGF0b3IgPSByZXF1aXJlKCcuLi92YWxpZGF0b3InKTtcblxuY2xhc3MgWE1MUGFyc2Vye1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpe1xuICAgICAgICB0aGlzLmV4dGVybmFsRW50aXRpZXMgPSB7fTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gYnVpbGRPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICBcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2UgWE1MIGRhdHMgdG8gSlMgb2JqZWN0IFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfEJ1ZmZlcn0geG1sRGF0YSBcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW58T2JqZWN0fSB2YWxpZGF0aW9uT3B0aW9uIFxuICAgICAqL1xuICAgIHBhcnNlKHhtbERhdGEsdmFsaWRhdGlvbk9wdGlvbil7XG4gICAgICAgIGlmKHR5cGVvZiB4bWxEYXRhID09PSBcInN0cmluZ1wiKXtcbiAgICAgICAgfWVsc2UgaWYoIHhtbERhdGEudG9TdHJpbmcpe1xuICAgICAgICAgICAgeG1sRGF0YSA9IHhtbERhdGEudG9TdHJpbmcoKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJYTUwgZGF0YSBpcyBhY2NlcHRlZCBpbiBTdHJpbmcgb3IgQnl0ZXNbXSBmb3JtLlwiKVxuICAgICAgICB9XG4gICAgICAgIGlmKCB2YWxpZGF0aW9uT3B0aW9uKXtcbiAgICAgICAgICAgIGlmKHZhbGlkYXRpb25PcHRpb24gPT09IHRydWUpIHZhbGlkYXRpb25PcHRpb24gPSB7fTsgLy92YWxpZGF0ZSB3aXRoIGRlZmF1bHQgb3B0aW9uc1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB2YWxpZGF0b3IudmFsaWRhdGUoeG1sRGF0YSwgdmFsaWRhdGlvbk9wdGlvbik7XG4gICAgICAgICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgIHRocm93IEVycm9yKCBgJHtyZXN1bHQuZXJyLm1zZ306JHtyZXN1bHQuZXJyLmxpbmV9OiR7cmVzdWx0LmVyci5jb2x9YCApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICBjb25zdCBvcmRlcmVkT2JqUGFyc2VyID0gbmV3IE9yZGVyZWRPYmpQYXJzZXIodGhpcy5vcHRpb25zKTtcbiAgICAgICAgb3JkZXJlZE9ialBhcnNlci5hZGRFeHRlcm5hbEVudGl0aWVzKHRoaXMuZXh0ZXJuYWxFbnRpdGllcyk7XG4gICAgICAgIGNvbnN0IG9yZGVyZWRSZXN1bHQgPSBvcmRlcmVkT2JqUGFyc2VyLnBhcnNlWG1sKHhtbERhdGEpO1xuICAgICAgICBpZih0aGlzLm9wdGlvbnMucHJlc2VydmVPcmRlciB8fCBvcmRlcmVkUmVzdWx0ID09PSB1bmRlZmluZWQpIHJldHVybiBvcmRlcmVkUmVzdWx0O1xuICAgICAgICBlbHNlIHJldHVybiBwcmV0dGlmeShvcmRlcmVkUmVzdWx0LCB0aGlzLm9wdGlvbnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBFbnRpdHkgd2hpY2ggaXMgbm90IGJ5IGRlZmF1bHQgc3VwcG9ydGVkIGJ5IHRoaXMgbGlicmFyeVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFxuICAgICAqL1xuICAgIGFkZEVudGl0eShrZXksIHZhbHVlKXtcbiAgICAgICAgaWYodmFsdWUuaW5kZXhPZihcIiZcIikgIT09IC0xKXtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVudGl0eSB2YWx1ZSBjYW4ndCBoYXZlICcmJ1wiKVxuICAgICAgICB9ZWxzZSBpZihrZXkuaW5kZXhPZihcIiZcIikgIT09IC0xIHx8IGtleS5pbmRleE9mKFwiO1wiKSAhPT0gLTEpe1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQW4gZW50aXR5IG11c3QgYmUgc2V0IHdpdGhvdXQgJyYnIGFuZCAnOycuIEVnLiB1c2UgJyN4RCcgZm9yICcmI3hEOydcIilcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB0aGlzLmV4dGVybmFsRW50aXRpZXNba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFhNTFBhcnNlcjsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogXG4gKiBAcGFyYW0ge2FycmF5fSBub2RlIFxuICogQHBhcmFtIHthbnl9IG9wdGlvbnMgXG4gKiBAcmV0dXJucyBcbiAqL1xuZnVuY3Rpb24gcHJldHRpZnkobm9kZSwgb3B0aW9ucyl7XG4gIHJldHVybiBjb21wcmVzcyggbm9kZSwgb3B0aW9ucyk7XG59XG5cbi8qKlxuICogXG4gKiBAcGFyYW0ge2FycmF5fSBhcnIgXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBcbiAqIEBwYXJhbSB7c3RyaW5nfSBqUGF0aCBcbiAqIEByZXR1cm5zIG9iamVjdFxuICovXG5mdW5jdGlvbiBjb21wcmVzcyhhcnIsIG9wdGlvbnMsIGpQYXRoKXtcbiAgbGV0IHRleHQ7XG4gIGNvbnN0IGNvbXByZXNzZWRPYmogPSB7fTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCB0YWdPYmogPSBhcnJbaV07XG4gICAgY29uc3QgcHJvcGVydHkgPSBwcm9wTmFtZSh0YWdPYmopO1xuICAgIGxldCBuZXdKcGF0aCA9IFwiXCI7XG4gICAgaWYoalBhdGggPT09IHVuZGVmaW5lZCkgbmV3SnBhdGggPSBwcm9wZXJ0eTtcbiAgICBlbHNlIG5ld0pwYXRoID0galBhdGggKyBcIi5cIiArIHByb3BlcnR5O1xuXG4gICAgaWYocHJvcGVydHkgPT09IG9wdGlvbnMudGV4dE5vZGVOYW1lKXtcbiAgICAgIGlmKHRleHQgPT09IHVuZGVmaW5lZCkgdGV4dCA9IHRhZ09ialtwcm9wZXJ0eV07XG4gICAgICBlbHNlIHRleHQgKz0gXCJcIiArIHRhZ09ialtwcm9wZXJ0eV07XG4gICAgfWVsc2UgaWYocHJvcGVydHkgPT09IHVuZGVmaW5lZCl7XG4gICAgICBjb250aW51ZTtcbiAgICB9ZWxzZSBpZih0YWdPYmpbcHJvcGVydHldKXtcbiAgICAgIFxuICAgICAgbGV0IHZhbCA9IGNvbXByZXNzKHRhZ09ialtwcm9wZXJ0eV0sIG9wdGlvbnMsIG5ld0pwYXRoKTtcbiAgICAgIGNvbnN0IGlzTGVhZiA9IGlzTGVhZlRhZyh2YWwsIG9wdGlvbnMpO1xuXG4gICAgICBpZih0YWdPYmpbXCI6QFwiXSl7XG4gICAgICAgIGFzc2lnbkF0dHJpYnV0ZXMoIHZhbCwgdGFnT2JqW1wiOkBcIl0sIG5ld0pwYXRoLCBvcHRpb25zKTtcbiAgICAgIH1lbHNlIGlmKE9iamVjdC5rZXlzKHZhbCkubGVuZ3RoID09PSAxICYmIHZhbFtvcHRpb25zLnRleHROb2RlTmFtZV0gIT09IHVuZGVmaW5lZCAmJiAhb3B0aW9ucy5hbHdheXNDcmVhdGVUZXh0Tm9kZSl7XG4gICAgICAgIHZhbCA9IHZhbFtvcHRpb25zLnRleHROb2RlTmFtZV07XG4gICAgICB9ZWxzZSBpZihPYmplY3Qua2V5cyh2YWwpLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgIGlmKG9wdGlvbnMuYWx3YXlzQ3JlYXRlVGV4dE5vZGUpIHZhbFtvcHRpb25zLnRleHROb2RlTmFtZV0gPSBcIlwiO1xuICAgICAgICBlbHNlIHZhbCA9IFwiXCI7XG4gICAgICB9XG5cbiAgICAgIGlmKGNvbXByZXNzZWRPYmpbcHJvcGVydHldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYoIUFycmF5LmlzQXJyYXkoY29tcHJlc3NlZE9ialtwcm9wZXJ0eV0pKSB7XG4gICAgICAgICAgY29tcHJlc3NlZE9ialtwcm9wZXJ0eV0gPSBbIGNvbXByZXNzZWRPYmpbcHJvcGVydHldIF07XG4gICAgICAgIH1cbiAgICAgICAgY29tcHJlc3NlZE9ialtwcm9wZXJ0eV0ucHVzaCh2YWwpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIC8vVE9ETzogaWYgYSBub2RlIGlzIG5vdCBhbiBhcnJheSwgdGhlbiBjaGVjayBpZiBpdCBzaG91bGQgYmUgYW4gYXJyYXlcbiAgICAgICAgLy9hbHNvIGRldGVybWluZSBpZiBpdCBpcyBhIGxlYWYgbm9kZVxuICAgICAgICBpZiAob3B0aW9ucy5pc0FycmF5KHByb3BlcnR5LCBuZXdKcGF0aCwgaXNMZWFmICkpIHtcbiAgICAgICAgICBjb21wcmVzc2VkT2JqW3Byb3BlcnR5XSA9IFt2YWxdO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICBjb21wcmVzc2VkT2JqW3Byb3BlcnR5XSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBcbiAgfVxuICAvLyBpZih0ZXh0ICYmIHRleHQubGVuZ3RoID4gMCkgY29tcHJlc3NlZE9ialtvcHRpb25zLnRleHROb2RlTmFtZV0gPSB0ZXh0O1xuICBpZih0eXBlb2YgdGV4dCA9PT0gXCJzdHJpbmdcIil7XG4gICAgaWYodGV4dC5sZW5ndGggPiAwKSBjb21wcmVzc2VkT2JqW29wdGlvbnMudGV4dE5vZGVOYW1lXSA9IHRleHQ7XG4gIH1lbHNlIGlmKHRleHQgIT09IHVuZGVmaW5lZCkgY29tcHJlc3NlZE9ialtvcHRpb25zLnRleHROb2RlTmFtZV0gPSB0ZXh0O1xuICByZXR1cm4gY29tcHJlc3NlZE9iajtcbn1cblxuZnVuY3Rpb24gcHJvcE5hbWUob2JqKXtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgaWYoa2V5ICE9PSBcIjpAXCIpIHJldHVybiBrZXk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzaWduQXR0cmlidXRlcyhvYmosIGF0dHJNYXAsIGpwYXRoLCBvcHRpb25zKXtcbiAgaWYgKGF0dHJNYXApIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYXR0ck1hcCk7XG4gICAgY29uc3QgbGVuID0ga2V5cy5sZW5ndGg7IC8vZG9uJ3QgbWFrZSBpdCBpbmxpbmVcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBhdHJyTmFtZSA9IGtleXNbaV07XG4gICAgICBpZiAob3B0aW9ucy5pc0FycmF5KGF0cnJOYW1lLCBqcGF0aCArIFwiLlwiICsgYXRyck5hbWUsIHRydWUsIHRydWUpKSB7XG4gICAgICAgIG9ialthdHJyTmFtZV0gPSBbIGF0dHJNYXBbYXRyck5hbWVdIF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmpbYXRyck5hbWVdID0gYXR0ck1hcFthdHJyTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzTGVhZlRhZyhvYmosIG9wdGlvbnMpe1xuICBjb25zdCBwcm9wQ291bnQgPSBPYmplY3Qua2V5cyhvYmopLmxlbmd0aDtcbiAgaWYoIHByb3BDb3VudCA9PT0gMCB8fCAocHJvcENvdW50ID09PSAxICYmIG9ialtvcHRpb25zLnRleHROb2RlTmFtZV0pICkgcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMucHJldHRpZnkgPSBwcmV0dGlmeTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY2xhc3MgWG1sTm9kZXtcbiAgY29uc3RydWN0b3IodGFnbmFtZSkge1xuICAgIHRoaXMudGFnbmFtZSA9IHRhZ25hbWU7XG4gICAgdGhpcy5jaGlsZCA9IFtdOyAvL25lc3RlZCB0YWdzLCB0ZXh0LCBjZGF0YSwgY29tbWVudHMgaW4gb3JkZXJcbiAgICB0aGlzW1wiOkBcIl0gPSB7fTsgLy9hdHRyaWJ1dGVzIG1hcFxuICB9XG4gIGFkZChrZXksdmFsKXtcbiAgICAvLyB0aGlzLmNoaWxkLnB1c2goIHtuYW1lIDoga2V5LCB2YWw6IHZhbCwgaXNDZGF0YTogaXNDZGF0YSB9KTtcbiAgICB0aGlzLmNoaWxkLnB1c2goIHtba2V5XTogdmFsIH0pO1xuICB9XG4gIGFkZENoaWxkKG5vZGUpIHtcbiAgICBpZihub2RlW1wiOkBcIl0gJiYgT2JqZWN0LmtleXMobm9kZVtcIjpAXCJdKS5sZW5ndGggPiAwKXtcbiAgICAgIHRoaXMuY2hpbGQucHVzaCggeyBbbm9kZS50YWduYW1lXTogbm9kZS5jaGlsZCwgW1wiOkBcIl06IG5vZGVbXCI6QFwiXSB9KTtcbiAgICB9ZWxzZXtcbiAgICAgIHRoaXMuY2hpbGQucHVzaCggeyBbbm9kZS50YWduYW1lXTogbm9kZS5jaGlsZCB9KTtcbiAgICB9XG4gIH07XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gWG1sTm9kZTsiLCJjb25zdCBoZXhSZWdleCA9IC9eWy0rXT8weFthLWZBLUYwLTldKyQvO1xuY29uc3QgbnVtUmVnZXggPSAvXihbXFwtXFwrXSk/KDAqKShcXC5bMC05XSsoW2VFXVxcLT9bMC05XSspP3xbMC05XSsoXFwuWzAtOV0rKFtlRV1cXC0/WzAtOV0rKT8pPykkLztcbi8vIGNvbnN0IG9jdFJlZ2V4ID0gLzB4W2EtejAtOV0rLztcbi8vIGNvbnN0IGJpblJlZ2V4ID0gLzB4W2EtejAtOV0rLztcblxuXG4vL3BvbHlmaWxsXG5pZiAoIU51bWJlci5wYXJzZUludCAmJiB3aW5kb3cucGFyc2VJbnQpIHtcbiAgICBOdW1iZXIucGFyc2VJbnQgPSB3aW5kb3cucGFyc2VJbnQ7XG59XG5pZiAoIU51bWJlci5wYXJzZUZsb2F0ICYmIHdpbmRvdy5wYXJzZUZsb2F0KSB7XG4gICAgTnVtYmVyLnBhcnNlRmxvYXQgPSB3aW5kb3cucGFyc2VGbG9hdDtcbn1cblxuICBcbmNvbnN0IGNvbnNpZGVyID0ge1xuICAgIGhleCA6ICB0cnVlLFxuICAgIGxlYWRpbmdaZXJvczogdHJ1ZSxcbiAgICBkZWNpbWFsUG9pbnQ6IFwiXFwuXCIsXG4gICAgZU5vdGF0aW9uOiB0cnVlXG4gICAgLy9za2lwTGlrZTogL3JlZ2V4L1xufTtcblxuZnVuY3Rpb24gdG9OdW1iZXIoc3RyLCBvcHRpb25zID0ge30pe1xuICAgIC8vIGNvbnN0IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBjb25zaWRlcik7XG4gICAgLy8gaWYob3B0LmxlYWRpbmdaZXJvcyA9PT0gZmFsc2Upe1xuICAgIC8vICAgICBvcHRpb25zLmxlYWRpbmdaZXJvcyA9IGZhbHNlO1xuICAgIC8vIH1lbHNlIGlmKG9wdC5oZXggPT09IGZhbHNlKXtcbiAgICAvLyAgICAgb3B0aW9ucy5oZXggPSBmYWxzZTtcbiAgICAvLyB9XG5cbiAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgY29uc2lkZXIsIG9wdGlvbnMgKTtcbiAgICBpZighc3RyIHx8IHR5cGVvZiBzdHIgIT09IFwic3RyaW5nXCIgKSByZXR1cm4gc3RyO1xuICAgIFxuICAgIGxldCB0cmltbWVkU3RyICA9IHN0ci50cmltKCk7XG4gICAgLy8gaWYodHJpbW1lZFN0ciA9PT0gXCIwLjBcIikgcmV0dXJuIDA7XG4gICAgLy8gZWxzZSBpZih0cmltbWVkU3RyID09PSBcIiswLjBcIikgcmV0dXJuIDA7XG4gICAgLy8gZWxzZSBpZih0cmltbWVkU3RyID09PSBcIi0wLjBcIikgcmV0dXJuIC0wO1xuXG4gICAgaWYob3B0aW9ucy5za2lwTGlrZSAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMuc2tpcExpa2UudGVzdCh0cmltbWVkU3RyKSkgcmV0dXJuIHN0cjtcbiAgICBlbHNlIGlmIChvcHRpb25zLmhleCAmJiBoZXhSZWdleC50ZXN0KHRyaW1tZWRTdHIpKSB7XG4gICAgICAgIHJldHVybiBOdW1iZXIucGFyc2VJbnQodHJpbW1lZFN0ciwgMTYpO1xuICAgIC8vIH0gZWxzZSBpZiAob3B0aW9ucy5wYXJzZU9jdCAmJiBvY3RSZWdleC50ZXN0KHN0cikpIHtcbiAgICAvLyAgICAgcmV0dXJuIE51bWJlci5wYXJzZUludCh2YWwsIDgpO1xuICAgIC8vIH1lbHNlIGlmIChvcHRpb25zLnBhcnNlQmluICYmIGJpblJlZ2V4LnRlc3Qoc3RyKSkge1xuICAgIC8vICAgICByZXR1cm4gTnVtYmVyLnBhcnNlSW50KHZhbCwgMik7XG4gICAgfWVsc2V7XG4gICAgICAgIC8vc2VwYXJhdGUgbmVnYXRpdmUgc2lnbiwgbGVhZGluZyB6ZXJvcywgYW5kIHJlc3QgbnVtYmVyXG4gICAgICAgIGNvbnN0IG1hdGNoID0gbnVtUmVnZXguZXhlYyh0cmltbWVkU3RyKTtcbiAgICAgICAgaWYobWF0Y2gpe1xuICAgICAgICAgICAgY29uc3Qgc2lnbiA9IG1hdGNoWzFdO1xuICAgICAgICAgICAgY29uc3QgbGVhZGluZ1plcm9zID0gbWF0Y2hbMl07XG4gICAgICAgICAgICBsZXQgbnVtVHJpbW1lZEJ5WmVyb3MgPSB0cmltWmVyb3MobWF0Y2hbM10pOyAvL2NvbXBsZXRlIG51bSB3aXRob3V0IGxlYWRpbmcgemVyb3NcbiAgICAgICAgICAgIC8vdHJpbSBlbmRpbmcgemVyb3MgZm9yIGZsb2F0aW5nIG51bWJlclxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBlTm90YXRpb24gPSBtYXRjaFs0XSB8fCBtYXRjaFs2XTtcbiAgICAgICAgICAgIGlmKCFvcHRpb25zLmxlYWRpbmdaZXJvcyAmJiBsZWFkaW5nWmVyb3MubGVuZ3RoID4gMCAmJiBzaWduICYmIHRyaW1tZWRTdHJbMl0gIT09IFwiLlwiKSByZXR1cm4gc3RyOyAvLy0wMTIzXG4gICAgICAgICAgICBlbHNlIGlmKCFvcHRpb25zLmxlYWRpbmdaZXJvcyAmJiBsZWFkaW5nWmVyb3MubGVuZ3RoID4gMCAmJiAhc2lnbiAmJiB0cmltbWVkU3RyWzFdICE9PSBcIi5cIikgcmV0dXJuIHN0cjsgLy8wMTIzXG4gICAgICAgICAgICBlbHNley8vbm8gbGVhZGluZyB6ZXJvcyBvciBsZWFkaW5nIHplcm9zIGFyZSBhbGxvd2VkXG4gICAgICAgICAgICAgICAgY29uc3QgbnVtID0gTnVtYmVyKHRyaW1tZWRTdHIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG51bVN0ciA9IFwiXCIgKyBudW07XG4gICAgICAgICAgICAgICAgaWYobnVtU3RyLnNlYXJjaCgvW2VFXS8pICE9PSAtMSl7IC8vZ2l2ZW4gbnVtYmVyIGlzIGxvbmcgYW5kIHBhcnNlZCB0byBlTm90YXRpb25cbiAgICAgICAgICAgICAgICAgICAgaWYob3B0aW9ucy5lTm90YXRpb24pIHJldHVybiBudW07XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgcmV0dXJuIHN0cjtcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZihlTm90YXRpb24peyAvL2dpdmVuIG51bWJlciBoYXMgZW5vdGF0aW9uXG4gICAgICAgICAgICAgICAgICAgIGlmKG9wdGlvbnMuZU5vdGF0aW9uKSByZXR1cm4gbnVtO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHJldHVybiBzdHI7XG4gICAgICAgICAgICAgICAgfWVsc2UgaWYodHJpbW1lZFN0ci5pbmRleE9mKFwiLlwiKSAhPT0gLTEpeyAvL2Zsb2F0aW5nIG51bWJlclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zdCBkZWNpbWFsUGFydCA9IG1hdGNoWzVdLnN1YnN0cigxKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc3QgaW50UGFydCA9IHRyaW1tZWRTdHIuc3Vic3RyKDAsdHJpbW1lZFN0ci5pbmRleE9mKFwiLlwiKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IHAgPSBudW1TdHIuaW5kZXhPZihcIi5cIik7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IGdpdmVuSW50UGFydCA9IG51bVN0ci5zdWJzdHIoMCxwKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc3QgZ2l2ZW5EZWNQYXJ0ID0gbnVtU3RyLnN1YnN0cihwKzEpO1xuICAgICAgICAgICAgICAgICAgICBpZihudW1TdHIgPT09IFwiMFwiICYmIChudW1UcmltbWVkQnlaZXJvcyA9PT0gXCJcIikgKSByZXR1cm4gbnVtOyAvLzAuMFxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKG51bVN0ciA9PT0gbnVtVHJpbW1lZEJ5WmVyb3MpIHJldHVybiBudW07IC8vMC40NTYuIDAuNzkwMDBcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiggc2lnbiAmJiBudW1TdHIgPT09IFwiLVwiK251bVRyaW1tZWRCeVplcm9zKSByZXR1cm4gbnVtO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHJldHVybiBzdHI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmKGxlYWRpbmdaZXJvcyl7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmKG51bVRyaW1tZWRCeVplcm9zID09PSBudW1TdHIpe1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgaWYob3B0aW9ucy5sZWFkaW5nWmVyb3MpIHJldHVybiBudW07XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBlbHNlIHJldHVybiBzdHI7XG4gICAgICAgICAgICAgICAgICAgIC8vIH1lbHNlIHJldHVybiBzdHI7XG4gICAgICAgICAgICAgICAgICAgIGlmKG51bVRyaW1tZWRCeVplcm9zID09PSBudW1TdHIpIHJldHVybiBudW07XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoc2lnbitudW1UcmltbWVkQnlaZXJvcyA9PT0gbnVtU3RyKSByZXR1cm4gbnVtO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIHJldHVybiBzdHI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYodHJpbW1lZFN0ciA9PT0gbnVtU3RyKSByZXR1cm4gbnVtO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYodHJpbW1lZFN0ciA9PT0gc2lnbitudW1TdHIpIHJldHVybiBudW07XG4gICAgICAgICAgICAgICAgLy8gZWxzZXtcbiAgICAgICAgICAgICAgICAvLyAgICAgLy9udW1iZXIgd2l0aCArLy0gc2lnblxuICAgICAgICAgICAgICAgIC8vICAgICB0cmltbWVkU3RyLnRlc3QoL1stK11bMC05XSk7XG5cbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVsc2UgaWYoIWVOb3RhdGlvbiAmJiB0cmltbWVkU3RyICYmIHRyaW1tZWRTdHIgIT09IE51bWJlcih0cmltbWVkU3RyKSApIHJldHVybiBzdHI7XG4gICAgICAgICAgICBcbiAgICAgICAgfWVsc2V7IC8vbm9uLW51bWVyaWMgc3RyaW5nXG4gICAgICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIFxuICogQHBhcmFtIHtzdHJpbmd9IG51bVN0ciB3aXRob3V0IGxlYWRpbmcgemVyb3NcbiAqIEByZXR1cm5zIFxuICovXG5mdW5jdGlvbiB0cmltWmVyb3MobnVtU3RyKXtcbiAgICBpZihudW1TdHIgJiYgbnVtU3RyLmluZGV4T2YoXCIuXCIpICE9PSAtMSl7Ly9mbG9hdFxuICAgICAgICBudW1TdHIgPSBudW1TdHIucmVwbGFjZSgvMCskLywgXCJcIik7IC8vcmVtb3ZlIGVuZGluZyB6ZXJvc1xuICAgICAgICBpZihudW1TdHIgPT09IFwiLlwiKSAgbnVtU3RyID0gXCIwXCI7XG4gICAgICAgIGVsc2UgaWYobnVtU3RyWzBdID09PSBcIi5cIikgIG51bVN0ciA9IFwiMFwiK251bVN0cjtcbiAgICAgICAgZWxzZSBpZihudW1TdHJbbnVtU3RyLmxlbmd0aC0xXSA9PT0gXCIuXCIpICBudW1TdHIgPSBudW1TdHIuc3Vic3RyKDAsbnVtU3RyLmxlbmd0aC0xKTtcbiAgICAgICAgcmV0dXJuIG51bVN0cjtcbiAgICB9XG4gICAgcmV0dXJuIG51bVN0cjtcbn1cbm1vZHVsZS5leHBvcnRzID0gdG9OdW1iZXJcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXF1aXJlZEFyZ3MocmVxdWlyZWQsIGFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoIDwgcmVxdWlyZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHJlcXVpcmVkICsgJyBhcmd1bWVudCcgKyAocmVxdWlyZWQgPiAxID8gJ3MnIDogJycpICsgJyByZXF1aXJlZCwgYnV0IG9ubHkgJyArIGFyZ3MubGVuZ3RoICsgJyBwcmVzZW50Jyk7XG4gIH1cbn0iLCJpbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIHZhbHVlIGEgZGF0ZT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZS4gVGhlIGZ1bmN0aW9uIHdvcmtzIGZvciBkYXRlcyB0cmFuc2ZlcnJlZCBhY3Jvc3MgaWZyYW1lcy5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSB0aGUgdmFsdWUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIGRhdGVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGEgdmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZSgpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhbiBpbnZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUobmV3IERhdGUoTmFOKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3Igc29tZSB2YWx1ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZSgnMjAxNC0wMi0zMScpXG4gKiAvLz0+IGZhbHNlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhbiBvYmplY3Q6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUoe30pXG4gKiAvLz0+IGZhbHNlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNEYXRlKHZhbHVlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufSIsImltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHRvRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgaXRzIGNsb25lLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhIG51bWJlciwgaXQgaXMgdHJlYXRlZCBhcyBhIHRpbWVzdGFtcC5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgbm9uZSBvZiB0aGUgYWJvdmUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIEludmFsaWQgRGF0ZS5cbiAqXG4gKiAqKk5vdGUqKjogKmFsbCogRGF0ZSBhcmd1bWVudHMgcGFzc2VkIHRvIGFueSAqZGF0ZS1mbnMqIGZ1bmN0aW9uIGlzIHByb2Nlc3NlZCBieSBgdG9EYXRlYC5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBhcmd1bWVudCAtIHRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDbG9uZSB0aGUgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZShuZXcgRGF0ZSgyMDE0LCAxLCAxMSwgMTEsIDMwLCAzMCkpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHRoZSB0aW1lc3RhbXAgdG8gZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZSgxMzkyMDk4NDMwMDAwKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0RhdGUoYXJndW1lbnQpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBhcmdTdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpOyAvLyBDbG9uZSB0aGUgZGF0ZVxuXG4gIGlmIChhcmd1bWVudCBpbnN0YW5jZW9mIERhdGUgfHwgdHlwZW9mIGFyZ3VtZW50ID09PSAnb2JqZWN0JyAmJiBhcmdTdHIgPT09ICdbb2JqZWN0IERhdGVdJykge1xuICAgIC8vIFByZXZlbnQgdGhlIGRhdGUgdG8gbG9zZSB0aGUgbWlsbGlzZWNvbmRzIHdoZW4gcGFzc2VkIHRvIG5ldyBEYXRlKCkgaW4gSUUxMFxuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudC5nZXRUaW1lKCkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhcmd1bWVudCA9PT0gJ251bWJlcicgfHwgYXJnU3RyID09PSAnW29iamVjdCBOdW1iZXJdJykge1xuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCh0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgU3RyaW5nXScpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcIlN0YXJ0aW5nIHdpdGggdjIuMC4wLWJldGEuMSBkYXRlLWZucyBkb2Vzbid0IGFjY2VwdCBzdHJpbmdzIGFzIGRhdGUgYXJndW1lbnRzLiBQbGVhc2UgdXNlIGBwYXJzZUlTT2AgdG8gcGFyc2Ugc3RyaW5ncy4gU2VlOiBodHRwczovL2dpdC5pby9manVsZVwiKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcblxuICAgICAgY29uc29sZS53YXJuKG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxufSIsImltcG9ydCBpc0RhdGUgZnJvbSBcIi4uL2lzRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc1ZhbGlkXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIHZhbGlkP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBmYWxzZSBpZiBhcmd1bWVudCBpcyBJbnZhbGlkIERhdGUgYW5kIHRydWUgb3RoZXJ3aXNlLlxuICogQXJndW1lbnQgaXMgY29udmVydGVkIHRvIERhdGUgdXNpbmcgYHRvRGF0ZWAuIFNlZSBbdG9EYXRlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL3RvRGF0ZX1cbiAqIEludmFsaWQgRGF0ZSBpcyBhIERhdGUsIHdob3NlIHRpbWUgdmFsdWUgaXMgTmFOLlxuICpcbiAqIFRpbWUgdmFsdWUgb2YgRGF0ZTogaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS45LjEuMVxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogLSBOb3cgYGlzVmFsaWRgIGRvZXNuJ3QgdGhyb3cgYW4gZXhjZXB0aW9uXG4gKiAgIGlmIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqICAgSW5zdGVhZCwgYXJndW1lbnQgaXMgY29udmVydGVkIGJlZm9yZWhhbmQgdXNpbmcgYHRvRGF0ZWAuXG4gKlxuICogICBFeGFtcGxlczpcbiAqXG4gKiAgIHwgYGlzVmFsaWRgIGFyZ3VtZW50ICAgICAgICB8IEJlZm9yZSB2Mi4wLjAgfCB2Mi4wLjAgb253YXJkIHxcbiAqICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfFxuICogICB8IGBuZXcgRGF0ZSgpYCAgICAgICAgICAgICAgfCBgdHJ1ZWAgICAgICAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKCcyMDE2LTAxLTAxJylgICB8IGB0cnVlYCAgICAgICAgfCBgdHJ1ZWAgICAgICAgIHxcbiAqICAgfCBgbmV3IERhdGUoJycpYCAgICAgICAgICAgIHwgYGZhbHNlYCAgICAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZSgxNDg4MzcwODM1MDgxKWAgfCBgdHJ1ZWAgICAgICAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKE5hTilgICAgICAgICAgICB8IGBmYWxzZWAgICAgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgJzIwMTYtMDEtMDEnYCAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGAnJ2AgICAgICAgICAgICAgICAgICAgICAgfCBgVHlwZUVycm9yYCAgIHwgYGZhbHNlYCAgICAgICB8XG4gKiAgIHwgYDE0ODgzNzA4MzUwODFgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgdHJ1ZWAgICAgICAgIHxcbiAqICAgfCBgTmFOYCAgICAgICAgICAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGBmYWxzZWAgICAgICAgfFxuICpcbiAqICAgV2UgaW50cm9kdWNlIHRoaXMgY2hhbmdlIHRvIG1ha2UgKmRhdGUtZm5zKiBjb25zaXN0ZW50IHdpdGggRUNNQVNjcmlwdCBiZWhhdmlvclxuICogICB0aGF0IHRyeSB0byBjb2VyY2UgYXJndW1lbnRzIHRvIHRoZSBleHBlY3RlZCB0eXBlXG4gKiAgICh3aGljaCBpcyBhbHNvIHRoZSBjYXNlIHdpdGggb3RoZXIgKmRhdGUtZm5zKiBmdW5jdGlvbnMpLlxuICpcbiAqIEBwYXJhbSB7Kn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgdmFsaWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKDIwMTQsIDEsIDMxKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbHVlLCBjb252ZXJ0YWJsZSBpbnRvIGEgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQoMTM5MzgwNDgwMDAwMClcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIGludmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoJycpKVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVmFsaWQoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuXG4gIGlmICghaXNEYXRlKGRpcnR5RGF0ZSkgJiYgdHlwZW9mIGRpcnR5RGF0ZSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICByZXR1cm4gIWlzTmFOKE51bWJlcihkYXRlKSk7XG59IiwidmFyIGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgeFNlY29uZHM6IHtcbiAgICBvbmU6ICcxIHNlY29uZCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgaGFsZkFNaW51dGU6ICdoYWxmIGEgbWludXRlJyxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIG1pbnV0ZScsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIHhNaW51dGVzOiB7XG4gICAgb25lOiAnMSBtaW51dGUnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBob3VyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiAnMSBob3VyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeERheXM6IHtcbiAgICBvbmU6ICcxIGRheScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gZGF5cydcbiAgfSxcbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBvbmU6ICdhYm91dCAxIHdlZWsnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICB4V2Vla3M6IHtcbiAgICBvbmU6ICcxIHdlZWsnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6ICdhYm91dCAxIG1vbnRoJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICcxIG1vbnRoJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgeFllYXJzOiB7XG4gICAgb25lOiAnMSB5ZWFyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgb3ZlclhZZWFyczoge1xuICAgIG9uZTogJ292ZXIgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ292ZXIge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6ICdhbG1vc3QgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2FsbW9zdCB7e2NvdW50fX0geWVhcnMnXG4gIH1cbn07XG5cbnZhciBmb3JtYXREaXN0YW5jZSA9IGZ1bmN0aW9uICh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgdmFyIHRva2VuVmFsdWUgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG5cbiAgaWYgKHR5cGVvZiB0b2tlblZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWU7XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlLm9uZTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlLm90aGVyLnJlcGxhY2UoJ3t7Y291bnR9fScsIGNvdW50LnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiAmJiBvcHRpb25zLmNvbXBhcmlzb24gPiAwKSB7XG4gICAgICByZXR1cm4gJ2luICcgKyByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAnIGFnbyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdERpc3RhbmNlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRm9ybWF0TG9uZ0ZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgLy8gVE9ETzogUmVtb3ZlIFN0cmluZygpXG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgIHZhciBmb3JtYXQgPSBhcmdzLmZvcm1hdHNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0c1thcmdzLmRlZmF1bHRXaWR0aF07XG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfTtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanNcIjtcbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0VFRUUsIE1NTU0gZG8sIHknLFxuICBsb25nOiAnTU1NTSBkbywgeScsXG4gIG1lZGl1bTogJ01NTSBkLCB5JyxcbiAgc2hvcnQ6ICdNTS9kZC95eXl5J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ2g6bW06c3MgYSB6enp6JyxcbiAgbG9uZzogJ2g6bW06c3MgYSB6JyxcbiAgbWVkaXVtOiAnaDptbTpzcyBhJyxcbiAgc2hvcnQ6ICdoOm1tIGEnXG59O1xudmFyIGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJ2YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBcIidsYXN0JyBlZWVlICdhdCcgcFwiLFxuICB5ZXN0ZXJkYXk6IFwiJ3llc3RlcmRheSBhdCcgcFwiLFxuICB0b2RheTogXCIndG9kYXkgYXQnIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ3RvbW9ycm93IGF0JyBwXCIsXG4gIG5leHRXZWVrOiBcImVlZWUgJ2F0JyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG5cbnZhciBmb3JtYXRSZWxhdGl2ZSA9IGZ1bmN0aW9uICh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdFJlbGF0aXZlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTG9jYWxpemVGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlydHlJbmRleCwgZGlydHlPcHRpb25zKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gICAgdmFyIGNvbnRleHQgPSBvcHRpb25zLmNvbnRleHQgPyBTdHJpbmcob3B0aW9ucy5jb250ZXh0KSA6ICdzdGFuZGFsb25lJztcbiAgICB2YXIgdmFsdWVzQXJyYXk7XG5cbiAgICBpZiAoY29udGV4dCA9PT0gJ2Zvcm1hdHRpbmcnICYmIGFyZ3MuZm9ybWF0dGluZ1ZhbHVlcykge1xuICAgICAgdmFyIGRlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCB8fCBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBkZWZhdWx0V2lkdGg7XG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1t3aWR0aF0gfHwgYXJncy5mb3JtYXR0aW5nVmFsdWVzW2RlZmF1bHRXaWR0aF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhciBfd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG5cbiAgICAgIHZhbHVlc0FycmF5ID0gYXJncy52YWx1ZXNbX3dpZHRoXSB8fCBhcmdzLnZhbHVlc1tfZGVmYXVsdFdpZHRoXTtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXggPSBhcmdzLmFyZ3VtZW50Q2FsbGJhY2sgPyBhcmdzLmFyZ3VtZW50Q2FsbGJhY2soZGlydHlJbmRleCkgOiBkaXJ0eUluZGV4OyAvLyBAdHMtaWdub3JlOiBGb3Igc29tZSByZWFzb24gVHlwZVNjcmlwdCBqdXN0IGRvbid0IHdhbnQgdG8gbWF0Y2ggaXQsIG5vIG1hdHRlciBob3cgaGFyZCB3ZSB0cnkuIEkgY2hhbGxlbmdlIHlvdSB0byB0cnkgdG8gcmVtb3ZlIGl0IVxuXG4gICAgcmV0dXJuIHZhbHVlc0FycmF5W2luZGV4XTtcbiAgfTtcbn0iLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qc1wiO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0InLCAnQSddLFxuICBhYmJyZXZpYXRlZDogWydCQycsICdBRCddLFxuICB3aWRlOiBbJ0JlZm9yZSBDaHJpc3QnLCAnQW5ubyBEb21pbmknXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydRMScsICdRMicsICdRMycsICdRNCddLFxuICB3aWRlOiBbJzFzdCBxdWFydGVyJywgJzJuZCBxdWFydGVyJywgJzNyZCBxdWFydGVyJywgJzR0aCBxdWFydGVyJ11cbn07IC8vIE5vdGU6IGluIEVuZ2xpc2gsIHRoZSBuYW1lcyBvZiBkYXlzIG9mIHRoZSB3ZWVrIGFuZCBtb250aHMgYXJlIGNhcGl0YWxpemVkLlxuLy8gSWYgeW91IGFyZSBtYWtpbmcgYSBuZXcgbG9jYWxlIGJhc2VkIG9uIHRoaXMgb25lLCBjaGVjayBpZiB0aGUgc2FtZSBpcyB0cnVlIGZvciB0aGUgbGFuZ3VhZ2UgeW91J3JlIHdvcmtpbmcgb24uXG4vLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbi8vIGUuZy4gaW4gU3BhbmlzaCBsYW5ndWFnZSB0aGUgd2Vla2RheXMgYW5kIG1vbnRocyBzaG91bGQgYmUgaW4gdGhlIGxvd2VyY2FzZS5cblxudmFyIG1vbnRoVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnSicsICdGJywgJ00nLCAnQScsICdNJywgJ0onLCAnSicsICdBJywgJ1MnLCAnTycsICdOJywgJ0QnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgd2lkZTogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ11cbn07XG52YXIgZGF5VmFsdWVzID0ge1xuICBuYXJyb3c6IFsnUycsICdNJywgJ1QnLCAnVycsICdUJywgJ0YnLCAnUyddLFxuICBzaG9ydDogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICBhYmJyZXZpYXRlZDogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgd2lkZTogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddXG59O1xudmFyIGRheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9XG59O1xudmFyIGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfVxufTtcblxudmFyIG9yZGluYWxOdW1iZXIgPSBmdW5jdGlvbiAoZGlydHlOdW1iZXIsIF9vcHRpb25zKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpOyAvLyBJZiBvcmRpbmFsIG51bWJlcnMgZGVwZW5kIG9uIGNvbnRleHQsIGZvciBleGFtcGxlLFxuICAvLyBpZiB0aGV5IGFyZSBkaWZmZXJlbnQgZm9yIGRpZmZlcmVudCBncmFtbWF0aWNhbCBnZW5kZXJzLFxuICAvLyB1c2UgYG9wdGlvbnMudW5pdGAuXG4gIC8vXG4gIC8vIGB1bml0YCBjYW4gYmUgJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RhdGUnLCAnZGF5T2ZZZWFyJyxcbiAgLy8gJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLlxuXG4gIHZhciByZW0xMDAgPSBudW1iZXIgJSAxMDA7XG5cbiAgaWYgKHJlbTEwMCA+IDIwIHx8IHJlbTEwMCA8IDEwKSB7XG4gICAgc3dpdGNoIChyZW0xMDAgJSAxMCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3N0JztcblxuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ25kJztcblxuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3JkJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVtYmVyICsgJ3RoJztcbn07XG5cbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBhcmd1bWVudENhbGxiYWNrOiBmdW5jdGlvbiAocXVhcnRlcikge1xuICAgICAgcmV0dXJuIHF1YXJ0ZXIgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaEZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICB2YXIgbWF0Y2hQYXR0ZXJuID0gd2lkdGggJiYgYXJncy5tYXRjaFBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLm1hdGNoUGF0dGVybnNbYXJncy5kZWZhdWx0TWF0Y2hXaWR0aF07XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVBhdHRlcm5zID0gd2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLnBhcnNlUGF0dGVybnNbYXJncy5kZWZhdWx0UGFyc2VXaWR0aF07XG4gICAgdmFyIGtleSA9IEFycmF5LmlzQXJyYXkocGFyc2VQYXR0ZXJucykgPyBmaW5kSW5kZXgocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgfSkgOiBmaW5kS2V5KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pO1xuICAgIHZhciB2YWx1ZTtcbiAgICB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhrZXkpIDoga2V5O1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhciByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogcmVzdFxuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBwcmVkaWNhdGUob2JqZWN0W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59IiwiaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanNcIjtcbmltcG9ydCBidWlsZE1hdGNoUGF0dGVybkZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanNcIjtcbnZhciBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL14oXFxkKykodGh8c3R8bmR8cmQpPy9pO1xudmFyIHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xudmFyIG1hdGNoRXJhUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYnxhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oYlxcLj9cXHM/Y1xcLj98YlxcLj9cXHM/Y1xcLj9cXHM/ZVxcLj98YVxcLj9cXHM/ZFxcLj98Y1xcLj9cXHM/ZVxcLj8pL2ksXG4gIHdpZGU6IC9eKGJlZm9yZSBjaHJpc3R8YmVmb3JlIGNvbW1vbiBlcmF8YW5ubyBkb21pbml8Y29tbW9uIGVyYSkvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXmIvaSwgL14oYXxjKS9pXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15xWzEyMzRdL2ksXG4gIHdpZGU6IC9eWzEyMzRdKHRofHN0fG5kfHJkKT8gcXVhcnRlci9pXG59O1xudmFyIHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bamZtYXNvbmRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXihqYW58ZmVifG1hcnxhcHJ8bWF5fGp1bnxqdWx8YXVnfHNlcHxvY3R8bm92fGRlYykvaSxcbiAgd2lkZTogL14oamFudWFyeXxmZWJydWFyeXxtYXJjaHxhcHJpbHxtYXl8anVuZXxqdWx5fGF1Z3VzdHxzZXB0ZW1iZXJ8b2N0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9eai9pLCAvXmYvaSwgL15tL2ksIC9eYS9pLCAvXm0vaSwgL15qL2ksIC9eai9pLCAvXmEvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldLFxuICBhbnk6IFsvXmphL2ksIC9eZi9pLCAvXm1hci9pLCAvXmFwL2ksIC9ebWF5L2ksIC9eanVuL2ksIC9eanVsL2ksIC9eYXUvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bc210d2ZdL2ksXG4gIHNob3J0OiAvXihzdXxtb3x0dXx3ZXx0aHxmcnxzYSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHN1bnxtb258dHVlfHdlZHx0aHV8ZnJpfHNhdCkvaSxcbiAgd2lkZTogL14oc3VuZGF5fG1vbmRheXx0dWVzZGF5fHdlZG5lc2RheXx0aHVyc2RheXxmcmlkYXl8c2F0dXJkYXkpL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15zL2ksIC9ebS9pLCAvXnQvaSwgL153L2ksIC9edC9pLCAvXmYvaSwgL15zL2ldLFxuICBhbnk6IFsvXnN1L2ksIC9ebS9pLCAvXnR1L2ksIC9edy9pLCAvXnRoL2ksIC9eZi9pLCAvXnNhL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxwfG1pfG58KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pLFxuICBhbnk6IC9eKFthcF1cXC4/XFxzP21cXC4/fG1pZG5pZ2h0fG5vb258KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXmEvaSxcbiAgICBwbTogL15wL2ksXG4gICAgbWlkbmlnaHQ6IC9ebWkvaSxcbiAgICBub29uOiAvXm5vL2ksXG4gICAgbW9ybmluZzogL21vcm5pbmcvaSxcbiAgICBhZnRlcm5vb246IC9hZnRlcm5vb24vaSxcbiAgICBldmVuaW5nOiAvZXZlbmluZy9pLFxuICAgIG5pZ2h0OiAvbmlnaHQvaVxuICB9XG59O1xudmFyIG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9KSxcbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICdhbnknLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbWF0Y2g7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaFBhdHRlcm5GbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChhcmdzLm1hdGNoUGF0dGVybik7XG4gICAgaWYgKCFtYXRjaFJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5wYXJzZVBhdHRlcm4pO1xuICAgIGlmICghcGFyc2VSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIHZhciB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhwYXJzZVJlc3VsdFswXSkgOiBwYXJzZVJlc3VsdFswXTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YXIgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHJlc3RcbiAgICB9O1xuICB9O1xufSIsImltcG9ydCBmb3JtYXREaXN0YW5jZSBmcm9tIFwiLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0TG9uZyBmcm9tIFwiLi9fbGliL2Zvcm1hdExvbmcvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tIFwiLi9fbGliL2Zvcm1hdFJlbGF0aXZlL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9jYWxpemUgZnJvbSBcIi4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qc1wiO1xuaW1wb3J0IG1hdGNoIGZyb20gXCIuL19saWIvbWF0Y2gvaW5kZXguanNcIjtcblxuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IEVuZ2xpc2ggbG9jYWxlIChVbml0ZWQgU3RhdGVzKS5cbiAqIEBsYW5ndWFnZSBFbmdsaXNoXG4gKiBAaXNvLTYzOS0yIGVuZ1xuICogQGF1dGhvciBTYXNoYSBLb3NzIFtAa29zc25vY29ycF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2tvc3Nub2NvcnB9XG4gKiBAYXV0aG9yIExlc2hhIEtvc3MgW0BsZXNoYWtvc3Nde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9sZXNoYWtvc3N9XG4gKi9cbnZhciBsb2NhbGUgPSB7XG4gIGNvZGU6ICdlbi1VUycsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMFxuICAgIC8qIFN1bmRheSAqL1xuICAgICxcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDFcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0ludGVnZXIoZGlydHlOdW1iZXIpIHtcbiAgaWYgKGRpcnR5TnVtYmVyID09PSBudWxsIHx8IGRpcnR5TnVtYmVyID09PSB0cnVlIHx8IGRpcnR5TnVtYmVyID09PSBmYWxzZSkge1xuICAgIHJldHVybiBOYU47XG4gIH1cblxuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTtcblxuICBpZiAoaXNOYU4obnVtYmVyKSkge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cblxuICByZXR1cm4gbnVtYmVyIDwgMCA/IE1hdGguY2VpbChudW1iZXIpIDogTWF0aC5mbG9vcihudW1iZXIpO1xufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGFkZE1pbGxpc2Vjb25kc1xuICogQGNhdGVnb3J5IE1pbGxpc2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBhZGRlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDc1MCBtaWxsaXNlY29uZHMgdG8gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIGNvbnN0IHJlc3VsdCA9IGFkZE1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjMwLjc1MFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgdGltZXN0YW1wID0gdG9EYXRlKGRpcnR5RGF0ZSkuZ2V0VGltZSgpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIGFtb3VudCk7XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCBhZGRNaWxsaXNlY29uZHMgZnJvbSBcIi4uL2FkZE1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3ViTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gYmUgc3VidHJhY3RlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgc3VidHJhY3RlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTdWJ0cmFjdCA3NTAgbWlsbGlzZWNvbmRzIGZyb20gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN1Yk1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjI5LjI1MFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN1Yk1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIC1hbW91bnQpO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX0RBWSA9IDg2NDAwMDAwOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDRGF5T2ZZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlllYXJUaW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcbiAgdmFyIGRpZmZlcmVuY2UgPSB0aW1lc3RhbXAgLSBzdGFydE9mWWVhclRpbWVzdGFtcDtcbiAgcmV0dXJuIE1hdGguZmxvb3IoZGlmZmVyZW5jZSAvIE1JTExJU0VDT05EU19JTl9EQVkpICsgMTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gMTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZOZXh0WWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhcik7XG5cbiAgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufSIsImltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vZ2V0VVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHllYXIgPSBnZXRVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpO1xuICB2YXIgZm91cnRoT2ZKYW51YXJ5ID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeS5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgZGF0ZSA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeSk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9IHN0YXJ0T2ZVVENJU09XZWVrKGRhdGUpLmdldFRpbWUoKSAtIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkYXRlKS5nZXRUaW1lKCk7IC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWsoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XG4gIHZhciBsb2NhbGVXZWVrU3RhcnRzT24gPSBsb2NhbGUgJiYgbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMud2Vla1N0YXJ0c09uO1xuICB2YXIgZGVmYXVsdFdlZWtTdGFydHNPbiA9IGxvY2FsZVdlZWtTdGFydHNPbiA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihsb2NhbGVXZWVrU3RhcnRzT24pO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gb3B0aW9ucy53ZWVrU3RhcnRzT24gPT0gbnVsbCA/IGRlZmF1bHRXZWVrU3RhcnRzT24gOiB0b0ludGVnZXIob3B0aW9ucy53ZWVrU3RhcnRzT24pOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XG4gIHZhciBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGUgJiYgbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlO1xuICB2YXIgZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gMSA6IHRvSW50ZWdlcihsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgOiB0b0ludGVnZXIob3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBmaXJzdFdlZWtPZk5leHRZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDRnVsbFllYXIoeWVhciArIDEsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWtPZk5leHRZZWFyLCBkaXJ0eU9wdGlvbnMpO1xuICB2YXIgZmlyc3RXZWVrT2ZUaGlzWWVhciA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWtPZlRoaXNZZWFyLCBkaXJ0eU9wdGlvbnMpO1xuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCJpbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB2YXIgbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlICYmIGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiB0b0ludGVnZXIobG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIDogdG9JbnRlZ2VyKG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIHllYXIgPSBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWsgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vlay5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWssIGRpcnR5T3B0aW9ucyk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrWWVhciBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ1dlZWsoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9IHN0YXJ0T2ZVVENXZWVrKGRhdGUsIG9wdGlvbnMpLmdldFRpbWUoKSAtIHN0YXJ0T2ZVVENXZWVrWWVhcihkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCk7IC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSB3ZWVrIGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgd2VlayBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCA/ICctJyA6ICcnO1xuICB2YXIgb3V0cHV0ID0gTWF0aC5hYnMobnVtYmVyKS50b1N0cmluZygpO1xuXG4gIHdoaWxlIChvdXRwdXQubGVuZ3RoIDwgdGFyZ2V0TGVuZ3RoKSB7XG4gICAgb3V0cHV0ID0gJzAnICsgb3V0cHV0O1xuICB9XG5cbiAgcmV0dXJuIHNpZ24gKyBvdXRwdXQ7XG59IiwiaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqL1xuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICAvLyBGcm9tIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtMzEvdHIzNS1kYXRlcy5odG1sI0RhdGVfRm9ybWF0X3Rva2Vuc1xuICAgIC8vIHwgWWVhciAgICAgfCAgICAgeSB8IHl5IHwgICB5eXkgfCAgeXl5eSB8IHl5eXl5IHxcbiAgICAvLyB8LS0tLS0tLS0tLXwtLS0tLS0tfC0tLS18LS0tLS0tLXwtLS0tLS0tfC0tLS0tLS18XG4gICAgLy8gfCBBRCAxICAgICB8ICAgICAxIHwgMDEgfCAgIDAwMSB8ICAwMDAxIHwgMDAwMDEgfFxuICAgIC8vIHwgQUQgMTIgICAgfCAgICAxMiB8IDEyIHwgICAwMTIgfCAgMDAxMiB8IDAwMDEyIHxcbiAgICAvLyB8IEFEIDEyMyAgIHwgICAxMjMgfCAyMyB8ICAgMTIzIHwgIDAxMjMgfCAwMDEyMyB8XG4gICAgLy8gfCBBRCAxMjM0ICB8ICAxMjM0IHwgMzQgfCAgMTIzNCB8ICAxMjM0IHwgMDEyMzQgfFxuICAgIC8vIHwgQUQgMTIzNDUgfCAxMjM0NSB8IDQ1IHwgMTIzNDUgfCAxMjM0NSB8IDEyMzQ1IHxcbiAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0b2tlbiA9PT0gJ3l5JyA/IHllYXIgJSAxMDAgOiB5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgcmV0dXJuIHRva2VuID09PSAnTScgPyBTdHJpbmcobW9udGggKyAxKSA6IGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENEYXRlKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXRlLmdldFVUQ0hvdXJzKCkgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWVbMF07XG5cbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZSA9PT0gJ2FtJyA/ICdhLm0uJyA6ICdwLm0uJztcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ01pbnV0ZXMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbnVtYmVyT2ZEaWdpdHMgPSB0b2tlbi5sZW5ndGg7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gICAgdmFyIGZyYWN0aW9uYWxTZWNvbmRzID0gTWF0aC5mbG9vcihtaWxsaXNlY29uZHMgKiBNYXRoLnBvdygxMCwgbnVtYmVyT2ZEaWdpdHMgLSAzKSk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhmcmFjdGlvbmFsU2Vjb25kcywgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiaW1wb3J0IGdldFVUQ0RheU9mWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWtZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkTGVhZGluZ1plcm9zIGZyb20gXCIuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanNcIjtcbmltcG9ydCBsaWdodEZvcm1hdHRlcnMgZnJvbSBcIi4uL2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qc1wiO1xudmFyIGRheVBlcmlvZEVudW0gPSB7XG4gIGFtOiAnYW0nLFxuICBwbTogJ3BtJyxcbiAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gIG5vb246ICdub29uJyxcbiAgbW9ybmluZzogJ21vcm5pbmcnLFxuICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICBldmVuaW5nOiAnZXZlbmluZycsXG4gIG5pZ2h0OiAnbmlnaHQnXG59O1xuLypcbiAqIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgTWlsbGlzZWNvbmRzIGluIGRheSAgICAgICAgICAgIHxcbiAqIHwgIGIgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgIHwgIEIgIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgIHxcbiAqIHwgIGMgIHwgU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWsgIHwgIEMqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHxcbiAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGUgIHwgTG9jYWwgZGF5IG9mIHdlZWsgICAgICAgICAgICAgIHwgIEUgIHwgRGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGYgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEYqIHwgRGF5IG9mIHdlZWsgaW4gbW9udGggICAgICAgICAgIHxcbiAqIHwgIGcqIHwgTW9kaWZpZWQgSnVsaWFuIGRheSAgICAgICAgICAgIHwgIEcgIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGggIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgIHwgIEggIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGkhIHwgSVNPIGRheSBvZiB3ZWVrICAgICAgICAgICAgICAgIHwgIEkhIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgIHxcbiAqIHwgIGoqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHwgIEoqIHwgTG9jYWxpemVkIGhvdXIgdy9vIGRheSBwZXJpb2QgIHxcbiAqIHwgIGsgIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgIHwgIEsgIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIGwqIHwgKGRlcHJlY2F0ZWQpICAgICAgICAgICAgICAgICAgIHwgIEwgIHwgU3RhbmQtYWxvbmUgbW9udGggICAgICAgICAgICAgIHxcbiAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE4gIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIG8hIHwgT3JkaW5hbCBudW1iZXIgbW9kaWZpZXIgICAgICAgIHwgIE8gIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHAhIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgIHwgIFAhIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgIHxcbiAqIHwgIHEgIHwgU3RhbmQtYWxvbmUgcXVhcnRlciAgICAgICAgICAgIHwgIFEgIHwgUXVhcnRlciAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHIqIHwgUmVsYXRlZCBHcmVnb3JpYW4geWVhciAgICAgICAgIHwgIFIhIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgIHxcbiAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAqIHwgIHQhIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgIHwgIFQhIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgIHxcbiAqIHwgIHUgIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgIHwgIFUqIHwgQ3ljbGljIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHYqIHwgVGltZXpvbmUgKGdlbmVyaWMgbm9uLWxvY2F0LikgIHwgIFYqIHwgVGltZXpvbmUgKGxvY2F0aW9uKSAgICAgICAgICAgIHxcbiAqIHwgIHcgIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgIHwgIFcqIHwgV2VlayBvZiBtb250aCAgICAgICAgICAgICAgICAgIHxcbiAqIHwgIHggIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgIHwgIFggIHwgVGltZXpvbmUgKElTTy04NjAxKSAgICAgICAgICAgIHxcbiAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgIHxcbiAqIHwgIHogIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pIHwgIFoqIHwgVGltZXpvbmUgKGFsaWFzZXMpICAgICAgICAgICAgIHxcbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgISBhcmUgbm9uLXN0YW5kYXJkLCBidXQgaW1wbGVtZW50ZWQgYnkgZGF0ZS1mbnM6XG4gKiAtIGBvYCBtb2RpZmllcyB0aGUgcHJldmlvdXMgdG9rZW4gdG8gdHVybiBpdCBpbnRvIGFuIG9yZGluYWwgKHNlZSBgZm9ybWF0YCBkb2NzKVxuICogLSBgaWAgaXMgSVNPIGRheSBvZiB3ZWVrLiBGb3IgYGlgIGFuZCBgaWlgIGlzIHJldHVybnMgbnVtZXJpYyBJU08gd2VlayBkYXlzLFxuICogICBpLmUuIDcgZm9yIFN1bmRheSwgMSBmb3IgTW9uZGF5LCBldGMuXG4gKiAtIGBJYCBpcyBJU08gd2VlayBvZiB5ZWFyLCBhcyBvcHBvc2VkIHRvIGB3YCB3aGljaCBpcyBsb2NhbCB3ZWVrIG9mIHllYXIuXG4gKiAtIGBSYCBpcyBJU08gd2Vlay1udW1iZXJpbmcgeWVhciwgYXMgb3Bwb3NlZCB0byBgWWAgd2hpY2ggaXMgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhci5cbiAqICAgYFJgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgSWAgYW5kIGBpYFxuICogICBmb3IgdW5pdmVyc2FsIElTTyB3ZWVrLW51bWJlcmluZyBkYXRlLCB3aGVyZWFzXG4gKiAgIGBZYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYHdgIGFuZCBgZWBcbiAqICAgZm9yIHdlZWstbnVtYmVyaW5nIGRhdGUgc3BlY2lmaWMgdG8gdGhlIGxvY2FsZS5cbiAqIC0gYFBgIGlzIGxvbmcgbG9jYWxpemVkIGRhdGUgZm9ybWF0XG4gKiAtIGBwYCBpcyBsb25nIGxvY2FsaXplZCB0aW1lIGZvcm1hdFxuICovXG5cbnZhciBmb3JtYXR0ZXJzID0ge1xuICAvLyBFcmFcbiAgRzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBlcmEgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgPiAwID8gMSA6IDA7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBBRCwgQkNcbiAgICAgIGNhc2UgJ0cnOlxuICAgICAgY2FzZSAnR0cnOlxuICAgICAgY2FzZSAnR0dHJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEEsIEJcblxuICAgICAgY2FzZSAnR0dHR0cnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93J1xuICAgICAgICB9KTtcbiAgICAgIC8vIEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0XG5cbiAgICAgIGNhc2UgJ0dHR0cnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgLy8gT3JkaW5hbCBudW1iZXJcbiAgICBpZiAodG9rZW4gPT09ICd5bycpIHtcbiAgICAgIHZhciBzaWduZWRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoeWVhciwge1xuICAgICAgICB1bml0OiAneWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMueShkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgWTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBzaWduZWRXZWVrWWVhciA9IGdldFVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgdmFyIHdlZWtZZWFyID0gc2lnbmVkV2Vla1llYXIgPiAwID8gc2lnbmVkV2Vla1llYXIgOiAxIC0gc2lnbmVkV2Vla1llYXI7IC8vIFR3byBkaWdpdCB5ZWFyXG5cbiAgICBpZiAodG9rZW4gPT09ICdZWScpIHtcbiAgICAgIHZhciB0d29EaWdpdFllYXIgPSB3ZWVrWWVhciAlIDEwMDtcbiAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModHdvRGlnaXRZZWFyLCAyKTtcbiAgICB9IC8vIE9yZGluYWwgbnVtYmVyXG5cblxuICAgIGlmICh0b2tlbiA9PT0gJ1lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vla1llYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9IC8vIFBhZGRpbmdcblxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgUjogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIGlzb1dlZWtZZWFyID0gZ2V0VVRDSVNPV2Vla1llYXIoZGF0ZSk7IC8vIFBhZGRpbmdcblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEV4dGVuZGVkIHllYXIuIFRoaXMgaXMgYSBzaW5nbGUgbnVtYmVyIGRlc2lnbmF0aW5nIHRoZSB5ZWFyIG9mIHRoaXMgY2FsZW5kYXIgc3lzdGVtLlxuICAvLyBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgbG9jYWxpemVycyBhcmUgQi5DLiB5ZWFyczpcbiAgLy8gfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAgLy8gfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAgLy8gfCBBQyAxIHwgICAxIHwgICAxIHxcbiAgLy8gfCBCQyAxIHwgICAxIHwgICAwIHxcbiAgLy8gfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAgLy8gQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICAvLyB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQuXG4gIHU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gUXVhcnRlclxuICBROiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdRJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG5cbiAgICAgIGNhc2UgJ1FRJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuXG4gICAgICBjYXNlICdRbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuXG4gICAgICBjYXNlICdRUVEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG5cbiAgICAgIGNhc2UgJ1FRUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuXG4gICAgICBjYXNlICdRUVFRJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIHF1YXJ0ZXJcbiAgcTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSAvIDMpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAncSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuXG4gICAgICBjYXNlICdxcSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcblxuICAgICAgY2FzZSAncW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7XG4gICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcblxuICAgICAgY2FzZSAncXFxJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuXG4gICAgICBjYXNlICdxcXFxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cblxuICAgICAgY2FzZSAncXFxcSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnTSc6XG4gICAgICBjYXNlICdNTSc6XG4gICAgICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuTShkYXRlLCB0b2tlbik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG5cbiAgICAgIGNhc2UgJ01vJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobW9udGggKyAxLCB7XG4gICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuXG4gICAgICBjYXNlICdNTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBKLCBGLCAuLi4sIERcblxuICAgICAgY2FzZSAnTU1NTU0nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcblxuICAgICAgY2FzZSAnTU1NTSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIG1vbnRoXG4gIEw6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAuLi4sIDEyXG4gICAgICBjYXNlICdMJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhtb250aCArIDEpO1xuICAgICAgLy8gMDEsIDAyLCAuLi4sIDEyXG5cbiAgICAgIGNhc2UgJ0xMJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuXG4gICAgICBjYXNlICdMbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcblxuICAgICAgY2FzZSAnTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG5cbiAgICAgIGNhc2UgJ0xMTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG5cbiAgICAgIGNhc2UgJ0xMTEwnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBMb2NhbCB3ZWVrIG9mIHllYXJcbiAgdzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciB3ZWVrID0gZ2V0VVRDV2VlayhkYXRlLCBvcHRpb25zKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ3dvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWsgb2YgeWVhclxuICBJOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGlzb1dlZWsgPSBnZXRVVENJU09XZWVrKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSAnSW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29XZWVrLCB7XG4gICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdkbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDRGF0ZSgpLCB7XG4gICAgICAgIHVuaXQ6ICdkYXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5kKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHllYXJcbiAgRDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZlllYXIgPSBnZXRVVENEYXlPZlllYXIoZGF0ZSk7XG5cbiAgICBpZiAodG9rZW4gPT09ICdEbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRheU9mWWVhciwge1xuICAgICAgICB1bml0OiAnZGF5T2ZZZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXlPZlllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIERheSBvZiB3ZWVrXG4gIEU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFR1ZVxuICAgICAgY2FzZSAnRSc6XG4gICAgICBjYXNlICdFRSc6XG4gICAgICBjYXNlICdFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdFRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnRUVFRSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgZGF5IG9mIHdlZWtcbiAgZTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChOdGggZGF5IG9mIHdlZWsgd2l0aCBjdXJyZW50IGxvY2FsZSBvciB3ZWVrU3RhcnRzT24pXG4gICAgICBjYXNlICdlJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG5cbiAgICAgIGNhc2UgJ2VlJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcblxuICAgICAgY2FzZSAnZW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihsb2NhbERheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdlZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnZWVlZSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbG9jYWwgZGF5IG9mIHdlZWtcbiAgYzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChzYW1lIGFzIGluIGBlYClcbiAgICAgIGNhc2UgJ2MnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcblxuICAgICAgY2FzZSAnY2MnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGxvY2FsRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG5cbiAgICAgIGNhc2UgJ2NvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnY2NjY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2NjY2MnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIElTTyBkYXkgb2Ygd2Vla1xuICBpOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGlzb0RheU9mV2VlayA9IGRheU9mV2VlayA9PT0gMCA/IDcgOiBkYXlPZldlZWs7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAyXG4gICAgICBjYXNlICdpJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhpc29EYXlPZldlZWspO1xuICAgICAgLy8gMDJcblxuICAgICAgY2FzZSAnaWknOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb0RheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDJuZFxuXG4gICAgICBjYXNlICdpbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb0RheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlXG5cbiAgICAgIGNhc2UgJ2lpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2lpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdpaWlpJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSBvciBQTVxuICBhOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEFNLCBQTSwgbWlkbmlnaHQsIG5vb25cbiAgYjogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgaWYgKGhvdXJzID09PSAxMikge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPT09IDApIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubWlkbmlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGhvdXJzIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2InOlxuICAgICAgY2FzZSAnYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYmJiYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2JiYmInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIGluIHRoZSBtb3JuaW5nLCBpbiB0aGUgYWZ0ZXJub29uLCBpbiB0aGUgZXZlbmluZywgYXQgbmlnaHRcbiAgQjogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgaWYgKGhvdXJzID49IDE3KSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmV2ZW5pbmc7XG4gICAgfSBlbHNlIGlmIChob3VycyA+PSAxMikge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5hZnRlcm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA+PSA0KSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1vcm5pbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubmlnaHQ7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnQic6XG4gICAgICBjYXNlICdCQic6XG4gICAgICBjYXNlICdCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnQkJCQkInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ0JCQkInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdobycpIHtcbiAgICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuICAgICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDEyO1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLmgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnSG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ0hvdXJzKCksIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLkgoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBIb3VyIFswLTExXVxuICBLOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG5cbiAgICBpZiAodG9rZW4gPT09ICdLbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSG91ciBbMS0yNF1cbiAgazogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMjQ7XG5cbiAgICBpZiAodG9rZW4gPT09ICdrbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhob3VycywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdtbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDTWludXRlcygpLCB7XG4gICAgICAgIHVuaXQ6ICdtaW51dGUnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLm0oZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBTZWNvbmRcbiAgczogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ3NvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHtcbiAgICAgICAgdW5pdDogJ3NlY29uZCdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMucyhkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLlMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYWx3YXlzIGAnWidgKVxuICBYOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIGlmICh0aW1lem9uZU9mZnNldCA9PT0gMCkge1xuICAgICAgcmV0dXJuICdaJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBIb3VycyBhbmQgb3B0aW9uYWwgbWludXRlc1xuICAgICAgY2FzZSAnWCc6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXModGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhgXG5cbiAgICAgIGNhc2UgJ1hYWFgnOlxuICAgICAgY2FzZSAnWFgnOlxuICAgICAgICAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYWGBcblxuICAgICAgY2FzZSAnWFhYWFgnOlxuICAgICAgY2FzZSAnWFhYJzogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aCBgOmAgZGVsaW1pdGVyXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gSWYgb2Zmc2V0IGlzIDAsIG91dHB1dCBpcyBgJyswMDowMCdgIG9yIGVxdWl2YWxlbnQpXG4gIHg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ3gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4YFxuXG4gICAgICBjYXNlICd4eHh4JzpcbiAgICAgIGNhc2UgJ3h4JzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eHhgXG5cbiAgICAgIGNhc2UgJ3h4eHh4JzpcbiAgICAgIGNhc2UgJ3h4eCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoR01UKVxuICBPOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlICdPJzpcbiAgICAgIGNhc2UgJ09PJzpcbiAgICAgIGNhc2UgJ09PTyc6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgICAvLyBMb25nXG5cbiAgICAgIGNhc2UgJ09PT08nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0aW9uKVxuICB6OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlICd6JzpcbiAgICAgIGNhc2UgJ3p6JzpcbiAgICAgIGNhc2UgJ3p6eic6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgICAvLyBMb25nXG5cbiAgICAgIGNhc2UgJ3p6enonOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBTZWNvbmRzIHRpbWVzdGFtcFxuICB0OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXN0YW1wID0gTWF0aC5mbG9vcihvcmlnaW5hbERhdGUuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAgVDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lU2hvcnQob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKTtcbiAgdmFyIG1pbnV0ZXMgPSBhYnNPZmZzZXQgJSA2MDtcblxuICBpZiAobWludXRlcyA9PT0gMCkge1xuICAgIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKTtcbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBkaXJ0eURlbGltaXRlciB8fCAnJztcbiAgcmV0dXJuIHNpZ24gKyBTdHJpbmcoaG91cnMpICsgZGVsaW1pdGVyICsgYWRkTGVhZGluZ1plcm9zKG1pbnV0ZXMsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXMob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICBpZiAob2Zmc2V0ICUgNjAgPT09IDApIHtcbiAgICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gICAgcmV0dXJuIHNpZ24gKyBhZGRMZWFkaW5nWmVyb3MoTWF0aC5hYnMob2Zmc2V0KSAvIDYwLCAyKTtcbiAgfVxuXG4gIHJldHVybiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9IGFkZExlYWRpbmdaZXJvcyhNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKSwgMik7XG4gIHZhciBtaW51dGVzID0gYWRkTGVhZGluZ1plcm9zKGFic09mZnNldCAlIDYwLCAyKTtcbiAgcmV0dXJuIHNpZ24gKyBob3VycyArIGRlbGltaXRlciArIG1pbnV0ZXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiZnVuY3Rpb24gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ1BQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRpbWVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSAncCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcHAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHBwcCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkYXRlVGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICB2YXIgbWF0Y2hSZXN1bHQgPSBwYXR0ZXJuLm1hdGNoKC8oUCspKHArKT8vKSB8fCBbXTtcbiAgdmFyIGRhdGVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMV07XG4gIHZhciB0aW1lUGF0dGVybiA9IG1hdGNoUmVzdWx0WzJdO1xuXG4gIGlmICghdGltZVBhdHRlcm4pIHtcbiAgICByZXR1cm4gZGF0ZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZyk7XG4gIH1cblxuICB2YXIgZGF0ZVRpbWVGb3JtYXQ7XG5cbiAgc3dpdGNoIChkYXRlUGF0dGVybikge1xuICAgIGNhc2UgJ1AnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1BQUFAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIGRhdGVUaW1lRm9ybWF0LnJlcGxhY2UoJ3t7ZGF0ZX19JywgZGF0ZUxvbmdGb3JtYXR0ZXIoZGF0ZVBhdHRlcm4sIGZvcm1hdExvbmcpKS5yZXBsYWNlKCd7e3RpbWV9fScsIHRpbWVMb25nRm9ybWF0dGVyKHRpbWVQYXR0ZXJuLCBmb3JtYXRMb25nKSk7XG59XG5cbnZhciBsb25nRm9ybWF0dGVycyA9IHtcbiAgcDogdGltZUxvbmdGb3JtYXR0ZXIsXG4gIFA6IGRhdGVUaW1lTG9uZ0Zvcm1hdHRlclxufTtcbmV4cG9ydCBkZWZhdWx0IGxvbmdGb3JtYXR0ZXJzOyIsIi8qKlxuICogR29vZ2xlIENocm9tZSBhcyBvZiA2Ny4wLjMzOTYuODcgaW50cm9kdWNlZCB0aW1lem9uZXMgd2l0aCBvZmZzZXQgdGhhdCBpbmNsdWRlcyBzZWNvbmRzLlxuICogVGhleSB1c3VhbGx5IGFwcGVhciBmb3IgZGF0ZXMgdGhhdCBkZW5vdGUgdGltZSBiZWZvcmUgdGhlIHRpbWV6b25lcyB3ZXJlIGludHJvZHVjZWRcbiAqIChlLmcuIGZvciAnRXVyb3BlL1ByYWd1ZScgdGltZXpvbmUgdGhlIG9mZnNldCBpcyBHTVQrMDA6NTc6NDQgYmVmb3JlIDEgT2N0b2JlciAxODkxXG4gKiBhbmQgR01UKzAxOjAwOjAwIGFmdGVyIHRoYXQgZGF0ZSlcbiAqXG4gKiBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgdGhlIG9mZnNldCBpbiBtaW51dGVzIGFuZCB3b3VsZCByZXR1cm4gNTcgZm9yIHRoZSBleGFtcGxlIGFib3ZlLFxuICogd2hpY2ggd291bGQgbGVhZCB0byBpbmNvcnJlY3QgY2FsY3VsYXRpb25zLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdGltZXpvbmUgb2Zmc2V0IGluIG1pbGxpc2Vjb25kcyB0aGF0IHRha2VzIHNlY29uZHMgaW4gYWNjb3VudC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkYXRlKSB7XG4gIHZhciB1dGNEYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpLCBkYXRlLmdldEhvdXJzKCksIGRhdGUuZ2V0TWludXRlcygpLCBkYXRlLmdldFNlY29uZHMoKSwgZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSkpO1xuICB1dGNEYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSk7XG4gIHJldHVybiBkYXRlLmdldFRpbWUoKSAtIHV0Y0RhdGUuZ2V0VGltZSgpO1xufSIsInZhciBwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMgPSBbJ0QnLCAnREQnXTtcbnZhciBwcm90ZWN0ZWRXZWVrWWVhclRva2VucyA9IFsnWVknLCAnWVlZWSddO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4odG9rZW4pIHtcbiAgcmV0dXJuIHByb3RlY3RlZERheU9mWWVhclRva2Vucy5pbmRleE9mKHRva2VuKSAhPT0gLTE7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwcm90ZWN0ZWRXZWVrWWVhclRva2Vucy5pbmRleE9mKHRva2VuKSAhPT0gLTE7XG59XG5leHBvcnQgZnVuY3Rpb24gdGhyb3dQcm90ZWN0ZWRFcnJvcih0b2tlbiwgZm9ybWF0LCBpbnB1dCkge1xuICBpZiAodG9rZW4gPT09ICdZWVlZJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGB5eXl5YCBpbnN0ZWFkIG9mIGBZWVlZYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0QnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRgIGluc3RlYWQgb2YgYERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdERCcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9XG59IiwiaW1wb3J0IGlzVmFsaWQgZnJvbSBcIi4uL2lzVmFsaWQvaW5kZXguanNcIjtcbmltcG9ydCBkZWZhdWx0TG9jYWxlIGZyb20gXCIuLi9sb2NhbGUvZW4tVVMvaW5kZXguanNcIjtcbmltcG9ydCBzdWJNaWxsaXNlY29uZHMgZnJvbSBcIi4uL3N1Yk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0dGVycyBmcm9tIFwiLi4vX2xpYi9mb3JtYXQvZm9ybWF0dGVycy9pbmRleC5qc1wiO1xuaW1wb3J0IGxvbmdGb3JtYXR0ZXJzIGZyb20gXCIuLi9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMgZnJvbSBcIi4uL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbiwgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuLCB0aHJvd1Byb3RlY3RlZEVycm9yIH0gZnJvbSBcIi4uL19saWIvcHJvdGVjdGVkVG9rZW5zL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjsgLy8gVGhpcyBSZWdFeHAgY29uc2lzdHMgb2YgdGhyZWUgcGFydHMgc2VwYXJhdGVkIGJ5IGB8YDpcbi8vIC0gW3lZUXFNTHdJZERlY2loSEtrbXNdbyBtYXRjaGVzIGFueSBhdmFpbGFibGUgb3JkaW5hbCBudW1iZXIgdG9rZW5cbi8vICAgKG9uZSBvZiB0aGUgY2VydGFpbiBsZXR0ZXJzIGZvbGxvd2VkIGJ5IGBvYClcbi8vIC0gKFxcdylcXDEqIG1hdGNoZXMgYW55IHNlcXVlbmNlcyBvZiB0aGUgc2FtZSBsZXR0ZXJcbi8vIC0gJycgbWF0Y2hlcyB0d28gcXVvdGUgY2hhcmFjdGVycyBpbiBhIHJvd1xuLy8gLSAnKCcnfFteJ10pKygnfCQpIG1hdGNoZXMgYW55dGhpbmcgc3Vycm91bmRlZCBieSB0d28gcXVvdGUgY2hhcmFjdGVycyAoJyksXG4vLyAgIGV4Y2VwdCBhIHNpbmdsZSBxdW90ZSBzeW1ib2wsIHdoaWNoIGVuZHMgdGhlIHNlcXVlbmNlLlxuLy8gICBUd28gcXVvdGUgY2hhcmFjdGVycyBkbyBub3QgZW5kIHRoZSBzZXF1ZW5jZS5cbi8vICAgSWYgdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc2luZ2xlIHF1b3RlXG4vLyAgIHRoZW4gdGhlIHNlcXVlbmNlIHdpbGwgY29udGludWUgdW50aWwgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLlxuLy8gLSAuIG1hdGNoZXMgYW55IHNpbmdsZSBjaGFyYWN0ZXIgdW5tYXRjaGVkIGJ5IHByZXZpb3VzIHBhcnRzIG9mIHRoZSBSZWdFeHBzXG5cbnZhciBmb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1t5WVFxTUx3SWREZWNpaEhLa21zXW98KFxcdylcXDEqfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nOyAvLyBUaGlzIFJlZ0V4cCBjYXRjaGVzIHN5bWJvbHMgZXNjYXBlZCBieSBxdW90ZXMsIGFuZCBhbHNvXG4vLyBzZXF1ZW5jZXMgb2Ygc3ltYm9scyBQLCBwLCBhbmQgdGhlIGNvbWJpbmF0aW9ucyBsaWtlIGBQUFBQUFBQcHBwcHBgXG5cbnZhciBsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9QK3ArfFArfHArfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nO1xudmFyIGVzY2FwZWRTdHJpbmdSZWdFeHAgPSAvXicoW15dKj8pJz8kLztcbnZhciBkb3VibGVRdW90ZVJlZ0V4cCA9IC8nJy9nO1xudmFyIHVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwID0gL1thLXpBLVpdLztcbi8qKlxuICogQG5hbWUgZm9ybWF0XG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEZvcm1hdCB0aGUgZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nIGluIHRoZSBnaXZlbiBmb3JtYXQuIFRoZSByZXN1bHQgbWF5IHZhcnkgYnkgbG9jYWxlLlxuICpcbiAqID4g4pqg77iPIFBsZWFzZSBub3RlIHRoYXQgdGhlIGBmb3JtYXRgIHRva2VucyBkaWZmZXIgZnJvbSBNb21lbnQuanMgYW5kIG90aGVyIGxpYnJhcmllcy5cbiAqID4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqIFRoZSBjaGFyYWN0ZXJzIHdyYXBwZWQgYmV0d2VlbiB0d28gc2luZ2xlIHF1b3RlcyBjaGFyYWN0ZXJzICgnKSBhcmUgZXNjYXBlZC5cbiAqIFR3byBzaW5nbGUgcXVvdGVzIGluIGEgcm93LCB3aGV0aGVyIGluc2lkZSBvciBvdXRzaWRlIGEgcXVvdGVkIHNlcXVlbmNlLCByZXByZXNlbnQgYSAncmVhbCcgc2luZ2xlIHF1b3RlLlxuICogKHNlZSB0aGUgbGFzdCBleGFtcGxlKVxuICpcbiAqIEZvcm1hdCBvZiB0aGUgc3RyaW5nIGlzIGJhc2VkIG9uIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqIGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGVcbiAqIHdpdGggYSBmZXcgYWRkaXRpb25zIChzZWUgbm90ZSA3IGJlbG93IHRoZSB0YWJsZSkuXG4gKlxuICogQWNjZXB0ZWQgcGF0dGVybnM6XG4gKiB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQYXR0ZXJuIHwgUmVzdWx0IGV4YW1wbGVzICAgICAgICAgICAgICAgICAgIHwgTm90ZXMgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLXxcbiAqIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEcuLkdHRyAgfCBBRCwgQkMgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHICAgIHwgQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3QgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHR0cgICB8IEEsIEIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQ2FsZW5kYXIgeWVhciAgICAgICAgICAgICAgICAgICB8IHkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5byAgICAgIHwgNDR0aCwgMXN0LCAwdGgsIDE3dGggICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5ICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eXkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICB8IFkgICAgICAgfCA0NCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZbyAgICAgIHwgNDR0aCwgMXN0LCAxOTAwdGgsIDIwMTd0aCAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVkgICAgICB8IDQ0LCAwMSwgMDAsIDE3ICAgICAgICAgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWSAgICAgfCAwNDQsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZICAgIHwgMDA0NCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWVkgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgICB8IFIgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUiAgICAgIHwgLTQzLCAwMCwgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSICAgICB8IC0wNDMsIDAwMCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlIgICAgfCAtMDA0MywgMDAwMCwgMDAwMSwgMTkwMCwgMjAxNyAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSUiAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1LDcgfFxuICogfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgIHwgdSAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1ICAgICAgfCAtNDMsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXUgICAgIHwgLTA0MywgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dSAgICB8IC0wMDQzLCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXV1ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IFF1YXJ0ZXIgKGZvcm1hdHRpbmcpICAgICAgICAgICAgfCBRICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVFRICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IFF1YXJ0ZXIgKHN0YW5kLWFsb25lKSAgICAgICAgICAgfCBxICAgICAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcW8gICAgICB8IDFzdCwgMm5kLCAzcmQsIDR0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxICAgICAgfCAwMSwgMDIsIDAzLCAwNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXEgICAgIHwgUTEsIFEyLCBRMywgUTQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcSAgICB8IDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXFxICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCA0ICAgICB8XG4gKiB8IE1vbnRoIChmb3JtYXR0aW5nKSAgICAgICAgICAgICAgfCBNICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU0gICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTSAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU1NICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1vbnRoIChzdGFuZC1hbG9uZSkgICAgICAgICAgICAgfCBMICAgICAgIHwgMSwgMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDEydGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMICAgICAgfCAwMSwgMDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTEwgICAgIHwgSmFuLCBGZWIsIC4uLiwgRGVjICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTCAgICB8IEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTExMICAgfCBKLCBGLCAuLi4sIEQgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgfCB3ICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHd3ICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICAgfCBJICAgICAgIHwgMSwgMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDUzdGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElJICAgICAgfCAwMSwgMDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICAgfCBkICAgICAgIHwgMSwgMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDMxc3QgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRkICAgICAgfCAwMSwgMDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICAgfCBEICAgICAgIHwgMSwgMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDM2NXRoLCAzNjZ0aCAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREICAgICAgfCAwMSwgMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREQgICAgIHwgMDAxLCAwMDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRERERCAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgRGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgICAgICB8IEUuLkVFRSAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFRSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IElTTyBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgfCBpICAgICAgIHwgMSwgMiwgMywgLi4uLCA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaW8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDd0aCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpICAgICAgfCAwMSwgMDIsIC4uLiwgMDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWkgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaWkgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgNyAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgIHwgZSAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZSAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWVlICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKHN0YW5kLWFsb25lKSB8IGMgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2MgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjYyAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2MgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjYyAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhLi5hYSAgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhICAgICB8IGFtLCBwbSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWEgICAgfCBhLm0uLCBwLm0uICAgICAgICAgICAgICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhYSAgIHwgYSwgcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgIHwgYi4uYmIgICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYiAgICAgfCBhbSwgcG0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiICAgIHwgYS5tLiwgcC5tLiwgbm9vbiwgbWlkbmlnaHQgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYmIgICB8IGEsIHAsIG4sIG1pICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgICB8IEIuLkJCQiAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCICAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQkIgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgICB8IGggICAgICAgfCAxLCAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBobyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMTJ0aCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaGggICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgICB8IEggICAgICAgfCAwLCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBIbyAgICAgIHwgMHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSEggICAgICB8IDAwLCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgICB8IEsgICAgICAgfCAxLCAyLCAuLi4sIDExLCAwICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMHRoICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS0sgICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgICB8IGsgICAgICAgfCAyNCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrbyAgICAgIHwgMjR0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga2sgICAgICB8IDI0LCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgICB8IG0gICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW0gICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgICB8IHMgICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc3MgICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgICB8IFMgICAgICAgfCAwLCAxLCAuLi4sIDkgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTUyAgICAgIHwgMDAsIDAxLCAuLi4sIDk5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTICAgICB8IDAwMCwgMDAxLCAuLi4sIDk5OSAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTU1MgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3LyBaKSAgICAgICAgfCBYICAgICAgIHwgLTA4LCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFggICAgICB8IC0wODAwLCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWCAgICAgfCAtMDg6MDAsICswNTozMCwgWiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYICAgIHwgLTA4MDAsICswNTMwLCBaLCArMTIzNDU2ICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWFggICB8IC0wODowMCwgKzA1OjMwLCBaLCArMTI6MzQ6NTYgICAgICB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgICB8IHggICAgICAgfCAtMDgsICswNTMwLCArMDAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eCAgICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4ICAgICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHggICAgfCAtMDgwMCwgKzA1MzAsICswMDAwLCArMTIzNDU2ICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4eCAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCwgKzEyOjM0OjU2IHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgIHwgTy4uLk9PTyB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE9PT08gICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyICAgICB8XG4gKiB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSAgfCB6Li4uenp6IHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgNiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgenp6eiAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIsNiAgIHxcbiAqIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgICB8IHQgICAgICAgfCA1MTI5Njk1MjAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB0dCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgIHwgVCAgICAgICB8IDUxMjk2OTUyMDkwMCAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFRUICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICAgfCBQICAgICAgIHwgMDQvMjkvMTQ1MyAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFAgICAgICB8IEFwciAyOSwgMTQ1MyAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUCAgICAgfCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQICAgIHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgIHwgcCAgICAgICB8IDEyOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwICAgICAgfCAxMjowMDowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHAgICAgIHwgMTI6MDA6MDAgQU0gR01UKzIgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwcCAgICB8IDEyOjAwOjAwIEFNIEdNVCswMjowMCAgICAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgQ29tYmluYXRpb24gb2YgZGF0ZSBhbmQgdGltZSAgICB8IFBwICAgICAgfCAwNC8yOS8xNDUzLCAxMjowMCBBTSAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUHBwICAgIHwgQXByIDI5LCAxNDUzLCAxMjowMDowMCBBTSAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQcHBwICB8IEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFBwcHBwfCBGcmlkYXksIEFwcmlsIDI5dGgsIDE0NTMgYXQgLi4uICAgfCAyLDcgICB8XG4gKiBOb3RlczpcbiAqIDEuIFwiRm9ybWF0dGluZ1wiIHVuaXRzIChlLmcuIGZvcm1hdHRpbmcgcXVhcnRlcikgaW4gdGhlIGRlZmF1bHQgZW4tVVMgbG9jYWxlXG4gKiAgICBhcmUgdGhlIHNhbWUgYXMgXCJzdGFuZC1hbG9uZVwiIHVuaXRzLCBidXQgYXJlIGRpZmZlcmVudCBpbiBzb21lIGxhbmd1YWdlcy5cbiAqICAgIFwiRm9ybWF0dGluZ1wiIHVuaXRzIGFyZSBkZWNsaW5lZCBhY2NvcmRpbmcgdG8gdGhlIHJ1bGVzIG9mIHRoZSBsYW5ndWFnZVxuICogICAgaW4gdGhlIGNvbnRleHQgb2YgYSBkYXRlLiBcIlN0YW5kLWFsb25lXCIgdW5pdHMgYXJlIGFsd2F5cyBub21pbmF0aXZlIHNpbmd1bGFyOlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTExMTCcsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWQnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTU1NTScsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWR1J2BcbiAqXG4gKiAyLiBBbnkgc2VxdWVuY2Ugb2YgdGhlIGlkZW50aWNhbCBsZXR0ZXJzIGlzIGEgcGF0dGVybiwgdW5sZXNzIGl0IGlzIGVzY2FwZWQgYnlcbiAqICAgIHRoZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyAoc2VlIGJlbG93KS5cbiAqICAgIElmIHRoZSBzZXF1ZW5jZSBpcyBsb25nZXIgdGhhbiBsaXN0ZWQgaW4gdGFibGUgKGUuZy4gYEVFRUVFRUVFRUVFYClcbiAqICAgIHRoZSBvdXRwdXQgd2lsbCBiZSB0aGUgc2FtZSBhcyBkZWZhdWx0IHBhdHRlcm4gZm9yIHRoaXMgdW5pdCwgdXN1YWxseVxuICogICAgdGhlIGxvbmdlc3Qgb25lIChpbiBjYXNlIG9mIElTTyB3ZWVrZGF5cywgYEVFRUVgKS4gRGVmYXVsdCBwYXR0ZXJucyBmb3IgdW5pdHNcbiAqICAgIGFyZSBtYXJrZWQgd2l0aCBcIjJcIiBpbiB0aGUgbGFzdCBjb2x1bW4gb2YgdGhlIHRhYmxlLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NJykgLy89PiAnTm92J2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTScpIC8vPT4gJ04nYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAzLiBTb21lIHBhdHRlcm5zIGNvdWxkIGJlIHVubGltaXRlZCBsZW5ndGggKHN1Y2ggYXMgYHl5eXl5eXl5YCkuXG4gKiAgICBUaGUgb3V0cHV0IHdpbGwgYmUgcGFkZGVkIHdpdGggemVyb3MgdG8gbWF0Y2ggdGhlIGxlbmd0aCBvZiB0aGUgcGF0dGVybi5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ3l5eXl5eXl5JykgLy89PiAnMDAwMDIwMTcnYFxuICpcbiAqIDQuIGBRUVFRUWAgYW5kIGBxcXFxcWAgY291bGQgYmUgbm90IHN0cmljdGx5IG51bWVyaWNhbCBpbiBzb21lIGxvY2FsZXMuXG4gKiAgICBUaGVzZSB0b2tlbnMgcmVwcmVzZW50IHRoZSBzaG9ydGVzdCBmb3JtIG9mIHRoZSBxdWFydGVyLlxuICpcbiAqIDUuIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBwYXR0ZXJucyBhcmUgQi5DLiB5ZWFyczpcbiAqXG4gKiAgICB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICogICAgfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAqICAgIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gKiAgICB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICogICAgfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAqXG4gKiAgICBBbHNvIGB5eWAgYWx3YXlzIHJldHVybnMgdGhlIGxhc3QgdHdvIGRpZ2l0cyBvZiBhIHllYXIsXG4gKiAgICB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQ6XG4gKlxuICogICAgfCBZZWFyIHwgYHl5YCB8IGB1dWAgfFxuICogICAgfC0tLS0tLXwtLS0tLS18LS0tLS0tfFxuICogICAgfCAxICAgIHwgICAwMSB8ICAgMDEgfFxuICogICAgfCAxNCAgIHwgICAxNCB8ICAgMTQgfFxuICogICAgfCAzNzYgIHwgICA3NiB8ICAzNzYgfFxuICogICAgfCAxNDUzIHwgICA1MyB8IDE0NTMgfFxuICpcbiAqICAgIFRoZSBzYW1lIGRpZmZlcmVuY2UgaXMgdHJ1ZSBmb3IgbG9jYWwgYW5kIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFycyAoYFlgIGFuZCBgUmApLFxuICogICAgZXhjZXB0IGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJzIGFyZSBkZXBlbmRlbnQgb24gYG9wdGlvbnMud2Vla1N0YXJ0c09uYFxuICogICAgYW5kIGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgKGNvbXBhcmUgW2dldElTT1dlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldElTT1dlZWtZZWFyfVxuICogICAgYW5kIFtnZXRXZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRXZWVrWWVhcn0pLlxuICpcbiAqIDYuIFNwZWNpZmljIG5vbi1sb2NhdGlvbiB0aW1lem9uZXMgYXJlIGN1cnJlbnRseSB1bmF2YWlsYWJsZSBpbiBgZGF0ZS1mbnNgLFxuICogICAgc28gcmlnaHQgbm93IHRoZXNlIHRva2VucyBmYWxsIGJhY2sgdG8gR01UIHRpbWV6b25lcy5cbiAqXG4gKiA3LiBUaGVzZSBwYXR0ZXJucyBhcmUgbm90IGluIHRoZSBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiAgICAtIGBpYDogSVNPIGRheSBvZiB3ZWVrXG4gKiAgICAtIGBJYDogSVNPIHdlZWsgb2YgeWVhclxuICogICAgLSBgUmA6IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKiAgICAtIGB0YDogc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYFRgOiBtaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBvYDogb3JkaW5hbCBudW1iZXIgbW9kaWZpZXJcbiAqICAgIC0gYFBgOiBsb25nIGxvY2FsaXplZCBkYXRlXG4gKiAgICAtIGBwYDogbG9uZyBsb2NhbGl6ZWQgdGltZVxuICpcbiAqIDguIGBZWWAgYW5kIGBZWVlZYCB0b2tlbnMgcmVwcmVzZW50IHdlZWstbnVtYmVyaW5nIHllYXJzIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIHllYXJzLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqIDkuIGBEYCBhbmQgYEREYCB0b2tlbnMgcmVwcmVzZW50IGRheXMgb2YgdGhlIHllYXIgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggZGF5cyBvZiB0aGUgbW9udGguXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogLSBUaGUgc2Vjb25kIGFyZ3VtZW50IGlzIG5vdyByZXF1aXJlZCBmb3IgdGhlIHNha2Ugb2YgZXhwbGljaXRuZXNzLlxuICpcbiAqICAgYGBgamF2YXNjcmlwdFxuICogICAvLyBCZWZvcmUgdjIuMC4wXG4gKiAgIGZvcm1hdChuZXcgRGF0ZSgyMDE2LCAwLCAxKSlcbiAqXG4gKiAgIC8vIHYyLjAuMCBvbndhcmRcbiAqICAgZm9ybWF0KG5ldyBEYXRlKDIwMTYsIDAsIDEpLCBcInl5eXktTU0tZGQnVCdISDptbTpzcy5TU1N4eHhcIilcbiAqICAgYGBgXG4gKlxuICogLSBOZXcgZm9ybWF0IHN0cmluZyBBUEkgZm9yIGBmb3JtYXRgIGZ1bmN0aW9uXG4gKiAgIHdoaWNoIGlzIGJhc2VkIG9uIFtVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzVdKGh0dHBzOi8vd3d3LnVuaWNvZGUub3JnL3JlcG9ydHMvdHIzNS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9GaWVsZF9TeW1ib2xfVGFibGUpLlxuICogICBTZWUgW3RoaXMgcG9zdF0oaHR0cHM6Ly9ibG9nLmRhdGUtZm5zLm9yZy9wb3N0L3VuaWNvZGUtdG9rZW5zLWluLWRhdGUtZm5zLXYyLXNyZWF0eWtpOTFqZykgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiAtIENoYXJhY3RlcnMgYXJlIG5vdyBlc2NhcGVkIHVzaW5nIHNpbmdsZSBxdW90ZSBzeW1ib2xzIChgJ2ApIGluc3RlYWQgb2Ygc3F1YXJlIGJyYWNrZXRzLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHBhcmFtIHtTdHJpbmd9IGZvcm1hdCAtIHRoZSBzdHJpbmcgb2YgdG9rZW5zXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU9MV0gLSB0aGUgZGF5IG9mIEphbnVhcnksIHdoaWNoIGlzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIHdlZWstbnVtYmVyaW5nIHllYXIgdG9rZW5zIGBZWWAgYW5kIGBZWVlZYDtcbiAqICAgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgZGF5IG9mIHllYXIgdG9rZW5zIGBEYCBhbmQgYEREYDtcbiAqICAgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZ1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYGRhdGVgIG11c3Qgbm90IGJlIEludmFsaWQgRGF0ZVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGxvY2FsaXplYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGZvcm1hdExvbmdgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy53ZWVrU3RhcnRzT25gIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5YCBpbnN0ZWFkIG9mIGBZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gZm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAxMSBGZWJydWFyeSAyMDE0IGluIG1pZGRsZS1lbmRpYW4gZm9ybWF0OlxuICogdmFyIHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCAxLCAxMSksICdNTS9kZC95eXl5JylcbiAqIC8vPT4gJzAyLzExLzIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFJlcHJlc2VudCAyIEp1bHkgMjAxNCBpbiBFc3BlcmFudG86XG4gKiBpbXBvcnQgeyBlb0xvY2FsZSB9IGZyb20gJ2RhdGUtZm5zL2xvY2FsZS9lbydcbiAqIHZhciByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiksIFwiZG8gJ2RlJyBNTU1NIHl5eXlcIiwge1xuICogICBsb2NhbGU6IGVvTG9jYWxlXG4gKiB9KVxuICogLy89PiAnMi1hIGRlIGp1bGlvIDIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEVzY2FwZSBzdHJpbmcgYnkgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnM6XG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIsIDE1KSwgXCJoICdvJydjbG9jaydcIilcbiAqIC8vPT4gXCIzIG8nY2xvY2tcIlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdChkaXJ0eURhdGUsIGRpcnR5Rm9ybWF0U3RyLCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBmb3JtYXRTdHIgPSBTdHJpbmcoZGlydHlGb3JtYXRTdHIpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlIHx8IGRlZmF1bHRMb2NhbGU7XG4gIHZhciBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU7XG4gIHZhciBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyAxIDogdG9JbnRlZ2VyKGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA6IHRvSW50ZWdlcihvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGxvY2FsZVdlZWtTdGFydHNPbiA9IGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLndlZWtTdGFydHNPbjtcbiAgdmFyIGRlZmF1bHRXZWVrU3RhcnRzT24gPSBsb2NhbGVXZWVrU3RhcnRzT24gPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIobG9jYWxlV2Vla1N0YXJ0c09uKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IG9wdGlvbnMud2Vla1N0YXJ0c09uID09IG51bGwgPyBkZWZhdWx0V2Vla1N0YXJ0c09uIDogdG9JbnRlZ2VyKG9wdGlvbnMud2Vla1N0YXJ0c09uKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAwIGFuZCA2IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICBpZiAoIWxvY2FsZS5sb2NhbGl6ZSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGxvY2FsaXplIHByb3BlcnR5Jyk7XG4gIH1cblxuICBpZiAoIWxvY2FsZS5mb3JtYXRMb25nKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gZm9ybWF0TG9uZyBwcm9wZXJ0eScpO1xuICB9XG5cbiAgdmFyIG9yaWdpbmFsRGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuXG4gIGlmICghaXNWYWxpZChvcmlnaW5hbERhdGUpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICB9IC8vIENvbnZlcnQgdGhlIGRhdGUgaW4gc3lzdGVtIHRpbWV6b25lIHRvIHRoZSBzYW1lIGRhdGUgaW4gVVRDKzAwOjAwIHRpbWV6b25lLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdCB3aGVuIFVUQyBmdW5jdGlvbnMgd2lsbCBiZSBpbXBsZW1lbnRlZCwgbG9jYWxlcyB3aWxsIGJlIGNvbXBhdGlibGUgd2l0aCB0aGVtLlxuICAvLyBTZWUgYW4gaXNzdWUgYWJvdXQgVVRDIGZ1bmN0aW9uczogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuXG4gIHZhciB0aW1lem9uZU9mZnNldCA9IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMob3JpZ2luYWxEYXRlKTtcbiAgdmFyIHV0Y0RhdGUgPSBzdWJNaWxsaXNlY29uZHMob3JpZ2luYWxEYXRlLCB0aW1lem9uZU9mZnNldCk7XG4gIHZhciBmb3JtYXR0ZXJPcHRpb25zID0ge1xuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogZmlyc3RXZWVrQ29udGFpbnNEYXRlLFxuICAgIHdlZWtTdGFydHNPbjogd2Vla1N0YXJ0c09uLFxuICAgIGxvY2FsZTogbG9jYWxlLFxuICAgIF9vcmlnaW5hbERhdGU6IG9yaWdpbmFsRGF0ZVxuICB9O1xuICB2YXIgcmVzdWx0ID0gZm9ybWF0U3RyLm1hdGNoKGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcblxuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gJ3AnIHx8IGZpcnN0Q2hhcmFjdGVyID09PSAnUCcpIHtcbiAgICAgIHZhciBsb25nRm9ybWF0dGVyID0gbG9uZ0Zvcm1hdHRlcnNbZmlyc3RDaGFyYWN0ZXJdO1xuICAgICAgcmV0dXJuIGxvbmdGb3JtYXR0ZXIoc3Vic3RyaW5nLCBsb2NhbGUuZm9ybWF0TG9uZywgZm9ybWF0dGVyT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1YnN0cmluZztcbiAgfSkuam9pbignJykubWF0Y2goZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICAvLyBSZXBsYWNlIHR3byBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyB3aXRoIG9uZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyXG4gICAgaWYgKHN1YnN0cmluZyA9PT0gXCInJ1wiKSB7XG4gICAgICByZXR1cm4gXCInXCI7XG4gICAgfVxuXG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSBcIidcIikge1xuICAgICAgcmV0dXJuIGNsZWFuRXNjYXBlZFN0cmluZyhzdWJzdHJpbmcpO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXR0ZXIgPSBmb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcblxuICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgIGlmICghb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnMgJiYgaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHN1YnN0cmluZykpIHtcbiAgICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcihzdWJzdHJpbmcsIGRpcnR5Rm9ybWF0U3RyLCBkaXJ0eURhdGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucyAmJiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHN1YnN0cmluZykpIHtcbiAgICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcihzdWJzdHJpbmcsIGRpcnR5Rm9ybWF0U3RyLCBkaXJ0eURhdGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm9ybWF0dGVyKHV0Y0RhdGUsIHN1YnN0cmluZywgbG9jYWxlLmxvY2FsaXplLCBmb3JtYXR0ZXJPcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIubWF0Y2godW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHApKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignRm9ybWF0IHN0cmluZyBjb250YWlucyBhbiB1bmVzY2FwZWQgbGF0aW4gYWxwaGFiZXQgY2hhcmFjdGVyIGAnICsgZmlyc3RDaGFyYWN0ZXIgKyAnYCcpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBjbGVhbkVzY2FwZWRTdHJpbmcoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0Lm1hdGNoKGVzY2FwZWRTdHJpbmdSZWdFeHApWzFdLnJlcGxhY2UoZG91YmxlUXVvdGVSZWdFeHAsIFwiJ1wiKTtcbn0iLCJleHBvcnQgZW51bSBNZXNzYWdlVHlwZSB7XHJcbiAgICBTdGF5QWxpdmUgPSAnaW50ZXJuYWwvc3RheS1hbGl2ZScsXHJcbiAgICBEcm9wRGF0YWJhc2VDb25uZWN0aW9ucyA9ICdpbnRlcm5hbC9kcm9wLWRiLWNvbm5lY3Rpb25zJyxcclxuXHJcbiAgICAvLyBub3RpZmljYXRpb25zXHJcbiAgICBOb3RpZmljYXRpb24gPSAnbm90aWZpY2F0aW9uJyxcclxuICAgIFxyXG4gICAgLy8gZXhwZWRpdGlvbnNcclxuICAgIFRyYWNrRXhwZWRpdGlvbiA9ICdleHBlZGl0aW9uL3RyYWNrLWV4cGVkaXRpb24nLFxyXG4gICAgRXhwZWRpdGlvbiA9ICdleHBlZGl0aW9uL3NpbmdsZScsXHJcbiAgICBOZXdFeHBlZGl0aW9uID0gJ2V4cGVkaXRpb24vbmV3JyxcclxuXHJcbiAgICAvLyBkZWJyaXMgZmllbGQgcmVwb3J0c1xyXG4gICAgRGVicmlzRmllbGRSZXBvcnQgPSAnZGVicmlzLWZpZWxkcy9zaW5nbGUnLFxyXG4gICAgTmV3RGVicmlzRmllbGRSZXBvcnQgPSAnZGVicmlzLWZpZWxkcy9uZXcnLFxyXG4gICAgVHJhY2tEZWJyaXNGaWVsZFJlcG9ydCA9ICdkZWJyaXMtZmllbGRzL3RyYWNrJyxcclxuICAgIFRyYWNrTWFudWFsRGVicmlzRmllbGRSZXBvcnQgPSAnZGVicmlzLWZpZWxkcy90cmFjay1tYW51YWxseScsXHJcblxyXG4gICAgLy8gY29tYmF0IHJlcG9ydHNcclxuICAgIENvbWJhdFJlcG9ydCA9ICdjb21iYXQtcmVwb3J0cy9zaW5nbGUnLFxyXG4gICAgTmV3Q29tYmF0UmVwb3J0ID0gJ2NvbWJhdC1yZXBvcnRzL25ldycsXHJcbiAgICBUcmFja0NvbWJhdFJlcG9ydCA9ICdjb21iYXQtcmVwb3J0cy90cmFjaycsXHJcbiAgICBSZXF1ZXN0U2luZ2xlQ29tYmF0UmVwb3J0ID0gJ2NvbWJhdC1yZXBvcnRzL3JlcXVlc3Qtc2luZ2xlLXJlcG9ydCcsXHJcbiAgICBDb21iYXRSZXBvcnRVbmtub3duID0gJ2NvbWJhdC1yZXBvcnRzL2lzLXVua25vd24nLFxyXG5cclxuICAgIC8vIG1lc3NhZ2UgdHJhY2tpbmdcclxuICAgIFdpbGxOb3RCZVRyYWNrZWQgPSAnbWVzc2FnZS10cmFja2luZy9uby10cmFja2luZycsIC8vIG1lc3NhZ2Ugd2lsbCBub3QgYmUgdHJhY2tlZCBiZWNhdXNlIGl0IGlzIGlnbm9yZWQgZm9yIHNvbWUgcmVhc29uIChlLmcuIGVzcGlvbmFnZSBjb21iYXRzKVxyXG4gICAgVHJhY2tpbmdFcnJvciA9ICdtZXNzYWdlLXRyYWNraW5nL2Vycm9yJyxcclxuXHJcbiAgICAvLyBlbXBpcmUgdHJhY2tpbmdcclxuICAgIFVwZGF0ZVBsYW5ldERhdGEgPSAnZW1waXJlL3VwZGF0ZS1wbGFuZXQtZGF0YScsXHJcbiAgICBVcGRhdGVQbGFuZXRBY3RpdmVJdGVtcyA9ICdlbXBpcmUvdXBkYXRlLWFjdGl2ZS1pdGVtcycsXHJcbiAgICBVcGRhdGVQbGFuZXRCdWlsZGluZ0xldmVscyA9ICdlbXBpcmUvdXBkYXRlLWJ1aWxkaW5ncy1sZXZlbHMnLFxyXG4gICAgVXBkYXRlUmVzZWFyY2hMZXZlbHMgPSAnZW1waXJlL3VwZGF0ZS1yZXNlYXJjaC1sZXZlbHMnLFxyXG4gICAgVXBkYXRlUGxhbmV0U2hpcENvdW50cyA9ICdlbXBpcmUvdXBkYXRlLXBsYW5ldC1zaGlwcycsXHJcbiAgICBVcGRhdGVQbGFuZXREZWZlbnNlQ291bnRzID0gJ2VtcGlyZS91cGRhdGUtcGxhbmV0LWRlZmVuc2VzJyxcclxuICAgIFVwZGF0ZVBsYW5ldE1pc3NpbGVDb3VudHMgPSAnZW1waXJlL3VwZGF0ZS1wbGFuZXQtbWlzc2lsZXMnLFxyXG4gICAgVXBkYXRlQWN0aXZlT2ZmaWNlcnMgPSAnZW1waXJlL3VwZGF0ZS1hY3RpdmUtb2ZmaWNlcnMnLFxyXG4gICAgVXBkYXRlUGxheWVyQ2xhc3MgPSAnZW1waXJlL3VwZGF0ZS1wbGF5ZXItY2xhc3MnLFxyXG4gICAgVXBkYXRlQWxsaWFuY2VDbGFzcyA9ICdlbXBpcmUvdXBkYXRlLWFsbGlhbmNlLWNsYXNzJyxcclxuICAgIFVwZGF0ZVBsYW5ldFByb2R1Y3Rpb25TZXR0aW5ncyA9ICdlbXBpcmUvdXBkYXRlLXBsYW5ldC1wcm9kdWN0aW9uLXNldHRpbmdzJyxcclxuICAgIFVwZGF0ZUZsZWV0cyA9ICdlbXBpcmUvZmxlZXRzJyxcclxuICAgIE5vdGlmeUVtcGlyZURhdGFVcGRhdGUgPSAnZW1waXJlL25vdGlmeS11cGRhdGUnLFxyXG5cclxuICAgIC8vIHNldHRpbmdzXHJcbiAgICBSZXF1ZXN0U2V0dGluZ3MgPSAnc2V0dGluZ3MvcmVxdWVzdC1kYXRhJyxcclxuICAgIFNldHRpbmdzID0gJ3NldHRpbmdzL2RhdGEnLFxyXG4gICAgTm90aWZ5U2V0dGluZ3NVcGRhdGUgPSAnc2V0dGluZ3Mvbm90aWZ5LXVwZGF0ZScsXHJcblxyXG4gICAgLy8gdW5pdmVyc2UgaGlzdG9yeVxyXG4gICAgTm90aWZ5VW5pdmVyc2VIaXN0b3J5VXBkYXRlID0gJ3VuaXZlcnNlLWhpc3Rvcnkvbm90aWZ5LXVwZGF0ZScsXHJcblxyXG4gICAgLy8gc2VydmVyIHNldHRpbmdzXHJcbiAgICBOb3RpZnlTZXJ2ZXJTZXR0aW5nc1VwZGF0ZSA9ICdzZXJ2ZXItc2V0dGluZ3Mvbm90aWZ5LXVwZGF0ZScsXHJcbiAgICBGb3JjZVVwZGF0ZVNlcnZlclNldHRpbmdzID0gJ3NlcnZlci1zZXR0aW5ncy9mb3JjZS11cGRhdGUnLFxyXG5cclxuICAgIC8vIGFjY291bnRzICYgdW5pdmVyc2VzXHJcbiAgICBVcGRhdGVQbGF5ZXJOYW1lID0gJ2FjY291bnRzL3VwZGF0ZS1wbGF5ZXItbmFtZScsXHJcbiAgICBVcGRhdGVVbml2ZXJzZU5hbWUgPSAndW5pdmVyc2VzL3VwZGF0ZS11bml2ZXJzZS1uYW1lJywgXHJcblxyXG4gICAgLy8gVW5pdmVyc2Utc3BlY2lmaWMgc2V0dGluZ3NcclxuICAgIE5vdGlmeVVuaXZlcnNlU3BlY2lmaWNTZXR0aW5nc1VwZGF0ZSA9ICd1bml2ZXJzZS1zcGVjaWZpYy1zZXR0aW5ncy9ub3RpZnktdXBkYXRlJyxcclxuXHJcbiAgICAvLyBsaWZlZm9ybXNcclxuICAgIFVwZGF0ZUxpZmVmb3JtRXhwZXJpZW5jZSA9ICdsaWZlZm9ybXMvdXBkYXRlLWxpZmVmb3JtLWV4cGVyaWVuY2UnLFxyXG4gICAgVXBkYXRlU2VsZWN0ZWRMaWZlZm9ybSA9ICdsaWZlZm9ybXMvdXBkYXRlLXNlbGVjdGVkLWxpZmVmb3JtJyxcclxuICAgIFVwZGF0ZVBsYW5ldEFjdGl2ZUxpZmVmb3JtQnVpbGRpbmdMZXZlbHMgPSAnbGlmZWZvcm1zL3VwZGF0ZS1hY3RpdmUtYnVpbGRpbmctbGV2ZWxzJyxcclxuICAgIFVwZGF0ZVBsYW5ldExpZmVmb3JtQnVpbGRpbmdMZXZlbHMgPSAnbGlmZWZvcm1zL3VwZGF0ZS1hbGwtYnVpbGRpbmctbGV2ZWxzJyxcclxuICAgIFVwZGF0ZVBsYW5ldEFjdGl2ZUxpZmVmb3JtVGVjaG5vbG9neUxldmVscyA9ICdsaWZlZm9ybXMvdXBkYXRlLWFjdGl2ZS10ZWNobm9sb2d5LWxldmVscycsXHJcbiAgICBVcGRhdGVQbGFuZXRMaWZlZm9ybVRlY2hub2xvZ3lMZXZlbHMgPSAnbGlmZWZvcm1zL3VwZGF0ZS1hbGwtdGVjaG5vbG9neS1sZXZlbHMnLFxyXG4gICAgVHJhY2tMaWZlZm9ybURpc2NvdmVyeSA9ICdsaWZlZm9ybXMvdHJhY2stZGlzY292ZXJ5JyxcclxuICAgIExpZmVmb3JtRGlzY292ZXJ5ID0gJ2xpZmVmb3Jtcy9kaXNjb3ZlcnknLFxyXG4gICAgTmV3TGlmZWZvcm1EaXNjb3ZlcnkgPSAnbGlmZWZvcm1zL25ldy1kaXNjb3ZlcnknLFxyXG59XHJcbiIsImV4cG9ydCBlbnVtIENvbWJhdFJlc3VsdFR5cGUge1xyXG4gICAgd29uID0gJ3dvbicsXHJcbiAgICBsb3N0ID0gJ2xvc3QnLFxyXG4gICAgZHJhdyA9ICdkcmF3JyxcclxuIH1cclxuIGV4cG9ydCBjb25zdCBDb21iYXRSZXN1bHRUeXBlcyA9IFtcclxuICAgIENvbWJhdFJlc3VsdFR5cGUud29uLFxyXG4gICAgQ29tYmF0UmVzdWx0VHlwZS5kcmF3LFxyXG4gICAgQ29tYmF0UmVzdWx0VHlwZS5sb3N0LFxyXG4gXTsiLCJleHBvcnQgZW51bSBSZXNvdXJjZVR5cGUge1xyXG4gICAgbWV0YWwgPSAnbWV0YWwnLFxyXG4gICAgY3J5c3RhbCA9ICdjcnlzdGFsJyxcclxuICAgIGRldXRlcml1bSA9ICdkZXV0ZXJpdW0nLFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgUmVzb3VyY2VUeXBlcyA9IFtcclxuICAgIFJlc291cmNlVHlwZS5tZXRhbCxcclxuICAgIFJlc291cmNlVHlwZS5jcnlzdGFsLFxyXG4gICAgUmVzb3VyY2VUeXBlLmRldXRlcml1bSxcclxuXTsiLCJpbXBvcnQgeyBmb3JtYXQgfSBmcm9tIFwiZGF0ZS1mbnNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfbG9nKC4uLmRhdGE6IGFueVtdKSB7XHJcbiAgICBjb25zb2xlLmxvZygnW09HYW1lIFRyYWNrZXJdJywgLi4uZGF0YSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfbG9nRXJyb3IoLi4uZGF0YTogYW55W10pIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ1tPR2FtZSBUcmFja2VyXScsIC4uLmRhdGEpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX2xvZ1dhcm5pbmcoLi4uZGF0YTogYW55W10pIHtcclxuICAgIGNvbnNvbGUud2FybignW09HYW1lIFRyYWNrZXJdJywgLi4uZGF0YSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfbG9nRGVidWcoLi4uZGF0YTogYW55W10pIHtcclxuICAgIGNvbnNvbGUuZGVidWcoJ1tPR2FtZSBUcmFja2VyXScsIGZvcm1hdChEYXRlLm5vdygpLCAneXl5eS1NTS1kZCBISC1tbS1zcy5TU1MnKSwgLi4uZGF0YSk7XHJcbn0iLCJjb25zdCBpbnN0YW5jZU9mQW55ID0gKG9iamVjdCwgY29uc3RydWN0b3JzKSA9PiBjb25zdHJ1Y3RvcnMuc29tZSgoYykgPT4gb2JqZWN0IGluc3RhbmNlb2YgYyk7XG5cbmxldCBpZGJQcm94eWFibGVUeXBlcztcbmxldCBjdXJzb3JBZHZhbmNlTWV0aG9kcztcbi8vIFRoaXMgaXMgYSBmdW5jdGlvbiB0byBwcmV2ZW50IGl0IHRocm93aW5nIHVwIGluIG5vZGUgZW52aXJvbm1lbnRzLlxuZnVuY3Rpb24gZ2V0SWRiUHJveHlhYmxlVHlwZXMoKSB7XG4gICAgcmV0dXJuIChpZGJQcm94eWFibGVUeXBlcyB8fFxuICAgICAgICAoaWRiUHJveHlhYmxlVHlwZXMgPSBbXG4gICAgICAgICAgICBJREJEYXRhYmFzZSxcbiAgICAgICAgICAgIElEQk9iamVjdFN0b3JlLFxuICAgICAgICAgICAgSURCSW5kZXgsXG4gICAgICAgICAgICBJREJDdXJzb3IsXG4gICAgICAgICAgICBJREJUcmFuc2FjdGlvbixcbiAgICAgICAgXSkpO1xufVxuLy8gVGhpcyBpcyBhIGZ1bmN0aW9uIHRvIHByZXZlbnQgaXQgdGhyb3dpbmcgdXAgaW4gbm9kZSBlbnZpcm9ubWVudHMuXG5mdW5jdGlvbiBnZXRDdXJzb3JBZHZhbmNlTWV0aG9kcygpIHtcbiAgICByZXR1cm4gKGN1cnNvckFkdmFuY2VNZXRob2RzIHx8XG4gICAgICAgIChjdXJzb3JBZHZhbmNlTWV0aG9kcyA9IFtcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuYWR2YW5jZSxcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuY29udGludWUsXG4gICAgICAgICAgICBJREJDdXJzb3IucHJvdG90eXBlLmNvbnRpbnVlUHJpbWFyeUtleSxcbiAgICAgICAgXSkpO1xufVxuY29uc3QgY3Vyc29yUmVxdWVzdE1hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCB0cmFuc2FjdGlvbkRvbmVNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgdHJhbnNhY3Rpb25TdG9yZU5hbWVzTWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHRyYW5zZm9ybUNhY2hlID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHJldmVyc2VUcmFuc2Zvcm1DYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCB1bmxpc3RlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlcXVlc3QucmVtb3ZlRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIHN1Y2Nlc3MpO1xuICAgICAgICAgICAgcmVxdWVzdC5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUod3JhcChyZXF1ZXN0LnJlc3VsdCkpO1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgICByZWplY3QocmVxdWVzdC5lcnJvcik7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCBzdWNjZXNzKTtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICB9KTtcbiAgICBwcm9taXNlXG4gICAgICAgIC50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAvLyBTaW5jZSBjdXJzb3JpbmcgcmV1c2VzIHRoZSBJREJSZXF1ZXN0ICgqc2lnaCopLCB3ZSBjYWNoZSBpdCBmb3IgbGF0ZXIgcmV0cmlldmFsXG4gICAgICAgIC8vIChzZWUgd3JhcEZ1bmN0aW9uKS5cbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSURCQ3Vyc29yKSB7XG4gICAgICAgICAgICBjdXJzb3JSZXF1ZXN0TWFwLnNldCh2YWx1ZSwgcmVxdWVzdCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2F0Y2hpbmcgdG8gYXZvaWQgXCJVbmNhdWdodCBQcm9taXNlIGV4Y2VwdGlvbnNcIlxuICAgIH0pXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7IH0pO1xuICAgIC8vIFRoaXMgbWFwcGluZyBleGlzdHMgaW4gcmV2ZXJzZVRyYW5zZm9ybUNhY2hlIGJ1dCBkb2Vzbid0IGRvZXNuJ3QgZXhpc3QgaW4gdHJhbnNmb3JtQ2FjaGUuIFRoaXNcbiAgICAvLyBpcyBiZWNhdXNlIHdlIGNyZWF0ZSBtYW55IHByb21pc2VzIGZyb20gYSBzaW5nbGUgSURCUmVxdWVzdC5cbiAgICByZXZlcnNlVHJhbnNmb3JtQ2FjaGUuc2V0KHByb21pc2UsIHJlcXVlc3QpO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuZnVuY3Rpb24gY2FjaGVEb25lUHJvbWlzZUZvclRyYW5zYWN0aW9uKHR4KSB7XG4gICAgLy8gRWFybHkgYmFpbCBpZiB3ZSd2ZSBhbHJlYWR5IGNyZWF0ZWQgYSBkb25lIHByb21pc2UgZm9yIHRoaXMgdHJhbnNhY3Rpb24uXG4gICAgaWYgKHRyYW5zYWN0aW9uRG9uZU1hcC5oYXModHgpKVxuICAgICAgICByZXR1cm47XG4gICAgY29uc3QgZG9uZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgdW5saXN0ZW4gPSAoKSA9PiB7XG4gICAgICAgICAgICB0eC5yZW1vdmVFdmVudExpc3RlbmVyKCdjb21wbGV0ZScsIGNvbXBsZXRlKTtcbiAgICAgICAgICAgIHR4LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICAgICAgdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBlcnJvcik7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgICByZWplY3QodHguZXJyb3IgfHwgbmV3IERPTUV4Y2VwdGlvbignQWJvcnRFcnJvcicsICdBYm9ydEVycm9yJykpO1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgdHguYWRkRXZlbnRMaXN0ZW5lcignY29tcGxldGUnLCBjb21wbGV0ZSk7XG4gICAgICAgIHR4LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGVycm9yKTtcbiAgICB9KTtcbiAgICAvLyBDYWNoZSBpdCBmb3IgbGF0ZXIgcmV0cmlldmFsLlxuICAgIHRyYW5zYWN0aW9uRG9uZU1hcC5zZXQodHgsIGRvbmUpO1xufVxubGV0IGlkYlByb3h5VHJhcHMgPSB7XG4gICAgZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIElEQlRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICAvLyBTcGVjaWFsIGhhbmRsaW5nIGZvciB0cmFuc2FjdGlvbi5kb25lLlxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdkb25lJylcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb25Eb25lTWFwLmdldCh0YXJnZXQpO1xuICAgICAgICAgICAgLy8gUG9seWZpbGwgZm9yIG9iamVjdFN0b3JlTmFtZXMgYmVjYXVzZSBvZiBFZGdlLlxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdvYmplY3RTdG9yZU5hbWVzJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQub2JqZWN0U3RvcmVOYW1lcyB8fCB0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAuZ2V0KHRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNYWtlIHR4LnN0b3JlIHJldHVybiB0aGUgb25seSBzdG9yZSBpbiB0aGUgdHJhbnNhY3Rpb24sIG9yIHVuZGVmaW5lZCBpZiB0aGVyZSBhcmUgbWFueS5cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnc3RvcmUnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY2VpdmVyLm9iamVjdFN0b3JlTmFtZXNbMV1cbiAgICAgICAgICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgOiByZWNlaXZlci5vYmplY3RTdG9yZShyZWNlaXZlci5vYmplY3RTdG9yZU5hbWVzWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBFbHNlIHRyYW5zZm9ybSB3aGF0ZXZlciB3ZSBnZXQgYmFjay5cbiAgICAgICAgcmV0dXJuIHdyYXAodGFyZ2V0W3Byb3BdKTtcbiAgICB9LFxuICAgIHNldCh0YXJnZXQsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGhhcyh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIElEQlRyYW5zYWN0aW9uICYmXG4gICAgICAgICAgICAocHJvcCA9PT0gJ2RvbmUnIHx8IHByb3AgPT09ICdzdG9yZScpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvcCBpbiB0YXJnZXQ7XG4gICAgfSxcbn07XG5mdW5jdGlvbiByZXBsYWNlVHJhcHMoY2FsbGJhY2spIHtcbiAgICBpZGJQcm94eVRyYXBzID0gY2FsbGJhY2soaWRiUHJveHlUcmFwcyk7XG59XG5mdW5jdGlvbiB3cmFwRnVuY3Rpb24oZnVuYykge1xuICAgIC8vIER1ZSB0byBleHBlY3RlZCBvYmplY3QgZXF1YWxpdHkgKHdoaWNoIGlzIGVuZm9yY2VkIGJ5IHRoZSBjYWNoaW5nIGluIGB3cmFwYCksIHdlXG4gICAgLy8gb25seSBjcmVhdGUgb25lIG5ldyBmdW5jIHBlciBmdW5jLlxuICAgIC8vIEVkZ2UgZG9lc24ndCBzdXBwb3J0IG9iamVjdFN0b3JlTmFtZXMgKGJvb28pLCBzbyB3ZSBwb2x5ZmlsbCBpdCBoZXJlLlxuICAgIGlmIChmdW5jID09PSBJREJEYXRhYmFzZS5wcm90b3R5cGUudHJhbnNhY3Rpb24gJiZcbiAgICAgICAgISgnb2JqZWN0U3RvcmVOYW1lcycgaW4gSURCVHJhbnNhY3Rpb24ucHJvdG90eXBlKSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHN0b3JlTmFtZXMsIC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGNvbnN0IHR4ID0gZnVuYy5jYWxsKHVud3JhcCh0aGlzKSwgc3RvcmVOYW1lcywgLi4uYXJncyk7XG4gICAgICAgICAgICB0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAuc2V0KHR4LCBzdG9yZU5hbWVzLnNvcnQgPyBzdG9yZU5hbWVzLnNvcnQoKSA6IFtzdG9yZU5hbWVzXSk7XG4gICAgICAgICAgICByZXR1cm4gd3JhcCh0eCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIEN1cnNvciBtZXRob2RzIGFyZSBzcGVjaWFsLCBhcyB0aGUgYmVoYXZpb3VyIGlzIGEgbGl0dGxlIG1vcmUgZGlmZmVyZW50IHRvIHN0YW5kYXJkIElEQi4gSW5cbiAgICAvLyBJREIsIHlvdSBhZHZhbmNlIHRoZSBjdXJzb3IgYW5kIHdhaXQgZm9yIGEgbmV3ICdzdWNjZXNzJyBvbiB0aGUgSURCUmVxdWVzdCB0aGF0IGdhdmUgeW91IHRoZVxuICAgIC8vIGN1cnNvci4gSXQncyBraW5kYSBsaWtlIGEgcHJvbWlzZSB0aGF0IGNhbiByZXNvbHZlIHdpdGggbWFueSB2YWx1ZXMuIFRoYXQgZG9lc24ndCBtYWtlIHNlbnNlXG4gICAgLy8gd2l0aCByZWFsIHByb21pc2VzLCBzbyBlYWNoIGFkdmFuY2UgbWV0aG9kcyByZXR1cm5zIGEgbmV3IHByb21pc2UgZm9yIHRoZSBjdXJzb3Igb2JqZWN0LCBvclxuICAgIC8vIHVuZGVmaW5lZCBpZiB0aGUgZW5kIG9mIHRoZSBjdXJzb3IgaGFzIGJlZW4gcmVhY2hlZC5cbiAgICBpZiAoZ2V0Q3Vyc29yQWR2YW5jZU1ldGhvZHMoKS5pbmNsdWRlcyhmdW5jKSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIC8vIENhbGxpbmcgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIHdpdGggdGhlIHByb3h5IGFzICd0aGlzJyBjYXVzZXMgSUxMRUdBTCBJTlZPQ0FUSU9OLCBzbyB3ZSB1c2VcbiAgICAgICAgICAgIC8vIHRoZSBvcmlnaW5hbCBvYmplY3QuXG4gICAgICAgICAgICBmdW5jLmFwcGx5KHVud3JhcCh0aGlzKSwgYXJncyk7XG4gICAgICAgICAgICByZXR1cm4gd3JhcChjdXJzb3JSZXF1ZXN0TWFwLmdldCh0aGlzKSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAvLyBDYWxsaW5nIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm94eSBhcyAndGhpcycgY2F1c2VzIElMTEVHQUwgSU5WT0NBVElPTiwgc28gd2UgdXNlXG4gICAgICAgIC8vIHRoZSBvcmlnaW5hbCBvYmplY3QuXG4gICAgICAgIHJldHVybiB3cmFwKGZ1bmMuYXBwbHkodW53cmFwKHRoaXMpLCBhcmdzKSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRyYW5zZm9ybUNhY2hhYmxlVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKVxuICAgICAgICByZXR1cm4gd3JhcEZ1bmN0aW9uKHZhbHVlKTtcbiAgICAvLyBUaGlzIGRvZXNuJ3QgcmV0dXJuLCBpdCBqdXN0IGNyZWF0ZXMgYSAnZG9uZScgcHJvbWlzZSBmb3IgdGhlIHRyYW5zYWN0aW9uLFxuICAgIC8vIHdoaWNoIGlzIGxhdGVyIHJldHVybmVkIGZvciB0cmFuc2FjdGlvbi5kb25lIChzZWUgaWRiT2JqZWN0SGFuZGxlcikuXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24pXG4gICAgICAgIGNhY2hlRG9uZVByb21pc2VGb3JUcmFuc2FjdGlvbih2YWx1ZSk7XG4gICAgaWYgKGluc3RhbmNlT2ZBbnkodmFsdWUsIGdldElkYlByb3h5YWJsZVR5cGVzKCkpKVxuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHZhbHVlLCBpZGJQcm94eVRyYXBzKTtcbiAgICAvLyBSZXR1cm4gdGhlIHNhbWUgdmFsdWUgYmFjayBpZiB3ZSdyZSBub3QgZ29pbmcgdG8gdHJhbnNmb3JtIGl0LlxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHdyYXAodmFsdWUpIHtcbiAgICAvLyBXZSBzb21ldGltZXMgZ2VuZXJhdGUgbXVsdGlwbGUgcHJvbWlzZXMgZnJvbSBhIHNpbmdsZSBJREJSZXF1ZXN0IChlZyB3aGVuIGN1cnNvcmluZyksIGJlY2F1c2VcbiAgICAvLyBJREIgaXMgd2VpcmQgYW5kIGEgc2luZ2xlIElEQlJlcXVlc3QgY2FuIHlpZWxkIG1hbnkgcmVzcG9uc2VzLCBzbyB0aGVzZSBjYW4ndCBiZSBjYWNoZWQuXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSURCUmVxdWVzdClcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3QodmFsdWUpO1xuICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgdHJhbnNmb3JtZWQgdGhpcyB2YWx1ZSBiZWZvcmUsIHJldXNlIHRoZSB0cmFuc2Zvcm1lZCB2YWx1ZS5cbiAgICAvLyBUaGlzIGlzIGZhc3RlciwgYnV0IGl0IGFsc28gcHJvdmlkZXMgb2JqZWN0IGVxdWFsaXR5LlxuICAgIGlmICh0cmFuc2Zvcm1DYWNoZS5oYXModmFsdWUpKVxuICAgICAgICByZXR1cm4gdHJhbnNmb3JtQ2FjaGUuZ2V0KHZhbHVlKTtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IHRyYW5zZm9ybUNhY2hhYmxlVmFsdWUodmFsdWUpO1xuICAgIC8vIE5vdCBhbGwgdHlwZXMgYXJlIHRyYW5zZm9ybWVkLlxuICAgIC8vIFRoZXNlIG1heSBiZSBwcmltaXRpdmUgdHlwZXMsIHNvIHRoZXkgY2FuJ3QgYmUgV2Vha01hcCBrZXlzLlxuICAgIGlmIChuZXdWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgdHJhbnNmb3JtQ2FjaGUuc2V0KHZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgICAgIHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5zZXQobmV3VmFsdWUsIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld1ZhbHVlO1xufVxuY29uc3QgdW53cmFwID0gKHZhbHVlKSA9PiByZXZlcnNlVHJhbnNmb3JtQ2FjaGUuZ2V0KHZhbHVlKTtcblxuZXhwb3J0IHsgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlIGFzIGEsIGluc3RhbmNlT2ZBbnkgYXMgaSwgcmVwbGFjZVRyYXBzIGFzIHIsIHVud3JhcCBhcyB1LCB3cmFwIGFzIHcgfTtcbiIsImltcG9ydCB7IHcgYXMgd3JhcCwgciBhcyByZXBsYWNlVHJhcHMgfSBmcm9tICcuL3dyYXAtaWRiLXZhbHVlLmpzJztcbmV4cG9ydCB7IHUgYXMgdW53cmFwLCB3IGFzIHdyYXAgfSBmcm9tICcuL3dyYXAtaWRiLXZhbHVlLmpzJztcblxuLyoqXG4gKiBPcGVuIGEgZGF0YWJhc2UuXG4gKlxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgZGF0YWJhc2UuXG4gKiBAcGFyYW0gdmVyc2lvbiBTY2hlbWEgdmVyc2lvbi5cbiAqIEBwYXJhbSBjYWxsYmFja3MgQWRkaXRpb25hbCBjYWxsYmFja3MuXG4gKi9cbmZ1bmN0aW9uIG9wZW5EQihuYW1lLCB2ZXJzaW9uLCB7IGJsb2NrZWQsIHVwZ3JhZGUsIGJsb2NraW5nLCB0ZXJtaW5hdGVkIH0gPSB7fSkge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihuYW1lLCB2ZXJzaW9uKTtcbiAgICBjb25zdCBvcGVuUHJvbWlzZSA9IHdyYXAocmVxdWVzdCk7XG4gICAgaWYgKHVwZ3JhZGUpIHtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCd1cGdyYWRlbmVlZGVkJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB1cGdyYWRlKHdyYXAocmVxdWVzdC5yZXN1bHQpLCBldmVudC5vbGRWZXJzaW9uLCBldmVudC5uZXdWZXJzaW9uLCB3cmFwKHJlcXVlc3QudHJhbnNhY3Rpb24pKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChibG9ja2VkKVxuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Jsb2NrZWQnLCAoKSA9PiBibG9ja2VkKCkpO1xuICAgIG9wZW5Qcm9taXNlXG4gICAgICAgIC50aGVuKChkYikgPT4ge1xuICAgICAgICBpZiAodGVybWluYXRlZClcbiAgICAgICAgICAgIGRiLmFkZEV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgKCkgPT4gdGVybWluYXRlZCgpKTtcbiAgICAgICAgaWYgKGJsb2NraW5nKVxuICAgICAgICAgICAgZGIuYWRkRXZlbnRMaXN0ZW5lcigndmVyc2lvbmNoYW5nZScsICgpID0+IGJsb2NraW5nKCkpO1xuICAgIH0pXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7IH0pO1xuICAgIHJldHVybiBvcGVuUHJvbWlzZTtcbn1cbi8qKlxuICogRGVsZXRlIGEgZGF0YWJhc2UuXG4gKlxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgZGF0YWJhc2UuXG4gKi9cbmZ1bmN0aW9uIGRlbGV0ZURCKG5hbWUsIHsgYmxvY2tlZCB9ID0ge30pIHtcbiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKG5hbWUpO1xuICAgIGlmIChibG9ja2VkKVxuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Jsb2NrZWQnLCAoKSA9PiBibG9ja2VkKCkpO1xuICAgIHJldHVybiB3cmFwKHJlcXVlc3QpLnRoZW4oKCkgPT4gdW5kZWZpbmVkKTtcbn1cblxuY29uc3QgcmVhZE1ldGhvZHMgPSBbJ2dldCcsICdnZXRLZXknLCAnZ2V0QWxsJywgJ2dldEFsbEtleXMnLCAnY291bnQnXTtcbmNvbnN0IHdyaXRlTWV0aG9kcyA9IFsncHV0JywgJ2FkZCcsICdkZWxldGUnLCAnY2xlYXInXTtcbmNvbnN0IGNhY2hlZE1ldGhvZHMgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiBnZXRNZXRob2QodGFyZ2V0LCBwcm9wKSB7XG4gICAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgSURCRGF0YWJhc2UgJiZcbiAgICAgICAgIShwcm9wIGluIHRhcmdldCkgJiZcbiAgICAgICAgdHlwZW9mIHByb3AgPT09ICdzdHJpbmcnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYWNoZWRNZXRob2RzLmdldChwcm9wKSlcbiAgICAgICAgcmV0dXJuIGNhY2hlZE1ldGhvZHMuZ2V0KHByb3ApO1xuICAgIGNvbnN0IHRhcmdldEZ1bmNOYW1lID0gcHJvcC5yZXBsYWNlKC9Gcm9tSW5kZXgkLywgJycpO1xuICAgIGNvbnN0IHVzZUluZGV4ID0gcHJvcCAhPT0gdGFyZ2V0RnVuY05hbWU7XG4gICAgY29uc3QgaXNXcml0ZSA9IHdyaXRlTWV0aG9kcy5pbmNsdWRlcyh0YXJnZXRGdW5jTmFtZSk7XG4gICAgaWYgKFxuICAgIC8vIEJhaWwgaWYgdGhlIHRhcmdldCBkb2Vzbid0IGV4aXN0IG9uIHRoZSB0YXJnZXQuIEVnLCBnZXRBbGwgaXNuJ3QgaW4gRWRnZS5cbiAgICAhKHRhcmdldEZ1bmNOYW1lIGluICh1c2VJbmRleCA/IElEQkluZGV4IDogSURCT2JqZWN0U3RvcmUpLnByb3RvdHlwZSkgfHxcbiAgICAgICAgIShpc1dyaXRlIHx8IHJlYWRNZXRob2RzLmluY2x1ZGVzKHRhcmdldEZ1bmNOYW1lKSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBtZXRob2QgPSBhc3luYyBmdW5jdGlvbiAoc3RvcmVOYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIC8vIGlzV3JpdGUgPyAncmVhZHdyaXRlJyA6IHVuZGVmaW5lZCBnemlwcHMgYmV0dGVyLCBidXQgZmFpbHMgaW4gRWRnZSA6KFxuICAgICAgICBjb25zdCB0eCA9IHRoaXMudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCBpc1dyaXRlID8gJ3JlYWR3cml0ZScgOiAncmVhZG9ubHknKTtcbiAgICAgICAgbGV0IHRhcmdldCA9IHR4LnN0b3JlO1xuICAgICAgICBpZiAodXNlSW5kZXgpXG4gICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQuaW5kZXgoYXJncy5zaGlmdCgpKTtcbiAgICAgICAgLy8gTXVzdCByZWplY3QgaWYgb3AgcmVqZWN0cy5cbiAgICAgICAgLy8gSWYgaXQncyBhIHdyaXRlIG9wZXJhdGlvbiwgbXVzdCByZWplY3QgaWYgdHguZG9uZSByZWplY3RzLlxuICAgICAgICAvLyBNdXN0IHJlamVjdCB3aXRoIG9wIHJlamVjdGlvbiBmaXJzdC5cbiAgICAgICAgLy8gTXVzdCByZXNvbHZlIHdpdGggb3AgdmFsdWUuXG4gICAgICAgIC8vIE11c3QgaGFuZGxlIGJvdGggcHJvbWlzZXMgKG5vIHVuaGFuZGxlZCByZWplY3Rpb25zKVxuICAgICAgICByZXR1cm4gKGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIHRhcmdldFt0YXJnZXRGdW5jTmFtZV0oLi4uYXJncyksXG4gICAgICAgICAgICBpc1dyaXRlICYmIHR4LmRvbmUsXG4gICAgICAgIF0pKVswXTtcbiAgICB9O1xuICAgIGNhY2hlZE1ldGhvZHMuc2V0KHByb3AsIG1ldGhvZCk7XG4gICAgcmV0dXJuIG1ldGhvZDtcbn1cbnJlcGxhY2VUcmFwcygob2xkVHJhcHMpID0+ICh7XG4gICAgLi4ub2xkVHJhcHMsXG4gICAgZ2V0OiAodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikgPT4gZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkgfHwgb2xkVHJhcHMuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpLFxuICAgIGhhczogKHRhcmdldCwgcHJvcCkgPT4gISFnZXRNZXRob2QodGFyZ2V0LCBwcm9wKSB8fCBvbGRUcmFwcy5oYXModGFyZ2V0LCBwcm9wKSxcbn0pKTtcblxuZXhwb3J0IHsgZGVsZXRlREIsIG9wZW5EQiB9O1xuIiwiZXhwb3J0IGZ1bmN0aW9uIF90aHJvdyhtZXNzYWdlPzogc3RyaW5nLCBkYXRhPzogYW55KTogbmV2ZXIge1xyXG4gICAgaWYgKGRhdGEgIT0gbnVsbCkge1xyXG4gICAgICAgIHRocm93IHsgbWVzc2FnZSwgZGF0YSB9O1xyXG4gICAgfVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdbT0dhbWUgVHJhY2tlcl0gJyArIG1lc3NhZ2UpO1xyXG59IiwiZXhwb3J0IHR5cGUgeyBPZ2FtZVRyYWNrZXJHbG9iYWxEYlNjaGVtYSB9IGZyb20gJy4vZ2xvYmFsJztcclxuZXhwb3J0IHR5cGUgeyBPZ2FtZVRyYWNrZXJVbml2ZXJzZUhpc3RvcnlEYlNjaGVtYSB9IGZyb20gJy4vdW5pdmVyc2UtaGlzdG9yeSc7XHJcbmV4cG9ydCB0eXBlIHsgT2dhbWVUcmFja2VyU2VydmVyRGJTY2hlbWEgfSBmcm9tICcuL3NlcnZlcic7XHJcbmV4cG9ydCB0eXBlIHsgT2dhbWVUcmFja2VyUGxheWVyRGJTY2hlbWEgfSBmcm9tICcuL3BsYXllcic7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IERiVmVyc2lvbiA9IDg7IiwiaW1wb3J0IHsgSURCUERhdGFiYXNlLCBJREJQVHJhbnNhY3Rpb24sIG9wZW5EQiwgU3RvcmVOYW1lcywgdW53cmFwIH0gZnJvbSBcImlkYlwiO1xyXG5pbXBvcnQgeyBNZXNzYWdlT2dhbWVNZXRhIH0gZnJvbSBcIi4uL21lc3NhZ2VzL01lc3NhZ2VcIjtcclxuaW1wb3J0IHsgX3Rocm93IH0gZnJvbSBcIi4uL3V0aWxzL190aHJvd1wiO1xyXG5pbXBvcnQgeyBEYlZlcnNpb24sIE9nYW1lVHJhY2tlckdsb2JhbERiU2NoZW1hLCBPZ2FtZVRyYWNrZXJQbGF5ZXJEYlNjaGVtYSwgT2dhbWVUcmFja2VyU2VydmVyRGJTY2hlbWEsIE9nYW1lVHJhY2tlclVuaXZlcnNlSGlzdG9yeURiU2NoZW1hIH0gZnJvbSBcIi4vc2NoZW1hXCI7XHJcblxyXG5jb25zdCBkYXRhYmFzZXM6IFBhcnRpYWw8UmVjb3JkPHN0cmluZywgUHJvbWlzZTxJREJQRGF0YWJhc2U8YW55Pj4+PiA9IHt9O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRyb3BEYXRhYmFzZUNvbm5lY3Rpb25zKCkge1xyXG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoZGF0YWJhc2VzKSkge1xyXG4gICAgICAgIGRlbGV0ZSBkYXRhYmFzZXNba2V5XTtcclxuICAgIH1cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gZ2V0RGF0YWJhc2U8VFNjaGVtYT4oXHJcbiAgICBuYW1lOiBzdHJpbmcsXHJcbiAgICB1cGdyYWRlOiAoZGI6IElEQlBEYXRhYmFzZTxUU2NoZW1hPiwgb2xkVmVyc2lvbjogbnVtYmVyLCBuZXdWZXJzaW9uOiBudW1iZXIgfCBudWxsLCB0cmFuc2FjdGlvbjogSURCUFRyYW5zYWN0aW9uPFRTY2hlbWEsIFN0b3JlTmFtZXM8VFNjaGVtYT5bXSwgXCJ2ZXJzaW9uY2hhbmdlXCI+KSA9PiB2b2lkXHJcbik6IFByb21pc2U8SURCUERhdGFiYXNlPFRTY2hlbWE+PiB7XHJcblxyXG4gICAgbGV0IGRiUHJvbWlzZSA9IGRhdGFiYXNlc1tuYW1lXTtcclxuICAgIGlmIChkYlByb21pc2UgPT0gbnVsbCkge1xyXG4gICAgICAgIGRhdGFiYXNlc1tuYW1lXSA9IGRiUHJvbWlzZSA9IG9wZW5EQjxUU2NoZW1hPihuYW1lLCBEYlZlcnNpb24sIHsgdXBncmFkZSB9KTtcclxuICAgICAgICBjb25zdCBkYiA9IGF3YWl0IGRiUHJvbWlzZTtcclxuICAgICAgICBkYi5hZGRFdmVudExpc3RlbmVyKCdjbG9zZScsIGV2ID0+IGRlbGV0ZSBkYXRhYmFzZXNbbmFtZV0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhd2FpdCBkYlByb21pc2U7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQbGF5ZXJEYXRhYmFzZU5hbWUobWV0YTogTWVzc2FnZU9nYW1lTWV0YSk6IHN0cmluZyB7XHJcbiAgICBpZihtZXRhLnNlcnZlcklkIDw9IDApIHtcclxuICAgICAgICBfdGhyb3coJ1NlcnZlciBJRCBpcyAwIG9yIGxlc3MnKTtcclxuICAgIH1cclxuICAgIGlmKG1ldGEucGxheWVySWQgPD0gMCkge1xyXG4gICAgICAgIF90aHJvdygnUGxheWVyIElEIGlzIDAgb3IgbGVzcycpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGBzJHttZXRhLnNlcnZlcklkfS0ke21ldGEubGFuZ3VhZ2V9LSR7bWV0YS5wbGF5ZXJJZH1gO1xyXG59XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRQbGF5ZXJEYXRhYmFzZShtZXRhOiBNZXNzYWdlT2dhbWVNZXRhKTogUHJvbWlzZTxJREJQRGF0YWJhc2U8T2dhbWVUcmFja2VyUGxheWVyRGJTY2hlbWE+PiB7XHJcbiAgICBjb25zdCBuYW1lID0gZ2V0UGxheWVyRGF0YWJhc2VOYW1lKG1ldGEpO1xyXG4gICAgcmV0dXJuIGF3YWl0IGdldERhdGFiYXNlKG5hbWUsIChkYiwgb2xkVmVyc2lvbiwgbmV3VmVyc2lvbiwgdHgpID0+IHtcclxuICAgICAgICBpZiAob2xkVmVyc2lvbiA8IDEpIHtcclxuICAgICAgICAgICAgZGIuY3JlYXRlT2JqZWN0U3RvcmUoJ2NvbWJhdFJlcG9ydHMnLCB7IGtleVBhdGg6ICdpZCcgfSk7XHJcbiAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdkZWJyaXNGaWVsZFJlcG9ydHMnLCB7IGtleVBhdGg6ICdpZCcgfSk7XHJcbiAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdleHBlZGl0aW9ucycsIHsga2V5UGF0aDogJ2lkJyB9KTtcclxuICAgICAgICAgICAgZGIuY3JlYXRlT2JqZWN0U3RvcmUoJ2VtcGlyZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihvbGRWZXJzaW9uIDwgMykge1xyXG4gICAgICAgICAgICBkYi5jcmVhdGVPYmplY3RTdG9yZSgndW5pdmVyc2VTcGVjaWZpY1NldHRpbmdzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKG9sZFZlcnNpb24gPCA3KSB7XHJcbiAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdsaWZlZm9ybURpc2NvdmVyaWVzJywgeyBrZXlQYXRoOiAnaWQnIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihvbGRWZXJzaW9uIDwgOCkge1xyXG4gICAgICAgICAgICBkYi5jcmVhdGVPYmplY3RTdG9yZSgnY29tYmF0UmVwb3J0cy5pZ25vcmVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VydmVyRGF0YWJhc2VOYW1lKG1ldGE6IE1lc3NhZ2VPZ2FtZU1ldGEpOiBzdHJpbmcge1xyXG4gICAgaWYobWV0YS5zZXJ2ZXJJZCA8PSAwKSB7XHJcbiAgICAgICAgX3Rocm93KCdTZXJ2ZXIgSUQgaXMgMCBvciBsZXNzJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYHMke21ldGEuc2VydmVySWR9LSR7bWV0YS5sYW5ndWFnZX1gO1xyXG59XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTZXJ2ZXJEYXRhYmFzZShtZXRhOiBNZXNzYWdlT2dhbWVNZXRhKTogUHJvbWlzZTxJREJQRGF0YWJhc2U8T2dhbWVUcmFja2VyU2VydmVyRGJTY2hlbWE+PiB7XHJcbiAgICBjb25zdCBuYW1lID0gZ2V0U2VydmVyRGF0YWJhc2VOYW1lKG1ldGEpO1xyXG4gICAgcmV0dXJuIGF3YWl0IGdldERhdGFiYXNlKG5hbWUsIChkYiwgb2xkVmVyc2lvbiwgbmV3VmVyc2lvbiwgdHgpID0+IHtcclxuICAgICAgICBpZiAob2xkVmVyc2lvbiA8IDEpIHtcclxuICAgICAgICAgICAgZGIuY3JlYXRlT2JqZWN0U3RvcmUoJ3NlcnZlclNldHRpbmdzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRVbml2ZXJzZUhpc3RvcnlEYXRhYmFzZU5hbWUobWV0YTogTWVzc2FnZU9nYW1lTWV0YSk6IHN0cmluZyB7XHJcbiAgICBpZihtZXRhLnNlcnZlcklkIDw9IDApIHtcclxuICAgICAgICBfdGhyb3coJ1NlcnZlciBJRCBpcyAwIG9yIGxlc3MnKTtcclxuICAgIH1cclxuICAgIHJldHVybiBgcyR7bWV0YS5zZXJ2ZXJJZH0tJHttZXRhLmxhbmd1YWdlfS51bml2ZXJzZUhpc3RvcnlgO1xyXG59XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRVbml2ZXJzZUhpc3RvcnlEYXRhYmFzZShtZXRhOiBNZXNzYWdlT2dhbWVNZXRhKTogUHJvbWlzZTxJREJQRGF0YWJhc2U8T2dhbWVUcmFja2VyVW5pdmVyc2VIaXN0b3J5RGJTY2hlbWE+PiB7XHJcbiAgICBjb25zdCBuYW1lID0gZ2V0VW5pdmVyc2VIaXN0b3J5RGF0YWJhc2VOYW1lKG1ldGEpO1xyXG4gICAgcmV0dXJuIGF3YWl0IGdldERhdGFiYXNlKG5hbWUsIChkYiwgb2xkVmVyc2lvbiwgbmV3VmVyc2lvbiwgdHgpID0+IHtcclxuICAgICAgICBpZiAob2xkVmVyc2lvbiA8IDEpIHtcclxuICAgICAgICAgICAgZGIuY3JlYXRlT2JqZWN0U3RvcmUoJ19sYXN0VXBkYXRlJyk7XHJcblxyXG4gICAgICAgICAgICBkYi5jcmVhdGVPYmplY3RTdG9yZSgnYWxsaWFuY2VzJywgeyBrZXlQYXRoOiAnaWQnIH0pO1xyXG4gICAgICAgICAgICBkYi5jcmVhdGVPYmplY3RTdG9yZSgnYWxsaWFuY2VUYWdzJywgeyBrZXlQYXRoOiBbJ2FsbGlhbmNlSWQnLCAnZGF0ZSddIH0pXHJcbiAgICAgICAgICAgICAgICAuY3JlYXRlSW5kZXgoJ2FsbGlhbmNlSWQnLCAnYWxsaWFuY2VJZCcpO1xyXG4gICAgICAgICAgICBkYi5jcmVhdGVPYmplY3RTdG9yZSgnYWxsaWFuY2VOYW1lcycsIHsga2V5UGF0aDogWydhbGxpYW5jZUlkJywgJ2RhdGUnXSB9KVxyXG4gICAgICAgICAgICAgICAgLmNyZWF0ZUluZGV4KCdhbGxpYW5jZUlkJywgJ2FsbGlhbmNlSWQnKTtcclxuICAgICAgICAgICAgZGIuY3JlYXRlT2JqZWN0U3RvcmUoJ2FsbGlhbmNlTWVtYmVycycsIHsga2V5UGF0aDogWydhbGxpYW5jZUlkJywgJ2RhdGUnXSB9KVxyXG4gICAgICAgICAgICAgICAgLmNyZWF0ZUluZGV4KCdhbGxpYW5jZUlkJywgJ2FsbGlhbmNlSWQnKTtcclxuICAgICAgICAgICAgZGIuY3JlYXRlT2JqZWN0U3RvcmUoJ2FsbGlhbmNlU3RhdGVzJywgeyBrZXlQYXRoOiBbJ2FsbGlhbmNlSWQnLCAnZGF0ZSddIH0pXHJcbiAgICAgICAgICAgICAgICAuY3JlYXRlSW5kZXgoJ2FsbGlhbmNlSWQnLCAnYWxsaWFuY2VJZCcpO1xyXG4gICAgICAgICAgICBkYi5jcmVhdGVPYmplY3RTdG9yZSgnYWxsaWFuY2VTY29yZXMnLCB7IGtleVBhdGg6IFsnYWxsaWFuY2VJZCcsICdkYXRlJywgJ3R5cGUnXSB9KVxyXG4gICAgICAgICAgICAgICAgLmNyZWF0ZUluZGV4KCdhbGxpYW5jZUlkJywgJ2FsbGlhbmNlSWQnKTtcclxuXHJcbiAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdwbGF5ZXJzJywgeyBrZXlQYXRoOiAnaWQnIH0pO1xyXG4gICAgICAgICAgICBkYi5jcmVhdGVPYmplY3RTdG9yZSgncGxheWVyTmFtZXMnLCB7IGtleVBhdGg6IFsncGxheWVySWQnLCAnZGF0ZSddIH0pXHJcbiAgICAgICAgICAgICAgICAuY3JlYXRlSW5kZXgoJ3BsYXllcklkJywgJ3BsYXllcklkJyk7XHJcbiAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdwbGF5ZXJTdGF0ZXMnLCB7IGtleVBhdGg6IFsncGxheWVySWQnLCAnZGF0ZSddIH0pXHJcbiAgICAgICAgICAgICAgICAuY3JlYXRlSW5kZXgoJ3BsYXllcklkJywgJ3BsYXllcklkJyk7XHJcbiAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdwbGF5ZXJBbGxpYW5jZXMnLCB7IGtleVBhdGg6IFsncGxheWVySWQnLCAnZGF0ZSddIH0pXHJcbiAgICAgICAgICAgICAgICAuY3JlYXRlSW5kZXgoJ3BsYXllcklkJywgJ3BsYXllcklkJyk7XHJcbiAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdwbGF5ZXJTY29yZXMnLCB7IGtleVBhdGg6IFsncGxheWVySWQnLCAnZGF0ZScsICd0eXBlJ10gfSlcclxuICAgICAgICAgICAgICAgIC5jcmVhdGVJbmRleCgncGxheWVySWQnLCAncGxheWVySWQnKTtcclxuXHJcbiAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdwbGFuZXRzJywgeyBrZXlQYXRoOiAnaWQnIH0pXHJcbiAgICAgICAgICAgICAgICAuY3JlYXRlSW5kZXgoJ3BsYXllcklkJywgJ3BsYXllcklkJyk7XHJcbiAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdwbGFuZXROYW1lcycsIHsga2V5UGF0aDogWydwbGFuZXRJZCcsICdkYXRlJ10gfSlcclxuICAgICAgICAgICAgICAgIC5jcmVhdGVJbmRleCgncGxhbmV0SWQnLCAncGxhbmV0SWQnKTtcclxuICAgICAgICAgICAgZGIuY3JlYXRlT2JqZWN0U3RvcmUoJ3BsYW5ldFN0YXRlcycsIHsga2V5UGF0aDogWydwbGFuZXRJZCcsICdkYXRlJ10gfSlcclxuICAgICAgICAgICAgICAgIC5jcmVhdGVJbmRleCgncGxhbmV0SWQnLCAncGxhbmV0SWQnKTtcclxuICAgICAgICAgICAgZGIuY3JlYXRlT2JqZWN0U3RvcmUoJ3BsYW5ldENvb3JkaW5hdGVzJywgeyBrZXlQYXRoOiBbJ3BsYW5ldElkJywgJ2RhdGUnXSB9KVxyXG4gICAgICAgICAgICAgICAgLmNyZWF0ZUluZGV4KCdwbGFuZXRJZCcsICdwbGFuZXRJZCcpO1xyXG5cclxuICAgICAgICAgICAgZGIuY3JlYXRlT2JqZWN0U3RvcmUoJ21vb25zJywgeyBrZXlQYXRoOiAnaWQnIH0pXHJcbiAgICAgICAgICAgICAgICAuY3JlYXRlSW5kZXgoJ3BsYW5ldElkJywgJ3BsYW5ldElkJyk7XHJcbiAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdtb29uTmFtZXMnLCB7IGtleVBhdGg6IFsnbW9vbklkJywgJ2RhdGUnXSB9KVxyXG4gICAgICAgICAgICAgICAgLmNyZWF0ZUluZGV4KCdtb29uSWQnLCAnbW9vbklkJyk7XHJcbiAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdtb29uU3RhdGVzJywgeyBrZXlQYXRoOiBbJ21vb25JZCcsICdkYXRlJ10gfSlcclxuICAgICAgICAgICAgICAgIC5jcmVhdGVJbmRleCgnbW9vbklkJywgJ21vb25JZCcpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZ2xvYmFsRGF0YWJhc2VOYW1lID0gJ29nYW1lLXRyYWNrZXInO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEdsb2JhbERhdGFiYXNlKCk6IFByb21pc2U8SURCUERhdGFiYXNlPE9nYW1lVHJhY2tlckdsb2JhbERiU2NoZW1hPj4ge1xyXG4gICAgcmV0dXJuIGF3YWl0IGdldERhdGFiYXNlKGdsb2JhbERhdGFiYXNlTmFtZSwgKGRiLCBvbGRWZXJzaW9uLCBuZXdWZXJzaW9uLCB0eCkgPT4ge1xyXG4gICAgICAgIGlmIChvbGRWZXJzaW9uIDwgMSkge1xyXG4gICAgICAgICAgICBkYi5jcmVhdGVPYmplY3RTdG9yZSgnc2V0dGluZ3MnKTtcclxuICAgICAgICAgICAgZGIuY3JlYXRlT2JqZWN0U3RvcmUoJ2FjY291bnRzJywgeyBrZXlQYXRoOiBbJ3NlcnZlcklkJywgJ3NlcnZlckxhbmd1YWdlJywgJ2lkJ10gfSk7XHJcbiAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKCdzZXJ2ZXJzJywgeyBrZXlQYXRoOiBbJ2lkJywgJ2xhbmd1YWdlJ10gfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvbGRWZXJzaW9uIDwgMikge1xyXG4gICAgICAgICAgICB0eC5vYmplY3RTdG9yZSgnYWNjb3VudHMnKS5jcmVhdGVJbmRleCgnc2VydmVyJywgWydzZXJ2ZXJJZCcsICdzZXJ2ZXJMYW5ndWFnZSddKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufSIsImltcG9ydCB7IFRyeUFjdGlvblJlc3VsdCB9IGZyb20gXCIuLi8uLi9zaGFyZWQvVHJ5QWN0aW9uUmVzdWx0XCI7XHJcbmltcG9ydCB7IF9sb2csIF9sb2dEZWJ1ZywgX2xvZ0Vycm9yIH0gZnJvbSBcIi4uLy4uL3NoYXJlZC91dGlscy9fbG9nXCI7XHJcbmltcG9ydCB7IENvbWJhdFJlcG9ydCB9IGZyb20gXCIuLi8uLi9zaGFyZWQvbW9kZWxzL2NvbWJhdC1yZXBvcnRzL0NvbWJhdFJlcG9ydFwiO1xyXG5pbXBvcnQgeyBfdGhyb3cgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL3V0aWxzL190aHJvd1wiO1xyXG5pbXBvcnQgeyBSYXdDb21iYXRSZXBvcnREYXRhLCBSZXF1ZXN0U2luZ2xlQ29tYmF0UmVwb3J0TWVzc2FnZSwgVHJhY2tDb21iYXRSZXBvcnRNZXNzYWdlIH0gZnJvbSBcIi4uLy4uL3NoYXJlZC9tZXNzYWdlcy90cmFja2luZy9jb21iYXQtcmVwb3J0c1wiO1xyXG5pbXBvcnQgeyBDb21iYXRSZXN1bHRUeXBlIH0gZnJvbSBcIi4uLy4uL3NoYXJlZC9tb2RlbHMvY29tYmF0LXJlcG9ydHMvQ29tYmF0UmVzdWx0VHlwZVwiO1xyXG5pbXBvcnQgeyBTaGlwVHlwZSB9IGZyb20gXCIuLi8uLi9zaGFyZWQvbW9kZWxzL29nYW1lL3NoaXBzL1NoaXBUeXBlXCI7XHJcbmltcG9ydCB7IFNoaXBUeXBlcyB9IGZyb20gXCIuLi8uLi9zaGFyZWQvbW9kZWxzL29nYW1lL3NoaXBzL1NoaXBUeXBlc1wiO1xyXG5pbXBvcnQgeyBSZXNvdXJjZVR5cGUgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL21vZGVscy9vZ2FtZS9yZXNvdXJjZXMvUmVzb3VyY2VUeXBlXCI7XHJcbmltcG9ydCBpMThuRmFjdGlvbnMgZnJvbSAnLi4vLi4vc2hhcmVkL2kxOG4vb2dhbWUvZmFjdGlvbnMnO1xyXG5pbXBvcnQgeyBwYXJzZUludFNhZmUgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL3V0aWxzL3BhcnNlTnVtYmVyc1wiO1xyXG5pbXBvcnQgeyBnZXRQbGF5ZXJEYXRhYmFzZSB9IGZyb20gXCJAL3NoYXJlZC9kYi9hY2Nlc3NcIjtcclxuaW1wb3J0IHsgc2V0dGluZ3NTZXJ2aWNlIH0gZnJvbSBcIi4uL21haW5cIjtcclxuaW1wb3J0IHsgT2dhbWVDb21iYXRSZXBvcnQgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL29nYW1lL2NvbWJhdHMvT2dhbWVDb21iYXRSZXBvcnRcIjtcclxuaW1wb3J0IHsgZ2V0TGFuZ3VhZ2UgfSBmcm9tIFwiQC9zaGFyZWQvaTE4bi9nZXRMYW5ndWFnZVwiO1xyXG5cclxudHlwZSBDb21iYXRSZXBvcnRSZXN1bHQgPSB7XHJcbiAgICByZXBvcnQ6IENvbWJhdFJlcG9ydDtcclxuICAgIGlzQWxyZWFkeVRyYWNrZWQ6IGJvb2xlYW47XHJcbiAgICBpZ25vcmVkOiBmYWxzZTtcclxufSB8IHtcclxuICAgIGlnbm9yZWQ6IHRydWU7XHJcbiAgICBpZDogbnVtYmVyO1xyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbWJhdFJlcG9ydE1vZHVsZSB7XHJcbiAgICBwdWJsaWMgYXN5bmMgdHJ5VHJhY2tDb21iYXRSZXBvcnQobWVzc2FnZTogVHJhY2tDb21iYXRSZXBvcnRNZXNzYWdlKTogUHJvbWlzZTxUcnlBY3Rpb25SZXN1bHQ8Q29tYmF0UmVwb3J0UmVzdWx0Pj4ge1xyXG4gICAgICAgIGNvbnN0IGNvbWJhdFJlcG9ydERhdGEgPSBtZXNzYWdlLmRhdGE7XHJcblxyXG4gICAgICAgIGNvbnN0IGRiID0gYXdhaXQgZ2V0UGxheWVyRGF0YWJhc2UobWVzc2FnZS5vZ2FtZU1ldGEpO1xyXG5cclxuXHJcbiAgICAgICAgLy8gY2hlY2sgaWYgY29tYmF0IHJlcG9ydCBhbHJlYWR5IHRyYWNrZWQgPT4gaWYgdHJ1ZSwgcmV0dXJuIHRyYWNrZWQgZGF0YVxyXG4gICAgICAgIGNvbnN0IGtub3duUmVwb3J0ID0gYXdhaXQgZGIuZ2V0KCdjb21iYXRSZXBvcnRzJywgY29tYmF0UmVwb3J0RGF0YS5pZCk7XHJcbiAgICAgICAgaWYgKGtub3duUmVwb3J0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICAgICAgICByZXN1bHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICByZXBvcnQ6IGtub3duUmVwb3J0LFxyXG4gICAgICAgICAgICAgICAgICAgIGlzQWxyZWFkeVRyYWNrZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgaWdub3JlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc2hvdWxkSWdub3JlRXNwaW9uYWdlQ29tYmF0cyA9IHNldHRpbmdzU2VydmljZS5zZXR0aW5ncy5jb21iYXRUcmFja2luZy5pZ25vcmVFc3Bpb25hZ2VGaWdodHM7XHJcbiAgICAgICAgLy8gY2hlY2sgaWYgY29tYmF0IHJlcG9ydCBpZ25vcmVkXHJcbiAgICAgICAgY29uc3QgaWdub3JlZENvbWJhdCA9IGF3YWl0IGRiLmdldCgnY29tYmF0UmVwb3J0cy5pZ25vcmVkJywgY29tYmF0UmVwb3J0RGF0YS5pZCk7XHJcbiAgICAgICAgaWYoaWdub3JlZENvbWJhdCAhPSBudWxsICYmIHNob3VsZElnbm9yZUVzcGlvbmFnZUNvbWJhdHMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICAgICAgICByZXN1bHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogbWVzc2FnZS5kYXRhLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgIGlnbm9yZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG1lc3NhZ2UuZGF0YS5vZ2FtZUNvbWJhdFJlcG9ydC5pc0VzcGlvbmFnZUNvbWJhdCAmJiBzaG91bGRJZ25vcmVFc3Bpb25hZ2VDb21iYXRzKSB7XHJcbiAgICAgICAgICAgIF9sb2dEZWJ1ZyhgaWdub3JpbmcgZXNwaW9uYWdlIGNvbWJhdCB3aXRoIGlkICR7Y29tYmF0UmVwb3J0RGF0YS5pZH1gKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGF3YWl0IGRiLnB1dCgnY29tYmF0UmVwb3J0cy5pZ25vcmVkJywgY29tYmF0UmVwb3J0RGF0YS5pZCwgY29tYmF0UmVwb3J0RGF0YS5pZCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHJlc3VsdDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBtZXNzYWdlLmRhdGEuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgaWdub3JlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBvdGhlcndpc2UgcGFyc2UgYW5kIHNhdmUgcmVzdWx0XHJcbiAgICAgICAgbGV0IHJlcG9ydDogQ29tYmF0UmVwb3J0O1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJlcG9ydCA9IHRoaXMucGFyc2VDb21iYXRSZXBvcnQoY29tYmF0UmVwb3J0RGF0YSk7XHJcblxyXG4gICAgICAgICAgICBhd2FpdCBkYi5wdXQoJ2NvbWJhdFJlcG9ydHMnLCByZXBvcnQpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICAgICAgICByZXN1bHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICByZXBvcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgaXNBbHJlYWR5VHJhY2tlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgaWdub3JlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIF9sb2dFcnJvcih7IGVycm9yLCBtZXNzYWdlIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgdHJ5R2V0U2luZ2xlUmVwb3J0KG1lc3NhZ2U6IFJlcXVlc3RTaW5nbGVDb21iYXRSZXBvcnRNZXNzYWdlKTogUHJvbWlzZTxUcnlBY3Rpb25SZXN1bHQ8Q29tYmF0UmVwb3J0UmVzdWx0Pj4ge1xyXG4gICAgICAgIGNvbnN0IGRiID0gYXdhaXQgZ2V0UGxheWVyRGF0YWJhc2UobWVzc2FnZS5vZ2FtZU1ldGEpO1xyXG5cclxuICAgICAgICAvLyBjaGVjayBpZiBleHBlZGl0aW9uIGFscmVhZHkgdHJhY2tlZCA9PiBpZiB0cnVlLCByZXR1cm4gdHJhY2tlZCBkYXRhXHJcbiAgICAgICAgY29uc3Qga25vd25SZXBvcnQgPSBhd2FpdCBkYi5nZXQoJ2NvbWJhdFJlcG9ydHMnLCBtZXNzYWdlLmRhdGEpO1xyXG4gICAgICAgIGlmIChrbm93blJlcG9ydCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVwb3J0OiBrbm93blJlcG9ydCxcclxuICAgICAgICAgICAgICAgICAgICBpc0FscmVhZHlUcmFja2VkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGlnbm9yZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHNob3VsZElnbm9yZUVzcGlvbmFnZUNvbWJhdHMgPSBzZXR0aW5nc1NlcnZpY2Uuc2V0dGluZ3MuY29tYmF0VHJhY2tpbmcuaWdub3JlRXNwaW9uYWdlRmlnaHRzO1xyXG4gICAgICAgIC8vIGNoZWNrIGlmIGNvbWJhdCByZXBvcnQgaWdub3JlZFxyXG4gICAgICAgIGNvbnN0IGlnbm9yZWRDb21iYXQgPSBhd2FpdCBkYi5nZXQoJ2NvbWJhdFJlcG9ydHMuaWdub3JlZCcsIG1lc3NhZ2UuZGF0YSk7XHJcbiAgICAgICAgaWYoaWdub3JlZENvbWJhdCAhPSBudWxsICYmIHNob3VsZElnbm9yZUVzcGlvbmFnZUNvbWJhdHMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICAgICAgICByZXN1bHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogbWVzc2FnZS5kYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgIGlnbm9yZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHBhcnNlQ29tYmF0UmVwb3J0KHJhd0NvbWJhdFJlcG9ydERhdGE6IFJhd0NvbWJhdFJlcG9ydERhdGEpOiBDb21iYXRSZXBvcnQge1xyXG4gICAgICAgIGNvbnN0IHsgaWQsIGRhdGUsIG9nYW1lQ29tYmF0UmVwb3J0IH0gPSByYXdDb21iYXRSZXBvcnREYXRhO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIGxvb3RGYWN0b3IgaWYgcGxheWVyIGlzIG9uZSBvZiB0aGUgYXR0YWNrZXJzID0gMVxyXG4gICAgICAgIC8vIGlmIHBsYXllciBhIGRlZmVuZGluZyBmbGVldCBidXQgbm90IHRoZSBvd25lciBvZiB0aGUgcGxhbmV0ID0gMFxyXG4gICAgICAgIC8vIGVsc2UgaWYgcGxheWVyIGxvc3QgYW5kIGlzIG93bmVyIG9mIHRoZSBwbGFuZXQgPSAtMVxyXG4gICAgICAgIGxldCBsb290RmFjdG9yID0gMDtcclxuICAgICAgICBpZighb2dhbWVDb21iYXRSZXBvcnQuaXNFeHBlZGl0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmKG9nYW1lQ29tYmF0UmVwb3J0LmlzQXR0YWNrZXIpIHtcclxuICAgICAgICAgICAgICAgIGxvb3RGYWN0b3IgPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYob2dhbWVDb21iYXRSZXBvcnQuaXNEZWZlbmRlcikge1xyXG4gICAgICAgICAgICAgICAgaWYob2dhbWVDb21iYXRSZXBvcnQuaXNPd25lcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvb3RGYWN0b3IgPSAtMTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9vdEZhY3RvciA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgbG9vdEZhY3RvciAqPSAob2dhbWVDb21iYXRSZXBvcnQud2lubmVyID09ICdhdHRhY2tlcicgPyAxIDogMCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlc3VsdDogQ29tYmF0UmVzdWx0VHlwZSA9IChvZ2FtZUNvbWJhdFJlcG9ydC5pc0F0dGFja2VyICYmIG9nYW1lQ29tYmF0UmVwb3J0Lndpbm5lciA9PSAnYXR0YWNrZXInKVxyXG4gICAgICAgICAgICB8fCBvZ2FtZUNvbWJhdFJlcG9ydC5pc0RlZmVuZGVyICYmIG9nYW1lQ29tYmF0UmVwb3J0Lndpbm5lciA9PSAnZGVmZW5kZXInXHJcbiAgICAgICAgICAgID8gQ29tYmF0UmVzdWx0VHlwZS53b25cclxuICAgICAgICAgICAgOiBvZ2FtZUNvbWJhdFJlcG9ydC53aW5uZXIgPT0gJ25vbmUnXHJcbiAgICAgICAgICAgICAgICA/IENvbWJhdFJlc3VsdFR5cGUuZHJhd1xyXG4gICAgICAgICAgICAgICAgOiBDb21iYXRSZXN1bHRUeXBlLmxvc3Q7XHJcblxyXG4gICAgICAgIGNvbnN0IGxvb3QgPSB7XHJcbiAgICAgICAgICAgIFtSZXNvdXJjZVR5cGUubWV0YWxdOiBvZ2FtZUNvbWJhdFJlcG9ydC5sb290Lm1ldGFsICogbG9vdEZhY3RvcixcclxuICAgICAgICAgICAgW1Jlc291cmNlVHlwZS5jcnlzdGFsXTogb2dhbWVDb21iYXRSZXBvcnQubG9vdC5jcnlzdGFsICogbG9vdEZhY3RvcixcclxuICAgICAgICAgICAgW1Jlc291cmNlVHlwZS5kZXV0ZXJpdW1dOiBvZ2FtZUNvbWJhdFJlcG9ydC5sb290LmRldXRlcml1bSAqIGxvb3RGYWN0b3IsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBkZWJyaXNGaWVsZCA9IHtcclxuICAgICAgICAgICAgW1Jlc291cmNlVHlwZS5tZXRhbF06IG9nYW1lQ29tYmF0UmVwb3J0LmRlYnJpcy5tZXRhbCxcclxuICAgICAgICAgICAgW1Jlc291cmNlVHlwZS5jcnlzdGFsXTogb2dhbWVDb21iYXRSZXBvcnQuZGVicmlzLmNyeXN0YWwsXHJcbiAgICAgICAgICAgIFtSZXNvdXJjZVR5cGUuZGV1dGVyaXVtXTogb2dhbWVDb21iYXRSZXBvcnQuZGVicmlzLmRldXRlcml1bSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBsb3N0U2hpcHMgPSBvZ2FtZUNvbWJhdFJlcG9ydC5wbGF5ZXJMb3NzZXM7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlcG9ydDogQ29tYmF0UmVwb3J0ID0ge1xyXG4gICAgICAgICAgICBpZCxcclxuICAgICAgICAgICAgZGF0ZSxcclxuICAgICAgICAgICAgY29vcmRpbmF0ZXM6IG9nYW1lQ29tYmF0UmVwb3J0LmNvb3JkaW5hdGVzLFxyXG4gICAgICAgICAgICByZXN1bHQsXHJcbiAgICAgICAgICAgIGlzRXhwZWRpdGlvbjogb2dhbWVDb21iYXRSZXBvcnQuaXNFeHBlZGl0aW9uLFxyXG4gICAgICAgICAgICBsb290LFxyXG4gICAgICAgICAgICBkZWJyaXNGaWVsZCxcclxuICAgICAgICAgICAgbG9zdFNoaXBzLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHJlcG9ydDtcclxuICAgIH1cclxufSIsImV4cG9ydCBmdW5jdGlvbiBpZ25vcmVTdHVwaWRNZXNzYWdlUG9ydEVycm9ycygpIHtcclxuICAgIGNvbnN0IG1lc3NhZ2UgPSBjaHJvbWUucnVudGltZS5sYXN0RXJyb3I/Lm1lc3NhZ2U7XHJcbiAgICBpZiAoIVtcclxuICAgICAgICAnUmVjZWl2aW5nIGVuZCBkb2VzIG5vdCBleGlzdC4nLFxyXG4gICAgICAgICdUaGUgbWVzc2FnZSBwb3J0IGNsb3NlZCBiZWZvcmUgYSByZXNwb25zZSB3YXMgcmVjZWl2ZWQuJ1xyXG4gICAgXS5zb21lKGVycm9yID0+IG1lc3NhZ2U/LmluY2x1ZGVzKGVycm9yKSA/PyBmYWxzZSkpIHtcclxuICAgICAgICB0aHJvdyBjaHJvbWUucnVudGltZS5sYXN0RXJyb3I7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBOb0RhdGFNZXNzYWdlIH0gZnJvbSAnLi4vbWVzc2FnZXMvTWVzc2FnZSc7XHJcbmltcG9ydCB7IE1lc3NhZ2VUeXBlIH0gZnJvbSAnLi4vbWVzc2FnZXMvTWVzc2FnZVR5cGUnO1xyXG5pbXBvcnQgeyBfbG9nRGVidWcgfSBmcm9tICcuLi91dGlscy9fbG9nJztcclxuaW1wb3J0IHsgaWdub3JlU3R1cGlkTWVzc2FnZVBvcnRFcnJvcnMgfSBmcm9tICcuL2lnbm9yZVN0dXBpZE1lc3NhZ2VQb3J0RXJyb3JzJztcclxuaW1wb3J0IHsgc2VuZE1lc3NhZ2UgfSBmcm9tICcuL3NlbmRNZXNzYWdlJztcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBicm9hZGNhc3RNZXNzYWdlPFQgZXh0ZW5kcyBOb0RhdGFNZXNzYWdlPE1lc3NhZ2VUeXBlPj4obWVzc2FnZTogVCkge1xyXG4gICAgX2xvZ0RlYnVnKCdicm9hZGNhc3RpbmcgbWVzc2FnZScsIG1lc3NhZ2UpO1xyXG4gICAgc2VuZE1lc3NhZ2UobWVzc2FnZSk7XHJcblxyXG4gICAgY29uc3QgdGFicyA9IGF3YWl0IGNocm9tZS50YWJzLnF1ZXJ5KHsgdXJsOiAnKjovLyoub2dhbWUuZ2FtZWZvcmdlLmNvbS8qJyB9KTtcclxuICAgIHRhYnMuZm9yRWFjaCh0YWIgPT4ge1xyXG4gICAgICAgIGlmICh0YWIuaWQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNocm9tZS50YWJzLnNlbmRNZXNzYWdlKHRhYi5pZCwgbWVzc2FnZSwgaWdub3JlU3R1cGlkTWVzc2FnZVBvcnRFcnJvcnMpO1xyXG4gICAgfSk7XHJcbn0iLCJpbXBvcnQgeyBOb0RhdGFNZXNzYWdlIH0gZnJvbSBcIi4uL21lc3NhZ2VzL01lc3NhZ2VcIjtcclxuaW1wb3J0IHsgTWVzc2FnZVR5cGUgfSBmcm9tIFwiLi4vbWVzc2FnZXMvTWVzc2FnZVR5cGVcIjtcclxuaW1wb3J0IHsgaWdub3JlU3R1cGlkTWVzc2FnZVBvcnRFcnJvcnMgfSBmcm9tIFwiLi9pZ25vcmVTdHVwaWRNZXNzYWdlUG9ydEVycm9yc1wiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNlbmRNZXNzYWdlPFQgZXh0ZW5kcyBOb0RhdGFNZXNzYWdlPE1lc3NhZ2VUeXBlPj4obWVzc2FnZTogVCkge1xyXG4gICAgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2UobWVzc2FnZSwgaWdub3JlU3R1cGlkTWVzc2FnZVBvcnRFcnJvcnMpO1xyXG59IiwiZXhwb3J0IGRlZmF1bHQgL14oPzpbMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMS01XVswLTlhLWZdezN9LVs4OWFiXVswLTlhLWZdezN9LVswLTlhLWZdezEyfXwwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDApJC9pOyIsImltcG9ydCBSRUdFWCBmcm9tICcuL3JlZ2V4LmpzJztcblxuZnVuY3Rpb24gdmFsaWRhdGUodXVpZCkge1xuICByZXR1cm4gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnICYmIFJFR0VYLnRlc3QodXVpZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlOyIsImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcbi8qKlxuICogQ29udmVydCBhcnJheSBvZiAxNiBieXRlIHZhbHVlcyB0byBVVUlEIHN0cmluZyBmb3JtYXQgb2YgdGhlIGZvcm06XG4gKiBYWFhYWFhYWC1YWFhYLVhYWFgtWFhYWC1YWFhYWFhYWFhYWFhcbiAqL1xuXG52YXIgYnl0ZVRvSGV4ID0gW107XG5cbmZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcbiAgYnl0ZVRvSGV4LnB1c2goKGkgKyAweDEwMCkudG9TdHJpbmcoMTYpLnN1YnN0cigxKSk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShhcnIpIHtcbiAgdmFyIG9mZnNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgLy8gTm90ZTogQmUgY2FyZWZ1bCBlZGl0aW5nIHRoaXMgY29kZSEgIEl0J3MgYmVlbiB0dW5lZCBmb3IgcGVyZm9ybWFuY2VcbiAgLy8gYW5kIHdvcmtzIGluIHdheXMgeW91IG1heSBub3QgZXhwZWN0LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkL3B1bGwvNDM0XG4gIHZhciB1dWlkID0gKGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgM11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDVdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA3XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDhdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxM11dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAxNV1dKS50b0xvd2VyQ2FzZSgpOyAvLyBDb25zaXN0ZW5jeSBjaGVjayBmb3IgdmFsaWQgVVVJRC4gIElmIHRoaXMgdGhyb3dzLCBpdCdzIGxpa2VseSBkdWUgdG8gb25lXG4gIC8vIG9mIHRoZSBmb2xsb3dpbmc6XG4gIC8vIC0gT25lIG9yIG1vcmUgaW5wdXQgYXJyYXkgdmFsdWVzIGRvbid0IG1hcCB0byBhIGhleCBvY3RldCAobGVhZGluZyB0b1xuICAvLyBcInVuZGVmaW5lZFwiIGluIHRoZSB1dWlkKVxuICAvLyAtIEludmFsaWQgaW5wdXQgdmFsdWVzIGZvciB0aGUgUkZDIGB2ZXJzaW9uYCBvciBgdmFyaWFudGAgZmllbGRzXG5cbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignU3RyaW5naWZpZWQgVVVJRCBpcyBpbnZhbGlkJyk7XG4gIH1cblxuICByZXR1cm4gdXVpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RyaW5naWZ5OyIsIi8vIEFkYXB0ZWQgZnJvbSBDaHJpcyBWZW5lc3MnIFNIQTEgY29kZSBhdFxuLy8gaHR0cDovL3d3dy5tb3ZhYmxlLXR5cGUuY28udWsvc2NyaXB0cy9zaGExLmh0bWxcbmZ1bmN0aW9uIGYocywgeCwgeSwgeikge1xuICBzd2l0Y2ggKHMpIHtcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4geCAmIHkgXiB+eCAmIHo7XG5cbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4geCBeIHkgXiB6O1xuXG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIHggJiB5IF4geCAmIHogXiB5ICYgejtcblxuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiB4IF4geSBeIHo7XG4gIH1cbn1cblxuZnVuY3Rpb24gUk9UTCh4LCBuKSB7XG4gIHJldHVybiB4IDw8IG4gfCB4ID4+PiAzMiAtIG47XG59XG5cbmZ1bmN0aW9uIHNoYTEoYnl0ZXMpIHtcbiAgdmFyIEsgPSBbMHg1YTgyNzk5OSwgMHg2ZWQ5ZWJhMSwgMHg4ZjFiYmNkYywgMHhjYTYyYzFkNl07XG4gIHZhciBIID0gWzB4Njc0NTIzMDEsIDB4ZWZjZGFiODksIDB4OThiYWRjZmUsIDB4MTAzMjU0NzYsIDB4YzNkMmUxZjBdO1xuXG4gIGlmICh0eXBlb2YgYnl0ZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIG1zZyA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChieXRlcykpOyAvLyBVVEY4IGVzY2FwZVxuXG4gICAgYnl0ZXMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgKytpKSB7XG4gICAgICBieXRlcy5wdXNoKG1zZy5jaGFyQ29kZUF0KGkpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkoYnl0ZXMpKSB7XG4gICAgLy8gQ29udmVydCBBcnJheS1saWtlIHRvIEFycmF5XG4gICAgYnl0ZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChieXRlcyk7XG4gIH1cblxuICBieXRlcy5wdXNoKDB4ODApO1xuICB2YXIgbCA9IGJ5dGVzLmxlbmd0aCAvIDQgKyAyO1xuICB2YXIgTiA9IE1hdGguY2VpbChsIC8gMTYpO1xuICB2YXIgTSA9IG5ldyBBcnJheShOKTtcblxuICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgTjsgKytfaSkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDMyQXJyYXkoMTYpO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCAxNjsgKytqKSB7XG4gICAgICBhcnJbal0gPSBieXRlc1tfaSAqIDY0ICsgaiAqIDRdIDw8IDI0IHwgYnl0ZXNbX2kgKiA2NCArIGogKiA0ICsgMV0gPDwgMTYgfCBieXRlc1tfaSAqIDY0ICsgaiAqIDQgKyAyXSA8PCA4IHwgYnl0ZXNbX2kgKiA2NCArIGogKiA0ICsgM107XG4gICAgfVxuXG4gICAgTVtfaV0gPSBhcnI7XG4gIH1cblxuICBNW04gLSAxXVsxNF0gPSAoYnl0ZXMubGVuZ3RoIC0gMSkgKiA4IC8gTWF0aC5wb3coMiwgMzIpO1xuICBNW04gLSAxXVsxNF0gPSBNYXRoLmZsb29yKE1bTiAtIDFdWzE0XSk7XG4gIE1bTiAtIDFdWzE1XSA9IChieXRlcy5sZW5ndGggLSAxKSAqIDggJiAweGZmZmZmZmZmO1xuXG4gIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IE47ICsrX2kyKSB7XG4gICAgdmFyIFcgPSBuZXcgVWludDMyQXJyYXkoODApO1xuXG4gICAgZm9yICh2YXIgdCA9IDA7IHQgPCAxNjsgKyt0KSB7XG4gICAgICBXW3RdID0gTVtfaTJdW3RdO1xuICAgIH1cblxuICAgIGZvciAodmFyIF90ID0gMTY7IF90IDwgODA7ICsrX3QpIHtcbiAgICAgIFdbX3RdID0gUk9UTChXW190IC0gM10gXiBXW190IC0gOF0gXiBXW190IC0gMTRdIF4gV1tfdCAtIDE2XSwgMSk7XG4gICAgfVxuXG4gICAgdmFyIGEgPSBIWzBdO1xuICAgIHZhciBiID0gSFsxXTtcbiAgICB2YXIgYyA9IEhbMl07XG4gICAgdmFyIGQgPSBIWzNdO1xuICAgIHZhciBlID0gSFs0XTtcblxuICAgIGZvciAodmFyIF90MiA9IDA7IF90MiA8IDgwOyArK190Mikge1xuICAgICAgdmFyIHMgPSBNYXRoLmZsb29yKF90MiAvIDIwKTtcbiAgICAgIHZhciBUID0gUk9UTChhLCA1KSArIGYocywgYiwgYywgZCkgKyBlICsgS1tzXSArIFdbX3QyXSA+Pj4gMDtcbiAgICAgIGUgPSBkO1xuICAgICAgZCA9IGM7XG4gICAgICBjID0gUk9UTChiLCAzMCkgPj4+IDA7XG4gICAgICBiID0gYTtcbiAgICAgIGEgPSBUO1xuICAgIH1cblxuICAgIEhbMF0gPSBIWzBdICsgYSA+Pj4gMDtcbiAgICBIWzFdID0gSFsxXSArIGIgPj4+IDA7XG4gICAgSFsyXSA9IEhbMl0gKyBjID4+PiAwO1xuICAgIEhbM10gPSBIWzNdICsgZCA+Pj4gMDtcbiAgICBIWzRdID0gSFs0XSArIGUgPj4+IDA7XG4gIH1cblxuICByZXR1cm4gW0hbMF0gPj4gMjQgJiAweGZmLCBIWzBdID4+IDE2ICYgMHhmZiwgSFswXSA+PiA4ICYgMHhmZiwgSFswXSAmIDB4ZmYsIEhbMV0gPj4gMjQgJiAweGZmLCBIWzFdID4+IDE2ICYgMHhmZiwgSFsxXSA+PiA4ICYgMHhmZiwgSFsxXSAmIDB4ZmYsIEhbMl0gPj4gMjQgJiAweGZmLCBIWzJdID4+IDE2ICYgMHhmZiwgSFsyXSA+PiA4ICYgMHhmZiwgSFsyXSAmIDB4ZmYsIEhbM10gPj4gMjQgJiAweGZmLCBIWzNdID4+IDE2ICYgMHhmZiwgSFszXSA+PiA4ICYgMHhmZiwgSFszXSAmIDB4ZmYsIEhbNF0gPj4gMjQgJiAweGZmLCBIWzRdID4+IDE2ICYgMHhmZiwgSFs0XSA+PiA4ICYgMHhmZiwgSFs0XSAmIDB4ZmZdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzaGExOyIsImltcG9ydCB2MzUgZnJvbSAnLi92MzUuanMnO1xuaW1wb3J0IHNoYTEgZnJvbSAnLi9zaGExLmpzJztcbnZhciB2NSA9IHYzNSgndjUnLCAweDUwLCBzaGExKTtcbmV4cG9ydCBkZWZhdWx0IHY1OyIsImltcG9ydCBzdHJpbmdpZnkgZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuaW1wb3J0IHBhcnNlIGZyb20gJy4vcGFyc2UuanMnO1xuXG5mdW5jdGlvbiBzdHJpbmdUb0J5dGVzKHN0cikge1xuICBzdHIgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSk7IC8vIFVURjggZXNjYXBlXG5cbiAgdmFyIGJ5dGVzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBieXRlcy5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpKTtcbiAgfVxuXG4gIHJldHVybiBieXRlcztcbn1cblxuZXhwb3J0IHZhciBETlMgPSAnNmJhN2I4MTAtOWRhZC0xMWQxLTgwYjQtMDBjMDRmZDQzMGM4JztcbmV4cG9ydCB2YXIgVVJMID0gJzZiYTdiODExLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAobmFtZSwgdmVyc2lvbiwgaGFzaGZ1bmMpIHtcbiAgZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKHZhbHVlLCBuYW1lc3BhY2UsIGJ1Ziwgb2Zmc2V0KSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhbHVlID0gc3RyaW5nVG9CeXRlcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lc3BhY2UgPSBwYXJzZShuYW1lc3BhY2UpO1xuICAgIH1cblxuICAgIGlmIChuYW1lc3BhY2UubGVuZ3RoICE9PSAxNikge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdOYW1lc3BhY2UgbXVzdCBiZSBhcnJheS1saWtlICgxNiBpdGVyYWJsZSBpbnRlZ2VyIHZhbHVlcywgMC0yNTUpJyk7XG4gICAgfSAvLyBDb21wdXRlIGhhc2ggb2YgbmFtZXNwYWNlIGFuZCB2YWx1ZSwgUGVyIDQuM1xuICAgIC8vIEZ1dHVyZTogVXNlIHNwcmVhZCBzeW50YXggd2hlbiBzdXBwb3J0ZWQgb24gYWxsIHBsYXRmb3JtcywgZS5nLiBgYnl0ZXMgPVxuICAgIC8vIGhhc2hmdW5jKFsuLi5uYW1lc3BhY2UsIC4uLiB2YWx1ZV0pYFxuXG5cbiAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheSgxNiArIHZhbHVlLmxlbmd0aCk7XG4gICAgYnl0ZXMuc2V0KG5hbWVzcGFjZSk7XG4gICAgYnl0ZXMuc2V0KHZhbHVlLCBuYW1lc3BhY2UubGVuZ3RoKTtcbiAgICBieXRlcyA9IGhhc2hmdW5jKGJ5dGVzKTtcbiAgICBieXRlc1s2XSA9IGJ5dGVzWzZdICYgMHgwZiB8IHZlcnNpb247XG4gICAgYnl0ZXNbOF0gPSBieXRlc1s4XSAmIDB4M2YgfCAweDgwO1xuXG4gICAgaWYgKGJ1Zikge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgICBidWZbb2Zmc2V0ICsgaV0gPSBieXRlc1tpXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaW5naWZ5KGJ5dGVzKTtcbiAgfSAvLyBGdW5jdGlvbiNuYW1lIGlzIG5vdCBzZXR0YWJsZSBvbiBzb21lIHBsYXRmb3JtcyAoIzI3MClcblxuXG4gIHRyeSB7XG4gICAgZ2VuZXJhdGVVVUlELm5hbWUgPSBuYW1lOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgfSBjYXRjaCAoZXJyKSB7fSAvLyBGb3IgQ29tbW9uSlMgZGVmYXVsdCBleHBvcnQgc3VwcG9ydFxuXG5cbiAgZ2VuZXJhdGVVVUlELkROUyA9IEROUztcbiAgZ2VuZXJhdGVVVUlELlVSTCA9IFVSTDtcbiAgcmV0dXJuIGdlbmVyYXRlVVVJRDtcbn0iLCJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG5cbmZ1bmN0aW9uIHBhcnNlKHV1aWQpIHtcbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW52YWxpZCBVVUlEJyk7XG4gIH1cblxuICB2YXIgdjtcbiAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDE2KTsgLy8gUGFyc2UgIyMjIyMjIyMtLi4uLi0uLi4uLS4uLi4tLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzBdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDAsIDgpLCAxNikpID4+PiAyNDtcbiAgYXJyWzFdID0gdiA+Pj4gMTYgJiAweGZmO1xuICBhcnJbMl0gPSB2ID4+PiA4ICYgMHhmZjtcbiAgYXJyWzNdID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLSMjIyMtLi4uLi0uLi4uLS4uLi4uLi4uLi4uLlxuXG4gIGFycls0XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSg5LCAxMyksIDE2KSkgPj4+IDg7XG4gIGFycls1XSA9IHYgJiAweGZmOyAvLyBQYXJzZSAuLi4uLi4uLi0uLi4uLSMjIyMtLi4uLi0uLi4uLi4uLi4uLi5cblxuICBhcnJbNl0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMTQsIDE4KSwgMTYpKSA+Pj4gODtcbiAgYXJyWzddID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLS4uLi4tLi4uLi0jIyMjLS4uLi4uLi4uLi4uLlxuXG4gIGFycls4XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgxOSwgMjMpLCAxNikpID4+PiA4O1xuICBhcnJbOV0gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tLi4uLi0uLi4uLS4uLi4tIyMjIyMjIyMjIyMjXG4gIC8vIChVc2UgXCIvXCIgdG8gYXZvaWQgMzItYml0IHRydW5jYXRpb24gd2hlbiBiaXQtc2hpZnRpbmcgaGlnaC1vcmRlciBieXRlcylcblxuICBhcnJbMTBdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDI0LCAzNiksIDE2KSkgLyAweDEwMDAwMDAwMDAwICYgMHhmZjtcbiAgYXJyWzExXSA9IHYgLyAweDEwMDAwMDAwMCAmIDB4ZmY7XG4gIGFyclsxMl0gPSB2ID4+PiAyNCAmIDB4ZmY7XG4gIGFyclsxM10gPSB2ID4+PiAxNiAmIDB4ZmY7XG4gIGFyclsxNF0gPSB2ID4+PiA4ICYgMHhmZjtcbiAgYXJyWzE1XSA9IHYgJiAweGZmO1xuICByZXR1cm4gYXJyO1xufVxuXG5leHBvcnQgZGVmYXVsdCBwYXJzZTsiLCJpbXBvcnQgeyB2NSB9IGZyb20gXCJ1dWlkXCI7XHJcblxyXG5leHBvcnQgY29uc3QgbmFtZXNwYWNlID0gJzc3NDUyMmQzLTc5MTItNGU1Yy1iNTViLWUxNzE5ODYyMGIzMic7XHJcblxyXG5leHBvcnQgY29uc3Qgc2VydmljZVdvcmtlclV1aWQgPSB2NSgnc2VydmljZS13b3JrZXInLCBuYW1lc3BhY2UpO1xyXG5leHBvcnQgY29uc3QgbWVzc2FnZVRyYWNraW5nVXVpZCA9IHY1KCdtZXNzYWdlLXRyYWNraW5nJywgbmFtZXNwYWNlKTtcclxuZXhwb3J0IGNvbnN0IGVtcGlyZVRyYWNraW5nVXVpZCA9IHY1KCdlbXBpcmUtdHJhY2tpbmcnLCBuYW1lc3BhY2UpO1xyXG5leHBvcnQgY29uc3QgdW5pdmVyc2VBY2NvdW50VHJhY2tpbmdVdWlkID0gdjUoJ3VuaXZlcnNlLWFjY291bnQtdHJhY2tpbmcnLCBuYW1lc3BhY2UpO1xyXG5leHBvcnQgY29uc3QgaW50ZXJuYWxVdWlkID0gdjUoJ2ludGVybmFsJywgbmFtZXNwYWNlKTsiLCJpbXBvcnQgeyBUcnlBY3Rpb25SZXN1bHQgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL1RyeUFjdGlvblJlc3VsdFwiO1xyXG5pbXBvcnQgeyBfbG9nLCBfbG9nRXJyb3IgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL3V0aWxzL19sb2dcIjtcclxuaW1wb3J0IHsgX3Rocm93IH0gZnJvbSBcIi4uLy4uL3NoYXJlZC91dGlscy9fdGhyb3dcIjtcclxuaW1wb3J0IHsgUmF3RGVicmlzRmllbGRNZXNzYWdlRGF0YSwgVHJhY2tEZWJyaXNGaWVsZFJlcG9ydE1lc3NhZ2UsIFRyYWNrTWFudWFsRGVicmlzRmllbGRSZXBvcnRNZXNzYWdlIH0gZnJvbSBcIi4uLy4uL3NoYXJlZC9tZXNzYWdlcy90cmFja2luZy9kZWJyaXMtZmllbGRzXCI7XHJcbmltcG9ydCB7IERlYnJpc0ZpZWxkUmVwb3J0IH0gZnJvbSBcIi4uLy4uL3NoYXJlZC9tb2RlbHMvZGVicmlzLWZpZWxkLXJlcG9ydHMvRGVicmlzRmllbGRSZXBvcnRcIjtcclxuaW1wb3J0IHsgZ2V0UGxheWVyRGF0YWJhc2UgfSBmcm9tIFwiQC9zaGFyZWQvZGIvYWNjZXNzXCI7XHJcblxyXG5pbnRlcmZhY2UgRGVicmlzRmllbGRSZXBvcnRSZXN1bHQge1xyXG4gICAgcmVwb3J0OiBEZWJyaXNGaWVsZFJlcG9ydDtcclxuICAgIGlzQWxyZWFkeVRyYWNrZWQ6IGJvb2xlYW47XHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgRGVicmlzRmllbGRSZXBvcnRNb2R1bGUge1xyXG4gICAgcHVibGljIGFzeW5jIHRyYWNrTWFudWFsRGVicmlzRmllbGRSZXBvcnQobWVzc2FnZTogVHJhY2tNYW51YWxEZWJyaXNGaWVsZFJlcG9ydE1lc3NhZ2UpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBjb25zdCByZXBvcnQgPSBtZXNzYWdlLmRhdGE7XHJcbiAgICAgICAgY29uc3QgZGIgPSBhd2FpdCBnZXRQbGF5ZXJEYXRhYmFzZShtZXNzYWdlLm9nYW1lTWV0YSk7XHJcbiAgICAgICAgYXdhaXQgZGIucHV0KCdkZWJyaXNGaWVsZFJlcG9ydHMnLCByZXBvcnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyB0cnlUcmFja0RlYnJpc0ZpZWxkUmVwb3J0KG1lc3NhZ2U6IFRyYWNrRGVicmlzRmllbGRSZXBvcnRNZXNzYWdlKTogUHJvbWlzZTxUcnlBY3Rpb25SZXN1bHQ8RGVicmlzRmllbGRSZXBvcnRSZXN1bHQ+PiB7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZURhdGEgPSBtZXNzYWdlLmRhdGE7XHJcbiAgICAgICAgY29uc3QgZGIgPSBhd2FpdCBnZXRQbGF5ZXJEYXRhYmFzZShtZXNzYWdlLm9nYW1lTWV0YSk7XHJcblxyXG4gICAgICAgIC8vIGNoZWNrIGlmIGV4cGVkaXRpb24gYWxyZWFkeSB0cmFja2VkID0+IGlmIHRydWUsIHJldHVybiB0cmFja2VkIGRhdGFcclxuICAgICAgICBjb25zdCBrbm93blJlcG9ydCA9IGF3YWl0IGRiLmdldCgnZGVicmlzRmllbGRSZXBvcnRzJywgbWVzc2FnZURhdGEuaWQpO1xyXG4gICAgICAgIGlmIChrbm93blJlcG9ydCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVwb3J0OiBrbm93blJlcG9ydCxcclxuICAgICAgICAgICAgICAgICAgICBpc0FscmVhZHlUcmFja2VkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIG90aGVyd2lzZSBwYXJzZSBhbmQgc2F2ZSByZXN1bHRcclxuICAgICAgICBsZXQgcmVwb3J0OiBEZWJyaXNGaWVsZFJlcG9ydDtcclxuXHJcbiAgICAgICAgdHJ5IHsgICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgcGFyc2VSZXN1bHQgPSB0aGlzLnRyeVBhcnNlRGVicmlzRmllbGRSZXBvcnQobWVzc2FnZURhdGEpO1xyXG5cclxuICAgICAgICAgICAgcmVwb3J0ID0gcGFyc2VSZXN1bHQucmVwb3J0O1xyXG5cclxuICAgICAgICAgICAgYXdhaXQgZGIucHV0KCdkZWJyaXNGaWVsZFJlcG9ydHMnLCByZXBvcnQpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICAgICAgICByZXN1bHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICByZXBvcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgaXNBbHJlYWR5VHJhY2tlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIF9sb2dFcnJvcih7IGVycm9yLCBtZXNzYWdlIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHRyeVBhcnNlRGVicmlzRmllbGRSZXBvcnQoZGF0YTogUmF3RGVicmlzRmllbGRNZXNzYWdlRGF0YSk6IHsgc3VjY2VzczogdHJ1ZSwgcmVwb3J0OiBEZWJyaXNGaWVsZFJlcG9ydCB9IHsgICAgXHJcbiAgICAgICAgY29uc3QgZGV1dGVyaXVtID0gZGF0YS5yZXNvdXJjZXMuZGV1dGVyaXVtID8/IHVuZGVmaW5lZDtcclxuICAgICAgICBjb25zdCBpc0V4cGVkaXRpb25EZWJyaXNGaWVsZCA9IGRhdGEuY29vcmRzLnN5c3RlbSA9PSAxNjtcclxuICAgIFxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICAgIHJlcG9ydDoge1xyXG4gICAgICAgICAgICAgICAgaWQ6IGRhdGEuaWQsXHJcbiAgICAgICAgICAgICAgICBkYXRlOiBkYXRhLmRhdGUsXHJcbiAgICAgICAgICAgICAgICBtZXRhbDogZGF0YS5yZXNvdXJjZXMubWV0YWwsXHJcbiAgICAgICAgICAgICAgICBjcnlzdGFsOiBkYXRhLnJlc291cmNlcy5jcnlzdGFsLFxyXG4gICAgICAgICAgICAgICAgZGV1dGVyaXVtOiBkZXV0ZXJpdW0sXHJcbiAgICAgICAgICAgICAgICBpc0V4cGVkaXRpb25EZWJyaXNGaWVsZCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGVudW0gQnVpbGRpbmdUeXBlIHtcclxuICAgIG1ldGFsTWluZSA9IDEsXHJcbiAgICBjcnlzdGFsTWluZSA9IDIsXHJcbiAgICBkZXV0ZXJpdW1TeW50aGVzaXplciA9IDMsXHJcblxyXG4gICAgbWV0YWxTdG9yYWdlID0gMjIsXHJcbiAgICBjcnlzdGFsU3RvcmFnZSA9IDIzLFxyXG4gICAgZGV1dGVyaXVtVGFuayA9IDI0LFxyXG5cclxuICAgIHNvbGFyUGxhbnQgPSA0LFxyXG4gICAgZnVzaW9uUmVhY3RvciA9IDEyLFxyXG5cclxuICAgIHJvYm90aWNzRmFjdG9yeSA9IDE0LFxyXG4gICAgc2hpcHlhcmQgPSAyMSxcclxuICAgIHJlc2VhcmNoTGFiID0gMzEsXHJcbiAgICBhbGxpYW5jZURlcG90ID0gMzQsXHJcbiAgICBtaXNzaWxlU2lsbyA9IDQ0LFxyXG4gICAgbmFuaXRlRmFjdG9yeSA9IDE1LFxyXG4gICAgdGVycmFmb3JtZXIgPSAzMyxcclxuICAgIHNwYWNlRG9jayA9IDM2LFxyXG5cclxuICAgIGx1bmFyQmFzZSA9IDQxLFxyXG4gICAgc2Vuc29yUGhhbGFueCA9IDQyLFxyXG4gICAganVtcEdhdGUgPSA0MyxcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgTW9vbkJ1aWxkaW5nVHlwZSA9IChcclxuICAgIHwgQnVpbGRpbmdUeXBlLm1ldGFsU3RvcmFnZVxyXG4gICAgfCBCdWlsZGluZ1R5cGUuY3J5c3RhbFN0b3JhZ2VcclxuICAgIHwgQnVpbGRpbmdUeXBlLmRldXRlcml1bVRhbmtcclxuXHJcbiAgICB8IEJ1aWxkaW5nVHlwZS5yb2JvdGljc0ZhY3RvcnlcclxuICAgIHwgQnVpbGRpbmdUeXBlLnNoaXB5YXJkXHJcbiAgICB8IEJ1aWxkaW5nVHlwZS5sdW5hckJhc2VcclxuICAgIHwgQnVpbGRpbmdUeXBlLnNlbnNvclBoYWxhbnhcclxuICAgIHwgQnVpbGRpbmdUeXBlLmp1bXBHYXRlXHJcbik7XHJcbmV4cG9ydCB0eXBlIE1vb25TdXBwbHlCdWlsZGluZ1R5cGUgPSAoXHJcbiAgICB8IEJ1aWxkaW5nVHlwZS5tZXRhbFN0b3JhZ2VcclxuICAgIHwgQnVpbGRpbmdUeXBlLmNyeXN0YWxTdG9yYWdlXHJcbiAgICB8IEJ1aWxkaW5nVHlwZS5kZXV0ZXJpdW1UYW5rXHJcbik7XHJcbmV4cG9ydCB0eXBlIE1vb25GYWNpbGl0eUJ1aWxkaW5nVHlwZSA9IChcclxuICAgIHwgQnVpbGRpbmdUeXBlLnJvYm90aWNzRmFjdG9yeVxyXG4gICAgfCBCdWlsZGluZ1R5cGUuc2hpcHlhcmRcclxuICAgIHwgQnVpbGRpbmdUeXBlLmx1bmFyQmFzZVxyXG4gICAgfCBCdWlsZGluZ1R5cGUuc2Vuc29yUGhhbGFueFxyXG4gICAgfCBCdWlsZGluZ1R5cGUuanVtcEdhdGVcclxuKTtcclxuXHJcbmV4cG9ydCB0eXBlIFBsYW5ldEJ1aWxkaW5nVHlwZSA9IChcclxuICAgIHwgQnVpbGRpbmdUeXBlLm1ldGFsTWluZVxyXG4gICAgfCBCdWlsZGluZ1R5cGUuY3J5c3RhbE1pbmVcclxuICAgIHwgQnVpbGRpbmdUeXBlLmRldXRlcml1bVN5bnRoZXNpemVyXHJcbiAgICB8IEJ1aWxkaW5nVHlwZS5tZXRhbFN0b3JhZ2VcclxuICAgIHwgQnVpbGRpbmdUeXBlLmNyeXN0YWxTdG9yYWdlXHJcbiAgICB8IEJ1aWxkaW5nVHlwZS5kZXV0ZXJpdW1UYW5rXHJcbiAgICB8IEJ1aWxkaW5nVHlwZS5zb2xhclBsYW50XHJcbiAgICB8IEJ1aWxkaW5nVHlwZS5mdXNpb25SZWFjdG9yXHJcblxyXG4gICAgfCBCdWlsZGluZ1R5cGUucm9ib3RpY3NGYWN0b3J5XHJcbiAgICB8IEJ1aWxkaW5nVHlwZS5zaGlweWFyZFxyXG4gICAgfCBCdWlsZGluZ1R5cGUucmVzZWFyY2hMYWJcclxuICAgIHwgQnVpbGRpbmdUeXBlLmFsbGlhbmNlRGVwb3RcclxuICAgIHwgQnVpbGRpbmdUeXBlLm1pc3NpbGVTaWxvXHJcbiAgICB8IEJ1aWxkaW5nVHlwZS5uYW5pdGVGYWN0b3J5XHJcbiAgICB8IEJ1aWxkaW5nVHlwZS50ZXJyYWZvcm1lclxyXG4gICAgfCBCdWlsZGluZ1R5cGUuc3BhY2VEb2NrXHJcbik7XHJcbmV4cG9ydCB0eXBlIFBsYW5ldFN1cHBseUJ1aWxkaW5nVHlwZSA9IChcclxuICAgIHwgQnVpbGRpbmdUeXBlLm1ldGFsTWluZVxyXG4gICAgfCBCdWlsZGluZ1R5cGUuY3J5c3RhbE1pbmVcclxuICAgIHwgQnVpbGRpbmdUeXBlLmRldXRlcml1bVN5bnRoZXNpemVyXHJcbiAgICB8IEJ1aWxkaW5nVHlwZS5tZXRhbFN0b3JhZ2VcclxuICAgIHwgQnVpbGRpbmdUeXBlLmNyeXN0YWxTdG9yYWdlXHJcbiAgICB8IEJ1aWxkaW5nVHlwZS5kZXV0ZXJpdW1UYW5rXHJcbiAgICB8IEJ1aWxkaW5nVHlwZS5zb2xhclBsYW50XHJcbiAgICB8IEJ1aWxkaW5nVHlwZS5mdXNpb25SZWFjdG9yXHJcbik7XHJcbmV4cG9ydCB0eXBlIFBsYW5ldEZhY2lsaXR5QnVpbGRpbmdUeXBlID0gKFxyXG4gICAgfCBCdWlsZGluZ1R5cGUucm9ib3RpY3NGYWN0b3J5XHJcbiAgICB8IEJ1aWxkaW5nVHlwZS5zaGlweWFyZFxyXG4gICAgfCBCdWlsZGluZ1R5cGUucmVzZWFyY2hMYWJcclxuICAgIHwgQnVpbGRpbmdUeXBlLmFsbGlhbmNlRGVwb3RcclxuICAgIHwgQnVpbGRpbmdUeXBlLm1pc3NpbGVTaWxvXHJcbiAgICB8IEJ1aWxkaW5nVHlwZS5uYW5pdGVGYWN0b3J5XHJcbiAgICB8IEJ1aWxkaW5nVHlwZS50ZXJyYWZvcm1lclxyXG4gICAgfCBCdWlsZGluZ1R5cGUuc3BhY2VEb2NrXHJcbik7IiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5pbXBvcnQgeyBCdWlsZGluZ1R5cGUgfSBmcm9tIFwiLi9CdWlsZGluZ1R5cGVcIjtcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCdWlsZGluZyB7XHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0Q29zdChsZXZlbDogbnVtYmVyKTogQ29zdDtcclxuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXQgdHlwZSgpOiBCdWlsZGluZ1R5cGU7XHJcbn0iLCJpbXBvcnQgeyBDb3N0IH0gZnJvbSBcIi4uL2NvbW1vbi9Db3N0XCI7XHJcbmltcG9ydCB7IEJ1aWxkaW5nIH0gZnJvbSBcIi4vQnVpbGRpbmdcIjtcclxuaW1wb3J0IHsgQnVpbGRpbmdUeXBlIH0gZnJvbSBcIi4vQnVpbGRpbmdUeXBlXCI7XHJcblxyXG5jbGFzcyBBbGxpYW5jZURlcG90Q2xhc3MgZXh0ZW5kcyBCdWlsZGluZyB7XHJcblxyXG4gICAgcHVibGljIGdldCB0eXBlKCkge1xyXG4gICAgICAgIHJldHVybiBCdWlsZGluZ1R5cGUuYWxsaWFuY2VEZXBvdDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Q29zdChsZXZlbDogbnVtYmVyKTogQ29zdCB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbWV0YWw6IDEwXzAwMCAqIDIgKiogbGV2ZWwsXHJcbiAgICAgICAgICAgIGNyeXN0YWw6IDIwXzAwMCAqIDIgKiogbGV2ZWwsXHJcbiAgICAgICAgICAgIGRldXRlcml1bTogMCxcclxuICAgICAgICAgICAgZW5lcmd5OiAwLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBBbGxpYW5jZURlcG90ID0gbmV3IEFsbGlhbmNlRGVwb3RDbGFzcygpO1xyXG4iLCJpbXBvcnQgeyBDb3N0IH0gZnJvbSBcIi4uL2NvbW1vbi9Db3N0XCI7XHJcbmltcG9ydCB7IEJ1aWxkaW5nIH0gZnJvbSBcIi4vQnVpbGRpbmdcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUHJvZHVjdGlvbkJ1aWxkaW5nRGVwZW5kZW5jaWVzIHtcclxuICAgIHBsYW5ldDoge1xyXG4gICAgICAgIHBvc2l0aW9uOiBudW1iZXI7XHJcbiAgICAgICAgdGVtcGVyYXR1cmU6IG51bWJlcjtcclxuICAgIH07XHJcbiAgICBzZXJ2ZXJTZXR0aW5nczoge1xyXG4gICAgICAgIGVjb25vbXlTcGVlZDogbnVtYmVyO1xyXG4gICAgICAgIGNyeXN0YWxCb29zdDoge1xyXG4gICAgICAgICAgICBkZWZhdWx0OiBudW1iZXI7XHJcbiAgICAgICAgICAgIHBvczE6IG51bWJlcjtcclxuICAgICAgICAgICAgcG9zMjogbnVtYmVyO1xyXG4gICAgICAgICAgICBwb3MzOiBudW1iZXI7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICBwcm9kdWN0aW9uU2V0dGluZ3M6IHtcclxuICAgICAgICBtZXRhbE1pbmU6IG51bWJlcjtcclxuICAgICAgICBjcnlzdGFsTWluZTogbnVtYmVyO1xyXG4gICAgICAgIGRldXRlcml1bVN5bnRoZXNpemVyOiBudW1iZXI7XHJcbiAgICAgICAgZnVzaW9uUmVhY3RvcjogbnVtYmVyO1xyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFByb2R1Y3Rpb25CdWlsZGluZyBleHRlbmRzIEJ1aWxkaW5nIHtcclxuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRQcm9kdWN0aW9uKGxldmVsOiBudW1iZXIsIGRlcGVuZGVuY2llczogUHJvZHVjdGlvbkJ1aWxkaW5nRGVwZW5kZW5jaWVzKTogbnVtYmVyO1xyXG4gICAgcHVibGljIGFic3RyYWN0IGdldENvbnN1bXB0aW9uKGxldmVsOiBudW1iZXIsIGRlcGVuZGVuY2llczogUHJvZHVjdGlvbkJ1aWxkaW5nRGVwZW5kZW5jaWVzKTogQ29zdDtcclxufSIsImltcG9ydCB7IENvc3QgfSBmcm9tIFwiLi4vY29tbW9uL0Nvc3RcIjtcclxuaW1wb3J0IHsgQnVpbGRpbmdUeXBlIH0gZnJvbSBcIi4vQnVpbGRpbmdUeXBlXCI7XHJcbmltcG9ydCB7IFByb2R1Y3Rpb25CdWlsZGluZywgUHJvZHVjdGlvbkJ1aWxkaW5nRGVwZW5kZW5jaWVzIH0gZnJvbSBcIi4vUHJvZHVjdGlvbkJ1aWxkaW5nXCI7XHJcbmNsYXNzIENyeXN0YWxNaW5lQ2xhc3MgZXh0ZW5kcyBQcm9kdWN0aW9uQnVpbGRpbmcge1xyXG5cclxuICAgIHB1YmxpYyBnZXQgdHlwZSgpIHtcclxuICAgICAgICByZXR1cm4gQnVpbGRpbmdUeXBlLmNyeXN0YWxNaW5lO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBwdWJsaWMgZ2V0UHJvZHVjdGlvbihsZXZlbDogbnVtYmVyLCBkZXBlbmRlbmNpZXM6IFByb2R1Y3Rpb25CdWlsZGluZ0RlcGVuZGVuY2llcyk6IG51bWJlciB7XHJcbiAgICAgICAgY29uc3QgYm9vc3QgPSB0aGlzLmdldFByb2R1Y3Rpb25Cb29zdChkZXBlbmRlbmNpZXMucGxhbmV0LnBvc2l0aW9uLCBkZXBlbmRlbmNpZXMuc2VydmVyU2V0dGluZ3MpO1xyXG4gICAgICAgIGNvbnN0IG1pbmVQcm9kdWN0aW9uID0gTWF0aC50cnVuYyhcclxuICAgICAgICAgICAgMjBcclxuICAgICAgICAgICAgKiBkZXBlbmRlbmNpZXMuc2VydmVyU2V0dGluZ3MuZWNvbm9teVNwZWVkXHJcbiAgICAgICAgICAgICogKDEgKyBib29zdClcclxuICAgICAgICAgICAgKiBsZXZlbFxyXG4gICAgICAgICAgICAqIDEuMSAqKiBsZXZlbFxyXG4gICAgICAgICAgICAqIGRlcGVuZGVuY2llcy5wcm9kdWN0aW9uU2V0dGluZ3MuY3J5c3RhbE1pbmUgLyAxMDBcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICByZXR1cm4gbWluZVByb2R1Y3Rpb247XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRQcm9kdWN0aW9uQm9vc3QocG9zaXRpb246IG51bWJlciwgc2VydmVyU2V0dGluZ3M6IFByb2R1Y3Rpb25CdWlsZGluZ0RlcGVuZGVuY2llc1snc2VydmVyU2V0dGluZ3MnXSkge1xyXG4gICAgICAgIHN3aXRjaCAocG9zaXRpb24pIHtcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZlclNldHRpbmdzLmNyeXN0YWxCb29zdC5wb3MxO1xyXG5cclxuICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZlclNldHRpbmdzLmNyeXN0YWxCb29zdC5wb3MyO1xyXG5cclxuICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZlclNldHRpbmdzLmNyeXN0YWxCb29zdC5wb3MzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHNlcnZlclNldHRpbmdzLmNyeXN0YWxCb29zdC5kZWZhdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDb25zdW1wdGlvbihsZXZlbDogbnVtYmVyLCBkZXBlbmRlbmNpZXM6IFByb2R1Y3Rpb25CdWlsZGluZ0RlcGVuZGVuY2llcyk6IENvc3Qge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1ldGFsOiAwLFxyXG4gICAgICAgICAgICBjcnlzdGFsOiAwLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW06IDAsXHJcbiAgICAgICAgICAgIGVuZXJneTogTWF0aC5jZWlsKDEwICogbGV2ZWwgKiAxLjEgKiogbGV2ZWwpLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldENvc3QobGV2ZWw6IG51bWJlcik6IENvc3Qge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1ldGFsOiBNYXRoLmZsb29yKDMwICogMS42ICoqIGxldmVsKSxcclxuICAgICAgICAgICAgY3J5c3RhbDogTWF0aC5mbG9vcigxNSAqIDEuNiAqKiBsZXZlbCksXHJcbiAgICAgICAgICAgIGRldXRlcml1bTogMCxcclxuICAgICAgICAgICAgZW5lcmd5OiAwLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG59XHJcbmV4cG9ydCBjb25zdCBDcnlzdGFsTWluZSA9IG5ldyBDcnlzdGFsTWluZUNsYXNzKCk7IiwiaW1wb3J0IHsgQnVpbGRpbmcgfSBmcm9tIFwiLi9CdWlsZGluZ1wiO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFN0b3JhZ2VCdWlsZGluZyBleHRlbmRzIEJ1aWxkaW5nIHtcclxuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRTdG9yYWdlKGxldmVsOiBudW1iZXIpOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0RGVuUGVyY2VudGFnZShsZXZlbDogbnVtYmVyKTogbnVtYmVyO1xyXG59IiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5pbXBvcnQgeyBCdWlsZGluZ1R5cGUgfSBmcm9tIFwiLi9CdWlsZGluZ1R5cGVcIjtcclxuaW1wb3J0IHsgU3RvcmFnZUJ1aWxkaW5nIH0gZnJvbSBcIi4vU3RvcmFnZUJ1aWxkaW5nXCI7XHJcblxyXG5jbGFzcyBDcnlzdGFsU3RvcmFnZUNsYXNzIGV4dGVuZHMgU3RvcmFnZUJ1aWxkaW5nIHtcclxuXHJcbiAgICBwdWJsaWMgZ2V0IHR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIEJ1aWxkaW5nVHlwZS5jcnlzdGFsU3RvcmFnZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0U3RvcmFnZShsZXZlbDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcigyLjUgKiBNYXRoLkUgKiogKDIwICogbGV2ZWwgLyAzMykpICogNV8wMDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldERlblBlcmNlbnRhZ2UobGV2ZWw6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGgubWluKDAuMSwgbGV2ZWwgKiAwLjAxKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Q29zdChsZXZlbDogbnVtYmVyKTogQ29zdCB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbWV0YWw6IDUwMCAqIDIgKiogbGV2ZWwsXHJcbiAgICAgICAgICAgIGNyeXN0YWw6IDI1MCAqIDIgKiogbGV2ZWwsXHJcbiAgICAgICAgICAgIGRldXRlcml1bTogMCxcclxuICAgICAgICAgICAgZW5lcmd5OiAwLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBDcnlzdGFsU3RvcmFnZSA9IG5ldyBDcnlzdGFsU3RvcmFnZUNsYXNzKCk7XHJcbiIsImltcG9ydCB7IENvc3QgfSBmcm9tIFwiLi4vY29tbW9uL0Nvc3RcIjtcclxuaW1wb3J0IHsgQnVpbGRpbmdUeXBlIH0gZnJvbSBcIi4vQnVpbGRpbmdUeXBlXCI7XHJcbmltcG9ydCB7IFByb2R1Y3Rpb25CdWlsZGluZywgUHJvZHVjdGlvbkJ1aWxkaW5nRGVwZW5kZW5jaWVzIH0gZnJvbSBcIi4vUHJvZHVjdGlvbkJ1aWxkaW5nXCI7XHJcblxyXG5jbGFzcyBEZXV0ZXJpdW1TeW50aGVzaXplckNsYXNzIGV4dGVuZHMgUHJvZHVjdGlvbkJ1aWxkaW5nIHtcclxuXHJcbiAgICBwdWJsaWMgZ2V0IHR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIEJ1aWxkaW5nVHlwZS5kZXV0ZXJpdW1TeW50aGVzaXplcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0UHJvZHVjdGlvbihsZXZlbDogbnVtYmVyLCBkZXBlbmRlbmNpZXM6IFByb2R1Y3Rpb25CdWlsZGluZ0RlcGVuZGVuY2llcyk6IG51bWJlciB7XHJcbiAgICAgICAgY29uc3QgbWluZVByb2R1Y3Rpb24gPSBNYXRoLnRydW5jKFxyXG4gICAgICAgICAgICAxMCBcclxuICAgICAgICAgICAgKiBsZXZlbCBcclxuICAgICAgICAgICAgKiAxLjEgKiogbGV2ZWxcclxuICAgICAgICAgICAgKiBkZXBlbmRlbmNpZXMuc2VydmVyU2V0dGluZ3MuZWNvbm9teVNwZWVkXHJcbiAgICAgICAgICAgICogKDEuNDQgLSAwLjAwNCAqIGRlcGVuZGVuY2llcy5wbGFuZXQudGVtcGVyYXR1cmUpXHJcbiAgICAgICAgICAgICogZGVwZW5kZW5jaWVzLnByb2R1Y3Rpb25TZXR0aW5ncy5kZXV0ZXJpdW1TeW50aGVzaXplciAvIDEwMFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIG1pbmVQcm9kdWN0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDb25zdW1wdGlvbihsZXZlbDogbnVtYmVyLCBkZXBlbmRlbmNpZXM6IFByb2R1Y3Rpb25CdWlsZGluZ0RlcGVuZGVuY2llcyk6IENvc3Qge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1ldGFsOiAwLFxyXG4gICAgICAgICAgICBjcnlzdGFsOiAwLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW06IDAsXHJcbiAgICAgICAgICAgIGVuZXJneTogTWF0aC5jZWlsKDIwICogbGV2ZWwgKiAxLjEgKiogbGV2ZWwpLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldENvc3QobGV2ZWw6IG51bWJlcik6IENvc3Qge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1ldGFsOiBNYXRoLmZsb29yKDE1MCAqIDEuNSAqKiBsZXZlbCksXHJcbiAgICAgICAgICAgIGNyeXN0YWw6IE1hdGguZmxvb3IoNTAgKiAxLjUgKiogbGV2ZWwpLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW06IDAsXHJcbiAgICAgICAgICAgIGVuZXJneTogMCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxufVxyXG5leHBvcnQgY29uc3QgRGV1dGVyaXVtU3ludGhlc2l6ZXIgPSBuZXcgRGV1dGVyaXVtU3ludGhlc2l6ZXJDbGFzcygpOyIsImltcG9ydCB7IENvc3QgfSBmcm9tIFwiLi4vY29tbW9uL0Nvc3RcIjtcclxuaW1wb3J0IHsgQnVpbGRpbmdUeXBlIH0gZnJvbSBcIi4vQnVpbGRpbmdUeXBlXCI7XHJcbmltcG9ydCB7IFN0b3JhZ2VCdWlsZGluZyB9IGZyb20gXCIuL1N0b3JhZ2VCdWlsZGluZ1wiO1xyXG5cclxuY2xhc3MgRGV1dGVyaXVtVGFua0NsYXNzIGV4dGVuZHMgU3RvcmFnZUJ1aWxkaW5nIHtcclxuXHJcbiAgICBwdWJsaWMgZ2V0IHR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIEJ1aWxkaW5nVHlwZS5kZXV0ZXJpdW1UYW5rO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRTdG9yYWdlKGxldmVsOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKDIuNSAqIE1hdGguRSAqKiAoMjAgKiBsZXZlbCAvIDMzKSkgKiA1XzAwMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RGVuUGVyY2VudGFnZShsZXZlbDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5taW4oMC4xLCBsZXZlbCAqIDAuMDEpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDb3N0KGxldmVsOiBudW1iZXIpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogNTAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgY3J5c3RhbDogNTAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgZGV1dGVyaXVtOiAwLFxyXG4gICAgICAgICAgICBlbmVyZ3k6IDAsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IERldXRlcml1bVRhbmsgPSBuZXcgRGV1dGVyaXVtVGFua0NsYXNzKCk7XHJcbiIsImltcG9ydCB7IENvc3QgfSBmcm9tIFwiLi4vY29tbW9uL0Nvc3RcIjtcclxuaW1wb3J0IHsgQnVpbGRpbmdUeXBlIH0gZnJvbSBcIi4vQnVpbGRpbmdUeXBlXCI7XHJcbmltcG9ydCB7IFByb2R1Y3Rpb25CdWlsZGluZywgUHJvZHVjdGlvbkJ1aWxkaW5nRGVwZW5kZW5jaWVzIH0gZnJvbSBcIi4vUHJvZHVjdGlvbkJ1aWxkaW5nXCI7XHJcblxyXG5jbGFzcyBGdXNpb25SZWFjdG9yQ2xhc3MgZXh0ZW5kcyBQcm9kdWN0aW9uQnVpbGRpbmcge1xyXG4gICAgXHJcbiAgICBwdWJsaWMgZ2V0IHR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIEJ1aWxkaW5nVHlwZS5mdXNpb25SZWFjdG9yO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRQcm9kdWN0aW9uKGxldmVsOiBudW1iZXIsIGRlcGVuZGVuY2llczogUHJvZHVjdGlvbkJ1aWxkaW5nRGVwZW5kZW5jaWVzKTogbnVtYmVyIHtcclxuICAgICAgICAvL1RPRE86IGZ1c2lvbiByZWFjdG9yIHByb2R1Y3Rpb25cclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDb25zdW1wdGlvbihsZXZlbDogbnVtYmVyLCBkZXBlbmRlbmNpZXM6IFByb2R1Y3Rpb25CdWlsZGluZ0RlcGVuZGVuY2llcyk6IENvc3Qge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1ldGFsOiAwLFxyXG4gICAgICAgICAgICBjcnlzdGFsOiAwLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW06IE1hdGgudHJ1bmMoMTAgKiBsZXZlbCAqIDEuMSAqKiBsZXZlbCAqIGRlcGVuZGVuY2llcy5wcm9kdWN0aW9uU2V0dGluZ3MuZnVzaW9uUmVhY3RvciAvIDEwMCAqIGRlcGVuZGVuY2llcy5zZXJ2ZXJTZXR0aW5ncy5lY29ub215U3BlZWQpLFxyXG4gICAgICAgICAgICBlbmVyZ3k6IDAsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Q29zdChsZXZlbDogbnVtYmVyKTogQ29zdCB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbWV0YWw6IE1hdGguZmxvb3IoNTAwICogMS44ICoqIGxldmVsKSxcclxuICAgICAgICAgICAgY3J5c3RhbDogTWF0aC5mbG9vcigyMDAgKiAxLjggKiogbGV2ZWwpLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW06IE1hdGguZmxvb3IoMTAwICogMS44ICoqIGxldmVsKSxcclxuICAgICAgICAgICAgZW5lcmd5OiAwLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBGdXNpb25SZWFjdG9yID0gbmV3IEZ1c2lvblJlYWN0b3JDbGFzcygpO1xyXG4iLCJpbXBvcnQgeyBDb3N0IH0gZnJvbSBcIi4uL2NvbW1vbi9Db3N0XCI7XHJcbmltcG9ydCB7IEJ1aWxkaW5nIH0gZnJvbSBcIi4vQnVpbGRpbmdcIjtcclxuaW1wb3J0IHsgQnVpbGRpbmdUeXBlIH0gZnJvbSBcIi4vQnVpbGRpbmdUeXBlXCI7XHJcblxyXG5jbGFzcyBKdW1wR2F0ZUNsYXNzIGV4dGVuZHMgQnVpbGRpbmcge1xyXG5cclxuICAgIHB1YmxpYyBnZXQgdHlwZSgpIHtcclxuICAgICAgICByZXR1cm4gQnVpbGRpbmdUeXBlLmp1bXBHYXRlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDb3N0KGxldmVsOiBudW1iZXIpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogMV8wMDBfMDAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgY3J5c3RhbDogMl8wMDBfMDAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgZGV1dGVyaXVtOiAxXzAwMF8wMDAgKiAyICoqIGxldmVsLFxyXG4gICAgICAgICAgICBlbmVyZ3k6IDAsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEp1bXBHYXRlID0gbmV3IEp1bXBHYXRlQ2xhc3MoKTtcclxuIiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5pbXBvcnQgeyBCdWlsZGluZyB9IGZyb20gXCIuL0J1aWxkaW5nXCI7XHJcbmltcG9ydCB7IEJ1aWxkaW5nVHlwZSB9IGZyb20gXCIuL0J1aWxkaW5nVHlwZVwiO1xyXG5cclxuY2xhc3MgTHVuYXJCYXNlQ2xhc3MgZXh0ZW5kcyBCdWlsZGluZyB7XHJcblxyXG4gICAgcHVibGljIGdldCB0eXBlKCkge1xyXG4gICAgICAgIHJldHVybiBCdWlsZGluZ1R5cGUubHVuYXJCYXNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDb3N0KGxldmVsOiBudW1iZXIpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogMTBfMDAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgY3J5c3RhbDogMjBfMDAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgZGV1dGVyaXVtOiAxMF8wMDAgKiAyICoqIGxldmVsLFxyXG4gICAgICAgICAgICBlbmVyZ3k6IDAsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEx1bmFyQmFzZSA9IG5ldyBMdW5hckJhc2VDbGFzcygpO1xyXG4iLCJpbXBvcnQgeyBDb3N0IH0gZnJvbSBcIi4uL2NvbW1vbi9Db3N0XCI7XHJcbmltcG9ydCB7IEJ1aWxkaW5nVHlwZSB9IGZyb20gXCIuL0J1aWxkaW5nVHlwZVwiO1xyXG5pbXBvcnQgeyBQcm9kdWN0aW9uQnVpbGRpbmcsIFByb2R1Y3Rpb25CdWlsZGluZ0RlcGVuZGVuY2llcyB9IGZyb20gXCIuL1Byb2R1Y3Rpb25CdWlsZGluZ1wiO1xyXG5cclxuY2xhc3MgTWV0YWxNaW5lQ2xhc3MgZXh0ZW5kcyBQcm9kdWN0aW9uQnVpbGRpbmcge1xyXG5cclxuICAgIHB1YmxpYyBnZXQgdHlwZSgpIHtcclxuICAgICAgICByZXR1cm4gQnVpbGRpbmdUeXBlLm1ldGFsTWluZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0UHJvZHVjdGlvbihsZXZlbDogbnVtYmVyLCBkZXBlbmRlbmNpZXM6IFByb2R1Y3Rpb25CdWlsZGluZ0RlcGVuZGVuY2llcyk6IG51bWJlciB7XHJcbiAgICAgICAgY29uc3QgYm9vc3QgPSB0aGlzLmdldFByb2R1Y3Rpb25Cb29zdChkZXBlbmRlbmNpZXMucGxhbmV0LnBvc2l0aW9uKTtcclxuICAgICAgICBjb25zdCBiYXNlUHJvZHVjdGlvbiA9IDMwICogZGVwZW5kZW5jaWVzLnNlcnZlclNldHRpbmdzLmVjb25vbXlTcGVlZCAqICgxICsgYm9vc3QpO1xyXG4gICAgICAgIGNvbnN0IG1pbmVQcm9kdWN0aW9uID0gTWF0aC50cnVuYyhiYXNlUHJvZHVjdGlvbiAqIGxldmVsICogMS4xICoqIGxldmVsICogZGVwZW5kZW5jaWVzLnByb2R1Y3Rpb25TZXR0aW5ncy5tZXRhbE1pbmUgLyAxMDApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBtaW5lUHJvZHVjdGlvbjtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBnZXRQcm9kdWN0aW9uQm9vc3QocG9zaXRpb246IG51bWJlcikge1xyXG4gICAgICAgIHN3aXRjaCAocG9zaXRpb24pIHtcclxuICAgICAgICAgICAgY2FzZSA4OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDAuMzU7XHJcblxyXG4gICAgICAgICAgICBjYXNlIDc6XHJcbiAgICAgICAgICAgIGNhc2UgOTpcclxuICAgICAgICAgICAgICAgIHJldHVybiAwLjIzO1xyXG5cclxuICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICBjYXNlIDEwOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDAuMTc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Q29uc3VtcHRpb24obGV2ZWw6IG51bWJlciwgZGVwZW5kZW5jaWVzOiBQcm9kdWN0aW9uQnVpbGRpbmdEZXBlbmRlbmNpZXMpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogMCxcclxuICAgICAgICAgICAgY3J5c3RhbDogMCxcclxuICAgICAgICAgICAgZGV1dGVyaXVtOiAwLFxyXG4gICAgICAgICAgICBlbmVyZ3k6IE1hdGguY2VpbCgxMCAqIGxldmVsICogMS4xICoqIGxldmVsKSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDb3N0KGxldmVsOiBudW1iZXIpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogTWF0aC5mbG9vcig0MCAqIDEuNSAqKiBsZXZlbCksXHJcbiAgICAgICAgICAgIGNyeXN0YWw6IE1hdGguZmxvb3IoMTAgKiAxLjUgKiogbGV2ZWwpLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW06IDAsXHJcbiAgICAgICAgICAgIGVuZXJneTogMCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxufVxyXG5leHBvcnQgY29uc3QgTWV0YWxNaW5lID0gbmV3IE1ldGFsTWluZUNsYXNzKCk7IiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5pbXBvcnQgeyBCdWlsZGluZ1R5cGUgfSBmcm9tIFwiLi9CdWlsZGluZ1R5cGVcIjtcclxuaW1wb3J0IHsgU3RvcmFnZUJ1aWxkaW5nIH0gZnJvbSBcIi4vU3RvcmFnZUJ1aWxkaW5nXCI7XHJcblxyXG5jbGFzcyBNZXRhbFN0b3JhZ2VDbGFzcyBleHRlbmRzIFN0b3JhZ2VCdWlsZGluZyB7XHJcblxyXG4gICAgcHVibGljIGdldCB0eXBlKCkge1xyXG4gICAgICAgIHJldHVybiBCdWlsZGluZ1R5cGUubWV0YWxTdG9yYWdlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRTdG9yYWdlKGxldmVsOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKDIuNSAqIE1hdGguRSAqKiAoMjAgKiBsZXZlbCAvIDMzKSkgKiA1XzAwMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RGVuUGVyY2VudGFnZShsZXZlbDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5taW4oMC4xLCBsZXZlbCAqIDAuMDEpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDb3N0KGxldmVsOiBudW1iZXIpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogNTAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgY3J5c3RhbDogMCxcclxuICAgICAgICAgICAgZGV1dGVyaXVtOiAwLFxyXG4gICAgICAgICAgICBlbmVyZ3k6IDAsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IE1ldGFsU3RvcmFnZSA9IG5ldyBNZXRhbFN0b3JhZ2VDbGFzcygpO1xyXG4iLCJpbXBvcnQgeyBDb3N0IH0gZnJvbSBcIi4uL2NvbW1vbi9Db3N0XCI7XHJcbmltcG9ydCB7IEJ1aWxkaW5nIH0gZnJvbSBcIi4vQnVpbGRpbmdcIjtcclxuaW1wb3J0IHsgQnVpbGRpbmdUeXBlIH0gZnJvbSBcIi4vQnVpbGRpbmdUeXBlXCI7XHJcblxyXG5jbGFzcyBNaXNzaWxlU2lsb0NsYXNzIGV4dGVuZHMgQnVpbGRpbmcge1xyXG5cclxuICAgIHB1YmxpYyBnZXQgdHlwZSgpIHtcclxuICAgICAgICByZXR1cm4gQnVpbGRpbmdUeXBlLm1pc3NpbGVTaWxvO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDb3N0KGxldmVsOiBudW1iZXIpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogMTBfMDAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgY3J5c3RhbDogMTBfMDAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgZGV1dGVyaXVtOiA1MDAgKiAyICoqIGxldmVsLFxyXG4gICAgICAgICAgICBlbmVyZ3k6IDAsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IE1pc3NpbGVTaWxvID0gbmV3IE1pc3NpbGVTaWxvQ2xhc3MoKTtcclxuIiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5pbXBvcnQgeyBCdWlsZGluZyB9IGZyb20gXCIuL0J1aWxkaW5nXCI7XHJcbmltcG9ydCB7IEJ1aWxkaW5nVHlwZSB9IGZyb20gXCIuL0J1aWxkaW5nVHlwZVwiO1xyXG5cclxuY2xhc3MgTmFuaXRlRmFjdG9yeUNsYXNzIGV4dGVuZHMgQnVpbGRpbmcge1xyXG5cclxuICAgIHB1YmxpYyBnZXQgdHlwZSgpIHtcclxuICAgICAgICByZXR1cm4gQnVpbGRpbmdUeXBlLm5hbml0ZUZhY3Rvcnk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldENvc3QobGV2ZWw6IG51bWJlcik6IENvc3Qge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1ldGFsOiA1MDBfMDAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgY3J5c3RhbDogMjUwXzAwMCAqIDIgKiogbGV2ZWwsXHJcbiAgICAgICAgICAgIGRldXRlcml1bTogNTBfMDAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgZW5lcmd5OiAwLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBOYW5pdGVGYWN0b3J5ID0gbmV3IE5hbml0ZUZhY3RvcnlDbGFzcygpO1xyXG4iLCJpbXBvcnQgeyBDb3N0IH0gZnJvbSBcIi4uL2NvbW1vbi9Db3N0XCI7XHJcbmltcG9ydCB7IEJ1aWxkaW5nIH0gZnJvbSBcIi4vQnVpbGRpbmdcIjtcclxuaW1wb3J0IHsgQnVpbGRpbmdUeXBlIH0gZnJvbSBcIi4vQnVpbGRpbmdUeXBlXCI7XHJcblxyXG5jbGFzcyBSZXNlYXJjaExhYkNsYXNzIGV4dGVuZHMgQnVpbGRpbmcge1xyXG5cclxuICAgIHB1YmxpYyBnZXQgdHlwZSgpIHtcclxuICAgICAgICByZXR1cm4gQnVpbGRpbmdUeXBlLnJlc2VhcmNoTGFiO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDb3N0KGxldmVsOiBudW1iZXIpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogMTAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgY3J5c3RhbDogMjAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgZGV1dGVyaXVtOiAxMDAgKiAyICoqIGxldmVsLFxyXG4gICAgICAgICAgICBlbmVyZ3k6IDAsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFJlc2VhcmNoTGFiID0gbmV3IFJlc2VhcmNoTGFiQ2xhc3MoKTtcclxuIiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5pbXBvcnQgeyBCdWlsZGluZyB9IGZyb20gXCIuL0J1aWxkaW5nXCI7XHJcbmltcG9ydCB7IEJ1aWxkaW5nVHlwZSB9IGZyb20gXCIuL0J1aWxkaW5nVHlwZVwiO1xyXG5cclxuY2xhc3MgUm9ib3RpY3NGYWN0b3J5Q2xhc3MgZXh0ZW5kcyBCdWlsZGluZyB7XHJcblxyXG4gICAgcHVibGljIGdldCB0eXBlKCkge1xyXG4gICAgICAgIHJldHVybiBCdWlsZGluZ1R5cGUucm9ib3RpY3NGYWN0b3J5O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDb3N0KGxldmVsOiBudW1iZXIpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogMjAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgY3J5c3RhbDogNjAgKiAyICoqIGxldmVsLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW06IDEwMCAqIDIgKiogbGV2ZWwsXHJcbiAgICAgICAgICAgIGVuZXJneTogMCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgUm9ib3RpY3NGYWN0b3J5ID0gbmV3IFJvYm90aWNzRmFjdG9yeUNsYXNzKCk7XHJcbiIsImltcG9ydCB7IENvc3QgfSBmcm9tIFwiLi4vY29tbW9uL0Nvc3RcIjtcclxuaW1wb3J0IHsgQnVpbGRpbmcgfSBmcm9tIFwiLi9CdWlsZGluZ1wiO1xyXG5pbXBvcnQgeyBCdWlsZGluZ1R5cGUgfSBmcm9tIFwiLi9CdWlsZGluZ1R5cGVcIjtcclxuXHJcbmNsYXNzIFNlbnNvclBoYWxhbnhDbGFzcyBleHRlbmRzIEJ1aWxkaW5nIHtcclxuXHJcbiAgICBwdWJsaWMgZ2V0IHR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIEJ1aWxkaW5nVHlwZS5zZW5zb3JQaGFsYW54O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDb3N0KGxldmVsOiBudW1iZXIpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogMTBfMDAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgY3J5c3RhbDogMjBfMDAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgZGV1dGVyaXVtOiAxMF8wMDAgKiAyICoqIGxldmVsLFxyXG4gICAgICAgICAgICBlbmVyZ3k6IDAsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNlbnNvclBoYWxhbnggPSBuZXcgU2Vuc29yUGhhbGFueENsYXNzKCk7XHJcbiIsImltcG9ydCB7IENvc3QgfSBmcm9tIFwiLi4vY29tbW9uL0Nvc3RcIjtcclxuaW1wb3J0IHsgQnVpbGRpbmcgfSBmcm9tIFwiLi9CdWlsZGluZ1wiO1xyXG5pbXBvcnQgeyBCdWlsZGluZ1R5cGUgfSBmcm9tIFwiLi9CdWlsZGluZ1R5cGVcIjtcclxuXHJcbmNsYXNzIFNoaXB5YXJkQ2xhc3MgZXh0ZW5kcyBCdWlsZGluZyB7XHJcblxyXG4gICAgcHVibGljIGdldCB0eXBlKCkge1xyXG4gICAgICAgIHJldHVybiBCdWlsZGluZ1R5cGUuc2hpcHlhcmQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldENvc3QobGV2ZWw6IG51bWJlcik6IENvc3Qge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1ldGFsOiAyMDAgKiAyICoqIGxldmVsLFxyXG4gICAgICAgICAgICBjcnlzdGFsOiAxMDAgKiAyICoqIGxldmVsLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW06IDUwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgZW5lcmd5OiAwLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTaGlweWFyZCA9IG5ldyBTaGlweWFyZENsYXNzKCk7XHJcbiIsImltcG9ydCB7IENvc3QgfSBmcm9tIFwiLi4vY29tbW9uL0Nvc3RcIjtcclxuaW1wb3J0IHsgQnVpbGRpbmdUeXBlIH0gZnJvbSBcIi4vQnVpbGRpbmdUeXBlXCI7XHJcbmltcG9ydCB7IFByb2R1Y3Rpb25CdWlsZGluZywgUHJvZHVjdGlvbkJ1aWxkaW5nRGVwZW5kZW5jaWVzIH0gZnJvbSBcIi4vUHJvZHVjdGlvbkJ1aWxkaW5nXCI7XHJcblxyXG5jbGFzcyBTb2xhclBsYW50Q2xhc3MgZXh0ZW5kcyBQcm9kdWN0aW9uQnVpbGRpbmcge1xyXG4gICAgXHJcbiAgICBwdWJsaWMgZ2V0IHR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIEJ1aWxkaW5nVHlwZS5zb2xhclBsYW50O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRQcm9kdWN0aW9uKGxldmVsOiBudW1iZXIsIGRlcGVuZGVuY2llczogUHJvZHVjdGlvbkJ1aWxkaW5nRGVwZW5kZW5jaWVzKTogbnVtYmVyIHtcclxuICAgICAgICAvL1RPRE86IHNvbGFyIHBsYW50IHByb2R1Y3Rpb25cclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDb25zdW1wdGlvbihsZXZlbDogbnVtYmVyLCBkZXBlbmRlbmNpZXM6IFByb2R1Y3Rpb25CdWlsZGluZ0RlcGVuZGVuY2llcyk6IENvc3Qge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1ldGFsOiAwLFxyXG4gICAgICAgICAgICBjcnlzdGFsOiAwLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW06IDAsXHJcbiAgICAgICAgICAgIGVuZXJneTogMCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDb3N0KGxldmVsOiBudW1iZXIpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogTWF0aC5mbG9vcig1MCAqIDEuNSAqKiBsZXZlbCksXHJcbiAgICAgICAgICAgIGNyeXN0YWw6IE1hdGguZmxvb3IoMjAgKiAxLjUgKiogbGV2ZWwpLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW06IDAsXHJcbiAgICAgICAgICAgIGVuZXJneTogMCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU29sYXJQbGFudCA9IG5ldyBTb2xhclBsYW50Q2xhc3MoKTtcclxuIiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5pbXBvcnQgeyBCdWlsZGluZyB9IGZyb20gXCIuL0J1aWxkaW5nXCI7XHJcbmltcG9ydCB7IEJ1aWxkaW5nVHlwZSB9IGZyb20gXCIuL0J1aWxkaW5nVHlwZVwiO1xyXG5cclxuY2xhc3MgU3BhY2VEb2NrQ2xhc3MgZXh0ZW5kcyBCdWlsZGluZyB7XHJcblxyXG4gICAgcHVibGljIGdldCB0eXBlKCkge1xyXG4gICAgICAgIHJldHVybiBCdWlsZGluZ1R5cGUuc3BhY2VEb2NrO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDb3N0KGxldmVsOiBudW1iZXIpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogNDAgKiA0ICoqIGxldmVsLFxyXG4gICAgICAgICAgICBjcnlzdGFsOiAwLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW06IDEwICogNSAqKiBsZXZlbCxcclxuICAgICAgICAgICAgZW5lcmd5OiAxMCAqIDUgKiogbGV2ZWwsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0V3JlY2tmaWVsZChsZXZlbDogbnVtYmVyLCBkZWJyaXNGaWVsZFNldHRpbmc6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgY29uc3Qgd3JlY2tmaWVsZFBlcmNlbnRhZ2UgPSAxIC0gZGVicmlzRmllbGRTZXR0aW5nO1xyXG4gICAgICAgIHJldHVybiB3cmVja2ZpZWxkUGVyY2VudGFnZSAqIChNYXRoLnJvdW5kKDQ1ICogbGV2ZWwgKiogMC4wOCkgKiAwLjAxKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNwYWNlRG9jayA9IG5ldyBTcGFjZURvY2tDbGFzcygpO1xyXG4iLCJpbXBvcnQgeyBDb3N0IH0gZnJvbSBcIi4uL2NvbW1vbi9Db3N0XCI7XHJcbmltcG9ydCB7IEJ1aWxkaW5nIH0gZnJvbSBcIi4vQnVpbGRpbmdcIjtcclxuaW1wb3J0IHsgQnVpbGRpbmdUeXBlIH0gZnJvbSBcIi4vQnVpbGRpbmdUeXBlXCI7XHJcblxyXG5jbGFzcyBUZXJyYWZvcm1lckNsYXNzIGV4dGVuZHMgQnVpbGRpbmcge1xyXG5cclxuICAgIHB1YmxpYyBnZXQgdHlwZSgpIHtcclxuICAgICAgICByZXR1cm4gQnVpbGRpbmdUeXBlLnRlcnJhZm9ybWVyO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRDb3N0KGxldmVsOiBudW1iZXIpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogMCxcclxuICAgICAgICAgICAgY3J5c3RhbDogMjVfMDAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgZGV1dGVyaXVtOiA1MF8wMDAgKiAyICoqIGxldmVsLFxyXG4gICAgICAgICAgICBlbmVyZ3k6IDUwMCAqIDIgKiogbGV2ZWwsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFRlcnJhZm9ybWVyID0gbmV3IFRlcnJhZm9ybWVyQ2xhc3MoKTtcclxuIiwiaW1wb3J0IHsgQnVpbGRpbmdUeXBlLCBNb29uQnVpbGRpbmdUeXBlLCBNb29uRmFjaWxpdHlCdWlsZGluZ1R5cGUsIE1vb25TdXBwbHlCdWlsZGluZ1R5cGUsIFBsYW5ldEJ1aWxkaW5nVHlwZSwgUGxhbmV0RmFjaWxpdHlCdWlsZGluZ1R5cGUsIFBsYW5ldFN1cHBseUJ1aWxkaW5nVHlwZSB9IGZyb20gXCIuL0J1aWxkaW5nVHlwZVwiO1xyXG5pbXBvcnQgeyBCdWlsZGluZyB9IGZyb20gXCIuL0J1aWxkaW5nXCI7XHJcbmltcG9ydCB7IEFsbGlhbmNlRGVwb3QgfSBmcm9tIFwiLi9BbGxpYW5jZURlcG90XCI7XHJcbmltcG9ydCB7IENyeXN0YWxNaW5lIH0gZnJvbSBcIi4vQ3J5c3RhbE1pbmVcIjtcclxuaW1wb3J0IHsgQ3J5c3RhbFN0b3JhZ2UgfSBmcm9tIFwiLi9DcnlzdGFsU3RvcmFnZVwiO1xyXG5pbXBvcnQgeyBEZXV0ZXJpdW1TeW50aGVzaXplciB9IGZyb20gXCIuL0RldXRlcml1bVN5bnRoZXNpemVyXCI7XHJcbmltcG9ydCB7IERldXRlcml1bVRhbmsgfSBmcm9tIFwiLi9EZXV0ZXJpdW1UYW5rXCI7XHJcbmltcG9ydCB7IEZ1c2lvblJlYWN0b3IgfSBmcm9tIFwiLi9GdXNpb25SZWFjdG9yXCI7XHJcbmltcG9ydCB7IEp1bXBHYXRlIH0gZnJvbSBcIi4vSnVtcEdhdGVcIjtcclxuaW1wb3J0IHsgTHVuYXJCYXNlIH0gZnJvbSBcIi4vTHVuYXJCYXNlXCI7XHJcbmltcG9ydCB7IE1ldGFsTWluZSB9IGZyb20gXCIuL01ldGFsTWluZVwiO1xyXG5pbXBvcnQgeyBNZXRhbFN0b3JhZ2UgfSBmcm9tIFwiLi9NZXRhbFN0b3JhZ2VcIjtcclxuaW1wb3J0IHsgTWlzc2lsZVNpbG8gfSBmcm9tIFwiLi9NaXNzaWxlU2lsb1wiO1xyXG5pbXBvcnQgeyBOYW5pdGVGYWN0b3J5IH0gZnJvbSBcIi4vTmFuaXRlRmFjdG9yeVwiO1xyXG5pbXBvcnQgeyBSZXNlYXJjaExhYiB9IGZyb20gXCIuL1Jlc2VhcmNoTGFiXCI7XHJcbmltcG9ydCB7IFJvYm90aWNzRmFjdG9yeSB9IGZyb20gXCIuL1JvYm90aWNzRmFjdG9yeVwiO1xyXG5pbXBvcnQgeyBTZW5zb3JQaGFsYW54IH0gZnJvbSBcIi4vU2Vuc29yUGhhbGFueFwiO1xyXG5pbXBvcnQgeyBTaGlweWFyZCB9IGZyb20gXCIuL1NoaXB5YXJkXCI7XHJcbmltcG9ydCB7IFNvbGFyUGxhbnQgfSBmcm9tIFwiLi9Tb2xhclBsYW50XCI7XHJcbmltcG9ydCB7IFNwYWNlRG9jayB9IGZyb20gXCIuL1NwYWNlRG9ja1wiO1xyXG5pbXBvcnQgeyBUZXJyYWZvcm1lciB9IGZyb20gXCIuL1RlcnJhZm9ybWVyXCI7XHJcblxyXG5leHBvcnQgY29uc3QgQnVpbGRpbmdUeXBlczogQnVpbGRpbmdUeXBlW10gPSBbXHJcbiAgICBCdWlsZGluZ1R5cGUubWV0YWxNaW5lLFxyXG4gICAgQnVpbGRpbmdUeXBlLmNyeXN0YWxNaW5lLFxyXG4gICAgQnVpbGRpbmdUeXBlLmRldXRlcml1bVN5bnRoZXNpemVyLFxyXG5cclxuICAgIEJ1aWxkaW5nVHlwZS5tZXRhbFN0b3JhZ2UsXHJcbiAgICBCdWlsZGluZ1R5cGUuY3J5c3RhbFN0b3JhZ2UsXHJcbiAgICBCdWlsZGluZ1R5cGUuZGV1dGVyaXVtVGFuayxcclxuXHJcbiAgICBCdWlsZGluZ1R5cGUuc29sYXJQbGFudCxcclxuICAgIEJ1aWxkaW5nVHlwZS5mdXNpb25SZWFjdG9yLFxyXG5cclxuICAgIEJ1aWxkaW5nVHlwZS5yb2JvdGljc0ZhY3RvcnksXHJcbiAgICBCdWlsZGluZ1R5cGUuc2hpcHlhcmQsXHJcbiAgICBCdWlsZGluZ1R5cGUucmVzZWFyY2hMYWIsXHJcbiAgICBCdWlsZGluZ1R5cGUuYWxsaWFuY2VEZXBvdCxcclxuICAgIEJ1aWxkaW5nVHlwZS5taXNzaWxlU2lsbyxcclxuICAgIEJ1aWxkaW5nVHlwZS5uYW5pdGVGYWN0b3J5LFxyXG4gICAgQnVpbGRpbmdUeXBlLnRlcnJhZm9ybWVyLFxyXG4gICAgQnVpbGRpbmdUeXBlLnNwYWNlRG9jayxcclxuXHJcbiAgICBCdWlsZGluZ1R5cGUubHVuYXJCYXNlLFxyXG4gICAgQnVpbGRpbmdUeXBlLnNlbnNvclBoYWxhbngsXHJcbiAgICBCdWlsZGluZ1R5cGUuanVtcEdhdGUsXHJcbl07XHJcblxyXG5leHBvcnQgY29uc3QgUGxhbmV0QnVpbGRpbmdUeXBlczogUGxhbmV0QnVpbGRpbmdUeXBlW10gPSBbXHJcbiAgICBCdWlsZGluZ1R5cGUubWV0YWxNaW5lLFxyXG4gICAgQnVpbGRpbmdUeXBlLmNyeXN0YWxNaW5lLFxyXG4gICAgQnVpbGRpbmdUeXBlLmRldXRlcml1bVN5bnRoZXNpemVyLFxyXG4gICAgQnVpbGRpbmdUeXBlLm1ldGFsU3RvcmFnZSxcclxuICAgIEJ1aWxkaW5nVHlwZS5jcnlzdGFsU3RvcmFnZSxcclxuICAgIEJ1aWxkaW5nVHlwZS5kZXV0ZXJpdW1UYW5rLFxyXG4gICAgQnVpbGRpbmdUeXBlLnNvbGFyUGxhbnQsXHJcbiAgICBCdWlsZGluZ1R5cGUuZnVzaW9uUmVhY3RvcixcclxuXHJcbiAgICBCdWlsZGluZ1R5cGUucm9ib3RpY3NGYWN0b3J5LFxyXG4gICAgQnVpbGRpbmdUeXBlLnNoaXB5YXJkLFxyXG4gICAgQnVpbGRpbmdUeXBlLnJlc2VhcmNoTGFiLFxyXG4gICAgQnVpbGRpbmdUeXBlLmFsbGlhbmNlRGVwb3QsXHJcbiAgICBCdWlsZGluZ1R5cGUubWlzc2lsZVNpbG8sXHJcbiAgICBCdWlsZGluZ1R5cGUubmFuaXRlRmFjdG9yeSxcclxuICAgIEJ1aWxkaW5nVHlwZS50ZXJyYWZvcm1lcixcclxuICAgIEJ1aWxkaW5nVHlwZS5zcGFjZURvY2ssXHJcbl07XHJcbmV4cG9ydCBjb25zdCBQbGFuZXRTdXBwbHlCdWlsZGluZ1R5cGVzOiBQbGFuZXRTdXBwbHlCdWlsZGluZ1R5cGVbXSA9IFtcclxuICAgIEJ1aWxkaW5nVHlwZS5tZXRhbE1pbmUsXHJcbiAgICBCdWlsZGluZ1R5cGUuY3J5c3RhbE1pbmUsXHJcbiAgICBCdWlsZGluZ1R5cGUuZGV1dGVyaXVtU3ludGhlc2l6ZXIsXHJcbiAgICBCdWlsZGluZ1R5cGUubWV0YWxTdG9yYWdlLFxyXG4gICAgQnVpbGRpbmdUeXBlLmNyeXN0YWxTdG9yYWdlLFxyXG4gICAgQnVpbGRpbmdUeXBlLmRldXRlcml1bVRhbmssXHJcbiAgICBCdWlsZGluZ1R5cGUuc29sYXJQbGFudCxcclxuICAgIEJ1aWxkaW5nVHlwZS5mdXNpb25SZWFjdG9yLFxyXG5dO1xyXG5leHBvcnQgY29uc3QgUGxhbmV0RmFjaWxpdHlCdWlsZGluZ1R5cGVzOiBQbGFuZXRGYWNpbGl0eUJ1aWxkaW5nVHlwZVtdID0gW1xyXG4gICAgQnVpbGRpbmdUeXBlLnJvYm90aWNzRmFjdG9yeSxcclxuICAgIEJ1aWxkaW5nVHlwZS5zaGlweWFyZCxcclxuICAgIEJ1aWxkaW5nVHlwZS5yZXNlYXJjaExhYixcclxuICAgIEJ1aWxkaW5nVHlwZS5hbGxpYW5jZURlcG90LFxyXG4gICAgQnVpbGRpbmdUeXBlLm1pc3NpbGVTaWxvLFxyXG4gICAgQnVpbGRpbmdUeXBlLm5hbml0ZUZhY3RvcnksXHJcbiAgICBCdWlsZGluZ1R5cGUudGVycmFmb3JtZXIsXHJcbiAgICBCdWlsZGluZ1R5cGUuc3BhY2VEb2NrLFxyXG5dO1xyXG5leHBvcnQgY29uc3QgTW9vblN1cHBseUJ1aWxkaW5nVHlwZXM6IE1vb25TdXBwbHlCdWlsZGluZ1R5cGVbXSA9IFtcclxuICAgIEJ1aWxkaW5nVHlwZS5tZXRhbFN0b3JhZ2UsXHJcbiAgICBCdWlsZGluZ1R5cGUuY3J5c3RhbFN0b3JhZ2UsXHJcbiAgICBCdWlsZGluZ1R5cGUuZGV1dGVyaXVtVGFuayxcclxuXTtcclxuZXhwb3J0IGNvbnN0IE1vb25GYWNpbGl0eUJ1aWxkaW5nVHlwZXM6IE1vb25GYWNpbGl0eUJ1aWxkaW5nVHlwZVtdID0gW1xyXG4gICAgQnVpbGRpbmdUeXBlLnJvYm90aWNzRmFjdG9yeSxcclxuICAgIEJ1aWxkaW5nVHlwZS5zaGlweWFyZCxcclxuICAgIEJ1aWxkaW5nVHlwZS5sdW5hckJhc2UsXHJcbiAgICBCdWlsZGluZ1R5cGUuc2Vuc29yUGhhbGFueCxcclxuICAgIEJ1aWxkaW5nVHlwZS5qdW1wR2F0ZSxcclxuXTtcclxuZXhwb3J0IGNvbnN0IE1vb25CdWlsZGluZ1R5cGVzOiBNb29uQnVpbGRpbmdUeXBlW10gPSBbXHJcbiAgICBCdWlsZGluZ1R5cGUubWV0YWxTdG9yYWdlLFxyXG4gICAgQnVpbGRpbmdUeXBlLmNyeXN0YWxTdG9yYWdlLFxyXG4gICAgQnVpbGRpbmdUeXBlLmRldXRlcml1bVRhbmssXHJcblxyXG4gICAgQnVpbGRpbmdUeXBlLnJvYm90aWNzRmFjdG9yeSxcclxuICAgIEJ1aWxkaW5nVHlwZS5zaGlweWFyZCxcclxuICAgIEJ1aWxkaW5nVHlwZS5sdW5hckJhc2UsXHJcbiAgICBCdWlsZGluZ1R5cGUuc2Vuc29yUGhhbGFueCxcclxuICAgIEJ1aWxkaW5nVHlwZS5qdW1wR2F0ZSxcclxuXTtcclxuXHJcblxyXG5leHBvcnQgY29uc3QgQnVpbGRpbmdzQnlUeXBlOiBSZWNvcmQ8QnVpbGRpbmdUeXBlLCBCdWlsZGluZz4gPSB7XHJcbiAgICBbQnVpbGRpbmdUeXBlLm1ldGFsTWluZV06IE1ldGFsTWluZSxcclxuICAgIFtCdWlsZGluZ1R5cGUuY3J5c3RhbE1pbmVdOiBDcnlzdGFsTWluZSxcclxuICAgIFtCdWlsZGluZ1R5cGUuZGV1dGVyaXVtU3ludGhlc2l6ZXJdOiBEZXV0ZXJpdW1TeW50aGVzaXplcixcclxuXHJcbiAgICBbQnVpbGRpbmdUeXBlLm1ldGFsU3RvcmFnZV06IE1ldGFsU3RvcmFnZSxcclxuICAgIFtCdWlsZGluZ1R5cGUuY3J5c3RhbFN0b3JhZ2VdOiBDcnlzdGFsU3RvcmFnZSxcclxuICAgIFtCdWlsZGluZ1R5cGUuZGV1dGVyaXVtVGFua106IERldXRlcml1bVRhbmssXHJcblxyXG4gICAgW0J1aWxkaW5nVHlwZS5zb2xhclBsYW50XTogU29sYXJQbGFudCxcclxuICAgIFtCdWlsZGluZ1R5cGUuZnVzaW9uUmVhY3Rvcl06IEZ1c2lvblJlYWN0b3IsXHJcblxyXG4gICAgW0J1aWxkaW5nVHlwZS5yb2JvdGljc0ZhY3RvcnldOiBSb2JvdGljc0ZhY3RvcnksXHJcbiAgICBbQnVpbGRpbmdUeXBlLnNoaXB5YXJkXTogU2hpcHlhcmQsXHJcbiAgICBbQnVpbGRpbmdUeXBlLnJlc2VhcmNoTGFiXTogUmVzZWFyY2hMYWIsXHJcbiAgICBbQnVpbGRpbmdUeXBlLmFsbGlhbmNlRGVwb3RdOiBBbGxpYW5jZURlcG90LFxyXG4gICAgW0J1aWxkaW5nVHlwZS5taXNzaWxlU2lsb106IE1pc3NpbGVTaWxvLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5uYW5pdGVGYWN0b3J5XTogTmFuaXRlRmFjdG9yeSxcclxuICAgIFtCdWlsZGluZ1R5cGUudGVycmFmb3JtZXJdOiBUZXJyYWZvcm1lcixcclxuICAgIFtCdWlsZGluZ1R5cGUuc3BhY2VEb2NrXTogU3BhY2VEb2NrLFxyXG5cclxuICAgIFtCdWlsZGluZ1R5cGUubHVuYXJCYXNlXTogTHVuYXJCYXNlLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5zZW5zb3JQaGFsYW54XTogU2Vuc29yUGhhbGFueCxcclxuICAgIFtCdWlsZGluZ1R5cGUuanVtcEdhdGVdOiBKdW1wR2F0ZSxcclxufTsiLCJleHBvcnQgZnVuY3Rpb24gcGFyc2VJbnRTYWZlKHRleHQ6IHN0cmluZywgcmFkaXggPSAxMCk6IG51bWJlciB7XHJcbiAgICBjb25zdCB2YWx1ZSA9IHBhcnNlSW50KHRleHQsIHJhZGl4KTtcclxuICAgIGlmKGlzTmFOKHZhbHVlKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJyR7dGV4dH0nIGlzIG5vdCBhIHZhbGlkIGludGVnZXIgdmFsdWVgKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUZsb2F0U2FmZSh0ZXh0OiBzdHJpbmcpOiBudW1iZXIge1xyXG4gICAgY29uc3QgdmFsdWUgPSBwYXJzZUZsb2F0KHRleHQpO1xyXG4gICAgaWYoaXNOYU4odmFsdWUpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAnJHt0ZXh0fScgaXMgbm90IGEgdmFsaWQgaW50ZWdlciB2YWx1ZWApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB2YWx1ZTtcclxufSIsImltcG9ydCB7IENvc3QgfSBmcm9tICcuLi9jb21tb24vQ29zdCc7XHJcbmltcG9ydCB7IFNoaXBUeXBlIH0gZnJvbSAnLi9TaGlwVHlwZSc7XHJcblxyXG4vL1JFRkFDVE9SOiBtZXRob2RzIHRvIGdldHRlcnNcclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFNoaXAge1xyXG4gICAgcHVibGljIGFic3RyYWN0IGdldCB0eXBlKCk6IFNoaXBUeXBlO1xyXG4gICAgcHVibGljIGFic3RyYWN0IGdldCBjb3N0KCk6IENvc3Q7XHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgYmFzZUh1bGwoKTogbnVtYmVyO1xyXG4gICAgcHVibGljIGFic3RyYWN0IGJhc2VTaGllbGQoKTogbnVtYmVyO1xyXG4gICAgcHVibGljIGFic3RyYWN0IGJhc2VEYW1hZ2UoKTogbnVtYmVyO1xyXG4gICAgcHVibGljIGFic3RyYWN0IGJhc2VTcGVlZCgpOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgYmFzZUNhcmdvQ2FwYWNpdHkoKTogbnVtYmVyO1xyXG4gICAgcHVibGljIGFic3RyYWN0IGZ1ZWxDb25zdW1wdGlvbigpOiBudW1iZXI7XHJcbiAgICAvL1RPRE86IFJhcGlkZmlyZVxyXG4gICAgLy9UT0RPOiB0eXBlIG9mIGRyaXZlIGRlcGVuZGluZyBvbiBkcml2ZSByZXNlYXJjaCBsZXZlbHNcclxufSIsImV4cG9ydCBlbnVtIFNoaXBUeXBlIHtcclxuICAgIHNtYWxsQ2FyZ28gPSAyMDIsXHJcbiAgICBsYXJnZUNhcmdvID0gMjAzLFxyXG4gICAgbGlnaHRGaWdodGVyID0gMjA0LFxyXG4gICAgaGVhdnlGaWdodGVyID0gMjA1LFxyXG4gICAgY3J1aXNlciA9IDIwNixcclxuICAgIGJhdHRsZXNoaXAgPSAyMDcsXHJcbiAgICBjb2xvbnlTaGlwID0gMjA4LFxyXG4gICAgcmVjeWNsZXIgPSAyMDksXHJcbiAgICBlc3Bpb25hZ2VQcm9iZSA9IDIxMCxcclxuICAgIGJvbWJlciA9IDIxMSxcclxuICAgIHNvbGFyU2F0ZWxsaXRlID0gMjEyLFxyXG4gICAgZGVzdHJveWVyID0gMjEzLFxyXG4gICAgZGVhdGhTdGFyID0gMjE0LFxyXG4gICAgYmF0dGxlY3J1aXNlciA9IDIxNSxcclxuICAgIGNyYXdsZXIgPSAyMTcsXHJcbiAgICByZWFwZXIgPSAyMTgsXHJcbiAgICBwYXRoZmluZGVyID0gMjE5LFxyXG59XHJcbmV4cG9ydCB0eXBlIFN0YXRpb25hcnlTaGlwVHlwZSA9IFNoaXBUeXBlLmNyYXdsZXIgfCBTaGlwVHlwZS5zb2xhclNhdGVsbGl0ZTtcclxuZXhwb3J0IHR5cGUgTm9uU3RhdGlvbmFyeVNoaXBUeXBlID0gRXhjbHVkZTxTaGlwVHlwZSwgU3RhdGlvbmFyeVNoaXBUeXBlPjtcclxuXHJcbmV4cG9ydCB0eXBlIFBsYW5ldFNoaXBUeXBlID0gU2hpcFR5cGU7XHJcbmV4cG9ydCB0eXBlIE1vb25TaGlwVHlwZSA9IEV4Y2x1ZGU8U2hpcFR5cGUsIFNoaXBUeXBlLmNyYXdsZXI+O1xyXG5cclxuZXhwb3J0IHR5cGUgTWlsaXRhcnlTaGlwVHlwZSA9IChcclxuICAgIHwgU2hpcFR5cGUubGlnaHRGaWdodGVyXHJcbiAgICB8IFNoaXBUeXBlLmhlYXZ5RmlnaHRlclxyXG4gICAgfCBTaGlwVHlwZS5jcnVpc2VyXHJcbiAgICB8IFNoaXBUeXBlLmJhdHRsZXNoaXBcclxuICAgIHwgU2hpcFR5cGUuYmF0dGxlY3J1aXNlclxyXG4gICAgfCBTaGlwVHlwZS5ib21iZXJcclxuICAgIHwgU2hpcFR5cGUuZGVzdHJveWVyXHJcbiAgICB8IFNoaXBUeXBlLmRlYXRoU3RhclxyXG4gICAgfCBTaGlwVHlwZS5yZWFwZXJcclxuICAgIHwgU2hpcFR5cGUucGF0aGZpbmRlclxyXG4gICAgfCBTaGlwVHlwZS5jcmF3bGVyIC8vIHllcywgaXQncyBjb3VudGVkIHRvIHRoZSBtaWxpdGFyeSBzaGlwc1xyXG4pO1xyXG5leHBvcnQgdHlwZSBDaXZpbFNoaXBUeXBlID0gKFxyXG4gICAgfCBTaGlwVHlwZS5zbWFsbENhcmdvXHJcbiAgICB8IFNoaXBUeXBlLmxhcmdlQ2FyZ29cclxuICAgIHwgU2hpcFR5cGUuY29sb255U2hpcFxyXG4gICAgfCBTaGlwVHlwZS5yZWN5Y2xlclxyXG4gICAgfCBTaGlwVHlwZS5lc3Bpb25hZ2VQcm9iZVxyXG4gICAgfCBTaGlwVHlwZS5zb2xhclNhdGVsbGl0ZVxyXG4pOyIsImltcG9ydCB7IENvc3QgfSBmcm9tIFwiLi4vY29tbW9uL0Nvc3RcIjtcclxuaW1wb3J0IHsgU2hpcCB9IGZyb20gXCIuL1NoaXBcIjtcclxuaW1wb3J0IHsgU2hpcFR5cGUgfSBmcm9tIFwiLi9TaGlwVHlwZVwiO1xyXG5cclxuY2xhc3MgQmF0dGxlY3J1aXNlckNsYXNzIGV4dGVuZHMgU2hpcCB7XHJcblxyXG4gICAgcHVibGljIGdldCB0eXBlKCkgeyBcclxuICAgICAgICByZXR1cm4gU2hpcFR5cGUuYmF0dGxlY3J1aXNlcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGNvc3QoKTogQ29zdCB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbWV0YWw6IDMwXzAwMCxcclxuICAgICAgICAgICAgY3J5c3RhbDogNDBfMDAwLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW06IDE1XzAwMCxcclxuICAgICAgICAgICAgZW5lcmd5OiAwLCAgICAgICAgICAgIFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VIdWxsKCk6IG51bWJlciB7XHJcbiAgICAgICAgIHJldHVybiA3MF8wMDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VTaGllbGQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gNDAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlRGFtYWdlKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDcwMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZVNwZWVkKCk6IG51bWJlciB7XHJcbiAgICAgICAgIHJldHVybiAxMF8wMDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VDYXJnb0NhcGFjaXR5KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDc1MDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZnVlbENvbnN1bXB0aW9uKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDI1MDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEJhdHRsZWNydWlzZXIgPSBuZXcgQmF0dGxlY3J1aXNlckNsYXNzKCk7IiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5pbXBvcnQgeyBTaGlwIH0gZnJvbSBcIi4vU2hpcFwiO1xyXG5pbXBvcnQgeyBTaGlwVHlwZSB9IGZyb20gXCIuL1NoaXBUeXBlXCI7XHJcblxyXG5jbGFzcyBCYXR0bGVzaGlwQ2xhc3MgZXh0ZW5kcyBTaGlwIHtcclxuXHJcbiAgICBwdWJsaWMgZ2V0IHR5cGUoKSB7IFxyXG4gICAgICAgIHJldHVybiBTaGlwVHlwZS5iYXR0bGVzaGlwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgY29zdCgpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogNDVfMDAwLFxyXG4gICAgICAgICAgICBjcnlzdGFsOiAxNV8wMDAsXHJcbiAgICAgICAgICAgIGRldXRlcml1bTogMCxcclxuICAgICAgICAgICAgZW5lcmd5OiAwLCAgICAgICAgICAgIFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VIdWxsKCk6IG51bWJlciB7XHJcbiAgICAgICAgIHJldHVybiA2MF8wMDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VTaGllbGQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gMjAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlRGFtYWdlKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDFfMDAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlU3BlZWQoKTogbnVtYmVyIHtcclxuICAgICAgICAgcmV0dXJuIDEwXzAwMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZUNhcmdvQ2FwYWNpdHkoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gMV81MDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGZ1ZWxDb25zdW1wdGlvbigpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiA1MDA7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBCYXR0bGVzaGlwID0gbmV3IEJhdHRsZXNoaXBDbGFzcygpOyIsImltcG9ydCB7IENvc3QgfSBmcm9tIFwiLi4vY29tbW9uL0Nvc3RcIjtcclxuaW1wb3J0IHsgU2hpcCB9IGZyb20gXCIuL1NoaXBcIjtcclxuaW1wb3J0IHsgU2hpcFR5cGUgfSBmcm9tIFwiLi9TaGlwVHlwZVwiO1xyXG5cclxuY2xhc3MgQm9tYmVyQ2xhc3MgZXh0ZW5kcyBTaGlwIHtcclxuXHJcbiAgICBwdWJsaWMgZ2V0IHR5cGUoKSB7IFxyXG4gICAgICAgIHJldHVybiBTaGlwVHlwZS5ib21iZXI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBjb3N0KCk6IENvc3Qge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1ldGFsOiA1MF8wMDAsXHJcbiAgICAgICAgICAgIGNyeXN0YWw6IDI1XzAwMCxcclxuICAgICAgICAgICAgZGV1dGVyaXVtOiAxNV8wMDAsXHJcbiAgICAgICAgICAgIGVuZXJneTogMCwgICAgICAgICAgICBcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlSHVsbCgpOiBudW1iZXIge1xyXG4gICAgICAgICByZXR1cm4gNzVfMDAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlU2hpZWxkKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDUwMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZURhbWFnZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAxXzAwMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZVNwZWVkKCk6IG51bWJlciB7XHJcbiAgICAgICAgIHJldHVybiA1XzAwMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZUNhcmdvQ2FwYWNpdHkoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gNTAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBmdWVsQ29uc3VtcHRpb24oKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gNzAwO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgQm9tYmVyID0gbmV3IEJvbWJlckNsYXNzKCk7IiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5pbXBvcnQgeyBTaGlwIH0gZnJvbSBcIi4vU2hpcFwiO1xyXG5pbXBvcnQgeyBTaGlwVHlwZSB9IGZyb20gXCIuL1NoaXBUeXBlXCI7XHJcblxyXG5jbGFzcyBDb2xvbnlTaGlwQ2xhc3MgZXh0ZW5kcyBTaGlwIHtcclxuXHJcbiAgICBwdWJsaWMgZ2V0IHR5cGUoKSB7IFxyXG4gICAgICAgIHJldHVybiBTaGlwVHlwZS5jb2xvbnlTaGlwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgY29zdCgpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogMTBfMDAwLFxyXG4gICAgICAgICAgICBjcnlzdGFsOiAyMF8wMDAsXHJcbiAgICAgICAgICAgIGRldXRlcml1bTogMTBfMDAwLFxyXG4gICAgICAgICAgICBlbmVyZ3k6IDAsICAgICAgICAgICAgXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZUh1bGwoKTogbnVtYmVyIHtcclxuICAgICAgICAgcmV0dXJuIDMwXzAwMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZVNoaWVsZCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAxMDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VEYW1hZ2UoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gNTA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VTcGVlZCgpOiBudW1iZXIge1xyXG4gICAgICAgICByZXR1cm4gMl81MDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VDYXJnb0NhcGFjaXR5KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDdfNTAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBmdWVsQ29uc3VtcHRpb24oKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gMV8wMDA7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBDb2xvbnlTaGlwID0gbmV3IENvbG9ueVNoaXBDbGFzcygpOyIsImltcG9ydCB7IENvc3QgfSBmcm9tIFwiLi4vY29tbW9uL0Nvc3RcIjtcclxuaW1wb3J0IHsgU2hpcCB9IGZyb20gXCIuL1NoaXBcIjtcclxuaW1wb3J0IHsgU2hpcFR5cGUgfSBmcm9tIFwiLi9TaGlwVHlwZVwiO1xyXG5cclxuY2xhc3MgQ3Jhd2xlckNsYXNzIGV4dGVuZHMgU2hpcCB7XHJcblxyXG4gICAgcHVibGljIGdldCB0eXBlKCkgeyBcclxuICAgICAgICByZXR1cm4gU2hpcFR5cGUuY3Jhd2xlcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGNvc3QoKTogQ29zdCB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbWV0YWw6IDJfMDAwLFxyXG4gICAgICAgICAgICBjcnlzdGFsOiAyXzAwMCxcclxuICAgICAgICAgICAgZGV1dGVyaXVtOiAxXzAwMCxcclxuICAgICAgICAgICAgZW5lcmd5OiAwLCAgICAgICAgICAgIFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VIdWxsKCk6IG51bWJlciB7XHJcbiAgICAgICAgIHJldHVybiA0XzAwMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZVNoaWVsZCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAxO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlRGFtYWdlKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDE7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VTcGVlZCgpOiBudW1iZXIge1xyXG4gICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZUNhcmdvQ2FwYWNpdHkoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZnVlbENvbnN1bXB0aW9uKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBDcmF3bGVyID0gbmV3IENyYXdsZXJDbGFzcygpOyIsImltcG9ydCB7IENvc3QgfSBmcm9tIFwiLi4vY29tbW9uL0Nvc3RcIjtcclxuaW1wb3J0IHsgU2hpcCB9IGZyb20gXCIuL1NoaXBcIjtcclxuaW1wb3J0IHsgU2hpcFR5cGUgfSBmcm9tIFwiLi9TaGlwVHlwZVwiO1xyXG5cclxuY2xhc3MgQ3J1aXNlckNsYXNzIGV4dGVuZHMgU2hpcCB7XHJcblxyXG4gICAgcHVibGljIGdldCB0eXBlKCkgeyBcclxuICAgICAgICByZXR1cm4gU2hpcFR5cGUuY3J1aXNlcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGNvc3QoKTogQ29zdCB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbWV0YWw6IDIwXzAwMCxcclxuICAgICAgICAgICAgY3J5c3RhbDogN18wMDAsXHJcbiAgICAgICAgICAgIGRldXRlcml1bTogMl8wMDAsXHJcbiAgICAgICAgICAgIGVuZXJneTogMCwgICAgICAgICAgICBcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlSHVsbCgpOiBudW1iZXIge1xyXG4gICAgICAgICByZXR1cm4gMjdfMDAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlU2hpZWxkKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDUwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlRGFtYWdlKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDQwMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZVNwZWVkKCk6IG51bWJlciB7XHJcbiAgICAgICAgIHJldHVybiAxNV8wMDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VDYXJnb0NhcGFjaXR5KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDgwMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZnVlbENvbnN1bXB0aW9uKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDMwMDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IENydWlzZXIgPSBuZXcgQ3J1aXNlckNsYXNzKCk7IiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5pbXBvcnQgeyBTaGlwIH0gZnJvbSBcIi4vU2hpcFwiO1xyXG5pbXBvcnQgeyBTaGlwVHlwZSB9IGZyb20gXCIuL1NoaXBUeXBlXCI7XHJcblxyXG5jbGFzcyBEZWF0aFN0YXJDbGFzcyBleHRlbmRzIFNoaXAge1xyXG5cclxuICAgIHB1YmxpYyBnZXQgdHlwZSgpIHsgXHJcbiAgICAgICAgcmV0dXJuIFNoaXBUeXBlLmRlYXRoU3RhcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGNvc3QoKTogQ29zdCB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbWV0YWw6IDVfMDAwXzAwMCxcclxuICAgICAgICAgICAgY3J5c3RhbDogNF8wMDBfMDAwLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW06IDFfMDAwXzAwMCxcclxuICAgICAgICAgICAgZW5lcmd5OiAwLCAgICAgICAgICAgIFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VIdWxsKCk6IG51bWJlciB7XHJcbiAgICAgICAgIHJldHVybiA5XzAwMF8wMDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VTaGllbGQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gNTBfMDAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlRGFtYWdlKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDIwMF8wMDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VTcGVlZCgpOiBudW1iZXIge1xyXG4gICAgICAgICByZXR1cm4gMTAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlQ2FyZ29DYXBhY2l0eSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAxXzAwMF8wMDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGZ1ZWxDb25zdW1wdGlvbigpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAxO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgRGVhdGhTdGFyID0gbmV3IERlYXRoU3RhckNsYXNzKCk7IiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5pbXBvcnQgeyBTaGlwIH0gZnJvbSBcIi4vU2hpcFwiO1xyXG5pbXBvcnQgeyBTaGlwVHlwZSB9IGZyb20gXCIuL1NoaXBUeXBlXCI7XHJcblxyXG5jbGFzcyBEZXN0cm95ZXJDbGFzcyBleHRlbmRzIFNoaXAge1xyXG5cclxuICAgIHB1YmxpYyBnZXQgdHlwZSgpIHsgXHJcbiAgICAgICAgcmV0dXJuIFNoaXBUeXBlLmRlc3Ryb3llcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGNvc3QoKTogQ29zdCB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbWV0YWw6IDYwXzAwMCxcclxuICAgICAgICAgICAgY3J5c3RhbDogNTBfMDAwLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW06IDE1XzAwMCxcclxuICAgICAgICAgICAgZW5lcmd5OiAwLCAgICAgICAgICAgIFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VIdWxsKCk6IG51bWJlciB7XHJcbiAgICAgICAgIHJldHVybiAxMTBfMDAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlU2hpZWxkKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDUwMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZURhbWFnZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAyXzAwMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZVNwZWVkKCk6IG51bWJlciB7XHJcbiAgICAgICAgIHJldHVybiA1XzAwMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZUNhcmdvQ2FwYWNpdHkoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gMl8wMDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGZ1ZWxDb25zdW1wdGlvbigpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAxXzAwMDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IERlc3Ryb3llciA9IG5ldyBEZXN0cm95ZXJDbGFzcygpOyIsImltcG9ydCB7IENvc3QgfSBmcm9tIFwiLi4vY29tbW9uL0Nvc3RcIjtcclxuaW1wb3J0IHsgU2hpcCB9IGZyb20gXCIuL1NoaXBcIjtcclxuaW1wb3J0IHsgU2hpcFR5cGUgfSBmcm9tIFwiLi9TaGlwVHlwZVwiO1xyXG5cclxuY2xhc3MgRXNwaW9uYWdlUHJvYmVDbGFzcyBleHRlbmRzIFNoaXAge1xyXG5cclxuICAgIHB1YmxpYyBnZXQgdHlwZSgpIHsgXHJcbiAgICAgICAgcmV0dXJuIFNoaXBUeXBlLmVzcGlvbmFnZVByb2JlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgY29zdCgpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogMCxcclxuICAgICAgICAgICAgY3J5c3RhbDogMV8wMDAsXHJcbiAgICAgICAgICAgIGRldXRlcml1bTogMCxcclxuICAgICAgICAgICAgZW5lcmd5OiAwLCAgICAgICAgICAgIFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VIdWxsKCk6IG51bWJlciB7XHJcbiAgICAgICAgIHJldHVybiAxXzAwMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZVNoaWVsZCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlRGFtYWdlKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VTcGVlZCgpOiBudW1iZXIge1xyXG4gICAgICAgICByZXR1cm4gMTAwXzAwMF8wMDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VDYXJnb0NhcGFjaXR5KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDA7IC8vVE9ETzogZGVwZW5kcyBvbiBzZXJ2ZXIgc2V0dGluZ3NcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZnVlbENvbnN1bXB0aW9uKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDE7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBFc3Bpb25hZ2VQcm9iZSA9IG5ldyBFc3Bpb25hZ2VQcm9iZUNsYXNzKCk7IiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5pbXBvcnQgeyBTaGlwIH0gZnJvbSBcIi4vU2hpcFwiO1xyXG5pbXBvcnQgeyBTaGlwVHlwZSB9IGZyb20gXCIuL1NoaXBUeXBlXCI7XHJcblxyXG5jbGFzcyBIZWF2eUZpZ2h0ZXJDbGFzcyBleHRlbmRzIFNoaXAge1xyXG5cclxuICAgIHB1YmxpYyBnZXQgdHlwZSgpIHsgXHJcbiAgICAgICAgcmV0dXJuIFNoaXBUeXBlLmhlYXZ5RmlnaHRlcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGNvc3QoKTogQ29zdCB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbWV0YWw6IDZfMDAwLFxyXG4gICAgICAgICAgICBjcnlzdGFsOiA0XzAwMCxcclxuICAgICAgICAgICAgZGV1dGVyaXVtOiAwLFxyXG4gICAgICAgICAgICBlbmVyZ3k6IDAsICAgICAgICAgICAgXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZUh1bGwoKTogbnVtYmVyIHtcclxuICAgICAgICAgcmV0dXJuIDEwXzAwMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZVNoaWVsZCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAyNTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZURhbWFnZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAxNTA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VTcGVlZCgpOiBudW1iZXIge1xyXG4gICAgICAgICByZXR1cm4gMTBfMDAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlQ2FyZ29DYXBhY2l0eSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAxMDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGZ1ZWxDb25zdW1wdGlvbigpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiA3NTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEhlYXZ5RmlnaHRlciA9IG5ldyBIZWF2eUZpZ2h0ZXJDbGFzcygpOyIsImltcG9ydCB7IENvc3QgfSBmcm9tIFwiLi4vY29tbW9uL0Nvc3RcIjtcclxuaW1wb3J0IHsgU2hpcCB9IGZyb20gXCIuL1NoaXBcIjtcclxuaW1wb3J0IHsgU2hpcFR5cGUgfSBmcm9tIFwiLi9TaGlwVHlwZVwiO1xyXG5cclxuY2xhc3MgTGFyZ2VDYXJnb0NsYXNzIGV4dGVuZHMgU2hpcCB7XHJcblxyXG4gICAgcHVibGljIGdldCB0eXBlKCkgeyBcclxuICAgICAgICByZXR1cm4gU2hpcFR5cGUubGFyZ2VDYXJnbztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGNvc3QoKTogQ29zdCB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbWV0YWw6IDZfMDAwLFxyXG4gICAgICAgICAgICBjcnlzdGFsOiA2XzAwMCxcclxuICAgICAgICAgICAgZGV1dGVyaXVtOiAwLFxyXG4gICAgICAgICAgICBlbmVyZ3k6IDAsICAgICAgICAgICAgXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZUh1bGwoKTogbnVtYmVyIHtcclxuICAgICAgICAgcmV0dXJuIDEyXzAwMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZVNoaWVsZCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAyNTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZURhbWFnZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiA1O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlU3BlZWQoKTogbnVtYmVyIHtcclxuICAgICAgICAgcmV0dXJuIDdfNTAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlQ2FyZ29DYXBhY2l0eSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAyNV8wMDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGZ1ZWxDb25zdW1wdGlvbigpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiA1MDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IExhcmdlQ2FyZ28gPSBuZXcgTGFyZ2VDYXJnb0NsYXNzKCk7IiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5pbXBvcnQgeyBTaGlwIH0gZnJvbSBcIi4vU2hpcFwiO1xyXG5pbXBvcnQgeyBTaGlwVHlwZSB9IGZyb20gXCIuL1NoaXBUeXBlXCI7XHJcblxyXG5jbGFzcyBMaWdodEZpZ2h0ZXJDbGFzcyBleHRlbmRzIFNoaXAge1xyXG5cclxuICAgIHB1YmxpYyBnZXQgdHlwZSgpIHsgXHJcbiAgICAgICAgcmV0dXJuIFNoaXBUeXBlLmxpZ2h0RmlnaHRlcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGNvc3QoKTogQ29zdCB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbWV0YWw6IDNfMDAwLFxyXG4gICAgICAgICAgICBjcnlzdGFsOiAxXzAwMCxcclxuICAgICAgICAgICAgZGV1dGVyaXVtOiAwLFxyXG4gICAgICAgICAgICBlbmVyZ3k6IDAsICAgICAgICAgICAgXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZUh1bGwoKTogbnVtYmVyIHtcclxuICAgICAgICAgcmV0dXJuIDRfMDAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlU2hpZWxkKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDEwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlRGFtYWdlKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDUwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlU3BlZWQoKTogbnVtYmVyIHtcclxuICAgICAgICAgcmV0dXJuIDEyXzUwMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZUNhcmdvQ2FwYWNpdHkoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gNTA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGZ1ZWxDb25zdW1wdGlvbigpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAyMDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IExpZ2h0RmlnaHRlciA9IG5ldyBMaWdodEZpZ2h0ZXJDbGFzcygpOyIsImltcG9ydCB7IENvc3QgfSBmcm9tIFwiLi4vY29tbW9uL0Nvc3RcIjtcclxuaW1wb3J0IHsgU2hpcCB9IGZyb20gXCIuL1NoaXBcIjtcclxuaW1wb3J0IHsgU2hpcFR5cGUgfSBmcm9tIFwiLi9TaGlwVHlwZVwiO1xyXG5cclxuY2xhc3MgUGF0aGZpbmRlckNsYXNzIGV4dGVuZHMgU2hpcCB7XHJcblxyXG4gICAgcHVibGljIGdldCB0eXBlKCkgeyBcclxuICAgICAgICByZXR1cm4gU2hpcFR5cGUucGF0aGZpbmRlcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGNvc3QoKTogQ29zdCB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbWV0YWw6IDhfMDAwLFxyXG4gICAgICAgICAgICBjcnlzdGFsOiAxNV8wMDAsXHJcbiAgICAgICAgICAgIGRldXRlcml1bTogOF8wMDAsXHJcbiAgICAgICAgICAgIGVuZXJneTogMCwgICAgICAgICAgICBcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlSHVsbCgpOiBudW1iZXIge1xyXG4gICAgICAgICByZXR1cm4gMjNfMDAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlU2hpZWxkKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDEwMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZURhbWFnZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAyMDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VTcGVlZCgpOiBudW1iZXIge1xyXG4gICAgICAgICByZXR1cm4gMTJfMDAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlQ2FyZ29DYXBhY2l0eSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAxMF8wMDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGZ1ZWxDb25zdW1wdGlvbigpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAzMDA7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBQYXRoZmluZGVyID0gbmV3IFBhdGhmaW5kZXJDbGFzcygpOyIsImltcG9ydCB7IENvc3QgfSBmcm9tIFwiLi4vY29tbW9uL0Nvc3RcIjtcclxuaW1wb3J0IHsgU2hpcCB9IGZyb20gXCIuL1NoaXBcIjtcclxuaW1wb3J0IHsgU2hpcFR5cGUgfSBmcm9tIFwiLi9TaGlwVHlwZVwiO1xyXG5cclxuY2xhc3MgUmVhcGVyQ2xhc3MgZXh0ZW5kcyBTaGlwIHtcclxuXHJcbiAgICBwdWJsaWMgZ2V0IHR5cGUoKSB7IFxyXG4gICAgICAgIHJldHVybiBTaGlwVHlwZS5yZWFwZXI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBjb3N0KCk6IENvc3Qge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1ldGFsOiA4NV8wMDAsXHJcbiAgICAgICAgICAgIGNyeXN0YWw6IDU1XzAwMCxcclxuICAgICAgICAgICAgZGV1dGVyaXVtOiAyMF8wMDAsXHJcbiAgICAgICAgICAgIGVuZXJneTogMCwgICAgICAgICAgICBcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlSHVsbCgpOiBudW1iZXIge1xyXG4gICAgICAgICByZXR1cm4gMTQwXzAwMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZVNoaWVsZCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiA3MDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VEYW1hZ2UoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gMl84MDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VTcGVlZCgpOiBudW1iZXIge1xyXG4gICAgICAgICByZXR1cm4gN18wMDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VDYXJnb0NhcGFjaXR5KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDEwXzAwMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZnVlbENvbnN1bXB0aW9uKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDFfMTAwO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgUmVhcGVyID0gbmV3IFJlYXBlckNsYXNzKCk7IiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5pbXBvcnQgeyBTaGlwIH0gZnJvbSBcIi4vU2hpcFwiO1xyXG5pbXBvcnQgeyBTaGlwVHlwZSB9IGZyb20gXCIuL1NoaXBUeXBlXCI7XHJcblxyXG5jbGFzcyBSZWN5Y2xlckNsYXNzIGV4dGVuZHMgU2hpcCB7XHJcblxyXG4gICAgcHVibGljIGdldCB0eXBlKCkgeyBcclxuICAgICAgICByZXR1cm4gU2hpcFR5cGUucmVjeWNsZXI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBjb3N0KCk6IENvc3Qge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1ldGFsOiAxMF8wMDAsXHJcbiAgICAgICAgICAgIGNyeXN0YWw6IDZfMDAwLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW06IDJfMDAwLFxyXG4gICAgICAgICAgICBlbmVyZ3k6IDAsICAgICAgICAgICAgXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZUh1bGwoKTogbnVtYmVyIHtcclxuICAgICAgICAgcmV0dXJuIDE2XzAwMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZVNoaWVsZCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAxMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZURhbWFnZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAxO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlU3BlZWQoKTogbnVtYmVyIHtcclxuICAgICAgICAgcmV0dXJuIDZfMDAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlQ2FyZ29DYXBhY2l0eSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAyMF8wMDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGZ1ZWxDb25zdW1wdGlvbigpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiA5MDA7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBSZWN5Y2xlciA9IG5ldyBSZWN5Y2xlckNsYXNzKCk7IiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5pbXBvcnQgeyBTaGlwIH0gZnJvbSBcIi4vU2hpcFwiO1xyXG5pbXBvcnQgeyBTaGlwVHlwZSB9IGZyb20gXCIuL1NoaXBUeXBlXCI7XHJcblxyXG5jbGFzcyBTbWFsbENhcmdvQ2xhc3MgZXh0ZW5kcyBTaGlwIHtcclxuXHJcbiAgICBwdWJsaWMgZ2V0IHR5cGUoKSB7IFxyXG4gICAgICAgIHJldHVybiBTaGlwVHlwZS5zbWFsbENhcmdvO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgY29zdCgpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogMl8wMDAsXHJcbiAgICAgICAgICAgIGNyeXN0YWw6IDJfMDAwLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW06IDAsXHJcbiAgICAgICAgICAgIGVuZXJneTogMCwgICAgICAgICAgICBcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlSHVsbCgpOiBudW1iZXIge1xyXG4gICAgICAgICByZXR1cm4gNF8wMDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VTaGllbGQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gMTA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VEYW1hZ2UoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gNTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZVNwZWVkKCk6IG51bWJlciB7XHJcbiAgICAgICAgIHJldHVybiAxMF8wMDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VDYXJnb0NhcGFjaXR5KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDVfMDAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBmdWVsQ29uc3VtcHRpb24oKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gMjA7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTbWFsbENhcmdvID0gbmV3IFNtYWxsQ2FyZ29DbGFzcygpOyIsImltcG9ydCB7IENvc3QgfSBmcm9tIFwiLi4vY29tbW9uL0Nvc3RcIjtcclxuaW1wb3J0IHsgU2hpcCB9IGZyb20gXCIuL1NoaXBcIjtcclxuaW1wb3J0IHsgU2hpcFR5cGUgfSBmcm9tIFwiLi9TaGlwVHlwZVwiO1xyXG5cclxuY2xhc3MgU29sYXJTYXRlbGxpdGVDbGFzcyBleHRlbmRzIFNoaXAge1xyXG5cclxuICAgIHB1YmxpYyBnZXQgdHlwZSgpIHsgXHJcbiAgICAgICAgcmV0dXJuIFNoaXBUeXBlLnNvbGFyU2F0ZWxsaXRlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgY29zdCgpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogMCxcclxuICAgICAgICAgICAgY3J5c3RhbDogMl8wMDAsXHJcbiAgICAgICAgICAgIGRldXRlcml1bTogNTAwLFxyXG4gICAgICAgICAgICBlbmVyZ3k6IDAsICAgICAgICAgICAgXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZUh1bGwoKTogbnVtYmVyIHtcclxuICAgICAgICAgcmV0dXJuIDJfMDAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlU2hpZWxkKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIDE7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJhc2VEYW1hZ2UoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gMTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmFzZVNwZWVkKCk6IG51bWJlciB7XHJcbiAgICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYXNlQ2FyZ29DYXBhY2l0eSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBmdWVsQ29uc3VtcHRpb24oKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNvbGFyU2F0ZWxsaXRlID0gbmV3IFNvbGFyU2F0ZWxsaXRlQ2xhc3MoKTsiLCJpbXBvcnQgeyBCYXR0bGVjcnVpc2VyIH0gZnJvbSBcIi4vQmF0dGxlY3J1aXNlclwiO1xyXG5pbXBvcnQgeyBCYXR0bGVzaGlwIH0gZnJvbSBcIi4vQmF0dGxlc2hpcFwiO1xyXG5pbXBvcnQgeyBCb21iZXIgfSBmcm9tIFwiLi9Cb21iZXJcIjtcclxuaW1wb3J0IHsgQ29sb255U2hpcCB9IGZyb20gXCIuL0NvbG9ueVNoaXBcIjtcclxuaW1wb3J0IHsgQ3Jhd2xlciB9IGZyb20gXCIuL0NyYXdsZXJcIjtcclxuaW1wb3J0IHsgQ3J1aXNlciB9IGZyb20gXCIuL0NydWlzZXJcIjtcclxuaW1wb3J0IHsgRGVhdGhTdGFyIH0gZnJvbSBcIi4vRGVhdGhTdGFyXCI7XHJcbmltcG9ydCB7IERlc3Ryb3llciB9IGZyb20gXCIuL0Rlc3Ryb3llclwiO1xyXG5pbXBvcnQgeyBFc3Bpb25hZ2VQcm9iZSB9IGZyb20gXCIuL0VzcGlvbmFnZVByb2JlXCI7XHJcbmltcG9ydCB7IEhlYXZ5RmlnaHRlciB9IGZyb20gXCIuL0hlYXZ5RmlnaHRlclwiO1xyXG5pbXBvcnQgeyBMYXJnZUNhcmdvIH0gZnJvbSBcIi4vTGFyZ2VDYXJnb1wiO1xyXG5pbXBvcnQgeyBMaWdodEZpZ2h0ZXIgfSBmcm9tIFwiLi9MaWdodEZpZ2h0ZXJcIjtcclxuaW1wb3J0IHsgUGF0aGZpbmRlciB9IGZyb20gXCIuL1BhdGhmaW5kZXJcIjtcclxuaW1wb3J0IHsgUmVhcGVyIH0gZnJvbSBcIi4vUmVhcGVyXCI7XHJcbmltcG9ydCB7IFJlY3ljbGVyIH0gZnJvbSBcIi4vUmVjeWNsZXJcIjtcclxuaW1wb3J0IHsgU2hpcCB9IGZyb20gXCIuL1NoaXBcIjtcclxuaW1wb3J0IHsgQ2l2aWxTaGlwVHlwZSwgTWlsaXRhcnlTaGlwVHlwZSwgTW9vblNoaXBUeXBlLCBOb25TdGF0aW9uYXJ5U2hpcFR5cGUsIFBsYW5ldFNoaXBUeXBlLCBTaGlwVHlwZSwgU3RhdGlvbmFyeVNoaXBUeXBlIH0gZnJvbSBcIi4vU2hpcFR5cGVcIjtcclxuaW1wb3J0IHsgU21hbGxDYXJnbyB9IGZyb20gXCIuL1NtYWxsQ2FyZ29cIjtcclxuaW1wb3J0IHsgU29sYXJTYXRlbGxpdGUgfSBmcm9tIFwiLi9Tb2xhclNhdGVsbGl0ZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNoaXBUeXBlczogU2hpcFR5cGVbXSA9IFtcclxuICAgIFNoaXBUeXBlLnNtYWxsQ2FyZ28sXHJcbiAgICBTaGlwVHlwZS5sYXJnZUNhcmdvLFxyXG4gICAgU2hpcFR5cGUubGlnaHRGaWdodGVyLFxyXG4gICAgU2hpcFR5cGUuaGVhdnlGaWdodGVyLFxyXG4gICAgU2hpcFR5cGUuY3J1aXNlcixcclxuICAgIFNoaXBUeXBlLmJhdHRsZXNoaXAsXHJcbiAgICBTaGlwVHlwZS5jb2xvbnlTaGlwLFxyXG4gICAgU2hpcFR5cGUucmVjeWNsZXIsXHJcbiAgICBTaGlwVHlwZS5lc3Bpb25hZ2VQcm9iZSxcclxuICAgIFNoaXBUeXBlLmJvbWJlcixcclxuICAgIFNoaXBUeXBlLnNvbGFyU2F0ZWxsaXRlLFxyXG4gICAgU2hpcFR5cGUuZGVzdHJveWVyLFxyXG4gICAgU2hpcFR5cGUuZGVhdGhTdGFyLFxyXG4gICAgU2hpcFR5cGUuYmF0dGxlY3J1aXNlcixcclxuICAgIFNoaXBUeXBlLmNyYXdsZXIsXHJcbiAgICBTaGlwVHlwZS5yZWFwZXIsXHJcbiAgICBTaGlwVHlwZS5wYXRoZmluZGVyLFxyXG5dO1xyXG5leHBvcnQgY29uc3QgU3RhdGlvbmFyeVNoaXBUeXBlczogU3RhdGlvbmFyeVNoaXBUeXBlW10gPSBbXHJcbiAgICBTaGlwVHlwZS5zb2xhclNhdGVsbGl0ZSxcclxuICAgIFNoaXBUeXBlLmNyYXdsZXIsXHJcbl07XHJcbmV4cG9ydCBjb25zdCBOb25TdGF0aW9uYXJ5U2hpcFR5cGVzOiBOb25TdGF0aW9uYXJ5U2hpcFR5cGVbXSA9IFtcclxuICAgIFNoaXBUeXBlLnNtYWxsQ2FyZ28sXHJcbiAgICBTaGlwVHlwZS5sYXJnZUNhcmdvLFxyXG4gICAgU2hpcFR5cGUubGlnaHRGaWdodGVyLFxyXG4gICAgU2hpcFR5cGUuaGVhdnlGaWdodGVyLFxyXG4gICAgU2hpcFR5cGUuY3J1aXNlcixcclxuICAgIFNoaXBUeXBlLmJhdHRsZXNoaXAsXHJcbiAgICBTaGlwVHlwZS5jb2xvbnlTaGlwLFxyXG4gICAgU2hpcFR5cGUucmVjeWNsZXIsXHJcbiAgICBTaGlwVHlwZS5lc3Bpb25hZ2VQcm9iZSxcclxuICAgIFNoaXBUeXBlLmJvbWJlcixcclxuICAgIFNoaXBUeXBlLmRlc3Ryb3llcixcclxuICAgIFNoaXBUeXBlLmRlYXRoU3RhcixcclxuICAgIFNoaXBUeXBlLmJhdHRsZWNydWlzZXIsXHJcbiAgICBTaGlwVHlwZS5yZWFwZXIsXHJcbiAgICBTaGlwVHlwZS5wYXRoZmluZGVyLFxyXG5dO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBQbGFuZXRTaGlwVHlwZXM6IFBsYW5ldFNoaXBUeXBlW10gPSBbXHJcbiAgICBTaGlwVHlwZS5zbWFsbENhcmdvLFxyXG4gICAgU2hpcFR5cGUubGFyZ2VDYXJnbyxcclxuICAgIFNoaXBUeXBlLmxpZ2h0RmlnaHRlcixcclxuICAgIFNoaXBUeXBlLmhlYXZ5RmlnaHRlcixcclxuICAgIFNoaXBUeXBlLmNydWlzZXIsXHJcbiAgICBTaGlwVHlwZS5iYXR0bGVzaGlwLFxyXG4gICAgU2hpcFR5cGUuY29sb255U2hpcCxcclxuICAgIFNoaXBUeXBlLnJlY3ljbGVyLFxyXG4gICAgU2hpcFR5cGUuZXNwaW9uYWdlUHJvYmUsXHJcbiAgICBTaGlwVHlwZS5ib21iZXIsXHJcbiAgICBTaGlwVHlwZS5zb2xhclNhdGVsbGl0ZSxcclxuICAgIFNoaXBUeXBlLmRlc3Ryb3llcixcclxuICAgIFNoaXBUeXBlLmRlYXRoU3RhcixcclxuICAgIFNoaXBUeXBlLmJhdHRsZWNydWlzZXIsXHJcbiAgICBTaGlwVHlwZS5jcmF3bGVyLFxyXG4gICAgU2hpcFR5cGUucmVhcGVyLFxyXG4gICAgU2hpcFR5cGUucGF0aGZpbmRlcixcclxuXTtcclxuZXhwb3J0IGNvbnN0IE1vb25TaGlwVHlwZXM6IE1vb25TaGlwVHlwZVtdID0gW1xyXG4gICAgU2hpcFR5cGUuc21hbGxDYXJnbyxcclxuICAgIFNoaXBUeXBlLmxhcmdlQ2FyZ28sXHJcbiAgICBTaGlwVHlwZS5saWdodEZpZ2h0ZXIsXHJcbiAgICBTaGlwVHlwZS5oZWF2eUZpZ2h0ZXIsXHJcbiAgICBTaGlwVHlwZS5jcnVpc2VyLFxyXG4gICAgU2hpcFR5cGUuYmF0dGxlc2hpcCxcclxuICAgIFNoaXBUeXBlLmNvbG9ueVNoaXAsXHJcbiAgICBTaGlwVHlwZS5yZWN5Y2xlcixcclxuICAgIFNoaXBUeXBlLmVzcGlvbmFnZVByb2JlLFxyXG4gICAgU2hpcFR5cGUuYm9tYmVyLFxyXG4gICAgU2hpcFR5cGUuc29sYXJTYXRlbGxpdGUsXHJcbiAgICBTaGlwVHlwZS5kZXN0cm95ZXIsXHJcbiAgICBTaGlwVHlwZS5kZWF0aFN0YXIsXHJcbiAgICBTaGlwVHlwZS5iYXR0bGVjcnVpc2VyLFxyXG4gICAgU2hpcFR5cGUucmVhcGVyLFxyXG4gICAgU2hpcFR5cGUucGF0aGZpbmRlcixcclxuXTtcclxuXHJcbmV4cG9ydCBjb25zdCBNaWxpdGFyeVNoaXBUeXBlczogTWlsaXRhcnlTaGlwVHlwZVtdID0gW1xyXG4gICAgU2hpcFR5cGUubGlnaHRGaWdodGVyLFxyXG4gICAgU2hpcFR5cGUuaGVhdnlGaWdodGVyLFxyXG4gICAgU2hpcFR5cGUuY3J1aXNlcixcclxuICAgIFNoaXBUeXBlLmJhdHRsZXNoaXAsXHJcbiAgICBTaGlwVHlwZS5iYXR0bGVjcnVpc2VyLFxyXG4gICAgU2hpcFR5cGUuYm9tYmVyLFxyXG4gICAgU2hpcFR5cGUuZGVzdHJveWVyLFxyXG4gICAgU2hpcFR5cGUuZGVhdGhTdGFyLFxyXG4gICAgU2hpcFR5cGUucmVhcGVyLFxyXG4gICAgU2hpcFR5cGUucGF0aGZpbmRlcixcclxuICAgIFNoaXBUeXBlLmNyYXdsZXIsXHJcbl07XHJcbmV4cG9ydCBjb25zdCBDaXZpbFNoaXBUeXBlczogQ2l2aWxTaGlwVHlwZVtdID0gW1xyXG4gICAgU2hpcFR5cGUuc21hbGxDYXJnbyxcclxuICAgIFNoaXBUeXBlLmxhcmdlQ2FyZ28sXHJcbiAgICBTaGlwVHlwZS5jb2xvbnlTaGlwLFxyXG4gICAgU2hpcFR5cGUucmVjeWNsZXIsXHJcbiAgICBTaGlwVHlwZS5lc3Bpb25hZ2VQcm9iZSxcclxuICAgIFNoaXBUeXBlLnNvbGFyU2F0ZWxsaXRlLFxyXG5dO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNoaXBCeVR5cGVzOiBSZWNvcmQ8U2hpcFR5cGUsIFNoaXA+ID0ge1xyXG4gICAgW1NoaXBUeXBlLnNtYWxsQ2FyZ29dOiBTbWFsbENhcmdvLFxyXG4gICAgW1NoaXBUeXBlLmxhcmdlQ2FyZ29dOiBMYXJnZUNhcmdvLFxyXG4gICAgW1NoaXBUeXBlLmxpZ2h0RmlnaHRlcl06IExpZ2h0RmlnaHRlcixcclxuICAgIFtTaGlwVHlwZS5oZWF2eUZpZ2h0ZXJdOiBIZWF2eUZpZ2h0ZXIsXHJcbiAgICBbU2hpcFR5cGUuY3J1aXNlcl06IENydWlzZXIsXHJcbiAgICBbU2hpcFR5cGUuYmF0dGxlc2hpcF06IEJhdHRsZXNoaXAsXHJcbiAgICBbU2hpcFR5cGUuY29sb255U2hpcF06IENvbG9ueVNoaXAsXHJcbiAgICBbU2hpcFR5cGUucmVjeWNsZXJdOiBSZWN5Y2xlcixcclxuICAgIFtTaGlwVHlwZS5lc3Bpb25hZ2VQcm9iZV06IEVzcGlvbmFnZVByb2JlLFxyXG4gICAgW1NoaXBUeXBlLmJvbWJlcl06IEJvbWJlcixcclxuICAgIFtTaGlwVHlwZS5zb2xhclNhdGVsbGl0ZV06IFNvbGFyU2F0ZWxsaXRlLFxyXG4gICAgW1NoaXBUeXBlLmRlc3Ryb3llcl06IERlc3Ryb3llcixcclxuICAgIFtTaGlwVHlwZS5kZWF0aFN0YXJdOiBEZWF0aFN0YXIsXHJcbiAgICBbU2hpcFR5cGUuYmF0dGxlY3J1aXNlcl06IEJhdHRsZWNydWlzZXIsXHJcbiAgICBbU2hpcFR5cGUuY3Jhd2xlcl06IENyYXdsZXIsXHJcbiAgICBbU2hpcFR5cGUucmVhcGVyXTogUmVhcGVyLFxyXG4gICAgW1NoaXBUeXBlLnBhdGhmaW5kZXJdOiBQYXRoZmluZGVyLFxyXG59OyIsImV4cG9ydCBlbnVtIFJlc2VhcmNoVHlwZSB7XHJcbiAgICBlc3Bpb25hZ2VUZWNobm9sb2d5ID0gMTA2LFxyXG4gICAgY29tcHV0ZXJUZWNobm9sb2d5ID0gMTA4LFxyXG4gICAgd2VhcG9uc1RlY2hub2xvZ3kgPSAxMDksXHJcbiAgICBzaGllbGRpbmdUZWNobm9sb2d5ID0gMTEwLFxyXG4gICAgYXJtb3JUZWNobm9sb2d5ID0gMTExLFxyXG4gICAgZW5lcmd5VGVjaG5vbG9neSA9IDExMyxcclxuICAgIGh5cGVyc3BhY2VUZWNobm9sb2d5ID0gMTE0LFxyXG4gICAgY29tYnVzdGlvbkRyaXZlID0gMTE1LFxyXG4gICAgaW1wdWxzZURyaXZlID0gMTE3LFxyXG4gICAgaHlwZXJzcGFjZURyaXZlID0gMTE4LFxyXG4gICAgbGFzZXJUZWNobm9sb2d5ID0gMTIwLFxyXG4gICAgaW9uVGVjaG5vbG9neSA9IDEyMSxcclxuICAgIHBsYXNtYVRlY2hub2xvZ3kgPSAxMjIsXHJcbiAgICBpbnRlcmdhbGFjdGljUmVzZWFyY2hOZXR3b3JrID0gMTIzLFxyXG4gICAgYXN0cm9waHlzaWNzID0gMTI0LFxyXG4gICAgZ3Jhdml0b25UZWNobm9sb2d5ID0gMTk5LFxyXG59IiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJlc2VhcmNoIHtcclxuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRDb3N0KGxldmVsOiBudW1iZXIpOiBDb3N0O1xyXG59IiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5pbXBvcnQgeyBSZXNlYXJjaCB9IGZyb20gXCIuL1Jlc2VhcmNoXCI7XHJcblxyXG5jbGFzcyBBcm1vclRlY2hub2xvZ3lDbGFzcyBleHRlbmRzIFJlc2VhcmNoIHtcclxuXHJcbiAgICBwdWJsaWMgZ2V0Q29zdChsZXZlbDogbnVtYmVyKTogQ29zdCB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbWV0YWw6IDUwMCAqIDIgKiogbGV2ZWwsXHJcbiAgICAgICAgICAgIGNyeXN0YWw6IDAsXHJcbiAgICAgICAgICAgIGRldXRlcml1bTogMCxcclxuICAgICAgICAgICAgZW5lcmd5OiAwLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG59XHJcbmV4cG9ydCBjb25zdCBBcm1vclRlY2hub2xvZ3kgPSBuZXcgQXJtb3JUZWNobm9sb2d5Q2xhc3MoKTtcclxuIiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5pbXBvcnQgeyBSZXNlYXJjaCB9IGZyb20gXCIuL1Jlc2VhcmNoXCI7XHJcblxyXG5jbGFzcyBDb21wdXRlclRlY2hub2xvZ3lDbGFzcyBleHRlbmRzIFJlc2VhcmNoIHtcclxuXHJcbiAgICBwdWJsaWMgZ2V0Q29zdChsZXZlbDogbnVtYmVyKTogQ29zdCB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbWV0YWw6IDAsXHJcbiAgICAgICAgICAgIGNyeXN0YWw6IDIwMCAqIDIgKiogbGV2ZWwsXHJcbiAgICAgICAgICAgIGRldXRlcml1bTogMzAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgZW5lcmd5OiAwLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG59XHJcbmV4cG9ydCBjb25zdCBDb21wdXRlclRlY2hub2xvZ3kgPSBuZXcgQ29tcHV0ZXJUZWNobm9sb2d5Q2xhc3MoKTtcclxuIiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5pbXBvcnQgeyBSZXNlYXJjaCB9IGZyb20gXCIuL1Jlc2VhcmNoXCI7XHJcblxyXG5jbGFzcyBFc3Bpb25hZ2VUZWNobm9sb2d5Q2xhc3MgZXh0ZW5kcyBSZXNlYXJjaCB7XHJcblxyXG4gICAgcHVibGljIGdldENvc3QobGV2ZWw6IG51bWJlcik6IENvc3Qge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1ldGFsOiAxMDAgKiAyICoqIGxldmVsLFxyXG4gICAgICAgICAgICBjcnlzdGFsOiA1MDAgKiAyICoqIGxldmVsLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW06IDEwMCAqIDIgKiogbGV2ZWwsXHJcbiAgICAgICAgICAgIGVuZXJneTogMCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxufVxyXG5leHBvcnQgY29uc3QgRXNwaW9uYWdlVGVjaG5vbG9neSA9IG5ldyBFc3Bpb25hZ2VUZWNobm9sb2d5Q2xhc3MoKTtcclxuIiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5pbXBvcnQgeyBSZXNlYXJjaCB9IGZyb20gXCIuL1Jlc2VhcmNoXCI7XHJcblxyXG5jbGFzcyBTaGllbGRpbmdUZWNobm9sb2d5Q2xhc3MgZXh0ZW5kcyBSZXNlYXJjaCB7XHJcblxyXG4gICAgcHVibGljIGdldENvc3QobGV2ZWw6IG51bWJlcik6IENvc3Qge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1ldGFsOiAxMDAgKiAyICoqIGxldmVsLFxyXG4gICAgICAgICAgICBjcnlzdGFsOiAzMDAgKiAyICoqIGxldmVsLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW06IDAsXHJcbiAgICAgICAgICAgIGVuZXJneTogMCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxufVxyXG5leHBvcnQgY29uc3QgU2hpZWxkaW5nVGVjaG5vbG9neSA9IG5ldyBTaGllbGRpbmdUZWNobm9sb2d5Q2xhc3MoKTtcclxuIiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5pbXBvcnQgeyBSZXNlYXJjaCB9IGZyb20gXCIuL1Jlc2VhcmNoXCI7XHJcblxyXG5jbGFzcyBXZWFwb25zVGVjaG5vbG9neUNsYXNzIGV4dGVuZHMgUmVzZWFyY2gge1xyXG5cclxuICAgIHB1YmxpYyBnZXRDb3N0KGxldmVsOiBudW1iZXIpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogNDAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgY3J5c3RhbDogMTAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgZGV1dGVyaXVtOiAwLFxyXG4gICAgICAgICAgICBlbmVyZ3k6IDAsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbn1cclxuZXhwb3J0IGNvbnN0IFdlYXBvbnNUZWNobm9sb2d5ID0gbmV3IFdlYXBvbnNUZWNobm9sb2d5Q2xhc3MoKTtcclxuIiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5pbXBvcnQgeyBSZXNlYXJjaCB9IGZyb20gXCIuL1Jlc2VhcmNoXCI7XHJcblxyXG5jbGFzcyBFbmVyZ3lUZWNobm9sb2d5Q2xhc3MgZXh0ZW5kcyBSZXNlYXJjaCB7XHJcblxyXG4gICAgcHVibGljIGdldENvc3QobGV2ZWw6IG51bWJlcik6IENvc3Qge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1ldGFsOiAwLFxyXG4gICAgICAgICAgICBjcnlzdGFsOiA0MDAgKiAyICoqIGxldmVsLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW06IDIwMCAqIDIgKiogbGV2ZWwsXHJcbiAgICAgICAgICAgIGVuZXJneTogMCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxufVxyXG5leHBvcnQgY29uc3QgRW5lcmd5VGVjaG5vbG9neSA9IG5ldyBFbmVyZ3lUZWNobm9sb2d5Q2xhc3MoKTtcclxuIiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5pbXBvcnQgeyBSZXNlYXJjaCB9IGZyb20gXCIuL1Jlc2VhcmNoXCI7XHJcblxyXG5jbGFzcyBIeXBlcnNwYWNlVGVjaG5vbG9neUNsYXNzIGV4dGVuZHMgUmVzZWFyY2gge1xyXG5cclxuICAgIHB1YmxpYyBnZXRDb3N0KGxldmVsOiBudW1iZXIpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogMCxcclxuICAgICAgICAgICAgY3J5c3RhbDogMjAwMCAqIDIgKiogbGV2ZWwsXHJcbiAgICAgICAgICAgIGRldXRlcml1bTogMTAwMCAqIDIgKiogbGV2ZWwsXHJcbiAgICAgICAgICAgIGVuZXJneTogMCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxufVxyXG5leHBvcnQgY29uc3QgSHlwZXJzcGFjZVRlY2hub2xvZ3kgPSBuZXcgSHlwZXJzcGFjZVRlY2hub2xvZ3lDbGFzcygpO1xyXG4iLCJpbXBvcnQgeyBDb3N0IH0gZnJvbSBcIi4uL2NvbW1vbi9Db3N0XCI7XHJcbmltcG9ydCB7IFJlc2VhcmNoIH0gZnJvbSBcIi4vUmVzZWFyY2hcIjtcclxuXHJcbmNsYXNzIENvbWJ1c3Rpb25Ecml2ZUNsYXNzIGV4dGVuZHMgUmVzZWFyY2gge1xyXG5cclxuICAgIHB1YmxpYyBnZXRDb3N0KGxldmVsOiBudW1iZXIpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogMjAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgY3J5c3RhbDogMCxcclxuICAgICAgICAgICAgZGV1dGVyaXVtOiAzMDAgKiAyICoqIGxldmVsLFxyXG4gICAgICAgICAgICBlbmVyZ3k6IDAsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbn1cclxuZXhwb3J0IGNvbnN0IENvbWJ1c3Rpb25Ecml2ZSA9IG5ldyBDb21idXN0aW9uRHJpdmVDbGFzcygpO1xyXG4iLCJpbXBvcnQgeyBDb3N0IH0gZnJvbSBcIi4uL2NvbW1vbi9Db3N0XCI7XHJcbmltcG9ydCB7IFJlc2VhcmNoIH0gZnJvbSBcIi4vUmVzZWFyY2hcIjtcclxuXHJcbmNsYXNzIEltcHVsc2VEcml2ZUNsYXNzIGV4dGVuZHMgUmVzZWFyY2gge1xyXG5cclxuICAgIHB1YmxpYyBnZXRDb3N0KGxldmVsOiBudW1iZXIpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogMTAwMCAqIDIgKiogbGV2ZWwsXHJcbiAgICAgICAgICAgIGNyeXN0YWw6IDIwMDAgKiAyICoqIGxldmVsLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW06IDMwMCAqIDIgKiogbGV2ZWwsXHJcbiAgICAgICAgICAgIGVuZXJneTogMCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxufVxyXG5leHBvcnQgY29uc3QgSW1wdWxzZURyaXZlID0gbmV3IEltcHVsc2VEcml2ZUNsYXNzKCk7XHJcbiIsImltcG9ydCB7IENvc3QgfSBmcm9tIFwiLi4vY29tbW9uL0Nvc3RcIjtcclxuaW1wb3J0IHsgUmVzZWFyY2ggfSBmcm9tIFwiLi9SZXNlYXJjaFwiO1xyXG5cclxuY2xhc3MgSHlwZXJzcGFjZURyaXZlQ2xhc3MgZXh0ZW5kcyBSZXNlYXJjaCB7XHJcblxyXG4gICAgcHVibGljIGdldENvc3QobGV2ZWw6IG51bWJlcik6IENvc3Qge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1ldGFsOiA1MDAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgY3J5c3RhbDogMTAwMDAgKiAyICoqIGxldmVsLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW06IDMwMDAgKiAyICoqIGxldmVsLFxyXG4gICAgICAgICAgICBlbmVyZ3k6IDAsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbn1cclxuZXhwb3J0IGNvbnN0IEh5cGVyc3BhY2VEcml2ZSA9IG5ldyBIeXBlcnNwYWNlRHJpdmVDbGFzcygpO1xyXG4iLCJpbXBvcnQgeyBDb3N0IH0gZnJvbSBcIi4uL2NvbW1vbi9Db3N0XCI7XHJcbmltcG9ydCB7IFJlc2VhcmNoIH0gZnJvbSBcIi4vUmVzZWFyY2hcIjtcclxuXHJcbmNsYXNzIExhc2VyVGVjaG5vbG9neUNsYXNzIGV4dGVuZHMgUmVzZWFyY2gge1xyXG5cclxuICAgIHB1YmxpYyBnZXRDb3N0KGxldmVsOiBudW1iZXIpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogMTAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgY3J5c3RhbDogNTAgKiAyICoqIGxldmVsLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW06IDAsXHJcbiAgICAgICAgICAgIGVuZXJneTogMCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxufVxyXG5leHBvcnQgY29uc3QgTGFzZXJUZWNobm9sb2d5ID0gbmV3IExhc2VyVGVjaG5vbG9neUNsYXNzKCk7XHJcbiIsImltcG9ydCB7IENvc3QgfSBmcm9tIFwiLi4vY29tbW9uL0Nvc3RcIjtcclxuaW1wb3J0IHsgUmVzZWFyY2ggfSBmcm9tIFwiLi9SZXNlYXJjaFwiO1xyXG5cclxuY2xhc3MgSW9uVGVjaG5vbG9neUNsYXNzIGV4dGVuZHMgUmVzZWFyY2gge1xyXG5cclxuICAgIHB1YmxpYyBnZXRDb3N0KGxldmVsOiBudW1iZXIpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogNTAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgY3J5c3RhbDogMTUwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgZGV1dGVyaXVtOiA1MCAqIDIgKiogbGV2ZWwsXHJcbiAgICAgICAgICAgIGVuZXJneTogMCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxufVxyXG5leHBvcnQgY29uc3QgSW9uVGVjaG5vbG9neSA9IG5ldyBJb25UZWNobm9sb2d5Q2xhc3MoKTtcclxuIiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5pbXBvcnQgeyBSZXNlYXJjaCB9IGZyb20gXCIuL1Jlc2VhcmNoXCI7XHJcblxyXG5jbGFzcyBQbGFzbWFUZWNobm9sb2d5Q2xhc3MgZXh0ZW5kcyBSZXNlYXJjaCB7XHJcblxyXG4gICAgcHVibGljIGdldENvc3QobGV2ZWw6IG51bWJlcik6IENvc3Qge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1ldGFsOiAxXzAwMCAqIDIgKiogbGV2ZWwsXHJcbiAgICAgICAgICAgIGNyeXN0YWw6IDJfMDAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgZGV1dGVyaXVtOiA1MDAgKiAyICoqIGxldmVsLFxyXG4gICAgICAgICAgICBlbmVyZ3k6IDAsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbn1cclxuZXhwb3J0IGNvbnN0IFBsYXNtYVRlY2hub2xvZ3kgPSBuZXcgUGxhc21hVGVjaG5vbG9neUNsYXNzKCk7IiwiaW1wb3J0IHsgQ29zdCB9IGZyb20gXCIuLi9jb21tb24vQ29zdFwiO1xyXG5pbXBvcnQgeyBSZXNlYXJjaCB9IGZyb20gXCIuL1Jlc2VhcmNoXCI7XHJcblxyXG5jbGFzcyBJbnRlcmdhbGFjdGljUmVzZWFyY2hOZXR3b3JrQ2xhc3MgZXh0ZW5kcyBSZXNlYXJjaCB7XHJcblxyXG4gICAgcHVibGljIGdldENvc3QobGV2ZWw6IG51bWJlcik6IENvc3Qge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1ldGFsOiAxMjAwMDAgKiAyICoqIGxldmVsLFxyXG4gICAgICAgICAgICBjcnlzdGFsOiAyMDAwMDAgKiAyICoqIGxldmVsLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW06IDgwMDAwICogMiAqKiBsZXZlbCxcclxuICAgICAgICAgICAgZW5lcmd5OiAwLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG59XHJcbmV4cG9ydCBjb25zdCBJbnRlcmdhbGFjdGljUmVzZWFyY2hOZXR3b3JrID0gbmV3IEludGVyZ2FsYWN0aWNSZXNlYXJjaE5ldHdvcmtDbGFzcygpO1xyXG4iLCJpbXBvcnQgeyBDb3N0IH0gZnJvbSBcIi4uL2NvbW1vbi9Db3N0XCI7XHJcbmltcG9ydCB7IFJlc2VhcmNoIH0gZnJvbSBcIi4vUmVzZWFyY2hcIjtcclxuXHJcbmNsYXNzIEFzdHJvcGh5c2ljc0NsYXNzIGV4dGVuZHMgUmVzZWFyY2gge1xyXG5cclxuICAgIHB1YmxpYyBnZXRDb3N0KGxldmVsOiBudW1iZXIpOiBDb3N0IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBtZXRhbDogTWF0aC5mbG9vcigxMDAgKiA0MCAqIDEuNzUgKiogKGxldmVsIC0gMSkpLFxyXG4gICAgICAgICAgICBjcnlzdGFsOiBNYXRoLmZsb29yKDEwMCAqIDgwICogMS43NSAqKiAobGV2ZWwgLSAxKSksXHJcbiAgICAgICAgICAgIGRldXRlcml1bTogTWF0aC5mbG9vcigxMDAgKiA0MCAqIDEuNzUgKiogKGxldmVsIC0gMSkpLFxyXG4gICAgICAgICAgICBlbmVyZ3k6IDAsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbn1cclxuZXhwb3J0IGNvbnN0IEFzdHJvcGh5c2ljcyA9IG5ldyBBc3Ryb3BoeXNpY3NDbGFzcygpOyIsImltcG9ydCB7IENvc3QgfSBmcm9tIFwiLi4vY29tbW9uL0Nvc3RcIjtcclxuaW1wb3J0IHsgUmVzZWFyY2ggfSBmcm9tIFwiLi9SZXNlYXJjaFwiO1xyXG5cclxuY2xhc3MgR3Jhdml0b25UZWNobm9sb2d5Q2xhc3MgZXh0ZW5kcyBSZXNlYXJjaCB7XHJcblxyXG4gICAgcHVibGljIGdldENvc3QobGV2ZWw6IG51bWJlcik6IENvc3Qge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG1ldGFsOiAwLFxyXG4gICAgICAgICAgICBjcnlzdGFsOiAwLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW06IDAsXHJcbiAgICAgICAgICAgIGVuZXJneTogMTAwMDAwICogMyAqKiBsZXZlbCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxufVxyXG5leHBvcnQgY29uc3QgR3Jhdml0b25UZWNobm9sb2d5ID0gbmV3IEdyYXZpdG9uVGVjaG5vbG9neUNsYXNzKCk7XHJcbiIsImltcG9ydCB7IFJlc2VhcmNoIH0gZnJvbSBcIi4vUmVzZWFyY2hcIjtcclxuaW1wb3J0IHsgUmVzZWFyY2hUeXBlIH0gZnJvbSBcIi4vUmVzZWFyY2hUeXBlXCI7XHJcbmltcG9ydCB7IEFybW9yVGVjaG5vbG9neSB9IGZyb20gXCIuL0FybW9yVGVjaG5vbG9neVwiO1xyXG5pbXBvcnQgeyBDb21wdXRlclRlY2hub2xvZ3kgfSBmcm9tIFwiLi9Db21wdXRlclRlY2hub2xvZ3lcIjtcclxuaW1wb3J0IHsgRXNwaW9uYWdlVGVjaG5vbG9neSB9IGZyb20gXCIuL0VzcGlvbmFnZVRlY2hub2xvZ3lcIjtcclxuaW1wb3J0IHsgU2hpZWxkaW5nVGVjaG5vbG9neSB9IGZyb20gXCIuL1NoaWVsZGluZ1RlY2hub2xvZ3lcIjtcclxuaW1wb3J0IHsgV2VhcG9uc1RlY2hub2xvZ3kgfSBmcm9tIFwiLi9XZWFwb25zVGVjaG5vbG9neVwiO1xyXG5pbXBvcnQgeyBFbmVyZ3lUZWNobm9sb2d5IH0gZnJvbSBcIi4vRW5lcmd5VGVjaG5vbG9neVwiO1xyXG5pbXBvcnQgeyBIeXBlcnNwYWNlVGVjaG5vbG9neSB9IGZyb20gXCIuL0h5cGVyc3BhY2VUZWNobm9sb2d5XCI7XHJcbmltcG9ydCB7IENvbWJ1c3Rpb25Ecml2ZSB9IGZyb20gXCIuL0NvbWJ1c3Rpb25Ecml2ZVwiO1xyXG5pbXBvcnQgeyBJbXB1bHNlRHJpdmUgfSBmcm9tIFwiLi9JbXB1bHNlRHJpdmVcIjtcclxuaW1wb3J0IHsgSHlwZXJzcGFjZURyaXZlIH0gZnJvbSBcIi4vSHlwZXJzcGFjZURyaXZlXCI7XHJcbmltcG9ydCB7IExhc2VyVGVjaG5vbG9neSB9IGZyb20gXCIuL0xhc2VyVGVjaG5vbG9neVwiO1xyXG5pbXBvcnQgeyBJb25UZWNobm9sb2d5IH0gZnJvbSBcIi4vSW9uVGVjaG5vbG9neVwiO1xyXG5pbXBvcnQgeyBQbGFzbWFUZWNobm9sb2d5IH0gZnJvbSBcIi4vUGxhc21hVGVjaG5vbG9neVwiO1xyXG5pbXBvcnQgeyBJbnRlcmdhbGFjdGljUmVzZWFyY2hOZXR3b3JrIH0gZnJvbSBcIi4vSW50ZXJnYWxhY3RpY1Jlc2VhcmNoTmV0d29ya1wiO1xyXG5pbXBvcnQgeyBBc3Ryb3BoeXNpY3MgfSBmcm9tIFwiLi9Bc3Ryb3BoeXNpY3NcIjtcclxuaW1wb3J0IHsgR3Jhdml0b25UZWNobm9sb2d5IH0gZnJvbSBcIi4vR3Jhdml0b25UZWNobm9sb2d5XCI7XHJcblxyXG5leHBvcnQgY29uc3QgUmVzZWFyY2hUeXBlczogUmVzZWFyY2hUeXBlW10gPSBbXHJcbiAgICBSZXNlYXJjaFR5cGUuZXNwaW9uYWdlVGVjaG5vbG9neSxcclxuICAgIFJlc2VhcmNoVHlwZS5jb21wdXRlclRlY2hub2xvZ3ksXHJcbiAgICBSZXNlYXJjaFR5cGUud2VhcG9uc1RlY2hub2xvZ3ksXHJcbiAgICBSZXNlYXJjaFR5cGUuc2hpZWxkaW5nVGVjaG5vbG9neSxcclxuICAgIFJlc2VhcmNoVHlwZS5hcm1vclRlY2hub2xvZ3ksXHJcbiAgICBSZXNlYXJjaFR5cGUuZW5lcmd5VGVjaG5vbG9neSxcclxuICAgIFJlc2VhcmNoVHlwZS5oeXBlcnNwYWNlVGVjaG5vbG9neSxcclxuICAgIFJlc2VhcmNoVHlwZS5jb21idXN0aW9uRHJpdmUsXHJcbiAgICBSZXNlYXJjaFR5cGUuaW1wdWxzZURyaXZlLFxyXG4gICAgUmVzZWFyY2hUeXBlLmh5cGVyc3BhY2VEcml2ZSxcclxuICAgIFJlc2VhcmNoVHlwZS5sYXNlclRlY2hub2xvZ3ksXHJcbiAgICBSZXNlYXJjaFR5cGUuaW9uVGVjaG5vbG9neSxcclxuICAgIFJlc2VhcmNoVHlwZS5wbGFzbWFUZWNobm9sb2d5LFxyXG4gICAgUmVzZWFyY2hUeXBlLmludGVyZ2FsYWN0aWNSZXNlYXJjaE5ldHdvcmssXHJcbiAgICBSZXNlYXJjaFR5cGUuYXN0cm9waHlzaWNzLFxyXG4gICAgUmVzZWFyY2hUeXBlLmdyYXZpdG9uVGVjaG5vbG9neSxcclxuXTtcclxuZXhwb3J0IGNvbnN0IFJlc2VhcmNoQnlUeXBlczogUmVjb3JkPFJlc2VhcmNoVHlwZSwgUmVzZWFyY2g+ID0ge1xyXG4gICAgW1Jlc2VhcmNoVHlwZS5lc3Bpb25hZ2VUZWNobm9sb2d5XTogRXNwaW9uYWdlVGVjaG5vbG9neSxcclxuICAgIFtSZXNlYXJjaFR5cGUuY29tcHV0ZXJUZWNobm9sb2d5XTogQ29tcHV0ZXJUZWNobm9sb2d5LFxyXG4gICAgW1Jlc2VhcmNoVHlwZS53ZWFwb25zVGVjaG5vbG9neV06IFdlYXBvbnNUZWNobm9sb2d5LFxyXG4gICAgW1Jlc2VhcmNoVHlwZS5zaGllbGRpbmdUZWNobm9sb2d5XTogU2hpZWxkaW5nVGVjaG5vbG9neSxcclxuICAgIFtSZXNlYXJjaFR5cGUuYXJtb3JUZWNobm9sb2d5XTogQXJtb3JUZWNobm9sb2d5LFxyXG4gICAgW1Jlc2VhcmNoVHlwZS5lbmVyZ3lUZWNobm9sb2d5XTogRW5lcmd5VGVjaG5vbG9neSxcclxuICAgIFtSZXNlYXJjaFR5cGUuaHlwZXJzcGFjZVRlY2hub2xvZ3ldOiBIeXBlcnNwYWNlVGVjaG5vbG9neSxcclxuICAgIFtSZXNlYXJjaFR5cGUuY29tYnVzdGlvbkRyaXZlXTogQ29tYnVzdGlvbkRyaXZlLFxyXG4gICAgW1Jlc2VhcmNoVHlwZS5pbXB1bHNlRHJpdmVdOiBJbXB1bHNlRHJpdmUsXHJcbiAgICBbUmVzZWFyY2hUeXBlLmh5cGVyc3BhY2VEcml2ZV06IEh5cGVyc3BhY2VEcml2ZSxcclxuICAgIFtSZXNlYXJjaFR5cGUubGFzZXJUZWNobm9sb2d5XTogTGFzZXJUZWNobm9sb2d5LFxyXG4gICAgW1Jlc2VhcmNoVHlwZS5pb25UZWNobm9sb2d5XTogSW9uVGVjaG5vbG9neSxcclxuICAgIFtSZXNlYXJjaFR5cGUucGxhc21hVGVjaG5vbG9neV06IFBsYXNtYVRlY2hub2xvZ3ksXHJcbiAgICBbUmVzZWFyY2hUeXBlLmludGVyZ2FsYWN0aWNSZXNlYXJjaE5ldHdvcmtdOiBJbnRlcmdhbGFjdGljUmVzZWFyY2hOZXR3b3JrLFxyXG4gICAgW1Jlc2VhcmNoVHlwZS5hc3Ryb3BoeXNpY3NdOiBBc3Ryb3BoeXNpY3MsXHJcbiAgICBbUmVzZWFyY2hUeXBlLmdyYXZpdG9uVGVjaG5vbG9neV06IEdyYXZpdG9uVGVjaG5vbG9neSxcclxufTsiLCJleHBvcnQgZW51bSBMaWZlZm9ybVR5cGUge1xyXG4gICAgaHVtYW5zID0gJ2h1bWFucycsXHJcbiAgICByb2NrdGFsID0gJ3JvY2t0YWwnLFxyXG4gICAgbWVjaGFzID0gJ21lY2hhcycsXHJcbiAgICBrYWVsZXNoID0gJ2thZWxlc2gnLFxyXG4gICAgbm9uZSA9ICdub25lJyxcclxufVxyXG5leHBvcnQgdHlwZSBWYWxpZExpZmVmb3JtVHlwZSA9IEV4Y2x1ZGU8TGlmZWZvcm1UeXBlLCBMaWZlZm9ybVR5cGUubm9uZT47XHJcblxyXG5leHBvcnQgY29uc3QgVmFsaWRMaWZlZm9ybVR5cGVzOiBWYWxpZExpZmVmb3JtVHlwZVtdID0gW1xyXG4gICAgTGlmZWZvcm1UeXBlLmh1bWFucyxcclxuICAgIExpZmVmb3JtVHlwZS5yb2NrdGFsLFxyXG4gICAgTGlmZWZvcm1UeXBlLm1lY2hhcyxcclxuICAgIExpZmVmb3JtVHlwZS5rYWVsZXNoLFxyXG5dO1xyXG5cclxuZXhwb3J0IGNvbnN0IExpZmVmb3JtVHlwZXM6IExpZmVmb3JtVHlwZVtdID0gW1xyXG4gICAgTGlmZWZvcm1UeXBlLm5vbmUsXHJcbiAgICBMaWZlZm9ybVR5cGUuaHVtYW5zLFxyXG4gICAgTGlmZWZvcm1UeXBlLnJvY2t0YWwsXHJcbiAgICBMaWZlZm9ybVR5cGUubWVjaGFzLFxyXG4gICAgTGlmZWZvcm1UeXBlLmthZWxlc2gsXHJcbl07IiwiaW1wb3J0IHsgTGlmZWZvcm1UeXBlIH0gZnJvbSBcIi4vTGlmZWZvcm1UeXBlXCI7XHJcblxyXG5leHBvcnQgZW51bSBMaWZlZm9ybUJ1aWxkaW5nVHlwZSB7XHJcbiAgICAvLyBodW1hbnNcclxuICAgIHJlc2lkZW50aWFsU2VjdG9yID0gMTFfMTAxLFxyXG4gICAgYmlvc3BoZXJlRmFybSA9IDExXzEwMixcclxuICAgIHJlc2VhcmNoQ2VudHJlID0gMTFfMTAzLFxyXG4gICAgYWNhZGVteU9mU2NpZW5jZXMgPSAxMV8xMDQsXHJcbiAgICBuZXVyb0NhbGlicmF0aW9uQ2VudHJlID0gMTFfMTA1LFxyXG4gICAgaGlnaEVuZXJneVNtZWx0aW5nID0gMTFfMTA2LFxyXG4gICAgZm9vZFNpbG8gPSAxMV8xMDcsXHJcbiAgICBmdXNpb25Qb3dlcmVkUHJvZHVjdGlvbiA9IDExXzEwOCxcclxuICAgIHNreXNjcmFwZXIgPSAxMV8xMDksXHJcbiAgICBiaW90ZWNoTGFiID0gMTFfMTEwLFxyXG4gICAgbWV0cm9wb2xpcyA9IDExXzExMSxcclxuICAgIHBsYW5ldGFyeVNoaWVsZCA9IDExXzExMixcclxuXHJcbiAgICAvLyByb2NrdGFsXHJcbiAgICBtZWRpdGF0aW9uRW5jbGF2ZSA9IDEyXzEwMSxcclxuICAgIGNyeXN0YWxGYXJtID0gMTJfMTAyLFxyXG4gICAgcnVuZVRlY2hub2xvZ2l1bSA9IDEyXzEwMyxcclxuICAgIHJ1bmVGb3JnZSA9IDEyXzEwNCxcclxuICAgIG9yaWt0b3JpdW0gPSAxMl8xMDUsXHJcbiAgICBtYWdtYUZvcmdlID0gMTJfMTA2LFxyXG4gICAgZGlzcnVwdGlvbkNoYW1iZXIgPSAxMl8xMDcsXHJcbiAgICBtZWdhbGl0aCA9IDEyXzEwOCxcclxuICAgIGNyeXN0YWxSZWZpbmVyeSA9IDEyXzEwOSxcclxuICAgIGRldXRlcml1bVN5bnRoZXNpc2VyID0gMTJfMTEwLFxyXG4gICAgbWluZXJhbFJlc2VhcmNoQ2VudHJlID0gMTJfMTExLFxyXG4gICAgYWR2YW5jZWRSZWN5Y2xpbmdQbGFudCA9IDEyXzExMixcclxuXHJcbiAgICAvLyBtZWNoYXNcclxuICAgIGFzc2VtYmx5TGluZSA9IDEzXzEwMSxcclxuICAgIGZ1c2lvbkNlbGxGYWN0b3J5ID0gMTNfMTAyLFxyXG4gICAgcm9ib3RpY3NSZXNlYXJjaENlbnRyZSA9IDEzXzEwMyxcclxuICAgIHVwZGF0ZU5ldHdvcmsgPSAxM18xMDQsXHJcbiAgICBxdWFudHVtQ29tcHV0ZXJDZW50cmUgPSAxM18xMDUsXHJcbiAgICBhdXRvbWF0aXNlZEFzc2VtYmx5Q2VudHJlID0gMTNfMTA2LFxyXG4gICAgaGlnaFBlcmZvcm1hbmNlVHJhbnNmb3JtZXIgPSAxM18xMDcsXHJcbiAgICBtaWNyb2NoaXBBc3NlbWJseUxpbmUgPSAxM18xMDgsXHJcbiAgICBwcm9kdWN0aW9uQXNzZW1ibHlIYWxsID0gMTNfMTA5LFxyXG4gICAgaGlnaFBlcmZvcm1hbmNlU3ludGhlc2lzZXIgPSAxM18xMTAsXHJcbiAgICBjaGlwTWFzc1Byb2R1Y3Rpb24gPSAxM18xMTEsXHJcbiAgICBuYW5vUmVwYWlyQm90cyA9IDEzXzExMixcclxuXHJcbiAgICAvLyBrYWVsZXNoXHJcbiAgICBzYW5jdHVhcnkgPSAxNF8xMDEsXHJcbiAgICBhbnRpbWF0dGVyQ29uZGVuc2VyID0gMTRfMTAyLFxyXG4gICAgdm9ydGV4Q2hhbWJlciA9IDE0XzEwMyxcclxuICAgIGhhbGxzT2ZSZWFsaXNhdGlvbiA9IDE0XzEwNCxcclxuICAgIGZvcnVtT2ZUcmFuc2NlbmRlbmNlID0gMTRfMTA1LFxyXG4gICAgYW50aW1hdHRlckNvbnZlY3RvciA9IDE0XzEwNixcclxuICAgIGNsb25pbmdMYWJvcmF0b3J5ID0gMTRfMTA3LFxyXG4gICAgY2hyeXNhbGlzQWNjZWxlcmF0b3IgPSAxNF8xMDgsXHJcbiAgICBiaW9Nb2RpZmllciA9IDE0XzEwOSxcclxuICAgIHBzaW9uaWNNb2R1bGF0b3IgPSAxNF8xMTAsXHJcbiAgICBzaGlwTWFudWZhY3R1cmluZ0hhbGwgPSAxNF8xMTEsXHJcbiAgICBzdXByYVJlZnJhY3RvciA9IDE0XzExMixcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IExpZmVmb3JtQnVpbGRpbmdUeXBlczogTGlmZWZvcm1CdWlsZGluZ1R5cGVbXSA9IFtcclxuICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLnJlc2lkZW50aWFsU2VjdG9yLFxyXG4gICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUuYmlvc3BoZXJlRmFybSxcclxuICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLnJlc2VhcmNoQ2VudHJlLFxyXG4gICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUuYWNhZGVteU9mU2NpZW5jZXMsXHJcbiAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5uZXVyb0NhbGlicmF0aW9uQ2VudHJlLFxyXG4gICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUuaGlnaEVuZXJneVNtZWx0aW5nLFxyXG4gICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUuZm9vZFNpbG8sXHJcbiAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5mdXNpb25Qb3dlcmVkUHJvZHVjdGlvbixcclxuICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLnNreXNjcmFwZXIsXHJcbiAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5iaW90ZWNoTGFiLFxyXG4gICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUubWV0cm9wb2xpcyxcclxuICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLnBsYW5ldGFyeVNoaWVsZCxcclxuXHJcbiAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5tZWRpdGF0aW9uRW5jbGF2ZSxcclxuICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLmNyeXN0YWxGYXJtLFxyXG4gICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUucnVuZVRlY2hub2xvZ2l1bSxcclxuICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLnJ1bmVGb3JnZSxcclxuICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLm9yaWt0b3JpdW0sXHJcbiAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5tYWdtYUZvcmdlLFxyXG4gICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUuZGlzcnVwdGlvbkNoYW1iZXIsXHJcbiAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5tZWdhbGl0aCxcclxuICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLmNyeXN0YWxSZWZpbmVyeSxcclxuICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLmRldXRlcml1bVN5bnRoZXNpc2VyLFxyXG4gICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUubWluZXJhbFJlc2VhcmNoQ2VudHJlLFxyXG4gICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUuYWR2YW5jZWRSZWN5Y2xpbmdQbGFudCxcclxuXHJcbiAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5hc3NlbWJseUxpbmUsXHJcbiAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5mdXNpb25DZWxsRmFjdG9yeSxcclxuICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLnJvYm90aWNzUmVzZWFyY2hDZW50cmUsXHJcbiAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS51cGRhdGVOZXR3b3JrLFxyXG4gICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUucXVhbnR1bUNvbXB1dGVyQ2VudHJlLFxyXG4gICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUuYXV0b21hdGlzZWRBc3NlbWJseUNlbnRyZSxcclxuICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLmhpZ2hQZXJmb3JtYW5jZVRyYW5zZm9ybWVyLFxyXG4gICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUubWljcm9jaGlwQXNzZW1ibHlMaW5lLFxyXG4gICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUucHJvZHVjdGlvbkFzc2VtYmx5SGFsbCxcclxuICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLmhpZ2hQZXJmb3JtYW5jZVN5bnRoZXNpc2VyLFxyXG4gICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUuY2hpcE1hc3NQcm9kdWN0aW9uLFxyXG4gICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUubmFub1JlcGFpckJvdHMsXHJcblxyXG4gICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUuc2FuY3R1YXJ5LFxyXG4gICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUuYW50aW1hdHRlckNvbmRlbnNlcixcclxuICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLnZvcnRleENoYW1iZXIsXHJcbiAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5oYWxsc09mUmVhbGlzYXRpb24sXHJcbiAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5mb3J1bU9mVHJhbnNjZW5kZW5jZSxcclxuICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLmFudGltYXR0ZXJDb252ZWN0b3IsXHJcbiAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5jbG9uaW5nTGFib3JhdG9yeSxcclxuICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLmNocnlzYWxpc0FjY2VsZXJhdG9yLFxyXG4gICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUuYmlvTW9kaWZpZXIsXHJcbiAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5wc2lvbmljTW9kdWxhdG9yLFxyXG4gICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUuc2hpcE1hbnVmYWN0dXJpbmdIYWxsLFxyXG4gICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUuc3VwcmFSZWZyYWN0b3IsXHJcbl07XHJcblxyXG5leHBvcnQgY29uc3QgTGlmZWZvcm1CdWlsZGluZ1R5cGVzQnlMaWZlZm9ybTogUmVjb3JkPExpZmVmb3JtVHlwZSwgTGlmZWZvcm1CdWlsZGluZ1R5cGVbXT4gPSB7XHJcbiAgICBbTGlmZWZvcm1UeXBlLm5vbmVdOiBbXSxcclxuXHJcbiAgICBbTGlmZWZvcm1UeXBlLmh1bWFuc106IFtcclxuICAgICAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5yZXNpZGVudGlhbFNlY3RvcixcclxuICAgICAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5iaW9zcGhlcmVGYXJtLFxyXG4gICAgICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLnJlc2VhcmNoQ2VudHJlLFxyXG4gICAgICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLmFjYWRlbXlPZlNjaWVuY2VzLFxyXG4gICAgICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLm5ldXJvQ2FsaWJyYXRpb25DZW50cmUsXHJcbiAgICAgICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUuaGlnaEVuZXJneVNtZWx0aW5nLFxyXG4gICAgICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLmZvb2RTaWxvLFxyXG4gICAgICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLmZ1c2lvblBvd2VyZWRQcm9kdWN0aW9uLFxyXG4gICAgICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLnNreXNjcmFwZXIsXHJcbiAgICAgICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUuYmlvdGVjaExhYixcclxuICAgICAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5tZXRyb3BvbGlzLFxyXG4gICAgICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLnBsYW5ldGFyeVNoaWVsZCxcclxuICAgIF0sXHJcbiAgICBbTGlmZWZvcm1UeXBlLnJvY2t0YWxdOiBbXHJcbiAgICAgICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUubWVkaXRhdGlvbkVuY2xhdmUsXHJcbiAgICAgICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUuY3J5c3RhbEZhcm0sXHJcbiAgICAgICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUucnVuZVRlY2hub2xvZ2l1bSxcclxuICAgICAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5ydW5lRm9yZ2UsXHJcbiAgICAgICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUub3Jpa3Rvcml1bSxcclxuICAgICAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5tYWdtYUZvcmdlLFxyXG4gICAgICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLmRpc3J1cHRpb25DaGFtYmVyLFxyXG4gICAgICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLm1lZ2FsaXRoLFxyXG4gICAgICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLmNyeXN0YWxSZWZpbmVyeSxcclxuICAgICAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5kZXV0ZXJpdW1TeW50aGVzaXNlcixcclxuICAgICAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5taW5lcmFsUmVzZWFyY2hDZW50cmUsXHJcbiAgICAgICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUuYWR2YW5jZWRSZWN5Y2xpbmdQbGFudCxcclxuICAgIF0sXHJcbiAgICBbTGlmZWZvcm1UeXBlLm1lY2hhc106IFtcclxuICAgICAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5hc3NlbWJseUxpbmUsXHJcbiAgICAgICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUuZnVzaW9uQ2VsbEZhY3RvcnksXHJcbiAgICAgICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUucm9ib3RpY3NSZXNlYXJjaENlbnRyZSxcclxuICAgICAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS51cGRhdGVOZXR3b3JrLFxyXG4gICAgICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLnF1YW50dW1Db21wdXRlckNlbnRyZSxcclxuICAgICAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5hdXRvbWF0aXNlZEFzc2VtYmx5Q2VudHJlLFxyXG4gICAgICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLmhpZ2hQZXJmb3JtYW5jZVRyYW5zZm9ybWVyLFxyXG4gICAgICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLm1pY3JvY2hpcEFzc2VtYmx5TGluZSxcclxuICAgICAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5wcm9kdWN0aW9uQXNzZW1ibHlIYWxsLFxyXG4gICAgICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLmhpZ2hQZXJmb3JtYW5jZVN5bnRoZXNpc2VyLFxyXG4gICAgICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLmNoaXBNYXNzUHJvZHVjdGlvbixcclxuICAgICAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5uYW5vUmVwYWlyQm90cyxcclxuICAgIF0sXHJcbiAgICBbTGlmZWZvcm1UeXBlLmthZWxlc2hdOiBbXHJcbiAgICAgICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUuc2FuY3R1YXJ5LFxyXG4gICAgICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLmFudGltYXR0ZXJDb25kZW5zZXIsXHJcbiAgICAgICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUudm9ydGV4Q2hhbWJlcixcclxuICAgICAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5oYWxsc09mUmVhbGlzYXRpb24sXHJcbiAgICAgICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUuZm9ydW1PZlRyYW5zY2VuZGVuY2UsXHJcbiAgICAgICAgTGlmZWZvcm1CdWlsZGluZ1R5cGUuYW50aW1hdHRlckNvbnZlY3RvcixcclxuICAgICAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5jbG9uaW5nTGFib3JhdG9yeSxcclxuICAgICAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5jaHJ5c2FsaXNBY2NlbGVyYXRvcixcclxuICAgICAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5iaW9Nb2RpZmllcixcclxuICAgICAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5wc2lvbmljTW9kdWxhdG9yLFxyXG4gICAgICAgIExpZmVmb3JtQnVpbGRpbmdUeXBlLnNoaXBNYW51ZmFjdHVyaW5nSGFsbCxcclxuICAgICAgICBMaWZlZm9ybUJ1aWxkaW5nVHlwZS5zdXByYVJlZnJhY3RvcixcclxuICAgIF0sXHJcbn07IiwiaW1wb3J0IHsgTGlmZWZvcm1UeXBlIH0gZnJvbSBcIi4vTGlmZWZvcm1UeXBlXCI7XHJcblxyXG5leHBvcnQgZW51bSBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlIHtcclxuICAgIC8vIGh1bWFuc1xyXG4gICAgaW50ZXJnYWxhY3RpY0Vudm95cyA9IDExXzIwMSxcclxuICAgIGhpZ2hQZXJmb3JtYW5jZUV4dHJhY3RvcnMgPSAxMV8yMDIsXHJcbiAgICBmdXNpb25Ecml2ZXMgPSAxMV8yMDMsXHJcbiAgICBzdGVhbHRoRmllbGRHZW5lcmF0b3IgPSAxMV8yMDQsXHJcbiAgICBvcmJpdGFsRGVuID0gMTFfMjA1LFxyXG4gICAgcmVzZWFyY2hBSSA9IDExXzIwNixcclxuICAgIGhpZ2hQZXJmb3JtYW5jZVRlcnJhZm9ybWVyID0gMTFfMjA3LFxyXG4gICAgZW5oYW5jZWRQcm9kdWN0aW9uVGVjaG5vbG9naWVzID0gMTFfMjA4LFxyXG4gICAgbGlnaHRGaWdodGVyTWtJSSA9IDExXzIwOSxcclxuICAgIGNydWlzZXJNa0lJID0gMTFfMjEwLFxyXG4gICAgaW1wcm92ZWRMYWJUZWNobm9sb2d5ID0gMTFfMjExLFxyXG4gICAgcGxhc21hVGVycmFmb3JtZXIgPSAxMV8yMTIsXHJcbiAgICBsb3dUZW1wZXJhdHVyZURyaXZlcyA9IDExXzIxMyxcclxuICAgIGJvbWJlck1rSUkgPSAxMV8yMTQsXHJcbiAgICBkZXN0cm95ZXJNa0lJID0gMTFfMjE1LFxyXG4gICAgYmF0dGxlY3J1aXNlck1rSUkgPSAxMV8yMTYsXHJcbiAgICByb2JvdEFzc2lzdGFudHMgPSAxMV8yMTcsXHJcbiAgICBzdXBlcmNvbXB1dGVyID0gMTFfMjE4LFxyXG5cclxuICAgIC8vIHJvY2t0YWxcclxuICAgIHZvbGNhbmljQmF0dGVyaWVzID0gMTJfMjAxLFxyXG4gICAgYWNvdXN0aWNTY2FubmluZyA9IDEyXzIwMixcclxuICAgIGhpZ2hFbmVyZ3lQdW1wU3lzdGVtcyA9IDEyXzIwMyxcclxuICAgIGNhcmdvSG9sZEV4cGFuc2lvbl9DaXZpbGlhblNoaXBzID0gMTJfMjA0LFxyXG4gICAgbWFnbWFQb3dlcmVkUHJvZHVjdGlvbiA9IDEyXzIwNSxcclxuICAgIGdlb3RoZXJtYWxQb3dlclBsYW50cyA9IDEyXzIwNixcclxuICAgIGRlcHRoU291bmRpbmcgPSAxMl8yMDcsXHJcbiAgICBpb25DcnlzdGFsRW5oYW5jZW1lbnRfaGVhdnlGaWdodGVyID0gMTJfMjA4LFxyXG4gICAgaW1wcm92ZWRTdGVsbGFyYXRvciA9IDEyXzIwOSxcclxuICAgIGhhcmRlbmVkRGlhbW9uZERyaWxsSGVhZHMgPSAxMl8yMTAsXHJcbiAgICBzZWlzbWljTWluaW5nVGVjaG5vbG9neSA9IDEyXzIxMSxcclxuICAgIG1hZ21hUG93ZXJlZFB1bXBTeXN0ZW1zID0gMTJfMjEyLFxyXG4gICAgaW9uQ3J5c3RhbE1vZHVsZXMgPSAxMl8yMTMsXHJcbiAgICBvcHRpbWlzZWRTaWxvQ29uc3RydWN0aW9uTWV0aG9kID0gMTJfMjE0LFxyXG4gICAgZGlhbW9uZEVuZXJneVRyYW5zbWl0dGVyID0gMTJfMjE1LFxyXG4gICAgb2JzaWRpYW5TaGllbGRSZWluZm9yY2VtZW50ID0gMTJfMjE2LFxyXG4gICAgcnVuZVNoaWVsZHMgPSAxMl8yMTcsXHJcbiAgICByb2NrdGFsQ29sbGVjdG9yRW5oYW5jZW1lbnQgPSAxMl8yMTgsXHJcblxyXG4gICAgLy8gbWVjaGFzXHJcbiAgICBjYXRhbHlzZXJUZWNobm9sb2d5ID0gMTNfMjAxLFxyXG4gICAgcGxhc21hRHJpdmUgPSAxM18yMDIsXHJcbiAgICBlZmZpY2llbmN5TW9kdWxlID0gMTNfMjAzLFxyXG4gICAgZGVwb3RBSSA9IDEzXzIwNCxcclxuICAgIGdlbmVyYWxPdmVyaGF1bF9saWdodEZpZ2h0ZXIgPSAxM18yMDUsXHJcbiAgICBhdXRvbWF0ZWRUcmFuc3BvcnRMaW5lcyA9IDEzXzIwNixcclxuICAgIGltcHJvdmVkRHJvbmVBSSA9IDEzXzIwNyxcclxuICAgIGV4cGVyaW1lbnRhbFJlY3ljbGluZ1RlY2hub2xvZ3kgPSAxM18yMDgsXHJcbiAgICBnZW5lcmFsT3ZlcmhhdWxfY3J1aXNlciA9IDEzXzIwOSxcclxuICAgIHNsaW5nc2hvdEF1dG9waWxvdCA9IDEzXzIxMCxcclxuICAgIGhpZ2hUZW1wZXJhdHVyZVN1cGVyY29uZHVjdG9ycyA9IDEzXzIxMSxcclxuICAgIGdlbmVyYWxPdmVyaGF1bF9iYXR0bGVzaGlwID0gMTNfMjEyLFxyXG4gICAgYXJ0aWZpY2lhbFN3YXJtSW50ZWxsaWdlbmNlID0gMTNfMjEzLFxyXG4gICAgZ2VuZXJhbE92ZXJoYXVsX2JhdHRsZWNydWlzZXIgPSAxM18yMTQsXHJcbiAgICBnZW5lcmFsT3ZlcmhhdWxfYm9tYmVyID0gMTNfMjE1LFxyXG4gICAgZ2VuZXJhbE92ZXJoYXVsX2Rlc3Ryb3llciA9IDEzXzIxNixcclxuICAgIGV4cGVyaW1lbnRhbFdlYXBvbnNUZWNobm9sb2d5ID0gMTNfMjE3LFxyXG4gICAgbWVjaGFuR2VuZXJhbEVuaGFuY2VtZW50ID0gMTNfMjE4LFxyXG5cclxuICAgIC8vIGthZWxlc2hcclxuICAgIGhlYXRSZWNvdmVyeSA9IDE0XzIwMSxcclxuICAgIHN1bHBoaWRlUHJvY2VzcyA9IDE0XzIwMixcclxuICAgIHBzaW9uaWNOZXR3b3JrID0gMTRfMjAzLFxyXG4gICAgdGVsZWtpbmV0aWNUcmFjdG9yQmVhbSA9IDE0XzIwNCxcclxuICAgIGVuaGFuY2VkU2Vuc29yVGVjaG5vbG9neSA9IDE0XzIwNSxcclxuICAgIG5ldXJvbW9kYWxDb21wcmVzc29yID0gMTRfMjA2LFxyXG4gICAgbmV1cm9JbnRlcmZhY2UgPSAxNF8yMDcsXHJcbiAgICBpbnRlcnBsYW5ldGFyeUFuYWx5c2lzTmV0d29yayA9IDE0XzIwOCxcclxuICAgIG92ZXJjbG9ja2luZ19oZWF2eUZpZ2h0ZXIgPSAxNF8yMDksXHJcbiAgICB0ZWxla2luZXRpY0RyaXZlID0gMTRfMjEwLFxyXG4gICAgc2l4dGhTZW5zZSA9IDE0XzIxMSxcclxuICAgIHBzeWNob2hhcm1vbmlzZXIgPSAxNF8yMTIsXHJcbiAgICBlZmZpY2llbnRTd2FybUludGVsbGlnZW5jZSA9IDE0XzIxMyxcclxuICAgIG92ZXJjbG9ja2luZ19sYXJnZUNhcmdvID0gMTRfMjE0LFxyXG4gICAgZ3Jhdml0YXRpb25TZW5zb3JzID0gMTRfMjE1LFxyXG4gICAgb3ZlcmNsb2NraW5nX2JhdHRsZXNoaXAgPSAxNF8yMTYsXHJcbiAgICBwc2lvbmljU2hpZWxkTWF0cml4ID0gMTRfMjE3LFxyXG4gICAga2FlbGVzaERpc2NvdmVyZXJFbmhhbmNlbWVudCA9IDE0XzIxOCxcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IExpZmVmb3JtVGVjaG5vbG9neVR5cGVzOiBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlW10gPSBbXHJcbiAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmludGVyZ2FsYWN0aWNFbnZveXMsXHJcbiAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmhpZ2hQZXJmb3JtYW5jZUV4dHJhY3RvcnMsXHJcbiAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmZ1c2lvbkRyaXZlcyxcclxuICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuc3RlYWx0aEZpZWxkR2VuZXJhdG9yLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5vcmJpdGFsRGVuLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5yZXNlYXJjaEFJLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5oaWdoUGVyZm9ybWFuY2VUZXJyYWZvcm1lcixcclxuICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuZW5oYW5jZWRQcm9kdWN0aW9uVGVjaG5vbG9naWVzLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5saWdodEZpZ2h0ZXJNa0lJLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5jcnVpc2VyTWtJSSxcclxuICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuaW1wcm92ZWRMYWJUZWNobm9sb2d5LFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5wbGFzbWFUZXJyYWZvcm1lcixcclxuICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUubG93VGVtcGVyYXR1cmVEcml2ZXMsXHJcbiAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmJvbWJlck1rSUksXHJcbiAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmRlc3Ryb3llck1rSUksXHJcbiAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmJhdHRsZWNydWlzZXJNa0lJLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5yb2JvdEFzc2lzdGFudHMsXHJcbiAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnN1cGVyY29tcHV0ZXIsXHJcblxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS52b2xjYW5pY0JhdHRlcmllcyxcclxuICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuYWNvdXN0aWNTY2FubmluZyxcclxuICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuaGlnaEVuZXJneVB1bXBTeXN0ZW1zLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5jYXJnb0hvbGRFeHBhbnNpb25fQ2l2aWxpYW5TaGlwcyxcclxuICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUubWFnbWFQb3dlcmVkUHJvZHVjdGlvbixcclxuICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuZ2VvdGhlcm1hbFBvd2VyUGxhbnRzLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5kZXB0aFNvdW5kaW5nLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5pb25DcnlzdGFsRW5oYW5jZW1lbnRfaGVhdnlGaWdodGVyLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5pbXByb3ZlZFN0ZWxsYXJhdG9yLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5oYXJkZW5lZERpYW1vbmREcmlsbEhlYWRzLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5zZWlzbWljTWluaW5nVGVjaG5vbG9neSxcclxuICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUubWFnbWFQb3dlcmVkUHVtcFN5c3RlbXMsXHJcbiAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmlvbkNyeXN0YWxNb2R1bGVzLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5vcHRpbWlzZWRTaWxvQ29uc3RydWN0aW9uTWV0aG9kLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5kaWFtb25kRW5lcmd5VHJhbnNtaXR0ZXIsXHJcbiAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm9ic2lkaWFuU2hpZWxkUmVpbmZvcmNlbWVudCxcclxuICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUucnVuZVNoaWVsZHMsXHJcbiAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnJvY2t0YWxDb2xsZWN0b3JFbmhhbmNlbWVudCxcclxuXHJcbiAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmNhdGFseXNlclRlY2hub2xvZ3ksXHJcbiAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnBsYXNtYURyaXZlLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5lZmZpY2llbmN5TW9kdWxlLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5kZXBvdEFJLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW5lcmFsT3ZlcmhhdWxfbGlnaHRGaWdodGVyLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5hdXRvbWF0ZWRUcmFuc3BvcnRMaW5lcyxcclxuICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuaW1wcm92ZWREcm9uZUFJLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5leHBlcmltZW50YWxSZWN5Y2xpbmdUZWNobm9sb2d5LFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW5lcmFsT3ZlcmhhdWxfY3J1aXNlcixcclxuICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuc2xpbmdzaG90QXV0b3BpbG90LFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5oaWdoVGVtcGVyYXR1cmVTdXBlcmNvbmR1Y3RvcnMsXHJcbiAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmdlbmVyYWxPdmVyaGF1bF9iYXR0bGVzaGlwLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5hcnRpZmljaWFsU3dhcm1JbnRlbGxpZ2VuY2UsXHJcbiAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmdlbmVyYWxPdmVyaGF1bF9iYXR0bGVjcnVpc2VyLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW5lcmFsT3ZlcmhhdWxfYm9tYmVyLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW5lcmFsT3ZlcmhhdWxfZGVzdHJveWVyLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5leHBlcmltZW50YWxXZWFwb25zVGVjaG5vbG9neSxcclxuICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUubWVjaGFuR2VuZXJhbEVuaGFuY2VtZW50LFxyXG5cclxuICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuaGVhdFJlY292ZXJ5LFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5zdWxwaGlkZVByb2Nlc3MsXHJcbiAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnBzaW9uaWNOZXR3b3JrLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS50ZWxla2luZXRpY1RyYWN0b3JCZWFtLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5lbmhhbmNlZFNlbnNvclRlY2hub2xvZ3ksXHJcbiAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm5ldXJvbW9kYWxDb21wcmVzc29yLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5uZXVyb0ludGVyZmFjZSxcclxuICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuaW50ZXJwbGFuZXRhcnlBbmFseXNpc05ldHdvcmssXHJcbiAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm92ZXJjbG9ja2luZ19oZWF2eUZpZ2h0ZXIsXHJcbiAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnRlbGVraW5ldGljRHJpdmUsXHJcbiAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnNpeHRoU2Vuc2UsXHJcbiAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnBzeWNob2hhcm1vbmlzZXIsXHJcbiAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmVmZmljaWVudFN3YXJtSW50ZWxsaWdlbmNlLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5vdmVyY2xvY2tpbmdfbGFyZ2VDYXJnbyxcclxuICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuZ3Jhdml0YXRpb25TZW5zb3JzLFxyXG4gICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5vdmVyY2xvY2tpbmdfYmF0dGxlc2hpcCxcclxuICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUucHNpb25pY1NoaWVsZE1hdHJpeCxcclxuICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUua2FlbGVzaERpc2NvdmVyZXJFbmhhbmNlbWVudCxcclxuXTtcclxuXHJcbmV4cG9ydCBjb25zdCBMaWZlZm9ybVRlY2hub2xvZ3lTbG90czogUmVjb3JkPExpZmVmb3JtVGVjaG5vbG9neVR5cGUsIG51bWJlcj4gPSB7XHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5pbnRlcmdhbGFjdGljRW52b3lzXTogMSxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmhpZ2hQZXJmb3JtYW5jZUV4dHJhY3RvcnNdOiAyLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZnVzaW9uRHJpdmVzXTogMyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnN0ZWFsdGhGaWVsZEdlbmVyYXRvcl06IDQsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5vcmJpdGFsRGVuXTogNSxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnJlc2VhcmNoQUldOiA2LFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuaGlnaFBlcmZvcm1hbmNlVGVycmFmb3JtZXJdOiA3LFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZW5oYW5jZWRQcm9kdWN0aW9uVGVjaG5vbG9naWVzXTogOCxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmxpZ2h0RmlnaHRlck1rSUldOiA5LFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuY3J1aXNlck1rSUldOiAxMCxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmltcHJvdmVkTGFiVGVjaG5vbG9neV06IDExLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUucGxhc21hVGVycmFmb3JtZXJdOiAxMixcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmxvd1RlbXBlcmF0dXJlRHJpdmVzXTogMTMsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5ib21iZXJNa0lJXTogMTQsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5kZXN0cm95ZXJNa0lJXTogMTUsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5iYXR0bGVjcnVpc2VyTWtJSV06IDE2LFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUucm9ib3RBc3Npc3RhbnRzXTogMTcsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5zdXBlcmNvbXB1dGVyXTogMTgsXHJcblxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUudm9sY2FuaWNCYXR0ZXJpZXNdOiAxLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuYWNvdXN0aWNTY2FubmluZ106IDIsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5oaWdoRW5lcmd5UHVtcFN5c3RlbXNdOiAzLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuY2FyZ29Ib2xkRXhwYW5zaW9uX0NpdmlsaWFuU2hpcHNdOiA0LFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUubWFnbWFQb3dlcmVkUHJvZHVjdGlvbl06IDUsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW90aGVybWFsUG93ZXJQbGFudHNdOiA2LFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZGVwdGhTb3VuZGluZ106IDcsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5pb25DcnlzdGFsRW5oYW5jZW1lbnRfaGVhdnlGaWdodGVyXTogOCxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmltcHJvdmVkU3RlbGxhcmF0b3JdOiA5LFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuaGFyZGVuZWREaWFtb25kRHJpbGxIZWFkc106IDEwLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuc2Vpc21pY01pbmluZ1RlY2hub2xvZ3ldOiAxMSxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm1hZ21hUG93ZXJlZFB1bXBTeXN0ZW1zXTogMTIsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5pb25DcnlzdGFsTW9kdWxlc106IDEzLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUub3B0aW1pc2VkU2lsb0NvbnN0cnVjdGlvbk1ldGhvZF06IDE0LFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZGlhbW9uZEVuZXJneVRyYW5zbWl0dGVyXTogMTUsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5vYnNpZGlhblNoaWVsZFJlaW5mb3JjZW1lbnRdOiAxNixcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnJ1bmVTaGllbGRzXTogMTcsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5yb2NrdGFsQ29sbGVjdG9yRW5oYW5jZW1lbnRdOiAxOCxcclxuXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5jYXRhbHlzZXJUZWNobm9sb2d5XTogMSxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnBsYXNtYURyaXZlXTogMixcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmVmZmljaWVuY3lNb2R1bGVdOiAzLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZGVwb3RBSV06IDQsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW5lcmFsT3ZlcmhhdWxfbGlnaHRGaWdodGVyXTogNSxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmF1dG9tYXRlZFRyYW5zcG9ydExpbmVzXTogNixcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmltcHJvdmVkRHJvbmVBSV06IDcsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5leHBlcmltZW50YWxSZWN5Y2xpbmdUZWNobm9sb2d5XTogOCxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmdlbmVyYWxPdmVyaGF1bF9jcnVpc2VyXTogOSxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnNsaW5nc2hvdEF1dG9waWxvdF06IDEwLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuaGlnaFRlbXBlcmF0dXJlU3VwZXJjb25kdWN0b3JzXTogMTEsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW5lcmFsT3ZlcmhhdWxfYmF0dGxlc2hpcF06IDEyLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuYXJ0aWZpY2lhbFN3YXJtSW50ZWxsaWdlbmNlXTogMTMsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW5lcmFsT3ZlcmhhdWxfYmF0dGxlY3J1aXNlcl06IDE0LFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZ2VuZXJhbE92ZXJoYXVsX2JvbWJlcl06IDE1LFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZ2VuZXJhbE92ZXJoYXVsX2Rlc3Ryb3llcl06IDE2LFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZXhwZXJpbWVudGFsV2VhcG9uc1RlY2hub2xvZ3ldOiAxNyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm1lY2hhbkdlbmVyYWxFbmhhbmNlbWVudF06IDE4LFxyXG5cclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmhlYXRSZWNvdmVyeV06IDEsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5zdWxwaGlkZVByb2Nlc3NdOiAyLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUucHNpb25pY05ldHdvcmtdOiAzLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUudGVsZWtpbmV0aWNUcmFjdG9yQmVhbV06IDQsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5lbmhhbmNlZFNlbnNvclRlY2hub2xvZ3ldOiA1LFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUubmV1cm9tb2RhbENvbXByZXNzb3JdOiA2LFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUubmV1cm9JbnRlcmZhY2VdOiA3LFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuaW50ZXJwbGFuZXRhcnlBbmFseXNpc05ldHdvcmtdOiA4LFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUub3ZlcmNsb2NraW5nX2hlYXZ5RmlnaHRlcl06IDksXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS50ZWxla2luZXRpY0RyaXZlXTogMTAsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5zaXh0aFNlbnNlXTogMTEsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5wc3ljaG9oYXJtb25pc2VyXTogMTIsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5lZmZpY2llbnRTd2FybUludGVsbGlnZW5jZV06IDEzLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUub3ZlcmNsb2NraW5nX2xhcmdlQ2FyZ29dOiAxNCxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmdyYXZpdGF0aW9uU2Vuc29yc106IDE1LFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUub3ZlcmNsb2NraW5nX2JhdHRsZXNoaXBdOiAxNixcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnBzaW9uaWNTaGllbGRNYXRyaXhdOiAxNyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmthZWxlc2hEaXNjb3ZlcmVyRW5oYW5jZW1lbnRdOiAxOCxcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlc0J5TGlmZWZvcm06IFJlY29yZDxMaWZlZm9ybVR5cGUsIExpZmVmb3JtVGVjaG5vbG9neVR5cGVbXT4gPSB7XHJcbiAgICBbTGlmZWZvcm1UeXBlLm5vbmVdOiBbXSxcclxuXHJcbiAgICBbTGlmZWZvcm1UeXBlLmh1bWFuc106IFtcclxuICAgICAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmludGVyZ2FsYWN0aWNFbnZveXMsXHJcbiAgICAgICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5oaWdoUGVyZm9ybWFuY2VFeHRyYWN0b3JzLFxyXG4gICAgICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuZnVzaW9uRHJpdmVzLFxyXG4gICAgICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuc3RlYWx0aEZpZWxkR2VuZXJhdG9yLFxyXG4gICAgICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUub3JiaXRhbERlbixcclxuICAgICAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnJlc2VhcmNoQUksXHJcbiAgICAgICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5oaWdoUGVyZm9ybWFuY2VUZXJyYWZvcm1lcixcclxuICAgICAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmVuaGFuY2VkUHJvZHVjdGlvblRlY2hub2xvZ2llcyxcclxuICAgICAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmxpZ2h0RmlnaHRlck1rSUksXHJcbiAgICAgICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5jcnVpc2VyTWtJSSxcclxuICAgICAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmltcHJvdmVkTGFiVGVjaG5vbG9neSxcclxuICAgICAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnBsYXNtYVRlcnJhZm9ybWVyLFxyXG4gICAgICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUubG93VGVtcGVyYXR1cmVEcml2ZXMsXHJcbiAgICAgICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5ib21iZXJNa0lJLFxyXG4gICAgICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuZGVzdHJveWVyTWtJSSxcclxuICAgICAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmJhdHRsZWNydWlzZXJNa0lJLFxyXG4gICAgICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUucm9ib3RBc3Npc3RhbnRzLFxyXG4gICAgICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuc3VwZXJjb21wdXRlcixcclxuICAgIF0sXHJcblxyXG4gICAgW0xpZmVmb3JtVHlwZS5yb2NrdGFsXTogW1xyXG4gICAgICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUudm9sY2FuaWNCYXR0ZXJpZXMsXHJcbiAgICAgICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5hY291c3RpY1NjYW5uaW5nLFxyXG4gICAgICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuaGlnaEVuZXJneVB1bXBTeXN0ZW1zLFxyXG4gICAgICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuY2FyZ29Ib2xkRXhwYW5zaW9uX0NpdmlsaWFuU2hpcHMsXHJcbiAgICAgICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5tYWdtYVBvd2VyZWRQcm9kdWN0aW9uLFxyXG4gICAgICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuZ2VvdGhlcm1hbFBvd2VyUGxhbnRzLFxyXG4gICAgICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuZGVwdGhTb3VuZGluZyxcclxuICAgICAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmlvbkNyeXN0YWxFbmhhbmNlbWVudF9oZWF2eUZpZ2h0ZXIsXHJcbiAgICAgICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5pbXByb3ZlZFN0ZWxsYXJhdG9yLFxyXG4gICAgICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuaGFyZGVuZWREaWFtb25kRHJpbGxIZWFkcyxcclxuICAgICAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnNlaXNtaWNNaW5pbmdUZWNobm9sb2d5LFxyXG4gICAgICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUubWFnbWFQb3dlcmVkUHVtcFN5c3RlbXMsXHJcbiAgICAgICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5pb25DcnlzdGFsTW9kdWxlcyxcclxuICAgICAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm9wdGltaXNlZFNpbG9Db25zdHJ1Y3Rpb25NZXRob2QsXHJcbiAgICAgICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5kaWFtb25kRW5lcmd5VHJhbnNtaXR0ZXIsXHJcbiAgICAgICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5vYnNpZGlhblNoaWVsZFJlaW5mb3JjZW1lbnQsXHJcbiAgICAgICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5ydW5lU2hpZWxkcyxcclxuICAgICAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnJvY2t0YWxDb2xsZWN0b3JFbmhhbmNlbWVudCxcclxuICAgIF0sXHJcblxyXG4gICAgW0xpZmVmb3JtVHlwZS5tZWNoYXNdOiBbXHJcbiAgICAgICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5jYXRhbHlzZXJUZWNobm9sb2d5LFxyXG4gICAgICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUucGxhc21hRHJpdmUsXHJcbiAgICAgICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5lZmZpY2llbmN5TW9kdWxlLFxyXG4gICAgICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuZGVwb3RBSSxcclxuICAgICAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmdlbmVyYWxPdmVyaGF1bF9saWdodEZpZ2h0ZXIsXHJcbiAgICAgICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5hdXRvbWF0ZWRUcmFuc3BvcnRMaW5lcyxcclxuICAgICAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmltcHJvdmVkRHJvbmVBSSxcclxuICAgICAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmV4cGVyaW1lbnRhbFJlY3ljbGluZ1RlY2hub2xvZ3ksXHJcbiAgICAgICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW5lcmFsT3ZlcmhhdWxfY3J1aXNlcixcclxuICAgICAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnNsaW5nc2hvdEF1dG9waWxvdCxcclxuICAgICAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmhpZ2hUZW1wZXJhdHVyZVN1cGVyY29uZHVjdG9ycyxcclxuICAgICAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmdlbmVyYWxPdmVyaGF1bF9iYXR0bGVzaGlwLFxyXG4gICAgICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuYXJ0aWZpY2lhbFN3YXJtSW50ZWxsaWdlbmNlLFxyXG4gICAgICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuZ2VuZXJhbE92ZXJoYXVsX2JhdHRsZWNydWlzZXIsXHJcbiAgICAgICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW5lcmFsT3ZlcmhhdWxfYm9tYmVyLFxyXG4gICAgICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuZ2VuZXJhbE92ZXJoYXVsX2Rlc3Ryb3llcixcclxuICAgICAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmV4cGVyaW1lbnRhbFdlYXBvbnNUZWNobm9sb2d5LFxyXG4gICAgICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUubWVjaGFuR2VuZXJhbEVuaGFuY2VtZW50LFxyXG4gICAgXSxcclxuXHJcbiAgICBbTGlmZWZvcm1UeXBlLmthZWxlc2hdOiBbXHJcbiAgICAgICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5oZWF0UmVjb3ZlcnksXHJcbiAgICAgICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5zdWxwaGlkZVByb2Nlc3MsXHJcbiAgICAgICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5wc2lvbmljTmV0d29yayxcclxuICAgICAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnRlbGVraW5ldGljVHJhY3RvckJlYW0sXHJcbiAgICAgICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5lbmhhbmNlZFNlbnNvclRlY2hub2xvZ3ksXHJcbiAgICAgICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5uZXVyb21vZGFsQ29tcHJlc3NvcixcclxuICAgICAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm5ldXJvSW50ZXJmYWNlLFxyXG4gICAgICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuaW50ZXJwbGFuZXRhcnlBbmFseXNpc05ldHdvcmssXHJcbiAgICAgICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5vdmVyY2xvY2tpbmdfaGVhdnlGaWdodGVyLFxyXG4gICAgICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUudGVsZWtpbmV0aWNEcml2ZSxcclxuICAgICAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnNpeHRoU2Vuc2UsXHJcbiAgICAgICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5wc3ljaG9oYXJtb25pc2VyLFxyXG4gICAgICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUuZWZmaWNpZW50U3dhcm1JbnRlbGxpZ2VuY2UsXHJcbiAgICAgICAgTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5vdmVyY2xvY2tpbmdfbGFyZ2VDYXJnbyxcclxuICAgICAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmdyYXZpdGF0aW9uU2Vuc29ycyxcclxuICAgICAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm92ZXJjbG9ja2luZ19iYXR0bGVzaGlwLFxyXG4gICAgICAgIExpZmVmb3JtVGVjaG5vbG9neVR5cGUucHNpb25pY1NoaWVsZE1hdHJpeCxcclxuICAgICAgICBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmthZWxlc2hEaXNjb3ZlcmVyRW5oYW5jZW1lbnQsXHJcbiAgICBdLFxyXG59OyIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZWNvcmQ8VEtleSBleHRlbmRzIHN0cmluZyB8IG51bWJlciB8IHN5bWJvbCwgVFZhbHVlPihcclxuICAgIGtleXM6IFRLZXlbXSxcclxuICAgIGRlZmF1bHRWYWx1ZTogVFZhbHVlIHwgKChrZXk6IFRLZXkpID0+IFRWYWx1ZSlcclxuKTogUmVjb3JkPFRLZXksIFRWYWx1ZT4ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0ge30gYXMgUmVjb3JkPFRLZXksIFRWYWx1ZT47XHJcbiAgICBrZXlzLmZvckVhY2goa2V5ID0+XHJcbiAgICAgICAgcmVzdWx0W2tleV0gPSBkZWZhdWx0VmFsdWUgaW5zdGFuY2VvZiBGdW5jdGlvblxyXG4gICAgICAgICAgICA/IGRlZmF1bHRWYWx1ZShrZXkpXHJcbiAgICAgICAgICAgIDogZGVmYXVsdFZhbHVlXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNYXBwZWRSZWNvcmQ8VCwgVEtleSBleHRlbmRzIHN0cmluZyB8IG51bWJlciB8IHN5bWJvbCwgVFZhbHVlPihcclxuICAgIGlucHV0OiBUW10sXHJcbiAgICBtYXBLZXlzOiAodmFsdWU6IFQpID0+IFRLZXksXHJcbiAgICBkZWZhdWx0VmFsdWU6IFRWYWx1ZSB8ICgodmFsdWU6IFQpID0+IFRWYWx1ZSlcclxuKTogUmVjb3JkPFRLZXksIFRWYWx1ZT4ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0ge30gYXMgUmVjb3JkPFRLZXksIFRWYWx1ZT47XHJcbiAgICBpbnB1dC5mb3JFYWNoKGkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGtleSA9IG1hcEtleXMoaSk7XHJcblxyXG4gICAgICAgIHJlc3VsdFtrZXldID0gZGVmYXVsdFZhbHVlIGluc3RhbmNlb2YgRnVuY3Rpb25cclxuICAgICAgICAgICAgPyBkZWZhdWx0VmFsdWUoaSlcclxuICAgICAgICAgICAgOiBkZWZhdWx0VmFsdWVcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn0iLCJpbXBvcnQgeyBfbG9nLCBfbG9nRXJyb3IgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL3V0aWxzL19sb2dcIjtcclxuaW1wb3J0IHsgX3Rocm93IH0gZnJvbSBcIi4uLy4uL3NoYXJlZC91dGlscy9fdGhyb3dcIjtcclxuaW1wb3J0IHsgTWVzc2FnZU9nYW1lTWV0YSB9IGZyb20gXCIuLi8uLi9zaGFyZWQvbWVzc2FnZXMvTWVzc2FnZVwiO1xyXG5pbXBvcnQgeyBQbGF5ZXJPZmZpY2VycyB9IGZyb20gXCIuLi8uLi9zaGFyZWQvbW9kZWxzL2VtcGlyZS9QbGF5ZXJPZmZpY2Vyc1wiO1xyXG5pbXBvcnQgeyBBbGxpYW5jZUNsYXNzIH0gZnJvbSBcIi4uLy4uL3NoYXJlZC9tb2RlbHMvb2dhbWUvY2xhc3Nlcy9BbGxpYW5jZUNsYXNzXCI7XHJcbmltcG9ydCB7IEJ1aWxkaW5nVHlwZSwgTW9vbkJ1aWxkaW5nVHlwZSwgUGxhbmV0QnVpbGRpbmdUeXBlIH0gZnJvbSBcIi4uLy4uL3NoYXJlZC9tb2RlbHMvb2dhbWUvYnVpbGRpbmdzL0J1aWxkaW5nVHlwZVwiO1xyXG5pbXBvcnQgeyBNb29uQnVpbGRpbmdUeXBlcywgUGxhbmV0QnVpbGRpbmdUeXBlcyB9IGZyb20gXCIuLi8uLi9zaGFyZWQvbW9kZWxzL29nYW1lL2J1aWxkaW5ncy9CdWlsZGluZ1R5cGVzXCI7XHJcbmltcG9ydCB7IEJhc2ljUGxhbmV0RGF0YSwgUGxhbmV0RGF0YVdyYXBwZXIsIFBsYW5ldERlZmVuc2VDb3VudHMsIFBsYW5ldE1pc3NpbGVDb3VudHMgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL21lc3NhZ2VzL3RyYWNraW5nL2VtcGlyZVwiO1xyXG5pbXBvcnQgeyBwYXJzZUludFNhZmUgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL3V0aWxzL3BhcnNlTnVtYmVyc1wiO1xyXG5pbXBvcnQgeyBTaGlwVHlwZSB9IGZyb20gXCIuLi8uLi9zaGFyZWQvbW9kZWxzL29nYW1lL3NoaXBzL1NoaXBUeXBlXCI7XHJcbmltcG9ydCB7IFNoaXBUeXBlcyB9IGZyb20gXCIuLi8uLi9zaGFyZWQvbW9kZWxzL29nYW1lL3NoaXBzL1NoaXBUeXBlc1wiO1xyXG5pbXBvcnQgeyBQbGF5ZXJDbGFzcyB9IGZyb20gXCIuLi8uLi9zaGFyZWQvbW9kZWxzL29nYW1lL2NsYXNzZXMvUGxheWVyQ2xhc3NcIjtcclxuaW1wb3J0IHsgUmVzZWFyY2hUeXBlIH0gZnJvbSBcIi4uLy4uL3NoYXJlZC9tb2RlbHMvb2dhbWUvcmVzZWFyY2gvUmVzZWFyY2hUeXBlXCI7XHJcbmltcG9ydCB7IFJlc2VhcmNoVHlwZXMgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL21vZGVscy9vZ2FtZS9yZXNlYXJjaC9SZXNlYXJjaFR5cGVzXCI7XHJcbmltcG9ydCB7IFByb2R1Y3Rpb25TZXR0aW5ncyB9IGZyb20gXCIuLi8uLi9zaGFyZWQvbW9kZWxzL2VtcGlyZS9Qcm9kdWN0aW9uU2V0dGluZ3NcIjtcclxuaW1wb3J0IHsgUGxhbmV0QWN0aXZlSXRlbXMgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL21vZGVscy9lbXBpcmUvUGxhbmV0QWN0aXZlSXRlbXNcIjtcclxuaW1wb3J0IHsgZ2V0UGxheWVyRGF0YWJhc2UgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL2RiL2FjY2Vzc1wiO1xyXG5pbXBvcnQgeyBEYkRlZmVuc2VBbW91bnRzLCBEYkZsZWV0cywgRGJNaXNzaWxlQW1vdW50cywgRGJNb29uQnVpbGRpbmdMZXZlbHMsIERiUGxhbmV0QnVpbGRpbmdMZXZlbHMsIERiUGxhbmV0TGlmZWZvcm1CdWlsZGluZ0xldmVscywgRGJQbGFuZXRMaWZlZm9ybVRlY2hub2xvZ3lMZXZlbHMsIERiUGxheWVyTGlmZWZvcm1FeHBlcmllbmNlLCBEYlBsYXllclJlc2VhcmNoTGV2ZWxzLCBEYlNoaXBBbW91bnRzIH0gZnJvbSBcIkAvc2hhcmVkL2RiL3NjaGVtYS9wbGF5ZXJcIjtcclxuaW1wb3J0IHsgTGlmZWZvcm1CdWlsZGluZ1R5cGUsIExpZmVmb3JtQnVpbGRpbmdUeXBlcyB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvb2dhbWUvbGlmZWZvcm1zL0xpZmVmb3JtQnVpbGRpbmdUeXBlXCI7XHJcbmltcG9ydCB7IExpZmVmb3JtVGVjaG5vbG9neVR5cGUsIExpZmVmb3JtVGVjaG5vbG9neVR5cGVzIH0gZnJvbSBcIkAvc2hhcmVkL21vZGVscy9vZ2FtZS9saWZlZm9ybXMvTGlmZWZvcm1UZWNobm9sb2d5VHlwZVwiO1xyXG5pbXBvcnQgeyBMaWZlZm9ybVR5cGUsIFZhbGlkTGlmZWZvcm1UeXBlcyB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvb2dhbWUvbGlmZWZvcm1zL0xpZmVmb3JtVHlwZVwiO1xyXG5pbXBvcnQgeyBjcmVhdGVSZWNvcmQgfSBmcm9tIFwiQC9zaGFyZWQvdXRpbHMvY3JlYXRlUmVjb3JkXCI7XHJcbmltcG9ydCB7IEZsZWV0cyB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvb2dhbWUvZmxlZXRzL3R5cGVzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRW1waXJlTW9kdWxlIHtcclxuICAgIHB1YmxpYyBhc3luYyB1cGRhdGVPZmZpY2VycyhtZXRhOiBNZXNzYWdlT2dhbWVNZXRhLCBkYXRhOiBQbGF5ZXJPZmZpY2Vycyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGNvbnN0IGRiID0gYXdhaXQgZ2V0UGxheWVyRGF0YWJhc2UobWV0YSk7XHJcbiAgICAgICAgYXdhaXQgZGIucHV0KCdlbXBpcmUnLCBkYXRhLCAnb2ZmaWNlcnMnKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgdXBkYXRlQWxsaWFuY2UobWV0YTogTWVzc2FnZU9nYW1lTWV0YSwgZGF0YTogQWxsaWFuY2VDbGFzcykge1xyXG4gICAgICAgIGNvbnN0IGRiID0gYXdhaXQgZ2V0UGxheWVyRGF0YWJhc2UobWV0YSk7XHJcbiAgICAgICAgYXdhaXQgZGIucHV0KCdlbXBpcmUnLCBkYXRhLCAnYWxsaWFuY2VDbGFzcycpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyB1cGRhdGVBY3RpdmVJdGVtcyhtZXRhOiBNZXNzYWdlT2dhbWVNZXRhLCBkYXRhOiBQbGFuZXREYXRhV3JhcHBlcjxQbGFuZXRBY3RpdmVJdGVtcz4pIHtcclxuICAgICAgICBjb25zdCBkYiA9IGF3YWl0IGdldFBsYXllckRhdGFiYXNlKG1ldGEpO1xyXG4gICAgICAgIGNvbnN0IGtleTogKGBtb29uLiR7bnVtYmVyfS5hY3RpdmVJdGVtc2AgfCBgcGxhbmV0LiR7bnVtYmVyfS5hY3RpdmVJdGVtc2ApID0gYCR7ZGF0YS5pc01vb24gPyAnbW9vbicgOiAncGxhbmV0J30uJHtkYXRhLnBsYW5ldElkfS5hY3RpdmVJdGVtc2A7XHJcbiAgICAgICAgYXdhaXQgZGIucHV0KCdlbXBpcmUnLCBkYXRhLmRhdGEsIGtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIHVwZGF0ZUJ1aWxkaW5nTGV2ZWxzKG1ldGE6IE1lc3NhZ2VPZ2FtZU1ldGEsIGRhdGE6IFBsYW5ldERhdGFXcmFwcGVyPFBhcnRpYWw8UmVjb3JkPEJ1aWxkaW5nVHlwZSwgbnVtYmVyPj4+KSB7XHJcbiAgICAgICAgY29uc3QgZGIgPSBhd2FpdCBnZXRQbGF5ZXJEYXRhYmFzZShtZXRhKTtcclxuICAgICAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKCdlbXBpcmUnLCAncmVhZHdyaXRlJyk7XHJcbiAgICAgICAgY29uc3Qgc3RvcmUgPSB0eC5vYmplY3RTdG9yZSgnZW1waXJlJyk7XHJcblxyXG4gICAgICAgIGlmIChkYXRhLmlzTW9vbikge1xyXG4gICAgICAgICAgICBjb25zdCBrZXk6IGBtb29uLiR7bnVtYmVyfS5idWlsZGluZ3NgID0gYG1vb24uJHtkYXRhLnBsYW5ldElkfS5idWlsZGluZ3NgO1xyXG4gICAgICAgICAgICBjb25zdCBzdG9yZWRMZXZlbHMgPSAoYXdhaXQgc3RvcmUuZ2V0KGtleSkpIGFzIERiTW9vbkJ1aWxkaW5nTGV2ZWxzIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdMZXZlbHM6IERiTW9vbkJ1aWxkaW5nTGV2ZWxzID0ge1xyXG4gICAgICAgICAgICAgICAgLi4uY3JlYXRlUmVjb3JkKE1vb25CdWlsZGluZ1R5cGVzLCAwKSxcclxuICAgICAgICAgICAgICAgIC4uLnN0b3JlZExldmVscyxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgT2JqZWN0LmtleXMoZGF0YS5kYXRhKVxyXG4gICAgICAgICAgICAgICAgLm1hcChrZXkgPT4gcGFyc2VJbnRTYWZlKGtleSwgMTApIGFzIE1vb25CdWlsZGluZ1R5cGUpXHJcbiAgICAgICAgICAgICAgICAuZm9yRWFjaChrZXkgPT4gbmV3TGV2ZWxzW2tleV0gPSBkYXRhLmRhdGFba2V5XSA/PyBuZXdMZXZlbHNba2V5XSA/PyAwKTtcclxuXHJcbiAgICAgICAgICAgIGF3YWl0IHN0b3JlLnB1dChuZXdMZXZlbHMsIGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBrZXk6IGBwbGFuZXQuJHtudW1iZXJ9LmJ1aWxkaW5nc2AgPSBgcGxhbmV0LiR7ZGF0YS5wbGFuZXRJZH0uYnVpbGRpbmdzYDtcclxuICAgICAgICAgICAgY29uc3Qgc3RvcmVkTGV2ZWxzID0gKGF3YWl0IHN0b3JlLmdldChrZXkpKSBhcyBEYlBsYW5ldEJ1aWxkaW5nTGV2ZWxzIHwgdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdMZXZlbHM6IERiUGxhbmV0QnVpbGRpbmdMZXZlbHMgPSB7XHJcbiAgICAgICAgICAgICAgICAuLi5jcmVhdGVSZWNvcmQoUGxhbmV0QnVpbGRpbmdUeXBlcywgMCksXHJcbiAgICAgICAgICAgICAgICAuLi5zdG9yZWRMZXZlbHMsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGRhdGEuZGF0YSlcclxuICAgICAgICAgICAgICAgIC5tYXAoa2V5ID0+IHBhcnNlSW50U2FmZShrZXksIDEwKSBhcyBQbGFuZXRCdWlsZGluZ1R5cGUpXHJcbiAgICAgICAgICAgICAgICAuZm9yRWFjaChrZXkgPT4gbmV3TGV2ZWxzW2tleV0gPSBkYXRhLmRhdGFba2V5XSA/PyBuZXdMZXZlbHNba2V5XSA/PyAwKTtcclxuXHJcbiAgICAgICAgICAgIGF3YWl0IHN0b3JlLnB1dChuZXdMZXZlbHMsIGtleSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhd2FpdCB0eC5kb25lO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyB1cGRhdGVCYXNpY1BsYW5ldHMobWV0YTogTWVzc2FnZU9nYW1lTWV0YSwgZGF0YTogQmFzaWNQbGFuZXREYXRhW10pIHtcclxuICAgICAgICBjb25zdCBkYiA9IGF3YWl0IGdldFBsYXllckRhdGFiYXNlKG1ldGEpO1xyXG4gICAgICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oJ2VtcGlyZScsICdyZWFkd3JpdGUnKTtcclxuICAgICAgICBjb25zdCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdlbXBpcmUnKTtcclxuXHJcbiAgICAgICAgLy8gc2F2ZSBvcmRlclxyXG4gICAgICAgIGNvbnN0IG9yZGVyID0gZGF0YS5tYXAocCA9PiBwLmlkKTtcclxuICAgICAgICBhd2FpdCBzdG9yZS5wdXQob3JkZXIsICdwbGFuZXRPcmRlcicpO1xyXG5cclxuICAgICAgICAvLyBzYXZlIGJhc2ljIGRhdGFcclxuICAgICAgICBmb3IgKGNvbnN0IHBsYW5ldE9yTW9vbiBvZiBkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmIChwbGFuZXRPck1vb24uaXNNb29uKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBzdG9yZS5wdXQocGxhbmV0T3JNb29uLCBgbW9vbi4ke3BsYW5ldE9yTW9vbi5pZH1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHN0b3JlLnB1dChwbGFuZXRPck1vb24sIGBwbGFuZXQuJHtwbGFuZXRPck1vb24uaWR9YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHJlbW92ZSBtb29ucyBhbmQgcGxhbmV0cyB3aGljaCBkb24ndCBleGlzdCBhbnltb3JlXHJcbiAgICAgICAgY29uc3QgYWxsS2V5cyA9IGF3YWl0IHN0b3JlLmdldEFsbEtleXMoKTtcclxuICAgICAgICBjb25zdCByZW1vdmVLZXlzID0gYWxsS2V5c1xyXG4gICAgICAgICAgICAuZmlsdGVyKGtleSA9PiBrZXkuc3RhcnRzV2l0aCgnbW9vbi4nKSB8fCBrZXkuc3RhcnRzV2l0aCgncGxhbmV0LicpKVxyXG4gICAgICAgICAgICAuZmlsdGVyKGtleSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtYXRjaCA9IGtleS5tYXRjaCgvXihwbGFuZXR8bW9vbilcXC4oPzxpZD5cXGQrKShcXC58JCkvKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlkU3RyaW5nID0gbWF0Y2g/Lmdyb3Vwcz8uaWQgPz8gX3Rocm93KCdubyBtYXRjaCcpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSBwYXJzZUludFNhZmUoaWRTdHJpbmcsIDEwKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gIWRhdGEuc29tZShkID0+IGQuaWQgPT0gaWQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICBmb3IgKGNvbnN0IHJlbW92ZUtleSBvZiByZW1vdmVLZXlzKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHN0b3JlLmRlbGV0ZShyZW1vdmVLZXkpO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGF3YWl0IHR4LmRvbmU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIHVwZGF0ZVBsYW5ldERlZmVuc2VzKG1ldGE6IE1lc3NhZ2VPZ2FtZU1ldGEsIGRhdGE6IFBsYW5ldERhdGFXcmFwcGVyPFBsYW5ldERlZmVuc2VDb3VudHM+KSB7XHJcbiAgICAgICAgY29uc3QgZGIgPSBhd2FpdCBnZXRQbGF5ZXJEYXRhYmFzZShtZXRhKTtcclxuICAgICAgICBjb25zdCBrZXk6IChgcGxhbmV0LiR7bnVtYmVyfS5kZWZlbnNlc2AgfCBgbW9vbi4ke251bWJlcn0uZGVmZW5zZXNgKSA9IGAke2RhdGEuaXNNb29uID8gJ21vb24nIDogJ3BsYW5ldCd9LiR7ZGF0YS5wbGFuZXRJZH0uZGVmZW5zZXNgO1xyXG4gICAgICAgIGNvbnN0IGFtb3VudHM6IERiRGVmZW5zZUFtb3VudHMgPSBkYXRhLmRhdGE7XHJcbiAgICAgICAgYXdhaXQgZGIucHV0KCdlbXBpcmUnLCBhbW91bnRzLCBrZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyB1cGRhdGVQbGFuZXRNaXNzaWxlcyhtZXRhOiBNZXNzYWdlT2dhbWVNZXRhLCBkYXRhOiBQbGFuZXREYXRhV3JhcHBlcjxQbGFuZXRNaXNzaWxlQ291bnRzPikge1xyXG4gICAgICAgIGlmKGRhdGEuaXNNb29uKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGRiID0gYXdhaXQgZ2V0UGxheWVyRGF0YWJhc2UobWV0YSk7XHJcbiAgICAgICAgY29uc3Qga2V5OiBgcGxhbmV0LiR7bnVtYmVyfS5taXNzaWxlc2A9IGBwbGFuZXQuJHtkYXRhLnBsYW5ldElkfS5taXNzaWxlc2A7XHJcbiAgICAgICAgY29uc3QgYW1vdW50czogRGJNaXNzaWxlQW1vdW50cyA9IGRhdGEuZGF0YTtcclxuICAgICAgICBhd2FpdCBkYi5wdXQoJ2VtcGlyZScsIGFtb3VudHMsIGtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIHVwZGF0ZVBsYW5ldFNoaXBzKG1ldGE6IE1lc3NhZ2VPZ2FtZU1ldGEsIGRhdGE6IFBsYW5ldERhdGFXcmFwcGVyPFBhcnRpYWw8UmVjb3JkPFNoaXBUeXBlLCBudW1iZXI+Pj4pIHtcclxuICAgICAgICBjb25zdCBkYiA9IGF3YWl0IGdldFBsYXllckRhdGFiYXNlKG1ldGEpO1xyXG4gICAgICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oJ2VtcGlyZScsICdyZWFkd3JpdGUnKTtcclxuICAgICAgICBjb25zdCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdlbXBpcmUnKTtcclxuXHJcbiAgICAgICAgY29uc3Qga2V5OiAoYHBsYW5ldC4ke251bWJlcn0uc2hpcHNgIHwgYG1vb24uJHtudW1iZXJ9LnNoaXBzYCkgPSBgJHtkYXRhLmlzTW9vbiA/ICdtb29uJyA6ICdwbGFuZXQnfS4ke2RhdGEucGxhbmV0SWR9LnNoaXBzYDtcclxuXHJcbiAgICAgICAgY29uc3Qgc3RvcmVkQW1vdW50cyA9IChhd2FpdCBzdG9yZS5nZXQoa2V5KSkgYXMgRGJTaGlwQW1vdW50cyB8IHVuZGVmaW5lZDtcclxuICAgICAgICBjb25zdCBuZXdBbW91bnRzOiBEYlNoaXBBbW91bnRzID0ge1xyXG4gICAgICAgICAgICAuLi5jcmVhdGVSZWNvcmQoU2hpcFR5cGVzLCAwKSxcclxuICAgICAgICAgICAgLi4uc3RvcmVkQW1vdW50cyxcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdC5rZXlzKGRhdGEuZGF0YSlcclxuICAgICAgICAgICAgLm1hcChrZXkgPT4gcGFyc2VJbnRTYWZlKGtleSwgMTApIGFzIFNoaXBUeXBlKVxyXG4gICAgICAgICAgICAuZm9yRWFjaChrZXkgPT4gbmV3QW1vdW50c1trZXldID0gZGF0YS5kYXRhW2tleV0gPz8gbmV3QW1vdW50c1trZXldID8/IDApO1xyXG5cclxuICAgICAgICBhd2FpdCBzdG9yZS5wdXQobmV3QW1vdW50cywga2V5KTtcclxuICAgICAgICBhd2FpdCB0eC5kb25lO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyB1cGRhdGVQbGF5ZXJDbGFzcyhtZXRhOiBNZXNzYWdlT2dhbWVNZXRhLCBkYXRhOiBQbGF5ZXJDbGFzcykge1xyXG4gICAgICAgIGNvbnN0IGRiID0gYXdhaXQgZ2V0UGxheWVyRGF0YWJhc2UobWV0YSk7XHJcbiAgICAgICAgYXdhaXQgZGIucHV0KCdlbXBpcmUnLCBkYXRhLCAncGxheWVyQ2xhc3MnKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgdXBkYXRlUmVzZWFyY2hMZXZlbHMobWV0YTogTWVzc2FnZU9nYW1lTWV0YSwgcmVzZWFyY2hMZXZlbHM6IFBhcnRpYWw8UmVjb3JkPFJlc2VhcmNoVHlwZSwgbnVtYmVyPj4pIHtcclxuICAgICAgICBjb25zdCBkYiA9IGF3YWl0IGdldFBsYXllckRhdGFiYXNlKG1ldGEpO1xyXG4gICAgICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oJ2VtcGlyZScsICdyZWFkd3JpdGUnKTtcclxuICAgICAgICBjb25zdCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdlbXBpcmUnKTtcclxuXHJcbiAgICAgICAgY29uc3Qgc3RvcmVkTGV2ZWxzID0gKGF3YWl0IHN0b3JlLmdldCgncmVzZWFyY2gnKSkgYXMgRGJQbGF5ZXJSZXNlYXJjaExldmVscyB8IHVuZGVmaW5lZDtcclxuICAgICAgICBjb25zdCBuZXdMZXZlbHM6IERiUGxheWVyUmVzZWFyY2hMZXZlbHMgPSB7XHJcbiAgICAgICAgICAgIC4uLmNyZWF0ZVJlY29yZChSZXNlYXJjaFR5cGVzLCAwKSxcclxuICAgICAgICAgICAgLi4uc3RvcmVkTGV2ZWxzLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0LmtleXMocmVzZWFyY2hMZXZlbHMpXHJcbiAgICAgICAgICAgIC5tYXAoa2V5ID0+IHBhcnNlSW50U2FmZShrZXksIDEwKSBhcyBSZXNlYXJjaFR5cGUpXHJcbiAgICAgICAgICAgIC5mb3JFYWNoKGtleSA9PiBuZXdMZXZlbHNba2V5XSA9IHJlc2VhcmNoTGV2ZWxzW2tleV0gPz8gbmV3TGV2ZWxzW2tleV0gPz8gMCk7XHJcblxyXG4gICAgICAgIGF3YWl0IHN0b3JlLnB1dChuZXdMZXZlbHMsICdyZXNlYXJjaCcpO1xyXG4gICAgICAgIGF3YWl0IHR4LmRvbmU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIHVwZGF0ZVByb2R1Y3Rpb25TZXR0aW5ncyhtZXRhOiBNZXNzYWdlT2dhbWVNZXRhLCBkYXRhOiBQbGFuZXREYXRhV3JhcHBlcjxQcm9kdWN0aW9uU2V0dGluZ3M+KSB7XHJcbiAgICAgICAgaWYgKGRhdGEuaXNNb29uKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGRiID0gYXdhaXQgZ2V0UGxheWVyRGF0YWJhc2UobWV0YSk7XHJcbiAgICAgICAgY29uc3Qga2V5OiBgcGxhbmV0LiR7bnVtYmVyfS5wcm9kdWN0aW9uU2V0dGluZ3NgID0gYHBsYW5ldC4ke2RhdGEucGxhbmV0SWR9LnByb2R1Y3Rpb25TZXR0aW5nc2A7XHJcbiAgICAgICAgYXdhaXQgZGIucHV0KCdlbXBpcmUnLCBkYXRhLmRhdGEsIGtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgXHJcbiAgICBwdWJsaWMgYXN5bmMgdXBkYXRlU2VsZWN0ZWRMaWZlZm9ybShtZXRhOiBNZXNzYWdlT2dhbWVNZXRhLCBkYXRhOiBQbGFuZXREYXRhV3JhcHBlcjxMaWZlZm9ybVR5cGU+KSB7XHJcbiAgICAgICAgaWYoZGF0YS5pc01vb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZGIgPSBhd2FpdCBnZXRQbGF5ZXJEYXRhYmFzZShtZXRhKTtcclxuICAgICAgICBhd2FpdCBkYi5wdXQoJ2VtcGlyZScsIGRhdGEuZGF0YSwgYHBsYW5ldC4ke2RhdGEucGxhbmV0SWR9LmxpZmVmb3JtYCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIHVwZGF0ZUxpZmVmb3JtRXhwZXJpZW5jZShtZXRhOiBNZXNzYWdlT2dhbWVNZXRhLCBkYXRhOiBQYXJ0aWFsPFJlY29yZDxMaWZlZm9ybVR5cGUsIG51bWJlcj4+KSB7XHJcbiAgICAgICAgY29uc3QgZGIgPSBhd2FpdCBnZXRQbGF5ZXJEYXRhYmFzZShtZXRhKTtcclxuICAgICAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKCdlbXBpcmUnLCAncmVhZHdyaXRlJyk7XHJcbiAgICAgICAgY29uc3Qgc3RvcmUgPSB0eC5vYmplY3RTdG9yZSgnZW1waXJlJyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHN0b3JlZEV4cCA9IChhd2FpdCBzdG9yZS5nZXQoJ2xpZmVmb3JtRXhwZXJpZW5jZScpKSBhcyBEYlBsYXllckxpZmVmb3JtRXhwZXJpZW5jZSB8IHVuZGVmaW5lZDtcclxuICAgICAgICBjb25zdCBuZXdFeHA6IERiUGxheWVyTGlmZWZvcm1FeHBlcmllbmNlID0ge1xyXG4gICAgICAgICAgICAuLi5jcmVhdGVSZWNvcmQoVmFsaWRMaWZlZm9ybVR5cGVzLCAwKSxcclxuICAgICAgICAgICAgLi4uc3RvcmVkRXhwLFxyXG4gICAgICAgICAgICAuLi5kYXRhLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGF3YWl0IHN0b3JlLnB1dChuZXdFeHAsICdsaWZlZm9ybUV4cGVyaWVuY2UnKTtcclxuICAgICAgICBhd2FpdCB0eC5kb25lO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyB1cGRhdGVQbGFuZXRMaWZlZm9ybUJ1aWxkaW5ncyhtZXRhOiBNZXNzYWdlT2dhbWVNZXRhLCBkYXRhOiBQbGFuZXREYXRhV3JhcHBlcjxQYXJ0aWFsPFJlY29yZDxMaWZlZm9ybUJ1aWxkaW5nVHlwZSwgbnVtYmVyPj4+KSB7XHJcbiAgICAgICAgaWYoZGF0YS5pc01vb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZGIgPSBhd2FpdCBnZXRQbGF5ZXJEYXRhYmFzZShtZXRhKTtcclxuICAgICAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKCdlbXBpcmUnLCAncmVhZHdyaXRlJyk7XHJcbiAgICAgICAgY29uc3Qgc3RvcmUgPSB0eC5vYmplY3RTdG9yZSgnZW1waXJlJyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGtleTogYHBsYW5ldC4ke251bWJlcn0ubGlmZWZvcm1CdWlsZGluZ3NgID0gYHBsYW5ldC4ke2RhdGEucGxhbmV0SWR9LmxpZmVmb3JtQnVpbGRpbmdzYDtcclxuICAgICAgICBjb25zdCBzdG9yZWRMZXZlbHMgPSAoYXdhaXQgc3RvcmUuZ2V0KGtleSkpIGFzIERiUGxhbmV0TGlmZWZvcm1CdWlsZGluZ0xldmVscyB8IHVuZGVmaW5lZDtcclxuICAgICAgICBjb25zdCBuZXdMZXZlbHM6IERiUGxhbmV0TGlmZWZvcm1CdWlsZGluZ0xldmVscyA9IHsgXHJcbiAgICAgICAgICAgIC4uLmNyZWF0ZVJlY29yZChMaWZlZm9ybUJ1aWxkaW5nVHlwZXMsIDApLFxyXG4gICAgICAgICAgICAuLi5zdG9yZWRMZXZlbHMsXHJcbiAgICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0LmtleXMoZGF0YS5kYXRhKVxyXG4gICAgICAgICAgICAubWFwKGtleSA9PiBwYXJzZUludFNhZmUoa2V5LCAxMCkgYXMgTGlmZWZvcm1CdWlsZGluZ1R5cGUpXHJcbiAgICAgICAgICAgIC5mb3JFYWNoKGtleSA9PiBuZXdMZXZlbHNba2V5XSA9IGRhdGEuZGF0YVtrZXldID8/IG5ld0xldmVsc1trZXldID8/IDApO1xyXG5cclxuICAgICAgICBhd2FpdCBzdG9yZS5wdXQobmV3TGV2ZWxzLCBrZXkpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGF3YWl0IHR4LmRvbmU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIHVwZGF0ZVBsYW5ldEFjdGl2ZUxpZmVmb3JtVGVjaG5vbG9naWVzKG1ldGE6IE1lc3NhZ2VPZ2FtZU1ldGEsIGRhdGE6IFBsYW5ldERhdGFXcmFwcGVyPFBhcnRpYWw8UmVjb3JkPExpZmVmb3JtVGVjaG5vbG9neVR5cGUsIG51bWJlcj4+Pikge1xyXG4gICAgICAgIGlmKGRhdGEuaXNNb29uKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMudXBkYXRlUGxhbmV0TGlmZWZvcm1UZWNobm9sb2dpZXMobWV0YSwgZGF0YSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgZGIgPSBhd2FpdCBnZXRQbGF5ZXJEYXRhYmFzZShtZXRhKTtcclxuICAgICAgICBjb25zdCBhY3RpdmVUZWNoczogTGlmZWZvcm1UZWNobm9sb2d5VHlwZVtdID0gT2JqZWN0LmtleXMoZGF0YS5kYXRhKS5tYXAodGVjaCA9PiBwYXJzZUludFNhZmUodGVjaCwgMTApIGFzIExpZmVmb3JtVGVjaG5vbG9neVR5cGUpO1xyXG4gICAgICAgIGF3YWl0IGRiLnB1dCgnZW1waXJlJywgYWN0aXZlVGVjaHMsIGBwbGFuZXQuJHtkYXRhLnBsYW5ldElkfS5hY3RpdmVMaWZlZm9ybVRlY2hub2xvZ2llc2ApO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyB1cGRhdGVQbGFuZXRMaWZlZm9ybVRlY2hub2xvZ2llcyhtZXRhOiBNZXNzYWdlT2dhbWVNZXRhLCBkYXRhOiBQbGFuZXREYXRhV3JhcHBlcjxQYXJ0aWFsPFJlY29yZDxMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLCBudW1iZXI+Pj4pIHtcclxuICAgICAgICBpZihkYXRhLmlzTW9vbikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBkYiA9IGF3YWl0IGdldFBsYXllckRhdGFiYXNlKG1ldGEpO1xyXG4gICAgICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oJ2VtcGlyZScsICdyZWFkd3JpdGUnKTtcclxuICAgICAgICBjb25zdCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdlbXBpcmUnKTtcclxuXHJcbiAgICAgICAgY29uc3Qga2V5OiBgcGxhbmV0LiR7bnVtYmVyfS5saWZlZm9ybVRlY2hub2xvZ2llc2AgPSBgcGxhbmV0LiR7ZGF0YS5wbGFuZXRJZH0ubGlmZWZvcm1UZWNobm9sb2dpZXNgO1xyXG4gICAgICAgIGNvbnN0IHN0b3JlZExldmVscyA9IChhd2FpdCBzdG9yZS5nZXQoa2V5KSkgYXMgRGJQbGFuZXRMaWZlZm9ybVRlY2hub2xvZ3lMZXZlbHMgfCB1bmRlZmluZWQ7XHJcbiAgICAgICAgY29uc3QgbmV3TGV2ZWxzOiBEYlBsYW5ldExpZmVmb3JtVGVjaG5vbG9neUxldmVscyA9IHsgXHJcbiAgICAgICAgICAgIC4uLmNyZWF0ZVJlY29yZChMaWZlZm9ybVRlY2hub2xvZ3lUeXBlcywgMCksXHJcbiAgICAgICAgICAgIC4uLnN0b3JlZExldmVscyxcclxuICAgICAgICAgfTtcclxuICAgICAgICBPYmplY3Qua2V5cyhkYXRhLmRhdGEpXHJcbiAgICAgICAgICAgIC5tYXAoa2V5ID0+IHBhcnNlSW50U2FmZShrZXksIDEwKSBhcyBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlKVxyXG4gICAgICAgICAgICAuZm9yRWFjaChrZXkgPT4gbmV3TGV2ZWxzW2tleV0gPSBkYXRhLmRhdGFba2V5XSA/PyBuZXdMZXZlbHNba2V5XSA/PyAwKTtcclxuXHJcbiAgICAgICAgYXdhaXQgc3RvcmUucHV0KG5ld0xldmVscywga2V5KTtcclxuICAgICAgICBcclxuICAgICAgICBhd2FpdCB0eC5kb25lO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyB1cGRhdGVGbGVldHMobWV0YTogTWVzc2FnZU9nYW1lTWV0YSwgZGF0YTogRmxlZXRzKSB7XHJcbiAgICAgICAgY29uc3QgZGIgPSBhd2FpdCBnZXRQbGF5ZXJEYXRhYmFzZShtZXRhKTtcclxuICAgICAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKCdlbXBpcmUnLCAncmVhZHdyaXRlJyk7XHJcbiAgICAgICAgY29uc3Qgc3RvcmUgPSB0eC5vYmplY3RTdG9yZSgnZW1waXJlJyk7XHJcblxyXG4gICAgICAgIGF3YWl0IHN0b3JlLnB1dChkYXRhLCAnZmxlZXRzJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgYXdhaXQgdHguZG9uZTtcclxuICAgIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IHsgSXRlbUhhc2ggfSBmcm9tICcuLi9vZ2FtZS9pdGVtcy9JdGVtSGFzaCc7XHJcbmltcG9ydCB7IFJlc291cmNlVHlwZSB9IGZyb20gJy4uL29nYW1lL3Jlc291cmNlcy9SZXNvdXJjZVR5cGUnO1xyXG5pbXBvcnQgeyBTaGlwVHlwZSB9IGZyb20gJy4uL29nYW1lL3NoaXBzL1NoaXBUeXBlJztcclxuaW1wb3J0IHsgRXhwZWRpdGlvbkRlcGxldGlvbkxldmVsIH0gZnJvbSAnLi9FeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWwnO1xyXG5pbXBvcnQgeyBFeHBlZGl0aW9uRXZlbnRTaXplIH0gZnJvbSAnLi9FeHBlZGl0aW9uRXZlbnRTaXplJztcclxuaW1wb3J0IHsgRXhwZWRpdGlvbkV2ZW50VHlwZSB9IGZyb20gJy4vRXhwZWRpdGlvbkV2ZW50VHlwZSc7XHJcblxyXG5pbnRlcmZhY2UgRXhwZWRpdGlvbkV2ZW50QmFzZSB7XHJcbiAgICBpZDogbnVtYmVyO1xyXG4gICAgZGF0ZTogbnVtYmVyO1xyXG4gICAgdHlwZTogRXhwZWRpdGlvbkV2ZW50VHlwZTtcclxuXHJcbiAgICBkZXBsZXRpb24/OiBFeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWw7XHJcbn1cclxuXHJcbmludGVyZmFjZSBFeHBlZGl0aW9uRXZlbnRXaXRoU2l6ZSB7XHJcbiAgICBzaXplOiBFeHBlZGl0aW9uRXZlbnRTaXplO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBFeHBlZGl0aW9uRXZlbnREYXJrTWF0dGVyID0gRXhwZWRpdGlvbkV2ZW50QmFzZSAmIEV4cGVkaXRpb25FdmVudFdpdGhTaXplICYge1xyXG4gICAgdHlwZTogRXhwZWRpdGlvbkV2ZW50VHlwZS5kYXJrTWF0dGVyO1xyXG4gICAgZGFya01hdHRlcjogbnVtYmVyO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgRXhwZWRpdGlvbkV2ZW50UmVzb3VyY2VzQW1vdW50ID0gUmVjb3JkPFJlc291cmNlVHlwZSwgbnVtYmVyPjtcclxuXHJcbmV4cG9ydCB0eXBlIEV4cGVkaXRpb25FdmVudFJlc291cmNlcyA9IEV4cGVkaXRpb25FdmVudEJhc2UgJiBFeHBlZGl0aW9uRXZlbnRXaXRoU2l6ZSAmIHtcclxuICAgIHR5cGU6IEV4cGVkaXRpb25FdmVudFR5cGUucmVzb3VyY2VzO1xyXG4gICAgcmVzb3VyY2VzOiBFeHBlZGl0aW9uRXZlbnRSZXNvdXJjZXNBbW91bnQ7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBFeHBlZGl0aW9uRmluZGFibGVTaGlwVHlwZSA9XHJcbiAgICB8IFNoaXBUeXBlLmxpZ2h0RmlnaHRlclxyXG4gICAgfCBTaGlwVHlwZS5oZWF2eUZpZ2h0ZXJcclxuICAgIHwgU2hpcFR5cGUuY3J1aXNlclxyXG4gICAgfCBTaGlwVHlwZS5iYXR0bGVzaGlwXHJcbiAgICB8IFNoaXBUeXBlLmJvbWJlclxyXG4gICAgfCBTaGlwVHlwZS5iYXR0bGVjcnVpc2VyXHJcbiAgICB8IFNoaXBUeXBlLmRlc3Ryb3llclxyXG4gICAgfCBTaGlwVHlwZS5yZWFwZXJcclxuICAgIHwgU2hpcFR5cGUucGF0aGZpbmRlclxyXG4gICAgfCBTaGlwVHlwZS5zbWFsbENhcmdvXHJcbiAgICB8IFNoaXBUeXBlLmxhcmdlQ2FyZ29cclxuICAgIHwgU2hpcFR5cGUuZXNwaW9uYWdlUHJvYmVcclxuICAgIDtcclxuZXhwb3J0IGNvbnN0IEV4cGVkaXRpb25GaW5kYWJsZVNoaXBUeXBlczogRXhwZWRpdGlvbkZpbmRhYmxlU2hpcFR5cGVbXSA9IFtcclxuICAgIFNoaXBUeXBlLmxpZ2h0RmlnaHRlcixcclxuICAgIFNoaXBUeXBlLmhlYXZ5RmlnaHRlcixcclxuICAgIFNoaXBUeXBlLmNydWlzZXIsXHJcbiAgICBTaGlwVHlwZS5iYXR0bGVzaGlwLFxyXG4gICAgU2hpcFR5cGUuYm9tYmVyLFxyXG4gICAgU2hpcFR5cGUuYmF0dGxlY3J1aXNlcixcclxuICAgIFNoaXBUeXBlLmRlc3Ryb3llcixcclxuICAgIFNoaXBUeXBlLnJlYXBlcixcclxuICAgIFNoaXBUeXBlLnBhdGhmaW5kZXIsXHJcbiAgICBTaGlwVHlwZS5zbWFsbENhcmdvLFxyXG4gICAgU2hpcFR5cGUubGFyZ2VDYXJnbyxcclxuICAgIFNoaXBUeXBlLmVzcGlvbmFnZVByb2JlLFxyXG5dO1xyXG5cclxuXHJcbmV4cG9ydCB0eXBlIEV4cGVkaXRpb25GaW5kYWJsZUZsZWV0ID0gUGFydGlhbDxSZWNvcmQ8RXhwZWRpdGlvbkZpbmRhYmxlU2hpcFR5cGUsIG51bWJlcj4+O1xyXG5cclxuZXhwb3J0IHR5cGUgRXhwZWRpdGlvbkV2ZW50RmxlZXQgPSBFeHBlZGl0aW9uRXZlbnRCYXNlICYgRXhwZWRpdGlvbkV2ZW50V2l0aFNpemUgJiB7XHJcbiAgICB0eXBlOiBFeHBlZGl0aW9uRXZlbnRUeXBlLmZsZWV0O1xyXG4gICAgZmxlZXQ6IEV4cGVkaXRpb25GaW5kYWJsZUZsZWV0O1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgRXhwZWRpdGlvbkV2ZW50SXRlbSA9IEV4cGVkaXRpb25FdmVudEJhc2UgJiB7XHJcbiAgICB0eXBlOiBFeHBlZGl0aW9uRXZlbnRUeXBlLml0ZW07XHJcbiAgICBpdGVtSGFzaDogSXRlbUhhc2g7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBFeHBlZGl0aW9uRXZlbnRFYXJseSA9IEV4cGVkaXRpb25FdmVudEJhc2UgJiB7XHJcbiAgICB0eXBlOiBFeHBlZGl0aW9uRXZlbnRUeXBlLmVhcmx5O1xyXG4gICAgc2l6ZT86IEV4cGVkaXRpb25FdmVudFNpemU7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBFeHBlZGl0aW9uRXZlbnREZWxheSA9IEV4cGVkaXRpb25FdmVudEJhc2UgJiB7XHJcbiAgICB0eXBlOiBFeHBlZGl0aW9uRXZlbnRUeXBlLmRlbGF5O1xyXG4gICAgc2l6ZT86IEV4cGVkaXRpb25FdmVudFNpemU7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBFeHBlZGl0aW9uRXZlbnRUcmFkZXIgPSBFeHBlZGl0aW9uRXZlbnRCYXNlICYge1xyXG4gICAgdHlwZTogRXhwZWRpdGlvbkV2ZW50VHlwZS50cmFkZXI7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBFeHBlZGl0aW9uRXZlbnRMb3N0RmxlZXQgPSBFeHBlZGl0aW9uRXZlbnRCYXNlICYge1xyXG4gICAgdHlwZTogRXhwZWRpdGlvbkV2ZW50VHlwZS5sb3N0RmxlZXQ7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBFeHBlZGl0aW9uRXZlbnROb3RoaW5nID0gRXhwZWRpdGlvbkV2ZW50QmFzZSAmIHtcclxuICAgIHR5cGU6IEV4cGVkaXRpb25FdmVudFR5cGUubm90aGluZztcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIEV4cGVkaXRpb25FdmVudENvbWJhdFNpemUgPSBFeHBlZGl0aW9uRXZlbnRTaXplIHwgJ2ZsZWQtZGVhdGgtc3Rhcic7XHJcblxyXG5leHBvcnQgdHlwZSBFeHBlZGl0aW9uRXZlbnRBbGllbnMgPSBFeHBlZGl0aW9uRXZlbnRCYXNlICYge1xyXG4gICAgc2l6ZTogRXhwZWRpdGlvbkV2ZW50Q29tYmF0U2l6ZTtcclxuICAgIHR5cGU6IEV4cGVkaXRpb25FdmVudFR5cGUuYWxpZW5zO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgRXhwZWRpdGlvbkV2ZW50UGlyYXRlcyA9IEV4cGVkaXRpb25FdmVudEJhc2UgJiB7XHJcbiAgICBzaXplOiBFeHBlZGl0aW9uRXZlbnRDb21iYXRTaXplO1xyXG4gICAgdHlwZTogRXhwZWRpdGlvbkV2ZW50VHlwZS5waXJhdGVzO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgRXhwZWRpdGlvbkV2ZW50Q29tYmF0ID0gRXhwZWRpdGlvbkV2ZW50QmFzZSAmIHtcclxuICAgIHNpemU6IEV4cGVkaXRpb25FdmVudENvbWJhdFNpemU7XHJcbiAgICB0eXBlOiBFeHBlZGl0aW9uRXZlbnRUeXBlLmNvbWJhdDtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIEV4cGVkaXRpb25FdmVudCA9IEV4cGVkaXRpb25FdmVudERhcmtNYXR0ZXJcclxuICAgIHwgRXhwZWRpdGlvbkV2ZW50UmVzb3VyY2VzXHJcbiAgICB8IEV4cGVkaXRpb25FdmVudEZsZWV0XHJcbiAgICB8IEV4cGVkaXRpb25FdmVudEl0ZW1cclxuICAgIHwgRXhwZWRpdGlvbkV2ZW50RWFybHlcclxuICAgIHwgRXhwZWRpdGlvbkV2ZW50RGVsYXlcclxuICAgIHwgRXhwZWRpdGlvbkV2ZW50VHJhZGVyXHJcbiAgICB8IEV4cGVkaXRpb25FdmVudExvc3RGbGVldFxyXG4gICAgfCBFeHBlZGl0aW9uRXZlbnROb3RoaW5nXHJcbiAgICB8IEV4cGVkaXRpb25FdmVudFBpcmF0ZXNcclxuICAgIHwgRXhwZWRpdGlvbkV2ZW50QWxpZW5zXHJcbiAgICB8IEV4cGVkaXRpb25FdmVudENvbWJhdDsiLCJpbXBvcnQgeyBFeHBlZGl0aW9uRXZlbnRDb21iYXRTaXplIH0gZnJvbSBcIi4vRXhwZWRpdGlvbkV2ZW50c1wiO1xyXG5cclxuZXhwb3J0IGVudW0gRXhwZWRpdGlvbkV2ZW50U2l6ZSB7XHJcbiAgICBzbWFsbCA9ICdzbWFsbCcsXHJcbiAgICBtZWRpdW0gPSAnbWVkaXVtJyxcclxuICAgIGxhcmdlID0gJ2xhcmdlJyxcclxufVxyXG5leHBvcnQgY29uc3QgRXhwZWRpdGlvbkV2ZW50U2l6ZXM6IEV4cGVkaXRpb25FdmVudFNpemVbXSA9IFtcclxuICAgIEV4cGVkaXRpb25FdmVudFNpemUuc21hbGwsXHJcbiAgICBFeHBlZGl0aW9uRXZlbnRTaXplLm1lZGl1bSxcclxuICAgIEV4cGVkaXRpb25FdmVudFNpemUubGFyZ2UsXHJcbl07XHJcblxyXG5leHBvcnQgY29uc3QgRXhwZWRpdGlvbkV2ZW50Q29tYmF0U2l6ZXM6IEV4cGVkaXRpb25FdmVudENvbWJhdFNpemVbXSA9IFtcclxuICAgIC4uLkV4cGVkaXRpb25FdmVudFNpemVzLFxyXG4gICAgJ2ZsZWQtZGVhdGgtc3RhcicsXHJcbl07IiwiZXhwb3J0IGVudW0gRXhwZWRpdGlvbkV2ZW50VHlwZSB7XHJcbiAgICBub3RoaW5nID0gJ25vdGhpbmcnLFxyXG4gICAgcmVzb3VyY2VzID0gJ3Jlc291cmNlcycsXHJcbiAgICBmbGVldCA9ICdmbGVldCcsXHJcbiAgICBkZWxheSA9ICdkZWxheScsXHJcbiAgICBlYXJseSA9ICdlYXJseScsXHJcbiAgICBkYXJrTWF0dGVyID0gJ2RhcmtNYXR0ZXInLFxyXG4gICAgLyoqIGxlZ2FjeSAqL1xyXG4gICAgcGlyYXRlcyA9ICdwaXJhdGVzJyxcclxuICAgIC8qKiBsZWdhY3kgKi9cclxuICAgIGFsaWVucyA9ICdhbGllbnMnLFxyXG4gICAgY29tYmF0ID0gJ2NvbWJhdCcsXHJcbiAgICBpdGVtID0gJ2l0ZW0nLFxyXG4gICAgdHJhZGVyID0gJ3RyYWRlcicsXHJcbiAgICBsb3N0RmxlZXQgPSAnbG9zdEZsZWV0JyxcclxufVxyXG5leHBvcnQgY29uc3QgRXhwZWRpdGlvbkV2ZW50VHlwZXMgPSBbXHJcbiAgICBFeHBlZGl0aW9uRXZlbnRUeXBlLm5vdGhpbmcsXHJcbiAgICBFeHBlZGl0aW9uRXZlbnRUeXBlLnJlc291cmNlcyxcclxuICAgIEV4cGVkaXRpb25FdmVudFR5cGUuZmxlZXQsXHJcbiAgICBFeHBlZGl0aW9uRXZlbnRUeXBlLmRlbGF5LFxyXG4gICAgRXhwZWRpdGlvbkV2ZW50VHlwZS5lYXJseSxcclxuICAgIEV4cGVkaXRpb25FdmVudFR5cGUuZGFya01hdHRlcixcclxuICAgIEV4cGVkaXRpb25FdmVudFR5cGUucGlyYXRlcyxcclxuICAgIEV4cGVkaXRpb25FdmVudFR5cGUuYWxpZW5zLFxyXG4gICAgRXhwZWRpdGlvbkV2ZW50VHlwZS5jb21iYXQsXHJcbiAgICBFeHBlZGl0aW9uRXZlbnRUeXBlLml0ZW0sXHJcbiAgICBFeHBlZGl0aW9uRXZlbnRUeXBlLnRyYWRlcixcclxuICAgIEV4cGVkaXRpb25FdmVudFR5cGUubG9zdEZsZWV0LFxyXG5dOyIsImV4cG9ydCBlbnVtIEV4cGVkaXRpb25EZXBsZXRpb25MZXZlbCB7XHJcbiAgICBub25lID0gJ25vbmUnLFxyXG4gICAgbG93ID0gJ2xvdycsXHJcbiAgICBtZWRpdW0gPSAnbWVkaXVtJyxcclxuICAgIGhpZ2ggPSAnaGlnaCcsXHJcbn1cclxuZXhwb3J0IGNvbnN0IEV4cGVkaXRpb25EZXBsZXRpb25MZXZlbHM6IEV4cGVkaXRpb25EZXBsZXRpb25MZXZlbFtdID0gW1xyXG4gICAgRXhwZWRpdGlvbkRlcGxldGlvbkxldmVsLm5vbmUsXHJcbiAgICBFeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWwubG93LFxyXG4gICAgRXhwZWRpdGlvbkRlcGxldGlvbkxldmVsLm1lZGl1bSxcclxuICAgIEV4cGVkaXRpb25EZXBsZXRpb25MZXZlbC5oaWdoLFxyXG5dOyIsImV4cG9ydCBlbnVtIE9nYW1lUmF3RXhwZWRpdGlvblJlc3VsdFR5cGUge1xyXG4gICAgcmVzb3VyY2VzID0gJ3Jlc3NvdXJjZXMnLFxyXG4gICAgbm90aGluZyA9ICdub3RoaW5nJyxcclxuICAgIGZsZWV0ID0gJ3NoaXB3cmVja3MnLFxyXG4gICAgY29tYmF0ID0gJ2NvbWJhdCcsXHJcbiAgICBpdGVtID0gJ2l0ZW1zJyxcclxuICAgIGRlbGF5T3JFYXJseSA9ICduYXZpZ2F0aW9uJyxcclxuICAgIGxvc3RGbGVldCA9ICdmbGVldExvc3QnLFxyXG4gICAgZGFya01hdHRlciA9ICdkYXJrbWF0dGVyJyxcclxuICAgIHRyYWRlciA9ICd0cmFkZXInLFxyXG59IiwiZXhwb3J0IGVudW0gT2dhbWVSYXdFeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWwge1xyXG4gICAgbm9uZSA9IDEsXHJcbiAgICBsb3cgPSAyLFxyXG4gICAgbWVkaXVtID0gMyxcclxuICAgIGhpZ2ggPSA0LFxyXG59IiwiZXhwb3J0IGVudW0gT2dhbWVSYXdFeHBlZGl0aW9uU2l6ZSB7XHJcbiAgICBzbWFsbCA9IDIsXHJcbiAgICBtZWRpdW0gPSAxLFxyXG4gICAgbGFyZ2UgPSAwLFxyXG59IiwiZXhwb3J0IGVudW0gTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUge1xyXG4gICAgLyoqIG5vdGhpbmcgaGFwcGVuZWQgKi9cclxuICAgIG5vdGhpbmcgPSAnbm90aGluZycsXHJcbiAgICAvKiogbGVnYWN5OiBkaXNjb3ZlcnkgcHJvYmUgd2FzIGxvc3QgKi9cclxuICAgIGxvc3RTaGlwID0gJ2xvc3RTaGlwJyxcclxuICAgIC8qKiBkaWNvdmVyZWQgYSBuZXcgKG5vdCBwcmV2aW91c2x5IGtub3duKSBsaWZlZm9ybSAqL1xyXG4gICAgbmV3TGlmZWZvcm1Gb3VuZCA9ICduZXdMaWZlZm9ybUZvdW5kJyxcclxuICAgIC8qKiBkaXNjb3ZlcmVkIGEga25vd24gbGlmZWZvcm0gYW5kIGdhdGhlcmVkIHNvbWUgWFAgKi9cclxuICAgIGtub3duTGlmZWZvcm1Gb3VuZCA9ICdrbm93bkxpZmVmb3JtRm91bmQnLFxyXG4gICAgLyoqIGFydGlmYWN0cyBmb3VuZCAqL1xyXG4gICAgYXJ0aWZhY3RzID0gJ2FydGlmYWN0cycsXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBMaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZXM6IExpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlW10gPSBbXHJcbiAgICBMaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZS5ub3RoaW5nLFxyXG4gICAgTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUubG9zdFNoaXAsXHJcbiAgICBMaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZS5uZXdMaWZlZm9ybUZvdW5kLFxyXG4gICAgTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUua25vd25MaWZlZm9ybUZvdW5kLFxyXG4gICAgTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUuYXJ0aWZhY3RzLFxyXG5dOyIsImV4cG9ydCBlbnVtIExpZmVmb3JtRGlzY292ZXJ5RXZlbnRBcnRpZmFjdEZpbmRpbmdTaXplIHtcclxuICAgIHN0b3JhZ2VGdWxsID0gJ2Z1bGwnLFxyXG4gICAgc21hbGwgPSAnbm9ybWFsJyxcclxuICAgIG1lZGl1bSA9ICdiaWcnLFxyXG4gICAgbGFyZ2UgPSAnaHVnZScsIFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgTGlmZWZvcm1EaXNjb3ZlcnlFdmVudEFydGlmYWN0RmluZGluZ1NpemVzOiBMaWZlZm9ybURpc2NvdmVyeUV2ZW50QXJ0aWZhY3RGaW5kaW5nU2l6ZVtdID0gW1xyXG4gICAgTGlmZWZvcm1EaXNjb3ZlcnlFdmVudEFydGlmYWN0RmluZGluZ1NpemUuc21hbGwsXHJcbiAgICBMaWZlZm9ybURpc2NvdmVyeUV2ZW50QXJ0aWZhY3RGaW5kaW5nU2l6ZS5tZWRpdW0sXHJcbiAgICBMaWZlZm9ybURpc2NvdmVyeUV2ZW50QXJ0aWZhY3RGaW5kaW5nU2l6ZS5sYXJnZSxcclxuICAgIExpZmVmb3JtRGlzY292ZXJ5RXZlbnRBcnRpZmFjdEZpbmRpbmdTaXplLnN0b3JhZ2VGdWxsLFxyXG5dOyIsImV4cG9ydCBlbnVtIE9nYW1lUmF3TGlmZWZvcm1EaXNjb3ZlcnlUeXBlIHtcclxuICAgIG5vbmUgPSAnbm9uZScsXHJcbiAgICBhcnRpZmFjdHMgPSAnYXJ0aWZhY3RzJyxcclxuICAgIGxpZmVmb3JtRXhwZXJpZW5jZSA9ICdsaWZlZm9ybS14cCcsXHJcbiAgICBzaGlwTG9zdCA9ICdzaGlwLWxvc3QnLFxyXG4gICAgbGlmZWZvcm1Gb3VuZCA9ICdsaWZlZm9ybS1mb3VuZCcsXHJcbn0iLCJleHBvcnQgZW51bSBPZ2FtZVJhd0FydGlmYWN0RmluZFNpemUge1xyXG4gICAgc21hbGwgPSAnbm9ybWFsJyxcclxuICAgIG1lZGl1bSA9ICdiaWcnLFxyXG4gICAgbGFyZ2UgPSAnaHVnZScsXHJcbiAgICBmdWxsU3RvcmFnZSA9ICdmdWxsJyxcclxufVxyXG5cclxuIiwiZXhwb3J0IGVudW0gT2dhbWVSYXdMaWZlZm9ybVR5cGUge1xyXG4gICAgaHVtYW5zID0gMSxcclxuICAgIHJvY2t0YWwgPSAyLFxyXG4gICAgbWVjaGFzID0gMyxcclxuICAgIGthZWxlc2ggPSA0LFxyXG59IiwiaW1wb3J0IHsgTGFuZ3VhZ2VLZXkgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL2kxOG4vTGFuZ3VhZ2VLZXlcIjtcclxuaW1wb3J0IHsgRXhwZWRpdGlvbkV2ZW50LCBFeHBlZGl0aW9uRXZlbnRBbGllbnMsIEV4cGVkaXRpb25FdmVudENvbWJhdCwgRXhwZWRpdGlvbkV2ZW50RGFya01hdHRlciwgRXhwZWRpdGlvbkV2ZW50RGVsYXksIEV4cGVkaXRpb25FdmVudEVhcmx5LCBFeHBlZGl0aW9uRXZlbnRGbGVldCwgRXhwZWRpdGlvbkV2ZW50SXRlbSwgRXhwZWRpdGlvbkV2ZW50TG9zdEZsZWV0LCBFeHBlZGl0aW9uRXZlbnROb3RoaW5nLCBFeHBlZGl0aW9uRXZlbnRQaXJhdGVzLCBFeHBlZGl0aW9uRXZlbnRSZXNvdXJjZXMsIEV4cGVkaXRpb25FdmVudFRyYWRlciwgRXhwZWRpdGlvbkZpbmRhYmxlU2hpcFR5cGUsIEV4cGVkaXRpb25GaW5kYWJsZVNoaXBUeXBlcyB9IGZyb20gXCIuLi8uLi9zaGFyZWQvbW9kZWxzL2V4cGVkaXRpb25zL0V4cGVkaXRpb25FdmVudHNcIjtcclxuaW1wb3J0IHsgVHJ5QWN0aW9uUmVzdWx0IH0gZnJvbSBcIi4uLy4uL3NoYXJlZC9UcnlBY3Rpb25SZXN1bHRcIjtcclxuaW1wb3J0IHsgX2xvZywgX2xvZ0RlYnVnLCBfbG9nRXJyb3IsIF9sb2dXYXJuaW5nIH0gZnJvbSBcIi4uLy4uL3NoYXJlZC91dGlscy9fbG9nXCI7XHJcbmltcG9ydCB7IF90aHJvdyB9IGZyb20gXCIuLi8uLi9zaGFyZWQvdXRpbHMvX3Rocm93XCI7XHJcbmltcG9ydCB7IEV4cGVkaXRpb25FdmVudENvbWJhdFNpemVzLCBFeHBlZGl0aW9uRXZlbnRTaXplLCBFeHBlZGl0aW9uRXZlbnRTaXplcyB9IGZyb20gXCIuLi8uLi9zaGFyZWQvbW9kZWxzL2V4cGVkaXRpb25zL0V4cGVkaXRpb25FdmVudFNpemVcIjtcclxuaW1wb3J0IHsgRXhwZWRpdGlvbkV2ZW50VHlwZSB9IGZyb20gXCIuLi8uLi9zaGFyZWQvbW9kZWxzL2V4cGVkaXRpb25zL0V4cGVkaXRpb25FdmVudFR5cGVcIjtcclxuaW1wb3J0IHsgUmVzb3VyY2VUeXBlLCBSZXNvdXJjZVR5cGVzIH0gZnJvbSBcIi4uLy4uL3NoYXJlZC9tb2RlbHMvb2dhbWUvcmVzb3VyY2VzL1Jlc291cmNlVHlwZVwiO1xyXG5pbXBvcnQgeyBJdGVtSGFzaCB9IGZyb20gXCIuLi8uLi9zaGFyZWQvbW9kZWxzL29nYW1lL2l0ZW1zL0l0ZW1IYXNoXCI7XHJcbmltcG9ydCB7IFJhd0V4cGVkaXRpb25NZXNzYWdlRGF0YSwgVHJhY2tFeHBlZGl0aW9uTWVzc2FnZSB9IGZyb20gXCIuLi8uLi9zaGFyZWQvbWVzc2FnZXMvdHJhY2tpbmcvZXhwZWRpdGlvbnNcIjtcclxuaW1wb3J0IHsgUmF3TWVzc2FnZURhdGEgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL21lc3NhZ2VzL3RyYWNraW5nL2NvbW1vblwiO1xyXG5pbXBvcnQgeyBwYXJzZUludFNhZmUgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL3V0aWxzL3BhcnNlTnVtYmVyc1wiO1xyXG5pbXBvcnQgeyBnZXRQbGF5ZXJEYXRhYmFzZSB9IGZyb20gXCJAL3NoYXJlZC9kYi9hY2Nlc3NcIjtcclxuaW1wb3J0IHsgZ2V0TGFuZ3VhZ2UgfSBmcm9tIFwiQC9zaGFyZWQvaTE4bi9nZXRMYW5ndWFnZVwiO1xyXG5pbXBvcnQgeyBFeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWwsIEV4cGVkaXRpb25EZXBsZXRpb25MZXZlbHMgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL2V4cGVkaXRpb25zL0V4cGVkaXRpb25EZXBsZXRpb25MZXZlbFwiO1xyXG5pbXBvcnQgeyBTaGlwVHlwZSB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvb2dhbWUvc2hpcHMvU2hpcFR5cGVcIjtcclxuaW1wb3J0IHsgT2dhbWVSYXdFeHBlZGl0aW9uUmVzdWx0VHlwZSB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvb2dhbWUvbWVzc2FnZXMvT2dhbWVSYXdFeHBlZGl0aW9uUmVzdWx0VHlwZVwiO1xyXG5pbXBvcnQgeyBPZ2FtZVJhd0V4cGVkaXRpb25EZXBsZXRpb25MZXZlbCB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvb2dhbWUvbWVzc2FnZXMvT2dhbWVSYXdFeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWxcIjtcclxuaW1wb3J0IHsgT2dhbWVSYXdFeHBlZGl0aW9uU2l6ZSB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvb2dhbWUvbWVzc2FnZXMvT2dhbWVSYXdFeHBlZGl0aW9uU2l6ZVwiO1xyXG5cclxuaW50ZXJmYWNlIEV4cGVkaXRpb25FdmVudFJlc3VsdCB7XHJcbiAgICBleHBlZGl0aW9uOiBFeHBlZGl0aW9uRXZlbnQ7XHJcbiAgICBpc0FscmVhZHlUcmFja2VkOiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRXhwZWRpdGlvbk1vZHVsZSB7XHJcbiAgICBwdWJsaWMgYXN5bmMgdHJ5VHJhY2tFeHBlZGl0aW9uKG1lc3NhZ2U6IFRyYWNrRXhwZWRpdGlvbk1lc3NhZ2UpOiBQcm9taXNlPFRyeUFjdGlvblJlc3VsdDxFeHBlZGl0aW9uRXZlbnRSZXN1bHQ+PiB7XHJcbiAgICAgICAgY29uc3QgZXhwZWRpdGlvbkV2ZW50RGF0YSA9IG1lc3NhZ2UuZGF0YTtcclxuICAgICAgICBjb25zdCBkYiA9IGF3YWl0IGdldFBsYXllckRhdGFiYXNlKG1lc3NhZ2Uub2dhbWVNZXRhKTtcclxuXHJcbiAgICAgICAgLy8gY2hlY2sgaWYgZXhwZWRpdGlvbiBhbHJlYWR5IHRyYWNrZWQgPT4gaWYgdHJ1ZSwgcmV0dXJuIHRyYWNrZWQgZGF0YVxyXG4gICAgICAgIGNvbnN0IGtub3duRXhwZWRpdGlvbiA9IGF3YWl0IGRiLmdldCgnZXhwZWRpdGlvbnMnLCBleHBlZGl0aW9uRXZlbnREYXRhLmlkKTtcclxuICAgICAgICBpZiAoa25vd25FeHBlZGl0aW9uICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICAgICAgICByZXN1bHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICBleHBlZGl0aW9uOiBrbm93bkV4cGVkaXRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgaXNBbHJlYWR5VHJhY2tlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBvdGhlcndpc2UgcGFyc2UgYW5kIHNhdmUgcmVzdWx0XHJcbiAgICAgICAgbGV0IGV4cGVkaXRpb246IEV4cGVkaXRpb25FdmVudDtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBleHBlZGl0aW9uID0gdGhpcy4jcGFyc2VFeHBlZGl0aW9uKGV4cGVkaXRpb25FdmVudERhdGEpO1xyXG5cclxuICAgICAgICAgICAgYXdhaXQgZGIucHV0KCdleHBlZGl0aW9ucycsIGV4cGVkaXRpb24pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXHJcbiAgICAgICAgICAgICAgICByZXN1bHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICBleHBlZGl0aW9uOiBleHBlZGl0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzQWxyZWFkeVRyYWNrZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBfbG9nV2FybmluZyh7IGVycm9yLCBtZXNzYWdlIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAjcGFyc2VFeHBlZGl0aW9uKGRhdGE6IFJhd0V4cGVkaXRpb25NZXNzYWdlRGF0YSk6IEV4cGVkaXRpb25FdmVudCB7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0OiBFeHBlZGl0aW9uRXZlbnQgPSB7XHJcbiAgICAgICAgICAgIFtPZ2FtZVJhd0V4cGVkaXRpb25SZXN1bHRUeXBlLmNvbWJhdF06ICgpID0+IHRoaXMuI3BhcnNlQ29tYmF0RXhwZWRpdGlvbihkYXRhKSxcclxuICAgICAgICAgICAgW09nYW1lUmF3RXhwZWRpdGlvblJlc3VsdFR5cGUuZGFya01hdHRlcl06ICgpID0+IHRoaXMuI3BhcnNlRGFya01hdHRlckV4cGVkaXRpb24oZGF0YSksXHJcbiAgICAgICAgICAgIFtPZ2FtZVJhd0V4cGVkaXRpb25SZXN1bHRUeXBlLmRlbGF5T3JFYXJseV06ICgpID0+IHRoaXMuI3BhcnNlTmF2aWdhdGlvbkV4cGVkaXRpb24oZGF0YSksXHJcbiAgICAgICAgICAgIFtPZ2FtZVJhd0V4cGVkaXRpb25SZXN1bHRUeXBlLmZsZWV0XTogKCkgPT4gdGhpcy4jcGFyc2VGbGVldEV4cGVkaXRpb24oZGF0YSksXHJcbiAgICAgICAgICAgIFtPZ2FtZVJhd0V4cGVkaXRpb25SZXN1bHRUeXBlLml0ZW1dOiAoKSA9PiB0aGlzLiNwYXJzZUl0ZW1FeHBlZGl0aW9uKGRhdGEpLFxyXG4gICAgICAgICAgICBbT2dhbWVSYXdFeHBlZGl0aW9uUmVzdWx0VHlwZS5sb3N0RmxlZXRdOiAoKSA9PiB0aGlzLiNwYXJzZUxvc3RGbGVldEV4cGVkaXRpb24oZGF0YSksXHJcbiAgICAgICAgICAgIFtPZ2FtZVJhd0V4cGVkaXRpb25SZXN1bHRUeXBlLm5vdGhpbmddOiAoKSA9PiB0aGlzLiNwYXJzZU5vRXZlbnRFeHBlZGl0aW9uKGRhdGEpLFxyXG4gICAgICAgICAgICBbT2dhbWVSYXdFeHBlZGl0aW9uUmVzdWx0VHlwZS5yZXNvdXJjZXNdOiAoKSA9PiB0aGlzLiNwYXJzZVJlc291cmNlRXhwZWRpdGlvbihkYXRhKSxcclxuICAgICAgICAgICAgW09nYW1lUmF3RXhwZWRpdGlvblJlc3VsdFR5cGUudHJhZGVyXTogKCkgPT4gdGhpcy4jcGFyc2VUcmFkZXJFeHBlZGl0aW9uKGRhdGEpLCBcclxuICAgICAgICB9W2RhdGEudHlwZV0oKTtcclxuXHJcbiAgICAgICAgaWYgKHJlc3VsdCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIF90aHJvdygnVW5rbm93biBleHBlZGl0aW9uIHR5cGUnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGRlcGxldGlvbiA9IHRoaXMuI3BhcnNlRGVwbGV0aW9uKGRhdGEpO1xyXG4gICAgICAgIGlmIChkZXBsZXRpb24gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXN1bHQuZGVwbGV0aW9uID0gZGVwbGV0aW9uO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAjcGFyc2VEZXBsZXRpb24oZGF0YTogUmF3RXhwZWRpdGlvbk1lc3NhZ2VEYXRhKTogRXhwZWRpdGlvbkRlcGxldGlvbkxldmVsIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBpZihkYXRhLmRlcGxldGlvbiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBbT2dhbWVSYXdFeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWwubm9uZV06IEV4cGVkaXRpb25EZXBsZXRpb25MZXZlbC5ub25lLFxyXG4gICAgICAgICAgICBbT2dhbWVSYXdFeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWwubG93XTogRXhwZWRpdGlvbkRlcGxldGlvbkxldmVsLmxvdyxcclxuICAgICAgICAgICAgW09nYW1lUmF3RXhwZWRpdGlvbkRlcGxldGlvbkxldmVsLm1lZGl1bV06IEV4cGVkaXRpb25EZXBsZXRpb25MZXZlbC5tZWRpdW0sXHJcbiAgICAgICAgICAgIFtPZ2FtZVJhd0V4cGVkaXRpb25EZXBsZXRpb25MZXZlbC5oaWdoXTogRXhwZWRpdGlvbkRlcGxldGlvbkxldmVsLmhpZ2gsXHJcbiAgICAgICAgfVtkYXRhLmRlcGxldGlvbl07XHJcbiAgICB9XHJcblxyXG4gICAgI3BhcnNlTm9FdmVudEV4cGVkaXRpb24oZGF0YTogUmF3RXhwZWRpdGlvbk1lc3NhZ2VEYXRhKTogRXhwZWRpdGlvbkV2ZW50Tm90aGluZyB7XHJcbiAgICAgICAgaWYoZGF0YS50eXBlICE9IE9nYW1lUmF3RXhwZWRpdGlvblJlc3VsdFR5cGUubm90aGluZykge1xyXG4gICAgICAgICAgICBfdGhyb3coJ3VuZXhwZWN0ZWQgcmF3IGV4cGVkaXRpb24gdHlwZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaWQ6IGRhdGEuaWQsXHJcbiAgICAgICAgICAgIGRhdGU6IGRhdGEuZGF0ZSxcclxuICAgICAgICAgICAgdHlwZTogRXhwZWRpdGlvbkV2ZW50VHlwZS5ub3RoaW5nLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgI3BhcnNlTG9zdEZsZWV0RXhwZWRpdGlvbihkYXRhOiBSYXdFeHBlZGl0aW9uTWVzc2FnZURhdGEpOiBFeHBlZGl0aW9uRXZlbnRMb3N0RmxlZXQge1xyXG4gICAgICAgIGlmKGRhdGEudHlwZSAhPSBPZ2FtZVJhd0V4cGVkaXRpb25SZXN1bHRUeXBlLmxvc3RGbGVldCkge1xyXG4gICAgICAgICAgICBfdGhyb3coJ3VuZXhwZWN0ZWQgcmF3IGV4cGVkaXRpb24gdHlwZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpZDogZGF0YS5pZCxcclxuICAgICAgICAgICAgZGF0ZTogZGF0YS5kYXRlLFxyXG4gICAgICAgICAgICB0eXBlOiBFeHBlZGl0aW9uRXZlbnRUeXBlLmxvc3RGbGVldCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgICNwYXJzZUNvbWJhdEV4cGVkaXRpb24oZGF0YTogUmF3RXhwZWRpdGlvbk1lc3NhZ2VEYXRhKTogRXhwZWRpdGlvbkV2ZW50Q29tYmF0IHtcclxuICAgICAgICBpZihkYXRhLnR5cGUgIT0gT2dhbWVSYXdFeHBlZGl0aW9uUmVzdWx0VHlwZS5jb21iYXQpIHtcclxuICAgICAgICAgICAgX3Rocm93KCd1bmV4cGVjdGVkIHJhdyBleHBlZGl0aW9uIHR5cGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuI21hcFNpemUoZGF0YS5zaXplKSA/PyBfdGhyb3coJ21pc3NpbmcgZXhwZWRpdGlvbiBjb21iYXQgc2l6ZScpO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpZDogZGF0YS5pZCxcclxuICAgICAgICAgICAgZGF0ZTogZGF0YS5kYXRlLFxyXG4gICAgICAgICAgICBzaXplOiBzaXplLFxyXG4gICAgICAgICAgICB0eXBlOiBFeHBlZGl0aW9uRXZlbnRUeXBlLmNvbWJhdCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgICNwYXJzZVRyYWRlckV4cGVkaXRpb24oZGF0YTogUmF3RXhwZWRpdGlvbk1lc3NhZ2VEYXRhKTogRXhwZWRpdGlvbkV2ZW50VHJhZGVyIHtcclxuICAgICAgICBpZihkYXRhLnR5cGUgIT0gT2dhbWVSYXdFeHBlZGl0aW9uUmVzdWx0VHlwZS50cmFkZXIpIHtcclxuICAgICAgICAgICAgX3Rocm93KCd1bmV4cGVjdGVkIHJhdyBleHBlZGl0aW9uIHR5cGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaWQ6IGRhdGEuaWQsXHJcbiAgICAgICAgICAgIGRhdGU6IGRhdGEuZGF0ZSxcclxuICAgICAgICAgICAgdHlwZTogRXhwZWRpdGlvbkV2ZW50VHlwZS50cmFkZXIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAjcGFyc2VOYXZpZ2F0aW9uRXhwZWRpdGlvbihkYXRhOiBSYXdFeHBlZGl0aW9uTWVzc2FnZURhdGEpOiBFeHBlZGl0aW9uRXZlbnREZWxheSB8IEV4cGVkaXRpb25FdmVudEVhcmx5IHtcclxuICAgICAgICBpZihkYXRhLnR5cGUgIT0gT2dhbWVSYXdFeHBlZGl0aW9uUmVzdWx0VHlwZS5kZWxheU9yRWFybHkpIHtcclxuICAgICAgICAgICAgX3Rocm93KCd1bmV4cGVjdGVkIHJhdyBleHBlZGl0aW9uIHR5cGUnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLiNtYXBTaXplKGRhdGEuc2l6ZSkgPz8gX3Rocm93KCdtaXNzaW5nIGV4cGVkaXRpb24gbmF2aWdhdGlvbiBldmVudCBzaXplJyk7XHJcblxyXG4gICAgICAgIGNvbnN0IG5hdmlnYXRpb25UeXBlID0gZGF0YS5uYXZpZ2F0aW9uVHlwZSA/PyBfdGhyb3coJ21pc3NpbmcgcmF3IG5hdmlnYXRpb24gZXZlbnQgdHlwZScpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGlkOiBkYXRhLmlkLFxyXG4gICAgICAgICAgICBkYXRlOiBkYXRhLmRhdGUsXHJcbiAgICAgICAgICAgIHNpemUsXHJcbiAgICAgICAgICAgIHR5cGU6IG5hdmlnYXRpb25UeXBlID09ICdkZWxheScgXHJcbiAgICAgICAgICAgICAgICA/IEV4cGVkaXRpb25FdmVudFR5cGUuZGVsYXlcclxuICAgICAgICAgICAgICAgIDogRXhwZWRpdGlvbkV2ZW50VHlwZS5lYXJseSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgICNwYXJzZUl0ZW1FeHBlZGl0aW9uKGRhdGE6IFJhd0V4cGVkaXRpb25NZXNzYWdlRGF0YSk6IEV4cGVkaXRpb25FdmVudEl0ZW0ge1xyXG4gICAgICAgIGlmKGRhdGEudHlwZSAhPSBPZ2FtZVJhd0V4cGVkaXRpb25SZXN1bHRUeXBlLml0ZW0pIHtcclxuICAgICAgICAgICAgX3Rocm93KCd1bmV4cGVjdGVkIHJhdyBleHBlZGl0aW9uIHR5cGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdHlwZTogRXhwZWRpdGlvbkV2ZW50VHlwZS5pdGVtLFxyXG4gICAgICAgICAgICBpZDogZGF0YS5pZCxcclxuICAgICAgICAgICAgZGF0ZTogZGF0YS5kYXRlLFxyXG4gICAgICAgICAgICBpdGVtSGFzaDogZGF0YS5pdGVtID8/IF90aHJvdygnbWlzc2luZyBpdGVtIGhhc2gnKSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgICNwYXJzZUZsZWV0RXhwZWRpdGlvbihkYXRhOiBSYXdFeHBlZGl0aW9uTWVzc2FnZURhdGEpOiBFeHBlZGl0aW9uRXZlbnRGbGVldCB7XHJcbiAgICAgICAgaWYoZGF0YS50eXBlICE9IE9nYW1lUmF3RXhwZWRpdGlvblJlc3VsdFR5cGUuZmxlZXQpIHtcclxuICAgICAgICAgICAgX3Rocm93KCd1bmV4cGVjdGVkIHJhdyBleHBlZGl0aW9uIHR5cGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuI21hcFNpemUoZGF0YS5zaXplKSA/PyBfdGhyb3coJ21pc3Npbmcgc2hpcCBmaW5kIHNpemUnKTtcclxuICAgICAgICBjb25zdCBmb3VuZFNoaXBzOiBQYXJ0aWFsPFJlY29yZDxFeHBlZGl0aW9uRmluZGFibGVTaGlwVHlwZSwgbnVtYmVyPj4gPSB7fTtcclxuXHJcbiAgICAgICAgRXhwZWRpdGlvbkZpbmRhYmxlU2hpcFR5cGVzLmZvckVhY2goc2hpcFR5cGUgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBhbW91bnQgPSBkYXRhLnNoaXBzPy5bc2hpcFR5cGVdO1xyXG4gICAgICAgICAgICBpZiAoYW1vdW50ICE9IG51bGwgJiYgYW1vdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgZm91bmRTaGlwc1tzaGlwVHlwZV0gPSBhbW91bnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYoT2JqZWN0LmtleXMoZm91bmRTaGlwcykubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgX2xvZ1dhcm5pbmcoJ2ZvdW5kIHNoaXBzIGJ1dCB0aGVyZSBhcmUgbm8gc2hpcCBhbW91bnRzJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpZDogZGF0YS5pZCxcclxuICAgICAgICAgICAgZGF0ZTogZGF0YS5kYXRlLFxyXG4gICAgICAgICAgICBzaXplLFxyXG4gICAgICAgICAgICBmbGVldDogZm91bmRTaGlwcyxcclxuICAgICAgICAgICAgdHlwZTogRXhwZWRpdGlvbkV2ZW50VHlwZS5mbGVldCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgICNwYXJzZURhcmtNYXR0ZXJFeHBlZGl0aW9uKGRhdGE6IFJhd0V4cGVkaXRpb25NZXNzYWdlRGF0YSk6IEV4cGVkaXRpb25FdmVudERhcmtNYXR0ZXIge1xyXG4gICAgICAgIGlmKGRhdGEudHlwZSAhPSBPZ2FtZVJhd0V4cGVkaXRpb25SZXN1bHRUeXBlLmRhcmtNYXR0ZXIpIHtcclxuICAgICAgICAgICAgX3Rocm93KCd1bmV4cGVjdGVkIHJhdyBleHBlZGl0aW9uIHR5cGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuI21hcFNpemUoZGF0YS5zaXplKSA/PyBfdGhyb3coJ21pc3NpbmcgZGFyayBtYXR0ZXIgZmluZCBzaXplJyk7XHJcbiAgICAgICAgY29uc3QgYW1vdW50ID0gZGF0YS5kYXJrTWF0dGVyID8/IF90aHJvdygnbWlzc2luZyBkYXJrIG1hdHRlciBhbW91bnQnKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaWQ6IGRhdGEuaWQsXHJcbiAgICAgICAgICAgIGRhdGU6IGRhdGEuZGF0ZSxcclxuICAgICAgICAgICAgZGFya01hdHRlcjogYW1vdW50LFxyXG4gICAgICAgICAgICBzaXplOiBzaXplLFxyXG4gICAgICAgICAgICB0eXBlOiBFeHBlZGl0aW9uRXZlbnRUeXBlLmRhcmtNYXR0ZXIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAjcGFyc2VSZXNvdXJjZUV4cGVkaXRpb24oZGF0YTogUmF3RXhwZWRpdGlvbk1lc3NhZ2VEYXRhKTogRXhwZWRpdGlvbkV2ZW50UmVzb3VyY2VzIHsgICBcclxuICAgICAgICBpZihkYXRhLnR5cGUgIT0gT2dhbWVSYXdFeHBlZGl0aW9uUmVzdWx0VHlwZS5yZXNvdXJjZXMpIHtcclxuICAgICAgICAgICAgX3Rocm93KCd1bmV4cGVjdGVkIHJhdyBleHBlZGl0aW9uIHR5cGUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuI21hcFNpemUoZGF0YS5zaXplKSA/PyBfdGhyb3coJ21pc3NpbmcgcmVzb3VyY2UgZmluZCBzaXplJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgcmVzb3VyY2VzOiBFeHBlZGl0aW9uRXZlbnRSZXNvdXJjZXNbJ3Jlc291cmNlcyddID0ge1xyXG4gICAgICAgICAgICBbUmVzb3VyY2VUeXBlLm1ldGFsXTogZGF0YS5yZXNvdXJjZXM/Lm1ldGFsID8/IDAsXHJcbiAgICAgICAgICAgIFtSZXNvdXJjZVR5cGUuY3J5c3RhbF06IGRhdGEucmVzb3VyY2VzPy5jcnlzdGFsID8/IDAsXHJcbiAgICAgICAgICAgIFtSZXNvdXJjZVR5cGUuZGV1dGVyaXVtXTogZGF0YS5yZXNvdXJjZXM/LmRldXRlcml1bSA/PyAwLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmKHJlc291cmNlcy5tZXRhbCArIHJlc291cmNlcy5jcnlzdGFsICsgcmVzb3VyY2VzLmRldXRlcml1bSA9PSAwKSB7XHJcbiAgICAgICAgICAgIF9sb2dXYXJuaW5nKCdmb3VuZCByZXNvdXJjZXMgYnV0IHJlc291cmNlIGFtb3VudHMgYXJlIDAnKTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0eXBlOiBFeHBlZGl0aW9uRXZlbnRUeXBlLnJlc291cmNlcyxcclxuICAgICAgICAgICAgaWQ6IGRhdGEuaWQsXHJcbiAgICAgICAgICAgIGRhdGU6IGRhdGEuZGF0ZSxcclxuICAgICAgICAgICAgcmVzb3VyY2VzLFxyXG4gICAgICAgICAgICBzaXplLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgI21hcFNpemUocmF3U2l6ZT86IE9nYW1lUmF3RXhwZWRpdGlvblNpemUpOiBFeHBlZGl0aW9uRXZlbnRTaXplIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBpZihyYXdTaXplID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIFtPZ2FtZVJhd0V4cGVkaXRpb25TaXplLnNtYWxsXTogRXhwZWRpdGlvbkV2ZW50U2l6ZS5zbWFsbCxcclxuICAgICAgICAgICAgW09nYW1lUmF3RXhwZWRpdGlvblNpemUubWVkaXVtXTogRXhwZWRpdGlvbkV2ZW50U2l6ZS5tZWRpdW0sXHJcbiAgICAgICAgICAgIFtPZ2FtZVJhd0V4cGVkaXRpb25TaXplLmxhcmdlXTogRXhwZWRpdGlvbkV2ZW50U2l6ZS5sYXJnZSxcclxuICAgICAgICB9W3Jhd1NpemVdO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgVHJ5QWN0aW9uUmVzdWx0IH0gZnJvbSBcIi4uLy4uL3NoYXJlZC9UcnlBY3Rpb25SZXN1bHRcIjtcclxuaW1wb3J0IHsgX2xvZywgX2xvZ0RlYnVnLCBfbG9nRXJyb3IsIF9sb2dXYXJuaW5nIH0gZnJvbSBcIi4uLy4uL3NoYXJlZC91dGlscy9fbG9nXCI7XHJcbmltcG9ydCB7IF90aHJvdyB9IGZyb20gXCIuLi8uLi9zaGFyZWQvdXRpbHMvX3Rocm93XCI7XHJcbmltcG9ydCB7IGdldFBsYXllckRhdGFiYXNlIH0gZnJvbSBcIkAvc2hhcmVkL2RiL2FjY2Vzc1wiO1xyXG5pbXBvcnQgeyBMaWZlZm9ybURpc2NvdmVyeUV2ZW50LCBMaWZlZm9ybURpc2NvdmVyeUV2ZW50QXJ0aWZhY3RzLCBMaWZlZm9ybURpc2NvdmVyeUV2ZW50S25vd25MaWZlZm9ybUZvdW5kLCBMaWZlZm9ybURpc2NvdmVyeUV2ZW50TG9zdFNoaXAsIExpZmVmb3JtRGlzY292ZXJ5RXZlbnROZXdMaWZlZm9ybUZvdW5kLCBMaWZlZm9ybURpc2NvdmVyeUV2ZW50Tm90aGluZyB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvbGlmZWZvcm0tZGlzY292ZXJpZXMvTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFwiO1xyXG5pbXBvcnQgeyBSYXdMaWZlZm9ybURpc2NvdmVyeU1lc3NhZ2VEYXRhLCBUcmFja0xpZmVmb3JtRGlzY292ZXJ5TWVzc2FnZSB9IGZyb20gXCJAL3NoYXJlZC9tZXNzYWdlcy90cmFja2luZy9saWZlZm9ybS1kaXNjb3Zlcmllc1wiO1xyXG5pbXBvcnQgeyBMaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZSB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvbGlmZWZvcm0tZGlzY292ZXJpZXMvTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGVcIjtcclxuaW1wb3J0IHsgTGlmZWZvcm1UeXBlLCBWYWxpZExpZmVmb3JtVHlwZSB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvb2dhbWUvbGlmZWZvcm1zL0xpZmVmb3JtVHlwZVwiO1xyXG5pbXBvcnQgeyBMaWZlZm9ybURpc2NvdmVyeUV2ZW50QXJ0aWZhY3RGaW5kaW5nU2l6ZSB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvbGlmZWZvcm0tZGlzY292ZXJpZXMvTGlmZWZvcm1EaXNjb3ZlcnlFdmVudEFydGlmYWN0RmluZGluZ1NpemVcIjtcclxuaW1wb3J0IHsgT2dhbWVSYXdMaWZlZm9ybURpc2NvdmVyeVR5cGUgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL29nYW1lL21lc3NhZ2VzL09nYW1lUmF3TGlmZWZvcm1EaXNjb3ZlcnlUeXBlXCI7XHJcbmltcG9ydCB7IE9nYW1lUmF3QXJ0aWZhY3RGaW5kU2l6ZSB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvb2dhbWUvbWVzc2FnZXMvT2dhbWVSYXdBcnRpZmFjdEZpbmRTaXplXCI7XHJcbmltcG9ydCB7IE9nYW1lUmF3TGlmZWZvcm1UeXBlIH0gZnJvbSBcIkAvc2hhcmVkL21vZGVscy9vZ2FtZS9tZXNzYWdlcy9PZ2FtZVJhd0xpZmVmb3JtVHlwZVwiO1xyXG5cclxuaW50ZXJmYWNlIExpZmVmb3JtRGlzY292ZXJ5RXZlbnRSZXN1bHQge1xyXG4gICAgbGlmZWZvcm1EaXNjb3Zlcnk6IExpZmVmb3JtRGlzY292ZXJ5RXZlbnQ7XHJcbiAgICBpc0FscmVhZHlUcmFja2VkOiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTGlmZWZvcm1EaXNjb3ZlcnlNb2R1bGUge1xyXG4gICAgcHVibGljIGFzeW5jIHRyeVRyYWNrRXhwZWRpdGlvbihtZXNzYWdlOiBUcmFja0xpZmVmb3JtRGlzY292ZXJ5TWVzc2FnZSk6IFByb21pc2U8VHJ5QWN0aW9uUmVzdWx0PExpZmVmb3JtRGlzY292ZXJ5RXZlbnRSZXN1bHQ+PiB7XHJcbiAgICAgICAgY29uc3QgbGlmZWZvcm1EaXNjb3ZlcnlFdmVudERhdGEgPSBtZXNzYWdlLmRhdGE7XHJcbiAgICAgICAgY29uc3QgZGIgPSBhd2FpdCBnZXRQbGF5ZXJEYXRhYmFzZShtZXNzYWdlLm9nYW1lTWV0YSk7XHJcblxyXG4gICAgICAgIC8vIGNoZWNrIGlmIGRpc2NvdmVyeSBhbHJlYWR5IHRyYWNrZWQgPT4gaWYgdHJ1ZSwgcmV0dXJuIHRyYWNrZWQgZGF0YVxyXG4gICAgICAgIGNvbnN0IGtub3duTGlmZWZvcm1EaXNjb3ZlcnkgPSBhd2FpdCBkYi5nZXQoJ2xpZmVmb3JtRGlzY292ZXJpZXMnLCBsaWZlZm9ybURpc2NvdmVyeUV2ZW50RGF0YS5pZCk7XHJcbiAgICAgICAgaWYgKGtub3duTGlmZWZvcm1EaXNjb3ZlcnkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHJlc3VsdDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpZmVmb3JtRGlzY292ZXJ5OiBrbm93bkxpZmVmb3JtRGlzY292ZXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgIGlzQWxyZWFkeVRyYWNrZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gXHJcblxyXG4gICAgICAgIC8vIG90aGVyd2lzZSBwYXJzZSBhbmQgc2F2ZSByZXN1bHRcclxuICAgICAgICBsZXQgbGlmZWZvcm1EaXNjb3Zlcnk6IExpZmVmb3JtRGlzY292ZXJ5RXZlbnQ7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgbGlmZWZvcm1EaXNjb3ZlcnkgPSB0aGlzLiNwYXJzZUxpZmVmb3JtRGlzY292ZXJ5KGxpZmVmb3JtRGlzY292ZXJ5RXZlbnREYXRhKTtcclxuXHJcbiAgICAgICAgICAgIGF3YWl0IGRiLnB1dCgnbGlmZWZvcm1EaXNjb3ZlcmllcycsIGxpZmVmb3JtRGlzY292ZXJ5KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGlmZWZvcm1EaXNjb3ZlcnksXHJcbiAgICAgICAgICAgICAgICAgICAgaXNBbHJlYWR5VHJhY2tlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIF9sb2dXYXJuaW5nKHsgZXJyb3IsIG1lc3NhZ2UgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgICNwYXJzZUxpZmVmb3JtRGlzY292ZXJ5KGRhdGE6IFJhd0xpZmVmb3JtRGlzY292ZXJ5TWVzc2FnZURhdGEpOiBMaWZlZm9ybURpc2NvdmVyeUV2ZW50IHtcclxuICAgICAgICBjb25zdCByZXN1bHQ6IExpZmVmb3JtRGlzY292ZXJ5RXZlbnQgPSB7XHJcbiAgICAgICAgICAgIFtPZ2FtZVJhd0xpZmVmb3JtRGlzY292ZXJ5VHlwZS5ub25lXTogKCkgPT4gdGhpcy4jcGFyc2VOb3RoaW5nTGlmZWZvcm1EaXNjb3ZlcnkoZGF0YSksXHJcbiAgICAgICAgICAgIFtPZ2FtZVJhd0xpZmVmb3JtRGlzY292ZXJ5VHlwZS5hcnRpZmFjdHNdOiAoKSA9PiB0aGlzLiNwYXJzZUFydGlmYWN0c0xpZmVmb3JtRGlzY292ZXJ5KGRhdGEpLFxyXG4gICAgICAgICAgICBbT2dhbWVSYXdMaWZlZm9ybURpc2NvdmVyeVR5cGUubGlmZWZvcm1FeHBlcmllbmNlXTogKCkgPT4gdGhpcy4jcGFyc2VMaWZlZm9ybUV4cGVyaWVuY2VEaXNjb3ZlcnkoZGF0YSksXHJcbiAgICAgICAgICAgIFtPZ2FtZVJhd0xpZmVmb3JtRGlzY292ZXJ5VHlwZS5saWZlZm9ybUZvdW5kXTogKCkgPT4gdGhpcy4jcGFyc2VOZXdMaWZlZm9ybUZvdW5kTGlmZWZvcm1EaXNjb3ZlcnkoZGF0YSksXHJcbiAgICAgICAgICAgIFtPZ2FtZVJhd0xpZmVmb3JtRGlzY292ZXJ5VHlwZS5zaGlwTG9zdF06ICgpID0+IHRoaXMuI3BhcnNlTG9zdFNoaXBMaWZlZm9ybURpc2NvdmVyeShkYXRhKSxcclxuICAgICAgICB9W2RhdGEudHlwZV0oKTtcclxuXHJcbiAgICAgICAgaWYgKHJlc3VsdCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIF90aHJvdygnVW5rbm93biBsaWZlZm9ybSBkaXNjb3ZlcnkgdHlwZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICAjcGFyc2VOb3RoaW5nTGlmZWZvcm1EaXNjb3ZlcnkoZGF0YTogUmF3TGlmZWZvcm1EaXNjb3ZlcnlNZXNzYWdlRGF0YSk6IExpZmVmb3JtRGlzY292ZXJ5RXZlbnROb3RoaW5nIHtcclxuICAgICAgICBpZihkYXRhLnR5cGUgIT0gT2dhbWVSYXdMaWZlZm9ybURpc2NvdmVyeVR5cGUubm9uZSkge1xyXG4gICAgICAgICAgICBfdGhyb3coJ3VuZXhwZWN0ZWQgbGlmZWZvcm0gZGlzY292ZXJ5IHR5cGUnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGlkOiBkYXRhLmlkLFxyXG4gICAgICAgICAgICBkYXRlOiBkYXRhLmRhdGUsXHJcbiAgICAgICAgICAgIHR5cGU6IExpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlLm5vdGhpbmcsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAjcGFyc2VBcnRpZmFjdHNMaWZlZm9ybURpc2NvdmVyeShkYXRhOiBSYXdMaWZlZm9ybURpc2NvdmVyeU1lc3NhZ2VEYXRhKTogTGlmZWZvcm1EaXNjb3ZlcnlFdmVudEFydGlmYWN0cyB7XHJcbiAgICAgICAgaWYoZGF0YS50eXBlICE9IE9nYW1lUmF3TGlmZWZvcm1EaXNjb3ZlcnlUeXBlLmFydGlmYWN0cykge1xyXG4gICAgICAgICAgICBfdGhyb3coJ3VuZXhwZWN0ZWQgbGlmZWZvcm0gZGlzY292ZXJ5IHR5cGUnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGFydGlmYWN0cyA9IGRhdGEuYXJ0aWZhY3RzRm91bmQgPz8gX3Rocm93KCdtaXNzaW5nIGFydGlmYWN0cyBhbW91bnQnKTtcclxuICAgICAgICBjb25zdCBhcnRpZmFjdFNpemUgPSBkYXRhLmFydGlmYWN0c1NpemUgPz8gX3Rocm93KCdtaXNzaW5nIGFydGlmYWN0IGZpbmQgc2l6ZScpO1xyXG5cclxuICAgICAgICBjb25zdCBtYXBwZWRTaXplID0ge1xyXG4gICAgICAgICAgICBbT2dhbWVSYXdBcnRpZmFjdEZpbmRTaXplLnNtYWxsXTogTGlmZWZvcm1EaXNjb3ZlcnlFdmVudEFydGlmYWN0RmluZGluZ1NpemUuc21hbGwsXHJcbiAgICAgICAgICAgIFtPZ2FtZVJhd0FydGlmYWN0RmluZFNpemUubWVkaXVtXTogTGlmZWZvcm1EaXNjb3ZlcnlFdmVudEFydGlmYWN0RmluZGluZ1NpemUubWVkaXVtLFxyXG4gICAgICAgICAgICBbT2dhbWVSYXdBcnRpZmFjdEZpbmRTaXplLmxhcmdlXTogTGlmZWZvcm1EaXNjb3ZlcnlFdmVudEFydGlmYWN0RmluZGluZ1NpemUubGFyZ2UsXHJcbiAgICAgICAgICAgIFtPZ2FtZVJhd0FydGlmYWN0RmluZFNpemUuZnVsbFN0b3JhZ2VdOiBMaWZlZm9ybURpc2NvdmVyeUV2ZW50QXJ0aWZhY3RGaW5kaW5nU2l6ZS5zdG9yYWdlRnVsbCxcclxuICAgICAgICB9W2FydGlmYWN0U2l6ZV07XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGlkOiBkYXRhLmlkLFxyXG4gICAgICAgICAgICBkYXRlOiBkYXRhLmRhdGUsXHJcbiAgICAgICAgICAgIHR5cGU6IExpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlLmFydGlmYWN0cyxcclxuICAgICAgICAgICAgYXJ0aWZhY3RzLFxyXG4gICAgICAgICAgICBzaXplOiBtYXBwZWRTaXplLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgI3BhcnNlTG9zdFNoaXBMaWZlZm9ybURpc2NvdmVyeShkYXRhOiBSYXdMaWZlZm9ybURpc2NvdmVyeU1lc3NhZ2VEYXRhKTogTGlmZWZvcm1EaXNjb3ZlcnlFdmVudExvc3RTaGlwIHtcclxuICAgICAgICBpZihkYXRhLnR5cGUgIT0gT2dhbWVSYXdMaWZlZm9ybURpc2NvdmVyeVR5cGUuc2hpcExvc3QpIHtcclxuICAgICAgICAgICAgX3Rocm93KCd1bmV4cGVjdGVkIGxpZmVmb3JtIGRpc2NvdmVyeSB0eXBlJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpZDogZGF0YS5pZCxcclxuICAgICAgICAgICAgZGF0ZTogZGF0YS5kYXRlLFxyXG4gICAgICAgICAgICB0eXBlOiBMaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZS5sb3N0U2hpcCxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgICNwYXJzZUxpZmVmb3JtRXhwZXJpZW5jZURpc2NvdmVyeShkYXRhOiBSYXdMaWZlZm9ybURpc2NvdmVyeU1lc3NhZ2VEYXRhKTogTGlmZWZvcm1EaXNjb3ZlcnlFdmVudEtub3duTGlmZWZvcm1Gb3VuZCB7XHJcbiAgICAgICAgaWYoZGF0YS50eXBlICE9IE9nYW1lUmF3TGlmZWZvcm1EaXNjb3ZlcnlUeXBlLmxpZmVmb3JtRXhwZXJpZW5jZSkge1xyXG4gICAgICAgICAgICBfdGhyb3coJ3VuZXhwZWN0ZWQgbGlmZWZvcm0gZGlzY292ZXJ5IHR5cGUnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGxpZmVmb3JtSWQgPSBkYXRhLmxpZmVmb3JtID8/IF90aHJvdygnbWlzc2luZyBsaWZlZm9ybScpO1xyXG4gICAgICAgIGNvbnN0IGxpZmVmb3JtID0gdGhpcy4jbWFwTGlmZWZvcm0obGlmZWZvcm1JZCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgZXhwZXJpZW5jZSA9IGRhdGEubGlmZWZvcm1FeHBlcmllbmNlID8/IF90aHJvdygnbWlzc2luZyBmb3VuZCBleHBlcmllbmNlJyk7XHJcbiAgICBcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpZDogZGF0YS5pZCxcclxuICAgICAgICAgICAgZGF0ZTogZGF0YS5kYXRlLFxyXG4gICAgICAgICAgICB0eXBlOiBMaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZS5rbm93bkxpZmVmb3JtRm91bmQsXHJcbiAgICAgICAgICAgIGxpZmVmb3JtLFxyXG4gICAgICAgICAgICBleHBlcmllbmNlLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgI3BhcnNlTmV3TGlmZWZvcm1Gb3VuZExpZmVmb3JtRGlzY292ZXJ5KGRhdGE6IFJhd0xpZmVmb3JtRGlzY292ZXJ5TWVzc2FnZURhdGEpOiBMaWZlZm9ybURpc2NvdmVyeUV2ZW50TmV3TGlmZWZvcm1Gb3VuZCB7XHJcbiAgICAgICAgaWYoZGF0YS50eXBlICE9IE9nYW1lUmF3TGlmZWZvcm1EaXNjb3ZlcnlUeXBlLmxpZmVmb3JtRm91bmQpIHtcclxuICAgICAgICAgICAgX3Rocm93KCd1bmV4cGVjdGVkIGxpZmVmb3JtIGRpc2NvdmVyeSB0eXBlJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBsaWZlZm9ybUlkID0gZGF0YS5saWZlZm9ybSA/PyBfdGhyb3coJ21pc3NpbmcgbGlmZWZvcm0nKTtcclxuICAgICAgICBjb25zdCBsaWZlZm9ybSA9IHRoaXMuI21hcExpZmVmb3JtKGxpZmVmb3JtSWQpO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpZDogZGF0YS5pZCxcclxuICAgICAgICAgICAgZGF0ZTogZGF0YS5kYXRlLFxyXG4gICAgICAgICAgICB0eXBlOiBMaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZS5uZXdMaWZlZm9ybUZvdW5kLFxyXG4gICAgICAgICAgICBsaWZlZm9ybSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgICNtYXBMaWZlZm9ybShsaWZlZm9ybTogT2dhbWVSYXdMaWZlZm9ybVR5cGUpOiBWYWxpZExpZmVmb3JtVHlwZSB7XHJcbiAgICAgICAgcmV0dXJuICh7XHJcbiAgICAgICAgICAgICAgICAgICAgW09nYW1lUmF3TGlmZWZvcm1UeXBlLmh1bWFuc106IExpZmVmb3JtVHlwZS5odW1hbnMsXHJcbiAgICAgICAgICAgICAgICAgICAgW09nYW1lUmF3TGlmZWZvcm1UeXBlLnJvY2t0YWxdOiBMaWZlZm9ybVR5cGUucm9ja3RhbCxcclxuICAgICAgICAgICAgICAgICAgICBbT2dhbWVSYXdMaWZlZm9ybVR5cGUubWVjaGFzXTogTGlmZWZvcm1UeXBlLm1lY2hhcyxcclxuICAgICAgICAgICAgICAgICAgICBbT2dhbWVSYXdMaWZlZm9ybVR5cGUua2FlbGVzaF06IExpZmVmb3JtVHlwZS5rYWVsZXNoLFxyXG4gICAgICAgICAgICAgICAgfSBzYXRpc2ZpZXMgUmVjb3JkPE9nYW1lUmF3TGlmZWZvcm1UeXBlLCBWYWxpZExpZmVmb3JtVHlwZT5cclxuICAgICAgICAgICAgKVtsaWZlZm9ybV1cclxuICAgICAgICAgICAgPz8gX3Rocm93KCdpbnZhbGlkIGxpZmVmb3JtIHR5cGUnKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IE1lc3NhZ2VPZ2FtZU1ldGEgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL21lc3NhZ2VzL01lc3NhZ2VcIjtcclxuaW1wb3J0IHsgX2xvZ0RlYnVnIH0gZnJvbSBcIkAvc2hhcmVkL3V0aWxzL19sb2dcIjtcclxuaW1wb3J0IHsgWE1MUGFyc2VyIH0gZnJvbSBcImZhc3QteG1sLXBhcnNlclwiO1xyXG5pbXBvcnQgeyBnZXRTZXJ2ZXJEYXRhYmFzZSB9IGZyb20gXCJAL3NoYXJlZC9kYi9hY2Nlc3NcIjtcclxuaW1wb3J0IHsgYnJvYWRjYXN0TWVzc2FnZSB9IGZyb20gXCJAL3NoYXJlZC9jb21tdW5pY2F0aW9uL2Jyb2FkY2FzdE1lc3NhZ2VcIjtcclxuaW1wb3J0IHsgTm90aWZ5U2VydmVyU2V0dGluZ3NVcGRhdGVNZXNzYWdlIH0gZnJvbSBcIkAvc2hhcmVkL21lc3NhZ2VzL3RyYWNraW5nL3NlcnZlci1zZXR0aW5nc1wiO1xyXG5pbXBvcnQgeyBNZXNzYWdlVHlwZSB9IGZyb20gXCJAL3NoYXJlZC9tZXNzYWdlcy9NZXNzYWdlVHlwZVwiO1xyXG5pbXBvcnQgeyBzZXJ2aWNlV29ya2VyVXVpZCB9IGZyb20gXCJAL3NoYXJlZC91dWlkXCI7XHJcbmltcG9ydCB7IHBhcnNlRmxvYXRTYWZlIH0gZnJvbSBcIkAvc2hhcmVkL3V0aWxzL3BhcnNlTnVtYmVyc1wiO1xyXG5pbXBvcnQgeyBfdGhyb3cgfSBmcm9tIFwiQC9zaGFyZWQvdXRpbHMvX3Rocm93XCI7XHJcbmltcG9ydCB7IERiU2VydmVyU2V0dGluZ3MgfSBmcm9tIFwiQC9zaGFyZWQvZGIvc2NoZW1hL3NlcnZlclwiO1xyXG5cclxuZGVjbGFyZSBuYW1lc3BhY2UgT2dhbWVBcGkge1xyXG4gICAgaW50ZXJmYWNlIFNlcnZlclNldHRpbmdzWG1sIHtcclxuICAgICAgICBzZXJ2ZXJEYXRhOiBTZXJ2ZXJEYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIGludGVyZmFjZSBTZXJ2ZXJEYXRhIHtcclxuICAgICAgICBuYW1lPzogc3RyaW5nO1xyXG4gICAgICAgIG51bWJlcjogc3RyaW5nO1xyXG4gICAgICAgIGxhbmd1YWdlOiBzdHJpbmc7XHJcbiAgICAgICAgdGltZXpvbmU6IHN0cmluZztcclxuICAgICAgICB0aW1lem9uZU9mZnNldDogc3RyaW5nO1xyXG4gICAgICAgIGRvbWFpbjogc3RyaW5nO1xyXG4gICAgICAgIHZlcnNpb246IHN0cmluZztcclxuICAgICAgICBzcGVlZDogc3RyaW5nO1xyXG4gICAgICAgIHNwZWVkRmxlZXRQZWFjZWZ1bDogc3RyaW5nO1xyXG4gICAgICAgIHNwZWVkRmxlZXRXYXI6IHN0cmluZztcclxuICAgICAgICBzcGVlZEZsZWV0SG9sZGluZzogc3RyaW5nO1xyXG4gICAgICAgIGdhbGF4aWVzOiBzdHJpbmc7XHJcbiAgICAgICAgc3lzdGVtczogc3RyaW5nO1xyXG4gICAgICAgIGFjczogc3RyaW5nO1xyXG4gICAgICAgIHJhcGlkRmlyZTogc3RyaW5nO1xyXG4gICAgICAgIGRlZlRvVEY6IHN0cmluZztcclxuICAgICAgICBkZWJyaXNGYWN0b3I6IHN0cmluZztcclxuICAgICAgICBkZWJyaXNGYWN0b3JEZWY6IHN0cmluZztcclxuICAgICAgICByZXBhaXJGYWN0b3I6IHN0cmluZztcclxuICAgICAgICBuZXdiaWVQcm90ZWN0aW9uTGltaXQ6IHN0cmluZztcclxuICAgICAgICBuZXdiaWVQcm90ZWN0aW9uSGlnaDogc3RyaW5nO1xyXG4gICAgICAgIHRvcFNjb3JlOiBzdHJpbmc7XHJcbiAgICAgICAgYm9udXNGaWVsZHM6IHN0cmluZztcclxuICAgICAgICBkb251dEdhbGF4eTogc3RyaW5nO1xyXG4gICAgICAgIGRvbnV0U3lzdGVtOiBzdHJpbmc7XHJcbiAgICAgICAgd2ZFbmFibGVkOiBzdHJpbmc7XHJcbiAgICAgICAgd2ZNaW5pbXVtUmVzc0xvc3Q6IHN0cmluZztcclxuICAgICAgICB3Zk1pbmltdW1Mb3NzUGVyY2VudGFnZTogc3RyaW5nO1xyXG4gICAgICAgIHdmQmFzaWNQZXJjZW50YWdlUmVwYWlyYWJsZTogc3RyaW5nO1xyXG4gICAgICAgIGdsb2JhbERldXRlcml1bVNhdmVGYWN0b3I6IHN0cmluZztcclxuICAgICAgICBiYXNobGltaXQ6IHN0cmluZztcclxuICAgICAgICBwcm9iZUNhcmdvOiBzdHJpbmc7XHJcbiAgICAgICAgcmVzZWFyY2hEdXJhdGlvbkRpdmlzb3I6IHN0cmluZztcclxuICAgICAgICBkYXJrTWF0dGVyTmV3QWNvdW50OiBzdHJpbmc7XHJcbiAgICAgICAgY2FyZ29IeXBlcnNwYWNlVGVjaE11bHRpcGxpZXI6IHN0cmluZztcclxuICAgICAgICBtYXJrZXRwbGFjZUVuYWJsZWQ6IHN0cmluZztcclxuICAgICAgICBtYXJrZXRwbGFjZUJhc2ljVHJhZGVSYXRpb01ldGFsOiBzdHJpbmc7XHJcbiAgICAgICAgbWFya2V0cGxhY2VCYXNpY1RyYWRlUmF0aW9DcnlzdGFsOiBzdHJpbmc7XHJcbiAgICAgICAgbWFya2V0cGxhY2VCYXNpY1RyYWRlUmF0aW9EZXV0ZXJpdW06IHN0cmluZztcclxuICAgICAgICBtYXJrZXRwbGFjZVByaWNlUmFuZ2VMb3dlcjogc3RyaW5nO1xyXG4gICAgICAgIG1hcmtldHBsYWNlUHJpY2VSYW5nZVVwcGVyOiBzdHJpbmc7XHJcbiAgICAgICAgbWFya2V0cGxhY2VUYXhOb3JtYWxVc2VyOiBzdHJpbmc7XHJcbiAgICAgICAgbWFya2V0cGxhY2VUYXhBZG1pcmFsOiBzdHJpbmc7XHJcbiAgICAgICAgbWFya2V0cGxhY2VUYXhDYW5jZWxPZmZlcjogc3RyaW5nO1xyXG4gICAgICAgIG1hcmtldHBsYWNlVGF4Tm90U29sZDogc3RyaW5nO1xyXG4gICAgICAgIG1hcmtldHBsYWNlT2ZmZXJUaW1lb3V0OiBzdHJpbmc7XHJcbiAgICAgICAgY2hhcmFjdGVyQ2xhc3Nlc0VuYWJsZWQ6IHN0cmluZztcclxuICAgICAgICBtaW5lckJvbnVzUmVzb3VyY2VQcm9kdWN0aW9uOiBzdHJpbmc7XHJcbiAgICAgICAgbWluZXJCb251c0Zhc3RlclRyYWRpbmdTaGlwczogc3RyaW5nO1xyXG4gICAgICAgIG1pbmVyQm9udXNJbmNyZWFzZWRDYXJnb0NhcGFjaXR5Rm9yVHJhZGluZ1NoaXBzOiBzdHJpbmc7XHJcbiAgICAgICAgbWluZXJCb251c0FkZGl0aW9uYWxGbGVldFNsb3RzOiBzdHJpbmc7XHJcbiAgICAgICAgbWluZXJCb251c0FkZGl0aW9uYWxNYXJrZXRTbG90czogc3RyaW5nO1xyXG4gICAgICAgIG1pbmVyQm9udXNBZGRpdGlvbmFsQ3Jhd2xlcjogc3RyaW5nO1xyXG4gICAgICAgIG1pbmVyQm9udXNNYXhDcmF3bGVyOiBzdHJpbmc7XHJcbiAgICAgICAgbWluZXJCb251c0VuZXJneTogc3RyaW5nO1xyXG4gICAgICAgIG1pbmVyQm9udXNPdmVybG9hZENyYXdsZXI6IHN0cmluZztcclxuICAgICAgICByZXNvdXJjZUJ1Z2d5UHJvZHVjdGlvbkJvb3N0OiBzdHJpbmc7XHJcbiAgICAgICAgcmVzb3VyY2VCdWdneU1heFByb2R1Y3Rpb25Cb29zdDogc3RyaW5nO1xyXG4gICAgICAgIHJlc291cmNlQnVnZ3lFbmVyZ3lDb25zdW1wdGlvblBlclVuaXQ6IHN0cmluZztcclxuICAgICAgICB3YXJyaW9yQm9udXNGYXN0ZXJDb21iYXRTaGlwczogc3RyaW5nO1xyXG4gICAgICAgIHdhcnJpb3JCb251c0Zhc3RlclJlY3ljbGVyczogc3RyaW5nO1xyXG4gICAgICAgIHdhcnJpb3JCb251c0Z1ZWxDb25zdW1wdGlvbjogc3RyaW5nO1xyXG4gICAgICAgIHdhcnJpb3JCb251c1JlY3ljbGVyRnVlbENvbnN1bXB0aW9uOiBzdHJpbmc7XHJcbiAgICAgICAgd2FycmlvckJvbnVzUmVjeWNsZXJDYXJnb0NhcGFjaXR5OiBzdHJpbmc7XHJcbiAgICAgICAgd2FycmlvckJvbnVzQWRkaXRpb25hbEZsZWV0U2xvdHM6IHN0cmluZztcclxuICAgICAgICB3YXJyaW9yQm9udXNBZGRpdGlvbmFsTW9vbkZpZWxkczogc3RyaW5nO1xyXG4gICAgICAgIHdhcnJpb3JCb251c0ZsZWV0SGFsZlNwZWVkOiBzdHJpbmc7XHJcbiAgICAgICAgd2FycmlvckJvbnVzQXR0YWNrZXJXcmVja2ZpZWxkOiBzdHJpbmc7XHJcbiAgICAgICAgY29tYmF0RGVicmlzRmllbGRMaW1pdDogc3RyaW5nO1xyXG4gICAgICAgIGV4cGxvcmVyQm9udXNJbmNyZWFzZWRSZXNlYXJjaFNwZWVkOiBzdHJpbmc7XHJcbiAgICAgICAgZXhwbG9yZXJCb251c0luY3JlYXNlZEV4cGVkaXRpb25PdXRjb21lOiBzdHJpbmc7XHJcbiAgICAgICAgZXhwbG9yZXJCb251c0xhcmdlclBsYW5ldHM6IHN0cmluZztcclxuICAgICAgICBleHBsb3JlclVuaXRJdGVtc1BlckRheTogc3RyaW5nO1xyXG4gICAgICAgIGV4cGxvcmVyQm9udXNQaGFsYW54UmFuZ2U6IHN0cmluZztcclxuICAgICAgICBleHBsb3JlckJvbnVzUGx1bmRlckluYWN0aXZlOiBzdHJpbmc7XHJcbiAgICAgICAgZXhwbG9yZXJCb251c0V4cGVkaXRpb25FbmVteVJlZHVjdGlvbjogc3RyaW5nO1xyXG4gICAgICAgIGV4cGxvcmVyQm9udXNBZGRpdGlvbmFsRXhwZWRpdGlvblNsb3RzOiBzdHJpbmc7XHJcbiAgICAgICAgcmVzb3VyY2VQcm9kdWN0aW9uSW5jcmVhc2VDcnlzdGFsRGVmYXVsdDogc3RyaW5nO1xyXG4gICAgICAgIHJlc291cmNlUHJvZHVjdGlvbkluY3JlYXNlQ3J5c3RhbFBvczE6IHN0cmluZztcclxuICAgICAgICByZXNvdXJjZVByb2R1Y3Rpb25JbmNyZWFzZUNyeXN0YWxQb3MyOiBzdHJpbmc7XHJcbiAgICAgICAgcmVzb3VyY2VQcm9kdWN0aW9uSW5jcmVhc2VDcnlzdGFsUG9zMzogc3RyaW5nO1xyXG4gICAgICAgIGV4b2R1c1JhdGlvTWV0YWw6IHN0cmluZztcclxuICAgICAgICBleG9kdXNSYXRpb0NyeXN0YWw6IHN0cmluZztcclxuICAgICAgICBleG9kdXNSYXRpb0RldXRlcml1bTogc3RyaW5nO1xyXG5cclxuICAgICAgICAvL3JlbW92ZSA/IHdoZW4gbGlmZWZvcm0gb24gYWxsIHNlcnZlcnNcclxuICAgICAgICBsaWZlZm9ybVNldHRpbmdzPzogUmVjb3JkPHN0cmluZywgYW55PjtcclxuICAgIH1cclxufVxyXG5cclxudHlwZSBTZXJ2ZXJTZXR0aW5nc01hcHBpbmc8XHJcbiAgICBUS2V5RnJvbSBleHRlbmRzIGtleW9mIE9nYW1lQXBpLlNlcnZlckRhdGEgPSBrZXlvZiBPZ2FtZUFwaS5TZXJ2ZXJEYXRhLFxyXG4gICAgVEtleVRvIGV4dGVuZHMga2V5b2YgRGJTZXJ2ZXJTZXR0aW5ncyA9IGtleW9mIERiU2VydmVyU2V0dGluZ3NcclxuPiA9IHtcclxuICAgIGZyb21LZXk6IFRLZXlGcm9tO1xyXG4gICAgdG9LZXk6IFRLZXlUbztcclxufSAmIChcclxuICAgICAgICB8IHsgdHlwZTogU3RyaW5nQ29uc3RydWN0b3IgfCBOdW1iZXJDb25zdHJ1Y3RvciB8IEJvb2xlYW5Db25zdHJ1Y3RvciB9XHJcbiAgICAgICAgfCB7IGNvbnZlcnNpb246ICh2YWx1ZTogT2dhbWVBcGkuU2VydmVyRGF0YVtUS2V5RnJvbV0sIHNlcnZlckRhdGE6IE9nYW1lQXBpLlNlcnZlckRhdGEpID0+IERiU2VydmVyU2V0dGluZ3NbVEtleVRvXSB9XHJcbiAgICApO1xyXG5cclxuY29uc3QgJGtleVR5cGVzOiBSZWNvcmQ8a2V5b2YgT2dhbWVBcGkuU2VydmVyRGF0YSwgU2VydmVyU2V0dGluZ3NNYXBwaW5nPiA9IHtcclxuICAgIG5hbWU6IHtcclxuICAgICAgICBmcm9tS2V5OiAnbmFtZScsXHJcbiAgICAgICAgdG9LZXk6ICduYW1lJyxcclxuICAgICAgICBjb252ZXJzaW9uOiAobmFtZSwgc2VydmVyRGF0YSkgPT4gKG5hbWUgYXMgc3RyaW5nIHwgdW5kZWZpbmVkKSA/PyBgJHtzZXJ2ZXJEYXRhLmxhbmd1YWdlLnRvVXBwZXJDYXNlKCl9ICR7c2VydmVyRGF0YS5udW1iZXJ9YCxcclxuICAgIH0sXHJcbiAgICBudW1iZXI6IHtcclxuICAgICAgICBmcm9tS2V5OiAnbnVtYmVyJyxcclxuICAgICAgICB0b0tleTogJ251bWJlcicsXHJcbiAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgfSxcclxuICAgIGxhbmd1YWdlOiB7XHJcbiAgICAgICAgZnJvbUtleTogJ2xhbmd1YWdlJyxcclxuICAgICAgICB0b0tleTogJ2xhbmd1YWdlJyxcclxuICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICB9LFxyXG4gICAgdGltZXpvbmU6IHtcclxuICAgICAgICBmcm9tS2V5OiAndGltZXpvbmUnLFxyXG4gICAgICAgIHRvS2V5OiAndGltZXpvbmUnLFxyXG4gICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgIH0sXHJcbiAgICB0aW1lem9uZU9mZnNldDoge1xyXG4gICAgICAgIGZyb21LZXk6ICd0aW1lem9uZU9mZnNldCcsXHJcbiAgICAgICAgdG9LZXk6ICd0aW1lem9uZU9mZnNldCcsXHJcbiAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgfSxcclxuICAgIGRvbWFpbjoge1xyXG4gICAgICAgIGZyb21LZXk6ICdkb21haW4nLFxyXG4gICAgICAgIHRvS2V5OiAnZG9tYWluJyxcclxuICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICB9LFxyXG4gICAgdmVyc2lvbjoge1xyXG4gICAgICAgIGZyb21LZXk6ICd2ZXJzaW9uJyxcclxuICAgICAgICB0b0tleTogJ3ZlcnNpb24nLFxyXG4gICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgIH0sXHJcblxyXG4gICAgc3BlZWQ6IHtcclxuICAgICAgICBmcm9tS2V5OiAnc3BlZWQnLFxyXG4gICAgICAgIHRvS2V5OiAnc3BlZWQnLFxyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgIH0sXHJcbiAgICBzcGVlZEZsZWV0UGVhY2VmdWw6IHtcclxuICAgICAgICBmcm9tS2V5OiAnc3BlZWRGbGVldFBlYWNlZnVsJyxcclxuICAgICAgICB0b0tleTogJ3NwZWVkRmxlZXRQZWFjZWZ1bCcsXHJcbiAgICAgICAgdHlwZTogTnVtYmVyLFxyXG4gICAgfSxcclxuICAgIHNwZWVkRmxlZXRXYXI6IHtcclxuICAgICAgICBmcm9tS2V5OiAnc3BlZWRGbGVldFdhcicsXHJcbiAgICAgICAgdG9LZXk6ICdzcGVlZEZsZWV0V2FyJyxcclxuICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICB9LFxyXG4gICAgc3BlZWRGbGVldEhvbGRpbmc6IHtcclxuICAgICAgICBmcm9tS2V5OiAnc3BlZWRGbGVldEhvbGRpbmcnLFxyXG4gICAgICAgIHRvS2V5OiAnc3BlZWRGbGVldEhvbGRpbmcnLFxyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgIH0sXHJcbiAgICBnYWxheGllczoge1xyXG4gICAgICAgIGZyb21LZXk6ICdnYWxheGllcycsXHJcbiAgICAgICAgdG9LZXk6ICdnYWxheGllcycsXHJcbiAgICAgICAgdHlwZTogTnVtYmVyLFxyXG4gICAgfSxcclxuICAgIHN5c3RlbXM6IHtcclxuICAgICAgICBmcm9tS2V5OiAnc3lzdGVtcycsXHJcbiAgICAgICAgdG9LZXk6ICdzeXN0ZW1zJyxcclxuICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICB9LFxyXG4gICAgYWNzOiB7XHJcbiAgICAgICAgZnJvbUtleTogJ2FjcycsXHJcbiAgICAgICAgdG9LZXk6ICdhY3MnLFxyXG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICB9LFxyXG4gICAgcmFwaWRGaXJlOiB7XHJcbiAgICAgICAgZnJvbUtleTogJ3JhcGlkRmlyZScsXHJcbiAgICAgICAgdG9LZXk6ICdyYXBpZEZpcmUnLFxyXG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICB9LFxyXG4gICAgZGVmVG9URjoge1xyXG4gICAgICAgIGZyb21LZXk6ICdkZWZUb1RGJyxcclxuICAgICAgICB0b0tleTogJ2RlZlRvVEYnLFxyXG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICB9LFxyXG4gICAgZGVicmlzRmFjdG9yOiB7XHJcbiAgICAgICAgZnJvbUtleTogJ2RlYnJpc0ZhY3RvcicsXHJcbiAgICAgICAgdG9LZXk6ICdkZWJyaXNGYWN0b3InLFxyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgIH0sXHJcbiAgICBkZWJyaXNGYWN0b3JEZWY6IHtcclxuICAgICAgICBmcm9tS2V5OiAnZGVicmlzRmFjdG9yRGVmJyxcclxuICAgICAgICB0b0tleTogJ2RlYnJpc0ZhY3RvckRlZicsXHJcbiAgICAgICAgdHlwZTogTnVtYmVyLFxyXG4gICAgfSxcclxuICAgIHJlcGFpckZhY3Rvcjoge1xyXG4gICAgICAgIGZyb21LZXk6ICdyZXBhaXJGYWN0b3InLFxyXG4gICAgICAgIHRvS2V5OiAncmVwYWlyRmFjdG9yJyxcclxuICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICB9LFxyXG4gICAgbmV3YmllUHJvdGVjdGlvbkxpbWl0OiB7XHJcbiAgICAgICAgZnJvbUtleTogJ25ld2JpZVByb3RlY3Rpb25MaW1pdCcsXHJcbiAgICAgICAgdG9LZXk6ICduZXdiaWVQcm90ZWN0aW9uTGltaXQnLFxyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgIH0sXHJcbiAgICBuZXdiaWVQcm90ZWN0aW9uSGlnaDoge1xyXG4gICAgICAgIGZyb21LZXk6ICduZXdiaWVQcm90ZWN0aW9uSGlnaCcsXHJcbiAgICAgICAgdG9LZXk6ICduZXdiaWVQcm90ZWN0aW9uSGlnaCcsXHJcbiAgICAgICAgdHlwZTogTnVtYmVyLFxyXG4gICAgfSxcclxuICAgIHRvcFNjb3JlOiB7XHJcbiAgICAgICAgZnJvbUtleTogJ3RvcFNjb3JlJyxcclxuICAgICAgICB0b0tleTogJ3RvcFNjb3JlJyxcclxuICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICB9LFxyXG4gICAgYm9udXNGaWVsZHM6IHtcclxuICAgICAgICBmcm9tS2V5OiAnYm9udXNGaWVsZHMnLFxyXG4gICAgICAgIHRvS2V5OiAnYm9udXNGaWVsZHMnLFxyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgIH0sXHJcbiAgICBkb251dEdhbGF4eToge1xyXG4gICAgICAgIGZyb21LZXk6ICdkb251dEdhbGF4eScsXHJcbiAgICAgICAgdG9LZXk6ICdkb251dEdhbGF4eScsXHJcbiAgICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgIH0sXHJcbiAgICBkb251dFN5c3RlbToge1xyXG4gICAgICAgIGZyb21LZXk6ICdkb251dFN5c3RlbScsXHJcbiAgICAgICAgdG9LZXk6ICdkb251dFN5c3RlbScsXHJcbiAgICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgIH0sXHJcbiAgICB3ZkVuYWJsZWQ6IHtcclxuICAgICAgICBmcm9tS2V5OiAnd2ZFbmFibGVkJyxcclxuICAgICAgICB0b0tleTogJ3dmRW5hYmxlZCcsXHJcbiAgICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgIH0sXHJcbiAgICB3Zk1pbmltdW1SZXNzTG9zdDoge1xyXG4gICAgICAgIGZyb21LZXk6ICd3Zk1pbmltdW1SZXNzTG9zdCcsXHJcbiAgICAgICAgdG9LZXk6ICd3Zk1pbmltdW1SZXNzTG9zdCcsXHJcbiAgICAgICAgdHlwZTogTnVtYmVyLFxyXG4gICAgfSxcclxuICAgIHdmTWluaW11bUxvc3NQZXJjZW50YWdlOiB7XHJcbiAgICAgICAgZnJvbUtleTogJ3dmTWluaW11bUxvc3NQZXJjZW50YWdlJyxcclxuICAgICAgICB0b0tleTogJ3dmTWluaW11bUxvc3NQZXJjZW50YWdlJyxcclxuICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICB9LFxyXG4gICAgd2ZCYXNpY1BlcmNlbnRhZ2VSZXBhaXJhYmxlOiB7XHJcbiAgICAgICAgZnJvbUtleTogJ3dmQmFzaWNQZXJjZW50YWdlUmVwYWlyYWJsZScsXHJcbiAgICAgICAgdG9LZXk6ICd3ZkJhc2ljUGVyY2VudGFnZVJlcGFpcmFibGUnLFxyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgIH0sXHJcbiAgICBnbG9iYWxEZXV0ZXJpdW1TYXZlRmFjdG9yOiB7XHJcbiAgICAgICAgZnJvbUtleTogJ2dsb2JhbERldXRlcml1bVNhdmVGYWN0b3InLFxyXG4gICAgICAgIHRvS2V5OiAnZ2xvYmFsRGV1dGVyaXVtU2F2ZUZhY3RvcicsXHJcbiAgICAgICAgdHlwZTogTnVtYmVyLFxyXG4gICAgfSxcclxuICAgIGJhc2hsaW1pdDoge1xyXG4gICAgICAgIGZyb21LZXk6ICdiYXNobGltaXQnLFxyXG4gICAgICAgIHRvS2V5OiAnYmFzaGxpbWl0JyxcclxuICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICB9LFxyXG4gICAgcHJvYmVDYXJnbzoge1xyXG4gICAgICAgIGZyb21LZXk6ICdwcm9iZUNhcmdvJyxcclxuICAgICAgICB0b0tleTogJ3Byb2JlQ2FyZ28nLFxyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgIH0sXHJcbiAgICByZXNlYXJjaER1cmF0aW9uRGl2aXNvcjoge1xyXG4gICAgICAgIGZyb21LZXk6ICdyZXNlYXJjaER1cmF0aW9uRGl2aXNvcicsXHJcbiAgICAgICAgdG9LZXk6ICdyZXNlYXJjaER1cmF0aW9uRGl2aXNvcicsXHJcbiAgICAgICAgdHlwZTogTnVtYmVyLFxyXG4gICAgfSxcclxuICAgIGRhcmtNYXR0ZXJOZXdBY291bnQ6IHtcclxuICAgICAgICBmcm9tS2V5OiAnZGFya01hdHRlck5ld0Fjb3VudCcsXHJcbiAgICAgICAgdG9LZXk6ICdkYXJrTWF0dGVyTmV3QWNvdW50JyxcclxuICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICB9LFxyXG4gICAgY2FyZ29IeXBlcnNwYWNlVGVjaE11bHRpcGxpZXI6IHtcclxuICAgICAgICBmcm9tS2V5OiAnY2FyZ29IeXBlcnNwYWNlVGVjaE11bHRpcGxpZXInLFxyXG4gICAgICAgIHRvS2V5OiAnY2FyZ29IeXBlcnNwYWNlVGVjaE11bHRpcGxpZXInLFxyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgIH0sXHJcblxyXG4gICAgbWFya2V0cGxhY2VFbmFibGVkOiB7XHJcbiAgICAgICAgZnJvbUtleTogJ21hcmtldHBsYWNlRW5hYmxlZCcsXHJcbiAgICAgICAgdG9LZXk6ICdtYXJrZXRwbGFjZUVuYWJsZWQnLFxyXG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICB9LFxyXG4gICAgbWFya2V0cGxhY2VCYXNpY1RyYWRlUmF0aW9NZXRhbDoge1xyXG4gICAgICAgIGZyb21LZXk6ICdtYXJrZXRwbGFjZUJhc2ljVHJhZGVSYXRpb01ldGFsJyxcclxuICAgICAgICB0b0tleTogJ21hcmtldHBsYWNlQmFzaWNUcmFkZVJhdGlvTWV0YWwnLFxyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgIH0sXHJcbiAgICBtYXJrZXRwbGFjZUJhc2ljVHJhZGVSYXRpb0NyeXN0YWw6IHtcclxuICAgICAgICBmcm9tS2V5OiAnbWFya2V0cGxhY2VCYXNpY1RyYWRlUmF0aW9DcnlzdGFsJyxcclxuICAgICAgICB0b0tleTogJ21hcmtldHBsYWNlQmFzaWNUcmFkZVJhdGlvQ3J5c3RhbCcsXHJcbiAgICAgICAgdHlwZTogTnVtYmVyLFxyXG4gICAgfSxcclxuICAgIG1hcmtldHBsYWNlQmFzaWNUcmFkZVJhdGlvRGV1dGVyaXVtOiB7XHJcbiAgICAgICAgZnJvbUtleTogJ21hcmtldHBsYWNlQmFzaWNUcmFkZVJhdGlvRGV1dGVyaXVtJyxcclxuICAgICAgICB0b0tleTogJ21hcmtldHBsYWNlQmFzaWNUcmFkZVJhdGlvRGV1dGVyaXVtJyxcclxuICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICB9LFxyXG4gICAgbWFya2V0cGxhY2VQcmljZVJhbmdlTG93ZXI6IHtcclxuICAgICAgICBmcm9tS2V5OiAnbWFya2V0cGxhY2VQcmljZVJhbmdlTG93ZXInLFxyXG4gICAgICAgIHRvS2V5OiAnbWFya2V0cGxhY2VQcmljZVJhbmdlTG93ZXInLFxyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgIH0sXHJcbiAgICBtYXJrZXRwbGFjZVByaWNlUmFuZ2VVcHBlcjoge1xyXG4gICAgICAgIGZyb21LZXk6ICdtYXJrZXRwbGFjZVByaWNlUmFuZ2VVcHBlcicsXHJcbiAgICAgICAgdG9LZXk6ICdtYXJrZXRwbGFjZVByaWNlUmFuZ2VVcHBlcicsXHJcbiAgICAgICAgdHlwZTogTnVtYmVyLFxyXG4gICAgfSxcclxuICAgIG1hcmtldHBsYWNlVGF4Tm9ybWFsVXNlcjoge1xyXG4gICAgICAgIGZyb21LZXk6ICdtYXJrZXRwbGFjZVRheE5vcm1hbFVzZXInLFxyXG4gICAgICAgIHRvS2V5OiAnbWFya2V0cGxhY2VUYXhOb3JtYWxVc2VyJyxcclxuICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICB9LFxyXG4gICAgbWFya2V0cGxhY2VUYXhBZG1pcmFsOiB7XHJcbiAgICAgICAgZnJvbUtleTogJ21hcmtldHBsYWNlVGF4QWRtaXJhbCcsXHJcbiAgICAgICAgdG9LZXk6ICdtYXJrZXRwbGFjZVRheEFkbWlyYWwnLFxyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgIH0sXHJcbiAgICBtYXJrZXRwbGFjZVRheENhbmNlbE9mZmVyOiB7XHJcbiAgICAgICAgZnJvbUtleTogJ21hcmtldHBsYWNlVGF4Q2FuY2VsT2ZmZXInLFxyXG4gICAgICAgIHRvS2V5OiAnbWFya2V0cGxhY2VUYXhDYW5jZWxPZmZlcicsXHJcbiAgICAgICAgdHlwZTogTnVtYmVyLFxyXG4gICAgfSxcclxuICAgIG1hcmtldHBsYWNlVGF4Tm90U29sZDoge1xyXG4gICAgICAgIGZyb21LZXk6ICdtYXJrZXRwbGFjZVRheE5vdFNvbGQnLFxyXG4gICAgICAgIHRvS2V5OiAnbWFya2V0cGxhY2VUYXhOb3RTb2xkJyxcclxuICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICB9LFxyXG4gICAgbWFya2V0cGxhY2VPZmZlclRpbWVvdXQ6IHtcclxuICAgICAgICBmcm9tS2V5OiAnbWFya2V0cGxhY2VPZmZlclRpbWVvdXQnLFxyXG4gICAgICAgIHRvS2V5OiAnbWFya2V0cGxhY2VPZmZlclRpbWVvdXQnLFxyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgIH0sXHJcblxyXG4gICAgY2hhcmFjdGVyQ2xhc3Nlc0VuYWJsZWQ6IHtcclxuICAgICAgICBmcm9tS2V5OiAnY2hhcmFjdGVyQ2xhc3Nlc0VuYWJsZWQnLFxyXG4gICAgICAgIHRvS2V5OiAnY2hhcmFjdGVyQ2xhc3Nlc0VuYWJsZWQnLFxyXG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICB9LFxyXG4gICAgbWluZXJCb251c1Jlc291cmNlUHJvZHVjdGlvbjoge1xyXG4gICAgICAgIGZyb21LZXk6ICdtaW5lckJvbnVzUmVzb3VyY2VQcm9kdWN0aW9uJyxcclxuICAgICAgICB0b0tleTogJ21pbmVyQm9udXNSZXNvdXJjZVByb2R1Y3Rpb24nLFxyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgIH0sXHJcbiAgICBtaW5lckJvbnVzRmFzdGVyVHJhZGluZ1NoaXBzOiB7XHJcbiAgICAgICAgZnJvbUtleTogJ21pbmVyQm9udXNGYXN0ZXJUcmFkaW5nU2hpcHMnLFxyXG4gICAgICAgIHRvS2V5OiAnbWluZXJCb251c0Zhc3RlclRyYWRpbmdTaGlwcycsXHJcbiAgICAgICAgdHlwZTogTnVtYmVyLFxyXG4gICAgfSxcclxuICAgIG1pbmVyQm9udXNJbmNyZWFzZWRDYXJnb0NhcGFjaXR5Rm9yVHJhZGluZ1NoaXBzOiB7XHJcbiAgICAgICAgZnJvbUtleTogJ21pbmVyQm9udXNJbmNyZWFzZWRDYXJnb0NhcGFjaXR5Rm9yVHJhZGluZ1NoaXBzJyxcclxuICAgICAgICB0b0tleTogJ21pbmVyQm9udXNJbmNyZWFzZWRDYXJnb0NhcGFjaXR5Rm9yVHJhZGluZ1NoaXBzJyxcclxuICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICB9LFxyXG4gICAgbWluZXJCb251c0FkZGl0aW9uYWxGbGVldFNsb3RzOiB7XHJcbiAgICAgICAgZnJvbUtleTogJ21pbmVyQm9udXNBZGRpdGlvbmFsRmxlZXRTbG90cycsXHJcbiAgICAgICAgdG9LZXk6ICdtaW5lckJvbnVzQWRkaXRpb25hbEZsZWV0U2xvdHMnLFxyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgIH0sXHJcbiAgICBtaW5lckJvbnVzQWRkaXRpb25hbE1hcmtldFNsb3RzOiB7XHJcbiAgICAgICAgZnJvbUtleTogJ21pbmVyQm9udXNBZGRpdGlvbmFsTWFya2V0U2xvdHMnLFxyXG4gICAgICAgIHRvS2V5OiAnbWluZXJCb251c0FkZGl0aW9uYWxNYXJrZXRTbG90cycsXHJcbiAgICAgICAgdHlwZTogTnVtYmVyLFxyXG4gICAgfSxcclxuICAgIG1pbmVyQm9udXNBZGRpdGlvbmFsQ3Jhd2xlcjoge1xyXG4gICAgICAgIGZyb21LZXk6ICdtaW5lckJvbnVzQWRkaXRpb25hbENyYXdsZXInLFxyXG4gICAgICAgIHRvS2V5OiAnbWluZXJCb251c0FkZGl0aW9uYWxDcmF3bGVyJyxcclxuICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICB9LFxyXG4gICAgbWluZXJCb251c01heENyYXdsZXI6IHtcclxuICAgICAgICBmcm9tS2V5OiAnbWluZXJCb251c01heENyYXdsZXInLFxyXG4gICAgICAgIHRvS2V5OiAnbWluZXJCb251c01heENyYXdsZXInLFxyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgIH0sXHJcbiAgICBtaW5lckJvbnVzRW5lcmd5OiB7XHJcbiAgICAgICAgZnJvbUtleTogJ21pbmVyQm9udXNFbmVyZ3knLFxyXG4gICAgICAgIHRvS2V5OiAnbWluZXJCb251c0VuZXJneScsXHJcbiAgICAgICAgdHlwZTogTnVtYmVyLFxyXG4gICAgfSxcclxuICAgIG1pbmVyQm9udXNPdmVybG9hZENyYXdsZXI6IHtcclxuICAgICAgICBmcm9tS2V5OiAnbWluZXJCb251c092ZXJsb2FkQ3Jhd2xlcicsXHJcbiAgICAgICAgdG9LZXk6ICdtaW5lckJvbnVzT3ZlcmxvYWRDcmF3bGVyJyxcclxuICAgICAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgfSxcclxuICAgIHJlc291cmNlQnVnZ3lQcm9kdWN0aW9uQm9vc3Q6IHtcclxuICAgICAgICBmcm9tS2V5OiAncmVzb3VyY2VCdWdneVByb2R1Y3Rpb25Cb29zdCcsXHJcbiAgICAgICAgdG9LZXk6ICdyZXNvdXJjZUJ1Z2d5UHJvZHVjdGlvbkJvb3N0JyxcclxuICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICB9LFxyXG4gICAgcmVzb3VyY2VCdWdneU1heFByb2R1Y3Rpb25Cb29zdDoge1xyXG4gICAgICAgIGZyb21LZXk6ICdyZXNvdXJjZUJ1Z2d5TWF4UHJvZHVjdGlvbkJvb3N0JyxcclxuICAgICAgICB0b0tleTogJ3Jlc291cmNlQnVnZ3lNYXhQcm9kdWN0aW9uQm9vc3QnLFxyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgIH0sXHJcbiAgICByZXNvdXJjZUJ1Z2d5RW5lcmd5Q29uc3VtcHRpb25QZXJVbml0OiB7XHJcbiAgICAgICAgZnJvbUtleTogJ3Jlc291cmNlQnVnZ3lFbmVyZ3lDb25zdW1wdGlvblBlclVuaXQnLFxyXG4gICAgICAgIHRvS2V5OiAncmVzb3VyY2VCdWdneUVuZXJneUNvbnN1bXB0aW9uUGVyVW5pdCcsXHJcbiAgICAgICAgdHlwZTogTnVtYmVyLFxyXG4gICAgfSxcclxuICAgIHdhcnJpb3JCb251c0Zhc3RlckNvbWJhdFNoaXBzOiB7XHJcbiAgICAgICAgZnJvbUtleTogJ3dhcnJpb3JCb251c0Zhc3RlckNvbWJhdFNoaXBzJyxcclxuICAgICAgICB0b0tleTogJ3dhcnJpb3JCb251c0Zhc3RlckNvbWJhdFNoaXBzJyxcclxuICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICB9LFxyXG4gICAgd2FycmlvckJvbnVzRmFzdGVyUmVjeWNsZXJzOiB7XHJcbiAgICAgICAgZnJvbUtleTogJ3dhcnJpb3JCb251c0Zhc3RlclJlY3ljbGVycycsXHJcbiAgICAgICAgdG9LZXk6ICd3YXJyaW9yQm9udXNGYXN0ZXJSZWN5Y2xlcnMnLFxyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgIH0sXHJcbiAgICB3YXJyaW9yQm9udXNGdWVsQ29uc3VtcHRpb246IHtcclxuICAgICAgICBmcm9tS2V5OiAnd2FycmlvckJvbnVzRnVlbENvbnN1bXB0aW9uJyxcclxuICAgICAgICB0b0tleTogJ3dhcnJpb3JCb251c0Z1ZWxDb25zdW1wdGlvbicsXHJcbiAgICAgICAgdHlwZTogTnVtYmVyLFxyXG4gICAgfSxcclxuICAgIHdhcnJpb3JCb251c1JlY3ljbGVyRnVlbENvbnN1bXB0aW9uOiB7XHJcbiAgICAgICAgZnJvbUtleTogJ3dhcnJpb3JCb251c1JlY3ljbGVyRnVlbENvbnN1bXB0aW9uJyxcclxuICAgICAgICB0b0tleTogJ3dhcnJpb3JCb251c1JlY3ljbGVyRnVlbENvbnN1bXB0aW9uJyxcclxuICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICB9LFxyXG4gICAgd2FycmlvckJvbnVzUmVjeWNsZXJDYXJnb0NhcGFjaXR5OiB7XHJcbiAgICAgICAgZnJvbUtleTogJ3dhcnJpb3JCb251c1JlY3ljbGVyQ2FyZ29DYXBhY2l0eScsXHJcbiAgICAgICAgdG9LZXk6ICd3YXJyaW9yQm9udXNSZWN5Y2xlckNhcmdvQ2FwYWNpdHknLFxyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgIH0sXHJcbiAgICB3YXJyaW9yQm9udXNBZGRpdGlvbmFsRmxlZXRTbG90czoge1xyXG4gICAgICAgIGZyb21LZXk6ICd3YXJyaW9yQm9udXNBZGRpdGlvbmFsRmxlZXRTbG90cycsXHJcbiAgICAgICAgdG9LZXk6ICd3YXJyaW9yQm9udXNBZGRpdGlvbmFsRmxlZXRTbG90cycsXHJcbiAgICAgICAgdHlwZTogTnVtYmVyLFxyXG4gICAgfSxcclxuICAgIHdhcnJpb3JCb251c0FkZGl0aW9uYWxNb29uRmllbGRzOiB7XHJcbiAgICAgICAgZnJvbUtleTogJ3dhcnJpb3JCb251c0FkZGl0aW9uYWxNb29uRmllbGRzJyxcclxuICAgICAgICB0b0tleTogJ3dhcnJpb3JCb251c0FkZGl0aW9uYWxNb29uRmllbGRzJyxcclxuICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICB9LFxyXG4gICAgd2FycmlvckJvbnVzRmxlZXRIYWxmU3BlZWQ6IHtcclxuICAgICAgICBmcm9tS2V5OiAnd2FycmlvckJvbnVzRmxlZXRIYWxmU3BlZWQnLFxyXG4gICAgICAgIHRvS2V5OiAnd2FycmlvckJvbnVzRmxlZXRIYWxmU3BlZWQnLFxyXG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICB9LFxyXG4gICAgd2FycmlvckJvbnVzQXR0YWNrZXJXcmVja2ZpZWxkOiB7XHJcbiAgICAgICAgZnJvbUtleTogJ3dhcnJpb3JCb251c0F0dGFja2VyV3JlY2tmaWVsZCcsXHJcbiAgICAgICAgdG9LZXk6ICd3YXJyaW9yQm9udXNBdHRhY2tlcldyZWNrZmllbGQnLFxyXG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICB9LFxyXG4gICAgY29tYmF0RGVicmlzRmllbGRMaW1pdDoge1xyXG4gICAgICAgIGZyb21LZXk6ICdjb21iYXREZWJyaXNGaWVsZExpbWl0JyxcclxuICAgICAgICB0b0tleTogJ2NvbWJhdERlYnJpc0ZpZWxkTGltaXQnLFxyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgIH0sXHJcbiAgICBleHBsb3JlckJvbnVzSW5jcmVhc2VkUmVzZWFyY2hTcGVlZDoge1xyXG4gICAgICAgIGZyb21LZXk6ICdleHBsb3JlckJvbnVzSW5jcmVhc2VkUmVzZWFyY2hTcGVlZCcsXHJcbiAgICAgICAgdG9LZXk6ICdleHBsb3JlckJvbnVzSW5jcmVhc2VkUmVzZWFyY2hTcGVlZCcsXHJcbiAgICAgICAgdHlwZTogTnVtYmVyLFxyXG4gICAgfSxcclxuICAgIGV4cGxvcmVyQm9udXNJbmNyZWFzZWRFeHBlZGl0aW9uT3V0Y29tZToge1xyXG4gICAgICAgIGZyb21LZXk6ICdleHBsb3JlckJvbnVzSW5jcmVhc2VkRXhwZWRpdGlvbk91dGNvbWUnLFxyXG4gICAgICAgIHRvS2V5OiAnZXhwbG9yZXJCb251c0luY3JlYXNlZEV4cGVkaXRpb25PdXRjb21lJyxcclxuICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICB9LFxyXG4gICAgZXhwbG9yZXJCb251c0xhcmdlclBsYW5ldHM6IHtcclxuICAgICAgICBmcm9tS2V5OiAnZXhwbG9yZXJCb251c0xhcmdlclBsYW5ldHMnLFxyXG4gICAgICAgIHRvS2V5OiAnZXhwbG9yZXJCb251c0xhcmdlclBsYW5ldHMnLFxyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgIH0sXHJcbiAgICBleHBsb3JlclVuaXRJdGVtc1BlckRheToge1xyXG4gICAgICAgIGZyb21LZXk6ICdleHBsb3JlclVuaXRJdGVtc1BlckRheScsXHJcbiAgICAgICAgdG9LZXk6ICdleHBsb3JlclVuaXRJdGVtc1BlckRheScsXHJcbiAgICAgICAgdHlwZTogTnVtYmVyLFxyXG4gICAgfSxcclxuICAgIGV4cGxvcmVyQm9udXNQaGFsYW54UmFuZ2U6IHtcclxuICAgICAgICBmcm9tS2V5OiAnZXhwbG9yZXJCb251c1BoYWxhbnhSYW5nZScsXHJcbiAgICAgICAgdG9LZXk6ICdleHBsb3JlckJvbnVzUGhhbGFueFJhbmdlJyxcclxuICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICB9LFxyXG4gICAgZXhwbG9yZXJCb251c1BsdW5kZXJJbmFjdGl2ZToge1xyXG4gICAgICAgIGZyb21LZXk6ICdleHBsb3JlckJvbnVzUGx1bmRlckluYWN0aXZlJyxcclxuICAgICAgICB0b0tleTogJ2V4cGxvcmVyQm9udXNQbHVuZGVySW5hY3RpdmUnLFxyXG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICB9LFxyXG4gICAgZXhwbG9yZXJCb251c0V4cGVkaXRpb25FbmVteVJlZHVjdGlvbjoge1xyXG4gICAgICAgIGZyb21LZXk6ICdleHBsb3JlckJvbnVzRXhwZWRpdGlvbkVuZW15UmVkdWN0aW9uJyxcclxuICAgICAgICB0b0tleTogJ2V4cGxvcmVyQm9udXNFeHBlZGl0aW9uRW5lbXlSZWR1Y3Rpb24nLFxyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgIH0sXHJcbiAgICBleHBsb3JlckJvbnVzQWRkaXRpb25hbEV4cGVkaXRpb25TbG90czoge1xyXG4gICAgICAgIGZyb21LZXk6ICdleHBsb3JlckJvbnVzQWRkaXRpb25hbEV4cGVkaXRpb25TbG90cycsXHJcbiAgICAgICAgdG9LZXk6ICdleHBsb3JlckJvbnVzQWRkaXRpb25hbEV4cGVkaXRpb25TbG90cycsXHJcbiAgICAgICAgdHlwZTogTnVtYmVyLFxyXG4gICAgfSxcclxuICAgIHJlc291cmNlUHJvZHVjdGlvbkluY3JlYXNlQ3J5c3RhbERlZmF1bHQ6IHtcclxuICAgICAgICBmcm9tS2V5OiAncmVzb3VyY2VQcm9kdWN0aW9uSW5jcmVhc2VDcnlzdGFsRGVmYXVsdCcsXHJcbiAgICAgICAgdG9LZXk6ICdyZXNvdXJjZVByb2R1Y3Rpb25JbmNyZWFzZUNyeXN0YWxEZWZhdWx0JyxcclxuICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICB9LFxyXG4gICAgcmVzb3VyY2VQcm9kdWN0aW9uSW5jcmVhc2VDcnlzdGFsUG9zMToge1xyXG4gICAgICAgIGZyb21LZXk6ICdyZXNvdXJjZVByb2R1Y3Rpb25JbmNyZWFzZUNyeXN0YWxQb3MxJyxcclxuICAgICAgICB0b0tleTogJ3Jlc291cmNlUHJvZHVjdGlvbkluY3JlYXNlQ3J5c3RhbFBvczEnLFxyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgIH0sXHJcbiAgICByZXNvdXJjZVByb2R1Y3Rpb25JbmNyZWFzZUNyeXN0YWxQb3MyOiB7XHJcbiAgICAgICAgZnJvbUtleTogJ3Jlc291cmNlUHJvZHVjdGlvbkluY3JlYXNlQ3J5c3RhbFBvczInLFxyXG4gICAgICAgIHRvS2V5OiAncmVzb3VyY2VQcm9kdWN0aW9uSW5jcmVhc2VDcnlzdGFsUG9zMicsXHJcbiAgICAgICAgdHlwZTogTnVtYmVyLFxyXG4gICAgfSxcclxuICAgIHJlc291cmNlUHJvZHVjdGlvbkluY3JlYXNlQ3J5c3RhbFBvczM6IHtcclxuICAgICAgICBmcm9tS2V5OiAncmVzb3VyY2VQcm9kdWN0aW9uSW5jcmVhc2VDcnlzdGFsUG9zMycsXHJcbiAgICAgICAgdG9LZXk6ICdyZXNvdXJjZVByb2R1Y3Rpb25JbmNyZWFzZUNyeXN0YWxQb3MzJyxcclxuICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICB9LFxyXG5cclxuICAgIGV4b2R1c1JhdGlvTWV0YWw6IHtcclxuICAgICAgICBmcm9tS2V5OiAnZXhvZHVzUmF0aW9NZXRhbCcsXHJcbiAgICAgICAgdG9LZXk6ICdleG9kdXNSYXRpb01ldGFsJyxcclxuICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICB9LFxyXG4gICAgZXhvZHVzUmF0aW9DcnlzdGFsOiB7XHJcbiAgICAgICAgZnJvbUtleTogJ2V4b2R1c1JhdGlvQ3J5c3RhbCcsXHJcbiAgICAgICAgdG9LZXk6ICdleG9kdXNSYXRpb0NyeXN0YWwnLFxyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgIH0sXHJcbiAgICBleG9kdXNSYXRpb0RldXRlcml1bToge1xyXG4gICAgICAgIGZyb21LZXk6ICdleG9kdXNSYXRpb0RldXRlcml1bScsXHJcbiAgICAgICAgdG9LZXk6ICdleG9kdXNSYXRpb0RldXRlcml1bScsXHJcbiAgICAgICAgdHlwZTogTnVtYmVyLFxyXG4gICAgfSxcclxuXHJcbiAgICBsaWZlZm9ybVNldHRpbmdzOiB7XHJcbiAgICAgICAgZnJvbUtleTogJ2xpZmVmb3JtU2V0dGluZ3MnLFxyXG4gICAgICAgIHRvS2V5OiAnbGlmZWZvcm1zRW5hYmxlZCcsXHJcbiAgICAgICAgY29udmVyc2lvbjogKHZhbHVlKSA9PiB2YWx1ZSAhPSBudWxsLFxyXG4gICAgfSxcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBTZXJ2ZXJTZXR0aW5nc01vZHVsZSB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGludGVydmFsID0gMTAwMCAqIDYwICogNjAgKiAxMjsgLy8gMTJoXHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBtZXRhOiBNZXNzYWdlT2dhbWVNZXRhO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBwYXJzZXIgPSBuZXcgWE1MUGFyc2VyKHtcclxuICAgICAgICBhdHRyaWJ1dGVOYW1lUHJlZml4OiAnJyxcclxuICAgICAgICBpZ25vcmVBdHRyaWJ1dGVzOiBmYWxzZSxcclxuICAgICAgICBwYXJzZUF0dHJpYnV0ZVZhbHVlOiBmYWxzZSxcclxuICAgIH0pO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihtZXRhOiBNZXNzYWdlT2dhbWVNZXRhKSB7XHJcbiAgICAgICAgdGhpcy5tZXRhID0gbWV0YTtcclxuXHJcbiAgICAgICAgdm9pZCB0aGlzLmluaXQoKVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgaW5pdCgpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBfbG9nRGVidWcoYGluaXRpYWxpemluZyBzZXJ2ZXIgc2V0dGluZ3MgdXBkYXRlcyBmb3IgdW5pdmVyc2UgJHt0aGlzLm1ldGEuc2VydmVySWR9ICR7dGhpcy5tZXRhLmxhbmd1YWdlLnRvVXBwZXJDYXNlKCl9YCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRiID0gYXdhaXQgZ2V0U2VydmVyRGF0YWJhc2UodGhpcy5tZXRhKTtcclxuICAgICAgICAgICAgY29uc3QgbGFzdFVwZGF0ZSA9IChhd2FpdCBkYi5nZXQoJ3NlcnZlclNldHRpbmdzJywgJ19sYXN0VXBkYXRlJykpIGFzIG51bWJlcjtcclxuICAgICAgICAgICAgY29uc3QgdGltZUxlZnQgPSBNYXRoLm1heCgwLCB0aGlzLmludGVydmFsIC0gKERhdGUubm93KCkgLSBsYXN0VXBkYXRlKSk7XHJcblxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIH0sIHRpbWVMZWZ0KTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIH0sIDEwMDAgKiA2MCAqIDUpOyAvLyB0cnkgYWdhaW4gYWZ0ZXIgNW1pblxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgdXBkYXRlKCkge1xyXG4gICAgICAgIGF3YWl0IHRoaXMudXBkYXRlU2VydmVyU2V0dGluZ3MoKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmluaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIHVwZGF0ZVNlcnZlclNldHRpbmdzKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIC8vIGxvYWQgYW5kIHBhcnNlIHNlcnZlciBzZXR0aW5nc1xyXG4gICAgICAgIGNvbnN0IHsgc2VydmVyRGF0YSB9ID0gYXdhaXQgdGhpcy5nZXRYbWw8T2dhbWVBcGkuU2VydmVyU2V0dGluZ3NYbWwgJiB7ICd4bWxuczp4c2knOiBzdHJpbmcsICd4c2k6bm9OYW1lc3BhY2VTY2hlbWFMb2NhdGlvbic6IHN0cmluZywgdGltZXN0YW1wOiBzdHJpbmcsIHNlcnZlcklkOiBzdHJpbmcgfT4oJ3NlcnZlckRhdGEueG1sJyk7XHJcbiAgICAgICAgY29uc3QgcGxheWVyU2NvcmVzID0gYXdhaXQgdGhpcy5nZXRYbWw8eyBcclxuICAgICAgICAgICAgaGlnaHNjb3JlOiB7XHJcbiAgICAgICAgICAgICAgICBwbGF5ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogc3RyaW5nOyBcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogc3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIHNjb3JlOiBzdHJpbmc7XHJcbiAgICAgICAgICAgICAgICB9W107XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfT4oJ2hpZ2hzY29yZS54bWw/Y2F0ZWdvcnk9MSZ0eXBlPTAnKTtcclxuICAgICAgICBjb25zdCB0b3BTY29yZSA9IE1hdGgubWF4KFxyXG4gICAgICAgICAgICBwYXJzZUZsb2F0KHBsYXllclNjb3Jlcy5oaWdoc2NvcmUucGxheWVyWzBdLnNjb3JlKSxcclxuICAgICAgICAgICAgcGFyc2VGbG9hdChzZXJ2ZXJEYXRhLnRvcFNjb3JlKSxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyB1cGRhdGUgc2V0dGluZ3MgaW4gZGJcclxuICAgICAgICBjb25zdCBkYiA9IGF3YWl0IGdldFNlcnZlckRhdGFiYXNlKHRoaXMubWV0YSk7XHJcbiAgICAgICAgY29uc3QgdHggPSBkYi50cmFuc2FjdGlvbignc2VydmVyU2V0dGluZ3MnLCAncmVhZHdyaXRlJyk7XHJcbiAgICAgICAgY29uc3Qgc3RvcmUgPSB0eC5vYmplY3RTdG9yZSgnc2VydmVyU2V0dGluZ3MnKTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoJGtleVR5cGVzKSBhcyAoa2V5b2YgT2dhbWVBcGkuU2VydmVyRGF0YSlbXSkge1xyXG4gICAgICAgICAgICBjb25zdCBtYXBwaW5nID0gJGtleVR5cGVzW2tleV07XHJcbiAgICAgICAgICAgIGNvbnN0IHNlcnZlckRhdGFWYWx1ZSA9IHNlcnZlckRhdGFba2V5XTtcclxuXHJcbiAgICAgICAgICAgIGxldCB2YWx1ZTogRGJTZXJ2ZXJTZXR0aW5nc1trZXlvZiBEYlNlcnZlclNldHRpbmdzXTtcclxuICAgICAgICAgICAgaWYgKCd0eXBlJyBpbiBtYXBwaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobWFwcGluZy50eXBlID09IFN0cmluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VydmVyRGF0YVZhbHVlICE9PSAnc3RyaW5nJyAmJiB0eXBlb2Ygc2VydmVyRGF0YVZhbHVlICE9PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhyb3coYEV4cGVjdGVkIHN0cmluZyBvciBudW1iZXIsIGdvdCBvYmplY3Qgb2YgdHlwZSAnJHt0eXBlb2Ygc2VydmVyRGF0YVZhbHVlfScgZm9yIGtleSAnJHtrZXl9J2ApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHNlcnZlckRhdGFWYWx1ZS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobWFwcGluZy50eXBlID09IE51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VydmVyRGF0YVZhbHVlICE9PSAnc3RyaW5nJyAmJiB0eXBlb2Ygc2VydmVyRGF0YVZhbHVlICE9PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhyb3coYEV4cGVjdGVkIHN0cmluZyBvciBudW1iZXIsIGdvdCBvYmplY3Qgb2YgdHlwZSAnJHt0eXBlb2Ygc2VydmVyRGF0YVZhbHVlfScgZm9yIGtleSAnJHtrZXl9J2ApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcnNlRmxvYXRTYWZlKHNlcnZlckRhdGFWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtYXBwaW5nLnR5cGUgPT0gQm9vbGVhbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VydmVyRGF0YVZhbHVlICE9PSAnc3RyaW5nJyAmJiB0eXBlb2Ygc2VydmVyRGF0YVZhbHVlICE9PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhyb3coYEV4cGVjdGVkIHN0cmluZyBvciBudW1iZXIsIGdvdCBvYmplY3Qgb2YgdHlwZSAnJHt0eXBlb2Ygc2VydmVyRGF0YVZhbHVlfScgZm9yIGtleSAnJHtrZXl9J2ApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHNlcnZlckRhdGFWYWx1ZSA9PSAnMSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhyb3coJ2ludmFsaWQgdHlwZScsIG1hcHBpbmcudHlwZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG1hcHBpbmcuY29udmVyc2lvbihzZXJ2ZXJEYXRhVmFsdWUsIHNlcnZlckRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhd2FpdCBzdG9yZS5wdXQodmFsdWUsIG1hcHBpbmcudG9LZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhd2FpdCBzdG9yZS5wdXQoRGF0ZS5ub3coKSwgJ19sYXN0VXBkYXRlJyk7XHJcbiAgICAgICAgLy8gcHV0IHRvcCBzY29yZSBtYW51YWxseSBhcyBoaWdoc2NvcmUtQVBJIG1heSBiZSBtb3JlIHVwLXRvLWRhdGVcclxuICAgICAgICBhd2FpdCBzdG9yZS5wdXQodG9wU2NvcmUsICd0b3BTY29yZScpO1xyXG4gICAgICAgIGF3YWl0IHR4LmRvbmU7XHJcblxyXG4gICAgICAgIC8vIG5vdGlmeSBzZXR0aW5ncyB1cGRhdGVcclxuICAgICAgICBjb25zdCBtZXNzYWdlOiBOb3RpZnlTZXJ2ZXJTZXR0aW5nc1VwZGF0ZU1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6IE1lc3NhZ2VUeXBlLk5vdGlmeVNlcnZlclNldHRpbmdzVXBkYXRlLFxyXG4gICAgICAgICAgICBvZ2FtZU1ldGE6IHRoaXMubWV0YSxcclxuICAgICAgICAgICAgc2VuZGVyVXVpZDogc2VydmljZVdvcmtlclV1aWQsXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGF3YWl0IGJyb2FkY2FzdE1lc3NhZ2UobWVzc2FnZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXQgYXBpVXJsQmFzZSgpIHtcclxuICAgICAgICByZXR1cm4gYGh0dHBzOi8vcyR7dGhpcy5tZXRhLnNlcnZlcklkfS0ke3RoaXMubWV0YS5sYW5ndWFnZX0ub2dhbWUuZ2FtZWZvcmdlLmNvbS9hcGlgO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgZ2V0WG1sPFQgPSBhbnk+KGFwaUZpbGU6IHN0cmluZyk6IFByb21pc2U8VD4ge1xyXG4gICAgICAgIGNvbnN0IHVybCA9IGAke3RoaXMuYXBpVXJsQmFzZX0vJHthcGlGaWxlfWA7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHsgY2FjaGU6ICduby1jYWNoZScgfSk7XHJcbiAgICAgICAgY29uc3QgeG1sID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZXIucGFyc2UoeG1sKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IE1lc3NhZ2VPZ2FtZU1ldGEgfSBmcm9tIFwiLi4vbWVzc2FnZXMvTWVzc2FnZVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0b3JhZ2VLZXlQcmVmaXgobWV0YTogTWVzc2FnZU9nYW1lTWV0YSwgaW5jbHVkZVBsYXllcklkOiBib29sZWFuKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHsgc2VydmVySWQsIGxhbmd1YWdlLCBwbGF5ZXJJZCB9ID0gbWV0YTtcclxuICAgIGNvbnN0IHNlcnZlclByZWZpeCA9IGBzJHtzZXJ2ZXJJZH0tJHtsYW5ndWFnZX1gO1xyXG4gICAgaWYgKCFpbmNsdWRlUGxheWVySWQpIHtcclxuICAgICAgICByZXR1cm4gc2VydmVyUHJlZml4O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGAke3NlcnZlclByZWZpeH0tJHtwbGF5ZXJJZH1gO1xyXG59IiwiZXhwb3J0IGVudW0gTGFuZ3VhZ2VLZXkge1xyXG4gICAgLy9UT0RPOiBicyA9ICdicycsIC8vIGJvc25pYW5cclxuICAgIC8qKiBDemVjaCAqL1xyXG4gICAgY3MgPSAnY3MnLFxyXG4gICAgLyoqIEdlcm1hbiAqL1xyXG4gICAgZGUgPSAnZGUnLFxyXG4gICAgLyoqIERhbmlzaCAqL1xyXG4gICAgZGEgPSAnZGEnLFxyXG4gICAgLyoqIEdyZWVrICovXHJcbiAgICBlbCA9ICdlbCcsXHJcbiAgICAvKiogRW5nbGlzaCAqL1xyXG4gICAgZW4gPSAnZW4nLCBcclxuICAgIC8qKiBTcGFuaXNoIChTcGFpbikgKi9cclxuICAgICdlcy1lcycgPSAnZXMtZXMnLCBcclxuICAgIC8qKiBTcGFuaXNoIChBcmdlbnRpbmEpICovXHJcbiAgICAnZXMtYXInID0gJ2VzLWFyJywgXHJcbiAgICAvKiogU3BhbmlzaCAoTWV4aWNvKSAqL1xyXG4gICAgJ2VzLW14JyA9ICdlcy1teCcsIFxyXG4gICAgLy9UT0RPOiBmaSA9ICdmaScgLy8gZmlubmlzaFxyXG4gICAgLyoqIEZyZW5jaCAqL1xyXG4gICAgZnIgPSAnZnInLFxyXG4gICAgLyoqIENyb2F0aWFuICovXHJcbiAgICBociA9ICdocicsIFxyXG4gICAgLyoqIEh1bmdhcmlhbiAqL1xyXG4gICAgaHUgPSAnaHUnLCBcclxuICAgIC8qKiBJdGFsaWFuICovXHJcbiAgICBpdCA9ICdpdCcsIFxyXG4gICAgLy9UT0RPOiBqYSA9ICdqYScsIC8vIGphcGFuZXNlXHJcbiAgICBubCA9ICdubCcsIC8vIGR1dGNoXHJcbiAgICAvKiogUG9saXNoICovXHJcbiAgICBwbCA9ICdwbCcsXHJcbiAgICAvKiogUG9ydHVndWVzZSAoQnJhc2lsKSAqLyBcclxuICAgICdwdC1icicgPSAncHQtYnInLCBcclxuICAgIC8qKiBQb3J0dWd1ZXNlIChQb3J0dWdhbCkgKi9cclxuICAgICdwdC1wdCcgPSAncHQtcHQnLFxyXG4gICAgcm8gPSAncm8nLCAvLyByb21hbmlhblxyXG4gICAgcnUgPSAncnUnLCAvLyBydXNzaWFuXHJcbiAgICAvKiogU2xvdmVuaWFuICovXHJcbiAgICBzbCA9ICdzbCcsIFxyXG4gICAgLy9UT0RPOiBzayA9ICdzaycsIC8vIHNsb3Zha2lhblxyXG4gICAgLy9UT0RPOiBzdiA9ICdzdicsIC8vIHN3ZWRpc2hcclxuICAgIHRyID0gJ3RyJywgLy8gdHVya2lzaFxyXG4gICAgLyoqIENoaW5lc2UgKFRhaXdhbikgKi9cclxuICAgICd6aC10dycgPSAnemgtdHcnLCBcclxufSIsIi8qKiBNZXJnZXMgdHdvIG9iamVjdHMgcmVjdXJzaXZlbHkuIFdpbGwgb3ZlcndyaXRlIGV4aXN0aW5nIHByb3BlcnRpZXMgaW4gYSB3aXRoIHRoZSB2YWx1ZXMgaW4gYi4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlRGVlcDxUIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55Pj4oYTogVCwgYjogVCk6IFQge1xyXG4gICAgY29uc3QgcmVzdWx0ID0geyAuLi5hIH0gYXMgUmVjb3JkPHN0cmluZywgYW55PjtcclxuXHJcbiAgICBPYmplY3Qua2V5cyhiKS5mb3JFYWNoKGJLZXkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGJbYktleV07XHJcbiAgICAgICAgaWYoYktleSBpbiByZXN1bHQpIHtcclxuICAgICAgICAgICAgY29uc3QgY3VyID0gcmVzdWx0W2JLZXldO1xyXG5cclxuICAgICAgICAgICAgaWYodHlwZW9mIGN1ciA9PT0gJ29iamVjdCcgJiYgIShjdXIgaW5zdGFuY2VvZiBBcnJheSkpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdFtiS2V5XSA9IG1lcmdlRGVlcChjdXIsIHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH0gXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXN1bHRbYktleV0gPSB0YXJnZXQ7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0IGFzIFQ7XHJcbn0iLCIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2NyZWF0ZUJpbmRpbmcgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xyXG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufSk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIG8pIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuLyoqIEBkZXByZWNhdGVkICovXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcclxuICAgIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xyXG4gICAgZm9yICh2YXIgciA9IEFycmF5KHMpLCBrID0gMCwgaSA9IDA7IGkgPCBpbDsgaSsrKVxyXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxyXG4gICAgICAgICAgICByW2tdID0gYVtqXTtcclxuICAgIHJldHVybiByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheSh0bywgZnJvbSwgcGFjaykge1xyXG4gICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XHJcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XHJcbiAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xyXG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xyXG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xyXG59XHJcbiIsIi8qIVxuICogVnVlLmpzIHYyLjcuNVxuICogKGMpIDIwMTQtMjAyMiBFdmFuIFlvdVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG52YXIgZW1wdHlPYmplY3QgPSBPYmplY3QuZnJlZXplKHt9KTtcclxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xyXG4vLyBUaGVzZSBoZWxwZXJzIHByb2R1Y2UgYmV0dGVyIFZNIGNvZGUgaW4gSlMgZW5naW5lcyBkdWUgdG8gdGhlaXJcclxuLy8gZXhwbGljaXRuZXNzIGFuZCBmdW5jdGlvbiBpbmxpbmluZy5cclxuZnVuY3Rpb24gaXNVbmRlZih2KSB7XHJcbiAgICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGw7XHJcbn1cclxuZnVuY3Rpb24gaXNEZWYodikge1xyXG4gICAgcmV0dXJuIHYgIT09IHVuZGVmaW5lZCAmJiB2ICE9PSBudWxsO1xyXG59XHJcbmZ1bmN0aW9uIGlzVHJ1ZSh2KSB7XHJcbiAgICByZXR1cm4gdiA9PT0gdHJ1ZTtcclxufVxyXG5mdW5jdGlvbiBpc0ZhbHNlKHYpIHtcclxuICAgIHJldHVybiB2ID09PSBmYWxzZTtcclxufVxyXG4vKipcclxuICogQ2hlY2sgaWYgdmFsdWUgaXMgcHJpbWl0aXZlLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNQcmltaXRpdmUodmFsdWUpIHtcclxuICAgIHJldHVybiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fFxyXG4gICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHxcclxuICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcclxuICAgICAgICB0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnIHx8XHJcbiAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpO1xyXG59XHJcbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcclxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XHJcbn1cclxuLyoqXHJcbiAqIFF1aWNrIG9iamVjdCBjaGVjayAtIHRoaXMgaXMgcHJpbWFyaWx5IHVzZWQgdG8gdGVsbFxyXG4gKiBvYmplY3RzIGZyb20gcHJpbWl0aXZlIHZhbHVlcyB3aGVuIHdlIGtub3cgdGhlIHZhbHVlXHJcbiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cclxuICovXHJcbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xyXG4gICAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JztcclxufVxyXG4vKipcclxuICogR2V0IHRoZSByYXcgdHlwZSBzdHJpbmcgb2YgYSB2YWx1ZSwgZS5nLiwgW29iamVjdCBPYmplY3RdLlxyXG4gKi9cclxudmFyIF90b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XHJcbmZ1bmN0aW9uIHRvUmF3VHlwZSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSk7XHJcbn1cclxuLyoqXHJcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcclxuICogZm9yIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cy5cclxuICovXHJcbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XHJcbiAgICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XHJcbn1cclxuZnVuY3Rpb24gaXNSZWdFeHAodikge1xyXG4gICAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBSZWdFeHBdJztcclxufVxyXG4vKipcclxuICogQ2hlY2sgaWYgdmFsIGlzIGEgdmFsaWQgYXJyYXkgaW5kZXguXHJcbiAqL1xyXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleCh2YWwpIHtcclxuICAgIHZhciBuID0gcGFyc2VGbG9hdChTdHJpbmcodmFsKSk7XHJcbiAgICByZXR1cm4gbiA+PSAwICYmIE1hdGguZmxvb3IobikgPT09IG4gJiYgaXNGaW5pdGUodmFsKTtcclxufVxyXG5mdW5jdGlvbiBpc1Byb21pc2UodmFsKSB7XHJcbiAgICByZXR1cm4gKGlzRGVmKHZhbCkgJiZcclxuICAgICAgICB0eXBlb2YgdmFsLnRoZW4gPT09ICdmdW5jdGlvbicgJiZcclxuICAgICAgICB0eXBlb2YgdmFsLmNhdGNoID09PSAnZnVuY3Rpb24nKTtcclxufVxyXG4vKipcclxuICogQ29udmVydCBhIHZhbHVlIHRvIGEgc3RyaW5nIHRoYXQgaXMgYWN0dWFsbHkgcmVuZGVyZWQuXHJcbiAqL1xyXG5mdW5jdGlvbiB0b1N0cmluZyh2YWwpIHtcclxuICAgIHJldHVybiB2YWwgPT0gbnVsbFxyXG4gICAgICAgID8gJydcclxuICAgICAgICA6IEFycmF5LmlzQXJyYXkodmFsKSB8fCAoaXNQbGFpbk9iamVjdCh2YWwpICYmIHZhbC50b1N0cmluZyA9PT0gX3RvU3RyaW5nKVxyXG4gICAgICAgICAgICA/IEpTT04uc3RyaW5naWZ5KHZhbCwgbnVsbCwgMilcclxuICAgICAgICAgICAgOiBTdHJpbmcodmFsKTtcclxufVxyXG4vKipcclxuICogQ29udmVydCBhbiBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXHJcbiAqIElmIHRoZSBjb252ZXJzaW9uIGZhaWxzLCByZXR1cm4gb3JpZ2luYWwgc3RyaW5nLlxyXG4gKi9cclxuZnVuY3Rpb24gdG9OdW1iZXIodmFsKSB7XHJcbiAgICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcclxuICAgIHJldHVybiBpc05hTihuKSA/IHZhbCA6IG47XHJcbn1cclxuLyoqXHJcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxyXG4gKiBpcyBpbiB0aGF0IG1hcC5cclxuICovXHJcbmZ1bmN0aW9uIG1ha2VNYXAoc3RyLCBleHBlY3RzTG93ZXJDYXNlKSB7XHJcbiAgICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgIHZhciBsaXN0ID0gc3RyLnNwbGl0KCcsJyk7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBtYXBbbGlzdFtpXV0gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGV4cGVjdHNMb3dlckNhc2UgPyBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsLnRvTG93ZXJDYXNlKCldOyB9IDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH07XHJcbn1cclxuLyoqXHJcbiAqIENoZWNrIGlmIGEgdGFnIGlzIGEgYnVpbHQtaW4gdGFnLlxyXG4gKi9cclxudmFyIGlzQnVpbHRJblRhZyA9IG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50JywgdHJ1ZSk7XHJcbi8qKlxyXG4gKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUuXHJcbiAqL1xyXG52YXIgaXNSZXNlcnZlZEF0dHJpYnV0ZSA9IG1ha2VNYXAoJ2tleSxyZWYsc2xvdCxzbG90LXNjb3BlLGlzJyk7XHJcbi8qKlxyXG4gKiBSZW1vdmUgYW4gaXRlbSBmcm9tIGFuIGFycmF5LlxyXG4gKi9cclxuZnVuY3Rpb24gcmVtb3ZlJDIoYXJyLCBpdGVtKSB7XHJcbiAgICBpZiAoYXJyLmxlbmd0aCkge1xyXG4gICAgICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xyXG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhcnIuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIENoZWNrIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyB0aGUgcHJvcGVydHkuXHJcbiAqL1xyXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xyXG5mdW5jdGlvbiBoYXNPd24ob2JqLCBrZXkpIHtcclxuICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcclxufVxyXG4vKipcclxuICogQ3JlYXRlIGEgY2FjaGVkIHZlcnNpb24gb2YgYSBwdXJlIGZ1bmN0aW9uLlxyXG4gKi9cclxuZnVuY3Rpb24gY2FjaGVkKGZuKSB7XHJcbiAgICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNhY2hlZEZuKHN0cikge1xyXG4gICAgICAgIHZhciBoaXQgPSBjYWNoZVtzdHJdO1xyXG4gICAgICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKTtcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIENhbWVsaXplIGEgaHlwaGVuLWRlbGltaXRlZCBzdHJpbmcuXHJcbiAqL1xyXG52YXIgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcclxudmFyIGNhbWVsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIHJldHVybiBzdHIucmVwbGFjZShjYW1lbGl6ZVJFLCBmdW5jdGlvbiAoXywgYykgeyByZXR1cm4gKGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJyk7IH0pO1xyXG59KTtcclxuLyoqXHJcbiAqIENhcGl0YWxpemUgYSBzdHJpbmcuXHJcbiAqL1xyXG52YXIgY2FwaXRhbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xyXG59KTtcclxuLyoqXHJcbiAqIEh5cGhlbmF0ZSBhIGNhbWVsQ2FzZSBzdHJpbmcuXHJcbiAqL1xyXG52YXIgaHlwaGVuYXRlUkUgPSAvXFxCKFtBLVpdKS9nO1xyXG52YXIgaHlwaGVuYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIHJldHVybiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgJy0kMScpLnRvTG93ZXJDYXNlKCk7XHJcbn0pO1xyXG4vKipcclxuICogU2ltcGxlIGJpbmQgcG9seWZpbGwgZm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBzdXBwb3J0IGl0LFxyXG4gKiBlLmcuLCBQaGFudG9tSlMgMS54LiBUZWNobmljYWxseSwgd2UgZG9uJ3QgbmVlZCB0aGlzIGFueW1vcmVcclxuICogc2luY2UgbmF0aXZlIGJpbmQgaXMgbm93IHBlcmZvcm1hbnQgZW5vdWdoIGluIG1vc3QgYnJvd3NlcnMuXHJcbiAqIEJ1dCByZW1vdmluZyBpdCB3b3VsZCBtZWFuIGJyZWFraW5nIGNvZGUgdGhhdCB3YXMgYWJsZSB0byBydW4gaW5cclxuICogUGhhbnRvbUpTIDEueCwgc28gdGhpcyBtdXN0IGJlIGtlcHQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXHJcbiAqL1xyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5mdW5jdGlvbiBwb2x5ZmlsbEJpbmQoZm4sIGN0eCkge1xyXG4gICAgZnVuY3Rpb24gYm91bmRGbihhKSB7XHJcbiAgICAgICAgdmFyIGwgPSBhcmd1bWVudHMubGVuZ3RoO1xyXG4gICAgICAgIHJldHVybiBsXHJcbiAgICAgICAgICAgID8gbCA+IDFcclxuICAgICAgICAgICAgICAgID8gZm4uYXBwbHkoY3R4LCBhcmd1bWVudHMpXHJcbiAgICAgICAgICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxyXG4gICAgICAgICAgICA6IGZuLmNhbGwoY3R4KTtcclxuICAgIH1cclxuICAgIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcclxuICAgIHJldHVybiBib3VuZEZuO1xyXG59XHJcbmZ1bmN0aW9uIG5hdGl2ZUJpbmQoZm4sIGN0eCkge1xyXG4gICAgcmV0dXJuIGZuLmJpbmQoY3R4KTtcclxufVxyXG4vLyBAdHMtZXhwZWN0LWVycm9yIGJpbmQgY2Fubm90IGJlIGB1bmRlZmluZWRgXHJcbnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgPyBuYXRpdmVCaW5kIDogcG9seWZpbGxCaW5kO1xyXG4vKipcclxuICogQ29udmVydCBhbiBBcnJheS1saWtlIG9iamVjdCB0byBhIHJlYWwgQXJyYXkuXHJcbiAqL1xyXG5mdW5jdGlvbiB0b0FycmF5KGxpc3QsIHN0YXJ0KSB7XHJcbiAgICBzdGFydCA9IHN0YXJ0IHx8IDA7XHJcbiAgICB2YXIgaSA9IGxpc3QubGVuZ3RoIC0gc3RhcnQ7XHJcbiAgICB2YXIgcmV0ID0gbmV3IEFycmF5KGkpO1xyXG4gICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgIHJldFtpXSA9IGxpc3RbaSArIHN0YXJ0XTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbn1cclxuLyoqXHJcbiAqIE1peCBwcm9wZXJ0aWVzIGludG8gdGFyZ2V0IG9iamVjdC5cclxuICovXHJcbmZ1bmN0aW9uIGV4dGVuZCh0bywgX2Zyb20pIHtcclxuICAgIGZvciAodmFyIGtleSBpbiBfZnJvbSkge1xyXG4gICAgICAgIHRvW2tleV0gPSBfZnJvbVtrZXldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvO1xyXG59XHJcbi8qKlxyXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxyXG4gKi9cclxuZnVuY3Rpb24gdG9PYmplY3QoYXJyKSB7XHJcbiAgICB2YXIgcmVzID0ge307XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChhcnJbaV0pIHtcclxuICAgICAgICAgICAgZXh0ZW5kKHJlcywgYXJyW2ldKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXHJcbi8qKlxyXG4gKiBQZXJmb3JtIG5vIG9wZXJhdGlvbi5cclxuICogU3R1YmJpbmcgYXJncyB0byBtYWtlIEZsb3cgaGFwcHkgd2l0aG91dCBsZWF2aW5nIHVzZWxlc3MgdHJhbnNwaWxlZCBjb2RlXHJcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKS5cclxuICovXHJcbmZ1bmN0aW9uIG5vb3AoYSwgYiwgYykgeyB9XHJcbi8qKlxyXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxyXG4gKi9cclxudmFyIG5vID0gZnVuY3Rpb24gKGEsIGIsIGMpIHsgcmV0dXJuIGZhbHNlOyB9O1xyXG4vKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXHJcbi8qKlxyXG4gKiBSZXR1cm4gdGhlIHNhbWUgdmFsdWUuXHJcbiAqL1xyXG52YXIgaWRlbnRpdHkgPSBmdW5jdGlvbiAoXykgeyByZXR1cm4gXzsgfTtcclxuLyoqXHJcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxyXG4gKiBpZiB0aGV5IGFyZSBwbGFpbiBvYmplY3RzLCBkbyB0aGV5IGhhdmUgdGhlIHNhbWUgc2hhcGU/XHJcbiAqL1xyXG5mdW5jdGlvbiBsb29zZUVxdWFsKGEsIGIpIHtcclxuICAgIGlmIChhID09PSBiKVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgdmFyIGlzT2JqZWN0QSA9IGlzT2JqZWN0KGEpO1xyXG4gICAgdmFyIGlzT2JqZWN0QiA9IGlzT2JqZWN0KGIpO1xyXG4gICAgaWYgKGlzT2JqZWN0QSAmJiBpc09iamVjdEIpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB2YXIgaXNBcnJheUEgPSBBcnJheS5pc0FycmF5KGEpO1xyXG4gICAgICAgICAgICB2YXIgaXNBcnJheUIgPSBBcnJheS5pc0FycmF5KGIpO1xyXG4gICAgICAgICAgICBpZiAoaXNBcnJheUEgJiYgaXNBcnJheUIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoYS5sZW5ndGggPT09IGIubGVuZ3RoICYmXHJcbiAgICAgICAgICAgICAgICAgICAgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9vc2VFcXVhbChlLCBiW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoYSBpbnN0YW5jZW9mIERhdGUgJiYgYiBpbnN0YW5jZW9mIERhdGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoIWlzQXJyYXlBICYmICFpc0FycmF5Qikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMoYSk7XHJcbiAgICAgICAgICAgICAgICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoa2V5c0EubGVuZ3RoID09PSBrZXlzQi5sZW5ndGggJiZcclxuICAgICAgICAgICAgICAgICAgICBrZXlzQS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGFba2V5XSwgYltrZXldKTtcclxuICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICghaXNPYmplY3RBICYmICFpc09iamVjdEIpIHtcclxuICAgICAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYik7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybiB0aGUgZmlyc3QgaW5kZXggYXQgd2hpY2ggYSBsb29zZWx5IGVxdWFsIHZhbHVlIGNhbiBiZVxyXG4gKiBmb3VuZCBpbiB0aGUgYXJyYXkgKGlmIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGUgYXJyYXkgbXVzdFxyXG4gKiBjb250YWluIGFuIG9iamVjdCBvZiB0aGUgc2FtZSBzaGFwZSksIG9yIC0xIGlmIGl0IGlzIG5vdCBwcmVzZW50LlxyXG4gKi9cclxuZnVuY3Rpb24gbG9vc2VJbmRleE9mKGFyciwgdmFsKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChsb29zZUVxdWFsKGFycltpXSwgdmFsKSlcclxuICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gLTE7XHJcbn1cclxuLyoqXHJcbiAqIEVuc3VyZSBhIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmx5IG9uY2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBvbmNlKGZuKSB7XHJcbiAgICB2YXIgY2FsbGVkID0gZmFsc2U7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghY2FsbGVkKSB7XHJcbiAgICAgICAgICAgIGNhbGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXMjcG9seWZpbGxcclxuZnVuY3Rpb24gaGFzQ2hhbmdlZCh4LCB5KSB7XHJcbiAgICBpZiAoeCA9PT0geSkge1xyXG4gICAgICAgIHJldHVybiB4ID09PSAwICYmIDEgLyB4ICE9PSAxIC8geTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB4ID09PSB4IHx8IHkgPT09IHk7XHJcbiAgICB9XHJcbn1cblxudmFyIFNTUl9BVFRSID0gJ2RhdGEtc2VydmVyLXJlbmRlcmVkJztcclxudmFyIEFTU0VUX1RZUEVTID0gWydjb21wb25lbnQnLCAnZGlyZWN0aXZlJywgJ2ZpbHRlciddO1xyXG52YXIgTElGRUNZQ0xFX0hPT0tTID0gW1xyXG4gICAgJ2JlZm9yZUNyZWF0ZScsXHJcbiAgICAnY3JlYXRlZCcsXHJcbiAgICAnYmVmb3JlTW91bnQnLFxyXG4gICAgJ21vdW50ZWQnLFxyXG4gICAgJ2JlZm9yZVVwZGF0ZScsXHJcbiAgICAndXBkYXRlZCcsXHJcbiAgICAnYmVmb3JlRGVzdHJveScsXHJcbiAgICAnZGVzdHJveWVkJyxcclxuICAgICdhY3RpdmF0ZWQnLFxyXG4gICAgJ2RlYWN0aXZhdGVkJyxcclxuICAgICdlcnJvckNhcHR1cmVkJyxcclxuICAgICdzZXJ2ZXJQcmVmZXRjaCcsXHJcbiAgICAncmVuZGVyVHJhY2tlZCcsXHJcbiAgICAncmVuZGVyVHJpZ2dlcmVkJ1xyXG5dO1xuXG52YXIgY29uZmlnID0ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBPcHRpb24gbWVyZ2Ugc3RyYXRlZ2llcyAodXNlZCBpbiBjb3JlL3V0aWwvb3B0aW9ucylcclxuICAgICAqL1xyXG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXHJcbiAgICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgdG8gc3VwcHJlc3Mgd2FybmluZ3MuXHJcbiAgICAgKi9cclxuICAgIHNpbGVudDogZmFsc2UsXHJcbiAgICAvKipcclxuICAgICAqIFNob3cgcHJvZHVjdGlvbiBtb2RlIHRpcCBtZXNzYWdlIG9uIGJvb3Q/XHJcbiAgICAgKi9cclxuICAgIHByb2R1Y3Rpb25UaXA6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgdG8gZW5hYmxlIGRldnRvb2xzXHJcbiAgICAgKi9cclxuICAgIGRldnRvb2xzOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxyXG4gICAgLyoqXHJcbiAgICAgKiBXaGV0aGVyIHRvIHJlY29yZCBwZXJmXHJcbiAgICAgKi9cclxuICAgIHBlcmZvcm1hbmNlOiBmYWxzZSxcclxuICAgIC8qKlxyXG4gICAgICogRXJyb3IgaGFuZGxlciBmb3Igd2F0Y2hlciBlcnJvcnNcclxuICAgICAqL1xyXG4gICAgZXJyb3JIYW5kbGVyOiBudWxsLFxyXG4gICAgLyoqXHJcbiAgICAgKiBXYXJuIGhhbmRsZXIgZm9yIHdhdGNoZXIgd2FybnNcclxuICAgICAqL1xyXG4gICAgd2FybkhhbmRsZXI6IG51bGwsXHJcbiAgICAvKipcclxuICAgICAqIElnbm9yZSBjZXJ0YWluIGN1c3RvbSBlbGVtZW50c1xyXG4gICAgICovXHJcbiAgICBpZ25vcmVkRWxlbWVudHM6IFtdLFxyXG4gICAgLyoqXHJcbiAgICAgKiBDdXN0b20gdXNlciBrZXkgYWxpYXNlcyBmb3Igdi1vblxyXG4gICAgICovXHJcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcclxuICAgIGtleUNvZGVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBpZiBhIHRhZyBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSByZWdpc3RlcmVkIGFzIGFcclxuICAgICAqIGNvbXBvbmVudC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cclxuICAgICAqL1xyXG4gICAgaXNSZXNlcnZlZFRhZzogbm8sXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSB1c2VkIGFzIGEgY29tcG9uZW50XHJcbiAgICAgKiBwcm9wLiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxyXG4gICAgICovXHJcbiAgICBpc1Jlc2VydmVkQXR0cjogbm8sXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIGEgdGFnIGlzIGFuIHVua25vd24gZWxlbWVudC5cclxuICAgICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cclxuICAgICAqL1xyXG4gICAgaXNVbmtub3duRWxlbWVudDogbm8sXHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgbmFtZXNwYWNlIG9mIGFuIGVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgZ2V0VGFnTmFtZXNwYWNlOiBub29wLFxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZSB0aGUgcmVhbCB0YWcgbmFtZSBmb3IgdGhlIHNwZWNpZmljIHBsYXRmb3JtLlxyXG4gICAgICovXHJcbiAgICBwYXJzZVBsYXRmb3JtVGFnTmFtZTogaWRlbnRpdHksXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBtdXN0IGJlIGJvdW5kIHVzaW5nIHByb3BlcnR5LCBlLmcuIHZhbHVlXHJcbiAgICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXHJcbiAgICAgKi9cclxuICAgIG11c3RVc2VQcm9wOiBubyxcclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybSB1cGRhdGVzIGFzeW5jaHJvbm91c2x5LiBJbnRlbmRlZCB0byBiZSB1c2VkIGJ5IFZ1ZSBUZXN0IFV0aWxzXHJcbiAgICAgKiBUaGlzIHdpbGwgc2lnbmlmaWNhbnRseSByZWR1Y2UgcGVyZm9ybWFuY2UgaWYgc2V0IHRvIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBhc3luYzogdHJ1ZSxcclxuICAgIC8qKlxyXG4gICAgICogRXhwb3NlZCBmb3IgbGVnYWN5IHJlYXNvbnNcclxuICAgICAqL1xyXG4gICAgX2xpZmVjeWNsZUhvb2tzOiBMSUZFQ1lDTEVfSE9PS1NcclxufTtcblxuLyoqXHJcbiAqIHVuaWNvZGUgbGV0dGVycyB1c2VkIGZvciBwYXJzaW5nIGh0bWwgdGFncywgY29tcG9uZW50IG5hbWVzIGFuZCBwcm9wZXJ0eSBwYXRocy5cclxuICogdXNpbmcgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1My9zZW1hbnRpY3Mtc2NyaXB0aW5nLmh0bWwjcG90ZW50aWFsY3VzdG9tZWxlbWVudG5hbWVcclxuICogc2tpcHBpbmcgXFx1MTAwMDAtXFx1RUZGRkYgZHVlIHRvIGl0IGZyZWV6aW5nIHVwIFBoYW50b21KU1xyXG4gKi9cclxudmFyIHVuaWNvZGVSZWdFeHAgPSAvYS16QS1aXFx1MDBCN1xcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwM0YtXFx1MjA0MFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRC87XHJcbi8qKlxyXG4gKiBDaGVjayBpZiBhIHN0cmluZyBzdGFydHMgd2l0aCAkIG9yIF9cclxuICovXHJcbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQoc3RyKSB7XHJcbiAgICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcclxuICAgIHJldHVybiBjID09PSAweDI0IHx8IGMgPT09IDB4NWY7XHJcbn1cclxuLyoqXHJcbiAqIERlZmluZSBhIHByb3BlcnR5LlxyXG4gKi9cclxuZnVuY3Rpb24gZGVmKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xyXG4gICAgICAgIHZhbHVlOiB2YWwsXHJcbiAgICAgICAgZW51bWVyYWJsZTogISFlbnVtZXJhYmxlLFxyXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxyXG4gKi9cclxudmFyIGJhaWxSRSA9IG5ldyBSZWdFeHAoXCJbXlwiLmNvbmNhdCh1bmljb2RlUmVnRXhwLnNvdXJjZSwgXCIuJF9cXFxcZF1cIikpO1xyXG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xyXG4gICAgaWYgKGJhaWxSRS50ZXN0KHBhdGgpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdmFyIHNlZ21lbnRzID0gcGF0aC5zcGxpdCgnLicpO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICghb2JqKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBvYmogPSBvYmpbc2VnbWVudHNbaV1dO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfTtcclxufVxuXG4vLyBjYW4gd2UgdXNlIF9fcHJvdG9fXz9cclxudmFyIGhhc1Byb3RvID0gJ19fcHJvdG9fXycgaW4ge307XHJcbi8vIEJyb3dzZXIgZW52aXJvbm1lbnQgc25pZmZpbmdcclxudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xyXG52YXIgVUEgPSBpbkJyb3dzZXIgJiYgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcclxudmFyIGlzSUUgPSBVQSAmJiAvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTtcclxudmFyIGlzSUU5ID0gVUEgJiYgVUEuaW5kZXhPZignbXNpZSA5LjAnKSA+IDA7XHJcbnZhciBpc0VkZ2UgPSBVQSAmJiBVQS5pbmRleE9mKCdlZGdlLycpID4gMDtcclxuVUEgJiYgVUEuaW5kZXhPZignYW5kcm9pZCcpID4gMDtcclxudmFyIGlzSU9TID0gVUEgJiYgL2lwaG9uZXxpcGFkfGlwb2R8aW9zLy50ZXN0KFVBKTtcclxuVUEgJiYgL2Nocm9tZVxcL1xcZCsvLnRlc3QoVUEpICYmICFpc0VkZ2U7XHJcblVBICYmIC9waGFudG9tanMvLnRlc3QoVUEpO1xyXG52YXIgaXNGRiA9IFVBICYmIFVBLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLyk7XHJcbi8vIEZpcmVmb3ggaGFzIGEgXCJ3YXRjaFwiIGZ1bmN0aW9uIG9uIE9iamVjdC5wcm90b3R5cGUuLi5cclxuLy8gQHRzLWV4cGVjdC1lcnJvciBmaXJlYm94IHN1cHBvcnRcclxudmFyIG5hdGl2ZVdhdGNoID0ge30ud2F0Y2g7XHJcbnZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcclxuaWYgKGluQnJvd3Nlcikge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB2YXIgb3B0cyA9IHt9O1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcHRzLCAncGFzc2l2ZScsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgICAgICAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pOyAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjg1XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QtcGFzc2l2ZScsIG51bGwsIG9wdHMpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHsgfVxyXG59XHJcbi8vIHRoaXMgbmVlZHMgdG8gYmUgbGF6eS1ldmFsZWQgYmVjYXVzZSB2dWUgbWF5IGJlIHJlcXVpcmVkIGJlZm9yZVxyXG4vLyB2dWUtc2VydmVyLXJlbmRlcmVyIGNhbiBzZXQgVlVFX0VOVlxyXG52YXIgX2lzU2VydmVyO1xyXG52YXIgaXNTZXJ2ZXJSZW5kZXJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAoX2lzU2VydmVyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICBpZiAoIWluQnJvd3NlciAmJiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAvLyBkZXRlY3QgcHJlc2VuY2Ugb2YgdnVlLXNlcnZlci1yZW5kZXJlciBhbmQgYXZvaWRcclxuICAgICAgICAgICAgLy8gV2VicGFjayBzaGltbWluZyB0aGUgcHJvY2Vzc1xyXG4gICAgICAgICAgICBfaXNTZXJ2ZXIgPVxyXG4gICAgICAgICAgICAgICAgZ2xvYmFsWydwcm9jZXNzJ10gJiYgZ2xvYmFsWydwcm9jZXNzJ10uZW52LlZVRV9FTlYgPT09ICdzZXJ2ZXInO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgX2lzU2VydmVyID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9pc1NlcnZlcjtcclxufTtcclxuLy8gZGV0ZWN0IGRldnRvb2xzXHJcbnZhciBkZXZ0b29scyA9IGluQnJvd3NlciAmJiB3aW5kb3cuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcclxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuZnVuY3Rpb24gaXNOYXRpdmUoQ3Rvcikge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBDdG9yID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChDdG9yLnRvU3RyaW5nKCkpO1xyXG59XHJcbnZhciBoYXNTeW1ib2wgPSB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJlxyXG4gICAgaXNOYXRpdmUoU3ltYm9sKSAmJlxyXG4gICAgdHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICBpc05hdGl2ZShSZWZsZWN0Lm93bktleXMpO1xyXG52YXIgX1NldDsgLy8gJGZsb3ctZGlzYWJsZS1saW5lXHJcbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLyBpZiAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU2V0KSkge1xyXG4gICAgLy8gdXNlIG5hdGl2ZSBTZXQgd2hlbiBhdmFpbGFibGUuXHJcbiAgICBfU2V0ID0gU2V0O1xyXG59XHJcbmVsc2Uge1xyXG4gICAgLy8gYSBub24tc3RhbmRhcmQgU2V0IHBvbHlmaWxsIHRoYXQgb25seSB3b3JrcyB3aXRoIHByaW1pdGl2ZSBrZXlzLlxyXG4gICAgX1NldCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmdW5jdGlvbiBTZXQoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldFtrZXldID09PSB0cnVlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0W2tleV0gPSB0cnVlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIFNldDtcclxuICAgIH0oKSk7XHJcbn1cblxudmFyIGN1cnJlbnRJbnN0YW5jZSA9IG51bGw7XHJcbi8qKlxyXG4gKiBUaGlzIGlzIGV4cG9zZWQgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCB2MyAoZS5nLiBzb21lIGZ1bmN0aW9ucyBpbiBWdWVVc2VcclxuICogcmVsaWVzIG9uIGl0KS4gRG8gbm90IHVzZSB0aGlzIGludGVybmFsbHksIGp1c3QgdXNlIGBjdXJyZW50SW5zdGFuY2VgLlxyXG4gKlxyXG4gKiBAaW50ZXJuYWwgdGhpcyBmdW5jdGlvbiBuZWVkcyBtYW51YWwgdHlwZSBkZWNsYXJhdGlvbiBiZWNhdXNlIGl0IHJlbGllc1xyXG4gKiBvbiBwcmV2aW91c2x5IG1hbnVhbGx5IGF1dGhvcmVkIHR5cGVzIGZyb20gVnVlIDJcclxuICovXHJcbmZ1bmN0aW9uIGdldEN1cnJlbnRJbnN0YW5jZSgpIHtcclxuICAgIHJldHVybiBjdXJyZW50SW5zdGFuY2UgJiYgeyBwcm94eTogY3VycmVudEluc3RhbmNlIH07XHJcbn1cclxuLyoqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZnVuY3Rpb24gc2V0Q3VycmVudEluc3RhbmNlKHZtKSB7XHJcbiAgICBpZiAodm0gPT09IHZvaWQgMCkgeyB2bSA9IG51bGw7IH1cclxuICAgIGlmICghdm0pXHJcbiAgICAgICAgY3VycmVudEluc3RhbmNlICYmIGN1cnJlbnRJbnN0YW5jZS5fc2NvcGUub2ZmKCk7XHJcbiAgICBjdXJyZW50SW5zdGFuY2UgPSB2bTtcclxuICAgIHZtICYmIHZtLl9zY29wZS5vbigpO1xyXG59XG5cbi8qKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbnZhciBWTm9kZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFZOb2RlKHRhZywgZGF0YSwgY2hpbGRyZW4sIHRleHQsIGVsbSwgY29udGV4dCwgY29tcG9uZW50T3B0aW9ucywgYXN5bmNGYWN0b3J5KSB7XHJcbiAgICAgICAgdGhpcy50YWcgPSB0YWc7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XHJcbiAgICAgICAgdGhpcy50ZXh0ID0gdGV4dDtcclxuICAgICAgICB0aGlzLmVsbSA9IGVsbTtcclxuICAgICAgICB0aGlzLm5zID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5mbkNvbnRleHQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5mbk9wdGlvbnMgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5mblNjb3BlSWQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5rZXkgPSBkYXRhICYmIGRhdGEua2V5O1xyXG4gICAgICAgIHRoaXMuY29tcG9uZW50T3B0aW9ucyA9IGNvbXBvbmVudE9wdGlvbnM7XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnRJbnN0YW5jZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLnJhdyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNTdGF0aWMgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzUm9vdEluc2VydCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5pc0NvbW1lbnQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzQ2xvbmVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc09uY2UgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmFzeW5jRmFjdG9yeSA9IGFzeW5jRmFjdG9yeTtcclxuICAgICAgICB0aGlzLmFzeW5jTWV0YSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLmlzQXN5bmNQbGFjZWhvbGRlciA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZOb2RlLnByb3RvdHlwZSwgXCJjaGlsZFwiLCB7XHJcbiAgICAgICAgLy8gREVQUkVDQVRFRDogYWxpYXMgZm9yIGNvbXBvbmVudEluc3RhbmNlIGZvciBiYWNrd2FyZHMgY29tcGF0LlxyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudEluc3RhbmNlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBWTm9kZTtcclxufSgpKTtcclxudmFyIGNyZWF0ZUVtcHR5Vk5vZGUgPSBmdW5jdGlvbiAodGV4dCkge1xyXG4gICAgaWYgKHRleHQgPT09IHZvaWQgMCkgeyB0ZXh0ID0gJyc7IH1cclxuICAgIHZhciBub2RlID0gbmV3IFZOb2RlKCk7XHJcbiAgICBub2RlLnRleHQgPSB0ZXh0O1xyXG4gICAgbm9kZS5pc0NvbW1lbnQgPSB0cnVlO1xyXG4gICAgcmV0dXJuIG5vZGU7XHJcbn07XHJcbmZ1bmN0aW9uIGNyZWF0ZVRleHRWTm9kZSh2YWwpIHtcclxuICAgIHJldHVybiBuZXcgVk5vZGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgU3RyaW5nKHZhbCkpO1xyXG59XHJcbi8vIG9wdGltaXplZCBzaGFsbG93IGNsb25lXHJcbi8vIHVzZWQgZm9yIHN0YXRpYyBub2RlcyBhbmQgc2xvdCBub2RlcyBiZWNhdXNlIHRoZXkgbWF5IGJlIHJldXNlZCBhY3Jvc3NcclxuLy8gbXVsdGlwbGUgcmVuZGVycywgY2xvbmluZyB0aGVtIGF2b2lkcyBlcnJvcnMgd2hlbiBET00gbWFuaXB1bGF0aW9ucyByZWx5XHJcbi8vIG9uIHRoZWlyIGVsbSByZWZlcmVuY2UuXHJcbmZ1bmN0aW9uIGNsb25lVk5vZGUodm5vZGUpIHtcclxuICAgIHZhciBjbG9uZWQgPSBuZXcgVk5vZGUodm5vZGUudGFnLCB2bm9kZS5kYXRhLCBcclxuICAgIC8vICM3OTc1XHJcbiAgICAvLyBjbG9uZSBjaGlsZHJlbiBhcnJheSB0byBhdm9pZCBtdXRhdGluZyBvcmlnaW5hbCBpbiBjYXNlIG9mIGNsb25pbmdcclxuICAgIC8vIGEgY2hpbGQuXHJcbiAgICB2bm9kZS5jaGlsZHJlbiAmJiB2bm9kZS5jaGlsZHJlbi5zbGljZSgpLCB2bm9kZS50ZXh0LCB2bm9kZS5lbG0sIHZub2RlLmNvbnRleHQsIHZub2RlLmNvbXBvbmVudE9wdGlvbnMsIHZub2RlLmFzeW5jRmFjdG9yeSk7XHJcbiAgICBjbG9uZWQubnMgPSB2bm9kZS5ucztcclxuICAgIGNsb25lZC5pc1N0YXRpYyA9IHZub2RlLmlzU3RhdGljO1xyXG4gICAgY2xvbmVkLmtleSA9IHZub2RlLmtleTtcclxuICAgIGNsb25lZC5pc0NvbW1lbnQgPSB2bm9kZS5pc0NvbW1lbnQ7XHJcbiAgICBjbG9uZWQuZm5Db250ZXh0ID0gdm5vZGUuZm5Db250ZXh0O1xyXG4gICAgY2xvbmVkLmZuT3B0aW9ucyA9IHZub2RlLmZuT3B0aW9ucztcclxuICAgIGNsb25lZC5mblNjb3BlSWQgPSB2bm9kZS5mblNjb3BlSWQ7XHJcbiAgICBjbG9uZWQuYXN5bmNNZXRhID0gdm5vZGUuYXN5bmNNZXRhO1xyXG4gICAgY2xvbmVkLmlzQ2xvbmVkID0gdHJ1ZTtcclxuICAgIHJldHVybiBjbG9uZWQ7XHJcbn1cblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcblxyXG52YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59O1xuXG52YXIgdWlkJDIgPSAwO1xyXG4vKipcclxuICogQSBkZXAgaXMgYW4gb2JzZXJ2YWJsZSB0aGF0IGNhbiBoYXZlIG11bHRpcGxlXHJcbiAqIGRpcmVjdGl2ZXMgc3Vic2NyaWJpbmcgdG8gaXQuXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxudmFyIERlcCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERlcCgpIHtcclxuICAgICAgICB0aGlzLmlkID0gdWlkJDIrKztcclxuICAgICAgICB0aGlzLnN1YnMgPSBbXTtcclxuICAgIH1cclxuICAgIERlcC5wcm90b3R5cGUuYWRkU3ViID0gZnVuY3Rpb24gKHN1Yikge1xyXG4gICAgICAgIHRoaXMuc3Vicy5wdXNoKHN1Yik7XHJcbiAgICB9O1xyXG4gICAgRGVwLnByb3RvdHlwZS5yZW1vdmVTdWIgPSBmdW5jdGlvbiAoc3ViKSB7XHJcbiAgICAgICAgcmVtb3ZlJDIodGhpcy5zdWJzLCBzdWIpO1xyXG4gICAgfTtcclxuICAgIERlcC5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gKGluZm8pIHtcclxuICAgICAgICBpZiAoRGVwLnRhcmdldCkge1xyXG4gICAgICAgICAgICBEZXAudGFyZ2V0LmFkZERlcCh0aGlzKTtcclxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaW5mbyAmJiBEZXAudGFyZ2V0Lm9uVHJhY2spIHtcclxuICAgICAgICAgICAgICAgIERlcC50YXJnZXQub25UcmFjayhfX2Fzc2lnbih7IGVmZmVjdDogRGVwLnRhcmdldCB9LCBpbmZvKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRGVwLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiAoaW5mbykge1xyXG4gICAgICAgIC8vIHN0YWJpbGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0XHJcbiAgICAgICAgdmFyIHN1YnMgPSB0aGlzLnN1YnMuc2xpY2UoKTtcclxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29uZmlnLmFzeW5jKSB7XHJcbiAgICAgICAgICAgIC8vIHN1YnMgYXJlbid0IHNvcnRlZCBpbiBzY2hlZHVsZXIgaWYgbm90IHJ1bm5pbmcgYXN5bmNcclxuICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBzb3J0IHRoZW0gbm93IHRvIG1ha2Ugc3VyZSB0aGV5IGZpcmUgaW4gY29ycmVjdFxyXG4gICAgICAgICAgICAvLyBvcmRlclxyXG4gICAgICAgICAgICBzdWJzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdWJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpbmZvKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3ViID0gc3Vic1tpXTtcclxuICAgICAgICAgICAgICAgIHN1Yi5vblRyaWdnZXIgJiZcclxuICAgICAgICAgICAgICAgICAgICBzdWIub25UcmlnZ2VyKF9fYXNzaWduKHsgZWZmZWN0OiBzdWJzW2ldIH0sIGluZm8pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzdWJzW2ldLnVwZGF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gRGVwO1xyXG59KCkpO1xyXG4vLyBUaGUgY3VycmVudCB0YXJnZXQgd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQuXHJcbi8vIFRoaXMgaXMgZ2xvYmFsbHkgdW5pcXVlIGJlY2F1c2Ugb25seSBvbmUgd2F0Y2hlclxyXG4vLyBjYW4gYmUgZXZhbHVhdGVkIGF0IGEgdGltZS5cclxuRGVwLnRhcmdldCA9IG51bGw7XHJcbnZhciB0YXJnZXRTdGFjayA9IFtdO1xyXG5mdW5jdGlvbiBwdXNoVGFyZ2V0KHRhcmdldCkge1xyXG4gICAgdGFyZ2V0U3RhY2sucHVzaCh0YXJnZXQpO1xyXG4gICAgRGVwLnRhcmdldCA9IHRhcmdldDtcclxufVxyXG5mdW5jdGlvbiBwb3BUYXJnZXQoKSB7XHJcbiAgICB0YXJnZXRTdGFjay5wb3AoKTtcclxuICAgIERlcC50YXJnZXQgPSB0YXJnZXRTdGFja1t0YXJnZXRTdGFjay5sZW5ndGggLSAxXTtcclxufVxuXG4vKlxyXG4gKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGhcclxuICogZHluYW1pY2FsbHkgYWNjZXNzaW5nIG1ldGhvZHMgb24gQXJyYXkgcHJvdG90eXBlXHJcbiAqL1xyXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcclxudmFyIGFycmF5TWV0aG9kcyA9IE9iamVjdC5jcmVhdGUoYXJyYXlQcm90byk7XHJcbnZhciBtZXRob2RzVG9QYXRjaCA9IFtcclxuICAgICdwdXNoJyxcclxuICAgICdwb3AnLFxyXG4gICAgJ3NoaWZ0JyxcclxuICAgICd1bnNoaWZ0JyxcclxuICAgICdzcGxpY2UnLFxyXG4gICAgJ3NvcnQnLFxyXG4gICAgJ3JldmVyc2UnXHJcbl07XHJcbi8qKlxyXG4gKiBJbnRlcmNlcHQgbXV0YXRpbmcgbWV0aG9kcyBhbmQgZW1pdCBldmVudHNcclxuICovXHJcbm1ldGhvZHNUb1BhdGNoLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xyXG4gICAgLy8gY2FjaGUgb3JpZ2luYWwgbWV0aG9kXHJcbiAgICB2YXIgb3JpZ2luYWwgPSBhcnJheVByb3RvW21ldGhvZF07XHJcbiAgICBkZWYoYXJyYXlNZXRob2RzLCBtZXRob2QsIGZ1bmN0aW9uIG11dGF0b3IoKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZXN1bHQgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgICAgICB2YXIgb2IgPSB0aGlzLl9fb2JfXztcclxuICAgICAgICB2YXIgaW5zZXJ0ZWQ7XHJcbiAgICAgICAgc3dpdGNoIChtZXRob2QpIHtcclxuICAgICAgICAgICAgY2FzZSAncHVzaCc6XHJcbiAgICAgICAgICAgIGNhc2UgJ3Vuc2hpZnQnOlxyXG4gICAgICAgICAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3NwbGljZSc6XHJcbiAgICAgICAgICAgICAgICBpbnNlcnRlZCA9IGFyZ3Muc2xpY2UoMik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGluc2VydGVkKVxyXG4gICAgICAgICAgICBvYi5vYnNlcnZlQXJyYXkoaW5zZXJ0ZWQpO1xyXG4gICAgICAgIC8vIG5vdGlmeSBjaGFuZ2VcclxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgICAgICBvYi5kZXAubm90aWZ5KHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYXJyYXkgbXV0YXRpb25cIiAvKiBUcmlnZ2VyT3BUeXBlcy5BUlJBWV9NVVRBVElPTiAqLyxcclxuICAgICAgICAgICAgICAgIHRhcmdldDogdGhpcyxcclxuICAgICAgICAgICAgICAgIGtleTogbWV0aG9kXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgb2IuZGVwLm5vdGlmeSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfSk7XHJcbn0pO1xuXG52YXIgYXJyYXlLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXJyYXlNZXRob2RzKTtcclxudmFyIE5PX0lOSUlUSUFMX1ZBTFVFID0ge307XHJcbi8qKlxyXG4gKiBJbiBzb21lIGNhc2VzIHdlIG1heSB3YW50IHRvIGRpc2FibGUgb2JzZXJ2YXRpb24gaW5zaWRlIGEgY29tcG9uZW50J3NcclxuICogdXBkYXRlIGNvbXB1dGF0aW9uLlxyXG4gKi9cclxudmFyIHNob3VsZE9ic2VydmUgPSB0cnVlO1xyXG5mdW5jdGlvbiB0b2dnbGVPYnNlcnZpbmcodmFsdWUpIHtcclxuICAgIHNob3VsZE9ic2VydmUgPSB2YWx1ZTtcclxufVxyXG4vLyBzc3IgbW9jayBkZXBcclxudmFyIG1vY2tEZXAgPSB7XHJcbiAgICBub3RpZnk6IG5vb3AsXHJcbiAgICBkZXBlbmQ6IG5vb3AsXHJcbiAgICBhZGRTdWI6IG5vb3AsXHJcbiAgICByZW1vdmVTdWI6IG5vb3BcclxufTtcclxuLyoqXHJcbiAqIE9ic2VydmVyIGNsYXNzIHRoYXQgaXMgYXR0YWNoZWQgdG8gZWFjaCBvYnNlcnZlZFxyXG4gKiBvYmplY3QuIE9uY2UgYXR0YWNoZWQsIHRoZSBvYnNlcnZlciBjb252ZXJ0cyB0aGUgdGFyZ2V0XHJcbiAqIG9iamVjdCdzIHByb3BlcnR5IGtleXMgaW50byBnZXR0ZXIvc2V0dGVycyB0aGF0XHJcbiAqIGNvbGxlY3QgZGVwZW5kZW5jaWVzIGFuZCBkaXNwYXRjaCB1cGRhdGVzLlxyXG4gKi9cclxudmFyIE9ic2VydmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gT2JzZXJ2ZXIodmFsdWUsIHNoYWxsb3csIG1vY2spIHtcclxuICAgICAgICBpZiAoc2hhbGxvdyA9PT0gdm9pZCAwKSB7IHNoYWxsb3cgPSBmYWxzZTsgfVxyXG4gICAgICAgIGlmIChtb2NrID09PSB2b2lkIDApIHsgbW9jayA9IGZhbHNlOyB9XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuc2hhbGxvdyA9IHNoYWxsb3c7XHJcbiAgICAgICAgdGhpcy5tb2NrID0gbW9jaztcclxuICAgICAgICAvLyB0aGlzLnZhbHVlID0gdmFsdWVcclxuICAgICAgICB0aGlzLmRlcCA9IG1vY2sgPyBtb2NrRGVwIDogbmV3IERlcCgpO1xyXG4gICAgICAgIHRoaXMudm1Db3VudCA9IDA7XHJcbiAgICAgICAgZGVmKHZhbHVlLCAnX19vYl9fJywgdGhpcyk7XHJcbiAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIGlmICghbW9jaykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGhhc1Byb3RvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUuX19wcm90b19fID0gYXJyYXlNZXRob2RzO1xyXG4gICAgICAgICAgICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tcHJvdG8gKi9cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJyYXlLZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gYXJyYXlLZXlzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWYodmFsdWUsIGtleSwgYXJyYXlNZXRob2RzW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXNoYWxsb3cpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub2JzZXJ2ZUFycmF5KHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIFdhbGsgdGhyb3VnaCBhbGwgcHJvcGVydGllcyBhbmQgY29udmVydCB0aGVtIGludG9cclxuICAgICAgICAgICAgICogZ2V0dGVyL3NldHRlcnMuIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuXHJcbiAgICAgICAgICAgICAqIHZhbHVlIHR5cGUgaXMgT2JqZWN0LlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XHJcbiAgICAgICAgICAgICAgICBkZWZpbmVSZWFjdGl2ZSh2YWx1ZSwga2V5LCBOT19JTklJVElBTF9WQUxVRSwgdW5kZWZpbmVkLCBzaGFsbG93LCBtb2NrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogT2JzZXJ2ZSBhIGxpc3Qgb2YgQXJyYXkgaXRlbXMuXHJcbiAgICAgKi9cclxuICAgIE9ic2VydmVyLnByb3RvdHlwZS5vYnNlcnZlQXJyYXkgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICBvYnNlcnZlKHZhbHVlW2ldLCBmYWxzZSwgdGhpcy5tb2NrKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE9ic2VydmVyO1xyXG59KCkpO1xyXG4vLyBoZWxwZXJzXHJcbi8qKlxyXG4gKiBBdHRlbXB0IHRvIGNyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBmb3IgYSB2YWx1ZSxcclxuICogcmV0dXJucyB0aGUgbmV3IG9ic2VydmVyIGlmIHN1Y2Nlc3NmdWxseSBvYnNlcnZlZCxcclxuICogb3IgdGhlIGV4aXN0aW5nIG9ic2VydmVyIGlmIHRoZSB2YWx1ZSBhbHJlYWR5IGhhcyBvbmUuXHJcbiAqL1xyXG5mdW5jdGlvbiBvYnNlcnZlKHZhbHVlLCBzaGFsbG93LCBzc3JNb2NrUmVhY3Rpdml0eSkge1xyXG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNSZWYodmFsdWUpIHx8IHZhbHVlIGluc3RhbmNlb2YgVk5vZGUpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgb2I7XHJcbiAgICBpZiAoaGFzT3duKHZhbHVlLCAnX19vYl9fJykgJiYgdmFsdWUuX19vYl9fIGluc3RhbmNlb2YgT2JzZXJ2ZXIpIHtcclxuICAgICAgICBvYiA9IHZhbHVlLl9fb2JfXztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHNob3VsZE9ic2VydmUgJiZcclxuICAgICAgICAoc3NyTW9ja1JlYWN0aXZpdHkgfHwgIWlzU2VydmVyUmVuZGVyaW5nKCkpICYmXHJcbiAgICAgICAgKGlzQXJyYXkodmFsdWUpIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKSAmJlxyXG4gICAgICAgIE9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpICYmXHJcbiAgICAgICAgIXZhbHVlLl9fdl9za2lwIC8qIFJlYWN0aXZlRmxhZ3MuU0tJUCAqLykge1xyXG4gICAgICAgIG9iID0gbmV3IE9ic2VydmVyKHZhbHVlLCBzaGFsbG93LCBzc3JNb2NrUmVhY3Rpdml0eSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2I7XHJcbn1cclxuLyoqXHJcbiAqIERlZmluZSBhIHJlYWN0aXZlIHByb3BlcnR5IG9uIGFuIE9iamVjdC5cclxuICovXHJcbmZ1bmN0aW9uIGRlZmluZVJlYWN0aXZlKG9iaiwga2V5LCB2YWwsIGN1c3RvbVNldHRlciwgc2hhbGxvdywgbW9jaykge1xyXG4gICAgdmFyIGRlcCA9IG5ldyBEZXAoKTtcclxuICAgIHZhciBwcm9wZXJ0eSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpO1xyXG4gICAgaWYgKHByb3BlcnR5ICYmIHByb3BlcnR5LmNvbmZpZ3VyYWJsZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnNcclxuICAgIHZhciBnZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5nZXQ7XHJcbiAgICB2YXIgc2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuc2V0O1xyXG4gICAgaWYgKCghZ2V0dGVyIHx8IHNldHRlcikgJiZcclxuICAgICAgICAodmFsID09PSBOT19JTklJVElBTF9WQUxVRSB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSkge1xyXG4gICAgICAgIHZhbCA9IG9ialtrZXldO1xyXG4gICAgfVxyXG4gICAgdmFyIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKHZhbCwgZmFsc2UsIG1vY2spO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiByZWFjdGl2ZUdldHRlcigpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcclxuICAgICAgICAgICAgaWYgKERlcC50YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVwLmRlcGVuZCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogb2JqLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImdldFwiIC8qIFRyYWNrT3BUeXBlcy5HRVQgKi8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleToga2V5XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkZXAuZGVwZW5kKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRPYikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkT2IuZGVwLmRlcGVuZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXBlbmRBcnJheSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBpc1JlZih2YWx1ZSkgJiYgIXNoYWxsb3cgPyB2YWx1ZS52YWx1ZSA6IHZhbHVlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiByZWFjdGl2ZVNldHRlcihuZXdWYWwpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcclxuICAgICAgICAgICAgaWYgKCFoYXNDaGFuZ2VkKHZhbHVlLCBuZXdWYWwpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY3VzdG9tU2V0dGVyKSB7XHJcbiAgICAgICAgICAgICAgICBjdXN0b21TZXR0ZXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc2V0dGVyKSB7XHJcbiAgICAgICAgICAgICAgICBzZXR0ZXIuY2FsbChvYmosIG5ld1ZhbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZ2V0dGVyKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAjNzk4MTogZm9yIGFjY2Vzc29yIHByb3BlcnRpZXMgd2l0aG91dCBzZXR0ZXJcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc1JlZih2YWx1ZSkgJiYgIWlzUmVmKG5ld1ZhbCkpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlLnZhbHVlID0gbmV3VmFsO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFsID0gbmV3VmFsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKG5ld1ZhbCwgZmFsc2UsIG1vY2spO1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgZGVwLm5vdGlmeSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJzZXRcIiAvKiBUcmlnZ2VyT3BUeXBlcy5TRVQgKi8sXHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBvYmosXHJcbiAgICAgICAgICAgICAgICAgICAga2V5OiBrZXksXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWU6IG5ld1ZhbCxcclxuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZTogdmFsdWVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGVwLm5vdGlmeSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZGVwO1xyXG59XHJcbmZ1bmN0aW9uIHNldCh0YXJnZXQsIGtleSwgdmFsKSB7XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldCkpKSB7XHJcbiAgICAgICAgd2FybihcIkNhbm5vdCBzZXQgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6IFwiLmNvbmNhdCh0YXJnZXQpKTtcclxuICAgIH1cclxuICAgIGlmIChpc1JlYWRvbmx5KHRhcmdldCkpIHtcclxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXCJTZXQgb3BlcmF0aW9uIG9uIGtleSBcXFwiXCIuY29uY2F0KGtleSwgXCJcXFwiIGZhaWxlZDogdGFyZ2V0IGlzIHJlYWRvbmx5LlwiKSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdmFyIG9iID0gdGFyZ2V0Ll9fb2JfXztcclxuICAgIGlmIChpc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xyXG4gICAgICAgIHRhcmdldC5sZW5ndGggPSBNYXRoLm1heCh0YXJnZXQubGVuZ3RoLCBrZXkpO1xyXG4gICAgICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxLCB2YWwpO1xyXG4gICAgICAgIC8vIHdoZW4gbW9ja2luZyBmb3IgU1NSLCBhcnJheSBtZXRob2RzIGFyZSBub3QgaGlqYWNrZWRcclxuICAgICAgICBpZiAob2IgJiYgIW9iLnNoYWxsb3cgJiYgb2IubW9jaykge1xyXG4gICAgICAgICAgICBvYnNlcnZlKHZhbCwgZmFsc2UsIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgfVxyXG4gICAgaWYgKGtleSBpbiB0YXJnZXQgJiYgIShrZXkgaW4gT2JqZWN0LnByb3RvdHlwZSkpIHtcclxuICAgICAgICB0YXJnZXRba2V5XSA9IHZhbDtcclxuICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgfVxyXG4gICAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XHJcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxyXG4gICAgICAgICAgICB3YXJuKCdBdm9pZCBhZGRpbmcgcmVhY3RpdmUgcHJvcGVydGllcyB0byBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcclxuICAgICAgICAgICAgICAgICdhdCBydW50aW1lIC0gZGVjbGFyZSBpdCB1cGZyb250IGluIHRoZSBkYXRhIG9wdGlvbi4nKTtcclxuICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgfVxyXG4gICAgaWYgKCFvYikge1xyXG4gICAgICAgIHRhcmdldFtrZXldID0gdmFsO1xyXG4gICAgICAgIHJldHVybiB2YWw7XHJcbiAgICB9XHJcbiAgICBkZWZpbmVSZWFjdGl2ZShvYi52YWx1ZSwga2V5LCB2YWwsIHVuZGVmaW5lZCwgb2Iuc2hhbGxvdywgb2IubW9jayk7XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgIG9iLmRlcC5ub3RpZnkoe1xyXG4gICAgICAgICAgICB0eXBlOiBcImFkZFwiIC8qIFRyaWdnZXJPcFR5cGVzLkFERCAqLyxcclxuICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQsXHJcbiAgICAgICAgICAgIGtleToga2V5LFxyXG4gICAgICAgICAgICBuZXdWYWx1ZTogdmFsLFxyXG4gICAgICAgICAgICBvbGRWYWx1ZTogdW5kZWZpbmVkXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBvYi5kZXAubm90aWZ5KCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsO1xyXG59XHJcbmZ1bmN0aW9uIGRlbCh0YXJnZXQsIGtleSkge1xyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpKSkge1xyXG4gICAgICAgIHdhcm4oXCJDYW5ub3QgZGVsZXRlIHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIi5jb25jYXQodGFyZ2V0KSk7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcclxuICAgICAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdmFyIG9iID0gdGFyZ2V0Ll9fb2JfXztcclxuICAgIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xyXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcclxuICAgICAgICAgICAgd2FybignQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcclxuICAgICAgICAgICAgICAgICctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzUmVhZG9ubHkodGFyZ2V0KSkge1xyXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcclxuICAgICAgICAgICAgd2FybihcIkRlbGV0ZSBvcGVyYXRpb24gb24ga2V5IFxcXCJcIi5jb25jYXQoa2V5LCBcIlxcXCIgZmFpbGVkOiB0YXJnZXQgaXMgcmVhZG9ubHkuXCIpKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoIWhhc093bih0YXJnZXQsIGtleSkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBkZWxldGUgdGFyZ2V0W2tleV07XHJcbiAgICBpZiAoIW9iKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICBvYi5kZXAubm90aWZ5KHtcclxuICAgICAgICAgICAgdHlwZTogXCJkZWxldGVcIiAvKiBUcmlnZ2VyT3BUeXBlcy5ERUxFVEUgKi8sXHJcbiAgICAgICAgICAgIHRhcmdldDogdGFyZ2V0LFxyXG4gICAgICAgICAgICBrZXk6IGtleVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgb2IuZGVwLm5vdGlmeSgpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBDb2xsZWN0IGRlcGVuZGVuY2llcyBvbiBhcnJheSBlbGVtZW50cyB3aGVuIHRoZSBhcnJheSBpcyB0b3VjaGVkLCBzaW5jZVxyXG4gKiB3ZSBjYW5ub3QgaW50ZXJjZXB0IGFycmF5IGVsZW1lbnQgYWNjZXNzIGxpa2UgcHJvcGVydHkgZ2V0dGVycy5cclxuICovXHJcbmZ1bmN0aW9uIGRlcGVuZEFycmF5KHZhbHVlKSB7XHJcbiAgICBmb3IgKHZhciBlID0gdm9pZCAwLCBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgIGUgPSB2YWx1ZVtpXTtcclxuICAgICAgICBpZiAoZSAmJiBlLl9fb2JfXykge1xyXG4gICAgICAgICAgICBlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc0FycmF5KGUpKSB7XHJcbiAgICAgICAgICAgIGRlcGVuZEFycmF5KGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG5mdW5jdGlvbiByZWFjdGl2ZSh0YXJnZXQpIHtcclxuICAgIG1ha2VSZWFjdGl2ZSh0YXJnZXQsIGZhbHNlKTtcclxuICAgIHJldHVybiB0YXJnZXQ7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybiBhIHNoYWxsb3dseS1yZWFjdGl2ZSBjb3B5IG9mIHRoZSBvcmlnaW5hbCBvYmplY3QsIHdoZXJlIG9ubHkgdGhlIHJvb3RcclxuICogbGV2ZWwgcHJvcGVydGllcyBhcmUgcmVhY3RpdmUuIEl0IGFsc28gZG9lcyBub3QgYXV0by11bndyYXAgcmVmcyAoZXZlbiBhdCB0aGVcclxuICogcm9vdCBsZXZlbCkuXHJcbiAqL1xyXG5mdW5jdGlvbiBzaGFsbG93UmVhY3RpdmUodGFyZ2V0KSB7XHJcbiAgICBtYWtlUmVhY3RpdmUodGFyZ2V0LCB0cnVlKTtcclxuICAgIGRlZih0YXJnZXQsIFwiX192X2lzU2hhbGxvd1wiIC8qIFJlYWN0aXZlRmxhZ3MuSVNfU0hBTExPVyAqLywgdHJ1ZSk7XHJcbiAgICByZXR1cm4gdGFyZ2V0O1xyXG59XHJcbmZ1bmN0aW9uIG1ha2VSZWFjdGl2ZSh0YXJnZXQsIHNoYWxsb3cpIHtcclxuICAgIC8vIGlmIHRyeWluZyB0byBvYnNlcnZlIGEgcmVhZG9ubHkgcHJveHksIHJldHVybiB0aGUgcmVhZG9ubHkgdmVyc2lvbi5cclxuICAgIGlmICghaXNSZWFkb25seSh0YXJnZXQpKSB7XHJcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICAgICAgaWYgKGlzQXJyYXkodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgd2FybihcIkF2b2lkIHVzaW5nIEFycmF5IGFzIHJvb3QgdmFsdWUgZm9yIFwiLmNvbmNhdChzaGFsbG93ID8gXCJzaGFsbG93UmVhY3RpdmUoKVwiIDogXCJyZWFjdGl2ZSgpXCIsIFwiIGFzIGl0IGNhbm5vdCBiZSB0cmFja2VkIGluIHdhdGNoKCkgb3Igd2F0Y2hFZmZlY3QoKS4gVXNlIFwiKS5jb25jYXQoc2hhbGxvdyA/IFwic2hhbGxvd1JlZigpXCIgOiBcInJlZigpXCIsIFwiIGluc3RlYWQuIFRoaXMgaXMgYSBWdWUtMi1vbmx5IGxpbWl0YXRpb24uXCIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgZXhpc3RpbmdPYiA9IHRhcmdldCAmJiB0YXJnZXQuX19vYl9fO1xyXG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdPYiAmJiBleGlzdGluZ09iLnNoYWxsb3cgIT09IHNoYWxsb3cpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oXCJUYXJnZXQgaXMgYWxyZWFkeSBhIFwiLmNvbmNhdChleGlzdGluZ09iLnNoYWxsb3cgPyBcIlwiIDogXCJub24tXCIsIFwic2hhbGxvdyByZWFjdGl2ZSBvYmplY3QsIGFuZCBjYW5ub3QgYmUgY29udmVydGVkIHRvIFwiKS5jb25jYXQoc2hhbGxvdyA/IFwiXCIgOiBcIm5vbi1cIiwgXCJzaGFsbG93LlwiKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG9iID0gb2JzZXJ2ZSh0YXJnZXQsIHNoYWxsb3csIGlzU2VydmVyUmVuZGVyaW5nKCkgLyogc3NyIG1vY2sgcmVhY3Rpdml0eSAqLyk7XHJcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIW9iKSB7XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQgPT0gbnVsbCB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKFwidmFsdWUgY2Fubm90IGJlIG1hZGUgcmVhY3RpdmU6IFwiLmNvbmNhdChTdHJpbmcodGFyZ2V0KSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpc0NvbGxlY3Rpb25UeXBlKHRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oXCJWdWUgMiBkb2VzIG5vdCBzdXBwb3J0IHJlYWN0aXZlIGNvbGxlY3Rpb24gdHlwZXMgc3VjaCBhcyBNYXAgb3IgU2V0LlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpc1JlYWN0aXZlKHZhbHVlKSB7XHJcbiAgICBpZiAoaXNSZWFkb25seSh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gaXNSZWFjdGl2ZSh2YWx1ZVtcIl9fdl9yYXdcIiAvKiBSZWFjdGl2ZUZsYWdzLlJBVyAqL10pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fb2JfXyk7XHJcbn1cclxuZnVuY3Rpb24gaXNTaGFsbG93KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX192X2lzU2hhbGxvdyk7XHJcbn1cclxuZnVuY3Rpb24gaXNSZWFkb25seSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fdl9pc1JlYWRvbmx5KTtcclxufVxyXG5mdW5jdGlvbiBpc1Byb3h5KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gaXNSZWFjdGl2ZSh2YWx1ZSkgfHwgaXNSZWFkb25seSh2YWx1ZSk7XHJcbn1cclxuZnVuY3Rpb24gdG9SYXcob2JzZXJ2ZWQpIHtcclxuICAgIHZhciByYXcgPSBvYnNlcnZlZCAmJiBvYnNlcnZlZFtcIl9fdl9yYXdcIiAvKiBSZWFjdGl2ZUZsYWdzLlJBVyAqL107XHJcbiAgICByZXR1cm4gcmF3ID8gdG9SYXcocmF3KSA6IG9ic2VydmVkO1xyXG59XHJcbmZ1bmN0aW9uIG1hcmtSYXcodmFsdWUpIHtcclxuICAgIGRlZih2YWx1ZSwgXCJfX3Zfc2tpcFwiIC8qIFJlYWN0aXZlRmxhZ3MuU0tJUCAqLywgdHJ1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuLyoqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZnVuY3Rpb24gaXNDb2xsZWN0aW9uVHlwZSh2YWx1ZSkge1xyXG4gICAgdmFyIHR5cGUgPSB0b1Jhd1R5cGUodmFsdWUpO1xyXG4gICAgcmV0dXJuICh0eXBlID09PSAnTWFwJyB8fCB0eXBlID09PSAnV2Vha01hcCcgfHwgdHlwZSA9PT0gJ1NldCcgfHwgdHlwZSA9PT0gJ1dlYWtTZXQnKTtcclxufVxuXG4vKipcclxuICogQGludGVybmFsXHJcbiAqL1xyXG52YXIgUmVmRmxhZyA9IFwiX192X2lzUmVmXCI7XHJcbmZ1bmN0aW9uIGlzUmVmKHIpIHtcclxuICAgIHJldHVybiAhIShyICYmIHIuX192X2lzUmVmID09PSB0cnVlKTtcclxufVxyXG5mdW5jdGlvbiByZWYkMSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZVJlZih2YWx1ZSwgZmFsc2UpO1xyXG59XHJcbmZ1bmN0aW9uIHNoYWxsb3dSZWYodmFsdWUpIHtcclxuICAgIHJldHVybiBjcmVhdGVSZWYodmFsdWUsIHRydWUpO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVJlZihyYXdWYWx1ZSwgc2hhbGxvdykge1xyXG4gICAgaWYgKGlzUmVmKHJhd1ZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiByYXdWYWx1ZTtcclxuICAgIH1cclxuICAgIHZhciByZWYgPSB7fTtcclxuICAgIGRlZihyZWYsIFJlZkZsYWcsIHRydWUpO1xyXG4gICAgZGVmKHJlZiwgXCJfX3ZfaXNTaGFsbG93XCIgLyogUmVhY3RpdmVGbGFncy5JU19TSEFMTE9XICovLCBzaGFsbG93KTtcclxuICAgIGRlZihyZWYsICdkZXAnLCBkZWZpbmVSZWFjdGl2ZShyZWYsICd2YWx1ZScsIHJhd1ZhbHVlLCBudWxsLCBzaGFsbG93LCBpc1NlcnZlclJlbmRlcmluZygpKSk7XHJcbiAgICByZXR1cm4gcmVmO1xyXG59XHJcbmZ1bmN0aW9uIHRyaWdnZXJSZWYocmVmKSB7XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhcmVmLmRlcCkge1xyXG4gICAgICAgIHdhcm4oXCJyZWNlaXZlZCBvYmplY3QgaXMgbm90IGEgdHJpZ2dlcmFibGUgcmVmLlwiKTtcclxuICAgIH1cclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgICAgcmVmLmRlcCAmJlxyXG4gICAgICAgICAgICByZWYuZGVwLm5vdGlmeSh7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcInNldFwiIC8qIFRyaWdnZXJPcFR5cGVzLlNFVCAqLyxcclxuICAgICAgICAgICAgICAgIHRhcmdldDogcmVmLFxyXG4gICAgICAgICAgICAgICAga2V5OiAndmFsdWUnXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmVmLmRlcCAmJiByZWYuZGVwLm5vdGlmeSgpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHVucmVmKHJlZikge1xyXG4gICAgcmV0dXJuIGlzUmVmKHJlZikgPyByZWYudmFsdWUgOiByZWY7XHJcbn1cclxuZnVuY3Rpb24gcHJveHlSZWZzKG9iamVjdFdpdGhSZWZzKSB7XHJcbiAgICBpZiAoaXNSZWFjdGl2ZShvYmplY3RXaXRoUmVmcykpIHtcclxuICAgICAgICByZXR1cm4gb2JqZWN0V2l0aFJlZnM7XHJcbiAgICB9XHJcbiAgICB2YXIgcHJveHkgPSB7fTtcclxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0V2l0aFJlZnMpO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgcHJveHlXaXRoUmVmVW53cmFwKHByb3h5LCBvYmplY3RXaXRoUmVmcywga2V5c1tpXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJveHk7XHJcbn1cclxuZnVuY3Rpb24gcHJveHlXaXRoUmVmVW53cmFwKHRhcmdldCwgc291cmNlLCBrZXkpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwge1xyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdmFsID0gc291cmNlW2tleV07XHJcbiAgICAgICAgICAgIGlmIChpc1JlZih2YWwpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsLnZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9iID0gdmFsICYmIHZhbC5fX29iX187XHJcbiAgICAgICAgICAgICAgICBpZiAob2IpXHJcbiAgICAgICAgICAgICAgICAgICAgb2IuZGVwLmRlcGVuZCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdmFyIG9sZFZhbHVlID0gc291cmNlW2tleV07XHJcbiAgICAgICAgICAgIGlmIChpc1JlZihvbGRWYWx1ZSkgJiYgIWlzUmVmKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgb2xkVmFsdWUudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNvdXJjZVtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBjdXN0b21SZWYoZmFjdG9yeSkge1xyXG4gICAgdmFyIGRlcCA9IG5ldyBEZXAoKTtcclxuICAgIHZhciBfYSA9IGZhY3RvcnkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGRlcC5kZXBlbmQoe1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiByZWYsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcImdldFwiIC8qIFRyYWNrT3BUeXBlcy5HRVQgKi8sXHJcbiAgICAgICAgICAgICAgICBrZXk6ICd2YWx1ZSdcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBkZXAuZGVwZW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGRlcC5ub3RpZnkoe1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiByZWYsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcInNldFwiIC8qIFRyaWdnZXJPcFR5cGVzLlNFVCAqLyxcclxuICAgICAgICAgICAgICAgIGtleTogJ3ZhbHVlJ1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGRlcC5ub3RpZnkoKTtcclxuICAgICAgICB9XHJcbiAgICB9KSwgZ2V0ID0gX2EuZ2V0LCBzZXQgPSBfYS5zZXQ7XHJcbiAgICB2YXIgcmVmID0ge1xyXG4gICAgICAgIGdldCB2YWx1ZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdldCgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0IHZhbHVlKG5ld1ZhbCkge1xyXG4gICAgICAgICAgICBzZXQobmV3VmFsKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZGVmKHJlZiwgUmVmRmxhZywgdHJ1ZSk7XHJcbiAgICByZXR1cm4gcmVmO1xyXG59XHJcbmZ1bmN0aW9uIHRvUmVmcyhvYmplY3QpIHtcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc1JlYWN0aXZlKG9iamVjdCkpIHtcclxuICAgICAgICB3YXJuKFwidG9SZWZzKCkgZXhwZWN0cyBhIHJlYWN0aXZlIG9iamVjdCBidXQgcmVjZWl2ZWQgYSBwbGFpbiBvbmUuXCIpO1xyXG4gICAgfVxyXG4gICAgdmFyIHJldCA9IGlzQXJyYXkob2JqZWN0KSA/IG5ldyBBcnJheShvYmplY3QubGVuZ3RoKSA6IHt9O1xyXG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xyXG4gICAgICAgIHJldFtrZXldID0gdG9SZWYob2JqZWN0LCBrZXkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxufVxyXG5mdW5jdGlvbiB0b1JlZihvYmplY3QsIGtleSwgZGVmYXVsdFZhbHVlKSB7XHJcbiAgICB2YXIgdmFsID0gb2JqZWN0W2tleV07XHJcbiAgICBpZiAoaXNSZWYodmFsKSkge1xyXG4gICAgICAgIHJldHVybiB2YWw7XHJcbiAgICB9XHJcbiAgICB2YXIgcmVmID0ge1xyXG4gICAgICAgIGdldCB2YWx1ZSgpIHtcclxuICAgICAgICAgICAgdmFyIHZhbCA9IG9iamVjdFtrZXldO1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiB2YWw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQgdmFsdWUobmV3VmFsKSB7XHJcbiAgICAgICAgICAgIG9iamVjdFtrZXldID0gbmV3VmFsO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBkZWYocmVmLCBSZWZGbGFnLCB0cnVlKTtcclxuICAgIHJldHVybiByZWY7XHJcbn1cblxudmFyIHJhd1RvUmVhZG9ubHlGbGFnID0gXCJfX3ZfcmF3VG9SZWFkb25seVwiO1xyXG52YXIgcmF3VG9TaGFsbG93UmVhZG9ubHlGbGFnID0gXCJfX3ZfcmF3VG9TaGFsbG93UmVhZG9ubHlcIjtcclxuZnVuY3Rpb24gcmVhZG9ubHkodGFyZ2V0KSB7XHJcbiAgICByZXR1cm4gY3JlYXRlUmVhZG9ubHkodGFyZ2V0LCBmYWxzZSk7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlUmVhZG9ubHkodGFyZ2V0LCBzaGFsbG93KSB7XHJcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QodGFyZ2V0KSkge1xyXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGlmIChpc0FycmF5KHRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oXCJWdWUgMiBkb2VzIG5vdCBzdXBwb3J0IHJlYWRvbmx5IGFycmF5cy5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNDb2xsZWN0aW9uVHlwZSh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKFwiVnVlIDIgZG9lcyBub3Qgc3VwcG9ydCByZWFkb25seSBjb2xsZWN0aW9uIHR5cGVzIHN1Y2ggYXMgTWFwIG9yIFNldC5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKFwidmFsdWUgY2Fubm90IGJlIG1hZGUgcmVhZG9ubHk6IFwiLmNvbmNhdCh0eXBlb2YgdGFyZ2V0KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcclxuICAgIH1cclxuICAgIC8vIGFscmVhZHkgYSByZWFkb25seSBvYmplY3RcclxuICAgIGlmIChpc1JlYWRvbmx5KHRhcmdldCkpIHtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfVxyXG4gICAgLy8gYWxyZWFkeSBoYXMgYSByZWFkb25seSBwcm94eVxyXG4gICAgdmFyIGV4aXN0aW5nRmxhZyA9IHNoYWxsb3cgPyByYXdUb1NoYWxsb3dSZWFkb25seUZsYWcgOiByYXdUb1JlYWRvbmx5RmxhZztcclxuICAgIHZhciBleGlzdGluZ1Byb3h5ID0gdGFyZ2V0W2V4aXN0aW5nRmxhZ107XHJcbiAgICBpZiAoZXhpc3RpbmdQcm94eSkge1xyXG4gICAgICAgIHJldHVybiBleGlzdGluZ1Byb3h5O1xyXG4gICAgfVxyXG4gICAgdmFyIHByb3h5ID0gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSk7XHJcbiAgICBkZWYodGFyZ2V0LCBleGlzdGluZ0ZsYWcsIHByb3h5KTtcclxuICAgIGRlZihwcm94eSwgXCJfX3ZfaXNSZWFkb25seVwiIC8qIFJlYWN0aXZlRmxhZ3MuSVNfUkVBRE9OTFkgKi8sIHRydWUpO1xyXG4gICAgZGVmKHByb3h5LCBcIl9fdl9yYXdcIiAvKiBSZWFjdGl2ZUZsYWdzLlJBVyAqLywgdGFyZ2V0KTtcclxuICAgIGlmIChpc1JlZih0YXJnZXQpKSB7XHJcbiAgICAgICAgZGVmKHByb3h5LCBSZWZGbGFnLCB0cnVlKTtcclxuICAgIH1cclxuICAgIGlmIChzaGFsbG93IHx8IGlzU2hhbGxvdyh0YXJnZXQpKSB7XHJcbiAgICAgICAgZGVmKHByb3h5LCBcIl9fdl9pc1NoYWxsb3dcIiAvKiBSZWFjdGl2ZUZsYWdzLklTX1NIQUxMT1cgKi8sIHRydWUpO1xyXG4gICAgfVxyXG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh0YXJnZXQpO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgZGVmaW5lUmVhZG9ubHlQcm9wZXJ0eShwcm94eSwgdGFyZ2V0LCBrZXlzW2ldLCBzaGFsbG93KTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcm94eTtcclxufVxyXG5mdW5jdGlvbiBkZWZpbmVSZWFkb25seVByb3BlcnR5KHByb3h5LCB0YXJnZXQsIGtleSwgc2hhbGxvdykge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3h5LCBrZXksIHtcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHZhbCA9IHRhcmdldFtrZXldO1xyXG4gICAgICAgICAgICByZXR1cm4gc2hhbGxvdyB8fCAhaXNQbGFpbk9iamVjdCh2YWwpID8gdmFsIDogcmVhZG9ubHkodmFsKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXHJcbiAgICAgICAgICAgICAgICB3YXJuKFwiU2V0IG9wZXJhdGlvbiBvbiBrZXkgXFxcIlwiLmNvbmNhdChrZXksIFwiXFxcIiBmYWlsZWQ6IHRhcmdldCBpcyByZWFkb25seS5cIikpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgcmVhY3RpdmUtY29weSBvZiB0aGUgb3JpZ2luYWwgb2JqZWN0LCB3aGVyZSBvbmx5IHRoZSByb290IGxldmVsXHJcbiAqIHByb3BlcnRpZXMgYXJlIHJlYWRvbmx5LCBhbmQgZG9lcyBOT1QgdW53cmFwIHJlZnMgbm9yIHJlY3Vyc2l2ZWx5IGNvbnZlcnRcclxuICogcmV0dXJuZWQgcHJvcGVydGllcy5cclxuICogVGhpcyBpcyB1c2VkIGZvciBjcmVhdGluZyB0aGUgcHJvcHMgcHJveHkgb2JqZWN0IGZvciBzdGF0ZWZ1bCBjb21wb25lbnRzLlxyXG4gKi9cclxuZnVuY3Rpb24gc2hhbGxvd1JlYWRvbmx5KHRhcmdldCkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZVJlYWRvbmx5KHRhcmdldCwgdHJ1ZSk7XHJcbn1cblxuZnVuY3Rpb24gY29tcHV0ZWQoZ2V0dGVyT3JPcHRpb25zLCBkZWJ1Z09wdGlvbnMpIHtcclxuICAgIHZhciBnZXR0ZXI7XHJcbiAgICB2YXIgc2V0dGVyO1xyXG4gICAgdmFyIG9ubHlHZXR0ZXIgPSBpc0Z1bmN0aW9uKGdldHRlck9yT3B0aW9ucyk7XHJcbiAgICBpZiAob25seUdldHRlcikge1xyXG4gICAgICAgIGdldHRlciA9IGdldHRlck9yT3B0aW9ucztcclxuICAgICAgICBzZXR0ZXIgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXHJcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgd2FybignV3JpdGUgb3BlcmF0aW9uIGZhaWxlZDogY29tcHV0ZWQgdmFsdWUgaXMgcmVhZG9ubHknKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA6IG5vb3A7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBnZXR0ZXIgPSBnZXR0ZXJPck9wdGlvbnMuZ2V0O1xyXG4gICAgICAgIHNldHRlciA9IGdldHRlck9yT3B0aW9ucy5zZXQ7XHJcbiAgICB9XHJcbiAgICB2YXIgd2F0Y2hlciA9IGlzU2VydmVyUmVuZGVyaW5nKClcclxuICAgICAgICA/IG51bGxcclxuICAgICAgICA6IG5ldyBXYXRjaGVyKGN1cnJlbnRJbnN0YW5jZSwgZ2V0dGVyLCBub29wLCB7IGxhenk6IHRydWUgfSk7XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXRjaGVyICYmIGRlYnVnT3B0aW9ucykge1xyXG4gICAgICAgIHdhdGNoZXIub25UcmFjayA9IGRlYnVnT3B0aW9ucy5vblRyYWNrO1xyXG4gICAgICAgIHdhdGNoZXIub25UcmlnZ2VyID0gZGVidWdPcHRpb25zLm9uVHJpZ2dlcjtcclxuICAgIH1cclxuICAgIHZhciByZWYgPSB7XHJcbiAgICAgICAgLy8gc29tZSBsaWJzIHJlbHkgb24gdGhlIHByZXNlbmNlIGVmZmVjdCBmb3IgY2hlY2tpbmcgY29tcHV0ZWQgcmVmc1xyXG4gICAgICAgIC8vIGZyb20gbm9ybWFsIHJlZnMsIGJ1dCB0aGUgaW1wbGVtZW50YXRpb24gZG9lc24ndCBtYXR0ZXJcclxuICAgICAgICBlZmZlY3Q6IHdhdGNoZXIsXHJcbiAgICAgICAgZ2V0IHZhbHVlKCkge1xyXG4gICAgICAgICAgICBpZiAod2F0Y2hlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHdhdGNoZXIuZGlydHkpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXRjaGVyLmV2YWx1YXRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoRGVwLnRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIERlcC50YXJnZXQub25UcmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEZXAudGFyZ2V0Lm9uVHJhY2soe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWZmZWN0OiBEZXAudGFyZ2V0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiByZWYsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImdldFwiIC8qIFRyYWNrT3BUeXBlcy5HRVQgKi8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6ICd2YWx1ZSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHdhdGNoZXIuZGVwZW5kKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gd2F0Y2hlci52YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBnZXR0ZXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0IHZhbHVlKG5ld1ZhbCkge1xyXG4gICAgICAgICAgICBzZXR0ZXIobmV3VmFsKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZGVmKHJlZiwgUmVmRmxhZywgdHJ1ZSk7XHJcbiAgICBkZWYocmVmLCBcIl9fdl9pc1JlYWRvbmx5XCIgLyogUmVhY3RpdmVGbGFncy5JU19SRUFET05MWSAqLywgb25seUdldHRlcik7XHJcbiAgICByZXR1cm4gcmVmO1xyXG59XG5cbnZhciBXQVRDSEVSID0gXCJ3YXRjaGVyXCI7XHJcbnZhciBXQVRDSEVSX0NCID0gXCJcIi5jb25jYXQoV0FUQ0hFUiwgXCIgY2FsbGJhY2tcIik7XHJcbnZhciBXQVRDSEVSX0dFVFRFUiA9IFwiXCIuY29uY2F0KFdBVENIRVIsIFwiIGdldHRlclwiKTtcclxudmFyIFdBVENIRVJfQ0xFQU5VUCA9IFwiXCIuY29uY2F0KFdBVENIRVIsIFwiIGNsZWFudXBcIik7XHJcbi8vIFNpbXBsZSBlZmZlY3QuXHJcbmZ1bmN0aW9uIHdhdGNoRWZmZWN0KGVmZmVjdCwgb3B0aW9ucykge1xyXG4gICAgcmV0dXJuIGRvV2F0Y2goZWZmZWN0LCBudWxsLCBvcHRpb25zKTtcclxufVxyXG5mdW5jdGlvbiB3YXRjaFBvc3RFZmZlY3QoZWZmZWN0LCBvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gZG9XYXRjaChlZmZlY3QsIG51bGwsIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXHJcbiAgICAgICAgPyBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb3B0aW9ucyksIHsgZmx1c2g6ICdwb3N0JyB9KSA6IHsgZmx1c2g6ICdwb3N0JyB9KSk7XHJcbn1cclxuZnVuY3Rpb24gd2F0Y2hTeW5jRWZmZWN0KGVmZmVjdCwgb3B0aW9ucykge1xyXG4gICAgcmV0dXJuIGRvV2F0Y2goZWZmZWN0LCBudWxsLCAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xyXG4gICAgICAgID8gX19hc3NpZ24oX19hc3NpZ24oe30sIG9wdGlvbnMpLCB7IGZsdXNoOiAnc3luYycgfSkgOiB7IGZsdXNoOiAnc3luYycgfSkpO1xyXG59XHJcbi8vIGluaXRpYWwgdmFsdWUgZm9yIHdhdGNoZXJzIHRvIHRyaWdnZXIgb24gdW5kZWZpbmVkIGluaXRpYWwgdmFsdWVzXHJcbnZhciBJTklUSUFMX1dBVENIRVJfVkFMVUUgPSB7fTtcclxuLy8gaW1wbGVtZW50YXRpb25cclxuZnVuY3Rpb24gd2F0Y2goc291cmNlLCBjYiwgb3B0aW9ucykge1xyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgd2FybihcImB3YXRjaChmbiwgb3B0aW9ucz8pYCBzaWduYXR1cmUgaGFzIGJlZW4gbW92ZWQgdG8gYSBzZXBhcmF0ZSBBUEkuIFwiICtcclxuICAgICAgICAgICAgXCJVc2UgYHdhdGNoRWZmZWN0KGZuLCBvcHRpb25zPylgIGluc3RlYWQuIGB3YXRjaGAgbm93IG9ubHkgXCIgK1xyXG4gICAgICAgICAgICBcInN1cHBvcnRzIGB3YXRjaChzb3VyY2UsIGNiLCBvcHRpb25zPykgc2lnbmF0dXJlLlwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBkb1dhdGNoKHNvdXJjZSwgY2IsIG9wdGlvbnMpO1xyXG59XHJcbmZ1bmN0aW9uIGRvV2F0Y2goc291cmNlLCBjYiwgX2EpIHtcclxuICAgIHZhciBfYiA9IF9hID09PSB2b2lkIDAgPyBlbXB0eU9iamVjdCA6IF9hLCBpbW1lZGlhdGUgPSBfYi5pbW1lZGlhdGUsIGRlZXAgPSBfYi5kZWVwLCBfYyA9IF9iLmZsdXNoLCBmbHVzaCA9IF9jID09PSB2b2lkIDAgPyAncHJlJyA6IF9jLCBvblRyYWNrID0gX2Iub25UcmFjaywgb25UcmlnZ2VyID0gX2Iub25UcmlnZ2VyO1xyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNiKSB7XHJcbiAgICAgICAgaWYgKGltbWVkaWF0ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHdhcm4oXCJ3YXRjaCgpIFxcXCJpbW1lZGlhdGVcXFwiIG9wdGlvbiBpcyBvbmx5IHJlc3BlY3RlZCB3aGVuIHVzaW5nIHRoZSBcIiArXHJcbiAgICAgICAgICAgICAgICBcIndhdGNoKHNvdXJjZSwgY2FsbGJhY2ssIG9wdGlvbnM/KSBzaWduYXR1cmUuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGVlcCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHdhcm4oXCJ3YXRjaCgpIFxcXCJkZWVwXFxcIiBvcHRpb24gaXMgb25seSByZXNwZWN0ZWQgd2hlbiB1c2luZyB0aGUgXCIgK1xyXG4gICAgICAgICAgICAgICAgXCJ3YXRjaChzb3VyY2UsIGNhbGxiYWNrLCBvcHRpb25zPykgc2lnbmF0dXJlLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB2YXIgd2FybkludmFsaWRTb3VyY2UgPSBmdW5jdGlvbiAocykge1xyXG4gICAgICAgIHdhcm4oXCJJbnZhbGlkIHdhdGNoIHNvdXJjZTogXCIuY29uY2F0KHMsIFwiLiBBIHdhdGNoIHNvdXJjZSBjYW4gb25seSBiZSBhIGdldHRlci9lZmZlY3QgXCIpICtcclxuICAgICAgICAgICAgXCJmdW5jdGlvbiwgYSByZWYsIGEgcmVhY3RpdmUgb2JqZWN0LCBvciBhbiBhcnJheSBvZiB0aGVzZSB0eXBlcy5cIik7XHJcbiAgICB9O1xyXG4gICAgdmFyIGluc3RhbmNlID0gY3VycmVudEluc3RhbmNlO1xyXG4gICAgdmFyIGNhbGwgPSBmdW5jdGlvbiAoZm4sIHR5cGUsIGFyZ3MpIHtcclxuICAgICAgICBpZiAoYXJncyA9PT0gdm9pZCAwKSB7IGFyZ3MgPSBudWxsOyB9XHJcbiAgICAgICAgcmV0dXJuIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGZuLCBudWxsLCBhcmdzLCBpbnN0YW5jZSwgdHlwZSk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGdldHRlcjtcclxuICAgIHZhciBmb3JjZVRyaWdnZXIgPSBmYWxzZTtcclxuICAgIHZhciBpc011bHRpU291cmNlID0gZmFsc2U7XHJcbiAgICBpZiAoaXNSZWYoc291cmNlKSkge1xyXG4gICAgICAgIGdldHRlciA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNvdXJjZS52YWx1ZTsgfTtcclxuICAgICAgICBmb3JjZVRyaWdnZXIgPSBpc1NoYWxsb3coc291cmNlKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzUmVhY3RpdmUoc291cmNlKSkge1xyXG4gICAgICAgIGdldHRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc291cmNlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2U7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBkZWVwID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzQXJyYXkoc291cmNlKSkge1xyXG4gICAgICAgIGlzTXVsdGlTb3VyY2UgPSB0cnVlO1xyXG4gICAgICAgIGZvcmNlVHJpZ2dlciA9IHNvdXJjZS5zb21lKGZ1bmN0aW9uIChzKSB7IHJldHVybiBpc1JlYWN0aXZlKHMpIHx8IGlzU2hhbGxvdyhzKTsgfSk7XHJcbiAgICAgICAgZ2V0dGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc291cmNlLm1hcChmdW5jdGlvbiAocykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzUmVmKHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMudmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc1JlYWN0aXZlKHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyYXZlcnNlKHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNGdW5jdGlvbihzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsKHMsIFdBVENIRVJfR0VUVEVSKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybkludmFsaWRTb3VyY2Uocyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHNvdXJjZSkpIHtcclxuICAgICAgICBpZiAoY2IpIHtcclxuICAgICAgICAgICAgLy8gZ2V0dGVyIHdpdGggY2JcclxuICAgICAgICAgICAgZ2V0dGVyID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FsbChzb3VyY2UsIFdBVENIRVJfR0VUVEVSKTsgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIG5vIGNiIC0+IHNpbXBsZSBlZmZlY3RcclxuICAgICAgICAgICAgZ2V0dGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLl9pc0Rlc3Ryb3llZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjbGVhbnVwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYW51cCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGwoc291cmNlLCBXQVRDSEVSLCBbb25DbGVhbnVwXSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZ2V0dGVyID0gbm9vcDtcclxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm5JbnZhbGlkU291cmNlKHNvdXJjZSk7XHJcbiAgICB9XHJcbiAgICBpZiAoY2IgJiYgZGVlcCkge1xyXG4gICAgICAgIHZhciBiYXNlR2V0dGVyXzEgPSBnZXR0ZXI7XHJcbiAgICAgICAgZ2V0dGVyID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJhdmVyc2UoYmFzZUdldHRlcl8xKCkpOyB9O1xyXG4gICAgfVxyXG4gICAgdmFyIGNsZWFudXA7XHJcbiAgICB2YXIgb25DbGVhbnVwID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICAgICAgY2xlYW51cCA9IHdhdGNoZXIub25TdG9wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjYWxsKGZuLCBXQVRDSEVSX0NMRUFOVVApO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgLy8gaW4gU1NSIHRoZXJlIGlzIG5vIG5lZWQgdG8gc2V0dXAgYW4gYWN0dWFsIGVmZmVjdCwgYW5kIGl0IHNob3VsZCBiZSBub29wXHJcbiAgICAvLyB1bmxlc3MgaXQncyBlYWdlclxyXG4gICAgaWYgKGlzU2VydmVyUmVuZGVyaW5nKCkpIHtcclxuICAgICAgICAvLyB3ZSB3aWxsIGFsc28gbm90IGNhbGwgdGhlIGludmFsaWRhdGUgY2FsbGJhY2sgKCsgcnVubmVyIGlzIG5vdCBzZXQgdXApXHJcbiAgICAgICAgb25DbGVhbnVwID0gbm9vcDtcclxuICAgICAgICBpZiAoIWNiKSB7XHJcbiAgICAgICAgICAgIGdldHRlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpbW1lZGlhdGUpIHtcclxuICAgICAgICAgICAgY2FsbChjYiwgV0FUQ0hFUl9DQiwgW1xyXG4gICAgICAgICAgICAgICAgZ2V0dGVyKCksXHJcbiAgICAgICAgICAgICAgICBpc011bHRpU291cmNlID8gW10gOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBvbkNsZWFudXBcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBub29wO1xyXG4gICAgfVxyXG4gICAgdmFyIHdhdGNoZXIgPSBuZXcgV2F0Y2hlcihjdXJyZW50SW5zdGFuY2UsIGdldHRlciwgbm9vcCwge1xyXG4gICAgICAgIGxhenk6IHRydWVcclxuICAgIH0pO1xyXG4gICAgd2F0Y2hlci5ub1JlY3Vyc2UgPSAhY2I7XHJcbiAgICB2YXIgb2xkVmFsdWUgPSBpc011bHRpU291cmNlID8gW10gOiBJTklUSUFMX1dBVENIRVJfVkFMVUU7XHJcbiAgICAvLyBvdmVyd3JpdGUgZGVmYXVsdCBydW5cclxuICAgIHdhdGNoZXIucnVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghd2F0Y2hlci5hY3RpdmUgJiZcclxuICAgICAgICAgICAgIShmbHVzaCA9PT0gJ3ByZScgJiYgaW5zdGFuY2UgJiYgaW5zdGFuY2UuX2lzQmVpbmdEZXN0cm95ZWQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNiKSB7XHJcbiAgICAgICAgICAgIC8vIHdhdGNoKHNvdXJjZSwgY2IpXHJcbiAgICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IHdhdGNoZXIuZ2V0KCk7XHJcbiAgICAgICAgICAgIGlmIChkZWVwIHx8XHJcbiAgICAgICAgICAgICAgICBmb3JjZVRyaWdnZXIgfHxcclxuICAgICAgICAgICAgICAgIChpc011bHRpU291cmNlXHJcbiAgICAgICAgICAgICAgICAgICAgPyBuZXdWYWx1ZS5zb21lKGZ1bmN0aW9uICh2LCBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoYXNDaGFuZ2VkKHYsIG9sZFZhbHVlW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIDogaGFzQ2hhbmdlZChuZXdWYWx1ZSwgb2xkVmFsdWUpKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gY2xlYW51cCBiZWZvcmUgcnVubmluZyBjYiBhZ2FpblxyXG4gICAgICAgICAgICAgICAgaWYgKGNsZWFudXApIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhbnVwKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYWxsKGNiLCBXQVRDSEVSX0NCLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcGFzcyB1bmRlZmluZWQgYXMgdGhlIG9sZCB2YWx1ZSB3aGVuIGl0J3MgY2hhbmdlZCBmb3IgdGhlIGZpcnN0IHRpbWVcclxuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZSA9PT0gSU5JVElBTF9XQVRDSEVSX1ZBTFVFID8gdW5kZWZpbmVkIDogb2xkVmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGVhbnVwXHJcbiAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHdhdGNoRWZmZWN0XHJcbiAgICAgICAgICAgIHdhdGNoZXIuZ2V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGlmIChmbHVzaCA9PT0gJ3N5bmMnKSB7XHJcbiAgICAgICAgd2F0Y2hlci51cGRhdGUgPSB3YXRjaGVyLnJ1bjtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGZsdXNoID09PSAncG9zdCcpIHtcclxuICAgICAgICB3YXRjaGVyLmlkID0gSW5maW5pdHk7XHJcbiAgICAgICAgd2F0Y2hlci51cGRhdGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBxdWV1ZVdhdGNoZXIod2F0Y2hlcik7IH07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBwcmVcclxuICAgICAgICB3YXRjaGVyLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlID09PSBjdXJyZW50SW5zdGFuY2UgJiYgIWluc3RhbmNlLl9pc01vdW50ZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIHByZS13YXRjaGVyIHRyaWdnZXJlZCBiZWZvcmVcclxuICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBpbnN0YW5jZS5fcHJlV2F0Y2hlcnMgfHwgKGluc3RhbmNlLl9wcmVXYXRjaGVycyA9IFtdKTtcclxuICAgICAgICAgICAgICAgIGlmIChidWZmZXIuaW5kZXhPZih3YXRjaGVyKSA8IDApXHJcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyLnB1c2god2F0Y2hlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBxdWV1ZVdhdGNoZXIod2F0Y2hlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICB3YXRjaGVyLm9uVHJhY2sgPSBvblRyYWNrO1xyXG4gICAgICAgIHdhdGNoZXIub25UcmlnZ2VyID0gb25UcmlnZ2VyO1xyXG4gICAgfVxyXG4gICAgLy8gaW5pdGlhbCBydW5cclxuICAgIGlmIChjYikge1xyXG4gICAgICAgIGlmIChpbW1lZGlhdGUpIHtcclxuICAgICAgICAgICAgd2F0Y2hlci5ydW4oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG9sZFZhbHVlID0gd2F0Y2hlci5nZXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChmbHVzaCA9PT0gJ3Bvc3QnICYmIGluc3RhbmNlKSB7XHJcbiAgICAgICAgaW5zdGFuY2UuJG9uY2UoJ2hvb2s6bW91bnRlZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHdhdGNoZXIuZ2V0KCk7IH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgd2F0Y2hlci5nZXQoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgd2F0Y2hlci50ZWFyZG93bigpO1xyXG4gICAgfTtcclxufVxuXG52YXIgYWN0aXZlRWZmZWN0U2NvcGU7XHJcbnZhciBFZmZlY3RTY29wZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEVmZmVjdFNjb3BlKGRldGFjaGVkKSB7XHJcbiAgICAgICAgaWYgKGRldGFjaGVkID09PSB2b2lkIDApIHsgZGV0YWNoZWQgPSBmYWxzZTsgfVxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAaW50ZXJuYWxcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmVmZmVjdHMgPSBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAaW50ZXJuYWxcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmNsZWFudXBzID0gW107XHJcbiAgICAgICAgaWYgKCFkZXRhY2hlZCAmJiBhY3RpdmVFZmZlY3RTY29wZSkge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmVudCA9IGFjdGl2ZUVmZmVjdFNjb3BlO1xyXG4gICAgICAgICAgICB0aGlzLmluZGV4ID1cclxuICAgICAgICAgICAgICAgIChhY3RpdmVFZmZlY3RTY29wZS5zY29wZXMgfHwgKGFjdGl2ZUVmZmVjdFNjb3BlLnNjb3BlcyA9IFtdKSkucHVzaCh0aGlzKSAtIDE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgRWZmZWN0U2NvcGUucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIChmbikge1xyXG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSkge1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudEVmZmVjdFNjb3BlID0gYWN0aXZlRWZmZWN0U2NvcGU7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmVFZmZlY3RTY29wZSA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZm4oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgIGFjdGl2ZUVmZmVjdFNjb3BlID0gY3VycmVudEVmZmVjdFNjb3BlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICAgICAgd2FybihcImNhbm5vdCBydW4gYW4gaW5hY3RpdmUgZWZmZWN0IHNjb3BlLlwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBvbiBub24tZGV0YWNoZWQgc2NvcGVzXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgRWZmZWN0U2NvcGUucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGFjdGl2ZUVmZmVjdFNjb3BlID0gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIG9uIG5vbi1kZXRhY2hlZCBzY29wZXNcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBFZmZlY3RTY29wZS5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGFjdGl2ZUVmZmVjdFNjb3BlID0gdGhpcy5wYXJlbnQ7XHJcbiAgICB9O1xyXG4gICAgRWZmZWN0U2NvcGUucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoZnJvbVBhcmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSkge1xyXG4gICAgICAgICAgICB2YXIgaSA9IHZvaWQgMCwgbCA9IHZvaWQgMDtcclxuICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMuZWZmZWN0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWZmZWN0c1tpXS50ZWFyZG93bigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSB0aGlzLmNsZWFudXBzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhbnVwc1tpXSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNjb3Blcykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMuc2NvcGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NvcGVzW2ldLnN0b3AodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gbmVzdGVkIHNjb3BlLCBkZXJlZmVyZW5jZSBmcm9tIHBhcmVudCB0byBhdm9pZCBtZW1vcnkgbGVha3NcclxuICAgICAgICAgICAgaWYgKHRoaXMucGFyZW50ICYmICFmcm9tUGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBvcHRpbWl6ZWQgTygxKSByZW1vdmFsXHJcbiAgICAgICAgICAgICAgICB2YXIgbGFzdCA9IHRoaXMucGFyZW50LnNjb3Blcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgIGlmIChsYXN0ICYmIGxhc3QgIT09IHRoaXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5zY29wZXNbdGhpcy5pbmRleF0gPSBsYXN0O1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3QuaW5kZXggPSB0aGlzLmluZGV4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBFZmZlY3RTY29wZTtcclxufSgpKTtcclxuZnVuY3Rpb24gZWZmZWN0U2NvcGUoZGV0YWNoZWQpIHtcclxuICAgIHJldHVybiBuZXcgRWZmZWN0U2NvcGUoZGV0YWNoZWQpO1xyXG59XHJcbi8qKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIHJlY29yZEVmZmVjdFNjb3BlKGVmZmVjdCwgc2NvcGUpIHtcclxuICAgIGlmIChzY29wZSA9PT0gdm9pZCAwKSB7IHNjb3BlID0gYWN0aXZlRWZmZWN0U2NvcGU7IH1cclxuICAgIGlmIChzY29wZSAmJiBzY29wZS5hY3RpdmUpIHtcclxuICAgICAgICBzY29wZS5lZmZlY3RzLnB1c2goZWZmZWN0KTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXRDdXJyZW50U2NvcGUoKSB7XHJcbiAgICByZXR1cm4gYWN0aXZlRWZmZWN0U2NvcGU7XHJcbn1cclxuZnVuY3Rpb24gb25TY29wZURpc3Bvc2UoZm4pIHtcclxuICAgIGlmIChhY3RpdmVFZmZlY3RTY29wZSkge1xyXG4gICAgICAgIGFjdGl2ZUVmZmVjdFNjb3BlLmNsZWFudXBzLnB1c2goZm4pO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgIHdhcm4oXCJvblNjb3BlRGlzcG9zZSgpIGlzIGNhbGxlZCB3aGVuIHRoZXJlIGlzIG5vIGFjdGl2ZSBlZmZlY3Qgc2NvcGVcIiArXHJcbiAgICAgICAgICAgIFwiIHRvIGJlIGFzc29jaWF0ZWQgd2l0aC5cIik7XHJcbiAgICB9XHJcbn1cblxuZnVuY3Rpb24gcHJvdmlkZShrZXksIHZhbHVlKSB7XHJcbiAgICBpZiAoIWN1cnJlbnRJbnN0YW5jZSkge1xyXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHdhcm4oXCJwcm92aWRlKCkgY2FuIG9ubHkgYmUgdXNlZCBpbnNpZGUgc2V0dXAoKS5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmFyIHByb3ZpZGVzID0gY3VycmVudEluc3RhbmNlLl9wcm92aWRlZDtcclxuICAgICAgICAvLyBieSBkZWZhdWx0IGFuIGluc3RhbmNlIGluaGVyaXRzIGl0cyBwYXJlbnQncyBwcm92aWRlcyBvYmplY3RcclxuICAgICAgICAvLyBidXQgd2hlbiBpdCBuZWVkcyB0byBwcm92aWRlIHZhbHVlcyBvZiBpdHMgb3duLCBpdCBjcmVhdGVzIGl0c1xyXG4gICAgICAgIC8vIG93biBwcm92aWRlcyBvYmplY3QgdXNpbmcgcGFyZW50IHByb3ZpZGVzIG9iamVjdCBhcyBwcm90b3R5cGUuXHJcbiAgICAgICAgLy8gdGhpcyB3YXkgaW4gYGluamVjdGAgd2UgY2FuIHNpbXBseSBsb29rIHVwIGluamVjdGlvbnMgZnJvbSBkaXJlY3RcclxuICAgICAgICAvLyBwYXJlbnQgYW5kIGxldCB0aGUgcHJvdG90eXBlIGNoYWluIGRvIHRoZSB3b3JrLlxyXG4gICAgICAgIHZhciBwYXJlbnRQcm92aWRlcyA9IGN1cnJlbnRJbnN0YW5jZS4kcGFyZW50ICYmIGN1cnJlbnRJbnN0YW5jZS4kcGFyZW50Ll9wcm92aWRlZDtcclxuICAgICAgICBpZiAocGFyZW50UHJvdmlkZXMgPT09IHByb3ZpZGVzKSB7XHJcbiAgICAgICAgICAgIHByb3ZpZGVzID0gY3VycmVudEluc3RhbmNlLl9wcm92aWRlZCA9IE9iamVjdC5jcmVhdGUocGFyZW50UHJvdmlkZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUUyBkb2Vzbid0IGFsbG93IHN5bWJvbCBhcyBpbmRleCB0eXBlXHJcbiAgICAgICAgcHJvdmlkZXNba2V5XSA9IHZhbHVlO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGluamVjdChrZXksIGRlZmF1bHRWYWx1ZSwgdHJlYXREZWZhdWx0QXNGYWN0b3J5KSB7XHJcbiAgICBpZiAodHJlYXREZWZhdWx0QXNGYWN0b3J5ID09PSB2b2lkIDApIHsgdHJlYXREZWZhdWx0QXNGYWN0b3J5ID0gZmFsc2U7IH1cclxuICAgIC8vIGZhbGxiYWNrIHRvIGBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2VgIHNvIHRoYXQgdGhpcyBjYW4gYmUgY2FsbGVkIGluXHJcbiAgICAvLyBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XHJcbiAgICB2YXIgaW5zdGFuY2UgPSBjdXJyZW50SW5zdGFuY2U7XHJcbiAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICAvLyAjMjQwMFxyXG4gICAgICAgIC8vIHRvIHN1cHBvcnQgYGFwcC51c2VgIHBsdWdpbnMsXHJcbiAgICAgICAgLy8gZmFsbGJhY2sgdG8gYXBwQ29udGV4dCdzIGBwcm92aWRlc2AgaWYgdGhlIGluc3RhbmNlIGlzIGF0IHJvb3RcclxuICAgICAgICB2YXIgcHJvdmlkZXMgPSBpbnN0YW5jZS4kcGFyZW50ICYmIGluc3RhbmNlLiRwYXJlbnQuX3Byb3ZpZGVkO1xyXG4gICAgICAgIGlmIChwcm92aWRlcyAmJiBrZXkgaW4gcHJvdmlkZXMpIHtcclxuICAgICAgICAgICAgLy8gVFMgZG9lc24ndCBhbGxvdyBzeW1ib2wgYXMgaW5kZXggdHlwZVxyXG4gICAgICAgICAgICByZXR1cm4gcHJvdmlkZXNba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRyZWF0RGVmYXVsdEFzRmFjdG9yeSAmJiBpc0Z1bmN0aW9uKGRlZmF1bHRWYWx1ZSlcclxuICAgICAgICAgICAgICAgID8gZGVmYXVsdFZhbHVlLmNhbGwoaW5zdGFuY2UpXHJcbiAgICAgICAgICAgICAgICA6IGRlZmF1bHRWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgICAgICB3YXJuKFwiaW5qZWN0aW9uIFxcXCJcIi5jb25jYXQoU3RyaW5nKGtleSksIFwiXFxcIiBub3QgZm91bmQuXCIpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgICAgd2FybihcImluamVjdCgpIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHNldHVwKCkgb3IgZnVuY3Rpb25hbCBjb21wb25lbnRzLlwiKTtcclxuICAgIH1cclxufVxuXG52YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgIHZhciBwYXNzaXZlID0gbmFtZS5jaGFyQXQoMCkgPT09ICcmJztcclxuICAgIG5hbWUgPSBwYXNzaXZlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XHJcbiAgICB2YXIgb25jZSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcclxuICAgIG5hbWUgPSBvbmNlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XHJcbiAgICB2YXIgY2FwdHVyZSA9IG5hbWUuY2hhckF0KDApID09PSAnISc7XHJcbiAgICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgIG9uY2U6IG9uY2UsXHJcbiAgICAgICAgY2FwdHVyZTogY2FwdHVyZSxcclxuICAgICAgICBwYXNzaXZlOiBwYXNzaXZlXHJcbiAgICB9O1xyXG59KTtcclxuZnVuY3Rpb24gY3JlYXRlRm5JbnZva2VyKGZucywgdm0pIHtcclxuICAgIGZ1bmN0aW9uIGludm9rZXIoKSB7XHJcbiAgICAgICAgdmFyIGZucyA9IGludm9rZXIuZm5zO1xyXG4gICAgICAgIGlmIChpc0FycmF5KGZucykpIHtcclxuICAgICAgICAgICAgdmFyIGNsb25lZCA9IGZucy5zbGljZSgpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lZC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2xvbmVkW2ldLCBudWxsLCBhcmd1bWVudHMsIHZtLCBcInYtb24gaGFuZGxlclwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gcmV0dXJuIGhhbmRsZXIgcmV0dXJuIHZhbHVlIGZvciBzaW5nbGUgaGFuZGxlcnNcclxuICAgICAgICAgICAgcmV0dXJuIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGZucywgbnVsbCwgYXJndW1lbnRzLCB2bSwgXCJ2LW9uIGhhbmRsZXJcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaW52b2tlci5mbnMgPSBmbnM7XHJcbiAgICByZXR1cm4gaW52b2tlcjtcclxufVxyXG5mdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMob24sIG9sZE9uLCBhZGQsIHJlbW92ZSwgY3JlYXRlT25jZUhhbmRsZXIsIHZtKSB7XHJcbiAgICB2YXIgbmFtZSwgY3VyLCBvbGQsIGV2ZW50O1xyXG4gICAgZm9yIChuYW1lIGluIG9uKSB7XHJcbiAgICAgICAgY3VyID0gb25bbmFtZV07XHJcbiAgICAgICAgb2xkID0gb2xkT25bbmFtZV07XHJcbiAgICAgICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcclxuICAgICAgICBpZiAoaXNVbmRlZihjdXIpKSB7XHJcbiAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcclxuICAgICAgICAgICAgICAgIHdhcm4oXCJJbnZhbGlkIGhhbmRsZXIgZm9yIGV2ZW50IFxcXCJcIi5jb25jYXQoZXZlbnQubmFtZSwgXCJcXFwiOiBnb3QgXCIpICsgU3RyaW5nKGN1ciksIHZtKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaXNVbmRlZihvbGQpKSB7XHJcbiAgICAgICAgICAgIGlmIChpc1VuZGVmKGN1ci5mbnMpKSB7XHJcbiAgICAgICAgICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZUZuSW52b2tlcihjdXIsIHZtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaXNUcnVlKGV2ZW50Lm9uY2UpKSB7XHJcbiAgICAgICAgICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZU9uY2VIYW5kbGVyKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQuY2FwdHVyZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYWRkKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQuY2FwdHVyZSwgZXZlbnQucGFzc2l2ZSwgZXZlbnQucGFyYW1zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoY3VyICE9PSBvbGQpIHtcclxuICAgICAgICAgICAgb2xkLmZucyA9IGN1cjtcclxuICAgICAgICAgICAgb25bbmFtZV0gPSBvbGQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yIChuYW1lIGluIG9sZE9uKSB7XHJcbiAgICAgICAgaWYgKGlzVW5kZWYob25bbmFtZV0pKSB7XHJcbiAgICAgICAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XHJcbiAgICAgICAgICAgIHJlbW92ZShldmVudC5uYW1lLCBvbGRPbltuYW1lXSwgZXZlbnQuY2FwdHVyZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbmZ1bmN0aW9uIG1lcmdlVk5vZGVIb29rKGRlZiwgaG9va0tleSwgaG9vaykge1xyXG4gICAgaWYgKGRlZiBpbnN0YW5jZW9mIFZOb2RlKSB7XHJcbiAgICAgICAgZGVmID0gZGVmLmRhdGEuaG9vayB8fCAoZGVmLmRhdGEuaG9vayA9IHt9KTtcclxuICAgIH1cclxuICAgIHZhciBpbnZva2VyO1xyXG4gICAgdmFyIG9sZEhvb2sgPSBkZWZbaG9va0tleV07XHJcbiAgICBmdW5jdGlvbiB3cmFwcGVkSG9vaygpIHtcclxuICAgICAgICBob29rLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgLy8gaW1wb3J0YW50OiByZW1vdmUgbWVyZ2VkIGhvb2sgdG8gZW5zdXJlIGl0J3MgY2FsbGVkIG9ubHkgb25jZVxyXG4gICAgICAgIC8vIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrXHJcbiAgICAgICAgcmVtb3ZlJDIoaW52b2tlci5mbnMsIHdyYXBwZWRIb29rKTtcclxuICAgIH1cclxuICAgIGlmIChpc1VuZGVmKG9sZEhvb2spKSB7XHJcbiAgICAgICAgLy8gbm8gZXhpc3RpbmcgaG9va1xyXG4gICAgICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW3dyYXBwZWRIb29rXSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICBpZiAoaXNEZWYob2xkSG9vay5mbnMpICYmIGlzVHJ1ZShvbGRIb29rLm1lcmdlZCkpIHtcclxuICAgICAgICAgICAgLy8gYWxyZWFkeSBhIG1lcmdlZCBpbnZva2VyXHJcbiAgICAgICAgICAgIGludm9rZXIgPSBvbGRIb29rO1xyXG4gICAgICAgICAgICBpbnZva2VyLmZucy5wdXNoKHdyYXBwZWRIb29rKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGV4aXN0aW5nIHBsYWluIGhvb2tcclxuICAgICAgICAgICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbb2xkSG9vaywgd3JhcHBlZEhvb2tdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpbnZva2VyLm1lcmdlZCA9IHRydWU7XHJcbiAgICBkZWZbaG9va0tleV0gPSBpbnZva2VyO1xyXG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEoZGF0YSwgQ3RvciwgdGFnKSB7XHJcbiAgICAvLyB3ZSBhcmUgb25seSBleHRyYWN0aW5nIHJhdyB2YWx1ZXMgaGVyZS5cclxuICAgIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxyXG4gICAgLy8gY29tcG9uZW50IGl0c2VsZi5cclxuICAgIHZhciBwcm9wT3B0aW9ucyA9IEN0b3Iub3B0aW9ucy5wcm9wcztcclxuICAgIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHZhciByZXMgPSB7fTtcclxuICAgIHZhciBhdHRycyA9IGRhdGEuYXR0cnMsIHByb3BzID0gZGF0YS5wcm9wcztcclxuICAgIGlmIChpc0RlZihhdHRycykgfHwgaXNEZWYocHJvcHMpKSB7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcclxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIHZhciBrZXlJbkxvd2VyQ2FzZSA9IGtleS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGtleSAhPT0ga2V5SW5Mb3dlckNhc2UgJiYgYXR0cnMgJiYgaGFzT3duKGF0dHJzLCBrZXlJbkxvd2VyQ2FzZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aXAoXCJQcm9wIFxcXCJcIi5jb25jYXQoa2V5SW5Mb3dlckNhc2UsIFwiXFxcIiBpcyBwYXNzZWQgdG8gY29tcG9uZW50IFwiKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXCIuY29uY2F0KGZvcm1hdENvbXBvbmVudE5hbWUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdGFnIGlzIHN0cmluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWcgfHwgQ3RvciksIFwiLCBidXQgdGhlIGRlY2xhcmVkIHByb3AgbmFtZSBpc1wiKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiIFxcXCJcIi5jb25jYXQoa2V5LCBcIlxcXCIuIFwiKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgY2FtZWxDYXNlZCBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicHJvcHMgbmVlZCB0byB1c2UgdGhlaXIga2ViYWItY2FzZSBlcXVpdmFsZW50cyB3aGVuIHVzaW5nIGluLURPTSBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidGVtcGxhdGVzLiBZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIuY29uY2F0KGFsdEtleSwgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiKS5jb25jYXQoa2V5LCBcIlxcXCIuXCIpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjaGVja1Byb3AocmVzLCBwcm9wcywga2V5LCBhbHRLZXksIHRydWUpIHx8XHJcbiAgICAgICAgICAgICAgICBjaGVja1Byb3AocmVzLCBhdHRycywga2V5LCBhbHRLZXksIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcbmZ1bmN0aW9uIGNoZWNrUHJvcChyZXMsIGhhc2gsIGtleSwgYWx0S2V5LCBwcmVzZXJ2ZSkge1xyXG4gICAgaWYgKGlzRGVmKGhhc2gpKSB7XHJcbiAgICAgICAgaWYgKGhhc093bihoYXNoLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIHJlc1trZXldID0gaGFzaFtrZXldO1xyXG4gICAgICAgICAgICBpZiAoIXByZXNlcnZlKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgaGFzaFtrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChoYXNPd24oaGFzaCwgYWx0S2V5KSkge1xyXG4gICAgICAgICAgICByZXNba2V5XSA9IGhhc2hbYWx0S2V5XTtcclxuICAgICAgICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIGhhc2hbYWx0S2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cblxuLy8gVGhlIHRlbXBsYXRlIGNvbXBpbGVyIGF0dGVtcHRzIHRvIG1pbmltaXplIHRoZSBuZWVkIGZvciBub3JtYWxpemF0aW9uIGJ5XHJcbi8vIHN0YXRpY2FsbHkgYW5hbHl6aW5nIHRoZSB0ZW1wbGF0ZSBhdCBjb21waWxlIHRpbWUuXHJcbi8vXHJcbi8vIEZvciBwbGFpbiBIVE1MIG1hcmt1cCwgbm9ybWFsaXphdGlvbiBjYW4gYmUgY29tcGxldGVseSBza2lwcGVkIGJlY2F1c2UgdGhlXHJcbi8vIGdlbmVyYXRlZCByZW5kZXIgZnVuY3Rpb24gaXMgZ3VhcmFudGVlZCB0byByZXR1cm4gQXJyYXk8Vk5vZGU+LiBUaGVyZSBhcmVcclxuLy8gdHdvIGNhc2VzIHdoZXJlIGV4dHJhIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkOlxyXG4vLyAxLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb21wb25lbnRzIC0gYmVjYXVzZSBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XHJcbi8vIG1heSByZXR1cm4gYW4gQXJyYXkgaW5zdGVhZCBvZiBhIHNpbmdsZSByb290LiBJbiB0aGlzIGNhc2UsIGp1c3QgYSBzaW1wbGVcclxuLy8gbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQgLSBpZiBhbnkgY2hpbGQgaXMgYW4gQXJyYXksIHdlIGZsYXR0ZW4gdGhlIHdob2xlXHJcbi8vIHRoaW5nIHdpdGggQXJyYXkucHJvdG90eXBlLmNvbmNhdC4gSXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvbmx5IDEtbGV2ZWwgZGVlcFxyXG4vLyBiZWNhdXNlIGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhbHJlYWR5IG5vcm1hbGl6ZSB0aGVpciBvd24gY2hpbGRyZW4uXHJcbmZ1bmN0aW9uIHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGlzQXJyYXkoY2hpbGRyZW5baV0pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBjaGlsZHJlbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNoaWxkcmVuO1xyXG59XHJcbi8vIDIuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbnN0cnVjdHMgdGhhdCBhbHdheXMgZ2VuZXJhdGVkIG5lc3RlZCBBcnJheXMsXHJcbi8vIGUuZy4gPHRlbXBsYXRlPiwgPHNsb3Q+LCB2LWZvciwgb3Igd2hlbiB0aGUgY2hpbGRyZW4gaXMgcHJvdmlkZWQgYnkgdXNlclxyXG4vLyB3aXRoIGhhbmQtd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zIC8gSlNYLiBJbiBzdWNoIGNhc2VzIGEgZnVsbCBub3JtYWxpemF0aW9uXHJcbi8vIGlzIG5lZWRlZCB0byBjYXRlciB0byBhbGwgcG9zc2libGUgdHlwZXMgb2YgY2hpbGRyZW4gdmFsdWVzLlxyXG5mdW5jdGlvbiBub3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbikge1xyXG4gICAgcmV0dXJuIGlzUHJpbWl0aXZlKGNoaWxkcmVuKVxyXG4gICAgICAgID8gW2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildXHJcbiAgICAgICAgOiBpc0FycmF5KGNoaWxkcmVuKVxyXG4gICAgICAgICAgICA/IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oY2hpbGRyZW4pXHJcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xyXG59XHJcbmZ1bmN0aW9uIGlzVGV4dE5vZGUobm9kZSkge1xyXG4gICAgcmV0dXJuIGlzRGVmKG5vZGUpICYmIGlzRGVmKG5vZGUudGV4dCkgJiYgaXNGYWxzZShub2RlLmlzQ29tbWVudCk7XHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjaGlsZHJlbiwgbmVzdGVkSW5kZXgpIHtcclxuICAgIHZhciByZXMgPSBbXTtcclxuICAgIHZhciBpLCBjLCBsYXN0SW5kZXgsIGxhc3Q7XHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjID0gY2hpbGRyZW5baV07XHJcbiAgICAgICAgaWYgKGlzVW5kZWYoYykgfHwgdHlwZW9mIGMgPT09ICdib29sZWFuJylcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgbGFzdEluZGV4ID0gcmVzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgbGFzdCA9IHJlc1tsYXN0SW5kZXhdO1xyXG4gICAgICAgIC8vICBuZXN0ZWRcclxuICAgICAgICBpZiAoaXNBcnJheShjKSkge1xyXG4gICAgICAgICAgICBpZiAoYy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBjID0gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjLCBcIlwiLmNvbmNhdChuZXN0ZWRJbmRleCB8fCAnJywgXCJfXCIpLmNvbmNhdChpKSk7XHJcbiAgICAgICAgICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXHJcbiAgICAgICAgICAgICAgICBpZiAoaXNUZXh0Tm9kZShjWzBdKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgY1swXS50ZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICBjLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXMucHVzaC5hcHBseShyZXMsIGMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGlzUHJpbWl0aXZlKGMpKSB7XHJcbiAgICAgICAgICAgIGlmIChpc1RleHROb2RlKGxhc3QpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgU1NSIGh5ZHJhdGlvbiBiZWNhdXNlIHRleHQgbm9kZXMgYXJlXHJcbiAgICAgICAgICAgICAgICAvLyBlc3NlbnRpYWxseSBtZXJnZWQgd2hlbiByZW5kZXJlZCB0byBIVE1MIHN0cmluZ3NcclxuICAgICAgICAgICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGMgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb252ZXJ0IHByaW1pdGl2ZSB0byB2bm9kZVxyXG4gICAgICAgICAgICAgICAgcmVzLnB1c2goY3JlYXRlVGV4dFZOb2RlKGMpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGlzVGV4dE5vZGUoYykgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xyXG4gICAgICAgICAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xyXG4gICAgICAgICAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYy50ZXh0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQga2V5IGZvciBuZXN0ZWQgYXJyYXkgY2hpbGRyZW4gKGxpa2VseSBnZW5lcmF0ZWQgYnkgdi1mb3IpXHJcbiAgICAgICAgICAgICAgICBpZiAoaXNUcnVlKGNoaWxkcmVuLl9pc1ZMaXN0KSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGlzRGVmKGMudGFnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGlzVW5kZWYoYy5rZXkpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgaXNEZWYobmVzdGVkSW5kZXgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYy5rZXkgPSBcIl9fdmxpc3RcIi5jb25jYXQobmVzdGVkSW5kZXgsIFwiX1wiKS5jb25jYXQoaSwgXCJfX1wiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlcy5wdXNoKGMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufVxuXG4vKipcclxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyB2LWZvciBsaXN0cy5cclxuICovXHJcbmZ1bmN0aW9uIHJlbmRlckxpc3QodmFsLCByZW5kZXIpIHtcclxuICAgIHZhciByZXQgPSBudWxsLCBpLCBsLCBrZXlzLCBrZXk7XHJcbiAgICBpZiAoaXNBcnJheSh2YWwpIHx8IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcmV0ID0gbmV3IEFycmF5KHZhbC5sZW5ndGgpO1xyXG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSB2YWwubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxbaV0sIGkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHZhbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJldFtpXSA9IHJlbmRlcihpICsgMSwgaSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNPYmplY3QodmFsKSkge1xyXG4gICAgICAgIGlmIChoYXNTeW1ib2wgJiYgdmFsW1N5bWJvbC5pdGVyYXRvcl0pIHtcclxuICAgICAgICAgICAgcmV0ID0gW107XHJcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IHZhbFtTeW1ib2wuaXRlcmF0b3JdKCk7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XHJcbiAgICAgICAgICAgIHdoaWxlICghcmVzdWx0LmRvbmUpIHtcclxuICAgICAgICAgICAgICAgIHJldC5wdXNoKHJlbmRlcihyZXN1bHQudmFsdWUsIHJldC5sZW5ndGgpKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XHJcbiAgICAgICAgICAgIHJldCA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAga2V5ID0ga2V5c1tpXTtcclxuICAgICAgICAgICAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxba2V5XSwga2V5LCBpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghaXNEZWYocmV0KSkge1xyXG4gICAgICAgIHJldCA9IFtdO1xyXG4gICAgfVxyXG4gICAgcmV0Ll9pc1ZMaXN0ID0gdHJ1ZTtcclxuICAgIHJldHVybiByZXQ7XHJcbn1cblxuLyoqXHJcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgPHNsb3Q+XHJcbiAqL1xyXG5mdW5jdGlvbiByZW5kZXJTbG90KG5hbWUsIGZhbGxiYWNrUmVuZGVyLCBwcm9wcywgYmluZE9iamVjdCkge1xyXG4gICAgdmFyIHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO1xyXG4gICAgdmFyIG5vZGVzO1xyXG4gICAgaWYgKHNjb3BlZFNsb3RGbikge1xyXG4gICAgICAgIC8vIHNjb3BlZCBzbG90XHJcbiAgICAgICAgcHJvcHMgPSBwcm9wcyB8fCB7fTtcclxuICAgICAgICBpZiAoYmluZE9iamVjdCkge1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNPYmplY3QoYmluZE9iamVjdCkpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oJ3Nsb3Qgdi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3QnLCB0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwcm9wcyA9IGV4dGVuZChleHRlbmQoe30sIGJpbmRPYmplY3QpLCBwcm9wcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5vZGVzID1cclxuICAgICAgICAgICAgc2NvcGVkU2xvdEZuKHByb3BzKSB8fFxyXG4gICAgICAgICAgICAgICAgKGlzRnVuY3Rpb24oZmFsbGJhY2tSZW5kZXIpID8gZmFsbGJhY2tSZW5kZXIoKSA6IGZhbGxiYWNrUmVuZGVyKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIG5vZGVzID1cclxuICAgICAgICAgICAgdGhpcy4kc2xvdHNbbmFtZV0gfHxcclxuICAgICAgICAgICAgICAgIChpc0Z1bmN0aW9uKGZhbGxiYWNrUmVuZGVyKSA/IGZhbGxiYWNrUmVuZGVyKCkgOiBmYWxsYmFja1JlbmRlcik7XHJcbiAgICB9XHJcbiAgICB2YXIgdGFyZ2V0ID0gcHJvcHMgJiYgcHJvcHMuc2xvdDtcclxuICAgIGlmICh0YXJnZXQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnLCB7IHNsb3Q6IHRhcmdldCB9LCBub2Rlcyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gbm9kZXM7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgZmlsdGVyc1xyXG4gKi9cclxuZnVuY3Rpb24gcmVzb2x2ZUZpbHRlcihpZCkge1xyXG4gICAgcmV0dXJuIHJlc29sdmVBc3NldCh0aGlzLiRvcHRpb25zLCAnZmlsdGVycycsIGlkLCB0cnVlKSB8fCBpZGVudGl0eTtcclxufVxuXG5mdW5jdGlvbiBpc0tleU5vdE1hdGNoKGV4cGVjdCwgYWN0dWFsKSB7XHJcbiAgICBpZiAoaXNBcnJheShleHBlY3QpKSB7XHJcbiAgICAgICAgcmV0dXJuIGV4cGVjdC5pbmRleE9mKGFjdHVhbCkgPT09IC0xO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGV4cGVjdCAhPT0gYWN0dWFsO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgY2hlY2tpbmcga2V5Q29kZXMgZnJvbSBjb25maWcuXHJcbiAqIGV4cG9zZWQgYXMgVnVlLnByb3RvdHlwZS5fa1xyXG4gKiBwYXNzaW5nIGluIGV2ZW50S2V5TmFtZSBhcyBsYXN0IGFyZ3VtZW50IHNlcGFyYXRlbHkgZm9yIGJhY2t3YXJkcyBjb21wYXRcclxuICovXHJcbmZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMoZXZlbnRLZXlDb2RlLCBrZXksIGJ1aWx0SW5LZXlDb2RlLCBldmVudEtleU5hbWUsIGJ1aWx0SW5LZXlOYW1lKSB7XHJcbiAgICB2YXIgbWFwcGVkS2V5Q29kZSA9IGNvbmZpZy5rZXlDb2Rlc1trZXldIHx8IGJ1aWx0SW5LZXlDb2RlO1xyXG4gICAgaWYgKGJ1aWx0SW5LZXlOYW1lICYmIGV2ZW50S2V5TmFtZSAmJiAhY29uZmlnLmtleUNvZGVzW2tleV0pIHtcclxuICAgICAgICByZXR1cm4gaXNLZXlOb3RNYXRjaChidWlsdEluS2V5TmFtZSwgZXZlbnRLZXlOYW1lKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKG1hcHBlZEtleUNvZGUpIHtcclxuICAgICAgICByZXR1cm4gaXNLZXlOb3RNYXRjaChtYXBwZWRLZXlDb2RlLCBldmVudEtleUNvZGUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZXZlbnRLZXlOYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIGh5cGhlbmF0ZShldmVudEtleU5hbWUpICE9PSBrZXk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZXZlbnRLZXlDb2RlID09PSB1bmRlZmluZWQ7XHJcbn1cblxuLyoqXHJcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBtZXJnaW5nIHYtYmluZD1cIm9iamVjdFwiIGludG8gYSBWTm9kZSdzIGRhdGEuXHJcbiAqL1xyXG5mdW5jdGlvbiBiaW5kT2JqZWN0UHJvcHMoZGF0YSwgdGFnLCB2YWx1ZSwgYXNQcm9wLCBpc1N5bmMpIHtcclxuICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcclxuICAgICAgICAgICAgICAgIHdhcm4oJ3YtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IG9yIEFycmF5IHZhbHVlJywgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gdG9PYmplY3QodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBoYXNoID0gdm9pZCAwO1xyXG4gICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChrZXkgPT09ICdjbGFzcycgfHwga2V5ID09PSAnc3R5bGUnIHx8IGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc2ggPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMudHlwZTtcclxuICAgICAgICAgICAgICAgICAgICBoYXNoID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYXNQcm9wIHx8IGNvbmZpZy5tdXN0VXNlUHJvcCh0YWcsIHR5cGUsIGtleSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZGF0YS5kb21Qcm9wcyB8fCAoZGF0YS5kb21Qcm9wcyA9IHt9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGNhbWVsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCEoY2FtZWxpemVkS2V5IGluIGhhc2gpICYmICEoaHlwaGVuYXRlZEtleSBpbiBoYXNoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc2hba2V5XSA9IHZhbHVlW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzU3luYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbltcInVwZGF0ZTpcIi5jb25jYXQoa2V5KV0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVtrZXldID0gJGV2ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBfbG9vcF8xKGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGF0YTtcclxufVxuXG4vKipcclxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyBzdGF0aWMgdHJlZXMuXHJcbiAqL1xyXG5mdW5jdGlvbiByZW5kZXJTdGF0aWMoaW5kZXgsIGlzSW5Gb3IpIHtcclxuICAgIHZhciBjYWNoZWQgPSB0aGlzLl9zdGF0aWNUcmVlcyB8fCAodGhpcy5fc3RhdGljVHJlZXMgPSBbXSk7XHJcbiAgICB2YXIgdHJlZSA9IGNhY2hlZFtpbmRleF07XHJcbiAgICAvLyBpZiBoYXMgYWxyZWFkeS1yZW5kZXJlZCBzdGF0aWMgdHJlZSBhbmQgbm90IGluc2lkZSB2LWZvcixcclxuICAgIC8vIHdlIGNhbiByZXVzZSB0aGUgc2FtZSB0cmVlLlxyXG4gICAgaWYgKHRyZWUgJiYgIWlzSW5Gb3IpIHtcclxuICAgICAgICByZXR1cm4gdHJlZTtcclxuICAgIH1cclxuICAgIC8vIG90aGVyd2lzZSwgcmVuZGVyIGEgZnJlc2ggdHJlZS5cclxuICAgIHRyZWUgPSBjYWNoZWRbaW5kZXhdID0gdGhpcy4kb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNbaW5kZXhdLmNhbGwodGhpcy5fcmVuZGVyUHJveHksIHRoaXMuX2MsIHRoaXMgLy8gZm9yIHJlbmRlciBmbnMgZ2VuZXJhdGVkIGZvciBmdW5jdGlvbmFsIGNvbXBvbmVudCB0ZW1wbGF0ZXNcclxuICAgICk7XHJcbiAgICBtYXJrU3RhdGljKHRyZWUsIFwiX19zdGF0aWNfX1wiLmNvbmNhdChpbmRleCksIGZhbHNlKTtcclxuICAgIHJldHVybiB0cmVlO1xyXG59XHJcbi8qKlxyXG4gKiBSdW50aW1lIGhlbHBlciBmb3Igdi1vbmNlLlxyXG4gKiBFZmZlY3RpdmVseSBpdCBtZWFucyBtYXJraW5nIHRoZSBub2RlIGFzIHN0YXRpYyB3aXRoIGEgdW5pcXVlIGtleS5cclxuICovXHJcbmZ1bmN0aW9uIG1hcmtPbmNlKHRyZWUsIGluZGV4LCBrZXkpIHtcclxuICAgIG1hcmtTdGF0aWModHJlZSwgXCJfX29uY2VfX1wiLmNvbmNhdChpbmRleCkuY29uY2F0KGtleSA/IFwiX1wiLmNvbmNhdChrZXkpIDogXCJcIiksIHRydWUpO1xyXG4gICAgcmV0dXJuIHRyZWU7XHJcbn1cclxuZnVuY3Rpb24gbWFya1N0YXRpYyh0cmVlLCBrZXksIGlzT25jZSkge1xyXG4gICAgaWYgKGlzQXJyYXkodHJlZSkpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyZWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRyZWVbaV0gJiYgdHlwZW9mIHRyZWVbaV0gIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBtYXJrU3RhdGljTm9kZSh0cmVlW2ldLCBcIlwiLmNvbmNhdChrZXksIFwiX1wiKS5jb25jYXQoaSksIGlzT25jZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBtYXJrU3RhdGljTm9kZSh0cmVlLCBrZXksIGlzT25jZSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gbWFya1N0YXRpY05vZGUobm9kZSwga2V5LCBpc09uY2UpIHtcclxuICAgIG5vZGUuaXNTdGF0aWMgPSB0cnVlO1xyXG4gICAgbm9kZS5rZXkgPSBrZXk7XHJcbiAgICBub2RlLmlzT25jZSA9IGlzT25jZTtcclxufVxuXG5mdW5jdGlvbiBiaW5kT2JqZWN0TGlzdGVuZXJzKGRhdGEsIHZhbHVlKSB7XHJcbiAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2Fybigndi1vbiB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IHZhbHVlJywgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgb24gPSAoZGF0YS5vbiA9IGRhdGEub24gPyBleHRlbmQoe30sIGRhdGEub24pIDoge30pO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBleGlzdGluZyA9IG9uW2tleV07XHJcbiAgICAgICAgICAgICAgICB2YXIgb3VycyA9IHZhbHVlW2tleV07XHJcbiAgICAgICAgICAgICAgICBvbltrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIG91cnMpIDogb3VycztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBkYXRhO1xyXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVTY29wZWRTbG90cyhmbnMsIHJlcywgXHJcbi8vIHRoZSBmb2xsb3dpbmcgYXJlIGFkZGVkIGluIDIuNlxyXG5oYXNEeW5hbWljS2V5cywgY29udGVudEhhc2hLZXkpIHtcclxuICAgIHJlcyA9IHJlcyB8fCB7ICRzdGFibGU6ICFoYXNEeW5hbWljS2V5cyB9O1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgc2xvdCA9IGZuc1tpXTtcclxuICAgICAgICBpZiAoaXNBcnJheShzbG90KSkge1xyXG4gICAgICAgICAgICByZXNvbHZlU2NvcGVkU2xvdHMoc2xvdCwgcmVzLCBoYXNEeW5hbWljS2V5cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHNsb3QpIHtcclxuICAgICAgICAgICAgLy8gbWFya2VyIGZvciByZXZlcnNlIHByb3h5aW5nIHYtc2xvdCB3aXRob3V0IHNjb3BlIG9uIHRoaXMuJHNsb3RzXHJcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcclxuICAgICAgICAgICAgaWYgKHNsb3QucHJveHkpIHtcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcclxuICAgICAgICAgICAgICAgIHNsb3QuZm4ucHJveHkgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc1tzbG90LmtleV0gPSBzbG90LmZuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChjb250ZW50SGFzaEtleSkge1xyXG4gICAgICAgIHJlcy4ka2V5ID0gY29udGVudEhhc2hLZXk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XG5cbi8vIGhlbHBlciB0byBwcm9jZXNzIGR5bmFtaWMga2V5cyBmb3IgZHluYW1pYyBhcmd1bWVudHMgaW4gdi1iaW5kIGFuZCB2LW9uLlxyXG5mdW5jdGlvbiBiaW5kRHluYW1pY0tleXMoYmFzZU9iaiwgdmFsdWVzKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkgKz0gMikge1xyXG4gICAgICAgIHZhciBrZXkgPSB2YWx1ZXNbaV07XHJcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleSkge1xyXG4gICAgICAgICAgICBiYXNlT2JqW3ZhbHVlc1tpXV0gPSB2YWx1ZXNbaSArIDFdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGtleSAhPT0gJycgJiYga2V5ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIG51bGwgaXMgYSBzcGVjaWFsIHZhbHVlIGZvciBleHBsaWNpdGx5IHJlbW92aW5nIGEgYmluZGluZ1xyXG4gICAgICAgICAgICB3YXJuKFwiSW52YWxpZCB2YWx1ZSBmb3IgZHluYW1pYyBkaXJlY3RpdmUgYXJndW1lbnQgKGV4cGVjdGVkIHN0cmluZyBvciBudWxsKTogXCIuY29uY2F0KGtleSksIHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBiYXNlT2JqO1xyXG59XHJcbi8vIGhlbHBlciB0byBkeW5hbWljYWxseSBhcHBlbmQgbW9kaWZpZXIgcnVudGltZSBtYXJrZXJzIHRvIGV2ZW50IG5hbWVzLlxyXG4vLyBlbnN1cmUgb25seSBhcHBlbmQgd2hlbiB2YWx1ZSBpcyBhbHJlYWR5IHN0cmluZywgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgY2FzdFxyXG4vLyB0byBzdHJpbmcgYW5kIGNhdXNlIHRoZSB0eXBlIGNoZWNrIHRvIG1pc3MuXHJcbmZ1bmN0aW9uIHByZXBlbmRNb2RpZmllcih2YWx1ZSwgc3ltYm9sKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHN5bWJvbCArIHZhbHVlIDogdmFsdWU7XHJcbn1cblxuZnVuY3Rpb24gaW5zdGFsbFJlbmRlckhlbHBlcnModGFyZ2V0KSB7XHJcbiAgICB0YXJnZXQuX28gPSBtYXJrT25jZTtcclxuICAgIHRhcmdldC5fbiA9IHRvTnVtYmVyO1xyXG4gICAgdGFyZ2V0Ll9zID0gdG9TdHJpbmc7XHJcbiAgICB0YXJnZXQuX2wgPSByZW5kZXJMaXN0O1xyXG4gICAgdGFyZ2V0Ll90ID0gcmVuZGVyU2xvdDtcclxuICAgIHRhcmdldC5fcSA9IGxvb3NlRXF1YWw7XHJcbiAgICB0YXJnZXQuX2kgPSBsb29zZUluZGV4T2Y7XHJcbiAgICB0YXJnZXQuX20gPSByZW5kZXJTdGF0aWM7XHJcbiAgICB0YXJnZXQuX2YgPSByZXNvbHZlRmlsdGVyO1xyXG4gICAgdGFyZ2V0Ll9rID0gY2hlY2tLZXlDb2RlcztcclxuICAgIHRhcmdldC5fYiA9IGJpbmRPYmplY3RQcm9wcztcclxuICAgIHRhcmdldC5fdiA9IGNyZWF0ZVRleHRWTm9kZTtcclxuICAgIHRhcmdldC5fZSA9IGNyZWF0ZUVtcHR5Vk5vZGU7XHJcbiAgICB0YXJnZXQuX3UgPSByZXNvbHZlU2NvcGVkU2xvdHM7XHJcbiAgICB0YXJnZXQuX2cgPSBiaW5kT2JqZWN0TGlzdGVuZXJzO1xyXG4gICAgdGFyZ2V0Ll9kID0gYmluZER5bmFtaWNLZXlzO1xyXG4gICAgdGFyZ2V0Ll9wID0gcHJlcGVuZE1vZGlmaWVyO1xyXG59XG5cbi8qKlxyXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIHJhdyBjaGlsZHJlbiBWTm9kZXMgaW50byBhIHNsb3Qgb2JqZWN0LlxyXG4gKi9cclxuZnVuY3Rpb24gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBjb250ZXh0KSB7XHJcbiAgICBpZiAoIWNoaWxkcmVuIHx8ICFjaGlsZHJlbi5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4ge307XHJcbiAgICB9XHJcbiAgICB2YXIgc2xvdHMgPSB7fTtcclxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XHJcbiAgICAgICAgdmFyIGRhdGEgPSBjaGlsZC5kYXRhO1xyXG4gICAgICAgIC8vIHJlbW92ZSBzbG90IGF0dHJpYnV0ZSBpZiB0aGUgbm9kZSBpcyByZXNvbHZlZCBhcyBhIFZ1ZSBzbG90IG5vZGVcclxuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMuc2xvdCkge1xyXG4gICAgICAgICAgICBkZWxldGUgZGF0YS5hdHRycy5zbG90O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBuYW1lZCBzbG90cyBzaG91bGQgb25seSBiZSByZXNwZWN0ZWQgaWYgdGhlIHZub2RlIHdhcyByZW5kZXJlZCBpbiB0aGVcclxuICAgICAgICAvLyBzYW1lIGNvbnRleHQuXHJcbiAgICAgICAgaWYgKChjaGlsZC5jb250ZXh0ID09PSBjb250ZXh0IHx8IGNoaWxkLmZuQ29udGV4dCA9PT0gY29udGV4dCkgJiZcclxuICAgICAgICAgICAgZGF0YSAmJlxyXG4gICAgICAgICAgICBkYXRhLnNsb3QgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB2YXIgbmFtZV8xID0gZGF0YS5zbG90O1xyXG4gICAgICAgICAgICB2YXIgc2xvdCA9IHNsb3RzW25hbWVfMV0gfHwgKHNsb3RzW25hbWVfMV0gPSBbXSk7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcclxuICAgICAgICAgICAgICAgIHNsb3QucHVzaC5hcHBseShzbG90LCBjaGlsZC5jaGlsZHJlbiB8fCBbXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzbG90LnB1c2goY2hpbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAoc2xvdHMuZGVmYXVsdCB8fCAoc2xvdHMuZGVmYXVsdCA9IFtdKSkucHVzaChjaGlsZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gaWdub3JlIHNsb3RzIHRoYXQgY29udGFpbnMgb25seSB3aGl0ZXNwYWNlXHJcbiAgICBmb3IgKHZhciBuYW1lXzIgaW4gc2xvdHMpIHtcclxuICAgICAgICBpZiAoc2xvdHNbbmFtZV8yXS5ldmVyeShpc1doaXRlc3BhY2UpKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBzbG90c1tuYW1lXzJdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBzbG90cztcclxufVxyXG5mdW5jdGlvbiBpc1doaXRlc3BhY2Uobm9kZSkge1xyXG4gICAgcmV0dXJuIChub2RlLmlzQ29tbWVudCAmJiAhbm9kZS5hc3luY0ZhY3RvcnkpIHx8IG5vZGUudGV4dCA9PT0gJyAnO1xyXG59XG5cbmZ1bmN0aW9uIGlzQXN5bmNQbGFjZWhvbGRlcihub2RlKSB7XHJcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIG5vdCByZWFsbHkgYm9vbGVhbiB0eXBlXHJcbiAgICByZXR1cm4gbm9kZS5pc0NvbW1lbnQgJiYgbm9kZS5hc3luY0ZhY3Rvcnk7XHJcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdHMob3duZXJWbSwgc2NvcGVkU2xvdHMsIG5vcm1hbFNsb3RzLCBwcmV2U2NvcGVkU2xvdHMpIHtcclxuICAgIHZhciByZXM7XHJcbiAgICB2YXIgaGFzTm9ybWFsU2xvdHMgPSBPYmplY3Qua2V5cyhub3JtYWxTbG90cykubGVuZ3RoID4gMDtcclxuICAgIHZhciBpc1N0YWJsZSA9IHNjb3BlZFNsb3RzID8gISFzY29wZWRTbG90cy4kc3RhYmxlIDogIWhhc05vcm1hbFNsb3RzO1xyXG4gICAgdmFyIGtleSA9IHNjb3BlZFNsb3RzICYmIHNjb3BlZFNsb3RzLiRrZXk7XHJcbiAgICBpZiAoIXNjb3BlZFNsb3RzKSB7XHJcbiAgICAgICAgcmVzID0ge307XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChzY29wZWRTbG90cy5fbm9ybWFsaXplZCkge1xyXG4gICAgICAgIC8vIGZhc3QgcGF0aCAxOiBjaGlsZCBjb21wb25lbnQgcmUtcmVuZGVyIG9ubHksIHBhcmVudCBkaWQgbm90IGNoYW5nZVxyXG4gICAgICAgIHJldHVybiBzY29wZWRTbG90cy5fbm9ybWFsaXplZDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzU3RhYmxlICYmXHJcbiAgICAgICAgcHJldlNjb3BlZFNsb3RzICYmXHJcbiAgICAgICAgcHJldlNjb3BlZFNsb3RzICE9PSBlbXB0eU9iamVjdCAmJlxyXG4gICAgICAgIGtleSA9PT0gcHJldlNjb3BlZFNsb3RzLiRrZXkgJiZcclxuICAgICAgICAhaGFzTm9ybWFsU2xvdHMgJiZcclxuICAgICAgICAhcHJldlNjb3BlZFNsb3RzLiRoYXNOb3JtYWwpIHtcclxuICAgICAgICAvLyBmYXN0IHBhdGggMjogc3RhYmxlIHNjb3BlZCBzbG90cyB3LyBubyBub3JtYWwgc2xvdHMgdG8gcHJveHksXHJcbiAgICAgICAgLy8gb25seSBuZWVkIHRvIG5vcm1hbGl6ZSBvbmNlXHJcbiAgICAgICAgcmV0dXJuIHByZXZTY29wZWRTbG90cztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJlcyA9IHt9O1xyXG4gICAgICAgIGZvciAodmFyIGtleV8xIGluIHNjb3BlZFNsb3RzKSB7XHJcbiAgICAgICAgICAgIGlmIChzY29wZWRTbG90c1trZXlfMV0gJiYga2V5XzFbMF0gIT09ICckJykge1xyXG4gICAgICAgICAgICAgICAgcmVzW2tleV8xXSA9IG5vcm1hbGl6ZVNjb3BlZFNsb3Qob3duZXJWbSwgbm9ybWFsU2xvdHMsIGtleV8xLCBzY29wZWRTbG90c1trZXlfMV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gZXhwb3NlIG5vcm1hbCBzbG90cyBvbiBzY29wZWRTbG90c1xyXG4gICAgZm9yICh2YXIga2V5XzIgaW4gbm9ybWFsU2xvdHMpIHtcclxuICAgICAgICBpZiAoIShrZXlfMiBpbiByZXMpKSB7XHJcbiAgICAgICAgICAgIHJlc1trZXlfMl0gPSBwcm94eU5vcm1hbFNsb3Qobm9ybWFsU2xvdHMsIGtleV8yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBhdm9yaWF6IHNlZW1zIHRvIG1vY2sgYSBub24tZXh0ZW5zaWJsZSAkc2NvcGVkU2xvdHMgb2JqZWN0XHJcbiAgICAvLyBhbmQgd2hlbiB0aGF0IGlzIHBhc3NlZCBkb3duIHRoaXMgd291bGQgY2F1c2UgYW4gZXJyb3JcclxuICAgIGlmIChzY29wZWRTbG90cyAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKHNjb3BlZFNsb3RzKSkge1xyXG4gICAgICAgIHNjb3BlZFNsb3RzLl9ub3JtYWxpemVkID0gcmVzO1xyXG4gICAgfVxyXG4gICAgZGVmKHJlcywgJyRzdGFibGUnLCBpc1N0YWJsZSk7XHJcbiAgICBkZWYocmVzLCAnJGtleScsIGtleSk7XHJcbiAgICBkZWYocmVzLCAnJGhhc05vcm1hbCcsIGhhc05vcm1hbFNsb3RzKTtcclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdCh2bSwgbm9ybWFsU2xvdHMsIGtleSwgZm4pIHtcclxuICAgIHZhciBub3JtYWxpemVkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjdXIgPSBjdXJyZW50SW5zdGFuY2U7XHJcbiAgICAgICAgc2V0Q3VycmVudEluc3RhbmNlKHZtKTtcclxuICAgICAgICB2YXIgcmVzID0gYXJndW1lbnRzLmxlbmd0aCA/IGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cykgOiBmbih7fSk7XHJcbiAgICAgICAgcmVzID1cclxuICAgICAgICAgICAgcmVzICYmIHR5cGVvZiByZXMgPT09ICdvYmplY3QnICYmICFpc0FycmF5KHJlcylcclxuICAgICAgICAgICAgICAgID8gW3Jlc10gLy8gc2luZ2xlIHZub2RlXHJcbiAgICAgICAgICAgICAgICA6IG5vcm1hbGl6ZUNoaWxkcmVuKHJlcyk7XHJcbiAgICAgICAgdmFyIHZub2RlID0gcmVzICYmIHJlc1swXTtcclxuICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2UoY3VyKTtcclxuICAgICAgICByZXR1cm4gcmVzICYmXHJcbiAgICAgICAgICAgICghdm5vZGUgfHxcclxuICAgICAgICAgICAgICAgIChyZXMubGVuZ3RoID09PSAxICYmIHZub2RlLmlzQ29tbWVudCAmJiAhaXNBc3luY1BsYWNlaG9sZGVyKHZub2RlKSkpIC8vICM5NjU4LCAjMTAzOTFcclxuICAgICAgICAgICAgPyB1bmRlZmluZWRcclxuICAgICAgICAgICAgOiByZXM7XHJcbiAgICB9O1xyXG4gICAgLy8gdGhpcyBpcyBhIHNsb3QgdXNpbmcgdGhlIG5ldyB2LXNsb3Qgc3ludGF4IHdpdGhvdXQgc2NvcGUuIGFsdGhvdWdoIGl0IGlzXHJcbiAgICAvLyBjb21waWxlZCBhcyBhIHNjb3BlZCBzbG90LCByZW5kZXIgZm4gdXNlcnMgd291bGQgZXhwZWN0IGl0IHRvIGJlIHByZXNlbnRcclxuICAgIC8vIG9uIHRoaXMuJHNsb3RzIGJlY2F1c2UgdGhlIHVzYWdlIGlzIHNlbWFudGljYWxseSBhIG5vcm1hbCBzbG90LlxyXG4gICAgaWYgKGZuLnByb3h5KSB7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5vcm1hbFNsb3RzLCBrZXksIHtcclxuICAgICAgICAgICAgZ2V0OiBub3JtYWxpemVkLFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBub3JtYWxpemVkO1xyXG59XHJcbmZ1bmN0aW9uIHByb3h5Tm9ybWFsU2xvdChzbG90cywga2V5KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gc2xvdHNba2V5XTsgfTtcclxufVxuXG5mdW5jdGlvbiBpbml0U2V0dXAodm0pIHtcclxuICAgIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XHJcbiAgICB2YXIgc2V0dXAgPSBvcHRpb25zLnNldHVwO1xyXG4gICAgaWYgKHNldHVwKSB7XHJcbiAgICAgICAgdmFyIGN0eCA9ICh2bS5fc2V0dXBDb250ZXh0ID0gY3JlYXRlU2V0dXBDb250ZXh0KHZtKSk7XHJcbiAgICAgICAgc2V0Q3VycmVudEluc3RhbmNlKHZtKTtcclxuICAgICAgICBwdXNoVGFyZ2V0KCk7XHJcbiAgICAgICAgdmFyIHNldHVwUmVzdWx0ID0gaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoc2V0dXAsIG51bGwsIFt2bS5fcHJvcHMgfHwgc2hhbGxvd1JlYWN0aXZlKHt9KSwgY3R4XSwgdm0sIFwic2V0dXBcIik7XHJcbiAgICAgICAgcG9wVGFyZ2V0KCk7XHJcbiAgICAgICAgc2V0Q3VycmVudEluc3RhbmNlKCk7XHJcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oc2V0dXBSZXN1bHQpKSB7XHJcbiAgICAgICAgICAgIC8vIHJlbmRlciBmdW5jdGlvblxyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIG9wdGlvbnMucmVuZGVyID0gc2V0dXBSZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KHNldHVwUmVzdWx0KSkge1xyXG4gICAgICAgICAgICAvLyBiaW5kaW5nc1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzZXR1cFJlc3VsdCBpbnN0YW5jZW9mIFZOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKFwic2V0dXAoKSBzaG91bGQgbm90IHJldHVybiBWTm9kZXMgZGlyZWN0bHkgLSBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJyZXR1cm4gYSByZW5kZXIgZnVuY3Rpb24gaW5zdGVhZC5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdm0uX3NldHVwU3RhdGUgPSBzZXR1cFJlc3VsdDtcclxuICAgICAgICAgICAgLy8gX19zZmMgaW5kaWNhdGVzIGNvbXBpbGVkIGJpbmRpbmdzIGZyb20gPHNjcmlwdCBzZXR1cD5cclxuICAgICAgICAgICAgaWYgKCFzZXR1cFJlc3VsdC5fX3NmYykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHNldHVwUmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1Jlc2VydmVkKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJveHlXaXRoUmVmVW53cmFwKHZtLCBzZXR1cFJlc3VsdCwga2V5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKFwiQXZvaWQgdXNpbmcgdmFyaWFibGVzIHRoYXQgc3RhcnQgd2l0aCBfIG9yICQgaW4gc2V0dXAoKS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gZXhwb3NlZCBmb3IgY29tcGlsZWQgcmVuZGVyIGZuXHJcbiAgICAgICAgICAgICAgICB2YXIgcHJveHkgPSAodm0uX3NldHVwUHJveHkgPSB7fSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gc2V0dXBSZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ICE9PSAnX19zZmMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3h5V2l0aFJlZlVud3JhcChwcm94eSwgc2V0dXBSZXN1bHQsIGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc2V0dXBSZXN1bHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB3YXJuKFwic2V0dXAoKSBzaG91bGQgcmV0dXJuIGFuIG9iamVjdC4gUmVjZWl2ZWQ6IFwiLmNvbmNhdChzZXR1cFJlc3VsdCA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBzZXR1cFJlc3VsdCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjcmVhdGVTZXR1cENvbnRleHQodm0pIHtcclxuICAgIHZhciBleHBvc2VDYWxsZWQgPSBmYWxzZTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZ2V0IGF0dHJzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5pdEF0dHJzUHJveHkodm0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0IHNsb3RzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5pdFNsb3RzUHJveHkodm0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW1pdDogYmluZCh2bS4kZW1pdCwgdm0pLFxyXG4gICAgICAgIGV4cG9zZTogZnVuY3Rpb24gKGV4cG9zZWQpIHtcclxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIGlmIChleHBvc2VDYWxsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKFwiZXhwb3NlKCkgc2hvdWxkIGJlIGNhbGxlZCBvbmx5IG9uY2UgcGVyIHNldHVwKCkuXCIsIHZtKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGV4cG9zZUNhbGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGV4cG9zZWQpIHtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGV4cG9zZWQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm94eVdpdGhSZWZVbndyYXAodm0sIGV4cG9zZWQsIGtleSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaW5pdEF0dHJzUHJveHkodm0pIHtcclxuICAgIGlmICghdm0uX2F0dHJzUHJveHkpIHtcclxuICAgICAgICB2YXIgcHJveHkgPSAodm0uX2F0dHJzUHJveHkgPSB7fSk7XHJcbiAgICAgICAgZGVmKHByb3h5LCAnX3ZfYXR0cl9wcm94eScsIHRydWUpO1xyXG4gICAgICAgIHN5bmNTZXR1cEF0dHJzKHByb3h5LCB2bS4kYXR0cnMsIGVtcHR5T2JqZWN0LCB2bSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdm0uX2F0dHJzUHJveHk7XHJcbn1cclxuZnVuY3Rpb24gc3luY1NldHVwQXR0cnModG8sIGZyb20sIHByZXYsIGluc3RhbmNlKSB7XHJcbiAgICB2YXIgY2hhbmdlZCA9IGZhbHNlO1xyXG4gICAgZm9yICh2YXIga2V5IGluIGZyb20pIHtcclxuICAgICAgICBpZiAoIShrZXkgaW4gdG8pKSB7XHJcbiAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBkZWZpbmVQcm94eUF0dHIodG8sIGtleSwgaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChmcm9tW2tleV0gIT09IHByZXZba2V5XSkge1xyXG4gICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gdG8pIHtcclxuICAgICAgICBpZiAoIShrZXkgaW4gZnJvbSkpIHtcclxuICAgICAgICAgICAgY2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0b1trZXldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjaGFuZ2VkO1xyXG59XHJcbmZ1bmN0aW9uIGRlZmluZVByb3h5QXR0cihwcm94eSwga2V5LCBpbnN0YW5jZSkge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3h5LCBrZXksIHtcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlLiRhdHRyc1trZXldO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGluaXRTbG90c1Byb3h5KHZtKSB7XHJcbiAgICBpZiAoIXZtLl9zbG90c1Byb3h5KSB7XHJcbiAgICAgICAgc3luY1NldHVwU2xvdHMoKHZtLl9zbG90c1Byb3h5ID0ge30pLCB2bS4kc2NvcGVkU2xvdHMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZtLl9zbG90c1Byb3h5O1xyXG59XHJcbmZ1bmN0aW9uIHN5bmNTZXR1cFNsb3RzKHRvLCBmcm9tKSB7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xyXG4gICAgICAgIHRvW2tleV0gPSBmcm9tW2tleV07XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gdG8pIHtcclxuICAgICAgICBpZiAoIShrZXkgaW4gZnJvbSkpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRvW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBAaW50ZXJuYWwgdXNlIG1hbnVhbCB0eXBlIGRlZlxyXG4gKi9cclxuZnVuY3Rpb24gdXNlU2xvdHMoKSB7XHJcbiAgICByZXR1cm4gZ2V0Q29udGV4dCgpLnNsb3RzO1xyXG59XHJcbi8qKlxyXG4gKiBAaW50ZXJuYWwgdXNlIG1hbnVhbCB0eXBlIGRlZlxyXG4gKi9cclxuZnVuY3Rpb24gdXNlQXR0cnMoKSB7XHJcbiAgICByZXR1cm4gZ2V0Q29udGV4dCgpLmF0dHJzO1xyXG59XHJcbmZ1bmN0aW9uIGdldENvbnRleHQoKSB7XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY3VycmVudEluc3RhbmNlKSB7XHJcbiAgICAgICAgd2FybihcInVzZUNvbnRleHQoKSBjYWxsZWQgd2l0aG91dCBhY3RpdmUgaW5zdGFuY2UuXCIpO1xyXG4gICAgfVxyXG4gICAgdmFyIHZtID0gY3VycmVudEluc3RhbmNlO1xyXG4gICAgcmV0dXJuIHZtLl9zZXR1cENvbnRleHQgfHwgKHZtLl9zZXR1cENvbnRleHQgPSBjcmVhdGVTZXR1cENvbnRleHQodm0pKTtcclxufVxyXG4vKipcclxuICogUnVudGltZSBoZWxwZXIgZm9yIG1lcmdpbmcgZGVmYXVsdCBkZWNsYXJhdGlvbnMuIEltcG9ydGVkIGJ5IGNvbXBpbGVkIGNvZGVcclxuICogb25seS5cclxuICogQGludGVybmFsXHJcbiAqL1xyXG5mdW5jdGlvbiBtZXJnZURlZmF1bHRzKHJhdywgZGVmYXVsdHMpIHtcclxuICAgIHZhciBwcm9wcyA9IGlzQXJyYXkocmF3KVxyXG4gICAgICAgID8gcmF3LnJlZHVjZShmdW5jdGlvbiAobm9ybWFsaXplZCwgcCkgeyByZXR1cm4gKChub3JtYWxpemVkW3BdID0ge30pLCBub3JtYWxpemVkKTsgfSwge30pXHJcbiAgICAgICAgOiByYXc7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gZGVmYXVsdHMpIHtcclxuICAgICAgICB2YXIgb3B0ID0gcHJvcHNba2V5XTtcclxuICAgICAgICBpZiAob3B0KSB7XHJcbiAgICAgICAgICAgIGlmIChpc0FycmF5KG9wdCkgfHwgaXNGdW5jdGlvbihvcHQpKSB7XHJcbiAgICAgICAgICAgICAgICBwcm9wc1trZXldID0geyB0eXBlOiBvcHQsIGRlZmF1bHQ6IGRlZmF1bHRzW2tleV0gfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9wdC5kZWZhdWx0ID0gZGVmYXVsdHNba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChvcHQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcHJvcHNba2V5XSA9IHsgZGVmYXVsdDogZGVmYXVsdHNba2V5XSB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHdhcm4oXCJwcm9wcyBkZWZhdWx0IGtleSBcXFwiXCIuY29uY2F0KGtleSwgXCJcXFwiIGhhcyBubyBjb3JyZXNwb25kaW5nIGRlY2xhcmF0aW9uLlwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByb3BzO1xyXG59XG5cbmZ1bmN0aW9uIGluaXRSZW5kZXIodm0pIHtcclxuICAgIHZtLl92bm9kZSA9IG51bGw7IC8vIHRoZSByb290IG9mIHRoZSBjaGlsZCB0cmVlXHJcbiAgICB2bS5fc3RhdGljVHJlZXMgPSBudWxsOyAvLyB2LW9uY2UgY2FjaGVkIHRyZWVzXHJcbiAgICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xyXG4gICAgdmFyIHBhcmVudFZub2RlID0gKHZtLiR2bm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlKTsgLy8gdGhlIHBsYWNlaG9sZGVyIG5vZGUgaW4gcGFyZW50IHRyZWVcclxuICAgIHZhciByZW5kZXJDb250ZXh0ID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuY29udGV4dDtcclxuICAgIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiwgcmVuZGVyQ29udGV4dCk7XHJcbiAgICB2bS4kc2NvcGVkU2xvdHMgPSBlbXB0eU9iamVjdDtcclxuICAgIC8vIGJpbmQgdGhlIGNyZWF0ZUVsZW1lbnQgZm4gdG8gdGhpcyBpbnN0YW5jZVxyXG4gICAgLy8gc28gdGhhdCB3ZSBnZXQgcHJvcGVyIHJlbmRlciBjb250ZXh0IGluc2lkZSBpdC5cclxuICAgIC8vIGFyZ3Mgb3JkZXI6IHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlLCBhbHdheXNOb3JtYWxpemVcclxuICAgIC8vIGludGVybmFsIHZlcnNpb24gaXMgdXNlZCBieSByZW5kZXIgZnVuY3Rpb25zIGNvbXBpbGVkIGZyb20gdGVtcGxhdGVzXHJcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICB2bS5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50JDEodm0sIGEsIGIsIGMsIGQsIGZhbHNlKTsgfTtcclxuICAgIC8vIG5vcm1hbGl6YXRpb24gaXMgYWx3YXlzIGFwcGxpZWQgZm9yIHRoZSBwdWJsaWMgdmVyc2lvbiwgdXNlZCBpblxyXG4gICAgLy8gdXNlci13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMuXHJcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICB2bS4kY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50JDEodm0sIGEsIGIsIGMsIGQsIHRydWUpOyB9O1xyXG4gICAgLy8gJGF0dHJzICYgJGxpc3RlbmVycyBhcmUgZXhwb3NlZCBmb3IgZWFzaWVyIEhPQyBjcmVhdGlvbi5cclxuICAgIC8vIHRoZXkgbmVlZCB0byBiZSByZWFjdGl2ZSBzbyB0aGF0IEhPQ3MgdXNpbmcgdGhlbSBhcmUgYWx3YXlzIHVwZGF0ZWRcclxuICAgIHZhciBwYXJlbnREYXRhID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuZGF0YTtcclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgIGRlZmluZVJlYWN0aXZlKHZtLCAnJGF0dHJzJywgKHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycykgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGF0dHJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XHJcbiAgICAgICAgfSwgdHJ1ZSk7XHJcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRsaXN0ZW5lcnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcclxuICAgICAgICB9LCB0cnVlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGRlZmluZVJlYWN0aXZlKHZtLCAnJGF0dHJzJywgKHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycykgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xyXG4gICAgICAgIGRlZmluZVJlYWN0aXZlKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7XHJcbiAgICB9XHJcbn1cclxudmFyIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XHJcbmZ1bmN0aW9uIHJlbmRlck1peGluKFZ1ZSkge1xyXG4gICAgLy8gaW5zdGFsbCBydW50aW1lIGNvbnZlbmllbmNlIGhlbHBlcnNcclxuICAgIGluc3RhbGxSZW5kZXJIZWxwZXJzKFZ1ZS5wcm90b3R5cGUpO1xyXG4gICAgVnVlLnByb3RvdHlwZS4kbmV4dFRpY2sgPSBmdW5jdGlvbiAoZm4pIHtcclxuICAgICAgICByZXR1cm4gbmV4dFRpY2soZm4sIHRoaXMpO1xyXG4gICAgfTtcclxuICAgIFZ1ZS5wcm90b3R5cGUuX3JlbmRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIHZhciBfYSA9IHZtLiRvcHRpb25zLCByZW5kZXIgPSBfYS5yZW5kZXIsIF9wYXJlbnRWbm9kZSA9IF9hLl9wYXJlbnRWbm9kZTtcclxuICAgICAgICBpZiAoX3BhcmVudFZub2RlKSB7XHJcbiAgICAgICAgICAgIHZtLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKHZtLiRwYXJlbnQsIF9wYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzLCB2bS4kc2xvdHMsIHZtLiRzY29wZWRTbG90cyk7XHJcbiAgICAgICAgICAgIGlmICh2bS5fc2xvdHNQcm94eSkge1xyXG4gICAgICAgICAgICAgICAgc3luY1NldHVwU2xvdHModm0uX3Nsb3RzUHJveHksIHZtLiRzY29wZWRTbG90cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gc2V0IHBhcmVudCB2bm9kZS4gdGhpcyBhbGxvd3MgcmVuZGVyIGZ1bmN0aW9ucyB0byBoYXZlIGFjY2Vzc1xyXG4gICAgICAgIC8vIHRvIHRoZSBkYXRhIG9uIHRoZSBwbGFjZWhvbGRlciBub2RlLlxyXG4gICAgICAgIHZtLiR2bm9kZSA9IF9wYXJlbnRWbm9kZTtcclxuICAgICAgICAvLyByZW5kZXIgc2VsZlxyXG4gICAgICAgIHZhciB2bm9kZTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBUaGVyZSdzIG5vIG5lZWQgdG8gbWFpbnRhaW4gYSBzdGFjayBiZWNhdXNlIGFsbCByZW5kZXIgZm5zIGFyZSBjYWxsZWRcclxuICAgICAgICAgICAgLy8gc2VwYXJhdGVseSBmcm9tIG9uZSBhbm90aGVyLiBOZXN0ZWQgY29tcG9uZW50J3MgcmVuZGVyIGZucyBhcmUgY2FsbGVkXHJcbiAgICAgICAgICAgIC8vIHdoZW4gcGFyZW50IGNvbXBvbmVudCBpcyBwYXRjaGVkLlxyXG4gICAgICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2Uodm0pO1xyXG4gICAgICAgICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSB2bTtcclxuICAgICAgICAgICAgdm5vZGUgPSByZW5kZXIuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyXCIpO1xyXG4gICAgICAgICAgICAvLyByZXR1cm4gZXJyb3IgcmVuZGVyIHJlc3VsdCxcclxuICAgICAgICAgICAgLy8gb3IgcHJldmlvdXMgdm5vZGUgdG8gcHJldmVudCByZW5kZXIgZXJyb3IgY2F1c2luZyBibGFuayBjb21wb25lbnRcclxuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cclxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm5vZGUgPSB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQsIGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJFcnJvclwiKTtcclxuICAgICAgICAgICAgICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xyXG4gICAgICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaWYgdGhlIHJldHVybmVkIGFycmF5IGNvbnRhaW5zIG9ubHkgYSBzaW5nbGUgbm9kZSwgYWxsb3cgaXRcclxuICAgICAgICBpZiAoaXNBcnJheSh2bm9kZSkgJiYgdm5vZGUubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIHZub2RlID0gdm5vZGVbMF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXRcclxuICAgICAgICBpZiAoISh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSkge1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc0FycmF5KHZub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgd2FybignTXVsdGlwbGUgcm9vdCBub2RlcyByZXR1cm5lZCBmcm9tIHJlbmRlciBmdW5jdGlvbi4gUmVuZGVyIGZ1bmN0aW9uICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICdzaG91bGQgcmV0dXJuIGEgc2luZ2xlIHJvb3Qgbm9kZS4nLCB2bSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdm5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHNldCBwYXJlbnRcclxuICAgICAgICB2bm9kZS5wYXJlbnQgPSBfcGFyZW50Vm5vZGU7XHJcbiAgICAgICAgcmV0dXJuIHZub2RlO1xyXG4gICAgfTtcclxufVxuXG5mdW5jdGlvbiBlbnN1cmVDdG9yKGNvbXAsIGJhc2UpIHtcclxuICAgIGlmIChjb21wLl9fZXNNb2R1bGUgfHwgKGhhc1N5bWJvbCAmJiBjb21wW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnKSkge1xyXG4gICAgICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaXNPYmplY3QoY29tcCkgPyBiYXNlLmV4dGVuZChjb21wKSA6IGNvbXA7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlQXN5bmNQbGFjZWhvbGRlcihmYWN0b3J5LCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKSB7XHJcbiAgICB2YXIgbm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcclxuICAgIG5vZGUuYXN5bmNGYWN0b3J5ID0gZmFjdG9yeTtcclxuICAgIG5vZGUuYXN5bmNNZXRhID0geyBkYXRhOiBkYXRhLCBjb250ZXh0OiBjb250ZXh0LCBjaGlsZHJlbjogY2hpbGRyZW4sIHRhZzogdGFnIH07XHJcbiAgICByZXR1cm4gbm9kZTtcclxufVxyXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnQoZmFjdG9yeSwgYmFzZUN0b3IpIHtcclxuICAgIGlmIChpc1RydWUoZmFjdG9yeS5lcnJvcikgJiYgaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhY3RvcnkuZXJyb3JDb21wO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzRGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhY3RvcnkucmVzb2x2ZWQ7XHJcbiAgICB9XHJcbiAgICB2YXIgb3duZXIgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XHJcbiAgICBpZiAob3duZXIgJiYgaXNEZWYoZmFjdG9yeS5vd25lcnMpICYmIGZhY3Rvcnkub3duZXJzLmluZGV4T2Yob3duZXIpID09PSAtMSkge1xyXG4gICAgICAgIC8vIGFscmVhZHkgcGVuZGluZ1xyXG4gICAgICAgIGZhY3Rvcnkub3duZXJzLnB1c2gob3duZXIpO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzVHJ1ZShmYWN0b3J5LmxvYWRpbmcpICYmIGlzRGVmKGZhY3RvcnkubG9hZGluZ0NvbXApKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ0NvbXA7XHJcbiAgICB9XHJcbiAgICBpZiAob3duZXIgJiYgIWlzRGVmKGZhY3Rvcnkub3duZXJzKSkge1xyXG4gICAgICAgIHZhciBvd25lcnNfMSA9IChmYWN0b3J5Lm93bmVycyA9IFtvd25lcl0pO1xyXG4gICAgICAgIHZhciBzeW5jXzEgPSB0cnVlO1xyXG4gICAgICAgIHZhciB0aW1lckxvYWRpbmdfMSA9IG51bGw7XHJcbiAgICAgICAgdmFyIHRpbWVyVGltZW91dF8xID0gbnVsbDtcclxuICAgICAgICBvd25lci4kb24oJ2hvb2s6ZGVzdHJveWVkJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlJDIob3duZXJzXzEsIG93bmVyKTsgfSk7XHJcbiAgICAgICAgdmFyIGZvcmNlUmVuZGVyXzEgPSBmdW5jdGlvbiAocmVuZGVyQ29tcGxldGVkKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb3duZXJzXzEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBvd25lcnNfMVtpXS4kZm9yY2VVcGRhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocmVuZGVyQ29tcGxldGVkKSB7XHJcbiAgICAgICAgICAgICAgICBvd25lcnNfMS5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRpbWVyTG9hZGluZ18xICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyTG9hZGluZ18xKTtcclxuICAgICAgICAgICAgICAgICAgICB0aW1lckxvYWRpbmdfMSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGltZXJUaW1lb3V0XzEgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJUaW1lb3V0XzEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRpbWVyVGltZW91dF8xID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIHJlc29sdmUgPSBvbmNlKGZ1bmN0aW9uIChyZXMpIHtcclxuICAgICAgICAgICAgLy8gY2FjaGUgcmVzb2x2ZWRcclxuICAgICAgICAgICAgZmFjdG9yeS5yZXNvbHZlZCA9IGVuc3VyZUN0b3IocmVzLCBiYXNlQ3Rvcik7XHJcbiAgICAgICAgICAgIC8vIGludm9rZSBjYWxsYmFja3Mgb25seSBpZiB0aGlzIGlzIG5vdCBhIHN5bmNocm9ub3VzIHJlc29sdmVcclxuICAgICAgICAgICAgLy8gKGFzeW5jIHJlc29sdmVzIGFyZSBzaGltbWVkIGFzIHN5bmNocm9ub3VzIGR1cmluZyBTU1IpXHJcbiAgICAgICAgICAgIGlmICghc3luY18xKSB7XHJcbiAgICAgICAgICAgICAgICBmb3JjZVJlbmRlcl8xKHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgb3duZXJzXzEubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciByZWplY3RfMSA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikge1xyXG4gICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXHJcbiAgICAgICAgICAgICAgICB3YXJuKFwiRmFpbGVkIHRvIHJlc29sdmUgYXN5bmMgY29tcG9uZW50OiBcIi5jb25jYXQoU3RyaW5nKGZhY3RvcnkpKSArXHJcbiAgICAgICAgICAgICAgICAgICAgKHJlYXNvbiA/IFwiXFxuUmVhc29uOiBcIi5jb25jYXQocmVhc29uKSA6ICcnKSk7XHJcbiAgICAgICAgICAgIGlmIChpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcclxuICAgICAgICAgICAgICAgIGZhY3RvcnkuZXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZm9yY2VSZW5kZXJfMSh0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciByZXNfMSA9IGZhY3RvcnkocmVzb2x2ZSwgcmVqZWN0XzEpO1xyXG4gICAgICAgIGlmIChpc09iamVjdChyZXNfMSkpIHtcclxuICAgICAgICAgICAgaWYgKGlzUHJvbWlzZShyZXNfMSkpIHtcclxuICAgICAgICAgICAgICAgIC8vICgpID0+IFByb21pc2VcclxuICAgICAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzXzEudGhlbihyZXNvbHZlLCByZWplY3RfMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNQcm9taXNlKHJlc18xLmNvbXBvbmVudCkpIHtcclxuICAgICAgICAgICAgICAgIHJlc18xLmNvbXBvbmVudC50aGVuKHJlc29sdmUsIHJlamVjdF8xKTtcclxuICAgICAgICAgICAgICAgIGlmIChpc0RlZihyZXNfMS5lcnJvcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBmYWN0b3J5LmVycm9yQ29tcCA9IGVuc3VyZUN0b3IocmVzXzEuZXJyb3IsIGJhc2VDdG9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpc0RlZihyZXNfMS5sb2FkaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZ0NvbXAgPSBlbnN1cmVDdG9yKHJlc18xLmxvYWRpbmcsIGJhc2VDdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzXzEuZGVsYXkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgTm9kZUpTIHRpbWVvdXQgdHlwZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lckxvYWRpbmdfMSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZXJMb2FkaW5nXzEgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkgJiYgaXNVbmRlZihmYWN0b3J5LmVycm9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yY2VSZW5kZXJfMShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJlc18xLmRlbGF5IHx8IDIwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGlzRGVmKHJlc18xLnRpbWVvdXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBOb2RlSlMgdGltZW91dCB0eXBlXHJcbiAgICAgICAgICAgICAgICAgICAgdGltZXJUaW1lb3V0XzEgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZXJUaW1lb3V0XzEgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0XzEocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IFwidGltZW91dCAoXCIuY29uY2F0KHJlc18xLnRpbWVvdXQsIFwibXMpXCIpIDogbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LCByZXNfMS50aW1lb3V0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBzeW5jXzEgPSBmYWxzZTtcclxuICAgICAgICAvLyByZXR1cm4gaW4gY2FzZSByZXNvbHZlZCBzeW5jaHJvbm91c2x5XHJcbiAgICAgICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZyA/IGZhY3RvcnkubG9hZGluZ0NvbXAgOiBmYWN0b3J5LnJlc29sdmVkO1xyXG4gICAgfVxyXG59XG5cbmZ1bmN0aW9uIGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoY2hpbGRyZW4pIHtcclxuICAgIGlmIChpc0FycmF5KGNoaWxkcmVuKSkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGMgPSBjaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgaWYgKGlzRGVmKGMpICYmIChpc0RlZihjLmNvbXBvbmVudE9wdGlvbnMpIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbnZhciBTSU1QTEVfTk9STUFMSVpFID0gMTtcclxudmFyIEFMV0FZU19OT1JNQUxJWkUgPSAyO1xyXG4vLyB3cmFwcGVyIGZ1bmN0aW9uIGZvciBwcm92aWRpbmcgYSBtb3JlIGZsZXhpYmxlIGludGVyZmFjZVxyXG4vLyB3aXRob3V0IGdldHRpbmcgeWVsbGVkIGF0IGJ5IGZsb3dcclxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCQxKGNvbnRleHQsIHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlLCBhbHdheXNOb3JtYWxpemUpIHtcclxuICAgIGlmIChpc0FycmF5KGRhdGEpIHx8IGlzUHJpbWl0aXZlKGRhdGEpKSB7XHJcbiAgICAgICAgbm9ybWFsaXphdGlvblR5cGUgPSBjaGlsZHJlbjtcclxuICAgICAgICBjaGlsZHJlbiA9IGRhdGE7XHJcbiAgICAgICAgZGF0YSA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIGlmIChpc1RydWUoYWx3YXlzTm9ybWFsaXplKSkge1xyXG4gICAgICAgIG5vcm1hbGl6YXRpb25UeXBlID0gQUxXQVlTX05PUk1BTElaRTtcclxuICAgIH1cclxuICAgIHJldHVybiBfY3JlYXRlRWxlbWVudChjb250ZXh0LCB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSk7XHJcbn1cclxuZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQoY29udGV4dCwgdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUpIHtcclxuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLl9fb2JfXykpIHtcclxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXHJcbiAgICAgICAgICAgIHdhcm4oXCJBdm9pZCB1c2luZyBvYnNlcnZlZCBkYXRhIG9iamVjdCBhcyB2bm9kZSBkYXRhOiBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoZGF0YSksIFwiXFxuXCIpICsgJ0Fsd2F5cyBjcmVhdGUgZnJlc2ggdm5vZGUgZGF0YSBvYmplY3RzIGluIGVhY2ggcmVuZGVyIScsIGNvbnRleHQpO1xyXG4gICAgICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKCk7XHJcbiAgICB9XHJcbiAgICAvLyBvYmplY3Qgc3ludGF4IGluIHYtYmluZFxyXG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEuaXMpKSB7XHJcbiAgICAgICAgdGFnID0gZGF0YS5pcztcclxuICAgIH1cclxuICAgIGlmICghdGFnKSB7XHJcbiAgICAgICAgLy8gaW4gY2FzZSBvZiBjb21wb25lbnQgOmlzIHNldCB0byBmYWxzeSB2YWx1ZVxyXG4gICAgICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKCk7XHJcbiAgICB9XHJcbiAgICAvLyB3YXJuIGFnYWluc3Qgbm9uLXByaW1pdGl2ZSBrZXlcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEua2V5KSAmJiAhaXNQcmltaXRpdmUoZGF0YS5rZXkpKSB7XHJcbiAgICAgICAgd2FybignQXZvaWQgdXNpbmcgbm9uLXByaW1pdGl2ZSB2YWx1ZSBhcyBrZXksICcgK1xyXG4gICAgICAgICAgICAndXNlIHN0cmluZy9udW1iZXIgdmFsdWUgaW5zdGVhZC4nLCBjb250ZXh0KTtcclxuICAgIH1cclxuICAgIC8vIHN1cHBvcnQgc2luZ2xlIGZ1bmN0aW9uIGNoaWxkcmVuIGFzIGRlZmF1bHQgc2NvcGVkIHNsb3RcclxuICAgIGlmIChpc0FycmF5KGNoaWxkcmVuKSAmJiBpc0Z1bmN0aW9uKGNoaWxkcmVuWzBdKSkge1xyXG4gICAgICAgIGRhdGEgPSBkYXRhIHx8IHt9O1xyXG4gICAgICAgIGRhdGEuc2NvcGVkU2xvdHMgPSB7IGRlZmF1bHQ6IGNoaWxkcmVuWzBdIH07XHJcbiAgICAgICAgY2hpbGRyZW4ubGVuZ3RoID0gMDtcclxuICAgIH1cclxuICAgIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gQUxXQVlTX05PUk1BTElaRSkge1xyXG4gICAgICAgIGNoaWxkcmVuID0gbm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IFNJTVBMRV9OT1JNQUxJWkUpIHtcclxuICAgICAgICBjaGlsZHJlbiA9IHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcclxuICAgIH1cclxuICAgIHZhciB2bm9kZSwgbnM7XHJcbiAgICBpZiAodHlwZW9mIHRhZyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICB2YXIgQ3RvciA9IHZvaWQgMDtcclxuICAgICAgICBucyA9IChjb250ZXh0LiR2bm9kZSAmJiBjb250ZXh0LiR2bm9kZS5ucykgfHwgY29uZmlnLmdldFRhZ05hbWVzcGFjZSh0YWcpO1xyXG4gICAgICAgIGlmIChjb25maWcuaXNSZXNlcnZlZFRhZyh0YWcpKSB7XHJcbiAgICAgICAgICAgIC8vIHBsYXRmb3JtIGJ1aWx0LWluIGVsZW1lbnRzXHJcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXHJcbiAgICAgICAgICAgICAgICBpc0RlZihkYXRhKSAmJlxyXG4gICAgICAgICAgICAgICAgaXNEZWYoZGF0YS5uYXRpdmVPbikgJiZcclxuICAgICAgICAgICAgICAgIGRhdGEudGFnICE9PSAnY29tcG9uZW50Jykge1xyXG4gICAgICAgICAgICAgICAgd2FybihcIlRoZSAubmF0aXZlIG1vZGlmaWVyIGZvciB2LW9uIGlzIG9ubHkgdmFsaWQgb24gY29tcG9uZW50cyBidXQgaXQgd2FzIHVzZWQgb24gPFwiLmNvbmNhdCh0YWcsIFwiPi5cIiksIGNvbnRleHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZub2RlID0gbmV3IFZOb2RlKGNvbmZpZy5wYXJzZVBsYXRmb3JtVGFnTmFtZSh0YWcpLCBkYXRhLCBjaGlsZHJlbiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgoIWRhdGEgfHwgIWRhdGEucHJlKSAmJlxyXG4gICAgICAgICAgICBpc0RlZigoQ3RvciA9IHJlc29sdmVBc3NldChjb250ZXh0LiRvcHRpb25zLCAnY29tcG9uZW50cycsIHRhZykpKSkge1xyXG4gICAgICAgICAgICAvLyBjb21wb25lbnRcclxuICAgICAgICAgICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQoQ3RvciwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4sIHRhZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB1bmtub3duIG9yIHVubGlzdGVkIG5hbWVzcGFjZWQgZWxlbWVudHNcclxuICAgICAgICAgICAgLy8gY2hlY2sgYXQgcnVudGltZSBiZWNhdXNlIGl0IG1heSBnZXQgYXNzaWduZWQgYSBuYW1lc3BhY2Ugd2hlbiBpdHNcclxuICAgICAgICAgICAgLy8gcGFyZW50IG5vcm1hbGl6ZXMgY2hpbGRyZW5cclxuICAgICAgICAgICAgdm5vZGUgPSBuZXcgVk5vZGUodGFnLCBkYXRhLCBjaGlsZHJlbiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIGRpcmVjdCBjb21wb25lbnQgb3B0aW9ucyAvIGNvbnN0cnVjdG9yXHJcbiAgICAgICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQodGFnLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbik7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNBcnJheSh2bm9kZSkpIHtcclxuICAgICAgICByZXR1cm4gdm5vZGU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0RlZih2bm9kZSkpIHtcclxuICAgICAgICBpZiAoaXNEZWYobnMpKVxyXG4gICAgICAgICAgICBhcHBseU5TKHZub2RlLCBucyk7XHJcbiAgICAgICAgaWYgKGlzRGVmKGRhdGEpKVxyXG4gICAgICAgICAgICByZWdpc3RlckRlZXBCaW5kaW5ncyhkYXRhKTtcclxuICAgICAgICByZXR1cm4gdm5vZGU7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGFwcGx5TlModm5vZGUsIG5zLCBmb3JjZSkge1xyXG4gICAgdm5vZGUubnMgPSBucztcclxuICAgIGlmICh2bm9kZS50YWcgPT09ICdmb3JlaWduT2JqZWN0Jykge1xyXG4gICAgICAgIC8vIHVzZSBkZWZhdWx0IG5hbWVzcGFjZSBpbnNpZGUgZm9yZWlnbk9iamVjdFxyXG4gICAgICAgIG5zID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGZvcmNlID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChpc0RlZih2bm9kZS5jaGlsZHJlbikpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgaWYgKGlzRGVmKGNoaWxkLnRhZykgJiZcclxuICAgICAgICAgICAgICAgIChpc1VuZGVmKGNoaWxkLm5zKSB8fCAoaXNUcnVlKGZvcmNlKSAmJiBjaGlsZC50YWcgIT09ICdzdmcnKSkpIHtcclxuICAgICAgICAgICAgICAgIGFwcGx5TlMoY2hpbGQsIG5zLCBmb3JjZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuLy8gcmVmICM1MzE4XHJcbi8vIG5lY2Vzc2FyeSB0byBlbnN1cmUgcGFyZW50IHJlLXJlbmRlciB3aGVuIGRlZXAgYmluZGluZ3MgbGlrZSA6c3R5bGUgYW5kXHJcbi8vIDpjbGFzcyBhcmUgdXNlZCBvbiBzbG90IG5vZGVzXHJcbmZ1bmN0aW9uIHJlZ2lzdGVyRGVlcEJpbmRpbmdzKGRhdGEpIHtcclxuICAgIGlmIChpc09iamVjdChkYXRhLnN0eWxlKSkge1xyXG4gICAgICAgIHRyYXZlcnNlKGRhdGEuc3R5bGUpO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzT2JqZWN0KGRhdGEuY2xhc3MpKSB7XHJcbiAgICAgICAgdHJhdmVyc2UoZGF0YS5jbGFzcyk7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBpbnRlcm5hbCB0aGlzIGZ1bmN0aW9uIG5lZWRzIG1hbnVhbCBwdWJsaWMgdHlwZSBkZWNsYXJhdGlvbiBiZWNhdXNlIGl0IHJlbGllc1xyXG4gKiBvbiBwcmV2aW91c2x5IG1hbnVhbGx5IGF1dGhvcmVkIHR5cGVzIGZyb20gVnVlIDJcclxuICovXHJcbmZ1bmN0aW9uIGgodHlwZSwgcHJvcHMsIGNoaWxkcmVuKSB7XHJcbiAgICBpZiAoIWN1cnJlbnRJbnN0YW5jZSkge1xyXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcclxuICAgICAgICAgICAgd2FybihcImdsb2JhbGx5IGltcG9ydGVkIGgoKSBjYW4gb25seSBiZSBpbnZva2VkIHdoZW4gdGhlcmUgaXMgYW4gYWN0aXZlIFwiICtcclxuICAgICAgICAgICAgICAgIFwiY29tcG9uZW50IGluc3RhbmNlLCBlLmcuIHN5bmNocm9ub3VzbHkgaW4gYSBjb21wb25lbnQncyByZW5kZXIgb3Igc2V0dXAgZnVuY3Rpb24uXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQkMShjdXJyZW50SW5zdGFuY2UsIHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgMiwgdHJ1ZSk7XHJcbn1cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyLCB2bSwgaW5mbykge1xyXG4gICAgLy8gRGVhY3RpdmF0ZSBkZXBzIHRyYWNraW5nIHdoaWxlIHByb2Nlc3NpbmcgZXJyb3IgaGFuZGxlciB0byBhdm9pZCBwb3NzaWJsZSBpbmZpbml0ZSByZW5kZXJpbmcuXHJcbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWV4L2lzc3Vlcy8xNTA1XHJcbiAgICBwdXNoVGFyZ2V0KCk7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGlmICh2bSkge1xyXG4gICAgICAgICAgICB2YXIgY3VyID0gdm07XHJcbiAgICAgICAgICAgIHdoaWxlICgoY3VyID0gY3VyLiRwYXJlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaG9va3MgPSBjdXIuJG9wdGlvbnMuZXJyb3JDYXB0dXJlZDtcclxuICAgICAgICAgICAgICAgIGlmIChob29rcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYXB0dXJlID0gaG9va3NbaV0uY2FsbChjdXIsIGVyciwgdm0sIGluZm8pID09PSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYXB0dXJlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsSGFuZGxlRXJyb3IoZSwgY3VyLCAnZXJyb3JDYXB0dXJlZCBob29rJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZ2xvYmFsSGFuZGxlRXJyb3IoZXJyLCB2bSwgaW5mbyk7XHJcbiAgICB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICBwb3BUYXJnZXQoKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhoYW5kbGVyLCBjb250ZXh0LCBhcmdzLCB2bSwgaW5mbykge1xyXG4gICAgdmFyIHJlcztcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmVzID0gYXJncyA/IGhhbmRsZXIuYXBwbHkoY29udGV4dCwgYXJncykgOiBoYW5kbGVyLmNhbGwoY29udGV4dCk7XHJcbiAgICAgICAgaWYgKHJlcyAmJiAhcmVzLl9pc1Z1ZSAmJiBpc1Byb21pc2UocmVzKSAmJiAhcmVzLl9oYW5kbGVkKSB7XHJcbiAgICAgICAgICAgIHJlcy5jYXRjaChmdW5jdGlvbiAoZSkgeyByZXR1cm4gaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8gKyBcIiAoUHJvbWlzZS9hc3luYylcIik7IH0pO1xyXG4gICAgICAgICAgICByZXMuX2hhbmRsZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufVxyXG5mdW5jdGlvbiBnbG9iYWxIYW5kbGVFcnJvcihlcnIsIHZtLCBpbmZvKSB7XHJcbiAgICBpZiAoY29uZmlnLmVycm9ySGFuZGxlcikge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb25maWcuZXJyb3JIYW5kbGVyLmNhbGwobnVsbCwgZXJyLCB2bSwgaW5mbyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIC8vIGlmIHRoZSB1c2VyIGludGVudGlvbmFsbHkgdGhyb3dzIHRoZSBvcmlnaW5hbCBlcnJvciBpbiB0aGUgaGFuZGxlcixcclxuICAgICAgICAgICAgLy8gZG8gbm90IGxvZyBpdCB0d2ljZVxyXG4gICAgICAgICAgICBpZiAoZSAhPT0gZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBsb2dFcnJvcihlLCBudWxsLCAnY29uZmlnLmVycm9ySGFuZGxlcicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbG9nRXJyb3IoZXJyLCB2bSwgaW5mbyk7XHJcbn1cclxuZnVuY3Rpb24gbG9nRXJyb3IoZXJyLCB2bSwgaW5mbykge1xyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICB3YXJuKFwiRXJyb3IgaW4gXCIuY29uY2F0KGluZm8sIFwiOiBcXFwiXCIpLmNvbmNhdChlcnIudG9TdHJpbmcoKSwgXCJcXFwiXCIpLCB2bSk7XHJcbiAgICB9XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xyXG4gICAgaWYgKGluQnJvd3NlciAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICB9XHJcbn1cblxuLyogZ2xvYmFscyBNdXRhdGlvbk9ic2VydmVyICovXHJcbnZhciBpc1VzaW5nTWljcm9UYXNrID0gZmFsc2U7XHJcbnZhciBjYWxsYmFja3MgPSBbXTtcclxudmFyIHBlbmRpbmcgPSBmYWxzZTtcclxuZnVuY3Rpb24gZmx1c2hDYWxsYmFja3MoKSB7XHJcbiAgICBwZW5kaW5nID0gZmFsc2U7XHJcbiAgICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xyXG4gICAgY2FsbGJhY2tzLmxlbmd0aCA9IDA7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvcGllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvcGllc1tpXSgpO1xyXG4gICAgfVxyXG59XHJcbi8vIEhlcmUgd2UgaGF2ZSBhc3luYyBkZWZlcnJpbmcgd3JhcHBlcnMgdXNpbmcgbWljcm90YXNrcy5cclxuLy8gSW4gMi41IHdlIHVzZWQgKG1hY3JvKSB0YXNrcyAoaW4gY29tYmluYXRpb24gd2l0aCBtaWNyb3Rhc2tzKS5cclxuLy8gSG93ZXZlciwgaXQgaGFzIHN1YnRsZSBwcm9ibGVtcyB3aGVuIHN0YXRlIGlzIGNoYW5nZWQgcmlnaHQgYmVmb3JlIHJlcGFpbnRcclxuLy8gKGUuZy4gIzY4MTMsIG91dC1pbiB0cmFuc2l0aW9ucykuXHJcbi8vIEFsc28sIHVzaW5nIChtYWNybykgdGFza3MgaW4gZXZlbnQgaGFuZGxlciB3b3VsZCBjYXVzZSBzb21lIHdlaXJkIGJlaGF2aW9yc1xyXG4vLyB0aGF0IGNhbm5vdCBiZSBjaXJjdW12ZW50ZWQgKGUuZy4gIzcxMDksICM3MTUzLCAjNzU0NiwgIzc4MzQsICM4MTA5KS5cclxuLy8gU28gd2Ugbm93IHVzZSBtaWNyb3Rhc2tzIGV2ZXJ5d2hlcmUsIGFnYWluLlxyXG4vLyBBIG1ham9yIGRyYXdiYWNrIG9mIHRoaXMgdHJhZGVvZmYgaXMgdGhhdCB0aGVyZSBhcmUgc29tZSBzY2VuYXJpb3NcclxuLy8gd2hlcmUgbWljcm90YXNrcyBoYXZlIHRvbyBoaWdoIGEgcHJpb3JpdHkgYW5kIGZpcmUgaW4gYmV0d2VlbiBzdXBwb3NlZGx5XHJcbi8vIHNlcXVlbnRpYWwgZXZlbnRzIChlLmcuICM0NTIxLCAjNjY5MCwgd2hpY2ggaGF2ZSB3b3JrYXJvdW5kcylcclxuLy8gb3IgZXZlbiBiZXR3ZWVuIGJ1YmJsaW5nIG9mIHRoZSBzYW1lIGV2ZW50ICgjNjU2NikuXHJcbnZhciB0aW1lckZ1bmM7XHJcbi8vIFRoZSBuZXh0VGljayBiZWhhdmlvciBsZXZlcmFnZXMgdGhlIG1pY3JvdGFzayBxdWV1ZSwgd2hpY2ggY2FuIGJlIGFjY2Vzc2VkXHJcbi8vIHZpYSBlaXRoZXIgbmF0aXZlIFByb21pc2UudGhlbiBvciBNdXRhdGlvbk9ic2VydmVyLlxyXG4vLyBNdXRhdGlvbk9ic2VydmVyIGhhcyB3aWRlciBzdXBwb3J0LCBob3dldmVyIGl0IGlzIHNlcmlvdXNseSBidWdnZWQgaW5cclxuLy8gVUlXZWJWaWV3IGluIGlPUyA+PSA5LjMuMyB3aGVuIHRyaWdnZXJlZCBpbiB0b3VjaCBldmVudCBoYW5kbGVycy4gSXRcclxuLy8gY29tcGxldGVseSBzdG9wcyB3b3JraW5nIGFmdGVyIHRyaWdnZXJpbmcgYSBmZXcgdGltZXMuLi4gc28sIGlmIG5hdGl2ZVxyXG4vLyBQcm9taXNlIGlzIGF2YWlsYWJsZSwgd2Ugd2lsbCB1c2UgaXQ6XHJcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0LCAkZmxvdy1kaXNhYmxlLWxpbmUgKi9cclxuaWYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm9taXNlKSkge1xyXG4gICAgdmFyIHBfMSA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHBfMS50aGVuKGZsdXNoQ2FsbGJhY2tzKTtcclxuICAgICAgICAvLyBJbiBwcm9ibGVtYXRpYyBVSVdlYlZpZXdzLCBQcm9taXNlLnRoZW4gZG9lc24ndCBjb21wbGV0ZWx5IGJyZWFrLCBidXRcclxuICAgICAgICAvLyBpdCBjYW4gZ2V0IHN0dWNrIGluIGEgd2VpcmQgc3RhdGUgd2hlcmUgY2FsbGJhY2tzIGFyZSBwdXNoZWQgaW50byB0aGVcclxuICAgICAgICAvLyBtaWNyb3Rhc2sgcXVldWUgYnV0IHRoZSBxdWV1ZSBpc24ndCBiZWluZyBmbHVzaGVkLCB1bnRpbCB0aGUgYnJvd3NlclxyXG4gICAgICAgIC8vIG5lZWRzIHRvIGRvIHNvbWUgb3RoZXIgd29yaywgZS5nLiBoYW5kbGUgYSB0aW1lci4gVGhlcmVmb3JlIHdlIGNhblxyXG4gICAgICAgIC8vIFwiZm9yY2VcIiB0aGUgbWljcm90YXNrIHF1ZXVlIHRvIGJlIGZsdXNoZWQgYnkgYWRkaW5nIGFuIGVtcHR5IHRpbWVyLlxyXG4gICAgICAgIGlmIChpc0lPUylcclxuICAgICAgICAgICAgc2V0VGltZW91dChub29wKTtcclxuICAgIH07XHJcbiAgICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcclxufVxyXG5lbHNlIGlmICghaXNJRSAmJlxyXG4gICAgdHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAoaXNOYXRpdmUoTXV0YXRpb25PYnNlcnZlcikgfHxcclxuICAgICAgICAvLyBQaGFudG9tSlMgYW5kIGlPUyA3LnhcclxuICAgICAgICBNdXRhdGlvbk9ic2VydmVyLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl0nKSkge1xyXG4gICAgLy8gVXNlIE11dGF0aW9uT2JzZXJ2ZXIgd2hlcmUgbmF0aXZlIFByb21pc2UgaXMgbm90IGF2YWlsYWJsZSxcclxuICAgIC8vIGUuZy4gUGhhbnRvbUpTLCBpT1M3LCBBbmRyb2lkIDQuNFxyXG4gICAgLy8gKCM2NDY2IE11dGF0aW9uT2JzZXJ2ZXIgaXMgdW5yZWxpYWJsZSBpbiBJRTExKVxyXG4gICAgdmFyIGNvdW50ZXJfMSA9IDE7XHJcbiAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaENhbGxiYWNrcyk7XHJcbiAgICB2YXIgdGV4dE5vZGVfMSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhjb3VudGVyXzEpKTtcclxuICAgIG9ic2VydmVyLm9ic2VydmUodGV4dE5vZGVfMSwge1xyXG4gICAgICAgIGNoYXJhY3RlckRhdGE6IHRydWVcclxuICAgIH0pO1xyXG4gICAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvdW50ZXJfMSA9IChjb3VudGVyXzEgKyAxKSAlIDI7XHJcbiAgICAgICAgdGV4dE5vZGVfMS5kYXRhID0gU3RyaW5nKGNvdW50ZXJfMSk7XHJcbiAgICB9O1xyXG4gICAgaXNVc2luZ01pY3JvVGFzayA9IHRydWU7XHJcbn1cclxuZWxzZSBpZiAodHlwZW9mIHNldEltbWVkaWF0ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoc2V0SW1tZWRpYXRlKSkge1xyXG4gICAgLy8gRmFsbGJhY2sgdG8gc2V0SW1tZWRpYXRlLlxyXG4gICAgLy8gVGVjaG5pY2FsbHkgaXQgbGV2ZXJhZ2VzIHRoZSAobWFjcm8pIHRhc2sgcXVldWUsXHJcbiAgICAvLyBidXQgaXQgaXMgc3RpbGwgYSBiZXR0ZXIgY2hvaWNlIHRoYW4gc2V0VGltZW91dC5cclxuICAgIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBzZXRJbW1lZGlhdGUoZmx1c2hDYWxsYmFja3MpO1xyXG4gICAgfTtcclxufVxyXG5lbHNlIHtcclxuICAgIC8vIEZhbGxiYWNrIHRvIHNldFRpbWVvdXQuXHJcbiAgICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgc2V0VGltZW91dChmbHVzaENhbGxiYWNrcywgMCk7XHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIG5leHRUaWNrKGNiLCBjdHgpIHtcclxuICAgIHZhciBfcmVzb2x2ZTtcclxuICAgIGNhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoY2IpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNiLmNhbGwoY3R4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZSwgY3R4LCAnbmV4dFRpY2snKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChfcmVzb2x2ZSkge1xyXG4gICAgICAgICAgICBfcmVzb2x2ZShjdHgpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgaWYgKCFwZW5kaW5nKSB7XHJcbiAgICAgICAgcGVuZGluZyA9IHRydWU7XHJcbiAgICAgICAgdGltZXJGdW5jKCk7XHJcbiAgICB9XHJcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcclxuICAgIGlmICghY2IgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XHJcbiAgICAgICAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxuXG5mdW5jdGlvbiB1c2VDc3NNb2R1bGUobmFtZSkge1xyXG4gICAgaWYgKG5hbWUgPT09IHZvaWQgMCkgeyBuYW1lID0gJyRzdHlsZSc7IH1cclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKCFjdXJyZW50SW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFwidXNlQ3NzTW9kdWxlIG11c3QgYmUgY2FsbGVkIGluc2lkZSBzZXR1cCgpXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gZW1wdHlPYmplY3Q7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBtb2QgPSBjdXJyZW50SW5zdGFuY2VbbmFtZV07XHJcbiAgICAgICAgaWYgKCFtb2QpIHtcclxuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxyXG4gICAgICAgICAgICAgICAgd2FybihcIkN1cnJlbnQgaW5zdGFuY2UgZG9lcyBub3QgaGF2ZSBDU1MgbW9kdWxlIG5hbWVkIFxcXCJcIi5jb25jYXQobmFtZSwgXCJcXFwiLlwiKSk7XHJcbiAgICAgICAgICAgIHJldHVybiBlbXB0eU9iamVjdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1vZDtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogUnVudGltZSBoZWxwZXIgZm9yIFNGQydzIENTUyB2YXJpYWJsZSBpbmplY3Rpb24gZmVhdHVyZS5cclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIHVzZUNzc1ZhcnMoZ2V0dGVyKSB7XHJcbiAgICBpZiAoIWluQnJvd3NlciAmJiAhZmFsc2UpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgdmFyIGluc3RhbmNlID0gY3VycmVudEluc3RhbmNlO1xyXG4gICAgaWYgKCFpbnN0YW5jZSkge1xyXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcclxuICAgICAgICAgICAgd2FybihcInVzZUNzc1ZhcnMgaXMgY2FsbGVkIHdpdGhvdXQgY3VycmVudCBhY3RpdmUgY29tcG9uZW50IGluc3RhbmNlLlwiKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB3YXRjaFBvc3RFZmZlY3QoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbCA9IGluc3RhbmNlLiRlbDtcclxuICAgICAgICB2YXIgdmFycyA9IGdldHRlcihpbnN0YW5jZSwgaW5zdGFuY2UuX3NldHVwUHJveHkpO1xyXG4gICAgICAgIGlmIChlbCAmJiBlbC5ub2RlVHlwZSA9PT0gMSkge1xyXG4gICAgICAgICAgICB2YXIgc3R5bGUgPSBlbC5zdHlsZTtcclxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHZhcnMpIHtcclxuICAgICAgICAgICAgICAgIHN0eWxlLnNldFByb3BlcnR5KFwiLS1cIi5jb25jYXQoa2V5KSwgdmFyc1trZXldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XG5cbi8qKlxyXG4gKiB2My1jb21wYXRpYmxlIGFzeW5jIGNvbXBvbmVudCBBUEkuXHJcbiAqIEBpbnRlcm5hbCB0aGUgdHlwZSBpcyBtYW51YWxseSBkZWNsYXJlZCBpbiA8cm9vdD4vdHlwZXMvdjMtZGVmaW5lLWFzeW5jLWNvbXBvbmVudC5kLnRzXHJcbiAqIGJlY2F1c2UgaXQgcmVsaWVzIG9uIGV4aXN0aW5nIG1hbnVhbCB0eXBlc1xyXG4gKi9cclxuZnVuY3Rpb24gZGVmaW5lQXN5bmNDb21wb25lbnQoc291cmNlKSB7XHJcbiAgICBpZiAoaXNGdW5jdGlvbihzb3VyY2UpKSB7XHJcbiAgICAgICAgc291cmNlID0geyBsb2FkZXI6IHNvdXJjZSB9O1xyXG4gICAgfVxyXG4gICAgdmFyIGxvYWRlciA9IHNvdXJjZS5sb2FkZXIsIGxvYWRpbmdDb21wb25lbnQgPSBzb3VyY2UubG9hZGluZ0NvbXBvbmVudCwgZXJyb3JDb21wb25lbnQgPSBzb3VyY2UuZXJyb3JDb21wb25lbnQsIF9hID0gc291cmNlLmRlbGF5LCBkZWxheSA9IF9hID09PSB2b2lkIDAgPyAyMDAgOiBfYSwgdGltZW91dCA9IHNvdXJjZS50aW1lb3V0LCAvLyB1bmRlZmluZWQgPSBuZXZlciB0aW1lcyBvdXRcclxuICAgIF9iID0gc291cmNlLnN1c3BlbnNpYmxlLCAvLyB1bmRlZmluZWQgPSBuZXZlciB0aW1lcyBvdXRcclxuICAgIHN1c3BlbnNpYmxlID0gX2IgPT09IHZvaWQgMCA/IGZhbHNlIDogX2IsIC8vIGluIFZ1ZSAzIGRlZmF1bHQgaXMgdHJ1ZVxyXG4gICAgdXNlck9uRXJyb3IgPSBzb3VyY2Uub25FcnJvcjtcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN1c3BlbnNpYmxlKSB7XHJcbiAgICAgICAgd2FybihcIlRoZSBzdXNwZW5zaWJsYmUgb3B0aW9uIGZvciBhc3luYyBjb21wb25lbnRzIGlzIG5vdCBzdXBwb3J0ZWQgaW4gVnVlMi4gSXQgaXMgaWdub3JlZC5cIik7XHJcbiAgICB9XHJcbiAgICB2YXIgcGVuZGluZ1JlcXVlc3QgPSBudWxsO1xyXG4gICAgdmFyIHJldHJpZXMgPSAwO1xyXG4gICAgdmFyIHJldHJ5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHJpZXMrKztcclxuICAgICAgICBwZW5kaW5nUmVxdWVzdCA9IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIGxvYWQoKTtcclxuICAgIH07XHJcbiAgICB2YXIgbG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdGhpc1JlcXVlc3Q7XHJcbiAgICAgICAgcmV0dXJuIChwZW5kaW5nUmVxdWVzdCB8fFxyXG4gICAgICAgICAgICAodGhpc1JlcXVlc3QgPSBwZW5kaW5nUmVxdWVzdCA9XHJcbiAgICAgICAgICAgICAgICBsb2FkZXIoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyID0gZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIgOiBuZXcgRXJyb3IoU3RyaW5nKGVycikpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1c2VyT25FcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXJSZXRyeSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc29sdmUocmV0cnkoKSk7IH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXNlckZhaWwgPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZWplY3QoZXJyKTsgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJPbkVycm9yKGVyciwgdXNlclJldHJ5LCB1c2VyRmFpbCwgcmV0cmllcyArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChjb21wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNSZXF1ZXN0ICE9PSBwZW5kaW5nUmVxdWVzdCAmJiBwZW5kaW5nUmVxdWVzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGVuZGluZ1JlcXVlc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb21wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oXCJBc3luYyBjb21wb25lbnQgbG9hZGVyIHJlc29sdmVkIHRvIHVuZGVmaW5lZC4gXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJJZiB5b3UgYXJlIHVzaW5nIHJldHJ5KCksIG1ha2Ugc3VyZSB0byByZXR1cm4gaXRzIHJldHVybiB2YWx1ZS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGludGVyb3AgbW9kdWxlIGRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29tcCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoY29tcC5fX2VzTW9kdWxlIHx8IGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbXAgJiYgIWlzT2JqZWN0KGNvbXApICYmICFpc0Z1bmN0aW9uKGNvbXApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXN5bmMgY29tcG9uZW50IGxvYWQgcmVzdWx0OiBcIi5jb25jYXQoY29tcCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29tcDtcclxuICAgICAgICAgICAgICAgIH0pKSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY29tcG9uZW50ID0gbG9hZCgpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNvbXBvbmVudDogY29tcG9uZW50LFxyXG4gICAgICAgICAgICBkZWxheTogZGVsYXksXHJcbiAgICAgICAgICAgIHRpbWVvdXQ6IHRpbWVvdXQsXHJcbiAgICAgICAgICAgIGVycm9yOiBlcnJvckNvbXBvbmVudCxcclxuICAgICAgICAgICAgbG9hZGluZzogbG9hZGluZ0NvbXBvbmVudFxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpZmVDeWNsZShob29rTmFtZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChmbiwgdGFyZ2V0KSB7XHJcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7IHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZTsgfVxyXG4gICAgICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcclxuICAgICAgICAgICAgICAgIHdhcm4oXCJcIi5jb25jYXQoZm9ybWF0TmFtZShob29rTmFtZSksIFwiIGlzIGNhbGxlZCB3aGVuIHRoZXJlIGlzIG5vIGFjdGl2ZSBjb21wb25lbnQgaW5zdGFuY2UgdG8gYmUgXCIpICtcclxuICAgICAgICAgICAgICAgICAgICBcImFzc29jaWF0ZWQgd2l0aC4gXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiTGlmZWN5Y2xlIGluamVjdGlvbiBBUElzIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGV4ZWN1dGlvbiBvZiBzZXR1cCgpLlwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaW5qZWN0SG9vayh0YXJnZXQsIGhvb2tOYW1lLCBmbik7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGZvcm1hdE5hbWUobmFtZSkge1xyXG4gICAgaWYgKG5hbWUgPT09ICdiZWZvcmVEZXN0cm95Jykge1xyXG4gICAgICAgIG5hbWUgPSAnYmVmb3JlVW5tb3VudCc7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChuYW1lID09PSAnZGVzdHJveWVkJykge1xyXG4gICAgICAgIG5hbWUgPSAndW5tb3VudGVkJztcclxuICAgIH1cclxuICAgIHJldHVybiBcIm9uXCIuY29uY2F0KG5hbWVbMF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSkpO1xyXG59XHJcbmZ1bmN0aW9uIGluamVjdEhvb2soaW5zdGFuY2UsIGhvb2tOYW1lLCBmbikge1xyXG4gICAgdmFyIG9wdGlvbnMgPSBpbnN0YW5jZS4kb3B0aW9ucztcclxuICAgIG9wdGlvbnNbaG9va05hbWVdID0gbWVyZ2VMaWZlY3ljbGVIb29rKG9wdGlvbnNbaG9va05hbWVdLCBmbik7XHJcbn1cclxudmFyIG9uQmVmb3JlTW91bnQgPSBjcmVhdGVMaWZlQ3ljbGUoJ2JlZm9yZU1vdW50Jyk7XHJcbnZhciBvbk1vdW50ZWQgPSBjcmVhdGVMaWZlQ3ljbGUoJ21vdW50ZWQnKTtcclxudmFyIG9uQmVmb3JlVXBkYXRlID0gY3JlYXRlTGlmZUN5Y2xlKCdiZWZvcmVVcGRhdGUnKTtcclxudmFyIG9uVXBkYXRlZCA9IGNyZWF0ZUxpZmVDeWNsZSgndXBkYXRlZCcpO1xyXG52YXIgb25CZWZvcmVVbm1vdW50ID0gY3JlYXRlTGlmZUN5Y2xlKCdiZWZvcmVEZXN0cm95Jyk7XHJcbnZhciBvblVubW91bnRlZCA9IGNyZWF0ZUxpZmVDeWNsZSgnZGVzdHJveWVkJyk7XHJcbnZhciBvbkVycm9yQ2FwdHVyZWQgPSBjcmVhdGVMaWZlQ3ljbGUoJ2Vycm9yQ2FwdHVyZWQnKTtcclxudmFyIG9uQWN0aXZhdGVkID0gY3JlYXRlTGlmZUN5Y2xlKCdhY3RpdmF0ZWQnKTtcclxudmFyIG9uRGVhY3RpdmF0ZWQgPSBjcmVhdGVMaWZlQ3ljbGUoJ2RlYWN0aXZhdGVkJyk7XHJcbnZhciBvblNlcnZlclByZWZldGNoID0gY3JlYXRlTGlmZUN5Y2xlKCdzZXJ2ZXJQcmVmZXRjaCcpO1xyXG52YXIgb25SZW5kZXJUcmFja2VkID0gY3JlYXRlTGlmZUN5Y2xlKCdyZW5kZXJUcmFja2VkJyk7XHJcbnZhciBvblJlbmRlclRyaWdnZXJlZCA9IGNyZWF0ZUxpZmVDeWNsZSgncmVuZGVyVHJpZ2dlcmVkJyk7XG5cbi8qKlxyXG4gKiBOb3RlOiBhbHNvIHVwZGF0ZSBkaXN0L3Z1ZS5ydW50aW1lLm1qcyB3aGVuIGFkZGluZyBuZXcgZXhwb3J0cyB0byB0aGlzIGZpbGUuXHJcbiAqL1xyXG52YXIgdmVyc2lvbiA9ICcyLjcuNSc7XHJcbi8qKlxyXG4gKiBAaW50ZXJuYWwgdHlwZSBpcyBtYW51YWxseSBkZWNsYXJlZCBpbiA8cm9vdD4vdHlwZXMvdjMtZGVmaW5lLWNvbXBvbmVudC5kLnRzXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWZpbmVDb21wb25lbnQob3B0aW9ucykge1xyXG4gICAgcmV0dXJuIG9wdGlvbnM7XHJcbn1cblxudmFyIHNlZW5PYmplY3RzID0gbmV3IF9TZXQoKTtcclxuLyoqXHJcbiAqIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlIGFuIG9iamVjdCB0byBldm9rZSBhbGwgY29udmVydGVkXHJcbiAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XHJcbiAqIGlzIGNvbGxlY3RlZCBhcyBhIFwiZGVlcFwiIGRlcGVuZGVuY3kuXHJcbiAqL1xyXG5mdW5jdGlvbiB0cmF2ZXJzZSh2YWwpIHtcclxuICAgIF90cmF2ZXJzZSh2YWwsIHNlZW5PYmplY3RzKTtcclxuICAgIHNlZW5PYmplY3RzLmNsZWFyKCk7XHJcbiAgICByZXR1cm4gdmFsO1xyXG59XHJcbmZ1bmN0aW9uIF90cmF2ZXJzZSh2YWwsIHNlZW4pIHtcclxuICAgIHZhciBpLCBrZXlzO1xyXG4gICAgdmFyIGlzQSA9IGlzQXJyYXkodmFsKTtcclxuICAgIGlmICgoIWlzQSAmJiAhaXNPYmplY3QodmFsKSkgfHxcclxuICAgICAgICBPYmplY3QuaXNGcm96ZW4odmFsKSB8fFxyXG4gICAgICAgIHZhbCBpbnN0YW5jZW9mIFZOb2RlKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHZhbC5fX29iX18pIHtcclxuICAgICAgICB2YXIgZGVwSWQgPSB2YWwuX19vYl9fLmRlcC5pZDtcclxuICAgICAgICBpZiAoc2Vlbi5oYXMoZGVwSWQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2Vlbi5hZGQoZGVwSWQpO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzQSkge1xyXG4gICAgICAgIGkgPSB2YWwubGVuZ3RoO1xyXG4gICAgICAgIHdoaWxlIChpLS0pXHJcbiAgICAgICAgICAgIF90cmF2ZXJzZSh2YWxbaV0sIHNlZW4pO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNSZWYodmFsKSkge1xyXG4gICAgICAgIF90cmF2ZXJzZSh2YWwudmFsdWUsIHNlZW4pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XHJcbiAgICAgICAgaSA9IGtleXMubGVuZ3RoO1xyXG4gICAgICAgIHdoaWxlIChpLS0pXHJcbiAgICAgICAgICAgIF90cmF2ZXJzZSh2YWxba2V5c1tpXV0sIHNlZW4pO1xyXG4gICAgfVxyXG59XG5cbnZhciB1aWQkMSA9IDA7XHJcbi8qKlxyXG4gKiBBIHdhdGNoZXIgcGFyc2VzIGFuIGV4cHJlc3Npb24sIGNvbGxlY3RzIGRlcGVuZGVuY2llcyxcclxuICogYW5kIGZpcmVzIGNhbGxiYWNrIHdoZW4gdGhlIGV4cHJlc3Npb24gdmFsdWUgY2hhbmdlcy5cclxuICogVGhpcyBpcyB1c2VkIGZvciBib3RoIHRoZSAkd2F0Y2goKSBhcGkgYW5kIGRpcmVjdGl2ZXMuXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxudmFyIFdhdGNoZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucywgaXNSZW5kZXJXYXRjaGVyKSB7XHJcbiAgICAgICAgcmVjb3JkRWZmZWN0U2NvcGUodGhpcywgYWN0aXZlRWZmZWN0U2NvcGUgfHwgKHZtID8gdm0uX3Njb3BlIDogdW5kZWZpbmVkKSk7XHJcbiAgICAgICAgaWYgKCh0aGlzLnZtID0gdm0pKSB7XHJcbiAgICAgICAgICAgIGlmIChpc1JlbmRlcldhdGNoZXIpIHtcclxuICAgICAgICAgICAgICAgIHZtLl93YXRjaGVyID0gdGhpcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBvcHRpb25zXHJcbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgdGhpcy5kZWVwID0gISFvcHRpb25zLmRlZXA7XHJcbiAgICAgICAgICAgIHRoaXMudXNlciA9ICEhb3B0aW9ucy51c2VyO1xyXG4gICAgICAgICAgICB0aGlzLmxhenkgPSAhIW9wdGlvbnMubGF6eTtcclxuICAgICAgICAgICAgdGhpcy5zeW5jID0gISFvcHRpb25zLnN5bmM7XHJcbiAgICAgICAgICAgIHRoaXMuYmVmb3JlID0gb3B0aW9ucy5iZWZvcmU7XHJcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uVHJhY2sgPSBvcHRpb25zLm9uVHJhY2s7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uVHJpZ2dlciA9IG9wdGlvbnMub25UcmlnZ2VyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmRlZXAgPSB0aGlzLnVzZXIgPSB0aGlzLmxhenkgPSB0aGlzLnN5bmMgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jYiA9IGNiO1xyXG4gICAgICAgIHRoaXMuaWQgPSArK3VpZCQxOyAvLyB1aWQgZm9yIGJhdGNoaW5nXHJcbiAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZGlydHkgPSB0aGlzLmxhenk7IC8vIGZvciBsYXp5IHdhdGNoZXJzXHJcbiAgICAgICAgdGhpcy5kZXBzID0gW107XHJcbiAgICAgICAgdGhpcy5uZXdEZXBzID0gW107XHJcbiAgICAgICAgdGhpcy5kZXBJZHMgPSBuZXcgX1NldCgpO1xyXG4gICAgICAgIHRoaXMubmV3RGVwSWRzID0gbmV3IF9TZXQoKTtcclxuICAgICAgICB0aGlzLmV4cHJlc3Npb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gZXhwT3JGbi50b1N0cmluZygpIDogJyc7XHJcbiAgICAgICAgLy8gcGFyc2UgZXhwcmVzc2lvbiBmb3IgZ2V0dGVyXHJcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oZXhwT3JGbikpIHtcclxuICAgICAgICAgICAgdGhpcy5nZXR0ZXIgPSBleHBPckZuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5nZXR0ZXIgPSBwYXJzZVBhdGgoZXhwT3JGbik7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5nZXR0ZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0dGVyID0gbm9vcDtcclxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKFwiRmFpbGVkIHdhdGNoaW5nIHBhdGg6IFxcXCJcIi5jb25jYXQoZXhwT3JGbiwgXCJcXFwiIFwiKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdXYXRjaGVyIG9ubHkgYWNjZXB0cyBzaW1wbGUgZG90LWRlbGltaXRlZCBwYXRocy4gJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdGb3IgZnVsbCBjb250cm9sLCB1c2UgYSBmdW5jdGlvbiBpbnN0ZWFkLicsIHZtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5sYXp5ID8gdW5kZWZpbmVkIDogdGhpcy5nZXQoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxyXG4gICAgICovXHJcbiAgICBXYXRjaGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcHVzaFRhcmdldCh0aGlzKTtcclxuICAgICAgICB2YXIgdmFsdWU7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcy52bTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMuZ2V0dGVyLmNhbGwodm0sIHZtKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudXNlcikge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwiZ2V0dGVyIGZvciB3YXRjaGVyIFxcXCJcIi5jb25jYXQodGhpcy5leHByZXNzaW9uLCBcIlxcXCJcIikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgLy8gXCJ0b3VjaFwiIGV2ZXJ5IHByb3BlcnR5IHNvIHRoZXkgYXJlIGFsbCB0cmFja2VkIGFzXHJcbiAgICAgICAgICAgIC8vIGRlcGVuZGVuY2llcyBmb3IgZGVlcCB3YXRjaGluZ1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kZWVwKSB7XHJcbiAgICAgICAgICAgICAgICB0cmF2ZXJzZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcG9wVGFyZ2V0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYW51cERlcHMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cclxuICAgICAqL1xyXG4gICAgV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gKGRlcCkge1xyXG4gICAgICAgIHZhciBpZCA9IGRlcC5pZDtcclxuICAgICAgICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcclxuICAgICAgICAgICAgdGhpcy5uZXdEZXBJZHMuYWRkKGlkKTtcclxuICAgICAgICAgICAgdGhpcy5uZXdEZXBzLnB1c2goZGVwKTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XHJcbiAgICAgICAgICAgICAgICBkZXAuYWRkU3ViKHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2xlYW4gdXAgZm9yIGRlcGVuZGVuY3kgY29sbGVjdGlvbi5cclxuICAgICAqL1xyXG4gICAgV2F0Y2hlci5wcm90b3R5cGUuY2xlYW51cERlcHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xyXG4gICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgICAgdmFyIGRlcCA9IHRoaXMuZGVwc1tpXTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoZGVwLmlkKSkge1xyXG4gICAgICAgICAgICAgICAgZGVwLnJlbW92ZVN1Yih0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdG1wID0gdGhpcy5kZXBJZHM7XHJcbiAgICAgICAgdGhpcy5kZXBJZHMgPSB0aGlzLm5ld0RlcElkcztcclxuICAgICAgICB0aGlzLm5ld0RlcElkcyA9IHRtcDtcclxuICAgICAgICB0aGlzLm5ld0RlcElkcy5jbGVhcigpO1xyXG4gICAgICAgIHRtcCA9IHRoaXMuZGVwcztcclxuICAgICAgICB0aGlzLmRlcHMgPSB0aGlzLm5ld0RlcHM7XHJcbiAgICAgICAgdGhpcy5uZXdEZXBzID0gdG1wO1xyXG4gICAgICAgIHRoaXMubmV3RGVwcy5sZW5ndGggPSAwO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU3Vic2NyaWJlciBpbnRlcmZhY2UuXHJcbiAgICAgKiBXaWxsIGJlIGNhbGxlZCB3aGVuIGEgZGVwZW5kZW5jeSBjaGFuZ2VzLlxyXG4gICAgICovXHJcbiAgICBXYXRjaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cclxuICAgICAgICBpZiAodGhpcy5sYXp5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLnN5bmMpIHtcclxuICAgICAgICAgICAgdGhpcy5ydW4oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHF1ZXVlV2F0Y2hlcih0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTY2hlZHVsZXIgam9iIGludGVyZmFjZS5cclxuICAgICAqIFdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIuXHJcbiAgICAgKi9cclxuICAgIFdhdGNoZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5hY3RpdmUpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5nZXQoKTtcclxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB0aGlzLnZhbHVlIHx8XHJcbiAgICAgICAgICAgICAgICAvLyBEZWVwIHdhdGNoZXJzIGFuZCB3YXRjaGVycyBvbiBPYmplY3QvQXJyYXlzIHNob3VsZCBmaXJlIGV2ZW5cclxuICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBiZWNhdXNlIHRoZSB2YWx1ZSBtYXlcclxuICAgICAgICAgICAgICAgIC8vIGhhdmUgbXV0YXRlZC5cclxuICAgICAgICAgICAgICAgIGlzT2JqZWN0KHZhbHVlKSB8fFxyXG4gICAgICAgICAgICAgICAgdGhpcy5kZWVwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzZXQgbmV3IHZhbHVlXHJcbiAgICAgICAgICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudXNlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmZvID0gXCJjYWxsYmFjayBmb3Igd2F0Y2hlciBcXFwiXCIuY29uY2F0KHRoaXMuZXhwcmVzc2lvbiwgXCJcXFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKHRoaXMuY2IsIHRoaXMudm0sIFt2YWx1ZSwgb2xkVmFsdWVdLCB0aGlzLnZtLCBpbmZvKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxyXG4gICAgICogVGhpcyBvbmx5IGdldHMgY2FsbGVkIGZvciBsYXp5IHdhdGNoZXJzLlxyXG4gICAgICovXHJcbiAgICBXYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5nZXQoKTtcclxuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZXBlbmQgb24gYWxsIGRlcHMgY29sbGVjdGVkIGJ5IHRoaXMgd2F0Y2hlci5cclxuICAgICAqL1xyXG4gICAgV2F0Y2hlci5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcclxuICAgICAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVwc1tpXS5kZXBlbmQoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cclxuICAgICAqL1xyXG4gICAgV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudm0gJiYgIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcclxuICAgICAgICAgICAgcmVtb3ZlJDIodGhpcy52bS5fc2NvcGUuZWZmZWN0cywgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSkge1xyXG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XHJcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVwc1tpXS5yZW1vdmVTdWIodGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMub25TdG9wKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uU3RvcCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBXYXRjaGVyO1xyXG59KCkpO1xuXG52YXIgbWFyaztcclxudmFyIG1lYXN1cmU7XHJcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICB2YXIgcGVyZl8xID0gaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZTtcclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgaWYgKHBlcmZfMSAmJlxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBwZXJmXzEubWFyayAmJlxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBwZXJmXzEubWVhc3VyZSAmJlxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBwZXJmXzEuY2xlYXJNYXJrcyAmJlxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBwZXJmXzEuY2xlYXJNZWFzdXJlcykge1xyXG4gICAgICAgIG1hcmsgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiBwZXJmXzEubWFyayh0YWcpOyB9O1xyXG4gICAgICAgIG1lYXN1cmUgPSBmdW5jdGlvbiAobmFtZSwgc3RhcnRUYWcsIGVuZFRhZykge1xyXG4gICAgICAgICAgICBwZXJmXzEubWVhc3VyZShuYW1lLCBzdGFydFRhZywgZW5kVGFnKTtcclxuICAgICAgICAgICAgcGVyZl8xLmNsZWFyTWFya3Moc3RhcnRUYWcpO1xyXG4gICAgICAgICAgICBwZXJmXzEuY2xlYXJNYXJrcyhlbmRUYWcpO1xyXG4gICAgICAgICAgICAvLyBwZXJmLmNsZWFyTWVhc3VyZXMobmFtZSlcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XG5cbmZ1bmN0aW9uIGluaXRFdmVudHModm0pIHtcclxuICAgIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgdm0uX2hhc0hvb2tFdmVudCA9IGZhbHNlO1xyXG4gICAgLy8gaW5pdCBwYXJlbnQgYXR0YWNoZWQgZXZlbnRzXHJcbiAgICB2YXIgbGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcclxuICAgIGlmIChsaXN0ZW5lcnMpIHtcclxuICAgICAgICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycyk7XHJcbiAgICB9XHJcbn1cclxudmFyIHRhcmdldCQxO1xyXG5mdW5jdGlvbiBhZGQkMShldmVudCwgZm4pIHtcclxuICAgIHRhcmdldCQxLiRvbihldmVudCwgZm4pO1xyXG59XHJcbmZ1bmN0aW9uIHJlbW92ZSQxKGV2ZW50LCBmbikge1xyXG4gICAgdGFyZ2V0JDEuJG9mZihldmVudCwgZm4pO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZU9uY2VIYW5kbGVyJDEoZXZlbnQsIGZuKSB7XHJcbiAgICB2YXIgX3RhcmdldCA9IHRhcmdldCQxO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyKCkge1xyXG4gICAgICAgIHZhciByZXMgPSBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xyXG4gICAgICAgIGlmIChyZXMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgX3RhcmdldC4kb2ZmKGV2ZW50LCBvbmNlSGFuZGxlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycywgb2xkTGlzdGVuZXJzKSB7XHJcbiAgICB0YXJnZXQkMSA9IHZtO1xyXG4gICAgdXBkYXRlTGlzdGVuZXJzKGxpc3RlbmVycywgb2xkTGlzdGVuZXJzIHx8IHt9LCBhZGQkMSwgcmVtb3ZlJDEsIGNyZWF0ZU9uY2VIYW5kbGVyJDEsIHZtKTtcclxuICAgIHRhcmdldCQxID0gdW5kZWZpbmVkO1xyXG59XHJcbmZ1bmN0aW9uIGV2ZW50c01peGluKFZ1ZSkge1xyXG4gICAgdmFyIGhvb2tSRSA9IC9eaG9vazovO1xyXG4gICAgVnVlLnByb3RvdHlwZS4kb24gPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICBpZiAoaXNBcnJheShldmVudCkpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZtLiRvbihldmVudFtpXSwgZm4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAodm0uX2V2ZW50c1tldmVudF0gfHwgKHZtLl9ldmVudHNbZXZlbnRdID0gW10pKS5wdXNoKGZuKTtcclxuICAgICAgICAgICAgLy8gb3B0aW1pemUgaG9vazpldmVudCBjb3N0IGJ5IHVzaW5nIGEgYm9vbGVhbiBmbGFnIG1hcmtlZCBhdCByZWdpc3RyYXRpb25cclxuICAgICAgICAgICAgLy8gaW5zdGVhZCBvZiBhIGhhc2ggbG9va3VwXHJcbiAgICAgICAgICAgIGlmIChob29rUkUudGVzdChldmVudCkpIHtcclxuICAgICAgICAgICAgICAgIHZtLl9oYXNIb29rRXZlbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2bTtcclxuICAgIH07XHJcbiAgICBWdWUucHJvdG90eXBlLiRvbmNlID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgZnVuY3Rpb24gb24oKSB7XHJcbiAgICAgICAgICAgIHZtLiRvZmYoZXZlbnQsIG9uKTtcclxuICAgICAgICAgICAgZm4uYXBwbHkodm0sIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9uLmZuID0gZm47XHJcbiAgICAgICAgdm0uJG9uKGV2ZW50LCBvbik7XHJcbiAgICAgICAgcmV0dXJuIHZtO1xyXG4gICAgfTtcclxuICAgIFZ1ZS5wcm90b3R5cGUuJG9mZiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIC8vIGFsbFxyXG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgICAgICAgICAgcmV0dXJuIHZtO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBhcnJheSBvZiBldmVudHNcclxuICAgICAgICBpZiAoaXNBcnJheShldmVudCkpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaV8xID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaV8xIDwgbDsgaV8xKyspIHtcclxuICAgICAgICAgICAgICAgIHZtLiRvZmYoZXZlbnRbaV8xXSwgZm4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB2bTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gc3BlY2lmaWMgZXZlbnRcclxuICAgICAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XHJcbiAgICAgICAgaWYgKCFjYnMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZtO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWZuKSB7XHJcbiAgICAgICAgICAgIHZtLl9ldmVudHNbZXZlbnRdID0gbnVsbDtcclxuICAgICAgICAgICAgcmV0dXJuIHZtO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBzcGVjaWZpYyBoYW5kbGVyXHJcbiAgICAgICAgdmFyIGNiO1xyXG4gICAgICAgIHZhciBpID0gY2JzLmxlbmd0aDtcclxuICAgICAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgICAgIGNiID0gY2JzW2ldO1xyXG4gICAgICAgICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xyXG4gICAgICAgICAgICAgICAgY2JzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2bTtcclxuICAgIH07XHJcbiAgICBWdWUucHJvdG90eXBlLiRlbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgICAgICB2YXIgbG93ZXJDYXNlRXZlbnQgPSBldmVudC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICBpZiAobG93ZXJDYXNlRXZlbnQgIT09IGV2ZW50ICYmIHZtLl9ldmVudHNbbG93ZXJDYXNlRXZlbnRdKSB7XHJcbiAgICAgICAgICAgICAgICB0aXAoXCJFdmVudCBcXFwiXCIuY29uY2F0KGxvd2VyQ2FzZUV2ZW50LCBcIlxcXCIgaXMgZW1pdHRlZCBpbiBjb21wb25lbnQgXCIpICtcclxuICAgICAgICAgICAgICAgICAgICBcIlwiLmNvbmNhdChmb3JtYXRDb21wb25lbnROYW1lKHZtKSwgXCIgYnV0IHRoZSBoYW5kbGVyIGlzIHJlZ2lzdGVyZWQgZm9yIFxcXCJcIikuY29uY2F0KGV2ZW50LCBcIlxcXCIuIFwiKSArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCB5b3UgY2Fubm90IHVzZSBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ2LW9uIHRvIGxpc3RlbiB0byBjYW1lbENhc2UgZXZlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIHRlbXBsYXRlcy4gXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiLmNvbmNhdChoeXBoZW5hdGUoZXZlbnQpLCBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIpLmNvbmNhdChldmVudCwgXCJcXFwiLlwiKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdO1xyXG4gICAgICAgIGlmIChjYnMpIHtcclxuICAgICAgICAgICAgY2JzID0gY2JzLmxlbmd0aCA+IDEgPyB0b0FycmF5KGNicykgOiBjYnM7XHJcbiAgICAgICAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xyXG4gICAgICAgICAgICB2YXIgaW5mbyA9IFwiZXZlbnQgaGFuZGxlciBmb3IgXFxcIlwiLmNvbmNhdChldmVudCwgXCJcXFwiXCIpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNic1tpXSwgdm0sIGFyZ3MsIHZtLCBpbmZvKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdm07XHJcbiAgICB9O1xyXG59XG5cbnZhciBhY3RpdmVJbnN0YW5jZSA9IG51bGw7XHJcbnZhciBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcclxuZnVuY3Rpb24gc2V0QWN0aXZlSW5zdGFuY2Uodm0pIHtcclxuICAgIHZhciBwcmV2QWN0aXZlSW5zdGFuY2UgPSBhY3RpdmVJbnN0YW5jZTtcclxuICAgIGFjdGl2ZUluc3RhbmNlID0gdm07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGFjdGl2ZUluc3RhbmNlID0gcHJldkFjdGl2ZUluc3RhbmNlO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBpbml0TGlmZWN5Y2xlKHZtKSB7XHJcbiAgICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xyXG4gICAgLy8gbG9jYXRlIGZpcnN0IG5vbi1hYnN0cmFjdCBwYXJlbnRcclxuICAgIHZhciBwYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcclxuICAgIGlmIChwYXJlbnQgJiYgIW9wdGlvbnMuYWJzdHJhY3QpIHtcclxuICAgICAgICB3aGlsZSAocGFyZW50LiRvcHRpb25zLmFic3RyYWN0ICYmIHBhcmVudC4kcGFyZW50KSB7XHJcbiAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC4kcGFyZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBwYXJlbnQuJGNoaWxkcmVuLnB1c2godm0pO1xyXG4gICAgfVxyXG4gICAgdm0uJHBhcmVudCA9IHBhcmVudDtcclxuICAgIHZtLiRyb290ID0gcGFyZW50ID8gcGFyZW50LiRyb290IDogdm07XHJcbiAgICB2bS4kY2hpbGRyZW4gPSBbXTtcclxuICAgIHZtLiRyZWZzID0ge307XHJcbiAgICB2bS5fcHJvdmlkZWQgPSBwYXJlbnQgPyBwYXJlbnQuX3Byb3ZpZGVkIDogT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgIHZtLl93YXRjaGVyID0gbnVsbDtcclxuICAgIHZtLl9pbmFjdGl2ZSA9IG51bGw7XHJcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcclxuICAgIHZtLl9pc01vdW50ZWQgPSBmYWxzZTtcclxuICAgIHZtLl9pc0Rlc3Ryb3llZCA9IGZhbHNlO1xyXG4gICAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBsaWZlY3ljbGVNaXhpbihWdWUpIHtcclxuICAgIFZ1ZS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICB2YXIgcHJldkVsID0gdm0uJGVsO1xyXG4gICAgICAgIHZhciBwcmV2Vm5vZGUgPSB2bS5fdm5vZGU7XHJcbiAgICAgICAgdmFyIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHZtKTtcclxuICAgICAgICB2bS5fdm5vZGUgPSB2bm9kZTtcclxuICAgICAgICAvLyBWdWUucHJvdG90eXBlLl9fcGF0Y2hfXyBpcyBpbmplY3RlZCBpbiBlbnRyeSBwb2ludHNcclxuICAgICAgICAvLyBiYXNlZCBvbiB0aGUgcmVuZGVyaW5nIGJhY2tlbmQgdXNlZC5cclxuICAgICAgICBpZiAoIXByZXZWbm9kZSkge1xyXG4gICAgICAgICAgICAvLyBpbml0aWFsIHJlbmRlclxyXG4gICAgICAgICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18odm0uJGVsLCB2bm9kZSwgaHlkcmF0aW5nLCBmYWxzZSAvKiByZW1vdmVPbmx5ICovKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHVwZGF0ZXNcclxuICAgICAgICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcclxuICAgICAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcclxuICAgICAgICBpZiAocHJldkVsKSB7XHJcbiAgICAgICAgICAgIHByZXZFbC5fX3Z1ZV9fID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZtLiRlbCkge1xyXG4gICAgICAgICAgICB2bS4kZWwuX192dWVfXyA9IHZtO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpZiBwYXJlbnQgaXMgYW4gSE9DLCB1cGRhdGUgaXRzICRlbCBhcyB3ZWxsXHJcbiAgICAgICAgaWYgKHZtLiR2bm9kZSAmJiB2bS4kcGFyZW50ICYmIHZtLiR2bm9kZSA9PT0gdm0uJHBhcmVudC5fdm5vZGUpIHtcclxuICAgICAgICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcclxuICAgICAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxyXG4gICAgfTtcclxuICAgIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHZtLl93YXRjaGVyKSB7XHJcbiAgICAgICAgICAgIHZtLl93YXRjaGVyLnVwZGF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBWdWUucHJvdG90eXBlLiRkZXN0cm95ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FsbEhvb2skMSh2bSwgJ2JlZm9yZURlc3Ryb3knKTtcclxuICAgICAgICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IHRydWU7XHJcbiAgICAgICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSBwYXJlbnRcclxuICAgICAgICB2YXIgcGFyZW50ID0gdm0uJHBhcmVudDtcclxuICAgICAgICBpZiAocGFyZW50ICYmICFwYXJlbnQuX2lzQmVpbmdEZXN0cm95ZWQgJiYgIXZtLiRvcHRpb25zLmFic3RyYWN0KSB7XHJcbiAgICAgICAgICAgIHJlbW92ZSQyKHBhcmVudC4kY2hpbGRyZW4sIHZtKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdGVhcmRvd24gc2NvcGUuIHRoaXMgaW5jbHVkZXMgYm90aCB0aGUgcmVuZGVyIHdhdGNoZXIgYW5kIG90aGVyXHJcbiAgICAgICAgLy8gd2F0Y2hlcnMgY3JlYXRlZFxyXG4gICAgICAgIHZtLl9zY29wZS5zdG9wKCk7XHJcbiAgICAgICAgLy8gcmVtb3ZlIHJlZmVyZW5jZSBmcm9tIGRhdGEgb2JcclxuICAgICAgICAvLyBmcm96ZW4gb2JqZWN0IG1heSBub3QgaGF2ZSBvYnNlcnZlci5cclxuICAgICAgICBpZiAodm0uX2RhdGEuX19vYl9fKSB7XHJcbiAgICAgICAgICAgIHZtLl9kYXRhLl9fb2JfXy52bUNvdW50LS07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNhbGwgdGhlIGxhc3QgaG9vay4uLlxyXG4gICAgICAgIHZtLl9pc0Rlc3Ryb3llZCA9IHRydWU7XHJcbiAgICAgICAgLy8gaW52b2tlIGRlc3Ryb3kgaG9va3Mgb24gY3VycmVudCByZW5kZXJlZCB0cmVlXHJcbiAgICAgICAgdm0uX19wYXRjaF9fKHZtLl92bm9kZSwgbnVsbCk7XHJcbiAgICAgICAgLy8gZmlyZSBkZXN0cm95ZWQgaG9va1xyXG4gICAgICAgIGNhbGxIb29rJDEodm0sICdkZXN0cm95ZWQnKTtcclxuICAgICAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxyXG4gICAgICAgIHZtLiRvZmYoKTtcclxuICAgICAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcclxuICAgICAgICBpZiAodm0uJGVsKSB7XHJcbiAgICAgICAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gcmVsZWFzZSBjaXJjdWxhciByZWZlcmVuY2UgKCM2NzU5KVxyXG4gICAgICAgIGlmICh2bS4kdm5vZGUpIHtcclxuICAgICAgICAgICAgdm0uJHZub2RlLnBhcmVudCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBtb3VudENvbXBvbmVudCh2bSwgZWwsIGh5ZHJhdGluZykge1xyXG4gICAgdm0uJGVsID0gZWw7XHJcbiAgICBpZiAoIXZtLiRvcHRpb25zLnJlbmRlcikge1xyXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgaW52YWxpZCB0eXBlXHJcbiAgICAgICAgdm0uJG9wdGlvbnMucmVuZGVyID0gY3JlYXRlRW1wdHlWTm9kZTtcclxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICAgICAgaWYgKCh2bS4kb3B0aW9ucy50ZW1wbGF0ZSAmJiB2bS4kb3B0aW9ucy50ZW1wbGF0ZS5jaGFyQXQoMCkgIT09ICcjJykgfHxcclxuICAgICAgICAgICAgICAgIHZtLiRvcHRpb25zLmVsIHx8XHJcbiAgICAgICAgICAgICAgICBlbCkge1xyXG4gICAgICAgICAgICAgICAgd2FybignWW91IGFyZSB1c2luZyB0aGUgcnVudGltZS1vbmx5IGJ1aWxkIG9mIFZ1ZSB3aGVyZSB0aGUgdGVtcGxhdGUgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJ2NvbXBpbGVyIGlzIG5vdCBhdmFpbGFibGUuIEVpdGhlciBwcmUtY29tcGlsZSB0aGUgdGVtcGxhdGVzIGludG8gJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJ3JlbmRlciBmdW5jdGlvbnMsIG9yIHVzZSB0aGUgY29tcGlsZXItaW5jbHVkZWQgYnVpbGQuJywgdm0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgd2FybignRmFpbGVkIHRvIG1vdW50IGNvbXBvbmVudDogdGVtcGxhdGUgb3IgcmVuZGVyIGZ1bmN0aW9uIG5vdCBkZWZpbmVkLicsIHZtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhbGxIb29rJDEodm0sICdiZWZvcmVNb3VudCcpO1xyXG4gICAgdmFyIHVwZGF0ZUNvbXBvbmVudDtcclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcclxuICAgICAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBuYW1lID0gdm0uX25hbWU7XHJcbiAgICAgICAgICAgIHZhciBpZCA9IHZtLl91aWQ7XHJcbiAgICAgICAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIuY29uY2F0KGlkKTtcclxuICAgICAgICAgICAgdmFyIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiLmNvbmNhdChpZCk7XHJcbiAgICAgICAgICAgIG1hcmsoc3RhcnRUYWcpO1xyXG4gICAgICAgICAgICB2YXIgdm5vZGUgPSB2bS5fcmVuZGVyKCk7XHJcbiAgICAgICAgICAgIG1hcmsoZW5kVGFnKTtcclxuICAgICAgICAgICAgbWVhc3VyZShcInZ1ZSBcIi5jb25jYXQobmFtZSwgXCIgcmVuZGVyXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcclxuICAgICAgICAgICAgbWFyayhzdGFydFRhZyk7XHJcbiAgICAgICAgICAgIHZtLl91cGRhdGUodm5vZGUsIGh5ZHJhdGluZyk7XHJcbiAgICAgICAgICAgIG1hcmsoZW5kVGFnKTtcclxuICAgICAgICAgICAgbWVhc3VyZShcInZ1ZSBcIi5jb25jYXQobmFtZSwgXCIgcGF0Y2hcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICB2YXIgd2F0Y2hlck9wdGlvbnMgPSB7XHJcbiAgICAgICAgYmVmb3JlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxIb29rJDEodm0sICdiZWZvcmVVcGRhdGUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgIHdhdGNoZXJPcHRpb25zLm9uVHJhY2sgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gY2FsbEhvb2skMSh2bSwgJ3JlbmRlclRyYWNrZWQnLCBbZV0pOyB9O1xyXG4gICAgICAgIHdhdGNoZXJPcHRpb25zLm9uVHJpZ2dlciA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBjYWxsSG9vayQxKHZtLCAncmVuZGVyVHJpZ2dlcmVkJywgW2VdKTsgfTtcclxuICAgIH1cclxuICAgIC8vIHdlIHNldCB0aGlzIHRvIHZtLl93YXRjaGVyIGluc2lkZSB0aGUgd2F0Y2hlcidzIGNvbnN0cnVjdG9yXHJcbiAgICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxyXG4gICAgLy8gY29tcG9uZW50J3MgbW91bnRlZCBob29rKSwgd2hpY2ggcmVsaWVzIG9uIHZtLl93YXRjaGVyIGJlaW5nIGFscmVhZHkgZGVmaW5lZFxyXG4gICAgbmV3IFdhdGNoZXIodm0sIHVwZGF0ZUNvbXBvbmVudCwgbm9vcCwgd2F0Y2hlck9wdGlvbnMsIHRydWUgLyogaXNSZW5kZXJXYXRjaGVyICovKTtcclxuICAgIGh5ZHJhdGluZyA9IGZhbHNlO1xyXG4gICAgLy8gZmx1c2ggYnVmZmVyIGZvciBmbHVzaDogXCJwcmVcIiB3YXRjaGVycyBxdWV1ZWQgaW4gc2V0dXAoKVxyXG4gICAgdmFyIHByZVdhdGNoZXJzID0gdm0uX3ByZVdhdGNoZXJzO1xyXG4gICAgaWYgKHByZVdhdGNoZXJzKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVXYXRjaGVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBwcmVXYXRjaGVyc1tpXS5ydW4oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBtYW51YWxseSBtb3VudGVkIGluc3RhbmNlLCBjYWxsIG1vdW50ZWQgb24gc2VsZlxyXG4gICAgLy8gbW91bnRlZCBpcyBjYWxsZWQgZm9yIHJlbmRlci1jcmVhdGVkIGNoaWxkIGNvbXBvbmVudHMgaW4gaXRzIGluc2VydGVkIGhvb2tcclxuICAgIGlmICh2bS4kdm5vZGUgPT0gbnVsbCkge1xyXG4gICAgICAgIHZtLl9pc01vdW50ZWQgPSB0cnVlO1xyXG4gICAgICAgIGNhbGxIb29rJDEodm0sICdtb3VudGVkJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdm07XHJcbn1cclxuZnVuY3Rpb24gdXBkYXRlQ2hpbGRDb21wb25lbnQodm0sIHByb3BzRGF0YSwgbGlzdGVuZXJzLCBwYXJlbnRWbm9kZSwgcmVuZGVyQ2hpbGRyZW4pIHtcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgICAgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8vIGRldGVybWluZSB3aGV0aGVyIGNvbXBvbmVudCBoYXMgc2xvdCBjaGlsZHJlblxyXG4gICAgLy8gd2UgbmVlZCB0byBkbyB0aGlzIGJlZm9yZSBvdmVyd3JpdGluZyAkb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4uXHJcbiAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgZHluYW1pYyBzY29wZWRTbG90cyAoaGFuZC13cml0dGVuIG9yIGNvbXBpbGVkIGJ1dCB3aXRoXHJcbiAgICAvLyBkeW5hbWljIHNsb3QgbmFtZXMpLiBTdGF0aWMgc2NvcGVkIHNsb3RzIGNvbXBpbGVkIGZyb20gdGVtcGxhdGUgaGFzIHRoZVxyXG4gICAgLy8gXCIkc3RhYmxlXCIgbWFya2VyLlxyXG4gICAgdmFyIG5ld1Njb3BlZFNsb3RzID0gcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cztcclxuICAgIHZhciBvbGRTY29wZWRTbG90cyA9IHZtLiRzY29wZWRTbG90cztcclxuICAgIHZhciBoYXNEeW5hbWljU2NvcGVkU2xvdCA9ICEhKChuZXdTY29wZWRTbG90cyAmJiAhbmV3U2NvcGVkU2xvdHMuJHN0YWJsZSkgfHxcclxuICAgICAgICAob2xkU2NvcGVkU2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmICFvbGRTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxyXG4gICAgICAgIChuZXdTY29wZWRTbG90cyAmJiB2bS4kc2NvcGVkU2xvdHMuJGtleSAhPT0gbmV3U2NvcGVkU2xvdHMuJGtleSkgfHxcclxuICAgICAgICAoIW5ld1Njb3BlZFNsb3RzICYmIHZtLiRzY29wZWRTbG90cy4ka2V5KSk7XHJcbiAgICAvLyBBbnkgc3RhdGljIHNsb3QgY2hpbGRyZW4gZnJvbSB0aGUgcGFyZW50IG1heSBoYXZlIGNoYW5nZWQgZHVyaW5nIHBhcmVudCdzXHJcbiAgICAvLyB1cGRhdGUuIER5bmFtaWMgc2NvcGVkIHNsb3RzIG1heSBhbHNvIGhhdmUgY2hhbmdlZC4gSW4gc3VjaCBjYXNlcywgYSBmb3JjZWRcclxuICAgIC8vIHVwZGF0ZSBpcyBuZWNlc3NhcnkgdG8gZW5zdXJlIGNvcnJlY3RuZXNzLlxyXG4gICAgdmFyIG5lZWRzRm9yY2VVcGRhdGUgPSAhIShyZW5kZXJDaGlsZHJlbiB8fCAvLyBoYXMgbmV3IHN0YXRpYyBzbG90c1xyXG4gICAgICAgIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiB8fCAvLyBoYXMgb2xkIHN0YXRpYyBzbG90c1xyXG4gICAgICAgIGhhc0R5bmFtaWNTY29wZWRTbG90KTtcclxuICAgIHZhciBwcmV2Vk5vZGUgPSB2bS4kdm5vZGU7XHJcbiAgICB2bS4kb3B0aW9ucy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcclxuICAgIHZtLiR2bm9kZSA9IHBhcmVudFZub2RlOyAvLyB1cGRhdGUgdm0ncyBwbGFjZWhvbGRlciBub2RlIHdpdGhvdXQgcmUtcmVuZGVyXHJcbiAgICBpZiAodm0uX3Zub2RlKSB7XHJcbiAgICAgICAgLy8gdXBkYXRlIGNoaWxkIHRyZWUncyBwYXJlbnRcclxuICAgICAgICB2bS5fdm5vZGUucGFyZW50ID0gcGFyZW50Vm5vZGU7XHJcbiAgICB9XHJcbiAgICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gPSByZW5kZXJDaGlsZHJlbjtcclxuICAgIC8vIHVwZGF0ZSAkYXR0cnMgYW5kICRsaXN0ZW5lcnMgaGFzaFxyXG4gICAgLy8gdGhlc2UgYXJlIGFsc28gcmVhY3RpdmUgc28gdGhleSBtYXkgdHJpZ2dlciBjaGlsZCB1cGRhdGUgaWYgdGhlIGNoaWxkXHJcbiAgICAvLyB1c2VkIHRoZW0gZHVyaW5nIHJlbmRlclxyXG4gICAgdmFyIGF0dHJzID0gcGFyZW50Vm5vZGUuZGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdDtcclxuICAgIGlmICh2bS5fYXR0cnNQcm94eSkge1xyXG4gICAgICAgIC8vIGZvcmNlIHVwZGF0ZSBpZiBhdHRycyBhcmUgYWNjZXNzZWQgYW5kIGhhcyBjaGFuZ2VkIHNpbmNlIGl0IG1heSBiZVxyXG4gICAgICAgIC8vIHBhc3NlZCB0byBhIGNoaWxkIGNvbXBvbmVudC5cclxuICAgICAgICBpZiAoc3luY1NldHVwQXR0cnModm0uX2F0dHJzUHJveHksIGF0dHJzLCAocHJldlZOb2RlLmRhdGEgJiYgcHJldlZOb2RlLmRhdGEuYXR0cnMpIHx8IGVtcHR5T2JqZWN0LCB2bSkpIHtcclxuICAgICAgICAgICAgbmVlZHNGb3JjZVVwZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdm0uJGF0dHJzID0gYXR0cnM7XHJcbiAgICB2bS4kbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xyXG4gICAgLy8gdXBkYXRlIHByb3BzXHJcbiAgICBpZiAocHJvcHNEYXRhICYmIHZtLiRvcHRpb25zLnByb3BzKSB7XHJcbiAgICAgICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcclxuICAgICAgICB2YXIgcHJvcHMgPSB2bS5fcHJvcHM7XHJcbiAgICAgICAgdmFyIHByb3BLZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzIHx8IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcEtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGtleSA9IHByb3BLZXlzW2ldO1xyXG4gICAgICAgICAgICB2YXIgcHJvcE9wdGlvbnMgPSB2bS4kb3B0aW9ucy5wcm9wczsgLy8gd3RmIGZsb3c/XHJcbiAgICAgICAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcclxuICAgICAgICAvLyBrZWVwIGEgY29weSBvZiByYXcgcHJvcHNEYXRhXHJcbiAgICAgICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhID0gcHJvcHNEYXRhO1xyXG4gICAgfVxyXG4gICAgLy8gdXBkYXRlIGxpc3RlbmVyc1xyXG4gICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xyXG4gICAgdmFyIG9sZExpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XHJcbiAgICB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzID0gbGlzdGVuZXJzO1xyXG4gICAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyk7XHJcbiAgICAvLyByZXNvbHZlIHNsb3RzICsgZm9yY2UgdXBkYXRlIGlmIGhhcyBjaGlsZHJlblxyXG4gICAgaWYgKG5lZWRzRm9yY2VVcGRhdGUpIHtcclxuICAgICAgICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMocmVuZGVyQ2hpbGRyZW4sIHBhcmVudFZub2RlLmNvbnRleHQpO1xyXG4gICAgICAgIHZtLiRmb3JjZVVwZGF0ZSgpO1xyXG4gICAgfVxyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpc0luSW5hY3RpdmVUcmVlKHZtKSB7XHJcbiAgICB3aGlsZSAodm0gJiYgKHZtID0gdm0uJHBhcmVudCkpIHtcclxuICAgICAgICBpZiAodm0uX2luYWN0aXZlKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLCBkaXJlY3QpIHtcclxuICAgIGlmIChkaXJlY3QpIHtcclxuICAgICAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHZtLl9kaXJlY3RJbmFjdGl2ZSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh2bS5faW5hY3RpdmUgfHwgdm0uX2luYWN0aXZlID09PSBudWxsKSB7XHJcbiAgICAgICAgdm0uX2luYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYWxsSG9vayQxKHZtLCAnYWN0aXZhdGVkJyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLCBkaXJlY3QpIHtcclxuICAgIGlmIChkaXJlY3QpIHtcclxuICAgICAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCF2bS5faW5hY3RpdmUpIHtcclxuICAgICAgICB2bS5faW5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYWxsSG9vayQxKHZtLCAnZGVhY3RpdmF0ZWQnKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjYWxsSG9vayQxKHZtLCBob29rLCBhcmdzLCBzZXRDb250ZXh0KSB7XHJcbiAgICBpZiAoc2V0Q29udGV4dCA9PT0gdm9pZCAwKSB7IHNldENvbnRleHQgPSB0cnVlOyB9XHJcbiAgICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgbGlmZWN5Y2xlIGhvb2tzXHJcbiAgICBwdXNoVGFyZ2V0KCk7XHJcbiAgICB2YXIgcHJldiA9IGN1cnJlbnRJbnN0YW5jZTtcclxuICAgIHNldENvbnRleHQgJiYgc2V0Q3VycmVudEluc3RhbmNlKHZtKTtcclxuICAgIHZhciBoYW5kbGVycyA9IHZtLiRvcHRpb25zW2hvb2tdO1xyXG4gICAgdmFyIGluZm8gPSBcIlwiLmNvbmNhdChob29rLCBcIiBob29rXCIpO1xyXG4gICAgaWYgKGhhbmRsZXJzKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcclxuICAgICAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoaGFuZGxlcnNbaV0sIHZtLCBhcmdzIHx8IG51bGwsIHZtLCBpbmZvKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodm0uX2hhc0hvb2tFdmVudCkge1xyXG4gICAgICAgIHZtLiRlbWl0KCdob29rOicgKyBob29rKTtcclxuICAgIH1cclxuICAgIHNldENvbnRleHQgJiYgc2V0Q3VycmVudEluc3RhbmNlKHByZXYpO1xyXG4gICAgcG9wVGFyZ2V0KCk7XHJcbn1cblxudmFyIE1BWF9VUERBVEVfQ09VTlQgPSAxMDA7XHJcbnZhciBxdWV1ZSA9IFtdO1xyXG52YXIgYWN0aXZhdGVkQ2hpbGRyZW4gPSBbXTtcclxudmFyIGhhcyA9IHt9O1xyXG52YXIgY2lyY3VsYXIgPSB7fTtcclxudmFyIHdhaXRpbmcgPSBmYWxzZTtcclxudmFyIGZsdXNoaW5nID0gZmFsc2U7XHJcbnZhciBpbmRleCA9IDA7XHJcbi8qKlxyXG4gKiBSZXNldCB0aGUgc2NoZWR1bGVyJ3Mgc3RhdGUuXHJcbiAqL1xyXG5mdW5jdGlvbiByZXNldFNjaGVkdWxlclN0YXRlKCkge1xyXG4gICAgaW5kZXggPSBxdWV1ZS5sZW5ndGggPSBhY3RpdmF0ZWRDaGlsZHJlbi5sZW5ndGggPSAwO1xyXG4gICAgaGFzID0ge307XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgIGNpcmN1bGFyID0ge307XHJcbiAgICB9XHJcbiAgICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTtcclxufVxyXG4vLyBBc3luYyBlZGdlIGNhc2UgIzY1NjYgcmVxdWlyZXMgc2F2aW5nIHRoZSB0aW1lc3RhbXAgd2hlbiBldmVudCBsaXN0ZW5lcnMgYXJlXHJcbi8vIGF0dGFjaGVkLiBIb3dldmVyLCBjYWxsaW5nIHBlcmZvcm1hbmNlLm5vdygpIGhhcyBhIHBlcmYgb3ZlcmhlYWQgZXNwZWNpYWxseVxyXG4vLyBpZiB0aGUgcGFnZSBoYXMgdGhvdXNhbmRzIG9mIGV2ZW50IGxpc3RlbmVycy4gSW5zdGVhZCwgd2UgdGFrZSBhIHRpbWVzdGFtcFxyXG4vLyBldmVyeSB0aW1lIHRoZSBzY2hlZHVsZXIgZmx1c2hlcyBhbmQgdXNlIHRoYXQgZm9yIGFsbCBldmVudCBsaXN0ZW5lcnNcclxuLy8gYXR0YWNoZWQgZHVyaW5nIHRoYXQgZmx1c2guXHJcbnZhciBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSAwO1xyXG4vLyBBc3luYyBlZGdlIGNhc2UgZml4IHJlcXVpcmVzIHN0b3JpbmcgYW4gZXZlbnQgbGlzdGVuZXIncyBhdHRhY2ggdGltZXN0YW1wLlxyXG52YXIgZ2V0Tm93ID0gRGF0ZS5ub3c7XHJcbi8vIERldGVybWluZSB3aGF0IGV2ZW50IHRpbWVzdGFtcCB0aGUgYnJvd3NlciBpcyB1c2luZy4gQW5ub3lpbmdseSwgdGhlXHJcbi8vIHRpbWVzdGFtcCBjYW4gZWl0aGVyIGJlIGhpLXJlcyAocmVsYXRpdmUgdG8gcGFnZSBsb2FkKSBvciBsb3ctcmVzXHJcbi8vIChyZWxhdGl2ZSB0byBVTklYIGVwb2NoKSwgc28gaW4gb3JkZXIgdG8gY29tcGFyZSB0aW1lIHdlIGhhdmUgdG8gdXNlIHRoZVxyXG4vLyBzYW1lIHRpbWVzdGFtcCB0eXBlIHdoZW4gc2F2aW5nIHRoZSBmbHVzaCB0aW1lc3RhbXAuXHJcbi8vIEFsbCBJRSB2ZXJzaW9ucyB1c2UgbG93LXJlcyBldmVudCB0aW1lc3RhbXBzLCBhbmQgaGF2ZSBwcm9ibGVtYXRpYyBjbG9ja1xyXG4vLyBpbXBsZW1lbnRhdGlvbnMgKCM5NjMyKVxyXG5pZiAoaW5Ccm93c2VyICYmICFpc0lFKSB7XHJcbiAgICB2YXIgcGVyZm9ybWFuY2VfMSA9IHdpbmRvdy5wZXJmb3JtYW5jZTtcclxuICAgIGlmIChwZXJmb3JtYW5jZV8xICYmXHJcbiAgICAgICAgdHlwZW9mIHBlcmZvcm1hbmNlXzEubm93ID09PSAnZnVuY3Rpb24nICYmXHJcbiAgICAgICAgZ2V0Tm93KCkgPiBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKS50aW1lU3RhbXApIHtcclxuICAgICAgICAvLyBpZiB0aGUgZXZlbnQgdGltZXN0YW1wLCBhbHRob3VnaCBldmFsdWF0ZWQgQUZURVIgdGhlIERhdGUubm93KCksIGlzXHJcbiAgICAgICAgLy8gc21hbGxlciB0aGFuIGl0LCBpdCBtZWFucyB0aGUgZXZlbnQgaXMgdXNpbmcgYSBoaS1yZXMgdGltZXN0YW1wLFxyXG4gICAgICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHVzZSB0aGUgaGktcmVzIHZlcnNpb24gZm9yIGV2ZW50IGxpc3RlbmVyIHRpbWVzdGFtcHMgYXNcclxuICAgICAgICAvLyB3ZWxsLlxyXG4gICAgICAgIGdldE5vdyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBlcmZvcm1hbmNlXzEubm93KCk7IH07XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEZsdXNoIGJvdGggcXVldWVzIGFuZCBydW4gdGhlIHdhdGNoZXJzLlxyXG4gKi9cclxuZnVuY3Rpb24gZmx1c2hTY2hlZHVsZXJRdWV1ZSgpIHtcclxuICAgIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IGdldE5vdygpO1xyXG4gICAgZmx1c2hpbmcgPSB0cnVlO1xyXG4gICAgdmFyIHdhdGNoZXIsIGlkO1xyXG4gICAgLy8gU29ydCBxdWV1ZSBiZWZvcmUgZmx1c2guXHJcbiAgICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcclxuICAgIC8vIDEuIENvbXBvbmVudHMgYXJlIHVwZGF0ZWQgZnJvbSBwYXJlbnQgdG8gY2hpbGQuIChiZWNhdXNlIHBhcmVudCBpcyBhbHdheXNcclxuICAgIC8vICAgIGNyZWF0ZWQgYmVmb3JlIHRoZSBjaGlsZClcclxuICAgIC8vIDIuIEEgY29tcG9uZW50J3MgdXNlciB3YXRjaGVycyBhcmUgcnVuIGJlZm9yZSBpdHMgcmVuZGVyIHdhdGNoZXIgKGJlY2F1c2VcclxuICAgIC8vICAgIHVzZXIgd2F0Y2hlcnMgYXJlIGNyZWF0ZWQgYmVmb3JlIHRoZSByZW5kZXIgd2F0Y2hlcilcclxuICAgIC8vIDMuIElmIGEgY29tcG9uZW50IGlzIGRlc3Ryb3llZCBkdXJpbmcgYSBwYXJlbnQgY29tcG9uZW50J3Mgd2F0Y2hlciBydW4sXHJcbiAgICAvLyAgICBpdHMgd2F0Y2hlcnMgY2FuIGJlIHNraXBwZWQuXHJcbiAgICBxdWV1ZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XHJcbiAgICAvLyBkbyBub3QgY2FjaGUgbGVuZ3RoIGJlY2F1c2UgbW9yZSB3YXRjaGVycyBtaWdodCBiZSBwdXNoZWRcclxuICAgIC8vIGFzIHdlIHJ1biBleGlzdGluZyB3YXRjaGVyc1xyXG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcXVldWUubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgd2F0Y2hlciA9IHF1ZXVlW2luZGV4XTtcclxuICAgICAgICBpZiAod2F0Y2hlci5iZWZvcmUpIHtcclxuICAgICAgICAgICAgd2F0Y2hlci5iZWZvcmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWQgPSB3YXRjaGVyLmlkO1xyXG4gICAgICAgIGhhc1tpZF0gPSBudWxsO1xyXG4gICAgICAgIHdhdGNoZXIucnVuKCk7XHJcbiAgICAgICAgLy8gaW4gZGV2IGJ1aWxkLCBjaGVjayBhbmQgc3RvcCBjaXJjdWxhciB1cGRhdGVzLlxyXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGhhc1tpZF0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjaXJjdWxhcltpZF0gPSAoY2lyY3VsYXJbaWRdIHx8IDApICsgMTtcclxuICAgICAgICAgICAgaWYgKGNpcmN1bGFyW2lkXSA+IE1BWF9VUERBVEVfQ09VTlQpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oJ1lvdSBtYXkgaGF2ZSBhbiBpbmZpbml0ZSB1cGRhdGUgbG9vcCAnICtcclxuICAgICAgICAgICAgICAgICAgICAod2F0Y2hlci51c2VyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gXCJpbiB3YXRjaGVyIHdpdGggZXhwcmVzc2lvbiBcXFwiXCIuY29uY2F0KHdhdGNoZXIuZXhwcmVzc2lvbiwgXCJcXFwiXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogXCJpbiBhIGNvbXBvbmVudCByZW5kZXIgZnVuY3Rpb24uXCIpLCB3YXRjaGVyLnZtKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8ga2VlcCBjb3BpZXMgb2YgcG9zdCBxdWV1ZXMgYmVmb3JlIHJlc2V0dGluZyBzdGF0ZVxyXG4gICAgdmFyIGFjdGl2YXRlZFF1ZXVlID0gYWN0aXZhdGVkQ2hpbGRyZW4uc2xpY2UoKTtcclxuICAgIHZhciB1cGRhdGVkUXVldWUgPSBxdWV1ZS5zbGljZSgpO1xyXG4gICAgcmVzZXRTY2hlZHVsZXJTdGF0ZSgpO1xyXG4gICAgLy8gY2FsbCBjb21wb25lbnQgdXBkYXRlZCBhbmQgYWN0aXZhdGVkIGhvb2tzXHJcbiAgICBjYWxsQWN0aXZhdGVkSG9va3MoYWN0aXZhdGVkUXVldWUpO1xyXG4gICAgY2FsbFVwZGF0ZWRIb29rcyh1cGRhdGVkUXVldWUpO1xyXG4gICAgLy8gZGV2dG9vbCBob29rXHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgIGlmIChkZXZ0b29scyAmJiBjb25maWcuZGV2dG9vbHMpIHtcclxuICAgICAgICBkZXZ0b29scy5lbWl0KCdmbHVzaCcpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNhbGxVcGRhdGVkSG9va3MocXVldWUpIHtcclxuICAgIHZhciBpID0gcXVldWUubGVuZ3RoO1xyXG4gICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgIHZhciB3YXRjaGVyID0gcXVldWVbaV07XHJcbiAgICAgICAgdmFyIHZtID0gd2F0Y2hlci52bTtcclxuICAgICAgICBpZiAodm0gJiYgdm0uX3dhdGNoZXIgPT09IHdhdGNoZXIgJiYgdm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XHJcbiAgICAgICAgICAgIGNhbGxIb29rJDEodm0sICd1cGRhdGVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBRdWV1ZSBhIGtlcHQtYWxpdmUgY29tcG9uZW50IHRoYXQgd2FzIGFjdGl2YXRlZCBkdXJpbmcgcGF0Y2guXHJcbiAqIFRoZSBxdWV1ZSB3aWxsIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgZW50aXJlIHRyZWUgaGFzIGJlZW4gcGF0Y2hlZC5cclxuICovXHJcbmZ1bmN0aW9uIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50KHZtKSB7XHJcbiAgICAvLyBzZXR0aW5nIF9pbmFjdGl2ZSB0byBmYWxzZSBoZXJlIHNvIHRoYXQgYSByZW5kZXIgZnVuY3Rpb24gY2FuXHJcbiAgICAvLyByZWx5IG9uIGNoZWNraW5nIHdoZXRoZXIgaXQncyBpbiBhbiBpbmFjdGl2ZSB0cmVlIChlLmcuIHJvdXRlci12aWV3KVxyXG4gICAgdm0uX2luYWN0aXZlID0gZmFsc2U7XHJcbiAgICBhY3RpdmF0ZWRDaGlsZHJlbi5wdXNoKHZtKTtcclxufVxyXG5mdW5jdGlvbiBjYWxsQWN0aXZhdGVkSG9va3MocXVldWUpIHtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBxdWV1ZVtpXS5faW5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQocXVldWVbaV0sIHRydWUgLyogdHJ1ZSAqLyk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFB1c2ggYSB3YXRjaGVyIGludG8gdGhlIHdhdGNoZXIgcXVldWUuXHJcbiAqIEpvYnMgd2l0aCBkdXBsaWNhdGUgSURzIHdpbGwgYmUgc2tpcHBlZCB1bmxlc3MgaXQnc1xyXG4gKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC5cclxuICovXHJcbmZ1bmN0aW9uIHF1ZXVlV2F0Y2hlcih3YXRjaGVyKSB7XHJcbiAgICB2YXIgaWQgPSB3YXRjaGVyLmlkO1xyXG4gICAgaWYgKGhhc1tpZF0gIT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh3YXRjaGVyID09PSBEZXAudGFyZ2V0ICYmIHdhdGNoZXIubm9SZWN1cnNlKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaGFzW2lkXSA9IHRydWU7XHJcbiAgICBpZiAoIWZsdXNoaW5nKSB7XHJcbiAgICAgICAgcXVldWUucHVzaCh3YXRjaGVyKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIGlmIGFscmVhZHkgZmx1c2hpbmcsIHNwbGljZSB0aGUgd2F0Y2hlciBiYXNlZCBvbiBpdHMgaWRcclxuICAgICAgICAvLyBpZiBhbHJlYWR5IHBhc3QgaXRzIGlkLCBpdCB3aWxsIGJlIHJ1biBuZXh0IGltbWVkaWF0ZWx5LlxyXG4gICAgICAgIHZhciBpID0gcXVldWUubGVuZ3RoIC0gMTtcclxuICAgICAgICB3aGlsZSAoaSA+IGluZGV4ICYmIHF1ZXVlW2ldLmlkID4gd2F0Y2hlci5pZCkge1xyXG4gICAgICAgICAgICBpLS07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHF1ZXVlLnNwbGljZShpICsgMSwgMCwgd2F0Y2hlcik7XHJcbiAgICB9XHJcbiAgICAvLyBxdWV1ZSB0aGUgZmx1c2hcclxuICAgIGlmICghd2FpdGluZykge1xyXG4gICAgICAgIHdhaXRpbmcgPSB0cnVlO1xyXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25maWcuYXN5bmMpIHtcclxuICAgICAgICAgICAgZmx1c2hTY2hlZHVsZXJRdWV1ZSgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5leHRUaWNrKGZsdXNoU2NoZWR1bGVyUXVldWUpO1xyXG4gICAgfVxyXG59XG5cbmZ1bmN0aW9uIGluaXRQcm92aWRlKHZtKSB7XHJcbiAgICB2YXIgcHJvdmlkZU9wdGlvbiA9IHZtLiRvcHRpb25zLnByb3ZpZGU7XHJcbiAgICBpZiAocHJvdmlkZU9wdGlvbikge1xyXG4gICAgICAgIHZhciBwcm92aWRlZCA9IGlzRnVuY3Rpb24ocHJvdmlkZU9wdGlvbilcclxuICAgICAgICAgICAgPyBwcm92aWRlT3B0aW9uLmNhbGwodm0pXHJcbiAgICAgICAgICAgIDogcHJvdmlkZU9wdGlvbjtcclxuICAgICAgICBpZiAoIWlzT2JqZWN0KHByb3ZpZGVkKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBrZXlzID0gaGFzU3ltYm9sID8gUmVmbGVjdC5vd25LZXlzKHByb3ZpZGVkKSA6IE9iamVjdC5rZXlzKHByb3ZpZGVkKTtcclxuICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2Uodm0pO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBwcm92aWRlKGtleXNbaV0sIHByb3ZpZGVkW2tleXNbaV1dKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2V0Q3VycmVudEluc3RhbmNlKCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaW5pdEluamVjdGlvbnModm0pIHtcclxuICAgIHZhciByZXN1bHQgPSByZXNvbHZlSW5qZWN0KHZtLiRvcHRpb25zLmluamVjdCwgdm0pO1xyXG4gICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XHJcbiAgICAgICAgT2JqZWN0LmtleXMocmVzdWx0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cclxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIGRlZmluZVJlYWN0aXZlKHZtLCBrZXksIHJlc3VsdFtrZXldLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihcIkF2b2lkIG11dGF0aW5nIGFuIGluamVjdGVkIHZhbHVlIGRpcmVjdGx5IHNpbmNlIHRoZSBjaGFuZ2VzIHdpbGwgYmUgXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwcm92aWRlZCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImluamVjdGlvbiBiZWluZyBtdXRhdGVkOiBcXFwiXCIuY29uY2F0KGtleSwgXCJcXFwiXCIpLCB2bSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRlZmluZVJlYWN0aXZlKHZtLCBrZXksIHJlc3VsdFtrZXldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0KGluamVjdCwgdm0pIHtcclxuICAgIGlmIChpbmplY3QpIHtcclxuICAgICAgICAvLyBpbmplY3QgaXMgOmFueSBiZWNhdXNlIGZsb3cgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBmaWd1cmUgb3V0IGNhY2hlZFxyXG4gICAgICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgICAgIHZhciBrZXlzID0gaGFzU3ltYm9sID8gUmVmbGVjdC5vd25LZXlzKGluamVjdCkgOiBPYmplY3Qua2V5cyhpbmplY3QpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcclxuICAgICAgICAgICAgLy8gIzY1NzQgaW4gY2FzZSB0aGUgaW5qZWN0IG9iamVjdCBpcyBvYnNlcnZlZC4uLlxyXG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnX19vYl9fJylcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB2YXIgcHJvdmlkZUtleSA9IGluamVjdFtrZXldLmZyb207XHJcbiAgICAgICAgICAgIGlmIChwcm92aWRlS2V5IGluIHZtLl9wcm92aWRlZCkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSB2bS5fcHJvdmlkZWRbcHJvdmlkZUtleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoJ2RlZmF1bHQnIGluIGluamVjdFtrZXldKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJvdmlkZURlZmF1bHQgPSBpbmplY3Rba2V5XS5kZWZhdWx0O1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBpc0Z1bmN0aW9uKHByb3ZpZGVEZWZhdWx0KVxyXG4gICAgICAgICAgICAgICAgICAgID8gcHJvdmlkZURlZmF1bHQuY2FsbCh2bSlcclxuICAgICAgICAgICAgICAgICAgICA6IHByb3ZpZGVEZWZhdWx0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oXCJJbmplY3Rpb24gXFxcIlwiLmNvbmNhdChrZXksIFwiXFxcIiBub3QgZm91bmRcIiksIHZtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG59XG5cbmZ1bmN0aW9uIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0KGRhdGEsIHByb3BzLCBjaGlsZHJlbiwgcGFyZW50LCBDdG9yKSB7XHJcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XHJcbiAgICAvLyBlbnN1cmUgdGhlIGNyZWF0ZUVsZW1lbnQgZnVuY3Rpb24gaW4gZnVuY3Rpb25hbCBjb21wb25lbnRzXHJcbiAgICAvLyBnZXRzIGEgdW5pcXVlIGNvbnRleHQgLSB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgY29ycmVjdCBuYW1lZCBzbG90IGNoZWNrXHJcbiAgICB2YXIgY29udGV4dFZtO1xyXG4gICAgaWYgKGhhc093bihwYXJlbnQsICdfdWlkJykpIHtcclxuICAgICAgICBjb250ZXh0Vm0gPSBPYmplY3QuY3JlYXRlKHBhcmVudCk7XHJcbiAgICAgICAgY29udGV4dFZtLl9vcmlnaW5hbCA9IHBhcmVudDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIHRoZSBjb250ZXh0IHZtIHBhc3NlZCBpbiBpcyBhIGZ1bmN0aW9uYWwgY29udGV4dCBhcyB3ZWxsLlxyXG4gICAgICAgIC8vIGluIHRoaXMgY2FzZSB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB3ZSBhcmUgYWJsZSB0byBnZXQgYSBob2xkIHRvIHRoZVxyXG4gICAgICAgIC8vIHJlYWwgY29udGV4dCBpbnN0YW5jZS5cclxuICAgICAgICBjb250ZXh0Vm0gPSBwYXJlbnQ7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5fb3JpZ2luYWw7XHJcbiAgICB9XHJcbiAgICB2YXIgaXNDb21waWxlZCA9IGlzVHJ1ZShvcHRpb25zLl9jb21waWxlZCk7XHJcbiAgICB2YXIgbmVlZE5vcm1hbGl6YXRpb24gPSAhaXNDb21waWxlZDtcclxuICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICB0aGlzLnByb3BzID0gcHJvcHM7XHJcbiAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XHJcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcclxuICAgIHRoaXMubGlzdGVuZXJzID0gZGF0YS5vbiB8fCBlbXB0eU9iamVjdDtcclxuICAgIHRoaXMuaW5qZWN0aW9ucyA9IHJlc29sdmVJbmplY3Qob3B0aW9ucy5pbmplY3QsIHBhcmVudCk7XHJcbiAgICB0aGlzLnNsb3RzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghX3RoaXMuJHNsb3RzKSB7XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKHBhcmVudCwgZGF0YS5zY29wZWRTbG90cywgKF90aGlzLiRzbG90cyA9IHJlc29sdmVTbG90cyhjaGlsZHJlbiwgcGFyZW50KSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gX3RoaXMuJHNsb3RzO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc2NvcGVkU2xvdHMnLCB7XHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKHBhcmVudCwgZGF0YS5zY29wZWRTbG90cywgdGhpcy5zbG90cygpKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIC8vIHN1cHBvcnQgZm9yIGNvbXBpbGVkIGZ1bmN0aW9uYWwgdGVtcGxhdGVcclxuICAgIGlmIChpc0NvbXBpbGVkKSB7XHJcbiAgICAgICAgLy8gZXhwb3NpbmcgJG9wdGlvbnMgZm9yIHJlbmRlclN0YXRpYygpXHJcbiAgICAgICAgdGhpcy4kb3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICAgICAgLy8gcHJlLXJlc29sdmUgc2xvdHMgZm9yIHJlbmRlclNsb3QoKVxyXG4gICAgICAgIHRoaXMuJHNsb3RzID0gdGhpcy5zbG90cygpO1xyXG4gICAgICAgIHRoaXMuJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMocGFyZW50LCBkYXRhLnNjb3BlZFNsb3RzLCB0aGlzLiRzbG90cyk7XHJcbiAgICB9XHJcbiAgICBpZiAob3B0aW9ucy5fc2NvcGVJZCkge1xyXG4gICAgICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkge1xyXG4gICAgICAgICAgICB2YXIgdm5vZGUgPSBjcmVhdGVFbGVtZW50JDEoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7XHJcbiAgICAgICAgICAgIGlmICh2bm9kZSAmJiAhaXNBcnJheSh2bm9kZSkpIHtcclxuICAgICAgICAgICAgICAgIHZub2RlLmZuU2NvcGVJZCA9IG9wdGlvbnMuX3Njb3BlSWQ7XHJcbiAgICAgICAgICAgICAgICB2bm9kZS5mbkNvbnRleHQgPSBwYXJlbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHZub2RlO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQkMShjb250ZXh0Vm0sIGEsIGIsIGMsIGQsIG5lZWROb3JtYWxpemF0aW9uKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmluc3RhbGxSZW5kZXJIZWxwZXJzKEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0LnByb3RvdHlwZSk7XHJcbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQoQ3RvciwgcHJvcHNEYXRhLCBkYXRhLCBjb250ZXh0Vm0sIGNoaWxkcmVuKSB7XHJcbiAgICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcclxuICAgIHZhciBwcm9wcyA9IHt9O1xyXG4gICAgdmFyIHByb3BPcHRpb25zID0gb3B0aW9ucy5wcm9wcztcclxuICAgIGlmIChpc0RlZihwcm9wT3B0aW9ucykpIHtcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcclxuICAgICAgICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEgfHwgZW1wdHlPYmplY3QpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGlmIChpc0RlZihkYXRhLmF0dHJzKSlcclxuICAgICAgICAgICAgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5hdHRycyk7XHJcbiAgICAgICAgaWYgKGlzRGVmKGRhdGEucHJvcHMpKVxyXG4gICAgICAgICAgICBtZXJnZVByb3BzKHByb3BzLCBkYXRhLnByb3BzKTtcclxuICAgIH1cclxuICAgIHZhciByZW5kZXJDb250ZXh0ID0gbmV3IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0KGRhdGEsIHByb3BzLCBjaGlsZHJlbiwgY29udGV4dFZtLCBDdG9yKTtcclxuICAgIHZhciB2bm9kZSA9IG9wdGlvbnMucmVuZGVyLmNhbGwobnVsbCwgcmVuZGVyQ29udGV4dC5fYywgcmVuZGVyQ29udGV4dCk7XHJcbiAgICBpZiAodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkge1xyXG4gICAgICAgIHJldHVybiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2RlLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0FycmF5KHZub2RlKSkge1xyXG4gICAgICAgIHZhciB2bm9kZXMgPSBub3JtYWxpemVDaGlsZHJlbih2bm9kZSkgfHwgW107XHJcbiAgICAgICAgdmFyIHJlcyA9IG5ldyBBcnJheSh2bm9kZXMubGVuZ3RoKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICByZXNbaV0gPSBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2Rlc1tpXSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGUsIGRhdGEsIGNvbnRleHRWbSwgb3B0aW9ucywgcmVuZGVyQ29udGV4dCkge1xyXG4gICAgLy8gIzc4MTcgY2xvbmUgbm9kZSBiZWZvcmUgc2V0dGluZyBmbkNvbnRleHQsIG90aGVyd2lzZSBpZiB0aGUgbm9kZSBpcyByZXVzZWRcclxuICAgIC8vIChlLmcuIGl0IHdhcyBmcm9tIGEgY2FjaGVkIG5vcm1hbCBzbG90KSB0aGUgZm5Db250ZXh0IGNhdXNlcyBuYW1lZCBzbG90c1xyXG4gICAgLy8gdGhhdCBzaG91bGQgbm90IGJlIG1hdGNoZWQgdG8gbWF0Y2guXHJcbiAgICB2YXIgY2xvbmUgPSBjbG9uZVZOb2RlKHZub2RlKTtcclxuICAgIGNsb25lLmZuQ29udGV4dCA9IGNvbnRleHRWbTtcclxuICAgIGNsb25lLmZuT3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgIChjbG9uZS5kZXZ0b29sc01ldGEgPSBjbG9uZS5kZXZ0b29sc01ldGEgfHwge30pLnJlbmRlckNvbnRleHQgPVxyXG4gICAgICAgICAgICByZW5kZXJDb250ZXh0O1xyXG4gICAgfVxyXG4gICAgaWYgKGRhdGEuc2xvdCkge1xyXG4gICAgICAgIChjbG9uZS5kYXRhIHx8IChjbG9uZS5kYXRhID0ge30pKS5zbG90ID0gZGF0YS5zbG90O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNsb25lO1xyXG59XHJcbmZ1bmN0aW9uIG1lcmdlUHJvcHModG8sIGZyb20pIHtcclxuICAgIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XHJcbiAgICAgICAgdG9bY2FtZWxpemUoa2V5KV0gPSBmcm9tW2tleV07XHJcbiAgICB9XHJcbn1cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZShvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gb3B0aW9ucy5uYW1lIHx8IG9wdGlvbnMuX19uYW1lIHx8IG9wdGlvbnMuX2NvbXBvbmVudFRhZztcclxufVxyXG4vLyBpbmxpbmUgaG9va3MgdG8gYmUgaW52b2tlZCBvbiBjb21wb25lbnQgVk5vZGVzIGR1cmluZyBwYXRjaFxyXG52YXIgY29tcG9uZW50Vk5vZGVIb29rcyA9IHtcclxuICAgIGluaXQ6IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XHJcbiAgICAgICAgaWYgKHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmXHJcbiAgICAgICAgICAgICF2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQgJiZcclxuICAgICAgICAgICAgdm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcclxuICAgICAgICAgICAgLy8ga2VwdC1hbGl2ZSBjb21wb25lbnRzLCB0cmVhdCBhcyBhIHBhdGNoXHJcbiAgICAgICAgICAgIHZhciBtb3VudGVkTm9kZSA9IHZub2RlOyAvLyB3b3JrIGFyb3VuZCBmbG93XHJcbiAgICAgICAgICAgIGNvbXBvbmVudFZOb2RlSG9va3MucHJlcGF0Y2gobW91bnRlZE5vZGUsIG1vdW50ZWROb2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZCA9ICh2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUodm5vZGUsIGFjdGl2ZUluc3RhbmNlKSk7XHJcbiAgICAgICAgICAgIGNoaWxkLiRtb3VudChoeWRyYXRpbmcgPyB2bm9kZS5lbG0gOiB1bmRlZmluZWQsIGh5ZHJhdGluZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHByZXBhdGNoOiBmdW5jdGlvbiAob2xkVm5vZGUsIHZub2RlKSB7XHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xyXG4gICAgICAgIHZhciBjaGlsZCA9ICh2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlKTtcclxuICAgICAgICB1cGRhdGVDaGlsZENvbXBvbmVudChjaGlsZCwgb3B0aW9ucy5wcm9wc0RhdGEsIC8vIHVwZGF0ZWQgcHJvcHNcclxuICAgICAgICBvcHRpb25zLmxpc3RlbmVycywgLy8gdXBkYXRlZCBsaXN0ZW5lcnNcclxuICAgICAgICB2bm9kZSwgLy8gbmV3IHBhcmVudCB2bm9kZVxyXG4gICAgICAgIG9wdGlvbnMuY2hpbGRyZW4gLy8gbmV3IGNoaWxkcmVuXHJcbiAgICAgICAgKTtcclxuICAgIH0sXHJcbiAgICBpbnNlcnQ6IGZ1bmN0aW9uICh2bm9kZSkge1xyXG4gICAgICAgIHZhciBjb250ZXh0ID0gdm5vZGUuY29udGV4dCwgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcclxuICAgICAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQpIHtcclxuICAgICAgICAgICAgY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGNhbGxIb29rJDEoY29tcG9uZW50SW5zdGFuY2UsICdtb3VudGVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xyXG4gICAgICAgICAgICBpZiAoY29udGV4dC5faXNNb3VudGVkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB2dWUtcm91dGVyIzEyMTJcclxuICAgICAgICAgICAgICAgIC8vIER1cmluZyB1cGRhdGVzLCBhIGtlcHQtYWxpdmUgY29tcG9uZW50J3MgY2hpbGQgY29tcG9uZW50cyBtYXlcclxuICAgICAgICAgICAgICAgIC8vIGNoYW5nZSwgc28gZGlyZWN0bHkgd2Fsa2luZyB0aGUgdHJlZSBoZXJlIG1heSBjYWxsIGFjdGl2YXRlZCBob29rc1xyXG4gICAgICAgICAgICAgICAgLy8gb24gaW5jb3JyZWN0IGNoaWxkcmVuLiBJbnN0ZWFkIHdlIHB1c2ggdGhlbSBpbnRvIGEgcXVldWUgd2hpY2ggd2lsbFxyXG4gICAgICAgICAgICAgICAgLy8gYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSB3aG9sZSBwYXRjaCBwcm9jZXNzIGVuZGVkLlxyXG4gICAgICAgICAgICAgICAgcXVldWVBY3RpdmF0ZWRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICh2bm9kZSkge1xyXG4gICAgICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xyXG4gICAgICAgIGlmICghY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkKSB7XHJcbiAgICAgICAgICAgIGlmICghdm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxudmFyIGhvb2tzVG9NZXJnZSA9IE9iamVjdC5rZXlzKGNvbXBvbmVudFZOb2RlSG9va3MpO1xyXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQoQ3RvciwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4sIHRhZykge1xyXG4gICAgaWYgKGlzVW5kZWYoQ3RvcikpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgYmFzZUN0b3IgPSBjb250ZXh0LiRvcHRpb25zLl9iYXNlO1xyXG4gICAgLy8gcGxhaW4gb3B0aW9ucyBvYmplY3Q6IHR1cm4gaXQgaW50byBhIGNvbnN0cnVjdG9yXHJcbiAgICBpZiAoaXNPYmplY3QoQ3RvcikpIHtcclxuICAgICAgICBDdG9yID0gYmFzZUN0b3IuZXh0ZW5kKEN0b3IpO1xyXG4gICAgfVxyXG4gICAgLy8gaWYgYXQgdGhpcyBzdGFnZSBpdCdzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIGFuIGFzeW5jIGNvbXBvbmVudCBmYWN0b3J5LFxyXG4gICAgLy8gcmVqZWN0LlxyXG4gICAgaWYgKHR5cGVvZiBDdG9yICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICAgICAgd2FybihcIkludmFsaWQgQ29tcG9uZW50IGRlZmluaXRpb246IFwiLmNvbmNhdChTdHJpbmcoQ3RvcikpLCBjb250ZXh0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gYXN5bmMgY29tcG9uZW50XHJcbiAgICB2YXIgYXN5bmNGYWN0b3J5O1xyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgaWYgKGlzVW5kZWYoQ3Rvci5jaWQpKSB7XHJcbiAgICAgICAgYXN5bmNGYWN0b3J5ID0gQ3RvcjtcclxuICAgICAgICBDdG9yID0gcmVzb2x2ZUFzeW5jQ29tcG9uZW50KGFzeW5jRmFjdG9yeSwgYmFzZUN0b3IpO1xyXG4gICAgICAgIGlmIChDdG9yID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgbm9kZSBmb3IgYXN5bmMgY29tcG9uZW50LCB3aGljaCBpcyByZW5kZXJlZFxyXG4gICAgICAgICAgICAvLyBhcyBhIGNvbW1lbnQgbm9kZSBidXQgcHJlc2VydmVzIGFsbCB0aGUgcmF3IGluZm9ybWF0aW9uIGZvciB0aGUgbm9kZS5cclxuICAgICAgICAgICAgLy8gdGhlIGluZm9ybWF0aW9uIHdpbGwgYmUgdXNlZCBmb3IgYXN5bmMgc2VydmVyLXJlbmRlcmluZyBhbmQgaHlkcmF0aW9uLlxyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlQXN5bmNQbGFjZWhvbGRlcihhc3luY0ZhY3RvcnksIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuLCB0YWcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRhdGEgPSBkYXRhIHx8IHt9O1xyXG4gICAgLy8gcmVzb2x2ZSBjb25zdHJ1Y3RvciBvcHRpb25zIGluIGNhc2UgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZCBhZnRlclxyXG4gICAgLy8gY29tcG9uZW50IGNvbnN0cnVjdG9yIGNyZWF0aW9uXHJcbiAgICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3IpO1xyXG4gICAgLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGRhdGEgaW50byBwcm9wcyAmIGV2ZW50c1xyXG4gICAgaWYgKGlzRGVmKGRhdGEubW9kZWwpKSB7XHJcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgICAgIHRyYW5zZm9ybU1vZGVsKEN0b3Iub3B0aW9ucywgZGF0YSk7XHJcbiAgICB9XHJcbiAgICAvLyBleHRyYWN0IHByb3BzXHJcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICB2YXIgcHJvcHNEYXRhID0gZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YShkYXRhLCBDdG9yLCB0YWcpO1xyXG4gICAgLy8gZnVuY3Rpb25hbCBjb21wb25lbnRcclxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcclxuICAgIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmZ1bmN0aW9uYWwpKSB7XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQoQ3RvciwgcHJvcHNEYXRhLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbik7XHJcbiAgICB9XHJcbiAgICAvLyBleHRyYWN0IGxpc3RlbmVycywgc2luY2UgdGhlc2UgbmVlZHMgdG8gYmUgdHJlYXRlZCBhc1xyXG4gICAgLy8gY2hpbGQgY29tcG9uZW50IGxpc3RlbmVycyBpbnN0ZWFkIG9mIERPTSBsaXN0ZW5lcnNcclxuICAgIHZhciBsaXN0ZW5lcnMgPSBkYXRhLm9uO1xyXG4gICAgLy8gcmVwbGFjZSB3aXRoIGxpc3RlbmVycyB3aXRoIC5uYXRpdmUgbW9kaWZpZXJcclxuICAgIC8vIHNvIGl0IGdldHMgcHJvY2Vzc2VkIGR1cmluZyBwYXJlbnQgY29tcG9uZW50IHBhdGNoLlxyXG4gICAgZGF0YS5vbiA9IGRhdGEubmF0aXZlT247XHJcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5hYnN0cmFjdCkpIHtcclxuICAgICAgICAvLyBhYnN0cmFjdCBjb21wb25lbnRzIGRvIG5vdCBrZWVwIGFueXRoaW5nXHJcbiAgICAgICAgLy8gb3RoZXIgdGhhbiBwcm9wcyAmIGxpc3RlbmVycyAmIHNsb3RcclxuICAgICAgICAvLyB3b3JrIGFyb3VuZCBmbG93XHJcbiAgICAgICAgdmFyIHNsb3QgPSBkYXRhLnNsb3Q7XHJcbiAgICAgICAgZGF0YSA9IHt9O1xyXG4gICAgICAgIGlmIChzbG90KSB7XHJcbiAgICAgICAgICAgIGRhdGEuc2xvdCA9IHNsb3Q7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gaW5zdGFsbCBjb21wb25lbnQgbWFuYWdlbWVudCBob29rcyBvbnRvIHRoZSBwbGFjZWhvbGRlciBub2RlXHJcbiAgICBpbnN0YWxsQ29tcG9uZW50SG9va3MoZGF0YSk7XHJcbiAgICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciB2bm9kZVxyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKEN0b3Iub3B0aW9ucykgfHwgdGFnO1xyXG4gICAgdmFyIHZub2RlID0gbmV3IFZOb2RlKFxyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgXCJ2dWUtY29tcG9uZW50LVwiLmNvbmNhdChDdG9yLmNpZCkuY29uY2F0KG5hbWUgPyBcIi1cIi5jb25jYXQobmFtZSkgOiAnJyksIGRhdGEsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQsIFxyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgeyBDdG9yOiBDdG9yLCBwcm9wc0RhdGE6IHByb3BzRGF0YSwgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsIHRhZzogdGFnLCBjaGlsZHJlbjogY2hpbGRyZW4gfSwgYXN5bmNGYWN0b3J5KTtcclxuICAgIHJldHVybiB2bm9kZTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlKFxyXG4vLyB3ZSBrbm93IGl0J3MgTW91bnRlZENvbXBvbmVudFZOb2RlIGJ1dCBmbG93IGRvZXNuJ3Rcclxudm5vZGUsIFxyXG4vLyBhY3RpdmVJbnN0YW5jZSBpbiBsaWZlY3ljbGUgc3RhdGVcclxucGFyZW50KSB7XHJcbiAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICBfaXNDb21wb25lbnQ6IHRydWUsXHJcbiAgICAgICAgX3BhcmVudFZub2RlOiB2bm9kZSxcclxuICAgICAgICBwYXJlbnQ6IHBhcmVudFxyXG4gICAgfTtcclxuICAgIC8vIGNoZWNrIGlubGluZS10ZW1wbGF0ZSByZW5kZXIgZnVuY3Rpb25zXHJcbiAgICB2YXIgaW5saW5lVGVtcGxhdGUgPSB2bm9kZS5kYXRhLmlubGluZVRlbXBsYXRlO1xyXG4gICAgaWYgKGlzRGVmKGlubGluZVRlbXBsYXRlKSkge1xyXG4gICAgICAgIG9wdGlvbnMucmVuZGVyID0gaW5saW5lVGVtcGxhdGUucmVuZGVyO1xyXG4gICAgICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gaW5saW5lVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyB2bm9kZS5jb21wb25lbnRPcHRpb25zLkN0b3Iob3B0aW9ucyk7XHJcbn1cclxuZnVuY3Rpb24gaW5zdGFsbENvbXBvbmVudEhvb2tzKGRhdGEpIHtcclxuICAgIHZhciBob29rcyA9IGRhdGEuaG9vayB8fCAoZGF0YS5ob29rID0ge30pO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rc1RvTWVyZ2UubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIga2V5ID0gaG9va3NUb01lcmdlW2ldO1xyXG4gICAgICAgIHZhciBleGlzdGluZyA9IGhvb2tzW2tleV07XHJcbiAgICAgICAgdmFyIHRvTWVyZ2UgPSBjb21wb25lbnRWTm9kZUhvb2tzW2tleV07XHJcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgICAgIGlmIChleGlzdGluZyAhPT0gdG9NZXJnZSAmJiAhKGV4aXN0aW5nICYmIGV4aXN0aW5nLl9tZXJnZWQpKSB7XHJcbiAgICAgICAgICAgIGhvb2tzW2tleV0gPSBleGlzdGluZyA/IG1lcmdlSG9vayh0b01lcmdlLCBleGlzdGluZykgOiB0b01lcmdlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBtZXJnZUhvb2soZjEsIGYyKSB7XHJcbiAgICB2YXIgbWVyZ2VkID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAvLyBmbG93IGNvbXBsYWlucyBhYm91dCBleHRyYSBhcmdzIHdoaWNoIGlzIHdoeSB3ZSB1c2UgYW55XHJcbiAgICAgICAgZjEoYSwgYik7XHJcbiAgICAgICAgZjIoYSwgYik7XHJcbiAgICB9O1xyXG4gICAgbWVyZ2VkLl9tZXJnZWQgPSB0cnVlO1xyXG4gICAgcmV0dXJuIG1lcmdlZDtcclxufVxyXG4vLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgaW5mbyAodmFsdWUgYW5kIGNhbGxiYWNrKSBpbnRvXHJcbi8vIHByb3AgYW5kIGV2ZW50IGhhbmRsZXIgcmVzcGVjdGl2ZWx5LlxyXG5mdW5jdGlvbiB0cmFuc2Zvcm1Nb2RlbChvcHRpb25zLCBkYXRhKSB7XHJcbiAgICB2YXIgcHJvcCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwucHJvcCkgfHwgJ3ZhbHVlJztcclxuICAgIHZhciBldmVudCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwuZXZlbnQpIHx8ICdpbnB1dCc7XHJcbiAgICAoZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KSlbcHJvcF0gPSBkYXRhLm1vZGVsLnZhbHVlO1xyXG4gICAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcclxuICAgIHZhciBleGlzdGluZyA9IG9uW2V2ZW50XTtcclxuICAgIHZhciBjYWxsYmFjayA9IGRhdGEubW9kZWwuY2FsbGJhY2s7XHJcbiAgICBpZiAoaXNEZWYoZXhpc3RpbmcpKSB7XHJcbiAgICAgICAgaWYgKGlzQXJyYXkoZXhpc3RpbmcpXHJcbiAgICAgICAgICAgID8gZXhpc3RpbmcuaW5kZXhPZihjYWxsYmFjaykgPT09IC0xXHJcbiAgICAgICAgICAgIDogZXhpc3RpbmcgIT09IGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIG9uW2V2ZW50XSA9IFtjYWxsYmFja10uY29uY2F0KGV4aXN0aW5nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBvbltldmVudF0gPSBjYWxsYmFjaztcclxuICAgIH1cclxufVxuXG52YXIgd2FybiA9IG5vb3A7XHJcbnZhciB0aXAgPSBub29wO1xyXG52YXIgZ2VuZXJhdGVDb21wb25lbnRUcmFjZTsgLy8gd29yayBhcm91bmQgZmxvdyBjaGVja1xyXG52YXIgZm9ybWF0Q29tcG9uZW50TmFtZTtcclxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgIHZhciBoYXNDb25zb2xlXzEgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCc7XHJcbiAgICB2YXIgY2xhc3NpZnlSRV8xID0gLyg/Ol58Wy1fXSkoXFx3KS9nO1xyXG4gICAgdmFyIGNsYXNzaWZ5XzEgPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKGNsYXNzaWZ5UkVfMSwgZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudG9VcHBlckNhc2UoKTsgfSkucmVwbGFjZSgvWy1fXS9nLCAnJyk7XHJcbiAgICB9O1xyXG4gICAgd2FybiA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XHJcbiAgICAgICAgaWYgKHZtID09PSB2b2lkIDApIHsgdm0gPSBjdXJyZW50SW5zdGFuY2U7IH1cclxuICAgICAgICB2YXIgdHJhY2UgPSB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJyc7XHJcbiAgICAgICAgaWYgKGNvbmZpZy53YXJuSGFuZGxlcikge1xyXG4gICAgICAgICAgICBjb25maWcud2FybkhhbmRsZXIuY2FsbChudWxsLCBtc2csIHZtLCB0cmFjZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGhhc0NvbnNvbGVfMSAmJiAhY29uZmlnLnNpbGVudCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW1Z1ZSB3YXJuXTogXCIuY29uY2F0KG1zZykuY29uY2F0KHRyYWNlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRpcCA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XHJcbiAgICAgICAgaWYgKGhhc0NvbnNvbGVfMSAmJiAhY29uZmlnLnNpbGVudCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJbVnVlIHRpcF06IFwiLmNvbmNhdChtc2cpICsgKHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJykpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBmb3JtYXRDb21wb25lbnROYW1lID0gZnVuY3Rpb24gKHZtLCBpbmNsdWRlRmlsZSkge1xyXG4gICAgICAgIGlmICh2bS4kcm9vdCA9PT0gdm0pIHtcclxuICAgICAgICAgICAgcmV0dXJuICc8Um9vdD4nO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb3B0aW9ucyA9IGlzRnVuY3Rpb24odm0pICYmIHZtLmNpZCAhPSBudWxsXHJcbiAgICAgICAgICAgID8gdm0ub3B0aW9uc1xyXG4gICAgICAgICAgICA6IHZtLl9pc1Z1ZVxyXG4gICAgICAgICAgICAgICAgPyB2bS4kb3B0aW9ucyB8fCB2bS5jb25zdHJ1Y3Rvci5vcHRpb25zXHJcbiAgICAgICAgICAgICAgICA6IHZtO1xyXG4gICAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShvcHRpb25zKTtcclxuICAgICAgICB2YXIgZmlsZSA9IG9wdGlvbnMuX19maWxlO1xyXG4gICAgICAgIGlmICghbmFtZSAmJiBmaWxlKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXRjaCA9IGZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwudnVlJC8pO1xyXG4gICAgICAgICAgICBuYW1lID0gbWF0Y2ggJiYgbWF0Y2hbMV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAoKG5hbWUgPyBcIjxcIi5jb25jYXQoY2xhc3NpZnlfMShuYW1lKSwgXCI+XCIpIDogXCI8QW5vbnltb3VzPlwiKSArXHJcbiAgICAgICAgICAgIChmaWxlICYmIGluY2x1ZGVGaWxlICE9PSBmYWxzZSA/IFwiIGF0IFwiLmNvbmNhdChmaWxlKSA6ICcnKSk7XHJcbiAgICB9O1xyXG4gICAgdmFyIHJlcGVhdF8xID0gZnVuY3Rpb24gKHN0ciwgbikge1xyXG4gICAgICAgIHZhciByZXMgPSAnJztcclxuICAgICAgICB3aGlsZSAobikge1xyXG4gICAgICAgICAgICBpZiAobiAlIDIgPT09IDEpXHJcbiAgICAgICAgICAgICAgICByZXMgKz0gc3RyO1xyXG4gICAgICAgICAgICBpZiAobiA+IDEpXHJcbiAgICAgICAgICAgICAgICBzdHIgKz0gc3RyO1xyXG4gICAgICAgICAgICBuID4+PSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfTtcclxuICAgIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSBmdW5jdGlvbiAodm0pIHtcclxuICAgICAgICBpZiAodm0uX2lzVnVlICYmIHZtLiRwYXJlbnQpIHtcclxuICAgICAgICAgICAgdmFyIHRyZWUgPSBbXTtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XHJcbiAgICAgICAgICAgIHdoaWxlICh2bSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRyZWUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXN0ID0gdHJlZVt0cmVlLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0LmNvbnN0cnVjdG9yID09PSB2bS5jb25zdHJ1Y3Rvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmVlW3RyZWUubGVuZ3RoIC0gMV0gPSBbbGFzdCwgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0cmVlLnB1c2godm0pO1xyXG4gICAgICAgICAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAoJ1xcblxcbmZvdW5kIGluXFxuXFxuJyArXHJcbiAgICAgICAgICAgICAgICB0cmVlXHJcbiAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAodm0sIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQoaSA9PT0gMCA/ICctLS0+ICcgOiByZXBlYXRfMSgnICcsIDUgKyBpICogMikpLmNvbmNhdChpc0FycmF5KHZtKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFwiXCIuY29uY2F0KGZvcm1hdENvbXBvbmVudE5hbWUodm1bMF0pLCBcIi4uLiAoXCIpLmNvbmNhdCh2bVsxXSwgXCIgcmVjdXJzaXZlIGNhbGxzKVwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGZvcm1hdENvbXBvbmVudE5hbWUodm0pKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmpvaW4oJ1xcbicpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIlxcblxcbihmb3VuZCBpbiBcIi5jb25jYXQoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSksIFwiKVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XG5cbi8qKlxyXG4gKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXHJcbiAqIGhvdyB0byBtZXJnZSBhIHBhcmVudCBvcHRpb24gdmFsdWUgYW5kIGEgY2hpbGQgb3B0aW9uXHJcbiAqIHZhbHVlIGludG8gdGhlIGZpbmFsIHZhbHVlLlxyXG4gKi9cclxudmFyIHN0cmF0cyA9IGNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7XHJcbi8qKlxyXG4gKiBPcHRpb25zIHdpdGggcmVzdHJpY3Rpb25zXHJcbiAqL1xyXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgc3RyYXRzLmVsID0gc3RyYXRzLnByb3BzRGF0YSA9IGZ1bmN0aW9uIChwYXJlbnQsIGNoaWxkLCB2bSwga2V5KSB7XHJcbiAgICAgICAgaWYgKCF2bSkge1xyXG4gICAgICAgICAgICB3YXJuKFwib3B0aW9uIFxcXCJcIi5jb25jYXQoa2V5LCBcIlxcXCIgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgaW5zdGFuY2UgXCIpICtcclxuICAgICAgICAgICAgICAgICdjcmVhdGlvbiB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGVmYXVsdFN0cmF0KHBhcmVudCwgY2hpbGQpO1xyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogSGVscGVyIHRoYXQgcmVjdXJzaXZlbHkgbWVyZ2VzIHR3byBkYXRhIG9iamVjdHMgdG9nZXRoZXIuXHJcbiAqL1xyXG5mdW5jdGlvbiBtZXJnZURhdGEodG8sIGZyb20pIHtcclxuICAgIGlmICghZnJvbSlcclxuICAgICAgICByZXR1cm4gdG87XHJcbiAgICB2YXIga2V5LCB0b1ZhbCwgZnJvbVZhbDtcclxuICAgIHZhciBrZXlzID0gaGFzU3ltYm9sXHJcbiAgICAgICAgPyBSZWZsZWN0Lm93bktleXMoZnJvbSlcclxuICAgICAgICA6IE9iamVjdC5rZXlzKGZyb20pO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcclxuICAgICAgICAvLyBpbiBjYXNlIHRoZSBvYmplY3QgaXMgYWxyZWFkeSBvYnNlcnZlZC4uLlxyXG4gICAgICAgIGlmIChrZXkgPT09ICdfX29iX18nKVxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB0b1ZhbCA9IHRvW2tleV07XHJcbiAgICAgICAgZnJvbVZhbCA9IGZyb21ba2V5XTtcclxuICAgICAgICBpZiAoIWhhc093bih0bywga2V5KSkge1xyXG4gICAgICAgICAgICBzZXQodG8sIGtleSwgZnJvbVZhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRvVmFsICE9PSBmcm9tVmFsICYmXHJcbiAgICAgICAgICAgIGlzUGxhaW5PYmplY3QodG9WYWwpICYmXHJcbiAgICAgICAgICAgIGlzUGxhaW5PYmplY3QoZnJvbVZhbCkpIHtcclxuICAgICAgICAgICAgbWVyZ2VEYXRhKHRvVmFsLCBmcm9tVmFsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG87XHJcbn1cclxuLyoqXHJcbiAqIERhdGFcclxuICovXHJcbmZ1bmN0aW9uIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pIHtcclxuICAgIGlmICghdm0pIHtcclxuICAgICAgICAvLyBpbiBhIFZ1ZS5leHRlbmQgbWVyZ2UsIGJvdGggc2hvdWxkIGJlIGZ1bmN0aW9uc1xyXG4gICAgICAgIGlmICghY2hpbGRWYWwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcmVudFZhbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFwYXJlbnRWYWwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNoaWxkVmFsO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB3aGVuIHBhcmVudFZhbCAmIGNoaWxkVmFsIGFyZSBib3RoIHByZXNlbnQsXHJcbiAgICAgICAgLy8gd2UgbmVlZCB0byByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXHJcbiAgICAgICAgLy8gbWVyZ2VkIHJlc3VsdCBvZiBib3RoIGZ1bmN0aW9ucy4uLiBubyBuZWVkIHRvXHJcbiAgICAgICAgLy8gY2hlY2sgaWYgcGFyZW50VmFsIGlzIGEgZnVuY3Rpb24gaGVyZSBiZWNhdXNlXHJcbiAgICAgICAgLy8gaXQgaGFzIHRvIGJlIGEgZnVuY3Rpb24gdG8gcGFzcyBwcmV2aW91cyBtZXJnZXMuXHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZERhdGFGbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1lcmdlRGF0YShpc0Z1bmN0aW9uKGNoaWxkVmFsKSA/IGNoaWxkVmFsLmNhbGwodGhpcywgdGhpcykgOiBjaGlsZFZhbCwgaXNGdW5jdGlvbihwYXJlbnRWYWwpID8gcGFyZW50VmFsLmNhbGwodGhpcywgdGhpcykgOiBwYXJlbnRWYWwpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkSW5zdGFuY2VEYXRhRm4oKSB7XHJcbiAgICAgICAgICAgIC8vIGluc3RhbmNlIG1lcmdlXHJcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZURhdGEgPSBpc0Z1bmN0aW9uKGNoaWxkVmFsKVxyXG4gICAgICAgICAgICAgICAgPyBjaGlsZFZhbC5jYWxsKHZtLCB2bSlcclxuICAgICAgICAgICAgICAgIDogY2hpbGRWYWw7XHJcbiAgICAgICAgICAgIHZhciBkZWZhdWx0RGF0YSA9IGlzRnVuY3Rpb24ocGFyZW50VmFsKVxyXG4gICAgICAgICAgICAgICAgPyBwYXJlbnRWYWwuY2FsbCh2bSwgdm0pXHJcbiAgICAgICAgICAgICAgICA6IHBhcmVudFZhbDtcclxuICAgICAgICAgICAgaWYgKGluc3RhbmNlRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lcmdlRGF0YShpbnN0YW5jZURhdGEsIGRlZmF1bHREYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkZWZhdWx0RGF0YTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuc3RyYXRzLmRhdGEgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pIHtcclxuICAgIGlmICghdm0pIHtcclxuICAgICAgICBpZiAoY2hpbGRWYWwgJiYgdHlwZW9mIGNoaWxkVmFsICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcclxuICAgICAgICAgICAgICAgIHdhcm4oJ1RoZSBcImRhdGFcIiBvcHRpb24gc2hvdWxkIGJlIGEgZnVuY3Rpb24gJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJ3RoYXQgcmV0dXJucyBhIHBlci1pbnN0YW5jZSB2YWx1ZSBpbiBjb21wb25lbnQgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJ2RlZmluaXRpb25zLicsIHZtKTtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcmVudFZhbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSk7XHJcbn07XHJcbi8qKlxyXG4gKiBIb29rcyBhbmQgcHJvcHMgYXJlIG1lcmdlZCBhcyBhcnJheXMuXHJcbiAqL1xyXG5mdW5jdGlvbiBtZXJnZUxpZmVjeWNsZUhvb2socGFyZW50VmFsLCBjaGlsZFZhbCkge1xyXG4gICAgdmFyIHJlcyA9IGNoaWxkVmFsXHJcbiAgICAgICAgPyBwYXJlbnRWYWxcclxuICAgICAgICAgICAgPyBwYXJlbnRWYWwuY29uY2F0KGNoaWxkVmFsKVxyXG4gICAgICAgICAgICA6IGlzQXJyYXkoY2hpbGRWYWwpXHJcbiAgICAgICAgICAgICAgICA/IGNoaWxkVmFsXHJcbiAgICAgICAgICAgICAgICA6IFtjaGlsZFZhbF1cclxuICAgICAgICA6IHBhcmVudFZhbDtcclxuICAgIHJldHVybiByZXMgPyBkZWR1cGVIb29rcyhyZXMpIDogcmVzO1xyXG59XHJcbmZ1bmN0aW9uIGRlZHVwZUhvb2tzKGhvb2tzKSB7XHJcbiAgICB2YXIgcmVzID0gW107XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKHJlcy5pbmRleE9mKGhvb2tzW2ldKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgcmVzLnB1c2goaG9va3NbaV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuTElGRUNZQ0xFX0hPT0tTLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcclxuICAgIHN0cmF0c1tob29rXSA9IG1lcmdlTGlmZWN5Y2xlSG9vaztcclxufSk7XHJcbi8qKlxyXG4gKiBBc3NldHNcclxuICpcclxuICogV2hlbiBhIHZtIGlzIHByZXNlbnQgKGluc3RhbmNlIGNyZWF0aW9uKSwgd2UgbmVlZCB0byBkb1xyXG4gKiBhIHRocmVlLXdheSBtZXJnZSBiZXR3ZWVuIGNvbnN0cnVjdG9yIG9wdGlvbnMsIGluc3RhbmNlXHJcbiAqIG9wdGlvbnMgYW5kIHBhcmVudCBvcHRpb25zLlxyXG4gKi9cclxuZnVuY3Rpb24gbWVyZ2VBc3NldHMocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0sIGtleSkge1xyXG4gICAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpO1xyXG4gICAgaWYgKGNoaWxkVmFsKSB7XHJcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcclxuICAgICAgICByZXR1cm4gZXh0ZW5kKHJlcywgY2hpbGRWYWwpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxufVxyXG5BU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XHJcbiAgICBzdHJhdHNbdHlwZSArICdzJ10gPSBtZXJnZUFzc2V0cztcclxufSk7XHJcbi8qKlxyXG4gKiBXYXRjaGVycy5cclxuICpcclxuICogV2F0Y2hlcnMgaGFzaGVzIHNob3VsZCBub3Qgb3ZlcndyaXRlIG9uZVxyXG4gKiBhbm90aGVyLCBzbyB3ZSBtZXJnZSB0aGVtIGFzIGFycmF5cy5cclxuICovXHJcbnN0cmF0cy53YXRjaCA9IGZ1bmN0aW9uIChwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSwga2V5KSB7XHJcbiAgICAvLyB3b3JrIGFyb3VuZCBGaXJlZm94J3MgT2JqZWN0LnByb3RvdHlwZS53YXRjaC4uLlxyXG4gICAgLy9AdHMtZXhwZWN0LWVycm9yIHdvcmsgYXJvdW5kXHJcbiAgICBpZiAocGFyZW50VmFsID09PSBuYXRpdmVXYXRjaClcclxuICAgICAgICBwYXJlbnRWYWwgPSB1bmRlZmluZWQ7XHJcbiAgICAvL0B0cy1leHBlY3QtZXJyb3Igd29yayBhcm91bmRcclxuICAgIGlmIChjaGlsZFZhbCA9PT0gbmF0aXZlV2F0Y2gpXHJcbiAgICAgICAgY2hpbGRWYWwgPSB1bmRlZmluZWQ7XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgIGlmICghY2hpbGRWYWwpXHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpO1xyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcclxuICAgIH1cclxuICAgIGlmICghcGFyZW50VmFsKVxyXG4gICAgICAgIHJldHVybiBjaGlsZFZhbDtcclxuICAgIHZhciByZXQgPSB7fTtcclxuICAgIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XHJcbiAgICBmb3IgKHZhciBrZXlfMSBpbiBjaGlsZFZhbCkge1xyXG4gICAgICAgIHZhciBwYXJlbnRfMSA9IHJldFtrZXlfMV07XHJcbiAgICAgICAgdmFyIGNoaWxkID0gY2hpbGRWYWxba2V5XzFdO1xyXG4gICAgICAgIGlmIChwYXJlbnRfMSAmJiAhaXNBcnJheShwYXJlbnRfMSkpIHtcclxuICAgICAgICAgICAgcGFyZW50XzEgPSBbcGFyZW50XzFdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXRba2V5XzFdID0gcGFyZW50XzEgPyBwYXJlbnRfMS5jb25jYXQoY2hpbGQpIDogaXNBcnJheShjaGlsZCkgPyBjaGlsZCA6IFtjaGlsZF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG59O1xyXG4vKipcclxuICogT3RoZXIgb2JqZWN0IGhhc2hlcy5cclxuICovXHJcbnN0cmF0cy5wcm9wcyA9XHJcbiAgICBzdHJhdHMubWV0aG9kcyA9XHJcbiAgICAgICAgc3RyYXRzLmluamVjdCA9XHJcbiAgICAgICAgICAgIHN0cmF0cy5jb21wdXRlZCA9XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0sIGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZFZhbCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXBhcmVudFZhbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkVmFsO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkVmFsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlbmQocmV0LCBjaGlsZFZhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICAgICAgICAgIH07XHJcbnN0cmF0cy5wcm92aWRlID0gbWVyZ2VEYXRhT3JGbjtcclxuLyoqXHJcbiAqIERlZmF1bHQgc3RyYXRlZ3kuXHJcbiAqL1xyXG52YXIgZGVmYXVsdFN0cmF0ID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcclxuICAgIHJldHVybiBjaGlsZFZhbCA9PT0gdW5kZWZpbmVkID8gcGFyZW50VmFsIDogY2hpbGRWYWw7XHJcbn07XHJcbi8qKlxyXG4gKiBWYWxpZGF0ZSBjb21wb25lbnQgbmFtZXNcclxuICovXHJcbmZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50cyhvcHRpb25zKSB7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jb21wb25lbnRzKSB7XHJcbiAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGtleSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUpIHtcclxuICAgIGlmICghbmV3IFJlZ0V4cChcIl5bYS16QS1aXVtcXFxcLVxcXFwuMC05X1wiLmNvbmNhdCh1bmljb2RlUmVnRXhwLnNvdXJjZSwgXCJdKiRcIikpLnRlc3QobmFtZSkpIHtcclxuICAgICAgICB3YXJuKCdJbnZhbGlkIGNvbXBvbmVudCBuYW1lOiBcIicgK1xyXG4gICAgICAgICAgICBuYW1lICtcclxuICAgICAgICAgICAgJ1wiLiBDb21wb25lbnQgbmFtZXMgJyArXHJcbiAgICAgICAgICAgICdzaG91bGQgY29uZm9ybSB0byB2YWxpZCBjdXN0b20gZWxlbWVudCBuYW1lIGluIGh0bWw1IHNwZWNpZmljYXRpb24uJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKG5hbWUpKSB7XHJcbiAgICAgICAgd2FybignRG8gbm90IHVzZSBidWlsdC1pbiBvciByZXNlcnZlZCBIVE1MIGVsZW1lbnRzIGFzIGNvbXBvbmVudCAnICtcclxuICAgICAgICAgICAgJ2lkOiAnICtcclxuICAgICAgICAgICAgbmFtZSk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEVuc3VyZSBhbGwgcHJvcHMgb3B0aW9uIHN5bnRheCBhcmUgbm9ybWFsaXplZCBpbnRvIHRoZVxyXG4gKiBPYmplY3QtYmFzZWQgZm9ybWF0LlxyXG4gKi9cclxuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHMob3B0aW9ucywgdm0pIHtcclxuICAgIHZhciBwcm9wcyA9IG9wdGlvbnMucHJvcHM7XHJcbiAgICBpZiAoIXByb3BzKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIHZhciByZXMgPSB7fTtcclxuICAgIHZhciBpLCB2YWwsIG5hbWU7XHJcbiAgICBpZiAoaXNBcnJheShwcm9wcykpIHtcclxuICAgICAgICBpID0gcHJvcHMubGVuZ3RoO1xyXG4gICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgICAgdmFsID0gcHJvcHNbaV07XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgbmFtZSA9IGNhbWVsaXplKHZhbCk7XHJcbiAgICAgICAgICAgICAgICByZXNbbmFtZV0gPSB7IHR5cGU6IG51bGwgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKCdwcm9wcyBtdXN0IGJlIHN0cmluZ3Mgd2hlbiB1c2luZyBhcnJheSBzeW50YXguJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xyXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xyXG4gICAgICAgICAgICB2YWwgPSBwcm9wc1trZXldO1xyXG4gICAgICAgICAgICBuYW1lID0gY2FtZWxpemUoa2V5KTtcclxuICAgICAgICAgICAgcmVzW25hbWVdID0gaXNQbGFpbk9iamVjdCh2YWwpID8gdmFsIDogeyB0eXBlOiB2YWwgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgICAgd2FybihcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwicHJvcHNcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcclxuICAgICAgICAgICAgXCJidXQgZ290IFwiLmNvbmNhdCh0b1Jhd1R5cGUocHJvcHMpLCBcIi5cIiksIHZtKTtcclxuICAgIH1cclxuICAgIG9wdGlvbnMucHJvcHMgPSByZXM7XHJcbn1cclxuLyoqXHJcbiAqIE5vcm1hbGl6ZSBhbGwgaW5qZWN0aW9ucyBpbnRvIE9iamVjdC1iYXNlZCBmb3JtYXRcclxuICovXHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZUluamVjdChvcHRpb25zLCB2bSkge1xyXG4gICAgdmFyIGluamVjdCA9IG9wdGlvbnMuaW5qZWN0O1xyXG4gICAgaWYgKCFpbmplY3QpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgdmFyIG5vcm1hbGl6ZWQgPSAob3B0aW9ucy5pbmplY3QgPSB7fSk7XHJcbiAgICBpZiAoaXNBcnJheShpbmplY3QpKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmplY3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbm9ybWFsaXplZFtpbmplY3RbaV1dID0geyBmcm9tOiBpbmplY3RbaV0gfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KGluamVjdCkpIHtcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gaW5qZWN0KSB7XHJcbiAgICAgICAgICAgIHZhciB2YWwgPSBpbmplY3Rba2V5XTtcclxuICAgICAgICAgICAgbm9ybWFsaXplZFtrZXldID0gaXNQbGFpbk9iamVjdCh2YWwpXHJcbiAgICAgICAgICAgICAgICA/IGV4dGVuZCh7IGZyb206IGtleSB9LCB2YWwpXHJcbiAgICAgICAgICAgICAgICA6IHsgZnJvbTogdmFsIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgIHdhcm4oXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcImluamVjdFxcXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgXCIgK1xyXG4gICAgICAgICAgICBcImJ1dCBnb3QgXCIuY29uY2F0KHRvUmF3VHlwZShpbmplY3QpLCBcIi5cIiksIHZtKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogTm9ybWFsaXplIHJhdyBmdW5jdGlvbiBkaXJlY3RpdmVzIGludG8gb2JqZWN0IGZvcm1hdC5cclxuICovXHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMkMShvcHRpb25zKSB7XHJcbiAgICB2YXIgZGlycyA9IG9wdGlvbnMuZGlyZWN0aXZlcztcclxuICAgIGlmIChkaXJzKSB7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGRpcnMpIHtcclxuICAgICAgICAgICAgdmFyIGRlZiA9IGRpcnNba2V5XTtcclxuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oZGVmKSkge1xyXG4gICAgICAgICAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYsIHVwZGF0ZTogZGVmIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gYXNzZXJ0T2JqZWN0VHlwZShuYW1lLCB2YWx1ZSwgdm0pIHtcclxuICAgIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcclxuICAgICAgICB3YXJuKFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJcIi5jb25jYXQobmFtZSwgXCJcXFwiOiBleHBlY3RlZCBhbiBPYmplY3QsIFwiKSArXHJcbiAgICAgICAgICAgIFwiYnV0IGdvdCBcIi5jb25jYXQodG9SYXdUeXBlKHZhbHVlKSwgXCIuXCIpLCB2bSk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIE1lcmdlIHR3byBvcHRpb24gb2JqZWN0cyBpbnRvIGEgbmV3IG9uZS5cclxuICogQ29yZSB1dGlsaXR5IHVzZWQgaW4gYm90aCBpbnN0YW50aWF0aW9uIGFuZCBpbmhlcml0YW5jZS5cclxuICovXHJcbmZ1bmN0aW9uIG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLCB2bSkge1xyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICBjaGVja0NvbXBvbmVudHMoY2hpbGQpO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzRnVuY3Rpb24oY2hpbGQpKSB7XHJcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgICAgIGNoaWxkID0gY2hpbGQub3B0aW9ucztcclxuICAgIH1cclxuICAgIG5vcm1hbGl6ZVByb3BzKGNoaWxkLCB2bSk7XHJcbiAgICBub3JtYWxpemVJbmplY3QoY2hpbGQsIHZtKTtcclxuICAgIG5vcm1hbGl6ZURpcmVjdGl2ZXMkMShjaGlsZCk7XHJcbiAgICAvLyBBcHBseSBleHRlbmRzIGFuZCBtaXhpbnMgb24gdGhlIGNoaWxkIG9wdGlvbnMsXHJcbiAgICAvLyBidXQgb25seSBpZiBpdCBpcyBhIHJhdyBvcHRpb25zIG9iamVjdCB0aGF0IGlzbid0XHJcbiAgICAvLyB0aGUgcmVzdWx0IG9mIGFub3RoZXIgbWVyZ2VPcHRpb25zIGNhbGwuXHJcbiAgICAvLyBPbmx5IG1lcmdlZCBvcHRpb25zIGhhcyB0aGUgX2Jhc2UgcHJvcGVydHkuXHJcbiAgICBpZiAoIWNoaWxkLl9iYXNlKSB7XHJcbiAgICAgICAgaWYgKGNoaWxkLmV4dGVuZHMpIHtcclxuICAgICAgICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQuZXh0ZW5kcywgdm0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2hpbGQubWl4aW5zKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGQubWl4aW5zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQubWl4aW5zW2ldLCB2bSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB2YXIgb3B0aW9ucyA9IHt9O1xyXG4gICAgdmFyIGtleTtcclxuICAgIGZvciAoa2V5IGluIHBhcmVudCkge1xyXG4gICAgICAgIG1lcmdlRmllbGQoa2V5KTtcclxuICAgIH1cclxuICAgIGZvciAoa2V5IGluIGNoaWxkKSB7XHJcbiAgICAgICAgaWYgKCFoYXNPd24ocGFyZW50LCBrZXkpKSB7XHJcbiAgICAgICAgICAgIG1lcmdlRmllbGQoa2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBtZXJnZUZpZWxkKGtleSkge1xyXG4gICAgICAgIHZhciBzdHJhdCA9IHN0cmF0c1trZXldIHx8IGRlZmF1bHRTdHJhdDtcclxuICAgICAgICBvcHRpb25zW2tleV0gPSBzdHJhdChwYXJlbnRba2V5XSwgY2hpbGRba2V5XSwgdm0sIGtleSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3B0aW9ucztcclxufVxyXG4vKipcclxuICogUmVzb2x2ZSBhbiBhc3NldC5cclxuICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGJlY2F1c2UgY2hpbGQgaW5zdGFuY2VzIG5lZWQgYWNjZXNzXHJcbiAqIHRvIGFzc2V0cyBkZWZpbmVkIGluIGl0cyBhbmNlc3RvciBjaGFpbi5cclxuICovXHJcbmZ1bmN0aW9uIHJlc29sdmVBc3NldChvcHRpb25zLCB0eXBlLCBpZCwgd2Fybk1pc3NpbmcpIHtcclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgYXNzZXRzID0gb3B0aW9uc1t0eXBlXTtcclxuICAgIC8vIGNoZWNrIGxvY2FsIHJlZ2lzdHJhdGlvbiB2YXJpYXRpb25zIGZpcnN0XHJcbiAgICBpZiAoaGFzT3duKGFzc2V0cywgaWQpKVxyXG4gICAgICAgIHJldHVybiBhc3NldHNbaWRdO1xyXG4gICAgdmFyIGNhbWVsaXplZElkID0gY2FtZWxpemUoaWQpO1xyXG4gICAgaWYgKGhhc093bihhc3NldHMsIGNhbWVsaXplZElkKSlcclxuICAgICAgICByZXR1cm4gYXNzZXRzW2NhbWVsaXplZElkXTtcclxuICAgIHZhciBQYXNjYWxDYXNlSWQgPSBjYXBpdGFsaXplKGNhbWVsaXplZElkKTtcclxuICAgIGlmIChoYXNPd24oYXNzZXRzLCBQYXNjYWxDYXNlSWQpKVxyXG4gICAgICAgIHJldHVybiBhc3NldHNbUGFzY2FsQ2FzZUlkXTtcclxuICAgIC8vIGZhbGxiYWNrIHRvIHByb3RvdHlwZSBjaGFpblxyXG4gICAgdmFyIHJlcyA9IGFzc2V0c1tpZF0gfHwgYXNzZXRzW2NhbWVsaXplZElkXSB8fCBhc3NldHNbUGFzY2FsQ2FzZUlkXTtcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcclxuICAgICAgICB3YXJuKCdGYWlsZWQgdG8gcmVzb2x2ZSAnICsgdHlwZS5zbGljZSgwLCAtMSkgKyAnOiAnICsgaWQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhLCB2bSkge1xyXG4gICAgdmFyIHByb3AgPSBwcm9wT3B0aW9uc1trZXldO1xyXG4gICAgdmFyIGFic2VudCA9ICFoYXNPd24ocHJvcHNEYXRhLCBrZXkpO1xyXG4gICAgdmFyIHZhbHVlID0gcHJvcHNEYXRhW2tleV07XHJcbiAgICAvLyBib29sZWFuIGNhc3RpbmdcclxuICAgIHZhciBib29sZWFuSW5kZXggPSBnZXRUeXBlSW5kZXgoQm9vbGVhbiwgcHJvcC50eXBlKTtcclxuICAgIGlmIChib29sZWFuSW5kZXggPiAtMSkge1xyXG4gICAgICAgIGlmIChhYnNlbnQgJiYgIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpIHtcclxuICAgICAgICAgICAgLy8gb25seSBjYXN0IGVtcHR5IHN0cmluZyAvIHNhbWUgbmFtZSB0byBib29sZWFuIGlmXHJcbiAgICAgICAgICAgIC8vIGJvb2xlYW4gaGFzIGhpZ2hlciBwcmlvcml0eVxyXG4gICAgICAgICAgICB2YXIgc3RyaW5nSW5kZXggPSBnZXRUeXBlSW5kZXgoU3RyaW5nLCBwcm9wLnR5cGUpO1xyXG4gICAgICAgICAgICBpZiAoc3RyaW5nSW5kZXggPCAwIHx8IGJvb2xlYW5JbmRleCA8IHN0cmluZ0luZGV4KSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBjaGVjayBkZWZhdWx0IHZhbHVlXHJcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHZhbHVlID0gZ2V0UHJvcERlZmF1bHRWYWx1ZSh2bSwgcHJvcCwga2V5KTtcclxuICAgICAgICAvLyBzaW5jZSB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGZyZXNoIGNvcHksXHJcbiAgICAgICAgLy8gbWFrZSBzdXJlIHRvIG9ic2VydmUgaXQuXHJcbiAgICAgICAgdmFyIHByZXZTaG91bGRPYnNlcnZlID0gc2hvdWxkT2JzZXJ2ZTtcclxuICAgICAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XHJcbiAgICAgICAgb2JzZXJ2ZSh2YWx1ZSk7XHJcbiAgICAgICAgdG9nZ2xlT2JzZXJ2aW5nKHByZXZTaG91bGRPYnNlcnZlKTtcclxuICAgIH1cclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgICAgYXNzZXJ0UHJvcChwcm9wLCBrZXksIHZhbHVlLCB2bSwgYWJzZW50KTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxyXG4vKipcclxuICogR2V0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGEgcHJvcC5cclxuICovXHJcbmZ1bmN0aW9uIGdldFByb3BEZWZhdWx0VmFsdWUodm0sIHByb3AsIGtleSkge1xyXG4gICAgLy8gbm8gZGVmYXVsdCwgcmV0dXJuIHVuZGVmaW5lZFxyXG4gICAgaWYgKCFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICB2YXIgZGVmID0gcHJvcC5kZWZhdWx0O1xyXG4gICAgLy8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheVxyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNPYmplY3QoZGVmKSkge1xyXG4gICAgICAgIHdhcm4oJ0ludmFsaWQgZGVmYXVsdCB2YWx1ZSBmb3IgcHJvcCBcIicgK1xyXG4gICAgICAgICAgICBrZXkgK1xyXG4gICAgICAgICAgICAnXCI6ICcgK1xyXG4gICAgICAgICAgICAnUHJvcHMgd2l0aCB0eXBlIE9iamVjdC9BcnJheSBtdXN0IHVzZSBhIGZhY3RvcnkgZnVuY3Rpb24gJyArXHJcbiAgICAgICAgICAgICd0byByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWUuJywgdm0pO1xyXG4gICAgfVxyXG4gICAgLy8gdGhlIHJhdyBwcm9wIHZhbHVlIHdhcyBhbHNvIHVuZGVmaW5lZCBmcm9tIHByZXZpb3VzIHJlbmRlcixcclxuICAgIC8vIHJldHVybiBwcmV2aW91cyBkZWZhdWx0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHdhdGNoZXIgdHJpZ2dlclxyXG4gICAgaWYgKHZtICYmXHJcbiAgICAgICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhICYmXHJcbiAgICAgICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhW2tleV0gPT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgIHZtLl9wcm9wc1trZXldICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gdm0uX3Byb3BzW2tleV07XHJcbiAgICB9XHJcbiAgICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlc1xyXG4gICAgLy8gYSB2YWx1ZSBpcyBGdW5jdGlvbiBpZiBpdHMgcHJvdG90eXBlIGlzIGZ1bmN0aW9uIGV2ZW4gYWNyb3NzIGRpZmZlcmVudCBleGVjdXRpb24gY29udGV4dFxyXG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oZGVmKSAmJiBnZXRUeXBlKHByb3AudHlwZSkgIT09ICdGdW5jdGlvbidcclxuICAgICAgICA/IGRlZi5jYWxsKHZtKVxyXG4gICAgICAgIDogZGVmO1xyXG59XHJcbi8qKlxyXG4gKiBBc3NlcnQgd2hldGhlciBhIHByb3AgaXMgdmFsaWQuXHJcbiAqL1xyXG5mdW5jdGlvbiBhc3NlcnRQcm9wKHByb3AsIG5hbWUsIHZhbHVlLCB2bSwgYWJzZW50KSB7XHJcbiAgICBpZiAocHJvcC5yZXF1aXJlZCAmJiBhYnNlbnQpIHtcclxuICAgICAgICB3YXJuKCdNaXNzaW5nIHJlcXVpcmVkIHByb3A6IFwiJyArIG5hbWUgKyAnXCInLCB2bSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHZhbHVlID09IG51bGwgJiYgIXByb3AucmVxdWlyZWQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgdHlwZSA9IHByb3AudHlwZTtcclxuICAgIHZhciB2YWxpZCA9ICF0eXBlIHx8IHR5cGUgPT09IHRydWU7XHJcbiAgICB2YXIgZXhwZWN0ZWRUeXBlcyA9IFtdO1xyXG4gICAgaWYgKHR5cGUpIHtcclxuICAgICAgICBpZiAoIWlzQXJyYXkodHlwZSkpIHtcclxuICAgICAgICAgICAgdHlwZSA9IFt0eXBlXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgYXNzZXJ0ZWRUeXBlID0gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZVtpXSwgdm0pO1xyXG4gICAgICAgICAgICBleHBlY3RlZFR5cGVzLnB1c2goYXNzZXJ0ZWRUeXBlLmV4cGVjdGVkVHlwZSB8fCAnJyk7XHJcbiAgICAgICAgICAgIHZhbGlkID0gYXNzZXJ0ZWRUeXBlLnZhbGlkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHZhciBoYXZlRXhwZWN0ZWRUeXBlcyA9IGV4cGVjdGVkVHlwZXMuc29tZShmdW5jdGlvbiAodCkgeyByZXR1cm4gdDsgfSk7XHJcbiAgICBpZiAoIXZhbGlkICYmIGhhdmVFeHBlY3RlZFR5cGVzKSB7XHJcbiAgICAgICAgd2FybihnZXRJbnZhbGlkVHlwZU1lc3NhZ2UobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpLCB2bSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdmFyIHZhbGlkYXRvciA9IHByb3AudmFsaWRhdG9yO1xyXG4gICAgaWYgKHZhbGlkYXRvcikge1xyXG4gICAgICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xyXG4gICAgICAgICAgICB3YXJuKCdJbnZhbGlkIHByb3A6IGN1c3RvbSB2YWxpZGF0b3IgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiJyArIG5hbWUgKyAnXCIuJywgdm0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG52YXIgc2ltcGxlQ2hlY2tSRSA9IC9eKFN0cmluZ3xOdW1iZXJ8Qm9vbGVhbnxGdW5jdGlvbnxTeW1ib2x8QmlnSW50KSQvO1xyXG5mdW5jdGlvbiBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlLCB2bSkge1xyXG4gICAgdmFyIHZhbGlkO1xyXG4gICAgdmFyIGV4cGVjdGVkVHlwZSA9IGdldFR5cGUodHlwZSk7XHJcbiAgICBpZiAoc2ltcGxlQ2hlY2tSRS50ZXN0KGV4cGVjdGVkVHlwZSkpIHtcclxuICAgICAgICB2YXIgdCA9IHR5cGVvZiB2YWx1ZTtcclxuICAgICAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXHJcbiAgICAgICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdPYmplY3QnKSB7XHJcbiAgICAgICAgdmFsaWQgPSBpc1BsYWluT2JqZWN0KHZhbHVlKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xyXG4gICAgICAgIHZhbGlkID0gaXNBcnJheSh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgd2FybignSW52YWxpZCBwcm9wIHR5cGU6IFwiJyArIFN0cmluZyh0eXBlKSArICdcIiBpcyBub3QgYSBjb25zdHJ1Y3RvcicsIHZtKTtcclxuICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHZhbGlkOiB2YWxpZCxcclxuICAgICAgICBleHBlY3RlZFR5cGU6IGV4cGVjdGVkVHlwZVxyXG4gICAgfTtcclxufVxyXG52YXIgZnVuY3Rpb25UeXBlQ2hlY2tSRSA9IC9eXFxzKmZ1bmN0aW9uIChcXHcrKS87XHJcbi8qKlxyXG4gKiBVc2UgZnVuY3Rpb24gc3RyaW5nIG5hbWUgdG8gY2hlY2sgYnVpbHQtaW4gdHlwZXMsXHJcbiAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xyXG4gKiBhY3Jvc3MgZGlmZmVyZW50IHZtcyAvIGlmcmFtZXMuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRUeXBlKGZuKSB7XHJcbiAgICB2YXIgbWF0Y2ggPSBmbiAmJiBmbi50b1N0cmluZygpLm1hdGNoKGZ1bmN0aW9uVHlwZUNoZWNrUkUpO1xyXG4gICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiAnJztcclxufVxyXG5mdW5jdGlvbiBpc1NhbWVUeXBlKGEsIGIpIHtcclxuICAgIHJldHVybiBnZXRUeXBlKGEpID09PSBnZXRUeXBlKGIpO1xyXG59XHJcbmZ1bmN0aW9uIGdldFR5cGVJbmRleCh0eXBlLCBleHBlY3RlZFR5cGVzKSB7XHJcbiAgICBpZiAoIWlzQXJyYXkoZXhwZWN0ZWRUeXBlcykpIHtcclxuICAgICAgICByZXR1cm4gaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzLCB0eXBlKSA/IDAgOiAtMTtcclxuICAgIH1cclxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBleHBlY3RlZFR5cGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlc1tpXSwgdHlwZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIC0xO1xyXG59XHJcbmZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xyXG4gICAgdmFyIG1lc3NhZ2UgPSBcIkludmFsaWQgcHJvcDogdHlwZSBjaGVjayBmYWlsZWQgZm9yIHByb3AgXFxcIlwiLmNvbmNhdChuYW1lLCBcIlxcXCIuXCIpICtcclxuICAgICAgICBcIiBFeHBlY3RlZCBcIi5jb25jYXQoZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKSk7XHJcbiAgICB2YXIgZXhwZWN0ZWRUeXBlID0gZXhwZWN0ZWRUeXBlc1swXTtcclxuICAgIHZhciByZWNlaXZlZFR5cGUgPSB0b1Jhd1R5cGUodmFsdWUpO1xyXG4gICAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IGV4cGVjdGVkIHZhbHVlXHJcbiAgICBpZiAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPT09IDEgJiZcclxuICAgICAgICBpc0V4cGxpY2FibGUoZXhwZWN0ZWRUeXBlKSAmJlxyXG4gICAgICAgIGlzRXhwbGljYWJsZSh0eXBlb2YgdmFsdWUpICYmXHJcbiAgICAgICAgIWlzQm9vbGVhbihleHBlY3RlZFR5cGUsIHJlY2VpdmVkVHlwZSkpIHtcclxuICAgICAgICBtZXNzYWdlICs9IFwiIHdpdGggdmFsdWUgXCIuY29uY2F0KHN0eWxlVmFsdWUodmFsdWUsIGV4cGVjdGVkVHlwZSkpO1xyXG4gICAgfVxyXG4gICAgbWVzc2FnZSArPSBcIiwgZ290IFwiLmNvbmNhdChyZWNlaXZlZFR5cGUsIFwiIFwiKTtcclxuICAgIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSByZWNlaXZlZCB2YWx1ZVxyXG4gICAgaWYgKGlzRXhwbGljYWJsZShyZWNlaXZlZFR5cGUpKSB7XHJcbiAgICAgICAgbWVzc2FnZSArPSBcIndpdGggdmFsdWUgXCIuY29uY2F0KHN0eWxlVmFsdWUodmFsdWUsIHJlY2VpdmVkVHlwZSksIFwiLlwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBtZXNzYWdlO1xyXG59XHJcbmZ1bmN0aW9uIHN0eWxlVmFsdWUodmFsdWUsIHR5cGUpIHtcclxuICAgIGlmICh0eXBlID09PSAnU3RyaW5nJykge1xyXG4gICAgICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodmFsdWUsIFwiXFxcIlwiKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGUgPT09ICdOdW1iZXInKSB7XHJcbiAgICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KE51bWJlcih2YWx1ZSkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHZhbHVlKTtcclxuICAgIH1cclxufVxyXG52YXIgRVhQTElDQUJMRV9UWVBFUyA9IFsnc3RyaW5nJywgJ251bWJlcicsICdib29sZWFuJ107XHJcbmZ1bmN0aW9uIGlzRXhwbGljYWJsZSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIEVYUExJQ0FCTEVfVFlQRVMuc29tZShmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gZWxlbTsgfSk7XHJcbn1cclxuZnVuY3Rpb24gaXNCb29sZWFuKCkge1xyXG4gICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyZ3Muc29tZShmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gZWxlbS50b0xvd2VyQ2FzZSgpID09PSAnYm9vbGVhbic7IH0pO1xyXG59XG5cbi8qIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aCBQcm94eSAqL1xyXG52YXIgaW5pdFByb3h5O1xyXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgdmFyIGFsbG93ZWRHbG9iYWxzXzEgPSBtYWtlTWFwKCdJbmZpbml0eSx1bmRlZmluZWQsTmFOLGlzRmluaXRlLGlzTmFOLCcgK1xyXG4gICAgICAgICdwYXJzZUZsb2F0LHBhcnNlSW50LGRlY29kZVVSSSxkZWNvZGVVUklDb21wb25lbnQsZW5jb2RlVVJJLGVuY29kZVVSSUNvbXBvbmVudCwnICtcclxuICAgICAgICAnTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSxPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLEJpZ0ludCwnICtcclxuICAgICAgICAncmVxdWlyZScgLy8gZm9yIFdlYnBhY2svQnJvd3NlcmlmeVxyXG4gICAgKTtcclxuICAgIHZhciB3YXJuTm9uUHJlc2VudF8xID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XHJcbiAgICAgICAgd2FybihcIlByb3BlcnR5IG9yIG1ldGhvZCBcXFwiXCIuY29uY2F0KGtleSwgXCJcXFwiIGlzIG5vdCBkZWZpbmVkIG9uIHRoZSBpbnN0YW5jZSBidXQgXCIpICtcclxuICAgICAgICAgICAgJ3JlZmVyZW5jZWQgZHVyaW5nIHJlbmRlci4gTWFrZSBzdXJlIHRoYXQgdGhpcyBwcm9wZXJ0eSBpcyByZWFjdGl2ZSwgJyArXHJcbiAgICAgICAgICAgICdlaXRoZXIgaW4gdGhlIGRhdGEgb3B0aW9uLCBvciBmb3IgY2xhc3MtYmFzZWQgY29tcG9uZW50cywgYnkgJyArXHJcbiAgICAgICAgICAgICdpbml0aWFsaXppbmcgdGhlIHByb3BlcnR5LiAnICtcclxuICAgICAgICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvcmVhY3Rpdml0eS5odG1sI0RlY2xhcmluZy1SZWFjdGl2ZS1Qcm9wZXJ0aWVzLicsIHRhcmdldCk7XHJcbiAgICB9O1xyXG4gICAgdmFyIHdhcm5SZXNlcnZlZFByZWZpeF8xID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XHJcbiAgICAgICAgd2FybihcIlByb3BlcnR5IFxcXCJcIi5jb25jYXQoa2V5LCBcIlxcXCIgbXVzdCBiZSBhY2Nlc3NlZCB3aXRoIFxcXCIkZGF0YS5cIikuY29uY2F0KGtleSwgXCJcXFwiIGJlY2F1c2UgXCIpICtcclxuICAgICAgICAgICAgJ3Byb3BlcnRpZXMgc3RhcnRpbmcgd2l0aCBcIiRcIiBvciBcIl9cIiBhcmUgbm90IHByb3hpZWQgaW4gdGhlIFZ1ZSBpbnN0YW5jZSB0byAnICtcclxuICAgICAgICAgICAgJ3ByZXZlbnQgY29uZmxpY3RzIHdpdGggVnVlIGludGVybmFscy4gJyArXHJcbiAgICAgICAgICAgICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2FwaS8jZGF0YScsIHRhcmdldCk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGhhc1Byb3h5XzEgPSB0eXBlb2YgUHJveHkgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb3h5KTtcclxuICAgIGlmIChoYXNQcm94eV8xKSB7XHJcbiAgICAgICAgdmFyIGlzQnVpbHRJbk1vZGlmaWVyXzEgPSBtYWtlTWFwKCdzdG9wLHByZXZlbnQsc2VsZixjdHJsLHNoaWZ0LGFsdCxtZXRhLGV4YWN0Jyk7XHJcbiAgICAgICAgY29uZmlnLmtleUNvZGVzID0gbmV3IFByb3h5KGNvbmZpZy5rZXlDb2Rlcywge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh0YXJnZXQsIGtleSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc0J1aWx0SW5Nb2RpZmllcl8xKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKFwiQXZvaWQgb3ZlcndyaXRpbmcgYnVpbHQtaW4gbW9kaWZpZXIgaW4gY29uZmlnLmtleUNvZGVzOiAuXCIuY29uY2F0KGtleSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHZhciBoYXNIYW5kbGVyXzEgPSB7XHJcbiAgICAgICAgaGFzOiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcclxuICAgICAgICAgICAgdmFyIGhhcyA9IGtleSBpbiB0YXJnZXQ7XHJcbiAgICAgICAgICAgIHZhciBpc0FsbG93ZWQgPSBhbGxvd2VkR2xvYmFsc18xKGtleSkgfHxcclxuICAgICAgICAgICAgICAgICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGtleS5jaGFyQXQoMCkgPT09ICdfJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICEoa2V5IGluIHRhcmdldC4kZGF0YSkpO1xyXG4gICAgICAgICAgICBpZiAoIWhhcyAmJiAhaXNBbGxvd2VkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSlcclxuICAgICAgICAgICAgICAgICAgICB3YXJuUmVzZXJ2ZWRQcmVmaXhfMSh0YXJnZXQsIGtleSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgd2Fybk5vblByZXNlbnRfMSh0YXJnZXQsIGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGhhcyB8fCAhaXNBbGxvd2VkO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB2YXIgZ2V0SGFuZGxlcl8xID0ge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiAhKGtleSBpbiB0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSlcclxuICAgICAgICAgICAgICAgICAgICB3YXJuUmVzZXJ2ZWRQcmVmaXhfMSh0YXJnZXQsIGtleSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgd2Fybk5vblByZXNlbnRfMSh0YXJnZXQsIGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldFtrZXldO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBpbml0UHJveHkgPSBmdW5jdGlvbiBpbml0UHJveHkodm0pIHtcclxuICAgICAgICBpZiAoaGFzUHJveHlfMSkge1xyXG4gICAgICAgICAgICAvLyBkZXRlcm1pbmUgd2hpY2ggcHJveHkgaGFuZGxlciB0byB1c2VcclxuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcclxuICAgICAgICAgICAgdmFyIGhhbmRsZXJzID0gb3B0aW9ucy5yZW5kZXIgJiYgb3B0aW9ucy5yZW5kZXIuX3dpdGhTdHJpcHBlZCA/IGdldEhhbmRsZXJfMSA6IGhhc0hhbmRsZXJfMTtcclxuICAgICAgICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XG5cbnZhciBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24gPSB7XHJcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgZ2V0OiBub29wLFxyXG4gICAgc2V0OiBub29wXHJcbn07XHJcbmZ1bmN0aW9uIHByb3h5KHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcclxuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBmdW5jdGlvbiBwcm94eUdldHRlcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV07XHJcbiAgICB9O1xyXG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyKHZhbCkge1xyXG4gICAgICAgIHRoaXNbc291cmNlS2V5XVtrZXldID0gdmFsO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcclxufVxyXG5mdW5jdGlvbiBpbml0U3RhdGUodm0pIHtcclxuICAgIHZhciBvcHRzID0gdm0uJG9wdGlvbnM7XHJcbiAgICBpZiAob3B0cy5wcm9wcylcclxuICAgICAgICBpbml0UHJvcHMkMSh2bSwgb3B0cy5wcm9wcyk7XHJcbiAgICAvLyBDb21wb3NpdGlvbiBBUElcclxuICAgIGluaXRTZXR1cCh2bSk7XHJcbiAgICBpZiAob3B0cy5tZXRob2RzKVxyXG4gICAgICAgIGluaXRNZXRob2RzKHZtLCBvcHRzLm1ldGhvZHMpO1xyXG4gICAgaWYgKG9wdHMuZGF0YSkge1xyXG4gICAgICAgIGluaXREYXRhKHZtKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHZhciBvYiA9IG9ic2VydmUoKHZtLl9kYXRhID0ge30pKTtcclxuICAgICAgICBvYiAmJiBvYi52bUNvdW50Kys7XHJcbiAgICB9XHJcbiAgICBpZiAob3B0cy5jb21wdXRlZClcclxuICAgICAgICBpbml0Q29tcHV0ZWQkMSh2bSwgb3B0cy5jb21wdXRlZCk7XHJcbiAgICBpZiAob3B0cy53YXRjaCAmJiBvcHRzLndhdGNoICE9PSBuYXRpdmVXYXRjaCkge1xyXG4gICAgICAgIGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaW5pdFByb3BzJDEodm0sIHByb3BzT3B0aW9ucykge1xyXG4gICAgdmFyIHByb3BzRGF0YSA9IHZtLiRvcHRpb25zLnByb3BzRGF0YSB8fCB7fTtcclxuICAgIHZhciBwcm9wcyA9ICh2bS5fcHJvcHMgPSBzaGFsbG93UmVhY3RpdmUoe30pKTtcclxuICAgIC8vIGNhY2hlIHByb3Aga2V5cyBzbyB0aGF0IGZ1dHVyZSBwcm9wcyB1cGRhdGVzIGNhbiBpdGVyYXRlIHVzaW5nIEFycmF5XHJcbiAgICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cclxuICAgIHZhciBrZXlzID0gKHZtLiRvcHRpb25zLl9wcm9wS2V5cyA9IFtdKTtcclxuICAgIHZhciBpc1Jvb3QgPSAhdm0uJHBhcmVudDtcclxuICAgIC8vIHJvb3QgaW5zdGFuY2UgcHJvcHMgc2hvdWxkIGJlIGNvbnZlcnRlZFxyXG4gICAgaWYgKCFpc1Jvb3QpIHtcclxuICAgICAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xyXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XHJcbiAgICAgICAgICAgIGlmIChpc1Jlc2VydmVkQXR0cmlidXRlKGh5cGhlbmF0ZWRLZXkpIHx8XHJcbiAgICAgICAgICAgICAgICBjb25maWcuaXNSZXNlcnZlZEF0dHIoaHlwaGVuYXRlZEtleSkpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oXCJcXFwiXCIuY29uY2F0KGh5cGhlbmF0ZWRLZXksIFwiXFxcIiBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZSBhbmQgY2Fubm90IGJlIHVzZWQgYXMgY29tcG9uZW50IHByb3AuXCIpLCB2bSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVmaW5lUmVhY3RpdmUocHJvcHMsIGtleSwgdmFsdWUsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmICghaXNSb290ICYmICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKFwiQXZvaWQgbXV0YXRpbmcgYSBwcm9wIGRpcmVjdGx5IHNpbmNlIHRoZSB2YWx1ZSB3aWxsIGJlIFwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcGFyZW50IGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiSW5zdGVhZCwgdXNlIGEgZGF0YSBvciBjb21wdXRlZCBwcm9wZXJ0eSBiYXNlZCBvbiB0aGUgcHJvcCdzIFwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ2YWx1ZS4gUHJvcCBiZWluZyBtdXRhdGVkOiBcXFwiXCIuY29uY2F0KGtleSwgXCJcXFwiXCIpLCB2bSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZGVmaW5lUmVhY3RpdmUocHJvcHMsIGtleSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBzdGF0aWMgcHJvcHMgYXJlIGFscmVhZHkgcHJveGllZCBvbiB0aGUgY29tcG9uZW50J3MgcHJvdG90eXBlXHJcbiAgICAgICAgLy8gZHVyaW5nIFZ1ZS5leHRlbmQoKS4gV2Ugb25seSBuZWVkIHRvIHByb3h5IHByb3BzIGRlZmluZWQgYXRcclxuICAgICAgICAvLyBpbnN0YW50aWF0aW9uIGhlcmUuXHJcbiAgICAgICAgaWYgKCEoa2V5IGluIHZtKSkge1xyXG4gICAgICAgICAgICBwcm94eSh2bSwgXCJfcHJvcHNcIiwga2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZm9yICh2YXIga2V5IGluIHByb3BzT3B0aW9ucykge1xyXG4gICAgICAgIF9sb29wXzEoa2V5KTtcclxuICAgIH1cclxuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcclxufVxyXG5mdW5jdGlvbiBpbml0RGF0YSh2bSkge1xyXG4gICAgdmFyIGRhdGEgPSB2bS4kb3B0aW9ucy5kYXRhO1xyXG4gICAgZGF0YSA9IHZtLl9kYXRhID0gaXNGdW5jdGlvbihkYXRhKSA/IGdldERhdGEoZGF0YSwgdm0pIDogZGF0YSB8fCB7fTtcclxuICAgIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xyXG4gICAgICAgIGRhdGEgPSB7fTtcclxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXHJcbiAgICAgICAgICAgIHdhcm4oJ2RhdGEgZnVuY3Rpb25zIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0OlxcbicgK1xyXG4gICAgICAgICAgICAgICAgJ2h0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL2NvbXBvbmVudHMuaHRtbCNkYXRhLU11c3QtQmUtYS1GdW5jdGlvbicsIHZtKTtcclxuICAgIH1cclxuICAgIC8vIHByb3h5IGRhdGEgb24gaW5zdGFuY2VcclxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XHJcbiAgICB2YXIgcHJvcHMgPSB2bS4kb3B0aW9ucy5wcm9wcztcclxuICAgIHZhciBtZXRob2RzID0gdm0uJG9wdGlvbnMubWV0aG9kcztcclxuICAgIHZhciBpID0ga2V5cy5sZW5ndGg7XHJcbiAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XHJcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICAgICAgaWYgKG1ldGhvZHMgJiYgaGFzT3duKG1ldGhvZHMsIGtleSkpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oXCJNZXRob2QgXFxcIlwiLmNvbmNhdChrZXksIFwiXFxcIiBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQgYXMgYSBkYXRhIHByb3BlcnR5LlwiKSwgdm0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcclxuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxyXG4gICAgICAgICAgICAgICAgd2FybihcIlRoZSBkYXRhIHByb3BlcnR5IFxcXCJcIi5jb25jYXQoa2V5LCBcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiKSArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJVc2UgcHJvcCBkZWZhdWx0IHZhbHVlIGluc3RlYWQuXCIsIHZtKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xyXG4gICAgICAgICAgICBwcm94eSh2bSwgXCJfZGF0YVwiLCBrZXkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIG9ic2VydmUgZGF0YVxyXG4gICAgdmFyIG9iID0gb2JzZXJ2ZShkYXRhKTtcclxuICAgIG9iICYmIG9iLnZtQ291bnQrKztcclxufVxyXG5mdW5jdGlvbiBnZXREYXRhKGRhdGEsIHZtKSB7XHJcbiAgICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgZGF0YSBnZXR0ZXJzXHJcbiAgICBwdXNoVGFyZ2V0KCk7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiBkYXRhLmNhbGwodm0sIHZtKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwiZGF0YSgpXCIpO1xyXG4gICAgICAgIHJldHVybiB7fTtcclxuICAgIH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHBvcFRhcmdldCgpO1xyXG4gICAgfVxyXG59XHJcbnZhciBjb21wdXRlZFdhdGNoZXJPcHRpb25zID0geyBsYXp5OiB0cnVlIH07XHJcbmZ1bmN0aW9uIGluaXRDb21wdXRlZCQxKHZtLCBjb21wdXRlZCkge1xyXG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXHJcbiAgICB2YXIgd2F0Y2hlcnMgPSAodm0uX2NvbXB1dGVkV2F0Y2hlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpKTtcclxuICAgIC8vIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGp1c3QgZ2V0dGVycyBkdXJpbmcgU1NSXHJcbiAgICB2YXIgaXNTU1IgPSBpc1NlcnZlclJlbmRlcmluZygpO1xyXG4gICAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XHJcbiAgICAgICAgdmFyIHVzZXJEZWYgPSBjb21wdXRlZFtrZXldO1xyXG4gICAgICAgIHZhciBnZXR0ZXIgPSBpc0Z1bmN0aW9uKHVzZXJEZWYpID8gdXNlckRlZiA6IHVzZXJEZWYuZ2V0O1xyXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGdldHRlciA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHdhcm4oXCJHZXR0ZXIgaXMgbWlzc2luZyBmb3IgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiLmNvbmNhdChrZXksIFwiXFxcIi5cIiksIHZtKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpc1NTUikge1xyXG4gICAgICAgICAgICAvLyBjcmVhdGUgaW50ZXJuYWwgd2F0Y2hlciBmb3IgdGhlIGNvbXB1dGVkIHByb3BlcnR5LlxyXG4gICAgICAgICAgICB3YXRjaGVyc1trZXldID0gbmV3IFdhdGNoZXIodm0sIGdldHRlciB8fCBub29wLCBub29wLCBjb21wdXRlZFdhdGNoZXJPcHRpb25zKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29tcG9uZW50LWRlZmluZWQgY29tcHV0ZWQgcHJvcGVydGllcyBhcmUgYWxyZWFkeSBkZWZpbmVkIG9uIHRoZVxyXG4gICAgICAgIC8vIGNvbXBvbmVudCBwcm90b3R5cGUuIFdlIG9ubHkgbmVlZCB0byBkZWZpbmUgY29tcHV0ZWQgcHJvcGVydGllcyBkZWZpbmVkXHJcbiAgICAgICAgLy8gYXQgaW5zdGFudGlhdGlvbiBoZXJlLlxyXG4gICAgICAgIGlmICghKGtleSBpbiB2bSkpIHtcclxuICAgICAgICAgICAgZGVmaW5lQ29tcHV0ZWQodm0sIGtleSwgdXNlckRlZik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICAgICAgaWYgKGtleSBpbiB2bS4kZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgd2FybihcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIuY29uY2F0KGtleSwgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLlwiKSwgdm0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZtLiRvcHRpb25zLnByb3BzICYmIGtleSBpbiB2bS4kb3B0aW9ucy5wcm9wcykge1xyXG4gICAgICAgICAgICAgICAgd2FybihcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIuY29uY2F0KGtleSwgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIHByb3AuXCIpLCB2bSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodm0uJG9wdGlvbnMubWV0aG9kcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMubWV0aG9kcykge1xyXG4gICAgICAgICAgICAgICAgd2FybihcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIuY29uY2F0KGtleSwgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIG1ldGhvZC5cIiksIHZtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBkZWZpbmVDb21wdXRlZCh0YXJnZXQsIGtleSwgdXNlckRlZikge1xyXG4gICAgdmFyIHNob3VsZENhY2hlID0gIWlzU2VydmVyUmVuZGVyaW5nKCk7XHJcbiAgICBpZiAoaXNGdW5jdGlvbih1c2VyRGVmKSkge1xyXG4gICAgICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBzaG91bGRDYWNoZVxyXG4gICAgICAgICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcclxuICAgICAgICAgICAgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYpO1xyXG4gICAgICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBub29wO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHVzZXJEZWYuZ2V0XHJcbiAgICAgICAgICAgID8gc2hvdWxkQ2FjaGUgJiYgdXNlckRlZi5jYWNoZSAhPT0gZmFsc2VcclxuICAgICAgICAgICAgICAgID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KVxyXG4gICAgICAgICAgICAgICAgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYuZ2V0KVxyXG4gICAgICAgICAgICA6IG5vb3A7XHJcbiAgICAgICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IHVzZXJEZWYuc2V0IHx8IG5vb3A7XHJcbiAgICB9XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID09PSBub29wKSB7XHJcbiAgICAgICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgd2FybihcIkNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIi5jb25jYXQoa2V5LCBcIlxcXCIgd2FzIGFzc2lnbmVkIHRvIGJ1dCBpdCBoYXMgbm8gc2V0dGVyLlwiKSwgdGhpcyk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlcigpIHtcclxuICAgICAgICB2YXIgd2F0Y2hlciA9IHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnMgJiYgdGhpcy5fY29tcHV0ZWRXYXRjaGVyc1trZXldO1xyXG4gICAgICAgIGlmICh3YXRjaGVyKSB7XHJcbiAgICAgICAgICAgIGlmICh3YXRjaGVyLmRpcnR5KSB7XHJcbiAgICAgICAgICAgICAgICB3YXRjaGVyLmV2YWx1YXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKERlcC50YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIERlcC50YXJnZXQub25UcmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIERlcC50YXJnZXQub25UcmFjayh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVmZmVjdDogRGVwLnRhcmdldCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImdldFwiIC8qIFRyYWNrT3BUeXBlcy5HRVQgKi8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleToga2V5XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB3YXRjaGVyLmRlcGVuZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB3YXRjaGVyLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlR2V0dGVySW52b2tlcihmbikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyKCkge1xyXG4gICAgICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIHRoaXMpO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBpbml0TWV0aG9kcyh2bSwgbWV0aG9kcykge1xyXG4gICAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykge1xyXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKFwiTWV0aG9kIFxcXCJcIi5jb25jYXQoa2V5LCBcIlxcXCIgaGFzIHR5cGUgXFxcIlwiKS5jb25jYXQodHlwZW9mIG1ldGhvZHNba2V5XSwgXCJcXFwiIGluIHRoZSBjb21wb25lbnQgZGVmaW5pdGlvbi4gXCIpICtcclxuICAgICAgICAgICAgICAgICAgICBcIkRpZCB5b3UgcmVmZXJlbmNlIHRoZSBmdW5jdGlvbiBjb3JyZWN0bHk/XCIsIHZtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocHJvcHMgJiYgaGFzT3duKHByb3BzLCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKFwiTWV0aG9kIFxcXCJcIi5jb25jYXQoa2V5LCBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgcHJvcC5cIiksIHZtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoa2V5IGluIHZtICYmIGlzUmVzZXJ2ZWQoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgd2FybihcIk1ldGhvZCBcXFwiXCIuY29uY2F0KGtleSwgXCJcXFwiIGNvbmZsaWN0cyB3aXRoIGFuIGV4aXN0aW5nIFZ1ZSBpbnN0YW5jZSBtZXRob2QuIFwiKSArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJBdm9pZCBkZWZpbmluZyBjb21wb25lbnQgbWV0aG9kcyB0aGF0IHN0YXJ0IHdpdGggXyBvciAkLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB2bVtrZXldID0gdHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJyA/IG5vb3AgOiBiaW5kKG1ldGhvZHNba2V5XSwgdm0pO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGluaXRXYXRjaCh2bSwgd2F0Y2gpIHtcclxuICAgIGZvciAodmFyIGtleSBpbiB3YXRjaCkge1xyXG4gICAgICAgIHZhciBoYW5kbGVyID0gd2F0Y2hba2V5XTtcclxuICAgICAgICBpZiAoaXNBcnJheShoYW5kbGVyKSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhbmRsZXIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcltpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIodm0sIGV4cE9yRm4sIGhhbmRsZXIsIG9wdGlvbnMpIHtcclxuICAgIGlmIChpc1BsYWluT2JqZWN0KGhhbmRsZXIpKSB7XHJcbiAgICAgICAgb3B0aW9ucyA9IGhhbmRsZXI7XHJcbiAgICAgICAgaGFuZGxlciA9IGhhbmRsZXIuaGFuZGxlcjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICBoYW5kbGVyID0gdm1baGFuZGxlcl07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdm0uJHdhdGNoKGV4cE9yRm4sIGhhbmRsZXIsIG9wdGlvbnMpO1xyXG59XHJcbmZ1bmN0aW9uIHN0YXRlTWl4aW4oVnVlKSB7XHJcbiAgICAvLyBmbG93IHNvbWVob3cgaGFzIHByb2JsZW1zIHdpdGggZGlyZWN0bHkgZGVjbGFyZWQgZGVmaW5pdGlvbiBvYmplY3RcclxuICAgIC8vIHdoZW4gdXNpbmcgT2JqZWN0LmRlZmluZVByb3BlcnR5LCBzbyB3ZSBoYXZlIHRvIHByb2NlZHVyYWxseSBidWlsZCB1cFxyXG4gICAgLy8gdGhlIG9iamVjdCBoZXJlLlxyXG4gICAgdmFyIGRhdGFEZWYgPSB7fTtcclxuICAgIGRhdGFEZWYuZ2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhO1xyXG4gICAgfTtcclxuICAgIHZhciBwcm9wc0RlZiA9IHt9O1xyXG4gICAgcHJvcHNEZWYuZ2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9wcztcclxuICAgIH07XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgIGRhdGFEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB3YXJuKCdBdm9pZCByZXBsYWNpbmcgaW5zdGFuY2Ugcm9vdCAkZGF0YS4gJyArXHJcbiAgICAgICAgICAgICAgICAnVXNlIG5lc3RlZCBkYXRhIHByb3BlcnRpZXMgaW5zdGVhZC4nLCB0aGlzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHByb3BzRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgd2FybihcIiRwcm9wcyBpcyByZWFkb25seS5cIiwgdGhpcyk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGRhdGEnLCBkYXRhRGVmKTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHByb3BzJywgcHJvcHNEZWYpO1xyXG4gICAgVnVlLnByb3RvdHlwZS4kc2V0ID0gc2V0O1xyXG4gICAgVnVlLnByb3RvdHlwZS4kZGVsZXRlID0gZGVsO1xyXG4gICAgVnVlLnByb3RvdHlwZS4kd2F0Y2ggPSBmdW5jdGlvbiAoZXhwT3JGbiwgY2IsIG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgICAgIGlmIChpc1BsYWluT2JqZWN0KGNiKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgICAgICBvcHRpb25zLnVzZXIgPSB0cnVlO1xyXG4gICAgICAgIHZhciB3YXRjaGVyID0gbmV3IFdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKTtcclxuICAgICAgICBpZiAob3B0aW9ucy5pbW1lZGlhdGUpIHtcclxuICAgICAgICAgICAgdmFyIGluZm8gPSBcImNhbGxiYWNrIGZvciBpbW1lZGlhdGUgd2F0Y2hlciBcXFwiXCIuY29uY2F0KHdhdGNoZXIuZXhwcmVzc2lvbiwgXCJcXFwiXCIpO1xyXG4gICAgICAgICAgICBwdXNoVGFyZ2V0KCk7XHJcbiAgICAgICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNiLCB2bSwgW3dhdGNoZXIudmFsdWVdLCB2bSwgaW5mbyk7XHJcbiAgICAgICAgICAgIHBvcFRhcmdldCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gdW53YXRjaEZuKCkge1xyXG4gICAgICAgICAgICB3YXRjaGVyLnRlYXJkb3duKCk7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbn1cblxudmFyIHVpZCA9IDA7XHJcbmZ1bmN0aW9uIGluaXRNaXhpbiQxKFZ1ZSkge1xyXG4gICAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuICAgICAgICAvLyBhIHVpZFxyXG4gICAgICAgIHZtLl91aWQgPSB1aWQrKztcclxuICAgICAgICB2YXIgc3RhcnRUYWcsIGVuZFRhZztcclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xyXG4gICAgICAgICAgICBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIuY29uY2F0KHZtLl91aWQpO1xyXG4gICAgICAgICAgICBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIi5jb25jYXQodm0uX3VpZCk7XHJcbiAgICAgICAgICAgIG1hcmsoc3RhcnRUYWcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBhIGZsYWcgdG8gbWFyayB0aGlzIGFzIGEgVnVlIGluc3RhbmNlIHdpdGhvdXQgaGF2aW5nIHRvIGRvIGluc3RhbmNlb2ZcclxuICAgICAgICAvLyBjaGVja1xyXG4gICAgICAgIHZtLl9pc1Z1ZSA9IHRydWU7XHJcbiAgICAgICAgLy8gYXZvaWQgaW5zdGFuY2VzIGZyb20gYmVpbmcgb2JzZXJ2ZWRcclxuICAgICAgICB2bS5fX3Zfc2tpcCA9IHRydWU7XHJcbiAgICAgICAgLy8gZWZmZWN0IHNjb3BlXHJcbiAgICAgICAgdm0uX3Njb3BlID0gbmV3IEVmZmVjdFNjb3BlKHRydWUgLyogZGV0YWNoZWQgKi8pO1xyXG4gICAgICAgIC8vIG1lcmdlIG9wdGlvbnNcclxuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLl9pc0NvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAvLyBvcHRpbWl6ZSBpbnRlcm5hbCBjb21wb25lbnQgaW5zdGFudGlhdGlvblxyXG4gICAgICAgICAgICAvLyBzaW5jZSBkeW5hbWljIG9wdGlvbnMgbWVyZ2luZyBpcyBwcmV0dHkgc2xvdywgYW5kIG5vbmUgb2YgdGhlXHJcbiAgICAgICAgICAgIC8vIGludGVybmFsIGNvbXBvbmVudCBvcHRpb25zIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50LlxyXG4gICAgICAgICAgICBpbml0SW50ZXJuYWxDb21wb25lbnQodm0sIG9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdm0uJG9wdGlvbnMgPSBtZXJnZU9wdGlvbnMocmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyh2bS5jb25zdHJ1Y3RvciksIG9wdGlvbnMgfHwge30sIHZtKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cclxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgICAgICBpbml0UHJveHkodm0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGV4cG9zZSByZWFsIHNlbGZcclxuICAgICAgICB2bS5fc2VsZiA9IHZtO1xyXG4gICAgICAgIGluaXRMaWZlY3ljbGUodm0pO1xyXG4gICAgICAgIGluaXRFdmVudHModm0pO1xyXG4gICAgICAgIGluaXRSZW5kZXIodm0pO1xyXG4gICAgICAgIGNhbGxIb29rJDEodm0sICdiZWZvcmVDcmVhdGUnLCB1bmRlZmluZWQsIGZhbHNlIC8qIHNldENvbnRleHQgKi8pO1xyXG4gICAgICAgIGluaXRJbmplY3Rpb25zKHZtKTsgLy8gcmVzb2x2ZSBpbmplY3Rpb25zIGJlZm9yZSBkYXRhL3Byb3BzXHJcbiAgICAgICAgaW5pdFN0YXRlKHZtKTtcclxuICAgICAgICBpbml0UHJvdmlkZSh2bSk7IC8vIHJlc29sdmUgcHJvdmlkZSBhZnRlciBkYXRhL3Byb3BzXHJcbiAgICAgICAgY2FsbEhvb2skMSh2bSwgJ2NyZWF0ZWQnKTtcclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xyXG4gICAgICAgICAgICB2bS5fbmFtZSA9IGZvcm1hdENvbXBvbmVudE5hbWUodm0sIGZhbHNlKTtcclxuICAgICAgICAgICAgbWFyayhlbmRUYWcpO1xyXG4gICAgICAgICAgICBtZWFzdXJlKFwidnVlIFwiLmNvbmNhdCh2bS5fbmFtZSwgXCIgaW5pdFwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh2bS4kb3B0aW9ucy5lbCkge1xyXG4gICAgICAgICAgICB2bS4kbW91bnQodm0uJG9wdGlvbnMuZWwpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaW5pdEludGVybmFsQ29tcG9uZW50KHZtLCBvcHRpb25zKSB7XHJcbiAgICB2YXIgb3B0cyA9ICh2bS4kb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUodm0uY29uc3RydWN0b3Iub3B0aW9ucykpO1xyXG4gICAgLy8gZG9pbmcgdGhpcyBiZWNhdXNlIGl0J3MgZmFzdGVyIHRoYW4gZHluYW1pYyBlbnVtZXJhdGlvbi5cclxuICAgIHZhciBwYXJlbnRWbm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlO1xyXG4gICAgb3B0cy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcclxuICAgIG9wdHMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XHJcbiAgICB2YXIgdm5vZGVDb21wb25lbnRPcHRpb25zID0gcGFyZW50Vm5vZGUuY29tcG9uZW50T3B0aW9ucztcclxuICAgIG9wdHMucHJvcHNEYXRhID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnByb3BzRGF0YTtcclxuICAgIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnM7XHJcbiAgICBvcHRzLl9yZW5kZXJDaGlsZHJlbiA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5jaGlsZHJlbjtcclxuICAgIG9wdHMuX2NvbXBvbmVudFRhZyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy50YWc7XHJcbiAgICBpZiAob3B0aW9ucy5yZW5kZXIpIHtcclxuICAgICAgICBvcHRzLnJlbmRlciA9IG9wdGlvbnMucmVuZGVyO1xyXG4gICAgICAgIG9wdHMuc3RhdGljUmVuZGVyRm5zID0gb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnM7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yKSB7XHJcbiAgICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcclxuICAgIGlmIChDdG9yLnN1cGVyKSB7XHJcbiAgICAgICAgdmFyIHN1cGVyT3B0aW9ucyA9IHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvci5zdXBlcik7XHJcbiAgICAgICAgdmFyIGNhY2hlZFN1cGVyT3B0aW9ucyA9IEN0b3Iuc3VwZXJPcHRpb25zO1xyXG4gICAgICAgIGlmIChzdXBlck9wdGlvbnMgIT09IGNhY2hlZFN1cGVyT3B0aW9ucykge1xyXG4gICAgICAgICAgICAvLyBzdXBlciBvcHRpb24gY2hhbmdlZCxcclxuICAgICAgICAgICAgLy8gbmVlZCB0byByZXNvbHZlIG5ldyBvcHRpb25zLlxyXG4gICAgICAgICAgICBDdG9yLnN1cGVyT3B0aW9ucyA9IHN1cGVyT3B0aW9ucztcclxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGFueSBsYXRlLW1vZGlmaWVkL2F0dGFjaGVkIG9wdGlvbnMgKCM0OTc2KVxyXG4gICAgICAgICAgICB2YXIgbW9kaWZpZWRPcHRpb25zID0gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKTtcclxuICAgICAgICAgICAgLy8gdXBkYXRlIGJhc2UgZXh0ZW5kIG9wdGlvbnNcclxuICAgICAgICAgICAgaWYgKG1vZGlmaWVkT3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgZXh0ZW5kKEN0b3IuZXh0ZW5kT3B0aW9ucywgbW9kaWZpZWRPcHRpb25zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcHRpb25zID0gQ3Rvci5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHN1cGVyT3B0aW9ucywgQ3Rvci5leHRlbmRPcHRpb25zKTtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW29wdGlvbnMubmFtZV0gPSBDdG9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9wdGlvbnM7XHJcbn1cclxuZnVuY3Rpb24gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKSB7XHJcbiAgICB2YXIgbW9kaWZpZWQ7XHJcbiAgICB2YXIgbGF0ZXN0ID0gQ3Rvci5vcHRpb25zO1xyXG4gICAgdmFyIHNlYWxlZCA9IEN0b3Iuc2VhbGVkT3B0aW9ucztcclxuICAgIGZvciAodmFyIGtleSBpbiBsYXRlc3QpIHtcclxuICAgICAgICBpZiAobGF0ZXN0W2tleV0gIT09IHNlYWxlZFtrZXldKSB7XHJcbiAgICAgICAgICAgIGlmICghbW9kaWZpZWQpXHJcbiAgICAgICAgICAgICAgICBtb2RpZmllZCA9IHt9O1xyXG4gICAgICAgICAgICBtb2RpZmllZFtrZXldID0gbGF0ZXN0W2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1vZGlmaWVkO1xyXG59XG5cbmZ1bmN0aW9uIFZ1ZShvcHRpb25zKSB7XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhKHRoaXMgaW5zdGFuY2VvZiBWdWUpKSB7XHJcbiAgICAgICAgd2FybignVnVlIGlzIGEgY29uc3RydWN0b3IgYW5kIHNob3VsZCBiZSBjYWxsZWQgd2l0aCB0aGUgYG5ld2Aga2V5d29yZCcpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5faW5pdChvcHRpb25zKTtcclxufVxyXG4vL0B0cy1leHBlY3QtZXJyb3IgVnVlIGhhcyBmdW5jdGlvbiB0eXBlXHJcbmluaXRNaXhpbiQxKFZ1ZSk7XHJcbi8vQHRzLWV4cGVjdC1lcnJvciBWdWUgaGFzIGZ1bmN0aW9uIHR5cGVcclxuc3RhdGVNaXhpbihWdWUpO1xyXG4vL0B0cy1leHBlY3QtZXJyb3IgVnVlIGhhcyBmdW5jdGlvbiB0eXBlXHJcbmV2ZW50c01peGluKFZ1ZSk7XHJcbi8vQHRzLWV4cGVjdC1lcnJvciBWdWUgaGFzIGZ1bmN0aW9uIHR5cGVcclxubGlmZWN5Y2xlTWl4aW4oVnVlKTtcclxuLy9AdHMtZXhwZWN0LWVycm9yIFZ1ZSBoYXMgZnVuY3Rpb24gdHlwZVxyXG5yZW5kZXJNaXhpbihWdWUpO1xuXG5mdW5jdGlvbiBpbml0VXNlKFZ1ZSkge1xyXG4gICAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcclxuICAgICAgICB2YXIgaW5zdGFsbGVkUGx1Z2lucyA9IHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgfHwgKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgPSBbXSk7XHJcbiAgICAgICAgaWYgKGluc3RhbGxlZFBsdWdpbnMuaW5kZXhPZihwbHVnaW4pID4gLTEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFkZGl0aW9uYWwgcGFyYW1ldGVyc1xyXG4gICAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xyXG4gICAgICAgIGFyZ3MudW5zaGlmdCh0aGlzKTtcclxuICAgICAgICBpZiAoaXNGdW5jdGlvbihwbHVnaW4uaW5zdGFsbCkpIHtcclxuICAgICAgICAgICAgcGx1Z2luLmluc3RhbGwuYXBwbHkocGx1Z2luLCBhcmdzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaXNGdW5jdGlvbihwbHVnaW4pKSB7XHJcbiAgICAgICAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaW5zdGFsbGVkUGx1Z2lucy5wdXNoKHBsdWdpbik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG59XG5cbmZ1bmN0aW9uIGluaXRNaXhpbihWdWUpIHtcclxuICAgIFZ1ZS5taXhpbiA9IGZ1bmN0aW9uIChtaXhpbikge1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyh0aGlzLm9wdGlvbnMsIG1peGluKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbn1cblxuZnVuY3Rpb24gaW5pdEV4dGVuZChWdWUpIHtcclxuICAgIC8qKlxyXG4gICAgICogRWFjaCBpbnN0YW5jZSBjb25zdHJ1Y3RvciwgaW5jbHVkaW5nIFZ1ZSwgaGFzIGEgdW5pcXVlXHJcbiAgICAgKiBjaWQuIFRoaXMgZW5hYmxlcyB1cyB0byBjcmVhdGUgd3JhcHBlZCBcImNoaWxkXHJcbiAgICAgKiBjb25zdHJ1Y3RvcnNcIiBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZSBhbmQgY2FjaGUgdGhlbS5cclxuICAgICAqL1xyXG4gICAgVnVlLmNpZCA9IDA7XHJcbiAgICB2YXIgY2lkID0gMTtcclxuICAgIC8qKlxyXG4gICAgICogQ2xhc3MgaW5oZXJpdGFuY2VcclxuICAgICAqL1xyXG4gICAgVnVlLmV4dGVuZCA9IGZ1bmN0aW9uIChleHRlbmRPcHRpb25zKSB7XHJcbiAgICAgICAgZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnMgfHwge307XHJcbiAgICAgICAgdmFyIFN1cGVyID0gdGhpcztcclxuICAgICAgICB2YXIgU3VwZXJJZCA9IFN1cGVyLmNpZDtcclxuICAgICAgICB2YXIgY2FjaGVkQ3RvcnMgPSBleHRlbmRPcHRpb25zLl9DdG9yIHx8IChleHRlbmRPcHRpb25zLl9DdG9yID0ge30pO1xyXG4gICAgICAgIGlmIChjYWNoZWRDdG9yc1tTdXBlcklkXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ3RvcnNbU3VwZXJJZF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShleHRlbmRPcHRpb25zKSB8fCBnZXRDb21wb25lbnROYW1lKFN1cGVyLm9wdGlvbnMpO1xyXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUpIHtcclxuICAgICAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50KG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgdGhpcy5faW5pdChvcHRpb25zKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFN1Yi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN1cGVyLnByb3RvdHlwZSk7XHJcbiAgICAgICAgU3ViLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YjtcclxuICAgICAgICBTdWIuY2lkID0gY2lkKys7XHJcbiAgICAgICAgU3ViLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoU3VwZXIub3B0aW9ucywgZXh0ZW5kT3B0aW9ucyk7XHJcbiAgICAgICAgU3ViWydzdXBlciddID0gU3VwZXI7XHJcbiAgICAgICAgLy8gRm9yIHByb3BzIGFuZCBjb21wdXRlZCBwcm9wZXJ0aWVzLCB3ZSBkZWZpbmUgdGhlIHByb3h5IGdldHRlcnMgb25cclxuICAgICAgICAvLyB0aGUgVnVlIGluc3RhbmNlcyBhdCBleHRlbnNpb24gdGltZSwgb24gdGhlIGV4dGVuZGVkIHByb3RvdHlwZS4gVGhpc1xyXG4gICAgICAgIC8vIGF2b2lkcyBPYmplY3QuZGVmaW5lUHJvcGVydHkgY2FsbHMgZm9yIGVhY2ggaW5zdGFuY2UgY3JlYXRlZC5cclxuICAgICAgICBpZiAoU3ViLm9wdGlvbnMucHJvcHMpIHtcclxuICAgICAgICAgICAgaW5pdFByb3BzKFN1Yik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChTdWIub3B0aW9ucy5jb21wdXRlZCkge1xyXG4gICAgICAgICAgICBpbml0Q29tcHV0ZWQoU3ViKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYWxsb3cgZnVydGhlciBleHRlbnNpb24vbWl4aW4vcGx1Z2luIHVzYWdlXHJcbiAgICAgICAgU3ViLmV4dGVuZCA9IFN1cGVyLmV4dGVuZDtcclxuICAgICAgICBTdWIubWl4aW4gPSBTdXBlci5taXhpbjtcclxuICAgICAgICBTdWIudXNlID0gU3VwZXIudXNlO1xyXG4gICAgICAgIC8vIGNyZWF0ZSBhc3NldCByZWdpc3RlcnMsIHNvIGV4dGVuZGVkIGNsYXNzZXNcclxuICAgICAgICAvLyBjYW4gaGF2ZSB0aGVpciBwcml2YXRlIGFzc2V0cyB0b28uXHJcbiAgICAgICAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICAgICAgICBTdWJbdHlwZV0gPSBTdXBlclt0eXBlXTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBlbmFibGUgcmVjdXJzaXZlIHNlbGYtbG9va3VwXHJcbiAgICAgICAgaWYgKG5hbWUpIHtcclxuICAgICAgICAgICAgU3ViLm9wdGlvbnMuY29tcG9uZW50c1tuYW1lXSA9IFN1YjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgc3VwZXIgb3B0aW9ucyBhdCBleHRlbnNpb24gdGltZS5cclxuICAgICAgICAvLyBsYXRlciBhdCBpbnN0YW50aWF0aW9uIHdlIGNhbiBjaGVjayBpZiBTdXBlcidzIG9wdGlvbnMgaGF2ZVxyXG4gICAgICAgIC8vIGJlZW4gdXBkYXRlZC5cclxuICAgICAgICBTdWIuc3VwZXJPcHRpb25zID0gU3VwZXIub3B0aW9ucztcclxuICAgICAgICBTdWIuZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnM7XHJcbiAgICAgICAgU3ViLnNlYWxlZE9wdGlvbnMgPSBleHRlbmQoe30sIFN1Yi5vcHRpb25zKTtcclxuICAgICAgICAvLyBjYWNoZSBjb25zdHJ1Y3RvclxyXG4gICAgICAgIGNhY2hlZEN0b3JzW1N1cGVySWRdID0gU3ViO1xyXG4gICAgICAgIHJldHVybiBTdWI7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGluaXRQcm9wcyhDb21wKSB7XHJcbiAgICB2YXIgcHJvcHMgPSBDb21wLm9wdGlvbnMucHJvcHM7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcclxuICAgICAgICBwcm94eShDb21wLnByb3RvdHlwZSwgXCJfcHJvcHNcIiwga2V5KTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQoQ29tcCkge1xyXG4gICAgdmFyIGNvbXB1dGVkID0gQ29tcC5vcHRpb25zLmNvbXB1dGVkO1xyXG4gICAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XHJcbiAgICAgICAgZGVmaW5lQ29tcHV0ZWQoQ29tcC5wcm90b3R5cGUsIGtleSwgY29tcHV0ZWRba2V5XSk7XHJcbiAgICB9XHJcbn1cblxuZnVuY3Rpb24gaW5pdEFzc2V0UmVnaXN0ZXJzKFZ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYXNzZXQgcmVnaXN0cmF0aW9uIG1ldGhvZHMuXHJcbiAgICAgKi9cclxuICAgIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcclxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGZ1bmN0aW9uIGlzIG5vdCBleGFjdCBzYW1lIHR5cGVcclxuICAgICAgICBWdWVbdHlwZV0gPSBmdW5jdGlvbiAoaWQsIGRlZmluaXRpb24pIHtcclxuICAgICAgICAgICAgaWYgKCFkZWZpbml0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZSA9PT0gJ2NvbXBvbmVudCcpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoaWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGlzUGxhaW5PYmplY3QoZGVmaW5pdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbi5uYW1lID0gZGVmaW5pdGlvbi5uYW1lIHx8IGlkO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb24gPSB0aGlzLm9wdGlvbnMuX2Jhc2UuZXh0ZW5kKGRlZmluaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdkaXJlY3RpdmUnICYmIGlzRnVuY3Rpb24oZGVmaW5pdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWZpbml0aW9uID0geyBiaW5kOiBkZWZpbml0aW9uLCB1cGRhdGU6IGRlZmluaXRpb24gfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF0gPSBkZWZpbml0aW9uO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZmluaXRpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSk7XHJcbn1cblxuZnVuY3Rpb24gX2dldENvbXBvbmVudE5hbWUob3B0cykge1xyXG4gICAgcmV0dXJuIG9wdHMgJiYgKGdldENvbXBvbmVudE5hbWUob3B0cy5DdG9yLm9wdGlvbnMpIHx8IG9wdHMudGFnKTtcclxufVxyXG5mdW5jdGlvbiBtYXRjaGVzKHBhdHRlcm4sIG5hbWUpIHtcclxuICAgIGlmIChpc0FycmF5KHBhdHRlcm4pKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4uaW5kZXhPZihuYW1lKSA+IC0xO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4uc3BsaXQoJywnKS5pbmRleE9mKG5hbWUpID4gLTE7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc1JlZ0V4cChwYXR0ZXJuKSkge1xyXG4gICAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobmFtZSk7XHJcbiAgICB9XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbmZ1bmN0aW9uIHBydW5lQ2FjaGUoa2VlcEFsaXZlSW5zdGFuY2UsIGZpbHRlcikge1xyXG4gICAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGUsIGtleXMgPSBrZWVwQWxpdmVJbnN0YW5jZS5rZXlzLCBfdm5vZGUgPSBrZWVwQWxpdmVJbnN0YW5jZS5fdm5vZGU7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gY2FjaGUpIHtcclxuICAgICAgICB2YXIgZW50cnkgPSBjYWNoZVtrZXldO1xyXG4gICAgICAgIGlmIChlbnRyeSkge1xyXG4gICAgICAgICAgICB2YXIgbmFtZV8xID0gZW50cnkubmFtZTtcclxuICAgICAgICAgICAgaWYgKG5hbWVfMSAmJiAhZmlsdGVyKG5hbWVfMSkpIHtcclxuICAgICAgICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShjYWNoZSwga2V5LCBrZXlzLCBfdm5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeShjYWNoZSwga2V5LCBrZXlzLCBjdXJyZW50KSB7XHJcbiAgICB2YXIgZW50cnkgPSBjYWNoZVtrZXldO1xyXG4gICAgaWYgKGVudHJ5ICYmICghY3VycmVudCB8fCBlbnRyeS50YWcgIT09IGN1cnJlbnQudGFnKSkge1xyXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgY2FuIGJlIHVuZGVmaW5lZFxyXG4gICAgICAgIGVudHJ5LmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XHJcbiAgICB9XHJcbiAgICBjYWNoZVtrZXldID0gbnVsbDtcclxuICAgIHJlbW92ZSQyKGtleXMsIGtleSk7XHJcbn1cclxudmFyIHBhdHRlcm5UeXBlcyA9IFtTdHJpbmcsIFJlZ0V4cCwgQXJyYXldO1xyXG4vLyBUT0RPIGRlZmluZUNvbXBvbmVudFxyXG52YXIgS2VlcEFsaXZlID0ge1xyXG4gICAgbmFtZTogJ2tlZXAtYWxpdmUnLFxyXG4gICAgYWJzdHJhY3Q6IHRydWUsXHJcbiAgICBwcm9wczoge1xyXG4gICAgICAgIGluY2x1ZGU6IHBhdHRlcm5UeXBlcyxcclxuICAgICAgICBleGNsdWRlOiBwYXR0ZXJuVHlwZXMsXHJcbiAgICAgICAgbWF4OiBbU3RyaW5nLCBOdW1iZXJdXHJcbiAgICB9LFxyXG4gICAgbWV0aG9kczoge1xyXG4gICAgICAgIGNhY2hlVk5vZGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgY2FjaGUgPSBfYS5jYWNoZSwga2V5cyA9IF9hLmtleXMsIHZub2RlVG9DYWNoZSA9IF9hLnZub2RlVG9DYWNoZSwga2V5VG9DYWNoZSA9IF9hLmtleVRvQ2FjaGU7XHJcbiAgICAgICAgICAgIGlmICh2bm9kZVRvQ2FjaGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0YWcgPSB2bm9kZVRvQ2FjaGUudGFnLCBjb21wb25lbnRJbnN0YW5jZSA9IHZub2RlVG9DYWNoZS5jb21wb25lbnRJbnN0YW5jZSwgY29tcG9uZW50T3B0aW9ucyA9IHZub2RlVG9DYWNoZS5jb21wb25lbnRPcHRpb25zO1xyXG4gICAgICAgICAgICAgICAgY2FjaGVba2V5VG9DYWNoZV0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogX2dldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyksXHJcbiAgICAgICAgICAgICAgICAgICAgdGFnOiB0YWcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50SW5zdGFuY2U6IGNvbXBvbmVudEluc3RhbmNlXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAga2V5cy5wdXNoKGtleVRvQ2FjaGUpO1xyXG4gICAgICAgICAgICAgICAgLy8gcHJ1bmUgb2xkZXN0IGVudHJ5XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXggJiYga2V5cy5sZW5ndGggPiBwYXJzZUludCh0aGlzLm1heCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleXNbMF0sIGtleXMsIHRoaXMuX3Zub2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMudm5vZGVUb0NhY2hlID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjcmVhdGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICAgICAgdGhpcy5rZXlzID0gW107XHJcbiAgICB9LFxyXG4gICAgZGVzdHJveWVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuY2FjaGUpIHtcclxuICAgICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KHRoaXMuY2FjaGUsIGtleSwgdGhpcy5rZXlzKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgbW91bnRlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5jYWNoZVZOb2RlKCk7XHJcbiAgICAgICAgdGhpcy4kd2F0Y2goJ2luY2x1ZGUnLCBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgICAgIHBydW5lQ2FjaGUoX3RoaXMsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuJHdhdGNoKCdleGNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICBwcnVuZUNhY2hlKF90aGlzLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuY2FjaGVWTm9kZSgpO1xyXG4gICAgfSxcclxuICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBzbG90ID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcclxuICAgICAgICB2YXIgdm5vZGUgPSBnZXRGaXJzdENvbXBvbmVudENoaWxkKHNsb3QpO1xyXG4gICAgICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcclxuICAgICAgICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xyXG4gICAgICAgICAgICAvLyBjaGVjayBwYXR0ZXJuXHJcbiAgICAgICAgICAgIHZhciBuYW1lXzIgPSBfZ2V0Q29tcG9uZW50TmFtZShjb21wb25lbnRPcHRpb25zKTtcclxuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgaW5jbHVkZSA9IF9hLmluY2x1ZGUsIGV4Y2x1ZGUgPSBfYS5leGNsdWRlO1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIC8vIG5vdCBpbmNsdWRlZFxyXG4gICAgICAgICAgICAoaW5jbHVkZSAmJiAoIW5hbWVfMiB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lXzIpKSkgfHxcclxuICAgICAgICAgICAgICAgIC8vIGV4Y2x1ZGVkXHJcbiAgICAgICAgICAgICAgICAoZXhjbHVkZSAmJiBuYW1lXzIgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lXzIpKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZub2RlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBfYiA9IHRoaXMsIGNhY2hlID0gX2IuY2FjaGUsIGtleXMgPSBfYi5rZXlzO1xyXG4gICAgICAgICAgICB2YXIga2V5ID0gdm5vZGUua2V5ID09IG51bGxcclxuICAgICAgICAgICAgICAgID8gLy8gc2FtZSBjb25zdHJ1Y3RvciBtYXkgZ2V0IHJlZ2lzdGVyZWQgYXMgZGlmZmVyZW50IGxvY2FsIGNvbXBvbmVudHNcclxuICAgICAgICAgICAgICAgICAgICAvLyBzbyBjaWQgYWxvbmUgaXMgbm90IGVub3VnaCAoIzMyNjkpXHJcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50T3B0aW9ucy5DdG9yLmNpZCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChjb21wb25lbnRPcHRpb25zLnRhZyA/IFwiOjpcIi5jb25jYXQoY29tcG9uZW50T3B0aW9ucy50YWcpIDogJycpXHJcbiAgICAgICAgICAgICAgICA6IHZub2RlLmtleTtcclxuICAgICAgICAgICAgaWYgKGNhY2hlW2tleV0pIHtcclxuICAgICAgICAgICAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY2FjaGVba2V5XS5jb21wb25lbnRJbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgIC8vIG1ha2UgY3VycmVudCBrZXkgZnJlc2hlc3RcclxuICAgICAgICAgICAgICAgIHJlbW92ZSQyKGtleXMsIGtleSk7XHJcbiAgICAgICAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGRlbGF5IHNldHRpbmcgdGhlIGNhY2hlIHVudGlsIHVwZGF0ZVxyXG4gICAgICAgICAgICAgICAgdGhpcy52bm9kZVRvQ2FjaGUgPSB2bm9kZTtcclxuICAgICAgICAgICAgICAgIHRoaXMua2V5VG9DYWNoZSA9IGtleTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGNhbiB2bm9kZS5kYXRhIGNhbiBiZSB1bmRlZmluZWRcclxuICAgICAgICAgICAgdm5vZGUuZGF0YS5rZWVwQWxpdmUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdm5vZGUgfHwgKHNsb3QgJiYgc2xvdFswXSk7XHJcbiAgICB9XHJcbn07XG5cbnZhciBidWlsdEluQ29tcG9uZW50cyA9IHtcclxuICAgIEtlZXBBbGl2ZTogS2VlcEFsaXZlXHJcbn07XG5cbmZ1bmN0aW9uIGluaXRHbG9iYWxBUEkoVnVlKSB7XHJcbiAgICAvLyBjb25maWdcclxuICAgIHZhciBjb25maWdEZWYgPSB7fTtcclxuICAgIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgIGNvbmZpZ0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHdhcm4oJ0RvIG5vdCByZXBsYWNlIHRoZSBWdWUuY29uZmlnIG9iamVjdCwgc2V0IGluZGl2aWR1YWwgZmllbGRzIGluc3RlYWQuJyk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdjb25maWcnLCBjb25maWdEZWYpO1xyXG4gICAgLy8gZXhwb3NlZCB1dGlsIG1ldGhvZHMuXHJcbiAgICAvLyBOT1RFOiB0aGVzZSBhcmUgbm90IGNvbnNpZGVyZWQgcGFydCBvZiB0aGUgcHVibGljIEFQSSAtIGF2b2lkIHJlbHlpbmcgb25cclxuICAgIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXHJcbiAgICBWdWUudXRpbCA9IHtcclxuICAgICAgICB3YXJuOiB3YXJuLFxyXG4gICAgICAgIGV4dGVuZDogZXh0ZW5kLFxyXG4gICAgICAgIG1lcmdlT3B0aW9uczogbWVyZ2VPcHRpb25zLFxyXG4gICAgICAgIGRlZmluZVJlYWN0aXZlOiBkZWZpbmVSZWFjdGl2ZVxyXG4gICAgfTtcclxuICAgIFZ1ZS5zZXQgPSBzZXQ7XHJcbiAgICBWdWUuZGVsZXRlID0gZGVsO1xyXG4gICAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XHJcbiAgICAvLyAyLjYgZXhwbGljaXQgb2JzZXJ2YWJsZSBBUElcclxuICAgIFZ1ZS5vYnNlcnZhYmxlID0gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgIG9ic2VydmUob2JqKTtcclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfTtcclxuICAgIFZ1ZS5vcHRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcclxuICAgICAgICBWdWUub3B0aW9uc1t0eXBlICsgJ3MnXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICB9KTtcclxuICAgIC8vIHRoaXMgaXMgdXNlZCB0byBpZGVudGlmeSB0aGUgXCJiYXNlXCIgY29uc3RydWN0b3IgdG8gZXh0ZW5kIGFsbCBwbGFpbi1vYmplY3RcclxuICAgIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxyXG4gICAgVnVlLm9wdGlvbnMuX2Jhc2UgPSBWdWU7XHJcbiAgICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xyXG4gICAgaW5pdFVzZShWdWUpO1xyXG4gICAgaW5pdE1peGluKFZ1ZSk7XHJcbiAgICBpbml0RXh0ZW5kKFZ1ZSk7XHJcbiAgICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcclxufVxuXG5pbml0R2xvYmFsQVBJKFZ1ZSk7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGlzU2VydmVyJywge1xyXG4gICAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xyXG59KTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckc3NyQ29udGV4dCcsIHtcclxuICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQ7XHJcbiAgICB9XHJcbn0pO1xyXG4vLyBleHBvc2UgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgZm9yIHNzciBydW50aW1lIGhlbHBlciBpbnN0YWxsYXRpb25cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwgJ0Z1bmN0aW9uYWxSZW5kZXJDb250ZXh0Jywge1xyXG4gICAgdmFsdWU6IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0XHJcbn0pO1xyXG5WdWUudmVyc2lvbiA9IHZlcnNpb247XG5cbi8vIHRoZXNlIGFyZSByZXNlcnZlZCBmb3Igd2ViIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgY29tcGlsZWQgYXdheVxyXG4vLyBkdXJpbmcgdGVtcGxhdGUgY29tcGlsYXRpb25cclxudmFyIGlzUmVzZXJ2ZWRBdHRyID0gbWFrZU1hcCgnc3R5bGUsY2xhc3MnKTtcclxuLy8gYXR0cmlidXRlcyB0aGF0IHNob3VsZCBiZSB1c2luZyBwcm9wcyBmb3IgYmluZGluZ1xyXG52YXIgYWNjZXB0VmFsdWUgPSBtYWtlTWFwKCdpbnB1dCx0ZXh0YXJlYSxvcHRpb24sc2VsZWN0LHByb2dyZXNzJyk7XHJcbnZhciBtdXN0VXNlUHJvcCA9IGZ1bmN0aW9uICh0YWcsIHR5cGUsIGF0dHIpIHtcclxuICAgIHJldHVybiAoKGF0dHIgPT09ICd2YWx1ZScgJiYgYWNjZXB0VmFsdWUodGFnKSAmJiB0eXBlICE9PSAnYnV0dG9uJykgfHxcclxuICAgICAgICAoYXR0ciA9PT0gJ3NlbGVjdGVkJyAmJiB0YWcgPT09ICdvcHRpb24nKSB8fFxyXG4gICAgICAgIChhdHRyID09PSAnY2hlY2tlZCcgJiYgdGFnID09PSAnaW5wdXQnKSB8fFxyXG4gICAgICAgIChhdHRyID09PSAnbXV0ZWQnICYmIHRhZyA9PT0gJ3ZpZGVvJykpO1xyXG59O1xyXG52YXIgaXNFbnVtZXJhdGVkQXR0ciA9IG1ha2VNYXAoJ2NvbnRlbnRlZGl0YWJsZSxkcmFnZ2FibGUsc3BlbGxjaGVjaycpO1xyXG52YXIgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlID0gbWFrZU1hcCgnZXZlbnRzLGNhcmV0LHR5cGluZyxwbGFpbnRleHQtb25seScpO1xyXG52YXIgY29udmVydEVudW1lcmF0ZWRWYWx1ZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICByZXR1cm4gaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkgfHwgdmFsdWUgPT09ICdmYWxzZSdcclxuICAgICAgICA/ICdmYWxzZSdcclxuICAgICAgICA6IC8vIGFsbG93IGFyYml0cmFyeSBzdHJpbmcgdmFsdWUgZm9yIGNvbnRlbnRlZGl0YWJsZVxyXG4gICAgICAgICAgICBrZXkgPT09ICdjb250ZW50ZWRpdGFibGUnICYmIGlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSh2YWx1ZSlcclxuICAgICAgICAgICAgICAgID8gdmFsdWVcclxuICAgICAgICAgICAgICAgIDogJ3RydWUnO1xyXG59O1xyXG52YXIgaXNCb29sZWFuQXR0ciA9IG1ha2VNYXAoJ2FsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsJyArXHJcbiAgICAnZGVmYXVsdCxkZWZhdWx0Y2hlY2tlZCxkZWZhdWx0bXV0ZWQsZGVmYXVsdHNlbGVjdGVkLGRlZmVyLGRpc2FibGVkLCcgK1xyXG4gICAgJ2VuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsJyArXHJcbiAgICAnbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSwnICtcclxuICAgICdyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3Msc2VsZWN0ZWQsc29ydGFibGUsJyArXHJcbiAgICAndHJ1ZXNwZWVkLHR5cGVtdXN0bWF0Y2gsdmlzaWJsZScpO1xyXG52YXIgeGxpbmtOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJztcclxudmFyIGlzWGxpbmsgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgcmV0dXJuIG5hbWUuY2hhckF0KDUpID09PSAnOicgJiYgbmFtZS5zbGljZSgwLCA1KSA9PT0gJ3hsaW5rJztcclxufTtcclxudmFyIGdldFhsaW5rUHJvcCA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICByZXR1cm4gaXNYbGluayhuYW1lKSA/IG5hbWUuc2xpY2UoNiwgbmFtZS5sZW5ndGgpIDogJyc7XHJcbn07XHJcbnZhciBpc0ZhbHN5QXR0clZhbHVlID0gZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgcmV0dXJuIHZhbCA9PSBudWxsIHx8IHZhbCA9PT0gZmFsc2U7XHJcbn07XG5cbmZ1bmN0aW9uIGdlbkNsYXNzRm9yVm5vZGUodm5vZGUpIHtcclxuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcclxuICAgIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XHJcbiAgICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XHJcbiAgICB3aGlsZSAoaXNEZWYoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xyXG4gICAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XHJcbiAgICAgICAgaWYgKGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSkge1xyXG4gICAgICAgICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoY2hpbGROb2RlLmRhdGEsIGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgcGFyZW50Tm9kZS5wYXJlbnQgbm90IFZOb2RlV2l0aERhdGFcclxuICAgIHdoaWxlIChpc0RlZigocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkpIHtcclxuICAgICAgICBpZiAocGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLmRhdGEpIHtcclxuICAgICAgICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGRhdGEsIHBhcmVudE5vZGUuZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlbmRlckNsYXNzKGRhdGEuc3RhdGljQ2xhc3MsIGRhdGEuY2xhc3MpO1xyXG59XHJcbmZ1bmN0aW9uIG1lcmdlQ2xhc3NEYXRhKGNoaWxkLCBwYXJlbnQpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RhdGljQ2xhc3M6IGNvbmNhdChjaGlsZC5zdGF0aWNDbGFzcywgcGFyZW50LnN0YXRpY0NsYXNzKSxcclxuICAgICAgICBjbGFzczogaXNEZWYoY2hpbGQuY2xhc3MpID8gW2NoaWxkLmNsYXNzLCBwYXJlbnQuY2xhc3NdIDogcGFyZW50LmNsYXNzXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIHJlbmRlckNsYXNzKHN0YXRpY0NsYXNzLCBkeW5hbWljQ2xhc3MpIHtcclxuICAgIGlmIChpc0RlZihzdGF0aWNDbGFzcykgfHwgaXNEZWYoZHluYW1pY0NsYXNzKSkge1xyXG4gICAgICAgIHJldHVybiBjb25jYXQoc3RhdGljQ2xhc3MsIHN0cmluZ2lmeUNsYXNzKGR5bmFtaWNDbGFzcykpO1xyXG4gICAgfVxyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgIHJldHVybiAnJztcclxufVxyXG5mdW5jdGlvbiBjb25jYXQoYSwgYikge1xyXG4gICAgcmV0dXJuIGEgPyAoYiA/IGEgKyAnICcgKyBiIDogYSkgOiBiIHx8ICcnO1xyXG59XHJcbmZ1bmN0aW9uIHN0cmluZ2lmeUNsYXNzKHZhbHVlKSB7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gc3RyaW5naWZ5QXJyYXkodmFsdWUpO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiBzdHJpbmdpZnlPYmplY3QodmFsdWUpO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG4gICAgcmV0dXJuICcnO1xyXG59XHJcbmZ1bmN0aW9uIHN0cmluZ2lmeUFycmF5KHZhbHVlKSB7XHJcbiAgICB2YXIgcmVzID0gJyc7XHJcbiAgICB2YXIgc3RyaW5naWZpZWQ7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgIGlmIChpc0RlZigoc3RyaW5naWZpZWQgPSBzdHJpbmdpZnlDbGFzcyh2YWx1ZVtpXSkpKSAmJiBzdHJpbmdpZmllZCAhPT0gJycpIHtcclxuICAgICAgICAgICAgaWYgKHJlcylcclxuICAgICAgICAgICAgICAgIHJlcyArPSAnICc7XHJcbiAgICAgICAgICAgIHJlcyArPSBzdHJpbmdpZmllZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcbmZ1bmN0aW9uIHN0cmluZ2lmeU9iamVjdCh2YWx1ZSkge1xyXG4gICAgdmFyIHJlcyA9ICcnO1xyXG4gICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlW2tleV0pIHtcclxuICAgICAgICAgICAgaWYgKHJlcylcclxuICAgICAgICAgICAgICAgIHJlcyArPSAnICc7XHJcbiAgICAgICAgICAgIHJlcyArPSBrZXk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufVxuXG52YXIgbmFtZXNwYWNlTWFwID0ge1xyXG4gICAgc3ZnOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxyXG4gICAgbWF0aDogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnXHJcbn07XHJcbnZhciBpc0hUTUxUYWcgPSBtYWtlTWFwKCdodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSwnICtcclxuICAgICdhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLGhlYWRlcixoMSxoMixoMyxoNCxoNSxoNixoZ3JvdXAsbmF2LHNlY3Rpb24sJyArXHJcbiAgICAnZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsJyArXHJcbiAgICAnYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ0YyxydWJ5LCcgK1xyXG4gICAgJ3Msc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLHRpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLCcgK1xyXG4gICAgJ2VtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLCcgK1xyXG4gICAgJ2NhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLHRoLHRyLCcgK1xyXG4gICAgJ2J1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCxvcHRpb24sJyArXHJcbiAgICAnb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSwnICtcclxuICAgICdkZXRhaWxzLGRpYWxvZyxtZW51LG1lbnVpdGVtLHN1bW1hcnksJyArXHJcbiAgICAnY29udGVudCxlbGVtZW50LHNoYWRvdyx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdCcpO1xyXG4vLyB0aGlzIG1hcCBpcyBpbnRlbnRpb25hbGx5IHNlbGVjdGl2ZSwgb25seSBjb3ZlcmluZyBTVkcgZWxlbWVudHMgdGhhdCBtYXlcclxuLy8gY29udGFpbiBjaGlsZCBlbGVtZW50cy5cclxudmFyIGlzU1ZHID0gbWFrZU1hcCgnc3ZnLGFuaW1hdGUsY2lyY2xlLGNsaXBwYXRoLGN1cnNvcixkZWZzLGRlc2MsZWxsaXBzZSxmaWx0ZXIsZm9udC1mYWNlLCcgK1xyXG4gICAgJ2ZvcmVpZ25vYmplY3QsZyxnbHlwaCxpbWFnZSxsaW5lLG1hcmtlcixtYXNrLG1pc3NpbmctZ2x5cGgscGF0aCxwYXR0ZXJuLCcgK1xyXG4gICAgJ3BvbHlnb24scG9seWxpbmUscmVjdCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dHBhdGgsdHNwYW4sdXNlLHZpZXcnLCB0cnVlKTtcclxudmFyIGlzUmVzZXJ2ZWRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XHJcbiAgICByZXR1cm4gaXNIVE1MVGFnKHRhZykgfHwgaXNTVkcodGFnKTtcclxufTtcclxuZnVuY3Rpb24gZ2V0VGFnTmFtZXNwYWNlKHRhZykge1xyXG4gICAgaWYgKGlzU1ZHKHRhZykpIHtcclxuICAgICAgICByZXR1cm4gJ3N2Zyc7XHJcbiAgICB9XHJcbiAgICAvLyBiYXNpYyBzdXBwb3J0IGZvciBNYXRoTUxcclxuICAgIC8vIG5vdGUgaXQgZG9lc24ndCBzdXBwb3J0IG90aGVyIE1hdGhNTCBlbGVtZW50cyBiZWluZyBjb21wb25lbnQgcm9vdHNcclxuICAgIGlmICh0YWcgPT09ICdtYXRoJykge1xyXG4gICAgICAgIHJldHVybiAnbWF0aCc7XHJcbiAgICB9XHJcbn1cclxudmFyIHVua25vd25FbGVtZW50Q2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG5mdW5jdGlvbiBpc1Vua25vd25FbGVtZW50KHRhZykge1xyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICBpZiAoIWluQnJvd3Nlcikge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzUmVzZXJ2ZWRUYWcodGFnKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHRhZyA9IHRhZy50b0xvd2VyQ2FzZSgpO1xyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICBpZiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddICE9IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gdW5rbm93bkVsZW1lbnRDYWNoZVt0YWddO1xyXG4gICAgfVxyXG4gICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xyXG4gICAgaWYgKHRhZy5pbmRleE9mKCctJykgPiAtMSkge1xyXG4gICAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI4MjEwMzY0LzEwNzAyNDRcclxuICAgICAgICByZXR1cm4gKHVua25vd25FbGVtZW50Q2FjaGVbdGFnXSA9XHJcbiAgICAgICAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTFVua25vd25FbGVtZW50IHx8XHJcbiAgICAgICAgICAgICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxFbGVtZW50KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gL0hUTUxVbmtub3duRWxlbWVudC8udGVzdChlbC50b1N0cmluZygpKSk7XHJcbiAgICB9XHJcbn1cclxudmFyIGlzVGV4dElucHV0VHlwZSA9IG1ha2VNYXAoJ3RleHQsbnVtYmVyLHBhc3N3b3JkLHNlYXJjaCxlbWFpbCx0ZWwsdXJsJyk7XG5cbi8qKlxyXG4gKiBRdWVyeSBhbiBlbGVtZW50IHNlbGVjdG9yIGlmIGl0J3Mgbm90IGFuIGVsZW1lbnQgYWxyZWFkeS5cclxuICovXHJcbmZ1bmN0aW9uIHF1ZXJ5KGVsKSB7XHJcbiAgICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHZhciBzZWxlY3RlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xyXG4gICAgICAgIGlmICghc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKCdDYW5ub3QgZmluZCBlbGVtZW50OiAnICsgZWwpO1xyXG4gICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzZWxlY3RlZDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBlbDtcclxuICAgIH1cclxufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50KHRhZ05hbWUsIHZub2RlKSB7XHJcbiAgICB2YXIgZWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcclxuICAgIGlmICh0YWdOYW1lICE9PSAnc2VsZWN0Jykge1xyXG4gICAgICAgIHJldHVybiBlbG07XHJcbiAgICB9XHJcbiAgICAvLyBmYWxzZSBvciBudWxsIHdpbGwgcmVtb3ZlIHRoZSBhdHRyaWJ1dGUgYnV0IHVuZGVmaW5lZCB3aWxsIG5vdFxyXG4gICAgaWYgKHZub2RlLmRhdGEgJiZcclxuICAgICAgICB2bm9kZS5kYXRhLmF0dHJzICYmXHJcbiAgICAgICAgdm5vZGUuZGF0YS5hdHRycy5tdWx0aXBsZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgZWxtLnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCAnbXVsdGlwbGUnKTtcclxuICAgIH1cclxuICAgIHJldHVybiBlbG07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgdGFnTmFtZSkge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSwgdGFnTmFtZSk7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlVGV4dE5vZGUodGV4dCkge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnQodGV4dCkge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGV4dCk7XHJcbn1cclxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlKHBhcmVudE5vZGUsIG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpIHtcclxuICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpO1xyXG59XHJcbmZ1bmN0aW9uIHJlbW92ZUNoaWxkKG5vZGUsIGNoaWxkKSB7XHJcbiAgICBub2RlLnJlbW92ZUNoaWxkKGNoaWxkKTtcclxufVxyXG5mdW5jdGlvbiBhcHBlbmRDaGlsZChub2RlLCBjaGlsZCkge1xyXG4gICAgbm9kZS5hcHBlbmRDaGlsZChjaGlsZCk7XHJcbn1cclxuZnVuY3Rpb24gcGFyZW50Tm9kZShub2RlKSB7XHJcbiAgICByZXR1cm4gbm9kZS5wYXJlbnROb2RlO1xyXG59XHJcbmZ1bmN0aW9uIG5leHRTaWJsaW5nKG5vZGUpIHtcclxuICAgIHJldHVybiBub2RlLm5leHRTaWJsaW5nO1xyXG59XHJcbmZ1bmN0aW9uIHRhZ05hbWUobm9kZSkge1xyXG4gICAgcmV0dXJuIG5vZGUudGFnTmFtZTtcclxufVxyXG5mdW5jdGlvbiBzZXRUZXh0Q29udGVudChub2RlLCB0ZXh0KSB7XHJcbiAgICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcclxufVxyXG5mdW5jdGlvbiBzZXRTdHlsZVNjb3BlKG5vZGUsIHNjb3BlSWQpIHtcclxuICAgIG5vZGUuc2V0QXR0cmlidXRlKHNjb3BlSWQsICcnKTtcclxufVxuXG52YXIgbm9kZU9wcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50LFxuICBjcmVhdGVFbGVtZW50TlM6IGNyZWF0ZUVsZW1lbnROUyxcbiAgY3JlYXRlVGV4dE5vZGU6IGNyZWF0ZVRleHROb2RlLFxuICBjcmVhdGVDb21tZW50OiBjcmVhdGVDb21tZW50LFxuICBpbnNlcnRCZWZvcmU6IGluc2VydEJlZm9yZSxcbiAgcmVtb3ZlQ2hpbGQ6IHJlbW92ZUNoaWxkLFxuICBhcHBlbmRDaGlsZDogYXBwZW5kQ2hpbGQsXG4gIHBhcmVudE5vZGU6IHBhcmVudE5vZGUsXG4gIG5leHRTaWJsaW5nOiBuZXh0U2libGluZyxcbiAgdGFnTmFtZTogdGFnTmFtZSxcbiAgc2V0VGV4dENvbnRlbnQ6IHNldFRleHRDb250ZW50LFxuICBzZXRTdHlsZVNjb3BlOiBzZXRTdHlsZVNjb3BlXG59KTtcblxudmFyIHJlZiA9IHtcclxuICAgIGNyZWF0ZTogZnVuY3Rpb24gKF8sIHZub2RlKSB7XHJcbiAgICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xyXG4gICAgfSxcclxuICAgIHVwZGF0ZTogZnVuY3Rpb24gKG9sZFZub2RlLCB2bm9kZSkge1xyXG4gICAgICAgIGlmIChvbGRWbm9kZS5kYXRhLnJlZiAhPT0gdm5vZGUuZGF0YS5yZWYpIHtcclxuICAgICAgICAgICAgcmVnaXN0ZXJSZWYob2xkVm5vZGUsIHRydWUpO1xyXG4gICAgICAgICAgICByZWdpc3RlclJlZih2bm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICh2bm9kZSkge1xyXG4gICAgICAgIHJlZ2lzdGVyUmVmKHZub2RlLCB0cnVlKTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gcmVnaXN0ZXJSZWYodm5vZGUsIGlzUmVtb3ZhbCkge1xyXG4gICAgdmFyIHJlZiA9IHZub2RlLmRhdGEucmVmO1xyXG4gICAgaWYgKCFpc0RlZihyZWYpKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIHZhciB2bSA9IHZub2RlLmNvbnRleHQ7XHJcbiAgICB2YXIgcmVmVmFsdWUgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSB8fCB2bm9kZS5lbG07XHJcbiAgICB2YXIgdmFsdWUgPSBpc1JlbW92YWwgPyBudWxsIDogcmVmVmFsdWU7XHJcbiAgICB2YXIgJHJlZnNWYWx1ZSA9IGlzUmVtb3ZhbCA/IHVuZGVmaW5lZCA6IHJlZlZhbHVlO1xyXG4gICAgaWYgKGlzRnVuY3Rpb24ocmVmKSkge1xyXG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKHJlZiwgdm0sIFt2YWx1ZV0sIHZtLCBcInRlbXBsYXRlIHJlZiBmdW5jdGlvblwiKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgaXNGb3IgPSB2bm9kZS5kYXRhLnJlZkluRm9yO1xyXG4gICAgdmFyIF9pc1N0cmluZyA9IHR5cGVvZiByZWYgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiByZWYgPT09ICdudW1iZXInO1xyXG4gICAgdmFyIF9pc1JlZiA9IGlzUmVmKHJlZik7XHJcbiAgICB2YXIgcmVmcyA9IHZtLiRyZWZzO1xyXG4gICAgaWYgKF9pc1N0cmluZyB8fCBfaXNSZWYpIHtcclxuICAgICAgICBpZiAoaXNGb3IpIHtcclxuICAgICAgICAgICAgdmFyIGV4aXN0aW5nID0gX2lzU3RyaW5nID8gcmVmc1tyZWZdIDogcmVmLnZhbHVlO1xyXG4gICAgICAgICAgICBpZiAoaXNSZW1vdmFsKSB7XHJcbiAgICAgICAgICAgICAgICBpc0FycmF5KGV4aXN0aW5nKSAmJiByZW1vdmUkMihleGlzdGluZywgcmVmVmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KGV4aXN0aW5nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfaXNTdHJpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmc1tyZWZdID0gW3JlZlZhbHVlXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0U2V0dXBSZWYodm0sIHJlZiwgcmVmc1tyZWZdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZi52YWx1ZSA9IFtyZWZWYWx1ZV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIWV4aXN0aW5nLmluY2x1ZGVzKHJlZlZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLnB1c2gocmVmVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKF9pc1N0cmluZykge1xyXG4gICAgICAgICAgICBpZiAoaXNSZW1vdmFsICYmIHJlZnNbcmVmXSAhPT0gcmVmVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZWZzW3JlZl0gPSAkcmVmc1ZhbHVlO1xyXG4gICAgICAgICAgICBzZXRTZXR1cFJlZih2bSwgcmVmLCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKF9pc1JlZikge1xyXG4gICAgICAgICAgICBpZiAoaXNSZW1vdmFsICYmIHJlZi52YWx1ZSAhPT0gcmVmVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZWYudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgICAgICB3YXJuKFwiSW52YWxpZCB0ZW1wbGF0ZSByZWYgdHlwZTogXCIuY29uY2F0KHR5cGVvZiByZWYpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gc2V0U2V0dXBSZWYoX2EsIGtleSwgdmFsKSB7XHJcbiAgICB2YXIgX3NldHVwU3RhdGUgPSBfYS5fc2V0dXBTdGF0ZTtcclxuICAgIGlmIChfc2V0dXBTdGF0ZSAmJiBoYXNPd24oX3NldHVwU3RhdGUsIGtleSkpIHtcclxuICAgICAgICBpZiAoaXNSZWYoX3NldHVwU3RhdGVba2V5XSkpIHtcclxuICAgICAgICAgICAgX3NldHVwU3RhdGVba2V5XS52YWx1ZSA9IHZhbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIF9zZXR1cFN0YXRlW2tleV0gPSB2YWw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBWaXJ0dWFsIERPTSBwYXRjaGluZyBhbGdvcml0aG0gYmFzZWQgb24gU25hYmJkb20gYnlcclxuICogU2ltb24gRnJpaXMgVmluZHVtIChAcGFsZGVwaW5kKVxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcclxuICogaHR0cHM6Ly9naXRodWIuY29tL3BhbGRlcGluZC9zbmFiYmRvbS9ibG9iL21hc3Rlci9MSUNFTlNFXHJcbiAqXHJcbiAqIG1vZGlmaWVkIGJ5IEV2YW4gWW91IChAeXl4OTkwODAzKVxyXG4gKlxyXG4gKiBOb3QgdHlwZS1jaGVja2luZyB0aGlzIGJlY2F1c2UgdGhpcyBmaWxlIGlzIHBlcmYtY3JpdGljYWwgYW5kIHRoZSBjb3N0XHJcbiAqIG9mIG1ha2luZyBmbG93IHVuZGVyc3RhbmQgaXQgaXMgbm90IHdvcnRoIGl0LlxyXG4gKi9cclxudmFyIGVtcHR5Tm9kZSA9IG5ldyBWTm9kZSgnJywge30sIFtdKTtcclxudmFyIGhvb2tzID0gWydjcmVhdGUnLCAnYWN0aXZhdGUnLCAndXBkYXRlJywgJ3JlbW92ZScsICdkZXN0cm95J107XHJcbmZ1bmN0aW9uIHNhbWVWbm9kZShhLCBiKSB7XHJcbiAgICByZXR1cm4gKGEua2V5ID09PSBiLmtleSAmJlxyXG4gICAgICAgIGEuYXN5bmNGYWN0b3J5ID09PSBiLmFzeW5jRmFjdG9yeSAmJlxyXG4gICAgICAgICgoYS50YWcgPT09IGIudGFnICYmXHJcbiAgICAgICAgICAgIGEuaXNDb21tZW50ID09PSBiLmlzQ29tbWVudCAmJlxyXG4gICAgICAgICAgICBpc0RlZihhLmRhdGEpID09PSBpc0RlZihiLmRhdGEpICYmXHJcbiAgICAgICAgICAgIHNhbWVJbnB1dFR5cGUoYSwgYikpIHx8XHJcbiAgICAgICAgICAgIChpc1RydWUoYS5pc0FzeW5jUGxhY2Vob2xkZXIpICYmIGlzVW5kZWYoYi5hc3luY0ZhY3RvcnkuZXJyb3IpKSkpO1xyXG59XHJcbmZ1bmN0aW9uIHNhbWVJbnB1dFR5cGUoYSwgYikge1xyXG4gICAgaWYgKGEudGFnICE9PSAnaW5wdXQnKVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgdmFyIGk7XHJcbiAgICB2YXIgdHlwZUEgPSBpc0RlZigoaSA9IGEuZGF0YSkpICYmIGlzRGVmKChpID0gaS5hdHRycykpICYmIGkudHlwZTtcclxuICAgIHZhciB0eXBlQiA9IGlzRGVmKChpID0gYi5kYXRhKSkgJiYgaXNEZWYoKGkgPSBpLmF0dHJzKSkgJiYgaS50eXBlO1xyXG4gICAgcmV0dXJuIHR5cGVBID09PSB0eXBlQiB8fCAoaXNUZXh0SW5wdXRUeXBlKHR5cGVBKSAmJiBpc1RleHRJbnB1dFR5cGUodHlwZUIpKTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVLZXlUb09sZElkeChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xyXG4gICAgdmFyIGksIGtleTtcclxuICAgIHZhciBtYXAgPSB7fTtcclxuICAgIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XHJcbiAgICAgICAga2V5ID0gY2hpbGRyZW5baV0ua2V5O1xyXG4gICAgICAgIGlmIChpc0RlZihrZXkpKVxyXG4gICAgICAgICAgICBtYXBba2V5XSA9IGk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWFwO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVBhdGNoRnVuY3Rpb24oYmFja2VuZCkge1xyXG4gICAgdmFyIGksIGo7XHJcbiAgICB2YXIgY2JzID0ge307XHJcbiAgICB2YXIgbW9kdWxlcyA9IGJhY2tlbmQubW9kdWxlcywgbm9kZU9wcyA9IGJhY2tlbmQubm9kZU9wcztcclxuICAgIGZvciAoaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGNic1tob29rc1tpXV0gPSBbXTtcclxuICAgICAgICBmb3IgKGogPSAwOyBqIDwgbW9kdWxlcy5sZW5ndGg7ICsraikge1xyXG4gICAgICAgICAgICBpZiAoaXNEZWYobW9kdWxlc1tqXVtob29rc1tpXV0pKSB7XHJcbiAgICAgICAgICAgICAgICBjYnNbaG9va3NbaV1dLnB1c2gobW9kdWxlc1tqXVtob29rc1tpXV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZW1wdHlOb2RlQXQoZWxtKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZVJtQ2IoY2hpbGRFbG0sIGxpc3RlbmVycykge1xyXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZSgpIHtcclxuICAgICAgICAgICAgaWYgKC0tcmVtb3ZlLmxpc3RlbmVycyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlTm9kZShjaGlsZEVsbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmVtb3ZlLmxpc3RlbmVycyA9IGxpc3RlbmVycztcclxuICAgICAgICByZXR1cm4gcmVtb3ZlO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlTm9kZShlbCkge1xyXG4gICAgICAgIHZhciBwYXJlbnQgPSBub2RlT3BzLnBhcmVudE5vZGUoZWwpO1xyXG4gICAgICAgIC8vIGVsZW1lbnQgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIHJlbW92ZWQgZHVlIHRvIHYtaHRtbCAvIHYtdGV4dFxyXG4gICAgICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XHJcbiAgICAgICAgICAgIG5vZGVPcHMucmVtb3ZlQ2hpbGQocGFyZW50LCBlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCh2bm9kZSwgaW5WUHJlKSB7XHJcbiAgICAgICAgcmV0dXJuICghaW5WUHJlICYmXHJcbiAgICAgICAgICAgICF2bm9kZS5ucyAmJlxyXG4gICAgICAgICAgICAhKGNvbmZpZy5pZ25vcmVkRWxlbWVudHMubGVuZ3RoICYmXHJcbiAgICAgICAgICAgICAgICBjb25maWcuaWdub3JlZEVsZW1lbnRzLnNvbWUoZnVuY3Rpb24gKGlnbm9yZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpc1JlZ0V4cChpZ25vcmUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gaWdub3JlLnRlc3Qodm5vZGUudGFnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGlnbm9yZSA9PT0gdm5vZGUudGFnO1xyXG4gICAgICAgICAgICAgICAgfSkpICYmXHJcbiAgICAgICAgICAgIGNvbmZpZy5pc1Vua25vd25FbGVtZW50KHZub2RlLnRhZykpO1xyXG4gICAgfVxyXG4gICAgdmFyIGNyZWF0aW5nRWxtSW5WUHJlID0gMDtcclxuICAgIGZ1bmN0aW9uIGNyZWF0ZUVsbSh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSwgbmVzdGVkLCBvd25lckFycmF5LCBpbmRleCkge1xyXG4gICAgICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XHJcbiAgICAgICAgICAgIC8vIFRoaXMgdm5vZGUgd2FzIHVzZWQgaW4gYSBwcmV2aW91cyByZW5kZXIhXHJcbiAgICAgICAgICAgIC8vIG5vdyBpdCdzIHVzZWQgYXMgYSBuZXcgbm9kZSwgb3ZlcndyaXRpbmcgaXRzIGVsbSB3b3VsZCBjYXVzZVxyXG4gICAgICAgICAgICAvLyBwb3RlbnRpYWwgcGF0Y2ggZXJyb3JzIGRvd24gdGhlIHJvYWQgd2hlbiBpdCdzIHVzZWQgYXMgYW4gaW5zZXJ0aW9uXHJcbiAgICAgICAgICAgIC8vIHJlZmVyZW5jZSBub2RlLiBJbnN0ZWFkLCB3ZSBjbG9uZSB0aGUgbm9kZSBvbi1kZW1hbmQgYmVmb3JlIGNyZWF0aW5nXHJcbiAgICAgICAgICAgIC8vIGFzc29jaWF0ZWQgRE9NIGVsZW1lbnQgZm9yIGl0LlxyXG4gICAgICAgICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZub2RlLmlzUm9vdEluc2VydCA9ICFuZXN0ZWQ7IC8vIGZvciB0cmFuc2l0aW9uIGVudGVyIGNoZWNrXHJcbiAgICAgICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XHJcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XHJcbiAgICAgICAgdmFyIHRhZyA9IHZub2RlLnRhZztcclxuICAgICAgICBpZiAoaXNEZWYodGFnKSkge1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5wcmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjcmVhdGluZ0VsbUluVlByZSsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGlzVW5rbm93bkVsZW1lbnQodm5vZGUsIGNyZWF0aW5nRWxtSW5WUHJlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oJ1Vua25vd24gY3VzdG9tIGVsZW1lbnQ6IDwnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJz4gLSBkaWQgeW91ICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdtYWtlIHN1cmUgdG8gcHJvdmlkZSB0aGUgXCJuYW1lXCIgb3B0aW9uLicsIHZub2RlLmNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZub2RlLmVsbSA9IHZub2RlLm5zXHJcbiAgICAgICAgICAgICAgICA/IG5vZGVPcHMuY3JlYXRlRWxlbWVudE5TKHZub2RlLm5zLCB0YWcpXHJcbiAgICAgICAgICAgICAgICA6IG5vZGVPcHMuY3JlYXRlRWxlbWVudCh0YWcsIHZub2RlKTtcclxuICAgICAgICAgICAgc2V0U2NvcGUodm5vZGUpO1xyXG4gICAgICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XHJcbiAgICAgICAgICAgIGlmIChpc0RlZihkYXRhKSkge1xyXG4gICAgICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7XHJcbiAgICAgICAgICAgICAgICBjcmVhdGluZ0VsbUluVlByZS0tO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpKSB7XHJcbiAgICAgICAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlQ29tbWVudCh2bm9kZS50ZXh0KTtcclxuICAgICAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZSh2bm9kZS50ZXh0KTtcclxuICAgICAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xyXG4gICAgICAgIHZhciBpID0gdm5vZGUuZGF0YTtcclxuICAgICAgICBpZiAoaXNEZWYoaSkpIHtcclxuICAgICAgICAgICAgdmFyIGlzUmVhY3RpdmF0ZWQgPSBpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaS5rZWVwQWxpdmU7XHJcbiAgICAgICAgICAgIGlmIChpc0RlZigoaSA9IGkuaG9vaykpICYmIGlzRGVmKChpID0gaS5pbml0KSkpIHtcclxuICAgICAgICAgICAgICAgIGkodm5vZGUsIGZhbHNlIC8qIGh5ZHJhdGluZyAqLyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gYWZ0ZXIgY2FsbGluZyB0aGUgaW5pdCBob29rLCBpZiB0aGUgdm5vZGUgaXMgYSBjaGlsZCBjb21wb25lbnRcclxuICAgICAgICAgICAgLy8gaXQgc2hvdWxkJ3ZlIGNyZWF0ZWQgYSBjaGlsZCBpbnN0YW5jZSBhbmQgbW91bnRlZCBpdC4gdGhlIGNoaWxkXHJcbiAgICAgICAgICAgIC8vIGNvbXBvbmVudCBhbHNvIGhhcyBzZXQgdGhlIHBsYWNlaG9sZGVyIHZub2RlJ3MgZWxtLlxyXG4gICAgICAgICAgICAvLyBpbiB0aGF0IGNhc2Ugd2UgY2FuIGp1c3QgcmV0dXJuIHRoZSBlbGVtZW50IGFuZCBiZSBkb25lLlxyXG4gICAgICAgICAgICBpZiAoaXNEZWYodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XHJcbiAgICAgICAgICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xyXG4gICAgICAgICAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzVHJ1ZShpc1JlYWN0aXZhdGVkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlYWN0aXZhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcclxuICAgICAgICBpZiAoaXNEZWYodm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KSkge1xyXG4gICAgICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaC5hcHBseShpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCk7XHJcbiAgICAgICAgICAgIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZub2RlLmVsbSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLiRlbDtcclxuICAgICAgICBpZiAoaXNQYXRjaGFibGUodm5vZGUpKSB7XHJcbiAgICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xyXG4gICAgICAgICAgICBzZXRTY29wZSh2bm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBlbXB0eSBjb21wb25lbnQgcm9vdC5cclxuICAgICAgICAgICAgLy8gc2tpcCBhbGwgZWxlbWVudC1yZWxhdGVkIG1vZHVsZXMgZXhjZXB0IGZvciByZWYgKCMzNDU1KVxyXG4gICAgICAgICAgICByZWdpc3RlclJlZih2bm9kZSk7XHJcbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB0byBpbnZva2UgdGhlIGluc2VydCBob29rXHJcbiAgICAgICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZWFjdGl2YXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7XHJcbiAgICAgICAgdmFyIGk7XHJcbiAgICAgICAgLy8gaGFjayBmb3IgIzQzMzk6IGEgcmVhY3RpdmF0ZWQgY29tcG9uZW50IHdpdGggaW5uZXIgdHJhbnNpdGlvblxyXG4gICAgICAgIC8vIGRvZXMgbm90IHRyaWdnZXIgYmVjYXVzZSB0aGUgaW5uZXIgbm9kZSdzIGNyZWF0ZWQgaG9va3MgYXJlIG5vdCBjYWxsZWRcclxuICAgICAgICAvLyBhZ2Fpbi4gSXQncyBub3QgaWRlYWwgdG8gaW52b2x2ZSBtb2R1bGUtc3BlY2lmaWMgbG9naWMgaW4gaGVyZSBidXRcclxuICAgICAgICAvLyB0aGVyZSBkb2Vzbid0IHNlZW0gdG8gYmUgYSBiZXR0ZXIgd2F5IHRvIGRvIGl0LlxyXG4gICAgICAgIHZhciBpbm5lck5vZGUgPSB2bm9kZTtcclxuICAgICAgICB3aGlsZSAoaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIGlubmVyTm9kZSA9IGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XHJcbiAgICAgICAgICAgIGlmIChpc0RlZigoaSA9IGlubmVyTm9kZS5kYXRhKSkgJiYgaXNEZWYoKGkgPSBpLnRyYW5zaXRpb24pKSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5hY3RpdmF0ZS5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNicy5hY3RpdmF0ZVtpXShlbXB0eU5vZGUsIGlubmVyTm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaChpbm5lck5vZGUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdW5saWtlIGEgbmV3bHkgY3JlYXRlZCBjb21wb25lbnQsXHJcbiAgICAgICAgLy8gYSByZWFjdGl2YXRlZCBrZWVwLWFsaXZlIGNvbXBvbmVudCBkb2Vzbid0IGluc2VydCBpdHNlbGZcclxuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBpbnNlcnQocGFyZW50LCBlbG0sIHJlZikge1xyXG4gICAgICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XHJcbiAgICAgICAgICAgIGlmIChpc0RlZihyZWYpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZU9wcy5wYXJlbnROb2RlKHJlZikgPT09IHBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudCwgZWxtLCByZWYpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZChwYXJlbnQsIGVsbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSkge1xyXG4gICAgICAgIGlmIChpc0FycmF5KGNoaWxkcmVuKSkge1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKGNoaWxkcmVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKHZhciBpXzEgPSAwOyBpXzEgPCBjaGlsZHJlbi5sZW5ndGg7ICsraV8xKSB7XHJcbiAgICAgICAgICAgICAgICBjcmVhdGVFbG0oY2hpbGRyZW5baV8xXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5lbG0sIG51bGwsIHRydWUsIGNoaWxkcmVuLCBpXzEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGlzUHJpbWl0aXZlKHZub2RlLnRleHQpKSB7XHJcbiAgICAgICAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQodm5vZGUuZWxtLCBub2RlT3BzLmNyZWF0ZVRleHROb2RlKFN0cmluZyh2bm9kZS50ZXh0KSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGlzUGF0Y2hhYmxlKHZub2RlKSB7XHJcbiAgICAgICAgd2hpbGUgKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaXNEZWYodm5vZGUudGFnKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcclxuICAgICAgICBmb3IgKHZhciBpXzIgPSAwOyBpXzIgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpXzIpIHtcclxuICAgICAgICAgICAgY2JzLmNyZWF0ZVtpXzJdKGVtcHR5Tm9kZSwgdm5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpID0gdm5vZGUuZGF0YS5ob29rOyAvLyBSZXVzZSB2YXJpYWJsZVxyXG4gICAgICAgIGlmIChpc0RlZihpKSkge1xyXG4gICAgICAgICAgICBpZiAoaXNEZWYoaS5jcmVhdGUpKVxyXG4gICAgICAgICAgICAgICAgaS5jcmVhdGUoZW1wdHlOb2RlLCB2bm9kZSk7XHJcbiAgICAgICAgICAgIGlmIChpc0RlZihpLmluc2VydCkpXHJcbiAgICAgICAgICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gc2V0IHNjb3BlIGlkIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIENTUy5cclxuICAgIC8vIHRoaXMgaXMgaW1wbGVtZW50ZWQgYXMgYSBzcGVjaWFsIGNhc2UgdG8gYXZvaWQgdGhlIG92ZXJoZWFkXHJcbiAgICAvLyBvZiBnb2luZyB0aHJvdWdoIHRoZSBub3JtYWwgYXR0cmlidXRlIHBhdGNoaW5nIHByb2Nlc3MuXHJcbiAgICBmdW5jdGlvbiBzZXRTY29wZSh2bm9kZSkge1xyXG4gICAgICAgIHZhciBpO1xyXG4gICAgICAgIGlmIChpc0RlZigoaSA9IHZub2RlLmZuU2NvcGVJZCkpKSB7XHJcbiAgICAgICAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGFuY2VzdG9yID0gdm5vZGU7XHJcbiAgICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzRGVmKChpID0gYW5jZXN0b3IuY29udGV4dCkpICYmIGlzRGVmKChpID0gaS4kb3B0aW9ucy5fc2NvcGVJZCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBmb3Igc2xvdCBjb250ZW50IHRoZXkgc2hvdWxkIGFsc28gZ2V0IHRoZSBzY29wZUlkIGZyb20gdGhlIGhvc3QgaW5zdGFuY2UuXHJcbiAgICAgICAgaWYgKGlzRGVmKChpID0gYWN0aXZlSW5zdGFuY2UpKSAmJlxyXG4gICAgICAgICAgICBpICE9PSB2bm9kZS5jb250ZXh0ICYmXHJcbiAgICAgICAgICAgIGkgIT09IHZub2RlLmZuQ29udGV4dCAmJlxyXG4gICAgICAgICAgICBpc0RlZigoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpKSkge1xyXG4gICAgICAgICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBhZGRWbm9kZXMocGFyZW50RWxtLCByZWZFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XHJcbiAgICAgICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xyXG4gICAgICAgICAgICBjcmVhdGVFbG0odm5vZGVzW3N0YXJ0SWR4XSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSwgZmFsc2UsIHZub2Rlcywgc3RhcnRJZHgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGludm9rZURlc3Ryb3lIb29rKHZub2RlKSB7XHJcbiAgICAgICAgdmFyIGksIGo7XHJcbiAgICAgICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xyXG4gICAgICAgIGlmIChpc0RlZihkYXRhKSkge1xyXG4gICAgICAgICAgICBpZiAoaXNEZWYoKGkgPSBkYXRhLmhvb2spKSAmJiBpc0RlZigoaSA9IGkuZGVzdHJveSkpKVxyXG4gICAgICAgICAgICAgICAgaSh2bm9kZSk7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSlcclxuICAgICAgICAgICAgICAgIGNicy5kZXN0cm95W2ldKHZub2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzRGVmKChpID0gdm5vZGUuY2hpbGRyZW4pKSkge1xyXG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHtcclxuICAgICAgICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKHZub2RlLmNoaWxkcmVuW2pdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZVZub2Rlcyh2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgpIHtcclxuICAgICAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XHJcbiAgICAgICAgICAgIHZhciBjaCA9IHZub2Rlc1tzdGFydElkeF07XHJcbiAgICAgICAgICAgIGlmIChpc0RlZihjaCkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc0RlZihjaC50YWcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhjaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlRGVzdHJveUhvb2soY2gpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGV4dCBub2RlXHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlTm9kZShjaC5lbG0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayh2bm9kZSwgcm0pIHtcclxuICAgICAgICBpZiAoaXNEZWYocm0pIHx8IGlzRGVmKHZub2RlLmRhdGEpKSB7XHJcbiAgICAgICAgICAgIHZhciBpXzM7XHJcbiAgICAgICAgICAgIHZhciBsaXN0ZW5lcnMgPSBjYnMucmVtb3ZlLmxlbmd0aCArIDE7XHJcbiAgICAgICAgICAgIGlmIChpc0RlZihybSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIHdlIGhhdmUgYSByZWN1cnNpdmVseSBwYXNzZWQgZG93biBybSBjYWxsYmFja1xyXG4gICAgICAgICAgICAgICAgLy8gaW5jcmVhc2UgdGhlIGxpc3RlbmVycyBjb3VudFxyXG4gICAgICAgICAgICAgICAgcm0ubGlzdGVuZXJzICs9IGxpc3RlbmVycztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGRpcmVjdGx5IHJlbW92aW5nXHJcbiAgICAgICAgICAgICAgICBybSA9IGNyZWF0ZVJtQ2Iodm5vZGUuZWxtLCBsaXN0ZW5lcnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHJlY3Vyc2l2ZWx5IGludm9rZSBob29rcyBvbiBjaGlsZCBjb21wb25lbnQgcm9vdCBub2RlXHJcbiAgICAgICAgICAgIGlmIChpc0RlZigoaV8zID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSAmJlxyXG4gICAgICAgICAgICAgICAgaXNEZWYoKGlfMyA9IGlfMy5fdm5vZGUpKSAmJlxyXG4gICAgICAgICAgICAgICAgaXNEZWYoaV8zLmRhdGEpKSB7XHJcbiAgICAgICAgICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGlfMywgcm0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAoaV8zID0gMDsgaV8zIDwgY2JzLnJlbW92ZS5sZW5ndGg7ICsraV8zKSB7XHJcbiAgICAgICAgICAgICAgICBjYnMucmVtb3ZlW2lfM10odm5vZGUsIHJtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaXNEZWYoKGlfMyA9IHZub2RlLmRhdGEuaG9vaykpICYmIGlzRGVmKChpXzMgPSBpXzMucmVtb3ZlKSkpIHtcclxuICAgICAgICAgICAgICAgIGlfMyh2bm9kZSwgcm0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcm0oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmVtb3ZlTm9kZSh2bm9kZS5lbG0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZUNoaWxkcmVuKHBhcmVudEVsbSwgb2xkQ2gsIG5ld0NoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpIHtcclxuICAgICAgICB2YXIgb2xkU3RhcnRJZHggPSAwO1xyXG4gICAgICAgIHZhciBuZXdTdGFydElkeCA9IDA7XHJcbiAgICAgICAgdmFyIG9sZEVuZElkeCA9IG9sZENoLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgdmFyIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFswXTtcclxuICAgICAgICB2YXIgb2xkRW5kVm5vZGUgPSBvbGRDaFtvbGRFbmRJZHhdO1xyXG4gICAgICAgIHZhciBuZXdFbmRJZHggPSBuZXdDaC5sZW5ndGggLSAxO1xyXG4gICAgICAgIHZhciBuZXdTdGFydFZub2RlID0gbmV3Q2hbMF07XHJcbiAgICAgICAgdmFyIG5ld0VuZFZub2RlID0gbmV3Q2hbbmV3RW5kSWR4XTtcclxuICAgICAgICB2YXIgb2xkS2V5VG9JZHgsIGlkeEluT2xkLCB2bm9kZVRvTW92ZSwgcmVmRWxtO1xyXG4gICAgICAgIC8vIHJlbW92ZU9ubHkgaXMgYSBzcGVjaWFsIGZsYWcgdXNlZCBvbmx5IGJ5IDx0cmFuc2l0aW9uLWdyb3VwPlxyXG4gICAgICAgIC8vIHRvIGVuc3VyZSByZW1vdmVkIGVsZW1lbnRzIHN0YXkgaW4gY29ycmVjdCByZWxhdGl2ZSBwb3NpdGlvbnNcclxuICAgICAgICAvLyBkdXJpbmcgbGVhdmluZyB0cmFuc2l0aW9uc1xyXG4gICAgICAgIHZhciBjYW5Nb3ZlID0gIXJlbW92ZU9ubHk7XHJcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKG5ld0NoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgd2hpbGUgKG9sZFN0YXJ0SWR4IDw9IG9sZEVuZElkeCAmJiBuZXdTdGFydElkeCA8PSBuZXdFbmRJZHgpIHtcclxuICAgICAgICAgICAgaWYgKGlzVW5kZWYob2xkU3RhcnRWbm9kZSkpIHtcclxuICAgICAgICAgICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTsgLy8gVm5vZGUgaGFzIGJlZW4gbW92ZWQgbGVmdFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzVW5kZWYob2xkRW5kVm5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcclxuICAgICAgICAgICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xyXG4gICAgICAgICAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xyXG4gICAgICAgICAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTtcclxuICAgICAgICAgICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xyXG4gICAgICAgICAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gVm5vZGUgbW92ZWQgcmlnaHRcclxuICAgICAgICAgICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XHJcbiAgICAgICAgICAgICAgICBjYW5Nb3ZlICYmXHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbmRWbm9kZS5lbG0pKTtcclxuICAgICAgICAgICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcclxuICAgICAgICAgICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIFZub2RlIG1vdmVkIGxlZnRcclxuICAgICAgICAgICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcclxuICAgICAgICAgICAgICAgIGNhbk1vdmUgJiZcclxuICAgICAgICAgICAgICAgICAgICBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xyXG4gICAgICAgICAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XHJcbiAgICAgICAgICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNVbmRlZihvbGRLZXlUb0lkeCkpXHJcbiAgICAgICAgICAgICAgICAgICAgb2xkS2V5VG9JZHggPSBjcmVhdGVLZXlUb09sZElkeChvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XHJcbiAgICAgICAgICAgICAgICBpZHhJbk9sZCA9IGlzRGVmKG5ld1N0YXJ0Vm5vZGUua2V5KVxyXG4gICAgICAgICAgICAgICAgICAgID8gb2xkS2V5VG9JZHhbbmV3U3RhcnRWbm9kZS5rZXldXHJcbiAgICAgICAgICAgICAgICAgICAgOiBmaW5kSWR4SW5PbGQobmV3U3RhcnRWbm9kZSwgb2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzVW5kZWYoaWR4SW5PbGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTmV3IGVsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBmYWxzZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZub2RlVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzYW1lVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGNoVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2xkQ2hbaWR4SW5PbGRdID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5Nb3ZlICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIHZub2RlVG9Nb3ZlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2FtZSBrZXkgYnV0IGRpZmZlcmVudCBlbGVtZW50LiB0cmVhdCBhcyBuZXcgZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbG0obmV3U3RhcnRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBmYWxzZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9sZFN0YXJ0SWR4ID4gb2xkRW5kSWR4KSB7XHJcbiAgICAgICAgICAgIHJlZkVsbSA9IGlzVW5kZWYobmV3Q2hbbmV3RW5kSWR4ICsgMV0pID8gbnVsbCA6IG5ld0NoW25ld0VuZElkeCArIDFdLmVsbTtcclxuICAgICAgICAgICAgYWRkVm5vZGVzKHBhcmVudEVsbSwgcmVmRWxtLCBuZXdDaCwgbmV3U3RhcnRJZHgsIG5ld0VuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobmV3U3RhcnRJZHggPiBuZXdFbmRJZHgpIHtcclxuICAgICAgICAgICAgcmVtb3ZlVm5vZGVzKG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBjaGVja0R1cGxpY2F0ZUtleXMoY2hpbGRyZW4pIHtcclxuICAgICAgICB2YXIgc2VlbktleXMgPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBpXzQgPSAwOyBpXzQgPCBjaGlsZHJlbi5sZW5ndGg7IGlfNCsrKSB7XHJcbiAgICAgICAgICAgIHZhciB2bm9kZSA9IGNoaWxkcmVuW2lfNF07XHJcbiAgICAgICAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXk7XHJcbiAgICAgICAgICAgIGlmIChpc0RlZihrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VlbktleXNba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oXCJEdXBsaWNhdGUga2V5cyBkZXRlY3RlZDogJ1wiLmNvbmNhdChrZXksIFwiJy4gVGhpcyBtYXkgY2F1c2UgYW4gdXBkYXRlIGVycm9yLlwiKSwgdm5vZGUuY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWVuS2V5c1trZXldID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGZpbmRJZHhJbk9sZChub2RlLCBvbGRDaCwgc3RhcnQsIGVuZCkge1xyXG4gICAgICAgIGZvciAodmFyIGlfNSA9IHN0YXJ0OyBpXzUgPCBlbmQ7IGlfNSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBjID0gb2xkQ2hbaV81XTtcclxuICAgICAgICAgICAgaWYgKGlzRGVmKGMpICYmIHNhbWVWbm9kZShub2RlLCBjKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBpXzU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcGF0Y2hWbm9kZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgb3duZXJBcnJheSwgaW5kZXgsIHJlbW92ZU9ubHkpIHtcclxuICAgICAgICBpZiAob2xkVm5vZGUgPT09IHZub2RlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzRGVmKHZub2RlLmVsbSkgJiYgaXNEZWYob3duZXJBcnJheSkpIHtcclxuICAgICAgICAgICAgLy8gY2xvbmUgcmV1c2VkIHZub2RlXHJcbiAgICAgICAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGVsbSA9ICh2bm9kZS5lbG0gPSBvbGRWbm9kZS5lbG0pO1xyXG4gICAgICAgIGlmIChpc1RydWUob2xkVm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyKSkge1xyXG4gICAgICAgICAgICBpZiAoaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5LnJlc29sdmVkKSkge1xyXG4gICAgICAgICAgICAgICAgaHlkcmF0ZShvbGRWbm9kZS5lbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHJldXNlIGVsZW1lbnQgZm9yIHN0YXRpYyB0cmVlcy5cclxuICAgICAgICAvLyBub3RlIHdlIG9ubHkgZG8gdGhpcyBpZiB0aGUgdm5vZGUgaXMgY2xvbmVkIC1cclxuICAgICAgICAvLyBpZiB0aGUgbmV3IG5vZGUgaXMgbm90IGNsb25lZCBpdCBtZWFucyB0aGUgcmVuZGVyIGZ1bmN0aW9ucyBoYXZlIGJlZW5cclxuICAgICAgICAvLyByZXNldCBieSB0aGUgaG90LXJlbG9hZC1hcGkgYW5kIHdlIG5lZWQgdG8gZG8gYSBwcm9wZXIgcmUtcmVuZGVyLlxyXG4gICAgICAgIGlmIChpc1RydWUodm5vZGUuaXNTdGF0aWMpICYmXHJcbiAgICAgICAgICAgIGlzVHJ1ZShvbGRWbm9kZS5pc1N0YXRpYykgJiZcclxuICAgICAgICAgICAgdm5vZGUua2V5ID09PSBvbGRWbm9kZS5rZXkgJiZcclxuICAgICAgICAgICAgKGlzVHJ1ZSh2bm9kZS5pc0Nsb25lZCkgfHwgaXNUcnVlKHZub2RlLmlzT25jZSkpKSB7XHJcbiAgICAgICAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGk7XHJcbiAgICAgICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xyXG4gICAgICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZigoaSA9IGRhdGEuaG9vaykpICYmIGlzRGVmKChpID0gaS5wcmVwYXRjaCkpKSB7XHJcbiAgICAgICAgICAgIGkob2xkVm5vZGUsIHZub2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG9sZENoID0gb2xkVm5vZGUuY2hpbGRyZW47XHJcbiAgICAgICAgdmFyIGNoID0gdm5vZGUuY2hpbGRyZW47XHJcbiAgICAgICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzUGF0Y2hhYmxlKHZub2RlKSkge1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnVwZGF0ZS5sZW5ndGg7ICsraSlcclxuICAgICAgICAgICAgICAgIGNicy51cGRhdGVbaV0ob2xkVm5vZGUsIHZub2RlKTtcclxuICAgICAgICAgICAgaWYgKGlzRGVmKChpID0gZGF0YS5ob29rKSkgJiYgaXNEZWYoKGkgPSBpLnVwZGF0ZSkpKVxyXG4gICAgICAgICAgICAgICAgaShvbGRWbm9kZSwgdm5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNVbmRlZih2bm9kZS50ZXh0KSkge1xyXG4gICAgICAgICAgICBpZiAoaXNEZWYob2xkQ2gpICYmIGlzRGVmKGNoKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9sZENoICE9PSBjaClcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVDaGlsZHJlbihlbG0sIG9sZENoLCBjaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc0RlZihjaCkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKGNoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSlcclxuICAgICAgICAgICAgICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xyXG4gICAgICAgICAgICAgICAgYWRkVm5vZGVzKGVsbSwgbnVsbCwgY2gsIDAsIGNoLmxlbmd0aCAtIDEsIGluc2VydGVkVm5vZGVRdWV1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNEZWYob2xkQ2gpKSB7XHJcbiAgICAgICAgICAgICAgICByZW1vdmVWbm9kZXMob2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG9sZFZub2RlLnRleHQgIT09IHZub2RlLnRleHQpIHtcclxuICAgICAgICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNEZWYoZGF0YSkpIHtcclxuICAgICAgICAgICAgaWYgKGlzRGVmKChpID0gZGF0YS5ob29rKSkgJiYgaXNEZWYoKGkgPSBpLnBvc3RwYXRjaCkpKVxyXG4gICAgICAgICAgICAgICAgaShvbGRWbm9kZSwgdm5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sodm5vZGUsIHF1ZXVlLCBpbml0aWFsKSB7XHJcbiAgICAgICAgLy8gZGVsYXkgaW5zZXJ0IGhvb2tzIGZvciBjb21wb25lbnQgcm9vdCBub2RlcywgaW52b2tlIHRoZW0gYWZ0ZXIgdGhlXHJcbiAgICAgICAgLy8gZWxlbWVudCBpcyByZWFsbHkgaW5zZXJ0ZWRcclxuICAgICAgICBpZiAoaXNUcnVlKGluaXRpYWwpICYmIGlzRGVmKHZub2RlLnBhcmVudCkpIHtcclxuICAgICAgICAgICAgdm5vZGUucGFyZW50LmRhdGEucGVuZGluZ0luc2VydCA9IHF1ZXVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaV82ID0gMDsgaV82IDwgcXVldWUubGVuZ3RoOyArK2lfNikge1xyXG4gICAgICAgICAgICAgICAgcXVldWVbaV82XS5kYXRhLmhvb2suaW5zZXJ0KHF1ZXVlW2lfNl0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdmFyIGh5ZHJhdGlvbkJhaWxlZCA9IGZhbHNlO1xyXG4gICAgLy8gbGlzdCBvZiBtb2R1bGVzIHRoYXQgY2FuIHNraXAgY3JlYXRlIGhvb2sgZHVyaW5nIGh5ZHJhdGlvbiBiZWNhdXNlIHRoZXlcclxuICAgIC8vIGFyZSBhbHJlYWR5IHJlbmRlcmVkIG9uIHRoZSBjbGllbnQgb3IgaGFzIG5vIG5lZWQgZm9yIGluaXRpYWxpemF0aW9uXHJcbiAgICAvLyBOb3RlOiBzdHlsZSBpcyBleGNsdWRlZCBiZWNhdXNlIGl0IHJlbGllcyBvbiBpbml0aWFsIGNsb25lIGZvciBmdXR1cmVcclxuICAgIC8vIGRlZXAgdXBkYXRlcyAoIzcwNjMpLlxyXG4gICAgdmFyIGlzUmVuZGVyZWRNb2R1bGUgPSBtYWtlTWFwKCdhdHRycyxjbGFzcyxzdGF0aWNDbGFzcyxzdGF0aWNTdHlsZSxrZXknKTtcclxuICAgIC8vIE5vdGU6IHRoaXMgaXMgYSBicm93c2VyLW9ubHkgZnVuY3Rpb24gc28gd2UgY2FuIGFzc3VtZSBlbG1zIGFyZSBET00gbm9kZXMuXHJcbiAgICBmdW5jdGlvbiBoeWRyYXRlKGVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgaW5WUHJlKSB7XHJcbiAgICAgICAgdmFyIGk7XHJcbiAgICAgICAgdmFyIHRhZyA9IHZub2RlLnRhZywgZGF0YSA9IHZub2RlLmRhdGEsIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW47XHJcbiAgICAgICAgaW5WUHJlID0gaW5WUHJlIHx8IChkYXRhICYmIGRhdGEucHJlKTtcclxuICAgICAgICB2bm9kZS5lbG0gPSBlbG07XHJcbiAgICAgICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpICYmIGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeSkpIHtcclxuICAgICAgICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFzc2VydCBub2RlIG1hdGNoXHJcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgICAgICAgaWYgKCFhc3NlcnROb2RlTWF0Y2goZWxtLCB2bm9kZSwgaW5WUHJlKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc0RlZihkYXRhKSkge1xyXG4gICAgICAgICAgICBpZiAoaXNEZWYoKGkgPSBkYXRhLmhvb2spKSAmJiBpc0RlZigoaSA9IGkuaW5pdCkpKVxyXG4gICAgICAgICAgICAgICAgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pO1xyXG4gICAgICAgICAgICBpZiAoaXNEZWYoKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjaGlsZCBjb21wb25lbnQuIGl0IHNob3VsZCBoYXZlIGh5ZHJhdGVkIGl0cyBvd24gdHJlZS5cclxuICAgICAgICAgICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNEZWYodGFnKSkge1xyXG4gICAgICAgICAgICBpZiAoaXNEZWYoY2hpbGRyZW4pKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBlbXB0eSBlbGVtZW50LCBhbGxvdyBjbGllbnQgdG8gcGljayB1cCBhbmQgcG9wdWxhdGUgY2hpbGRyZW5cclxuICAgICAgICAgICAgICAgIGlmICghZWxtLmhhc0NoaWxkTm9kZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHYtaHRtbCBhbmQgZG9tUHJvcHM6IGlubmVySFRNTFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0RlZigoaSA9IGRhdGEpKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0RlZigoaSA9IGkuZG9tUHJvcHMpKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0RlZigoaSA9IGkuaW5uZXJIVE1MKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT09IGVsbS5pbm5lckhUTUwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHlkcmF0aW9uQmFpbGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BhcmVudDogJywgZWxtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3NlcnZlciBpbm5lckhUTUw6ICcsIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignY2xpZW50IGlubmVySFRNTDogJywgZWxtLmlubmVySFRNTCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0ZXJhdGUgYW5kIGNvbXBhcmUgY2hpbGRyZW4gbGlzdHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuTWF0Y2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGlfNyA9IDA7IGlfNyA8IGNoaWxkcmVuLmxlbmd0aDsgaV83KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIWh5ZHJhdGUoY2hpbGROb2RlLCBjaGlsZHJlbltpXzddLCBpbnNlcnRlZFZub2RlUXVldWUsIGluVlByZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbk1hdGNoID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsb25nZXIgdGhhbiB0aGUgdmlydHVhbCBjaGlsZHJlbiBsaXN0LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNoaWxkcmVuTWF0Y2ggfHwgY2hpbGROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdNaXNtYXRjaGluZyBjaGlsZE5vZGVzIHZzLiBWTm9kZXM6ICcsIGVsbS5jaGlsZE5vZGVzLCBjaGlsZHJlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZnVsbEludm9rZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUmVuZGVyZWRNb2R1bGUoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdWxsSW52b2tlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghZnVsbEludm9rZSAmJiBkYXRhWydjbGFzcyddKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZW5zdXJlIGNvbGxlY3RpbmcgZGVwcyBmb3IgZGVlcCBjbGFzcyBiaW5kaW5ncyBmb3IgZnV0dXJlIHVwZGF0ZXNcclxuICAgICAgICAgICAgICAgICAgICB0cmF2ZXJzZShkYXRhWydjbGFzcyddKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChlbG0uZGF0YSAhPT0gdm5vZGUudGV4dCkge1xyXG4gICAgICAgICAgICBlbG0uZGF0YSA9IHZub2RlLnRleHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYXNzZXJ0Tm9kZU1hdGNoKG5vZGUsIHZub2RlLCBpblZQcmUpIHtcclxuICAgICAgICBpZiAoaXNEZWYodm5vZGUudGFnKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50JykgPT09IDAgfHxcclxuICAgICAgICAgICAgICAgICghaXNVbmtub3duRWxlbWVudCh2bm9kZSwgaW5WUHJlKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHZub2RlLnRhZy50b0xvd2VyQ2FzZSgpID09PVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAobm9kZS50YWdOYW1lICYmIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09ICh2bm9kZS5pc0NvbW1lbnQgPyA4IDogMyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBhdGNoKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5KSB7XHJcbiAgICAgICAgaWYgKGlzVW5kZWYodm5vZGUpKSB7XHJcbiAgICAgICAgICAgIGlmIChpc0RlZihvbGRWbm9kZSkpXHJcbiAgICAgICAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGlzSW5pdGlhbFBhdGNoID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIGluc2VydGVkVm5vZGVRdWV1ZSA9IFtdO1xyXG4gICAgICAgIGlmIChpc1VuZGVmKG9sZFZub2RlKSkge1xyXG4gICAgICAgICAgICAvLyBlbXB0eSBtb3VudCAobGlrZWx5IGFzIGNvbXBvbmVudCksIGNyZWF0ZSBuZXcgcm9vdCBlbGVtZW50XHJcbiAgICAgICAgICAgIGlzSW5pdGlhbFBhdGNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgY3JlYXRlRWxtKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGlzUmVhbEVsZW1lbnQgPSBpc0RlZihvbGRWbm9kZS5ub2RlVHlwZSk7XHJcbiAgICAgICAgICAgIGlmICghaXNSZWFsRWxlbWVudCAmJiBzYW1lVm5vZGUob2xkVm5vZGUsIHZub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gcGF0Y2ggZXhpc3Rpbmcgcm9vdCBub2RlXHJcbiAgICAgICAgICAgICAgICBwYXRjaFZub2RlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBudWxsLCBudWxsLCByZW1vdmVPbmx5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc1JlYWxFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbW91bnRpbmcgdG8gYSByZWFsIGVsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIHNlcnZlci1yZW5kZXJlZCBjb250ZW50IGFuZCBpZiB3ZSBjYW4gcGVyZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGEgc3VjY2Vzc2Z1bCBoeWRyYXRpb24uXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZFZub2RlLm5vZGVUeXBlID09PSAxICYmIG9sZFZub2RlLmhhc0F0dHJpYnV0ZShTU1JfQVRUUikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2xkVm5vZGUucmVtb3ZlQXR0cmlidXRlKFNTUl9BVFRSKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHlkcmF0aW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVHJ1ZShoeWRyYXRpbmcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoeWRyYXRlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvbGRWbm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXJuKCdUaGUgY2xpZW50LXNpZGUgcmVuZGVyZWQgdmlydHVhbCBET00gdHJlZSBpcyBub3QgbWF0Y2hpbmcgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NlcnZlci1yZW5kZXJlZCBjb250ZW50LiBUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgaW5jb3JyZWN0ICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdIVE1MIG1hcmt1cCwgZm9yIGV4YW1wbGUgbmVzdGluZyBibG9jay1sZXZlbCBlbGVtZW50cyBpbnNpZGUgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxwPiwgb3IgbWlzc2luZyA8dGJvZHk+LiBCYWlsaW5nIGh5ZHJhdGlvbiBhbmQgcGVyZm9ybWluZyAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZnVsbCBjbGllbnQtc2lkZSByZW5kZXIuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZWl0aGVyIG5vdCBzZXJ2ZXItcmVuZGVyZWQsIG9yIGh5ZHJhdGlvbiBmYWlsZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY3JlYXRlIGFuIGVtcHR5IG5vZGUgYW5kIHJlcGxhY2UgaXRcclxuICAgICAgICAgICAgICAgICAgICBvbGRWbm9kZSA9IGVtcHR5Tm9kZUF0KG9sZFZub2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIHJlcGxhY2luZyBleGlzdGluZyBlbGVtZW50XHJcbiAgICAgICAgICAgICAgICB2YXIgb2xkRWxtID0gb2xkVm5vZGUuZWxtO1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudEVsbSA9IG5vZGVPcHMucGFyZW50Tm9kZShvbGRFbG0pO1xyXG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIG5ldyBub2RlXHJcbiAgICAgICAgICAgICAgICBjcmVhdGVFbG0odm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgXHJcbiAgICAgICAgICAgICAgICAvLyBleHRyZW1lbHkgcmFyZSBlZGdlIGNhc2U6IGRvIG5vdCBpbnNlcnQgaWYgb2xkIGVsZW1lbnQgaXMgaW4gYVxyXG4gICAgICAgICAgICAgICAgLy8gbGVhdmluZyB0cmFuc2l0aW9uLiBPbmx5IGhhcHBlbnMgd2hlbiBjb21iaW5pbmcgdHJhbnNpdGlvbiArXHJcbiAgICAgICAgICAgICAgICAvLyBrZWVwLWFsaXZlICsgSE9Dcy4gKCM0NTkwKVxyXG4gICAgICAgICAgICAgICAgb2xkRWxtLl9sZWF2ZUNiID8gbnVsbCA6IHBhcmVudEVsbSwgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbG0pKTtcclxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseVxyXG4gICAgICAgICAgICAgICAgaWYgKGlzRGVmKHZub2RlLnBhcmVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZS5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhdGNoYWJsZSA9IGlzUGF0Y2hhYmxlKHZub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaV84ID0gMDsgaV84IDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2lfOCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2JzLmRlc3Ryb3lbaV84XShhbmNlc3Rvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3IuZWxtID0gdm5vZGUuZWxtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGF0Y2hhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpXzkgPSAwOyBpXzkgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpXzkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYnMuY3JlYXRlW2lfOV0oZW1wdHlOb2RlLCBhbmNlc3Rvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAjNjUxM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW52b2tlIGluc2VydCBob29rcyB0aGF0IG1heSBoYXZlIGJlZW4gbWVyZ2VkIGJ5IGNyZWF0ZSBob29rcy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGUuZy4gZm9yIGRpcmVjdGl2ZXMgdGhhdCB1c2VzIHRoZSBcImluc2VydGVkXCIgaG9vay5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnNlcnRfMSA9IGFuY2VzdG9yLmRhdGEuaG9vay5pbnNlcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5zZXJ0XzEubWVyZ2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3RhcnQgYXQgaW5kZXggMSB0byBhdm9pZCByZS1pbnZva2luZyBjb21wb25lbnQgbW91bnRlZCBob29rXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaV8xMCA9IDE7IGlfMTAgPCBpbnNlcnRfMS5mbnMubGVuZ3RoOyBpXzEwKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0XzEuZm5zW2lfMTBdKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJSZWYoYW5jZXN0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGRlc3Ryb3kgb2xkIG5vZGVcclxuICAgICAgICAgICAgICAgIGlmIChpc0RlZihwYXJlbnRFbG0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlVm5vZGVzKFtvbGRWbm9kZV0sIDAsIDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGFnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTtcclxuICAgICAgICByZXR1cm4gdm5vZGUuZWxtO1xyXG4gICAgfTtcclxufVxuXG52YXIgZGlyZWN0aXZlcyA9IHtcclxuICAgIGNyZWF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcclxuICAgIHVwZGF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcclxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIHVuYmluZERpcmVjdGl2ZXModm5vZGUpIHtcclxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGVtcHR5Tm9kZSBpcyBub3QgVk5vZGVXaXRoRGF0YVxyXG4gICAgICAgIHVwZGF0ZURpcmVjdGl2ZXModm5vZGUsIGVtcHR5Tm9kZSk7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIHVwZGF0ZURpcmVjdGl2ZXMob2xkVm5vZGUsIHZub2RlKSB7XHJcbiAgICBpZiAob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzIHx8IHZub2RlLmRhdGEuZGlyZWN0aXZlcykge1xyXG4gICAgICAgIF91cGRhdGUob2xkVm5vZGUsIHZub2RlKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBfdXBkYXRlKG9sZFZub2RlLCB2bm9kZSkge1xyXG4gICAgdmFyIGlzQ3JlYXRlID0gb2xkVm5vZGUgPT09IGVtcHR5Tm9kZTtcclxuICAgIHZhciBpc0Rlc3Ryb3kgPSB2bm9kZSA9PT0gZW1wdHlOb2RlO1xyXG4gICAgdmFyIG9sZERpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcywgb2xkVm5vZGUuY29udGV4dCk7XHJcbiAgICB2YXIgbmV3RGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXModm5vZGUuZGF0YS5kaXJlY3RpdmVzLCB2bm9kZS5jb250ZXh0KTtcclxuICAgIHZhciBkaXJzV2l0aEluc2VydCA9IFtdO1xyXG4gICAgdmFyIGRpcnNXaXRoUG9zdHBhdGNoID0gW107XHJcbiAgICB2YXIga2V5LCBvbGREaXIsIGRpcjtcclxuICAgIGZvciAoa2V5IGluIG5ld0RpcnMpIHtcclxuICAgICAgICBvbGREaXIgPSBvbGREaXJzW2tleV07XHJcbiAgICAgICAgZGlyID0gbmV3RGlyc1trZXldO1xyXG4gICAgICAgIGlmICghb2xkRGlyKSB7XHJcbiAgICAgICAgICAgIC8vIG5ldyBkaXJlY3RpdmUsIGJpbmRcclxuICAgICAgICAgICAgY2FsbEhvb2soZGlyLCAnYmluZCcsIHZub2RlLCBvbGRWbm9kZSk7XHJcbiAgICAgICAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuaW5zZXJ0ZWQpIHtcclxuICAgICAgICAgICAgICAgIGRpcnNXaXRoSW5zZXJ0LnB1c2goZGlyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gZXhpc3RpbmcgZGlyZWN0aXZlLCB1cGRhdGVcclxuICAgICAgICAgICAgZGlyLm9sZFZhbHVlID0gb2xkRGlyLnZhbHVlO1xyXG4gICAgICAgICAgICBkaXIub2xkQXJnID0gb2xkRGlyLmFyZztcclxuICAgICAgICAgICAgY2FsbEhvb2soZGlyLCAndXBkYXRlJywgdm5vZGUsIG9sZFZub2RlKTtcclxuICAgICAgICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICBkaXJzV2l0aFBvc3RwYXRjaC5wdXNoKGRpcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoZGlyc1dpdGhJbnNlcnQubGVuZ3RoKSB7XHJcbiAgICAgICAgdmFyIGNhbGxJbnNlcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhJbnNlcnQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNhbGxIb29rKGRpcnNXaXRoSW5zZXJ0W2ldLCAnaW5zZXJ0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoaXNDcmVhdGUpIHtcclxuICAgICAgICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBjYWxsSW5zZXJ0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNhbGxJbnNlcnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoKSB7XHJcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNhbGxIb29rKGRpcnNXaXRoUG9zdHBhdGNoW2ldLCAnY29tcG9uZW50VXBkYXRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmICghaXNDcmVhdGUpIHtcclxuICAgICAgICBmb3IgKGtleSBpbiBvbGREaXJzKSB7XHJcbiAgICAgICAgICAgIGlmICghbmV3RGlyc1trZXldKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kXHJcbiAgICAgICAgICAgICAgICBjYWxsSG9vayhvbGREaXJzW2tleV0sICd1bmJpbmQnLCBvbGRWbm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxudmFyIGVtcHR5TW9kaWZpZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyhkaXJzLCB2bSkge1xyXG4gICAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICBpZiAoIWRpcnMpIHtcclxuICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG4gICAgdmFyIGksIGRpcjtcclxuICAgIGZvciAoaSA9IDA7IGkgPCBkaXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgZGlyID0gZGlyc1tpXTtcclxuICAgICAgICBpZiAoIWRpci5tb2RpZmllcnMpIHtcclxuICAgICAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXHJcbiAgICAgICAgICAgIGRpci5tb2RpZmllcnMgPSBlbXB0eU1vZGlmaWVycztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVzW2dldFJhd0Rpck5hbWUoZGlyKV0gPSBkaXI7XHJcbiAgICAgICAgaWYgKHZtLl9zZXR1cFN0YXRlICYmIHZtLl9zZXR1cFN0YXRlLl9fc2ZjKSB7XHJcbiAgICAgICAgICAgIGRpci5kZWYgPSBkaXIuZGVmIHx8IHJlc29sdmVBc3NldCh2bSwgJ19zZXR1cFN0YXRlJywgJ3YtJyArIGRpci5uYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGlyLmRlZiA9IGRpci5kZWYgfHwgcmVzb2x2ZUFzc2V0KHZtLiRvcHRpb25zLCAnZGlyZWN0aXZlcycsIGRpci5uYW1lLCB0cnVlKTtcclxuICAgIH1cclxuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxyXG4gICAgcmV0dXJuIHJlcztcclxufVxyXG5mdW5jdGlvbiBnZXRSYXdEaXJOYW1lKGRpcikge1xyXG4gICAgcmV0dXJuIChkaXIucmF3TmFtZSB8fCBcIlwiLmNvbmNhdChkaXIubmFtZSwgXCIuXCIpLmNvbmNhdChPYmplY3Qua2V5cyhkaXIubW9kaWZpZXJzIHx8IHt9KS5qb2luKCcuJykpKTtcclxufVxyXG5mdW5jdGlvbiBjYWxsSG9vayhkaXIsIGhvb2ssIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KSB7XHJcbiAgICB2YXIgZm4gPSBkaXIuZGVmICYmIGRpci5kZWZbaG9va107XHJcbiAgICBpZiAoZm4pIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBmbih2bm9kZS5lbG0sIGRpciwgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBoYW5kbGVFcnJvcihlLCB2bm9kZS5jb250ZXh0LCBcImRpcmVjdGl2ZSBcIi5jb25jYXQoZGlyLm5hbWUsIFwiIFwiKS5jb25jYXQoaG9vaywgXCIgaG9va1wiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbnZhciBiYXNlTW9kdWxlcyA9IFtyZWYsIGRpcmVjdGl2ZXNdO1xuXG5mdW5jdGlvbiB1cGRhdGVBdHRycyhvbGRWbm9kZSwgdm5vZGUpIHtcclxuICAgIHZhciBvcHRzID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcclxuICAgIGlmIChpc0RlZihvcHRzKSAmJiBvcHRzLkN0b3Iub3B0aW9ucy5pbmhlcml0QXR0cnMgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5hdHRycykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmF0dHJzKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHZhciBrZXksIGN1ciwgb2xkO1xyXG4gICAgdmFyIGVsbSA9IHZub2RlLmVsbTtcclxuICAgIHZhciBvbGRBdHRycyA9IG9sZFZub2RlLmRhdGEuYXR0cnMgfHwge307XHJcbiAgICB2YXIgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xyXG4gICAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XHJcbiAgICBpZiAoaXNEZWYoYXR0cnMuX19vYl9fKSB8fCBpc1RydWUoYXR0cnMuX3ZfYXR0cl9wcm94eSkpIHtcclxuICAgICAgICBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgPSBleHRlbmQoe30sIGF0dHJzKTtcclxuICAgIH1cclxuICAgIGZvciAoa2V5IGluIGF0dHJzKSB7XHJcbiAgICAgICAgY3VyID0gYXR0cnNba2V5XTtcclxuICAgICAgICBvbGQgPSBvbGRBdHRyc1trZXldO1xyXG4gICAgICAgIGlmIChvbGQgIT09IGN1cikge1xyXG4gICAgICAgICAgICBzZXRBdHRyKGVsbSwga2V5LCBjdXIsIHZub2RlLmRhdGEucHJlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyAjNDM5MTogaW4gSUU5LCBzZXR0aW5nIHR5cGUgY2FuIHJlc2V0IHZhbHVlIGZvciBpbnB1dFt0eXBlPXJhZGlvXVxyXG4gICAgLy8gIzY2NjY6IElFL0VkZ2UgZm9yY2VzIHByb2dyZXNzIHZhbHVlIGRvd24gdG8gMSBiZWZvcmUgc2V0dGluZyBhIG1heFxyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICBpZiAoKGlzSUUgfHwgaXNFZGdlKSAmJiBhdHRycy52YWx1ZSAhPT0gb2xkQXR0cnMudmFsdWUpIHtcclxuICAgICAgICBzZXRBdHRyKGVsbSwgJ3ZhbHVlJywgYXR0cnMudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZm9yIChrZXkgaW4gb2xkQXR0cnMpIHtcclxuICAgICAgICBpZiAoaXNVbmRlZihhdHRyc1trZXldKSkge1xyXG4gICAgICAgICAgICBpZiAoaXNYbGluayhrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCFpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBzZXRBdHRyKGVsLCBrZXksIHZhbHVlLCBpc0luUHJlKSB7XHJcbiAgICBpZiAoaXNJblByZSB8fCBlbC50YWdOYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7XHJcbiAgICAgICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNCb29sZWFuQXR0cihrZXkpKSB7XHJcbiAgICAgICAgLy8gc2V0IGF0dHJpYnV0ZSBmb3IgYmxhbmsgdmFsdWVcclxuICAgICAgICAvLyBlLmcuIDxvcHRpb24gZGlzYWJsZWQ+U2VsZWN0IG9uZTwvb3B0aW9uPlxyXG4gICAgICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xyXG4gICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHRlY2huaWNhbGx5IGFsbG93ZnVsbHNjcmVlbiBpcyBhIGJvb2xlYW4gYXR0cmlidXRlIGZvciA8aWZyYW1lPixcclxuICAgICAgICAgICAgLy8gYnV0IEZsYXNoIGV4cGVjdHMgYSB2YWx1ZSBvZiBcInRydWVcIiB3aGVuIHVzZWQgb24gPGVtYmVkPiB0YWdcclxuICAgICAgICAgICAgdmFsdWUgPSBrZXkgPT09ICdhbGxvd2Z1bGxzY3JlZW4nICYmIGVsLnRhZ05hbWUgPT09ICdFTUJFRCcgPyAndHJ1ZScgOiBrZXk7XHJcbiAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcclxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBjb252ZXJ0RW51bWVyYXRlZFZhbHVlKGtleSwgdmFsdWUpKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzWGxpbmsoa2V5KSkge1xyXG4gICAgICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xyXG4gICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpIHtcclxuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xyXG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gIzcxMzg6IElFMTAgJiAxMSBmaXJlcyBpbnB1dCBldmVudCB3aGVuIHNldHRpbmcgcGxhY2Vob2xkZXIgb25cclxuICAgICAgICAvLyA8dGV4dGFyZWE+Li4uIGJsb2NrIHRoZSBmaXJzdCBpbnB1dCBldmVudCBhbmQgcmVtb3ZlIHRoZSBibG9ja2VyXHJcbiAgICAgICAgLy8gaW1tZWRpYXRlbHkuXHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICAgICAgaWYgKGlzSUUgJiZcclxuICAgICAgICAgICAgIWlzSUU5ICYmXHJcbiAgICAgICAgICAgIGVsLnRhZ05hbWUgPT09ICdURVhUQVJFQScgJiZcclxuICAgICAgICAgICAga2V5ID09PSAncGxhY2Vob2xkZXInICYmXHJcbiAgICAgICAgICAgIHZhbHVlICE9PSAnJyAmJlxyXG4gICAgICAgICAgICAhZWwuX19pZXBoKSB7XHJcbiAgICAgICAgICAgIHZhciBibG9ja2VyXzEgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2lucHV0JywgYmxvY2tlcl8xKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyXzEpO1xyXG4gICAgICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcclxuICAgICAgICAgICAgZWwuX19pZXBoID0gdHJ1ZTsgLyogSUUgcGxhY2Vob2xkZXIgcGF0Y2hlZCAqL1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XHJcbiAgICB9XHJcbn1cclxudmFyIGF0dHJzID0ge1xyXG4gICAgY3JlYXRlOiB1cGRhdGVBdHRycyxcclxuICAgIHVwZGF0ZTogdXBkYXRlQXR0cnNcclxufTtcblxuZnVuY3Rpb24gdXBkYXRlQ2xhc3Mob2xkVm5vZGUsIHZub2RlKSB7XHJcbiAgICB2YXIgZWwgPSB2bm9kZS5lbG07XHJcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XHJcbiAgICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XHJcbiAgICBpZiAoaXNVbmRlZihkYXRhLnN0YXRpY0NsYXNzKSAmJlxyXG4gICAgICAgIGlzVW5kZWYoZGF0YS5jbGFzcykgJiZcclxuICAgICAgICAoaXNVbmRlZihvbGREYXRhKSB8fFxyXG4gICAgICAgICAgICAoaXNVbmRlZihvbGREYXRhLnN0YXRpY0NsYXNzKSAmJiBpc1VuZGVmKG9sZERhdGEuY2xhc3MpKSkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgY2xzID0gZ2VuQ2xhc3NGb3JWbm9kZSh2bm9kZSk7XHJcbiAgICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBjbGFzc2VzXHJcbiAgICB2YXIgdHJhbnNpdGlvbkNsYXNzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzO1xyXG4gICAgaWYgKGlzRGVmKHRyYW5zaXRpb25DbGFzcykpIHtcclxuICAgICAgICBjbHMgPSBjb25jYXQoY2xzLCBzdHJpbmdpZnlDbGFzcyh0cmFuc2l0aW9uQ2xhc3MpKTtcclxuICAgIH1cclxuICAgIC8vIHNldCB0aGUgY2xhc3NcclxuICAgIGlmIChjbHMgIT09IGVsLl9wcmV2Q2xhc3MpIHtcclxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2xzKTtcclxuICAgICAgICBlbC5fcHJldkNsYXNzID0gY2xzO1xyXG4gICAgfVxyXG59XHJcbnZhciBrbGFzcyA9IHtcclxuICAgIGNyZWF0ZTogdXBkYXRlQ2xhc3MsXHJcbiAgICB1cGRhdGU6IHVwZGF0ZUNsYXNzXHJcbn07XG5cbi8vIGluIHNvbWUgY2FzZXMsIHRoZSBldmVudCB1c2VkIGhhcyB0byBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWVcclxuLy8gc28gd2UgdXNlZCBzb21lIHJlc2VydmVkIHRva2VucyBkdXJpbmcgY29tcGlsZS5cclxudmFyIFJBTkdFX1RPS0VOID0gJ19fcic7XHJcbnZhciBDSEVDS0JPWF9SQURJT19UT0tFTiA9ICdfX2MnO1xuXG4vLyBub3JtYWxpemUgdi1tb2RlbCBldmVudCB0b2tlbnMgdGhhdCBjYW4gb25seSBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWUuXHJcbi8vIGl0J3MgaW1wb3J0YW50IHRvIHBsYWNlIHRoZSBldmVudCBhcyB0aGUgZmlyc3QgaW4gdGhlIGFycmF5IGJlY2F1c2VcclxuLy8gdGhlIHdob2xlIHBvaW50IGlzIGVuc3VyaW5nIHRoZSB2LW1vZGVsIGNhbGxiYWNrIGdldHMgY2FsbGVkIGJlZm9yZVxyXG4vLyB1c2VyLWF0dGFjaGVkIGhhbmRsZXJzLlxyXG5mdW5jdGlvbiBub3JtYWxpemVFdmVudHMob24pIHtcclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgaWYgKGlzRGVmKG9uW1JBTkdFX1RPS0VOXSkpIHtcclxuICAgICAgICAvLyBJRSBpbnB1dFt0eXBlPXJhbmdlXSBvbmx5IHN1cHBvcnRzIGBjaGFuZ2VgIGV2ZW50XHJcbiAgICAgICAgdmFyIGV2ZW50XzEgPSBpc0lFID8gJ2NoYW5nZScgOiAnaW5wdXQnO1xyXG4gICAgICAgIG9uW2V2ZW50XzFdID0gW10uY29uY2F0KG9uW1JBTkdFX1RPS0VOXSwgb25bZXZlbnRfMV0gfHwgW10pO1xyXG4gICAgICAgIGRlbGV0ZSBvbltSQU5HRV9UT0tFTl07XHJcbiAgICB9XHJcbiAgICAvLyBUaGlzIHdhcyBvcmlnaW5hbGx5IGludGVuZGVkIHRvIGZpeCAjNDUyMSBidXQgbm8gbG9uZ2VyIG5lY2Vzc2FyeVxyXG4gICAgLy8gYWZ0ZXIgMi41LiBLZWVwaW5nIGl0IGZvciBiYWNrd2FyZHMgY29tcGF0IHdpdGggZ2VuZXJhdGVkIGNvZGUgZnJvbSA8IDIuNFxyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICBpZiAoaXNEZWYob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dKSkge1xyXG4gICAgICAgIG9uLmNoYW5nZSA9IFtdLmNvbmNhdChvbltDSEVDS0JPWF9SQURJT19UT0tFTl0sIG9uLmNoYW5nZSB8fCBbXSk7XHJcbiAgICAgICAgZGVsZXRlIG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXTtcclxuICAgIH1cclxufVxyXG52YXIgdGFyZ2V0O1xyXG5mdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlcihldmVudCwgaGFuZGxlciwgY2FwdHVyZSkge1xyXG4gICAgdmFyIF90YXJnZXQgPSB0YXJnZXQ7IC8vIHNhdmUgY3VycmVudCB0YXJnZXQgZWxlbWVudCBpbiBjbG9zdXJlXHJcbiAgICByZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIoKSB7XHJcbiAgICAgICAgdmFyIHJlcyA9IGhhbmRsZXIuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcclxuICAgICAgICBpZiAocmVzICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJlbW92ZShldmVudCwgb25jZUhhbmRsZXIsIGNhcHR1cmUsIF90YXJnZXQpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuLy8gIzk0NDY6IEZpcmVmb3ggPD0gNTMgKGluIHBhcnRpY3VsYXIsIEVTUiA1MikgaGFzIGluY29ycmVjdCBFdmVudC50aW1lU3RhbXBcclxuLy8gaW1wbGVtZW50YXRpb24gYW5kIGRvZXMgbm90IGZpcmUgbWljcm90YXNrcyBpbiBiZXR3ZWVuIGV2ZW50IHByb3BhZ2F0aW9uLCBzb1xyXG4vLyBzYWZlIHRvIGV4Y2x1ZGUuXHJcbnZhciB1c2VNaWNyb3Rhc2tGaXggPSBpc1VzaW5nTWljcm9UYXNrICYmICEoaXNGRiAmJiBOdW1iZXIoaXNGRlsxXSkgPD0gNTMpO1xyXG5mdW5jdGlvbiBhZGQobmFtZSwgaGFuZGxlciwgY2FwdHVyZSwgcGFzc2l2ZSkge1xyXG4gICAgLy8gYXN5bmMgZWRnZSBjYXNlICM2NTY2OiBpbm5lciBjbGljayBldmVudCB0cmlnZ2VycyBwYXRjaCwgZXZlbnQgaGFuZGxlclxyXG4gICAgLy8gYXR0YWNoZWQgdG8gb3V0ZXIgZWxlbWVudCBkdXJpbmcgcGF0Y2gsIGFuZCB0cmlnZ2VyZWQgYWdhaW4uIFRoaXNcclxuICAgIC8vIGhhcHBlbnMgYmVjYXVzZSBicm93c2VycyBmaXJlIG1pY3JvdGFzayB0aWNrcyBiZXR3ZWVuIGV2ZW50IHByb3BhZ2F0aW9uLlxyXG4gICAgLy8gdGhlIHNvbHV0aW9uIGlzIHNpbXBsZTogd2Ugc2F2ZSB0aGUgdGltZXN0YW1wIHdoZW4gYSBoYW5kbGVyIGlzIGF0dGFjaGVkLFxyXG4gICAgLy8gYW5kIHRoZSBoYW5kbGVyIHdvdWxkIG9ubHkgZmlyZSBpZiB0aGUgZXZlbnQgcGFzc2VkIHRvIGl0IHdhcyBmaXJlZFxyXG4gICAgLy8gQUZURVIgaXQgd2FzIGF0dGFjaGVkLlxyXG4gICAgaWYgKHVzZU1pY3JvdGFza0ZpeCkge1xyXG4gICAgICAgIHZhciBhdHRhY2hlZFRpbWVzdGFtcF8xID0gY3VycmVudEZsdXNoVGltZXN0YW1wO1xyXG4gICAgICAgIHZhciBvcmlnaW5hbF8xID0gaGFuZGxlcjtcclxuICAgICAgICAvL0B0cy1leHBlY3QtZXJyb3JcclxuICAgICAgICBoYW5kbGVyID0gb3JpZ2luYWxfMS5fd3JhcHBlciA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgLy8gbm8gYnViYmxpbmcsIHNob3VsZCBhbHdheXMgZmlyZS5cclxuICAgICAgICAgICAgLy8gdGhpcyBpcyBqdXN0IGEgc2FmZXR5IG5ldCBpbiBjYXNlIGV2ZW50LnRpbWVTdGFtcCBpcyB1bnJlbGlhYmxlIGluXHJcbiAgICAgICAgICAgIC8vIGNlcnRhaW4gd2VpcmQgZW52aXJvbm1lbnRzLi4uXHJcbiAgICAgICAgICAgIGUudGFyZ2V0ID09PSBlLmN1cnJlbnRUYXJnZXQgfHxcclxuICAgICAgICAgICAgICAgIC8vIGV2ZW50IGlzIGZpcmVkIGFmdGVyIGhhbmRsZXIgYXR0YWNobWVudFxyXG4gICAgICAgICAgICAgICAgZS50aW1lU3RhbXAgPj0gYXR0YWNoZWRUaW1lc3RhbXBfMSB8fFxyXG4gICAgICAgICAgICAgICAgLy8gYmFpbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgaGF2ZSBidWdneSBldmVudC50aW1lU3RhbXAgaW1wbGVtZW50YXRpb25zXHJcbiAgICAgICAgICAgICAgICAvLyAjOTQ2MiBpT1MgOSBidWc6IGV2ZW50LnRpbWVTdGFtcCBpcyAwIGFmdGVyIGhpc3RvcnkucHVzaFN0YXRlXHJcbiAgICAgICAgICAgICAgICAvLyAjOTY4MSBRdFdlYkVuZ2luZSBldmVudC50aW1lU3RhbXAgaXMgbmVnYXRpdmUgdmFsdWVcclxuICAgICAgICAgICAgICAgIGUudGltZVN0YW1wIDw9IDAgfHxcclxuICAgICAgICAgICAgICAgIC8vICM5NDQ4IGJhaWwgaWYgZXZlbnQgaXMgZmlyZWQgaW4gYW5vdGhlciBkb2N1bWVudCBpbiBhIG11bHRpLXBhZ2VcclxuICAgICAgICAgICAgICAgIC8vIGVsZWN0cm9uL253LmpzIGFwcCwgc2luY2UgZXZlbnQudGltZVN0YW1wIHdpbGwgYmUgdXNpbmcgYSBkaWZmZXJlbnRcclxuICAgICAgICAgICAgICAgIC8vIHN0YXJ0aW5nIHJlZmVyZW5jZVxyXG4gICAgICAgICAgICAgICAgZS50YXJnZXQub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbF8xLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgaGFuZGxlciwgc3VwcG9ydHNQYXNzaXZlID8geyBjYXB0dXJlOiBjYXB0dXJlLCBwYXNzaXZlOiBwYXNzaXZlIH0gOiBjYXB0dXJlKTtcclxufVxyXG5mdW5jdGlvbiByZW1vdmUobmFtZSwgaGFuZGxlciwgY2FwdHVyZSwgX3RhcmdldCkge1xyXG4gICAgKF90YXJnZXQgfHwgdGFyZ2V0KS5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIFxyXG4gICAgLy9AdHMtZXhwZWN0LWVycm9yXHJcbiAgICBoYW5kbGVyLl93cmFwcGVyIHx8IGhhbmRsZXIsIGNhcHR1cmUpO1xyXG59XHJcbmZ1bmN0aW9uIHVwZGF0ZURPTUxpc3RlbmVycyhvbGRWbm9kZSwgdm5vZGUpIHtcclxuICAgIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEub24pICYmIGlzVW5kZWYodm5vZGUuZGF0YS5vbikpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgb24gPSB2bm9kZS5kYXRhLm9uIHx8IHt9O1xyXG4gICAgdmFyIG9sZE9uID0gb2xkVm5vZGUuZGF0YS5vbiB8fCB7fTtcclxuICAgIC8vIHZub2RlIGlzIGVtcHR5IHdoZW4gcmVtb3ZpbmcgYWxsIGxpc3RlbmVycyxcclxuICAgIC8vIGFuZCB1c2Ugb2xkIHZub2RlIGRvbSBlbGVtZW50XHJcbiAgICB0YXJnZXQgPSB2bm9kZS5lbG0gfHwgb2xkVm5vZGUuZWxtO1xyXG4gICAgbm9ybWFsaXplRXZlbnRzKG9uKTtcclxuICAgIHVwZGF0ZUxpc3RlbmVycyhvbiwgb2xkT24sIGFkZCwgcmVtb3ZlLCBjcmVhdGVPbmNlSGFuZGxlciwgdm5vZGUuY29udGV4dCk7XHJcbiAgICB0YXJnZXQgPSB1bmRlZmluZWQ7XHJcbn1cclxudmFyIGV2ZW50cyA9IHtcclxuICAgIGNyZWF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzLFxyXG4gICAgdXBkYXRlOiB1cGRhdGVET01MaXN0ZW5lcnMsXHJcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGVtcHR5Tm9kZSBoYXMgYWN0dWFsbHkgZGF0YVxyXG4gICAgZGVzdHJveTogZnVuY3Rpb24gKHZub2RlKSB7IHJldHVybiB1cGRhdGVET01MaXN0ZW5lcnModm5vZGUsIGVtcHR5Tm9kZSk7IH1cclxufTtcblxudmFyIHN2Z0NvbnRhaW5lcjtcclxuZnVuY3Rpb24gdXBkYXRlRE9NUHJvcHMob2xkVm5vZGUsIHZub2RlKSB7XHJcbiAgICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmRvbVByb3BzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuZG9tUHJvcHMpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdmFyIGtleSwgY3VyO1xyXG4gICAgdmFyIGVsbSA9IHZub2RlLmVsbTtcclxuICAgIHZhciBvbGRQcm9wcyA9IG9sZFZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XHJcbiAgICB2YXIgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xyXG4gICAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XHJcbiAgICBpZiAoaXNEZWYocHJvcHMuX19vYl9fKSB8fCBpc1RydWUocHJvcHMuX3ZfYXR0cl9wcm94eSkpIHtcclxuICAgICAgICBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgPSBleHRlbmQoe30sIHByb3BzKTtcclxuICAgIH1cclxuICAgIGZvciAoa2V5IGluIG9sZFByb3BzKSB7XHJcbiAgICAgICAgaWYgKCEoa2V5IGluIHByb3BzKSkge1xyXG4gICAgICAgICAgICBlbG1ba2V5XSA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZvciAoa2V5IGluIHByb3BzKSB7XHJcbiAgICAgICAgY3VyID0gcHJvcHNba2V5XTtcclxuICAgICAgICAvLyBpZ25vcmUgY2hpbGRyZW4gaWYgdGhlIG5vZGUgaGFzIHRleHRDb250ZW50IG9yIGlubmVySFRNTCxcclxuICAgICAgICAvLyBhcyB0aGVzZSB3aWxsIHRocm93IGF3YXkgZXhpc3RpbmcgRE9NIG5vZGVzIGFuZCBjYXVzZSByZW1vdmFsIGVycm9yc1xyXG4gICAgICAgIC8vIG9uIHN1YnNlcXVlbnQgcGF0Y2hlcyAoIzMzNjApXHJcbiAgICAgICAgaWYgKGtleSA9PT0gJ3RleHRDb250ZW50JyB8fCBrZXkgPT09ICdpbm5lckhUTUwnKSB7XHJcbiAgICAgICAgICAgIGlmICh2bm9kZS5jaGlsZHJlbilcclxuICAgICAgICAgICAgICAgIHZub2RlLmNoaWxkcmVuLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIGlmIChjdXIgPT09IG9sZFByb3BzW2tleV0pXHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgLy8gIzY2MDEgd29yayBhcm91bmQgQ2hyb21lIHZlcnNpb24gPD0gNTUgYnVnIHdoZXJlIHNpbmdsZSB0ZXh0Tm9kZVxyXG4gICAgICAgICAgICAvLyByZXBsYWNlZCBieSBpbm5lckhUTUwvdGV4dENvbnRlbnQgcmV0YWlucyBpdHMgcGFyZW50Tm9kZSBwcm9wZXJ0eVxyXG4gICAgICAgICAgICBpZiAoZWxtLmNoaWxkTm9kZXMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBlbG0ucmVtb3ZlQ2hpbGQoZWxtLmNoaWxkTm9kZXNbMF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChrZXkgPT09ICd2YWx1ZScgJiYgZWxtLnRhZ05hbWUgIT09ICdQUk9HUkVTUycpIHtcclxuICAgICAgICAgICAgLy8gc3RvcmUgdmFsdWUgYXMgX3ZhbHVlIGFzIHdlbGwgc2luY2VcclxuICAgICAgICAgICAgLy8gbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZSBzdHJpbmdpZmllZFxyXG4gICAgICAgICAgICBlbG0uX3ZhbHVlID0gY3VyO1xyXG4gICAgICAgICAgICAvLyBhdm9pZCByZXNldHRpbmcgY3Vyc29yIHBvc2l0aW9uIHdoZW4gdmFsdWUgaXMgdGhlIHNhbWVcclxuICAgICAgICAgICAgdmFyIHN0ckN1ciA9IGlzVW5kZWYoY3VyKSA/ICcnIDogU3RyaW5nKGN1cik7XHJcbiAgICAgICAgICAgIGlmIChzaG91bGRVcGRhdGVWYWx1ZShlbG0sIHN0ckN1cikpIHtcclxuICAgICAgICAgICAgICAgIGVsbS52YWx1ZSA9IHN0ckN1cjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdpbm5lckhUTUwnICYmXHJcbiAgICAgICAgICAgIGlzU1ZHKGVsbS50YWdOYW1lKSAmJlxyXG4gICAgICAgICAgICBpc1VuZGVmKGVsbS5pbm5lckhUTUwpKSB7XHJcbiAgICAgICAgICAgIC8vIElFIGRvZXNuJ3Qgc3VwcG9ydCBpbm5lckhUTUwgZm9yIFNWRyBlbGVtZW50c1xyXG4gICAgICAgICAgICBzdmdDb250YWluZXIgPSBzdmdDb250YWluZXIgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIHN2Z0NvbnRhaW5lci5pbm5lckhUTUwgPSBcIjxzdmc+XCIuY29uY2F0KGN1ciwgXCI8L3N2Zz5cIik7XHJcbiAgICAgICAgICAgIHZhciBzdmcgPSBzdmdDb250YWluZXIuZmlyc3RDaGlsZDtcclxuICAgICAgICAgICAgd2hpbGUgKGVsbS5maXJzdENoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICBlbG0ucmVtb3ZlQ2hpbGQoZWxtLmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHdoaWxlIChzdmcuZmlyc3RDaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgZWxtLmFwcGVuZENoaWxkKHN2Zy5maXJzdENoaWxkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChcclxuICAgICAgICAvLyBza2lwIHRoZSB1cGRhdGUgaWYgb2xkIGFuZCBuZXcgVkRPTSBzdGF0ZSBpcyB0aGUgc2FtZS5cclxuICAgICAgICAvLyBgdmFsdWVgIGlzIGhhbmRsZWQgc2VwYXJhdGVseSBiZWNhdXNlIHRoZSBET00gdmFsdWUgbWF5IGJlIHRlbXBvcmFyaWx5XHJcbiAgICAgICAgLy8gb3V0IG9mIHN5bmMgd2l0aCBWRE9NIHN0YXRlIGR1ZSB0byBmb2N1cywgY29tcG9zaXRpb24gYW5kIG1vZGlmaWVycy5cclxuICAgICAgICAvLyBUaGlzICAjNDUyMSBieSBza2lwcGluZyB0aGUgdW5uZWNlc3NhcnkgYGNoZWNrZWRgIHVwZGF0ZS5cclxuICAgICAgICBjdXIgIT09IG9sZFByb3BzW2tleV0pIHtcclxuICAgICAgICAgICAgLy8gc29tZSBwcm9wZXJ0eSB1cGRhdGVzIGNhbiB0aHJvd1xyXG4gICAgICAgICAgICAvLyBlLmcuIGB2YWx1ZWAgb24gPHByb2dyZXNzPiB3LyBub24tZmluaXRlIHZhbHVlXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBlbG1ba2V5XSA9IGN1cjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkgeyB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHNob3VsZFVwZGF0ZVZhbHVlKGVsbSwgY2hlY2tWYWwpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAvL0B0cy1leHBlY3QtZXJyb3JcclxuICAgICFlbG0uY29tcG9zaW5nICYmXHJcbiAgICAgICAgKGVsbS50YWdOYW1lID09PSAnT1BUSU9OJyB8fFxyXG4gICAgICAgICAgICBpc05vdEluRm9jdXNBbmREaXJ0eShlbG0sIGNoZWNrVmFsKSB8fFxyXG4gICAgICAgICAgICBpc0RpcnR5V2l0aE1vZGlmaWVycyhlbG0sIGNoZWNrVmFsKSkpO1xyXG59XHJcbmZ1bmN0aW9uIGlzTm90SW5Gb2N1c0FuZERpcnR5KGVsbSwgY2hlY2tWYWwpIHtcclxuICAgIC8vIHJldHVybiB0cnVlIHdoZW4gdGV4dGJveCAoLm51bWJlciBhbmQgLnRyaW0pIGxvc2VzIGZvY3VzIGFuZCBpdHMgdmFsdWUgaXNcclxuICAgIC8vIG5vdCBlcXVhbCB0byB0aGUgdXBkYXRlZCB2YWx1ZVxyXG4gICAgdmFyIG5vdEluRm9jdXMgPSB0cnVlO1xyXG4gICAgLy8gIzYxNTdcclxuICAgIC8vIHdvcmsgYXJvdW5kIElFIGJ1ZyB3aGVuIGFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluIGFuIGlmcmFtZVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBub3RJbkZvY3VzID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gZWxtO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHsgfVxyXG4gICAgcmV0dXJuIG5vdEluRm9jdXMgJiYgZWxtLnZhbHVlICE9PSBjaGVja1ZhbDtcclxufVxyXG5mdW5jdGlvbiBpc0RpcnR5V2l0aE1vZGlmaWVycyhlbG0sIG5ld1ZhbCkge1xyXG4gICAgdmFyIHZhbHVlID0gZWxtLnZhbHVlO1xyXG4gICAgdmFyIG1vZGlmaWVycyA9IGVsbS5fdk1vZGlmaWVyczsgLy8gaW5qZWN0ZWQgYnkgdi1tb2RlbCBydW50aW1lXHJcbiAgICBpZiAoaXNEZWYobW9kaWZpZXJzKSkge1xyXG4gICAgICAgIGlmIChtb2RpZmllcnMubnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0b051bWJlcih2YWx1ZSkgIT09IHRvTnVtYmVyKG5ld1ZhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChtb2RpZmllcnMudHJpbSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUudHJpbSgpICE9PSBuZXdWYWwudHJpbSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZSAhPT0gbmV3VmFsO1xyXG59XHJcbnZhciBkb21Qcm9wcyA9IHtcclxuICAgIGNyZWF0ZTogdXBkYXRlRE9NUHJvcHMsXHJcbiAgICB1cGRhdGU6IHVwZGF0ZURPTVByb3BzXHJcbn07XG5cbnZhciBwYXJzZVN0eWxlVGV4dCA9IGNhY2hlZChmdW5jdGlvbiAoY3NzVGV4dCkge1xyXG4gICAgdmFyIHJlcyA9IHt9O1xyXG4gICAgdmFyIGxpc3REZWxpbWl0ZXIgPSAvOyg/IVteKF0qXFwpKS9nO1xyXG4gICAgdmFyIHByb3BlcnR5RGVsaW1pdGVyID0gLzooLispLztcclxuICAgIGNzc1RleHQuc3BsaXQobGlzdERlbGltaXRlcikuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIGlmIChpdGVtKSB7XHJcbiAgICAgICAgICAgIHZhciB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyKTtcclxuICAgICAgICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJlc1t0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlcztcclxufSk7XHJcbi8vIG1lcmdlIHN0YXRpYyBhbmQgZHluYW1pYyBzdHlsZSBkYXRhIG9uIHRoZSBzYW1lIHZub2RlXHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlRGF0YShkYXRhKSB7XHJcbiAgICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcoZGF0YS5zdHlsZSk7XHJcbiAgICAvLyBzdGF0aWMgc3R5bGUgaXMgcHJlLXByb2Nlc3NlZCBpbnRvIGFuIG9iamVjdCBkdXJpbmcgY29tcGlsYXRpb25cclxuICAgIC8vIGFuZCBpcyBhbHdheXMgYSBmcmVzaCBvYmplY3QsIHNvIGl0J3Mgc2FmZSB0byBtZXJnZSBpbnRvIGl0XHJcbiAgICByZXR1cm4gZGF0YS5zdGF0aWNTdHlsZSA/IGV4dGVuZChkYXRhLnN0YXRpY1N0eWxlLCBzdHlsZSkgOiBzdHlsZTtcclxufVxyXG4vLyBub3JtYWxpemUgcG9zc2libGUgYXJyYXkgLyBzdHJpbmcgdmFsdWVzIGludG8gT2JqZWN0XHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlQmluZGluZyhiaW5kaW5nU3R5bGUpIHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KGJpbmRpbmdTdHlsZSkpIHtcclxuICAgICAgICByZXR1cm4gdG9PYmplY3QoYmluZGluZ1N0eWxlKTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgYmluZGluZ1N0eWxlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHJldHVybiBwYXJzZVN0eWxlVGV4dChiaW5kaW5nU3R5bGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGJpbmRpbmdTdHlsZTtcclxufVxyXG4vKipcclxuICogcGFyZW50IGNvbXBvbmVudCBzdHlsZSBzaG91bGQgYmUgYWZ0ZXIgY2hpbGQnc1xyXG4gKiBzbyB0aGF0IHBhcmVudCBjb21wb25lbnQncyBzdHlsZSBjb3VsZCBvdmVycmlkZSBpdFxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0U3R5bGUodm5vZGUsIGNoZWNrQ2hpbGQpIHtcclxuICAgIHZhciByZXMgPSB7fTtcclxuICAgIHZhciBzdHlsZURhdGE7XHJcbiAgICBpZiAoY2hlY2tDaGlsZCkge1xyXG4gICAgICAgIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcclxuICAgICAgICB3aGlsZSAoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZE5vZGUgJiZcclxuICAgICAgICAgICAgICAgIGNoaWxkTm9kZS5kYXRhICYmXHJcbiAgICAgICAgICAgICAgICAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKGNoaWxkTm9kZS5kYXRhKSkpIHtcclxuICAgICAgICAgICAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YSh2bm9kZS5kYXRhKSkpIHtcclxuICAgICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xyXG4gICAgfVxyXG4gICAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcclxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgcGFyZW50Tm9kZS5wYXJlbnQgbm90IFZOb2RlV2l0aERhdGFcclxuICAgIHdoaWxlICgocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xyXG4gICAgICAgIGlmIChwYXJlbnROb2RlLmRhdGEgJiYgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShwYXJlbnROb2RlLmRhdGEpKSkge1xyXG4gICAgICAgICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn1cblxudmFyIGNzc1ZhclJFID0gL14tLS87XHJcbnZhciBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xyXG52YXIgc2V0UHJvcCA9IGZ1bmN0aW9uIChlbCwgbmFtZSwgdmFsKSB7XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgIGlmIChjc3NWYXJSRS50ZXN0KG5hbWUpKSB7XHJcbiAgICAgICAgZWwuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xyXG4gICAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KGh5cGhlbmF0ZShuYW1lKSwgdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsICcnKSwgJ2ltcG9ydGFudCcpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWROYW1lID0gbm9ybWFsaXplKG5hbWUpO1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcclxuICAgICAgICAgICAgLy8gU3VwcG9ydCB2YWx1ZXMgYXJyYXkgY3JlYXRlZCBieSBhdXRvcHJlZml4ZXIsIGUuZy5cclxuICAgICAgICAgICAgLy8ge2Rpc3BsYXk6IFtcIi13ZWJraXQtYm94XCIsIFwiLW1zLWZsZXhib3hcIiwgXCJmbGV4XCJdfVxyXG4gICAgICAgICAgICAvLyBTZXQgdGhlbSBvbmUgYnkgb25lLCBhbmQgdGhlIGJyb3dzZXIgd2lsbCBvbmx5IHNldCB0aG9zZSBpdCBjYW4gcmVjb2duaXplXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWwubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbFtpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxudmFyIHZlbmRvck5hbWVzID0gWydXZWJraXQnLCAnTW96JywgJ21zJ107XHJcbnZhciBlbXB0eVN0eWxlO1xyXG52YXIgbm9ybWFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChwcm9wKSB7XHJcbiAgICBlbXB0eVN0eWxlID0gZW1wdHlTdHlsZSB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKS5zdHlsZTtcclxuICAgIHByb3AgPSBjYW1lbGl6ZShwcm9wKTtcclxuICAgIGlmIChwcm9wICE9PSAnZmlsdGVyJyAmJiBwcm9wIGluIGVtcHR5U3R5bGUpIHtcclxuICAgICAgICByZXR1cm4gcHJvcDtcclxuICAgIH1cclxuICAgIHZhciBjYXBOYW1lID0gcHJvcC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3Auc2xpY2UoMSk7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvck5hbWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIG5hbWVfMSA9IHZlbmRvck5hbWVzW2ldICsgY2FwTmFtZTtcclxuICAgICAgICBpZiAobmFtZV8xIGluIGVtcHR5U3R5bGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5hbWVfMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pO1xyXG5mdW5jdGlvbiB1cGRhdGVTdHlsZShvbGRWbm9kZSwgdm5vZGUpIHtcclxuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcclxuICAgIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcclxuICAgIGlmIChpc1VuZGVmKGRhdGEuc3RhdGljU3R5bGUpICYmXHJcbiAgICAgICAgaXNVbmRlZihkYXRhLnN0eWxlKSAmJlxyXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5zdGF0aWNTdHlsZSkgJiZcclxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuc3R5bGUpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdmFyIGN1ciwgbmFtZTtcclxuICAgIHZhciBlbCA9IHZub2RlLmVsbTtcclxuICAgIHZhciBvbGRTdGF0aWNTdHlsZSA9IG9sZERhdGEuc3RhdGljU3R5bGU7XHJcbiAgICB2YXIgb2xkU3R5bGVCaW5kaW5nID0gb2xkRGF0YS5ub3JtYWxpemVkU3R5bGUgfHwgb2xkRGF0YS5zdHlsZSB8fCB7fTtcclxuICAgIC8vIGlmIHN0YXRpYyBzdHlsZSBleGlzdHMsIHN0eWxlYmluZGluZyBhbHJlYWR5IG1lcmdlZCBpbnRvIGl0IHdoZW4gZG9pbmcgbm9ybWFsaXplU3R5bGVEYXRhXHJcbiAgICB2YXIgb2xkU3R5bGUgPSBvbGRTdGF0aWNTdHlsZSB8fCBvbGRTdHlsZUJpbmRpbmc7XHJcbiAgICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcodm5vZGUuZGF0YS5zdHlsZSkgfHwge307XHJcbiAgICAvLyBzdG9yZSBub3JtYWxpemVkIHN0eWxlIHVuZGVyIGEgZGlmZmVyZW50IGtleSBmb3IgbmV4dCBkaWZmXHJcbiAgICAvLyBtYWtlIHN1cmUgdG8gY2xvbmUgaXQgaWYgaXQncyByZWFjdGl2ZSwgc2luY2UgdGhlIHVzZXIgbGlrZWx5IHdhbnRzXHJcbiAgICAvLyB0byBtdXRhdGUgaXQuXHJcbiAgICB2bm9kZS5kYXRhLm5vcm1hbGl6ZWRTdHlsZSA9IGlzRGVmKHN0eWxlLl9fb2JfXykgPyBleHRlbmQoe30sIHN0eWxlKSA6IHN0eWxlO1xyXG4gICAgdmFyIG5ld1N0eWxlID0gZ2V0U3R5bGUodm5vZGUsIHRydWUpO1xyXG4gICAgZm9yIChuYW1lIGluIG9sZFN0eWxlKSB7XHJcbiAgICAgICAgaWYgKGlzVW5kZWYobmV3U3R5bGVbbmFtZV0pKSB7XHJcbiAgICAgICAgICAgIHNldFByb3AoZWwsIG5hbWUsICcnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3IgKG5hbWUgaW4gbmV3U3R5bGUpIHtcclxuICAgICAgICBjdXIgPSBuZXdTdHlsZVtuYW1lXTtcclxuICAgICAgICBpZiAoY3VyICE9PSBvbGRTdHlsZVtuYW1lXSkge1xyXG4gICAgICAgICAgICAvLyBpZTkgc2V0dGluZyB0byBudWxsIGhhcyBubyBlZmZlY3QsIG11c3QgdXNlIGVtcHR5IHN0cmluZ1xyXG4gICAgICAgICAgICBzZXRQcm9wKGVsLCBuYW1lLCBjdXIgPT0gbnVsbCA/ICcnIDogY3VyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxudmFyIHN0eWxlID0ge1xyXG4gICAgY3JlYXRlOiB1cGRhdGVTdHlsZSxcclxuICAgIHVwZGF0ZTogdXBkYXRlU3R5bGVcclxufTtcblxudmFyIHdoaXRlc3BhY2VSRSA9IC9cXHMrLztcclxuLyoqXHJcbiAqIEFkZCBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxyXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcclxuICovXHJcbmZ1bmN0aW9uIGFkZENsYXNzKGVsLCBjbHMpIHtcclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcbiAgICBpZiAoZWwuY2xhc3NMaXN0KSB7XHJcbiAgICAgICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xyXG4gICAgICAgICAgICBjbHMuc3BsaXQod2hpdGVzcGFjZVJFKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QuYWRkKGMpOyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB2YXIgY3VyID0gXCIgXCIuY29uY2F0KGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJywgXCIgXCIpO1xyXG4gICAgICAgIGlmIChjdXIuaW5kZXhPZignICcgKyBjbHMgKyAnICcpIDwgMCkge1xyXG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKGN1ciArIGNscykudHJpbSgpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxyXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcclxuICovXHJcbmZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsLCBjbHMpIHtcclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcbiAgICBpZiAoZWwuY2xhc3NMaXN0KSB7XHJcbiAgICAgICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xyXG4gICAgICAgICAgICBjbHMuc3BsaXQod2hpdGVzcGFjZVJFKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7IHJldHVybiBlbC5jbGFzc0xpc3QucmVtb3ZlKGMpOyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFlbC5jbGFzc0xpc3QubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB2YXIgY3VyID0gXCIgXCIuY29uY2F0KGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJywgXCIgXCIpO1xyXG4gICAgICAgIHZhciB0YXIgPSAnICcgKyBjbHMgKyAnICc7XHJcbiAgICAgICAgd2hpbGUgKGN1ci5pbmRleE9mKHRhcikgPj0gMCkge1xyXG4gICAgICAgICAgICBjdXIgPSBjdXIucmVwbGFjZSh0YXIsICcgJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGN1ciA9IGN1ci50cmltKCk7XHJcbiAgICAgICAgaWYgKGN1cikge1xyXG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY3VyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb24oZGVmKSB7XHJcbiAgICBpZiAoIWRlZikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcbiAgICBpZiAodHlwZW9mIGRlZiA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICB2YXIgcmVzID0ge307XHJcbiAgICAgICAgaWYgKGRlZi5jc3MgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGV4dGVuZChyZXMsIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZi5uYW1lIHx8ICd2JykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBleHRlbmQocmVzLCBkZWYpO1xyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YgZGVmID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHJldHVybiBhdXRvQ3NzVHJhbnNpdGlvbihkZWYpO1xyXG4gICAgfVxyXG59XHJcbnZhciBhdXRvQ3NzVHJhbnNpdGlvbiA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBlbnRlckNsYXNzOiBcIlwiLmNvbmNhdChuYW1lLCBcIi1lbnRlclwiKSxcclxuICAgICAgICBlbnRlclRvQ2xhc3M6IFwiXCIuY29uY2F0KG5hbWUsIFwiLWVudGVyLXRvXCIpLFxyXG4gICAgICAgIGVudGVyQWN0aXZlQ2xhc3M6IFwiXCIuY29uY2F0KG5hbWUsIFwiLWVudGVyLWFjdGl2ZVwiKSxcclxuICAgICAgICBsZWF2ZUNsYXNzOiBcIlwiLmNvbmNhdChuYW1lLCBcIi1sZWF2ZVwiKSxcclxuICAgICAgICBsZWF2ZVRvQ2xhc3M6IFwiXCIuY29uY2F0KG5hbWUsIFwiLWxlYXZlLXRvXCIpLFxyXG4gICAgICAgIGxlYXZlQWN0aXZlQ2xhc3M6IFwiXCIuY29uY2F0KG5hbWUsIFwiLWxlYXZlLWFjdGl2ZVwiKVxyXG4gICAgfTtcclxufSk7XHJcbnZhciBoYXNUcmFuc2l0aW9uID0gaW5Ccm93c2VyICYmICFpc0lFOTtcclxudmFyIFRSQU5TSVRJT04gPSAndHJhbnNpdGlvbic7XHJcbnZhciBBTklNQVRJT04gPSAnYW5pbWF0aW9uJztcclxuLy8gVHJhbnNpdGlvbiBwcm9wZXJ0eS9ldmVudCBzbmlmZmluZ1xyXG52YXIgdHJhbnNpdGlvblByb3AgPSAndHJhbnNpdGlvbic7XHJcbnZhciB0cmFuc2l0aW9uRW5kRXZlbnQgPSAndHJhbnNpdGlvbmVuZCc7XHJcbnZhciBhbmltYXRpb25Qcm9wID0gJ2FuaW1hdGlvbic7XHJcbnZhciBhbmltYXRpb25FbmRFdmVudCA9ICdhbmltYXRpb25lbmQnO1xyXG5pZiAoaGFzVHJhbnNpdGlvbikge1xyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICBpZiAod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXHJcbiAgICAgICAgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdHJhbnNpdGlvblByb3AgPSAnV2Via2l0VHJhbnNpdGlvbic7XHJcbiAgICAgICAgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdFRyYW5zaXRpb25FbmQnO1xyXG4gICAgfVxyXG4gICAgaWYgKHdpbmRvdy5vbmFuaW1hdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXHJcbiAgICAgICAgd2luZG93Lm9ud2Via2l0YW5pbWF0aW9uZW5kICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBhbmltYXRpb25Qcm9wID0gJ1dlYmtpdEFuaW1hdGlvbic7XHJcbiAgICAgICAgYW5pbWF0aW9uRW5kRXZlbnQgPSAnd2Via2l0QW5pbWF0aW9uRW5kJztcclxuICAgIH1cclxufVxyXG4vLyBiaW5kaW5nIHRvIHdpbmRvdyBpcyBuZWNlc3NhcnkgdG8gbWFrZSBob3QgcmVsb2FkIHdvcmsgaW4gSUUgaW4gc3RyaWN0IG1vZGVcclxudmFyIHJhZiA9IGluQnJvd3NlclxyXG4gICAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lXHJcbiAgICAgICAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KVxyXG4gICAgICAgIDogc2V0VGltZW91dFxyXG4gICAgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBmdW5jdGlvbiAoLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gZm4pIHsgcmV0dXJuIGZuKCk7IH07XHJcbmZ1bmN0aW9uIG5leHRGcmFtZShmbikge1xyXG4gICAgcmFmKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICAgICAgcmFmKGZuKTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgY2xzKSB7XHJcbiAgICB2YXIgdHJhbnNpdGlvbkNsYXNzZXMgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXMgfHwgKGVsLl90cmFuc2l0aW9uQ2xhc3NlcyA9IFtdKTtcclxuICAgIGlmICh0cmFuc2l0aW9uQ2xhc3Nlcy5pbmRleE9mKGNscykgPCAwKSB7XHJcbiAgICAgICAgdHJhbnNpdGlvbkNsYXNzZXMucHVzaChjbHMpO1xyXG4gICAgICAgIGFkZENsYXNzKGVsLCBjbHMpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgY2xzKSB7XHJcbiAgICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XHJcbiAgICAgICAgcmVtb3ZlJDIoZWwuX3RyYW5zaXRpb25DbGFzc2VzLCBjbHMpO1xyXG4gICAgfVxyXG4gICAgcmVtb3ZlQ2xhc3MoZWwsIGNscyk7XHJcbn1cclxuZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzKGVsLCBleHBlY3RlZFR5cGUsIGNiKSB7XHJcbiAgICB2YXIgX2EgPSBnZXRUcmFuc2l0aW9uSW5mbyhlbCwgZXhwZWN0ZWRUeXBlKSwgdHlwZSA9IF9hLnR5cGUsIHRpbWVvdXQgPSBfYS50aW1lb3V0LCBwcm9wQ291bnQgPSBfYS5wcm9wQ291bnQ7XHJcbiAgICBpZiAoIXR5cGUpXHJcbiAgICAgICAgcmV0dXJuIGNiKCk7XHJcbiAgICB2YXIgZXZlbnQgPSB0eXBlID09PSBUUkFOU0lUSU9OID8gdHJhbnNpdGlvbkVuZEV2ZW50IDogYW5pbWF0aW9uRW5kRXZlbnQ7XHJcbiAgICB2YXIgZW5kZWQgPSAwO1xyXG4gICAgdmFyIGVuZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBvbkVuZCk7XHJcbiAgICAgICAgY2IoKTtcclxuICAgIH07XHJcbiAgICB2YXIgb25FbmQgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGlmIChlLnRhcmdldCA9PT0gZWwpIHtcclxuICAgICAgICAgICAgaWYgKCsrZW5kZWQgPj0gcHJvcENvdW50KSB7XHJcbiAgICAgICAgICAgICAgICBlbmQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoZW5kZWQgPCBwcm9wQ291bnQpIHtcclxuICAgICAgICAgICAgZW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgdGltZW91dCArIDEpO1xyXG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xyXG59XHJcbnZhciB0cmFuc2Zvcm1SRSA9IC9cXGIodHJhbnNmb3JtfGFsbCkoLHwkKS87XHJcbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpIHtcclxuICAgIHZhciBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XHJcbiAgICAvLyBKU0RPTSBtYXkgcmV0dXJuIHVuZGVmaW5lZCBmb3IgdHJhbnNpdGlvbiBwcm9wZXJ0aWVzXHJcbiAgICB2YXIgdHJhbnNpdGlvbkRlbGF5cyA9IChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRGVsYXknXSB8fCAnJykuc3BsaXQoJywgJyk7XHJcbiAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9ucyA9IChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRHVyYXRpb24nXSB8fCAnJykuc3BsaXQoJywgJyk7XHJcbiAgICB2YXIgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25EZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpO1xyXG4gICAgdmFyIGFuaW1hdGlvbkRlbGF5cyA9IChzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEZWxheSddIHx8ICcnKS5zcGxpdCgnLCAnKTtcclxuICAgIHZhciBhbmltYXRpb25EdXJhdGlvbnMgPSAoc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRHVyYXRpb24nXSB8fCAnJykuc3BsaXQoJywgJyk7XHJcbiAgICB2YXIgYW5pbWF0aW9uVGltZW91dCA9IGdldFRpbWVvdXQoYW5pbWF0aW9uRGVsYXlzLCBhbmltYXRpb25EdXJhdGlvbnMpO1xyXG4gICAgdmFyIHR5cGU7XHJcbiAgICB2YXIgdGltZW91dCA9IDA7XHJcbiAgICB2YXIgcHJvcENvdW50ID0gMDtcclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgaWYgKGV4cGVjdGVkVHlwZSA9PT0gVFJBTlNJVElPTikge1xyXG4gICAgICAgIGlmICh0cmFuc2l0aW9uVGltZW91dCA+IDApIHtcclxuICAgICAgICAgICAgdHlwZSA9IFRSQU5TSVRJT047XHJcbiAgICAgICAgICAgIHRpbWVvdXQgPSB0cmFuc2l0aW9uVGltZW91dDtcclxuICAgICAgICAgICAgcHJvcENvdW50ID0gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSBBTklNQVRJT04pIHtcclxuICAgICAgICBpZiAoYW5pbWF0aW9uVGltZW91dCA+IDApIHtcclxuICAgICAgICAgICAgdHlwZSA9IEFOSU1BVElPTjtcclxuICAgICAgICAgICAgdGltZW91dCA9IGFuaW1hdGlvblRpbWVvdXQ7XHJcbiAgICAgICAgICAgIHByb3BDb3VudCA9IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGltZW91dCA9IE1hdGgubWF4KHRyYW5zaXRpb25UaW1lb3V0LCBhbmltYXRpb25UaW1lb3V0KTtcclxuICAgICAgICB0eXBlID1cclxuICAgICAgICAgICAgdGltZW91dCA+IDBcclxuICAgICAgICAgICAgICAgID8gdHJhbnNpdGlvblRpbWVvdXQgPiBhbmltYXRpb25UaW1lb3V0XHJcbiAgICAgICAgICAgICAgICAgICAgPyBUUkFOU0lUSU9OXHJcbiAgICAgICAgICAgICAgICAgICAgOiBBTklNQVRJT05cclxuICAgICAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICBwcm9wQ291bnQgPSB0eXBlXHJcbiAgICAgICAgICAgID8gdHlwZSA9PT0gVFJBTlNJVElPTlxyXG4gICAgICAgICAgICAgICAgPyB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aFxyXG4gICAgICAgICAgICAgICAgOiBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoXHJcbiAgICAgICAgICAgIDogMDtcclxuICAgIH1cclxuICAgIHZhciBoYXNUcmFuc2Zvcm0gPSB0eXBlID09PSBUUkFOU0lUSU9OICYmIHRyYW5zZm9ybVJFLnRlc3Qoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ1Byb3BlcnR5J10pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiB0eXBlLFxyXG4gICAgICAgIHRpbWVvdXQ6IHRpbWVvdXQsXHJcbiAgICAgICAgcHJvcENvdW50OiBwcm9wQ291bnQsXHJcbiAgICAgICAgaGFzVHJhbnNmb3JtOiBoYXNUcmFuc2Zvcm1cclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gZ2V0VGltZW91dChkZWxheXMsIGR1cmF0aW9ucykge1xyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgIHdoaWxlIChkZWxheXMubGVuZ3RoIDwgZHVyYXRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgIGRlbGF5cyA9IGRlbGF5cy5jb25jYXQoZGVsYXlzKTtcclxuICAgIH1cclxuICAgIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBkdXJhdGlvbnMubWFwKGZ1bmN0aW9uIChkLCBpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRvTXMoZCkgKyB0b01zKGRlbGF5c1tpXSk7XHJcbiAgICB9KSk7XHJcbn1cclxuLy8gT2xkIHZlcnNpb25zIG9mIENocm9taXVtIChiZWxvdyA2MS4wLjMxNjMuMTAwKSBmb3JtYXRzIGZsb2F0aW5nIHBvaW50ZXIgbnVtYmVyc1xyXG4vLyBpbiBhIGxvY2FsZS1kZXBlbmRlbnQgd2F5LCB1c2luZyBhIGNvbW1hIGluc3RlYWQgb2YgYSBkb3QuXHJcbi8vIElmIGNvbW1hIGlzIG5vdCByZXBsYWNlZCB3aXRoIGEgZG90LCB0aGUgaW5wdXQgd2lsbCBiZSByb3VuZGVkIGRvd24gKGkuZS4gYWN0aW5nXHJcbi8vIGFzIGEgZmxvb3IgZnVuY3Rpb24pIGNhdXNpbmcgdW5leHBlY3RlZCBiZWhhdmlvcnNcclxuZnVuY3Rpb24gdG9NcyhzKSB7XHJcbiAgICByZXR1cm4gTnVtYmVyKHMuc2xpY2UoMCwgLTEpLnJlcGxhY2UoJywnLCAnLicpKSAqIDEwMDA7XHJcbn1cblxuZnVuY3Rpb24gZW50ZXIodm5vZGUsIHRvZ2dsZURpc3BsYXkpIHtcclxuICAgIHZhciBlbCA9IHZub2RlLmVsbTtcclxuICAgIC8vIGNhbGwgbGVhdmUgY2FsbGJhY2sgbm93XHJcbiAgICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XHJcbiAgICAgICAgZWwuX2xlYXZlQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcclxuICAgICAgICBlbC5fbGVhdmVDYigpO1xyXG4gICAgfVxyXG4gICAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xyXG4gICAgaWYgKGlzVW5kZWYoZGF0YSkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgIGlmIChpc0RlZihlbC5fZW50ZXJDYikgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgY3NzID0gZGF0YS5jc3MsIHR5cGUgPSBkYXRhLnR5cGUsIGVudGVyQ2xhc3MgPSBkYXRhLmVudGVyQ2xhc3MsIGVudGVyVG9DbGFzcyA9IGRhdGEuZW50ZXJUb0NsYXNzLCBlbnRlckFjdGl2ZUNsYXNzID0gZGF0YS5lbnRlckFjdGl2ZUNsYXNzLCBhcHBlYXJDbGFzcyA9IGRhdGEuYXBwZWFyQ2xhc3MsIGFwcGVhclRvQ2xhc3MgPSBkYXRhLmFwcGVhclRvQ2xhc3MsIGFwcGVhckFjdGl2ZUNsYXNzID0gZGF0YS5hcHBlYXJBY3RpdmVDbGFzcywgYmVmb3JlRW50ZXIgPSBkYXRhLmJlZm9yZUVudGVyLCBlbnRlciA9IGRhdGEuZW50ZXIsIGFmdGVyRW50ZXIgPSBkYXRhLmFmdGVyRW50ZXIsIGVudGVyQ2FuY2VsbGVkID0gZGF0YS5lbnRlckNhbmNlbGxlZCwgYmVmb3JlQXBwZWFyID0gZGF0YS5iZWZvcmVBcHBlYXIsIGFwcGVhciA9IGRhdGEuYXBwZWFyLCBhZnRlckFwcGVhciA9IGRhdGEuYWZ0ZXJBcHBlYXIsIGFwcGVhckNhbmNlbGxlZCA9IGRhdGEuYXBwZWFyQ2FuY2VsbGVkLCBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XHJcbiAgICAvLyBhY3RpdmVJbnN0YW5jZSB3aWxsIGFsd2F5cyBiZSB0aGUgPHRyYW5zaXRpb24+IGNvbXBvbmVudCBtYW5hZ2luZyB0aGlzXHJcbiAgICAvLyB0cmFuc2l0aW9uLiBPbmUgZWRnZSBjYXNlIHRvIGNoZWNrIGlzIHdoZW4gdGhlIDx0cmFuc2l0aW9uPiBpcyBwbGFjZWRcclxuICAgIC8vIGFzIHRoZSByb290IG5vZGUgb2YgYSBjaGlsZCBjb21wb25lbnQuIEluIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIGNoZWNrXHJcbiAgICAvLyA8dHJhbnNpdGlvbj4ncyBwYXJlbnQgZm9yIGFwcGVhciBjaGVjay5cclxuICAgIHZhciBjb250ZXh0ID0gYWN0aXZlSW5zdGFuY2U7XHJcbiAgICB2YXIgdHJhbnNpdGlvbk5vZGUgPSBhY3RpdmVJbnN0YW5jZS4kdm5vZGU7XHJcbiAgICB3aGlsZSAodHJhbnNpdGlvbk5vZGUgJiYgdHJhbnNpdGlvbk5vZGUucGFyZW50KSB7XHJcbiAgICAgICAgY29udGV4dCA9IHRyYW5zaXRpb25Ob2RlLmNvbnRleHQ7XHJcbiAgICAgICAgdHJhbnNpdGlvbk5vZGUgPSB0cmFuc2l0aW9uTm9kZS5wYXJlbnQ7XHJcbiAgICB9XHJcbiAgICB2YXIgaXNBcHBlYXIgPSAhY29udGV4dC5faXNNb3VudGVkIHx8ICF2bm9kZS5pc1Jvb3RJbnNlcnQ7XHJcbiAgICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdmFyIHN0YXJ0Q2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJDbGFzcyA/IGFwcGVhckNsYXNzIDogZW50ZXJDbGFzcztcclxuICAgIHZhciBhY3RpdmVDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckFjdGl2ZUNsYXNzID8gYXBwZWFyQWN0aXZlQ2xhc3MgOiBlbnRlckFjdGl2ZUNsYXNzO1xyXG4gICAgdmFyIHRvQ2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJUb0NsYXNzID8gYXBwZWFyVG9DbGFzcyA6IGVudGVyVG9DbGFzcztcclxuICAgIHZhciBiZWZvcmVFbnRlckhvb2sgPSBpc0FwcGVhciA/IGJlZm9yZUFwcGVhciB8fCBiZWZvcmVFbnRlciA6IGJlZm9yZUVudGVyO1xyXG4gICAgdmFyIGVudGVySG9vayA9IGlzQXBwZWFyID8gKGlzRnVuY3Rpb24oYXBwZWFyKSA/IGFwcGVhciA6IGVudGVyKSA6IGVudGVyO1xyXG4gICAgdmFyIGFmdGVyRW50ZXJIb29rID0gaXNBcHBlYXIgPyBhZnRlckFwcGVhciB8fCBhZnRlckVudGVyIDogYWZ0ZXJFbnRlcjtcclxuICAgIHZhciBlbnRlckNhbmNlbGxlZEhvb2sgPSBpc0FwcGVhclxyXG4gICAgICAgID8gYXBwZWFyQ2FuY2VsbGVkIHx8IGVudGVyQ2FuY2VsbGVkXHJcbiAgICAgICAgOiBlbnRlckNhbmNlbGxlZDtcclxuICAgIHZhciBleHBsaWNpdEVudGVyRHVyYXRpb24gPSB0b051bWJlcihpc09iamVjdChkdXJhdGlvbikgPyBkdXJhdGlvbi5lbnRlciA6IGR1cmF0aW9uKTtcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiAhPSBudWxsKSB7XHJcbiAgICAgICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24sICdlbnRlcicsIHZub2RlKTtcclxuICAgIH1cclxuICAgIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XHJcbiAgICB2YXIgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgoZW50ZXJIb29rKTtcclxuICAgIHZhciBjYiA9IChlbC5fZW50ZXJDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChleHBlY3RzQ1NTKSB7XHJcbiAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XHJcbiAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICAgICAgaWYgKGNiLmNhbmNlbGxlZCkge1xyXG4gICAgICAgICAgICBpZiAoZXhwZWN0c0NTUykge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbnRlckNhbmNlbGxlZEhvb2sgJiYgZW50ZXJDYW5jZWxsZWRIb29rKGVsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGFmdGVyRW50ZXJIb29rICYmIGFmdGVyRW50ZXJIb29rKGVsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWwuX2VudGVyQ2IgPSBudWxsO1xyXG4gICAgfSkpO1xyXG4gICAgaWYgKCF2bm9kZS5kYXRhLnNob3cpIHtcclxuICAgICAgICAvLyByZW1vdmUgcGVuZGluZyBsZWF2ZSBlbGVtZW50IG9uIGVudGVyIGJ5IGluamVjdGluZyBhbiBpbnNlcnQgaG9va1xyXG4gICAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgdmFyIHBlbmRpbmdOb2RlID0gcGFyZW50ICYmIHBhcmVudC5fcGVuZGluZyAmJiBwYXJlbnQuX3BlbmRpbmdbdm5vZGUua2V5XTtcclxuICAgICAgICAgICAgaWYgKHBlbmRpbmdOb2RlICYmXHJcbiAgICAgICAgICAgICAgICBwZW5kaW5nTm9kZS50YWcgPT09IHZub2RlLnRhZyAmJlxyXG4gICAgICAgICAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiKSB7XHJcbiAgICAgICAgICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2IoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvLyBzdGFydCBlbnRlciB0cmFuc2l0aW9uXHJcbiAgICBiZWZvcmVFbnRlckhvb2sgJiYgYmVmb3JlRW50ZXJIb29rKGVsKTtcclxuICAgIGlmIChleHBlY3RzQ1NTKSB7XHJcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcclxuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcclxuICAgICAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xyXG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICAgICAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XHJcbiAgICAgICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0RW50ZXJEdXJhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmICh2bm9kZS5kYXRhLnNob3cpIHtcclxuICAgICAgICB0b2dnbGVEaXNwbGF5ICYmIHRvZ2dsZURpc3BsYXkoKTtcclxuICAgICAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XHJcbiAgICB9XHJcbiAgICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcclxuICAgICAgICBjYigpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGxlYXZlKHZub2RlLCBybSkge1xyXG4gICAgdmFyIGVsID0gdm5vZGUuZWxtO1xyXG4gICAgLy8gY2FsbCBlbnRlciBjYWxsYmFjayBub3dcclxuICAgIGlmIChpc0RlZihlbC5fZW50ZXJDYikpIHtcclxuICAgICAgICBlbC5fZW50ZXJDYi5jYW5jZWxsZWQgPSB0cnVlO1xyXG4gICAgICAgIGVsLl9lbnRlckNiKCk7XHJcbiAgICB9XHJcbiAgICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XHJcbiAgICBpZiAoaXNVbmRlZihkYXRhKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xyXG4gICAgICAgIHJldHVybiBybSgpO1xyXG4gICAgfVxyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdmFyIGNzcyA9IGRhdGEuY3NzLCB0eXBlID0gZGF0YS50eXBlLCBsZWF2ZUNsYXNzID0gZGF0YS5sZWF2ZUNsYXNzLCBsZWF2ZVRvQ2xhc3MgPSBkYXRhLmxlYXZlVG9DbGFzcywgbGVhdmVBY3RpdmVDbGFzcyA9IGRhdGEubGVhdmVBY3RpdmVDbGFzcywgYmVmb3JlTGVhdmUgPSBkYXRhLmJlZm9yZUxlYXZlLCBsZWF2ZSA9IGRhdGEubGVhdmUsIGFmdGVyTGVhdmUgPSBkYXRhLmFmdGVyTGVhdmUsIGxlYXZlQ2FuY2VsbGVkID0gZGF0YS5sZWF2ZUNhbmNlbGxlZCwgZGVsYXlMZWF2ZSA9IGRhdGEuZGVsYXlMZWF2ZSwgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xyXG4gICAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcclxuICAgIHZhciB1c2VyV2FudHNDb250cm9sID0gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChsZWF2ZSk7XHJcbiAgICB2YXIgZXhwbGljaXRMZWF2ZUR1cmF0aW9uID0gdG9OdW1iZXIoaXNPYmplY3QoZHVyYXRpb24pID8gZHVyYXRpb24ubGVhdmUgOiBkdXJhdGlvbik7XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc0RlZihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XHJcbiAgICAgICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24sICdsZWF2ZScsIHZub2RlKTtcclxuICAgIH1cclxuICAgIHZhciBjYiA9IChlbC5fbGVhdmVDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChlbC5wYXJlbnROb2RlICYmIGVsLnBhcmVudE5vZGUuX3BlbmRpbmcpIHtcclxuICAgICAgICAgICAgZWwucGFyZW50Tm9kZS5fcGVuZGluZ1t2bm9kZS5rZXldID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcclxuICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xyXG4gICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICAgICAgaWYgKGNiLmNhbmNlbGxlZCkge1xyXG4gICAgICAgICAgICBpZiAoZXhwZWN0c0NTUykge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZWF2ZUNhbmNlbGxlZCAmJiBsZWF2ZUNhbmNlbGxlZChlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBybSgpO1xyXG4gICAgICAgICAgICBhZnRlckxlYXZlICYmIGFmdGVyTGVhdmUoZWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbC5fbGVhdmVDYiA9IG51bGw7XHJcbiAgICB9KSk7XHJcbiAgICBpZiAoZGVsYXlMZWF2ZSkge1xyXG4gICAgICAgIGRlbGF5TGVhdmUocGVyZm9ybUxlYXZlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHBlcmZvcm1MZWF2ZSgpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcGVyZm9ybUxlYXZlKCkge1xyXG4gICAgICAgIC8vIHRoZSBkZWxheWVkIGxlYXZlIG1heSBoYXZlIGFscmVhZHkgYmVlbiBjYW5jZWxsZWRcclxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICAgICAgaWYgKGNiLmNhbmNlbGxlZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHJlY29yZCBsZWF2aW5nIGVsZW1lbnRcclxuICAgICAgICBpZiAoIXZub2RlLmRhdGEuc2hvdyAmJiBlbC5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgIChlbC5wYXJlbnROb2RlLl9wZW5kaW5nIHx8IChlbC5wYXJlbnROb2RlLl9wZW5kaW5nID0ge30pKVt2bm9kZS5rZXldID1cclxuICAgICAgICAgICAgICAgIHZub2RlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBiZWZvcmVMZWF2ZSAmJiBiZWZvcmVMZWF2ZShlbCk7XHJcbiAgICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcclxuICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcclxuICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcclxuICAgICAgICAgICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICAgICAgICAgICAgICBpZiAoIWNiLmNhbmNlbGxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdExlYXZlRHVyYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZWF2ZSAmJiBsZWF2ZShlbCwgY2IpO1xyXG4gICAgICAgIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xyXG4gICAgICAgICAgICBjYigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vLyBvbmx5IHVzZWQgaW4gZGV2IG1vZGVcclxuZnVuY3Rpb24gY2hlY2tEdXJhdGlvbih2YWwsIG5hbWUsIHZub2RlKSB7XHJcbiAgICBpZiAodHlwZW9mIHZhbCAhPT0gJ251bWJlcicpIHtcclxuICAgICAgICB3YXJuKFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiLmNvbmNhdChuYW1lLCBcIiBkdXJhdGlvbiBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBcIikgK1xyXG4gICAgICAgICAgICBcImdvdCBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkodmFsKSwgXCIuXCIpLCB2bm9kZS5jb250ZXh0KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzTmFOKHZhbCkpIHtcclxuICAgICAgICB3YXJuKFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiLmNvbmNhdChuYW1lLCBcIiBkdXJhdGlvbiBpcyBOYU4gLSBcIikgK1xyXG4gICAgICAgICAgICAndGhlIGR1cmF0aW9uIGV4cHJlc3Npb24gbWlnaHQgYmUgaW5jb3JyZWN0LicsIHZub2RlLmNvbnRleHQpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGlzVmFsaWREdXJhdGlvbih2YWwpIHtcclxuICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsKTtcclxufVxyXG4vKipcclxuICogTm9ybWFsaXplIGEgdHJhbnNpdGlvbiBob29rJ3MgYXJndW1lbnQgbGVuZ3RoLiBUaGUgaG9vayBtYXkgYmU6XHJcbiAqIC0gYSBtZXJnZWQgaG9vayAoaW52b2tlcikgd2l0aCB0aGUgb3JpZ2luYWwgaW4gLmZuc1xyXG4gKiAtIGEgd3JhcHBlZCBjb21wb25lbnQgbWV0aG9kIChjaGVjayAuX2xlbmd0aClcclxuICogLSBhIHBsYWluIGZ1bmN0aW9uICgubGVuZ3RoKVxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChmbikge1xyXG4gICAgaWYgKGlzVW5kZWYoZm4pKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgdmFyIGludm9rZXJGbnMgPSBmbi5mbnM7XHJcbiAgICBpZiAoaXNEZWYoaW52b2tlckZucykpIHtcclxuICAgICAgICAvLyBpbnZva2VyXHJcbiAgICAgICAgcmV0dXJuIGdldEhvb2tBcmd1bWVudHNMZW5ndGgoQXJyYXkuaXNBcnJheShpbnZva2VyRm5zKSA/IGludm9rZXJGbnNbMF0gOiBpbnZva2VyRm5zKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcclxuICAgICAgICByZXR1cm4gKGZuLl9sZW5ndGggfHwgZm4ubGVuZ3RoKSA+IDE7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gX2VudGVyKF8sIHZub2RlKSB7XHJcbiAgICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XHJcbiAgICAgICAgZW50ZXIodm5vZGUpO1xyXG4gICAgfVxyXG59XHJcbnZhciB0cmFuc2l0aW9uID0gaW5Ccm93c2VyXHJcbiAgICA/IHtcclxuICAgICAgICBjcmVhdGU6IF9lbnRlcixcclxuICAgICAgICBhY3RpdmF0ZTogX2VudGVyLFxyXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gKHZub2RlLCBybSkge1xyXG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xyXG4gICAgICAgICAgICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICAgICAgICAgICAgICBsZWF2ZSh2bm9kZSwgcm0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcm0oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIDoge307XG5cbnZhciBwbGF0Zm9ybU1vZHVsZXMgPSBbYXR0cnMsIGtsYXNzLCBldmVudHMsIGRvbVByb3BzLCBzdHlsZSwgdHJhbnNpdGlvbl07XG5cbi8vIHRoZSBkaXJlY3RpdmUgbW9kdWxlIHNob3VsZCBiZSBhcHBsaWVkIGxhc3QsIGFmdGVyIGFsbFxyXG4vLyBidWlsdC1pbiBtb2R1bGVzIGhhdmUgYmVlbiBhcHBsaWVkLlxyXG52YXIgbW9kdWxlcyA9IHBsYXRmb3JtTW9kdWxlcy5jb25jYXQoYmFzZU1vZHVsZXMpO1xyXG52YXIgcGF0Y2ggPSBjcmVhdGVQYXRjaEZ1bmN0aW9uKHsgbm9kZU9wczogbm9kZU9wcywgbW9kdWxlczogbW9kdWxlcyB9KTtcblxuLyoqXHJcbiAqIE5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBsaWtlIGF0dGFjaGluZ1xyXG4gKiBwcm9wZXJ0aWVzIHRvIEVsZW1lbnRzLlxyXG4gKi9cclxuLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbmlmIChpc0lFOSkge1xyXG4gICAgLy8gaHR0cDovL3d3dy5tYXR0czQxMS5jb20vcG9zdC9pbnRlcm5ldC1leHBsb3Jlci05LW9uaW5wdXQvXHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcclxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICAgICAgaWYgKGVsICYmIGVsLnZtb2RlbCkge1xyXG4gICAgICAgICAgICB0cmlnZ2VyKGVsLCAnaW5wdXQnKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG52YXIgZGlyZWN0aXZlID0ge1xyXG4gICAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIChlbCwgYmluZGluZywgdm5vZGUsIG9sZFZub2RlKSB7XHJcbiAgICAgICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcclxuICAgICAgICAgICAgLy8gIzY5MDNcclxuICAgICAgICAgICAgaWYgKG9sZFZub2RlLmVsbSAmJiAhb2xkVm5vZGUuZWxtLl92T3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLmNvbXBvbmVudFVwZGF0ZWQoZWwsIGJpbmRpbmcsIHZub2RlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsLl92T3B0aW9ucyA9IFtdLm1hcC5jYWxsKGVsLm9wdGlvbnMsIGdldFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodm5vZGUudGFnID09PSAndGV4dGFyZWEnIHx8IGlzVGV4dElucHV0VHlwZShlbC50eXBlKSkge1xyXG4gICAgICAgICAgICBlbC5fdk1vZGlmaWVycyA9IGJpbmRpbmcubW9kaWZpZXJzO1xyXG4gICAgICAgICAgICBpZiAoIWJpbmRpbmcubW9kaWZpZXJzLmxhenkpIHtcclxuICAgICAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uc3RhcnQnLCBvbkNvbXBvc2l0aW9uU3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCBvbkNvbXBvc2l0aW9uRW5kKTtcclxuICAgICAgICAgICAgICAgIC8vIFNhZmFyaSA8IDEwLjIgJiBVSVdlYlZpZXcgZG9lc24ndCBmaXJlIGNvbXBvc2l0aW9uZW5kIHdoZW5cclxuICAgICAgICAgICAgICAgIC8vIHN3aXRjaGluZyBmb2N1cyBiZWZvcmUgY29uZmlybWluZyBjb21wb3NpdGlvbiBjaG9pY2VcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWVcclxuICAgICAgICAgICAgICAgIC8vIGZpcmVzIFwiY2hhbmdlXCIgaW5zdGVhZCBvZiBcImlucHV0XCIgb24gYXV0b2NvbXBsZXRlLlxyXG4gICAgICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25Db21wb3NpdGlvbkVuZCk7XHJcbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICAgICAgICAgIGlmIChpc0lFOSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLnZtb2RlbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgY29tcG9uZW50VXBkYXRlZDogZnVuY3Rpb24gKGVsLCBiaW5kaW5nLCB2bm9kZSkge1xyXG4gICAgICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XHJcbiAgICAgICAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcclxuICAgICAgICAgICAgLy8gaW4gY2FzZSB0aGUgb3B0aW9ucyByZW5kZXJlZCBieSB2LWZvciBoYXZlIGNoYW5nZWQsXHJcbiAgICAgICAgICAgIC8vIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgdmFsdWUgaXMgb3V0LW9mLXN5bmMgd2l0aCB0aGUgcmVuZGVyZWQgb3B0aW9ucy5cclxuICAgICAgICAgICAgLy8gZGV0ZWN0IHN1Y2ggY2FzZXMgYW5kIGZpbHRlciBvdXQgdmFsdWVzIHRoYXQgbm8gbG9uZ2VyIGhhcyBhIG1hdGNoaW5nXHJcbiAgICAgICAgICAgIC8vIG9wdGlvbiBpbiB0aGUgRE9NLlxyXG4gICAgICAgICAgICB2YXIgcHJldk9wdGlvbnNfMSA9IGVsLl92T3B0aW9ucztcclxuICAgICAgICAgICAgdmFyIGN1ck9wdGlvbnNfMSA9IChlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSkpO1xyXG4gICAgICAgICAgICBpZiAoY3VyT3B0aW9uc18xLnNvbWUoZnVuY3Rpb24gKG8sIGkpIHsgcmV0dXJuICFsb29zZUVxdWFsKG8sIHByZXZPcHRpb25zXzFbaV0pOyB9KSkge1xyXG4gICAgICAgICAgICAgICAgLy8gdHJpZ2dlciBjaGFuZ2UgZXZlbnQgaWZcclxuICAgICAgICAgICAgICAgIC8vIG5vIG1hdGNoaW5nIG9wdGlvbiBmb3VuZCBmb3IgYXQgbGVhc3Qgb25lIHZhbHVlXHJcbiAgICAgICAgICAgICAgICB2YXIgbmVlZFJlc2V0ID0gZWwubXVsdGlwbGVcclxuICAgICAgICAgICAgICAgICAgICA/IGJpbmRpbmcudmFsdWUuc29tZShmdW5jdGlvbiAodikgeyByZXR1cm4gaGFzTm9NYXRjaGluZ09wdGlvbih2LCBjdXJPcHRpb25zXzEpOyB9KVxyXG4gICAgICAgICAgICAgICAgICAgIDogYmluZGluZy52YWx1ZSAhPT0gYmluZGluZy5vbGRWYWx1ZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNOb01hdGNoaW5nT3B0aW9uKGJpbmRpbmcudmFsdWUsIGN1ck9wdGlvbnNfMSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobmVlZFJlc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcihlbCwgJ2NoYW5nZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5mdW5jdGlvbiBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pIHtcclxuICAgIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgaWYgKGlzSUUgfHwgaXNFZGdlKSB7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcclxuICAgICAgICB9LCAwKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBhY3R1YWxseVNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bSkge1xyXG4gICAgdmFyIHZhbHVlID0gYmluZGluZy52YWx1ZTtcclxuICAgIHZhciBpc011bHRpcGxlID0gZWwubXVsdGlwbGU7XHJcbiAgICBpZiAoaXNNdWx0aXBsZSAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXHJcbiAgICAgICAgICAgIHdhcm4oXCI8c2VsZWN0IG11bHRpcGxlIHYtbW9kZWw9XFxcIlwiLmNvbmNhdChiaW5kaW5nLmV4cHJlc3Npb24sIFwiXFxcIj4gXCIpICtcclxuICAgICAgICAgICAgICAgIFwiZXhwZWN0cyBhbiBBcnJheSB2YWx1ZSBmb3IgaXRzIGJpbmRpbmcsIGJ1dCBnb3QgXCIuY29uY2F0KE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdcclxuICAgICAgICAgICAgICAgICAgICAuY2FsbCh2YWx1ZSlcclxuICAgICAgICAgICAgICAgICAgICAuc2xpY2UoOCwgLTEpKSwgdm0pO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHZhciBzZWxlY3RlZCwgb3B0aW9uO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBlbC5vcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgIG9wdGlvbiA9IGVsLm9wdGlvbnNbaV07XHJcbiAgICAgICAgaWYgKGlzTXVsdGlwbGUpIHtcclxuICAgICAgICAgICAgc2VsZWN0ZWQgPSBsb29zZUluZGV4T2YodmFsdWUsIGdldFZhbHVlKG9wdGlvbikpID4gLTE7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQgIT09IHNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBzZWxlY3RlZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGxvb3NlRXF1YWwoZ2V0VmFsdWUob3B0aW9uKSwgdmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWwuc2VsZWN0ZWRJbmRleCAhPT0gaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSBpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFpc011bHRpcGxlKSB7XHJcbiAgICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IC0xO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGhhc05vTWF0Y2hpbmdPcHRpb24odmFsdWUsIG9wdGlvbnMpIHtcclxuICAgIHJldHVybiBvcHRpb25zLmV2ZXJ5KGZ1bmN0aW9uIChvKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCB2YWx1ZSk7IH0pO1xyXG59XHJcbmZ1bmN0aW9uIGdldFZhbHVlKG9wdGlvbikge1xyXG4gICAgcmV0dXJuICdfdmFsdWUnIGluIG9wdGlvbiA/IG9wdGlvbi5fdmFsdWUgOiBvcHRpb24udmFsdWU7XHJcbn1cclxuZnVuY3Rpb24gb25Db21wb3NpdGlvblN0YXJ0KGUpIHtcclxuICAgIGUudGFyZ2V0LmNvbXBvc2luZyA9IHRydWU7XHJcbn1cclxuZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZChlKSB7XHJcbiAgICAvLyBwcmV2ZW50IHRyaWdnZXJpbmcgYW4gaW5wdXQgZXZlbnQgZm9yIG5vIHJlYXNvblxyXG4gICAgaWYgKCFlLnRhcmdldC5jb21wb3NpbmcpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgZS50YXJnZXQuY29tcG9zaW5nID0gZmFsc2U7XHJcbiAgICB0cmlnZ2VyKGUudGFyZ2V0LCAnaW5wdXQnKTtcclxufVxyXG5mdW5jdGlvbiB0cmlnZ2VyKGVsLCB0eXBlKSB7XHJcbiAgICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdIVE1MRXZlbnRzJyk7XHJcbiAgICBlLmluaXRFdmVudCh0eXBlLCB0cnVlLCB0cnVlKTtcclxuICAgIGVsLmRpc3BhdGNoRXZlbnQoZSk7XHJcbn1cblxuLy8gcmVjdXJzaXZlbHkgc2VhcmNoIGZvciBwb3NzaWJsZSB0cmFuc2l0aW9uIGRlZmluZWQgaW5zaWRlIHRoZSBjb21wb25lbnQgcm9vdFxyXG5mdW5jdGlvbiBsb2NhdGVOb2RlKHZub2RlKSB7XHJcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICByZXR1cm4gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiYgKCF2bm9kZS5kYXRhIHx8ICF2bm9kZS5kYXRhLnRyYW5zaXRpb24pXHJcbiAgICAgICAgPyBsb2NhdGVOb2RlKHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSlcclxuICAgICAgICA6IHZub2RlO1xyXG59XHJcbnZhciBzaG93ID0ge1xyXG4gICAgYmluZDogZnVuY3Rpb24gKGVsLCBfYSwgdm5vZGUpIHtcclxuICAgICAgICB2YXIgdmFsdWUgPSBfYS52YWx1ZTtcclxuICAgICAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xyXG4gICAgICAgIHZhciB0cmFuc2l0aW9uID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XHJcbiAgICAgICAgdmFyIG9yaWdpbmFsRGlzcGxheSA9IChlbC5fX3ZPcmlnaW5hbERpc3BsYXkgPVxyXG4gICAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgPyAnJyA6IGVsLnN0eWxlLmRpc3BsYXkpO1xyXG4gICAgICAgIGlmICh2YWx1ZSAmJiB0cmFuc2l0aW9uKSB7XHJcbiAgICAgICAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XHJcbiAgICAgICAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gb3JpZ2luYWxEaXNwbGF5O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IG9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlOiBmdW5jdGlvbiAoZWwsIF9hLCB2bm9kZSkge1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IF9hLnZhbHVlLCBvbGRWYWx1ZSA9IF9hLm9sZFZhbHVlO1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgICAgIGlmICghdmFsdWUgPT09ICFvbGRWYWx1ZSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XHJcbiAgICAgICAgdmFyIHRyYW5zaXRpb24gPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcclxuICAgICAgICBpZiAodHJhbnNpdGlvbikge1xyXG4gICAgICAgICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGVhdmUodm5vZGUsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgdW5iaW5kOiBmdW5jdGlvbiAoZWwsIGJpbmRpbmcsIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KSB7XHJcbiAgICAgICAgaWYgKCFpc0Rlc3Ryb3kpIHtcclxuICAgICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XG5cbnZhciBwbGF0Zm9ybURpcmVjdGl2ZXMgPSB7XHJcbiAgICBtb2RlbDogZGlyZWN0aXZlLFxyXG4gICAgc2hvdzogc2hvd1xyXG59O1xuXG4vLyBQcm92aWRlcyB0cmFuc2l0aW9uIHN1cHBvcnQgZm9yIGEgc2luZ2xlIGVsZW1lbnQvY29tcG9uZW50LlxyXG52YXIgdHJhbnNpdGlvblByb3BzID0ge1xyXG4gICAgbmFtZTogU3RyaW5nLFxyXG4gICAgYXBwZWFyOiBCb29sZWFuLFxyXG4gICAgY3NzOiBCb29sZWFuLFxyXG4gICAgbW9kZTogU3RyaW5nLFxyXG4gICAgdHlwZTogU3RyaW5nLFxyXG4gICAgZW50ZXJDbGFzczogU3RyaW5nLFxyXG4gICAgbGVhdmVDbGFzczogU3RyaW5nLFxyXG4gICAgZW50ZXJUb0NsYXNzOiBTdHJpbmcsXHJcbiAgICBsZWF2ZVRvQ2xhc3M6IFN0cmluZyxcclxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IFN0cmluZyxcclxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IFN0cmluZyxcclxuICAgIGFwcGVhckNsYXNzOiBTdHJpbmcsXHJcbiAgICBhcHBlYXJBY3RpdmVDbGFzczogU3RyaW5nLFxyXG4gICAgYXBwZWFyVG9DbGFzczogU3RyaW5nLFxyXG4gICAgZHVyYXRpb246IFtOdW1iZXIsIFN0cmluZywgT2JqZWN0XVxyXG59O1xyXG4vLyBpbiBjYXNlIHRoZSBjaGlsZCBpcyBhbHNvIGFuIGFic3RyYWN0IGNvbXBvbmVudCwgZS5nLiA8a2VlcC1hbGl2ZT5cclxuLy8gd2Ugd2FudCB0byByZWN1cnNpdmVseSByZXRyaWV2ZSB0aGUgcmVhbCBjb21wb25lbnQgdG8gYmUgcmVuZGVyZWRcclxuZnVuY3Rpb24gZ2V0UmVhbENoaWxkKHZub2RlKSB7XHJcbiAgICB2YXIgY29tcE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xyXG4gICAgaWYgKGNvbXBPcHRpb25zICYmIGNvbXBPcHRpb25zLkN0b3Iub3B0aW9ucy5hYnN0cmFjdCkge1xyXG4gICAgICAgIHJldHVybiBnZXRSZWFsQ2hpbGQoZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChjb21wT3B0aW9ucy5jaGlsZHJlbikpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHZub2RlO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGV4dHJhY3RUcmFuc2l0aW9uRGF0YShjb21wKSB7XHJcbiAgICB2YXIgZGF0YSA9IHt9O1xyXG4gICAgdmFyIG9wdGlvbnMgPSBjb21wLiRvcHRpb25zO1xyXG4gICAgLy8gcHJvcHNcclxuICAgIGZvciAodmFyIGtleSBpbiBvcHRpb25zLnByb3BzRGF0YSkge1xyXG4gICAgICAgIGRhdGFba2V5XSA9IGNvbXBba2V5XTtcclxuICAgIH1cclxuICAgIC8vIGV2ZW50cy5cclxuICAgIC8vIGV4dHJhY3QgbGlzdGVuZXJzIGFuZCBwYXNzIHRoZW0gZGlyZWN0bHkgdG8gdGhlIHRyYW5zaXRpb24gbWV0aG9kc1xyXG4gICAgdmFyIGxpc3RlbmVycyA9IG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcclxuICAgIGZvciAodmFyIGtleSBpbiBsaXN0ZW5lcnMpIHtcclxuICAgICAgICBkYXRhW2NhbWVsaXplKGtleSldID0gbGlzdGVuZXJzW2tleV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGF0YTtcclxufVxyXG5mdW5jdGlvbiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZCkge1xyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgaWYgKC9cXGQta2VlcC1hbGl2ZSQvLnRlc3QocmF3Q2hpbGQudGFnKSkge1xyXG4gICAgICAgIHJldHVybiBoKCdrZWVwLWFsaXZlJywge1xyXG4gICAgICAgICAgICBwcm9wczogcmF3Q2hpbGQuY29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGFcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBoYXNQYXJlbnRUcmFuc2l0aW9uKHZub2RlKSB7XHJcbiAgICB3aGlsZSAoKHZub2RlID0gdm5vZGUucGFyZW50KSkge1xyXG4gICAgICAgIGlmICh2bm9kZS5kYXRhLnRyYW5zaXRpb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGlzU2FtZUNoaWxkKGNoaWxkLCBvbGRDaGlsZCkge1xyXG4gICAgcmV0dXJuIG9sZENoaWxkLmtleSA9PT0gY2hpbGQua2V5ICYmIG9sZENoaWxkLnRhZyA9PT0gY2hpbGQudGFnO1xyXG59XHJcbnZhciBpc05vdFRleHROb2RlID0gZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudGFnIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKTsgfTtcclxudmFyIGlzVlNob3dEaXJlY3RpdmUgPSBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5uYW1lID09PSAnc2hvdyc7IH07XHJcbnZhciBUcmFuc2l0aW9uID0ge1xyXG4gICAgbmFtZTogJ3RyYW5zaXRpb24nLFxyXG4gICAgcHJvcHM6IHRyYW5zaXRpb25Qcm9wcyxcclxuICAgIGFic3RyYWN0OiB0cnVlLFxyXG4gICAgcmVuZGVyOiBmdW5jdGlvbiAoaCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcclxuICAgICAgICBpZiAoIWNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZmlsdGVyIG91dCB0ZXh0IG5vZGVzIChwb3NzaWJsZSB3aGl0ZXNwYWNlcylcclxuICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlcihpc05vdFRleHROb2RlKTtcclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHdhcm4gbXVsdGlwbGUgZWxlbWVudHNcclxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjaGlsZHJlbi5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIHdhcm4oJzx0cmFuc2l0aW9uPiBjYW4gb25seSBiZSB1c2VkIG9uIGEgc2luZ2xlIGVsZW1lbnQuIFVzZSAnICtcclxuICAgICAgICAgICAgICAgICc8dHJhbnNpdGlvbi1ncm91cD4gZm9yIGxpc3RzLicsIHRoaXMuJHBhcmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBtb2RlID0gdGhpcy5tb2RlO1xyXG4gICAgICAgIC8vIHdhcm4gaW52YWxpZCBtb2RlXHJcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgbW9kZSAmJiBtb2RlICE9PSAnaW4tb3V0JyAmJiBtb2RlICE9PSAnb3V0LWluJykge1xyXG4gICAgICAgICAgICB3YXJuKCdpbnZhbGlkIDx0cmFuc2l0aW9uPiBtb2RlOiAnICsgbW9kZSwgdGhpcy4kcGFyZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJhd0NoaWxkID0gY2hpbGRyZW5bMF07XHJcbiAgICAgICAgLy8gaWYgdGhpcyBpcyBhIGNvbXBvbmVudCByb290IG5vZGUgYW5kIHRoZSBjb21wb25lbnQnc1xyXG4gICAgICAgIC8vIHBhcmVudCBjb250YWluZXIgbm9kZSBhbHNvIGhhcyB0cmFuc2l0aW9uLCBza2lwLlxyXG4gICAgICAgIGlmIChoYXNQYXJlbnRUcmFuc2l0aW9uKHRoaXMuJHZub2RlKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmF3Q2hpbGQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFwcGx5IHRyYW5zaXRpb24gZGF0YSB0byBjaGlsZFxyXG4gICAgICAgIC8vIHVzZSBnZXRSZWFsQ2hpbGQoKSB0byBpZ25vcmUgYWJzdHJhY3QgY29tcG9uZW50cyBlLmcuIGtlZXAtYWxpdmVcclxuICAgICAgICB2YXIgY2hpbGQgPSBnZXRSZWFsQ2hpbGQocmF3Q2hpbGQpO1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgICAgIGlmICghY2hpbGQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJhd0NoaWxkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fbGVhdmluZykge1xyXG4gICAgICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBlbnN1cmUgYSBrZXkgdGhhdCBpcyB1bmlxdWUgdG8gdGhlIHZub2RlIHR5cGUgYW5kIHRvIHRoaXMgdHJhbnNpdGlvblxyXG4gICAgICAgIC8vIGNvbXBvbmVudCBpbnN0YW5jZS4gVGhpcyBrZXkgd2lsbCBiZSB1c2VkIHRvIHJlbW92ZSBwZW5kaW5nIGxlYXZpbmcgbm9kZXNcclxuICAgICAgICAvLyBkdXJpbmcgZW50ZXJpbmcuXHJcbiAgICAgICAgdmFyIGlkID0gXCJfX3RyYW5zaXRpb24tXCIuY29uY2F0KHRoaXMuX3VpZCwgXCItXCIpO1xyXG4gICAgICAgIGNoaWxkLmtleSA9XHJcbiAgICAgICAgICAgIGNoaWxkLmtleSA9PSBudWxsXHJcbiAgICAgICAgICAgICAgICA/IGNoaWxkLmlzQ29tbWVudFxyXG4gICAgICAgICAgICAgICAgICAgID8gaWQgKyAnY29tbWVudCdcclxuICAgICAgICAgICAgICAgICAgICA6IGlkICsgY2hpbGQudGFnXHJcbiAgICAgICAgICAgICAgICA6IGlzUHJpbWl0aXZlKGNoaWxkLmtleSlcclxuICAgICAgICAgICAgICAgICAgICA/IFN0cmluZyhjaGlsZC5rZXkpLmluZGV4T2YoaWQpID09PSAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gY2hpbGQua2V5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogaWQgKyBjaGlsZC5rZXlcclxuICAgICAgICAgICAgICAgICAgICA6IGNoaWxkLmtleTtcclxuICAgICAgICB2YXIgZGF0YSA9ICgoY2hpbGQuZGF0YSB8fCAoY2hpbGQuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9XHJcbiAgICAgICAgICAgIGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKSk7XHJcbiAgICAgICAgdmFyIG9sZFJhd0NoaWxkID0gdGhpcy5fdm5vZGU7XHJcbiAgICAgICAgdmFyIG9sZENoaWxkID0gZ2V0UmVhbENoaWxkKG9sZFJhd0NoaWxkKTtcclxuICAgICAgICAvLyBtYXJrIHYtc2hvd1xyXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIHRyYW5zaXRpb24gbW9kdWxlIGNhbiBoYW5kIG92ZXIgdGhlIGNvbnRyb2wgdG8gdGhlIGRpcmVjdGl2ZVxyXG4gICAgICAgIGlmIChjaGlsZC5kYXRhLmRpcmVjdGl2ZXMgJiYgY2hpbGQuZGF0YS5kaXJlY3RpdmVzLnNvbWUoaXNWU2hvd0RpcmVjdGl2ZSkpIHtcclxuICAgICAgICAgICAgY2hpbGQuZGF0YS5zaG93ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9sZENoaWxkICYmXHJcbiAgICAgICAgICAgIG9sZENoaWxkLmRhdGEgJiZcclxuICAgICAgICAgICAgIWlzU2FtZUNoaWxkKGNoaWxkLCBvbGRDaGlsZCkgJiZcclxuICAgICAgICAgICAgIWlzQXN5bmNQbGFjZWhvbGRlcihvbGRDaGlsZCkgJiZcclxuICAgICAgICAgICAgLy8gIzY2ODcgY29tcG9uZW50IHJvb3QgaXMgYSBjb21tZW50IG5vZGVcclxuICAgICAgICAgICAgIShvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZSAmJlxyXG4gICAgICAgICAgICAgICAgb2xkQ2hpbGQuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlLmlzQ29tbWVudCkpIHtcclxuICAgICAgICAgICAgLy8gcmVwbGFjZSBvbGQgY2hpbGQgdHJhbnNpdGlvbiBkYXRhIHdpdGggZnJlc2ggb25lXHJcbiAgICAgICAgICAgIC8vIGltcG9ydGFudCBmb3IgZHluYW1pYyB0cmFuc2l0aW9ucyFcclxuICAgICAgICAgICAgdmFyIG9sZERhdGEgPSAob2xkQ2hpbGQuZGF0YS50cmFuc2l0aW9uID0gZXh0ZW5kKHt9LCBkYXRhKSk7XHJcbiAgICAgICAgICAgIC8vIGhhbmRsZSB0cmFuc2l0aW9uIG1vZGVcclxuICAgICAgICAgICAgaWYgKG1vZGUgPT09ICdvdXQtaW4nKSB7XHJcbiAgICAgICAgICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xlYXZpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2FmdGVyTGVhdmUnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2xlYXZpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy4kZm9yY2VVcGRhdGUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChtb2RlID09PSAnaW4tb3V0Jykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzQXN5bmNQbGFjZWhvbGRlcihjaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2xkUmF3Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgZGVsYXllZExlYXZlXzE7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGVyZm9ybUxlYXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5ZWRMZWF2ZV8xKCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2FmdGVyRW50ZXInLCBwZXJmb3JtTGVhdmUpO1xyXG4gICAgICAgICAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2VudGVyQ2FuY2VsbGVkJywgcGVyZm9ybUxlYXZlKTtcclxuICAgICAgICAgICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdkZWxheUxlYXZlJywgZnVuY3Rpb24gKGxlYXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsYXllZExlYXZlXzEgPSBsZWF2ZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByYXdDaGlsZDtcclxuICAgIH1cclxufTtcblxuLy8gUHJvdmlkZXMgdHJhbnNpdGlvbiBzdXBwb3J0IGZvciBsaXN0IGl0ZW1zLlxyXG52YXIgcHJvcHMgPSBleHRlbmQoe1xyXG4gICAgdGFnOiBTdHJpbmcsXHJcbiAgICBtb3ZlQ2xhc3M6IFN0cmluZ1xyXG59LCB0cmFuc2l0aW9uUHJvcHMpO1xyXG5kZWxldGUgcHJvcHMubW9kZTtcclxudmFyIFRyYW5zaXRpb25Hcm91cCA9IHtcclxuICAgIHByb3BzOiBwcm9wcyxcclxuICAgIGJlZm9yZU1vdW50OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgdXBkYXRlID0gdGhpcy5fdXBkYXRlO1xyXG4gICAgICAgIHRoaXMuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XHJcbiAgICAgICAgICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZShfdGhpcyk7XHJcbiAgICAgICAgICAgIC8vIGZvcmNlIHJlbW92aW5nIHBhc3NcclxuICAgICAgICAgICAgX3RoaXMuX19wYXRjaF9fKF90aGlzLl92bm9kZSwgX3RoaXMua2VwdCwgZmFsc2UsIC8vIGh5ZHJhdGluZ1xyXG4gICAgICAgICAgICB0cnVlIC8vIHJlbW92ZU9ubHkgKCFpbXBvcnRhbnQsIGF2b2lkcyB1bm5lY2Vzc2FyeSBtb3ZlcylcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgX3RoaXMuX3Zub2RlID0gX3RoaXMua2VwdDtcclxuICAgICAgICAgICAgcmVzdG9yZUFjdGl2ZUluc3RhbmNlKCk7XHJcbiAgICAgICAgICAgIHVwZGF0ZS5jYWxsKF90aGlzLCB2bm9kZSwgaHlkcmF0aW5nKTtcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIHJlbmRlcjogZnVuY3Rpb24gKGgpIHtcclxuICAgICAgICB2YXIgdGFnID0gdGhpcy50YWcgfHwgdGhpcy4kdm5vZGUuZGF0YS50YWcgfHwgJ3NwYW4nO1xyXG4gICAgICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgICAgIHZhciBwcmV2Q2hpbGRyZW4gPSAodGhpcy5wcmV2Q2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuKTtcclxuICAgICAgICB2YXIgcmF3Q2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdO1xyXG4gICAgICAgIHZhciBjaGlsZHJlbiA9ICh0aGlzLmNoaWxkcmVuID0gW10pO1xyXG4gICAgICAgIHZhciB0cmFuc2l0aW9uRGF0YSA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhd0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBjID0gcmF3Q2hpbGRyZW5baV07XHJcbiAgICAgICAgICAgIGlmIChjLnRhZykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGMua2V5ICE9IG51bGwgJiYgU3RyaW5nKGMua2V5KS5pbmRleE9mKCdfX3ZsaXN0JykgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGMpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcFtjLmtleV0gPSBjO1xyXG4gICAgICAgICAgICAgICAgICAgIChjLmRhdGEgfHwgKGMuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvcHRzID0gYy5jb21wb25lbnRPcHRpb25zO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuYW1lXzEgPSBvcHRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gZ2V0Q29tcG9uZW50TmFtZShvcHRzLkN0b3Iub3B0aW9ucykgfHwgb3B0cy50YWcgfHwgJydcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBjLnRhZztcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKFwiPHRyYW5zaXRpb24tZ3JvdXA+IGNoaWxkcmVuIG11c3QgYmUga2V5ZWQ6IDxcIi5jb25jYXQobmFtZV8xLCBcIj5cIikpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwcmV2Q2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgdmFyIGtlcHQgPSBbXTtcclxuICAgICAgICAgICAgdmFyIHJlbW92ZWQgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmV2Q2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjID0gcHJldkNoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICAgICAgYy5kYXRhLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLmdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyBub3QgdHlwZWQgaW4gTm9kZVxyXG4gICAgICAgICAgICAgICAgYy5kYXRhLnBvcyA9IGMuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1hcFtjLmtleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBrZXB0LnB1c2goYyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVkLnB1c2goYyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5rZXB0ID0gaCh0YWcsIG51bGwsIGtlcHQpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZWQgPSByZW1vdmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaCh0YWcsIG51bGwsIGNoaWxkcmVuKTtcclxuICAgIH0sXHJcbiAgICB1cGRhdGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW47XHJcbiAgICAgICAgdmFyIG1vdmVDbGFzcyA9IHRoaXMubW92ZUNsYXNzIHx8ICh0aGlzLm5hbWUgfHwgJ3YnKSArICctbW92ZSc7XHJcbiAgICAgICAgaWYgKCFjaGlsZHJlbi5sZW5ndGggfHwgIXRoaXMuaGFzTW92ZShjaGlsZHJlblswXS5lbG0sIG1vdmVDbGFzcykpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB3ZSBkaXZpZGUgdGhlIHdvcmsgaW50byB0aHJlZSBsb29wcyB0byBhdm9pZCBtaXhpbmcgRE9NIHJlYWRzIGFuZCB3cml0ZXNcclxuICAgICAgICAvLyBpbiBlYWNoIGl0ZXJhdGlvbiAtIHdoaWNoIGhlbHBzIHByZXZlbnQgbGF5b3V0IHRocmFzaGluZy5cclxuICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKGNhbGxQZW5kaW5nQ2JzKTtcclxuICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKHJlY29yZFBvc2l0aW9uKTtcclxuICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKGFwcGx5VHJhbnNsYXRpb24pO1xyXG4gICAgICAgIC8vIGZvcmNlIHJlZmxvdyB0byBwdXQgZXZlcnl0aGluZyBpbiBwb3NpdGlvblxyXG4gICAgICAgIC8vIGFzc2lnbiB0byB0aGlzIHRvIGF2b2lkIGJlaW5nIHJlbW92ZWQgaW4gdHJlZS1zaGFraW5nXHJcbiAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXHJcbiAgICAgICAgdGhpcy5fcmVmbG93ID0gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoYykge1xyXG4gICAgICAgICAgICBpZiAoYy5kYXRhLm1vdmVkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZWxfMSA9IGMuZWxtO1xyXG4gICAgICAgICAgICAgICAgdmFyIHMgPSBlbF8xLnN0eWxlO1xyXG4gICAgICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsXzEsIG1vdmVDbGFzcyk7XHJcbiAgICAgICAgICAgICAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcclxuICAgICAgICAgICAgICAgIGVsXzEuYWRkRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIChlbF8xLl9tb3ZlQ2IgPSBmdW5jdGlvbiBjYihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUgJiYgZS50YXJnZXQgIT09IGVsXzEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWUgfHwgL3RyYW5zZm9ybSQvLnRlc3QoZS5wcm9wZXJ0eU5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsXzEucmVtb3ZlRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGNiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxfMS5fbW92ZUNiID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsXzEsIG1vdmVDbGFzcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgbWV0aG9kczoge1xyXG4gICAgICAgIGhhc01vdmU6IGZ1bmN0aW9uIChlbCwgbW92ZUNsYXNzKSB7XHJcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgICAgICAgICBpZiAoIWhhc1RyYW5zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2hhc01vdmUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9oYXNNb3ZlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIERldGVjdCB3aGV0aGVyIGFuIGVsZW1lbnQgd2l0aCB0aGUgbW92ZSBjbGFzcyBhcHBsaWVkIGhhc1xyXG4gICAgICAgICAgICAvLyBDU1MgdHJhbnNpdGlvbnMuIFNpbmNlIHRoZSBlbGVtZW50IG1heSBiZSBpbnNpZGUgYW4gZW50ZXJpbmdcclxuICAgICAgICAgICAgLy8gdHJhbnNpdGlvbiBhdCB0aGlzIHZlcnkgbW9tZW50LCB3ZSBtYWtlIGEgY2xvbmUgb2YgaXQgYW5kIHJlbW92ZVxyXG4gICAgICAgICAgICAvLyBhbGwgb3RoZXIgdHJhbnNpdGlvbiBjbGFzc2VzIGFwcGxpZWQgdG8gZW5zdXJlIG9ubHkgdGhlIG1vdmUgY2xhc3NcclxuICAgICAgICAgICAgLy8gaXMgYXBwbGllZC5cclxuICAgICAgICAgICAgdmFyIGNsb25lID0gZWwuY2xvbmVOb2RlKCk7XHJcbiAgICAgICAgICAgIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcclxuICAgICAgICAgICAgICAgIGVsLl90cmFuc2l0aW9uQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uIChjbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhjbG9uZSwgY2xzKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFkZENsYXNzKGNsb25lLCBtb3ZlQ2xhc3MpO1xyXG4gICAgICAgICAgICBjbG9uZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICB0aGlzLiRlbC5hcHBlbmRDaGlsZChjbG9uZSk7XHJcbiAgICAgICAgICAgIHZhciBpbmZvID0gZ2V0VHJhbnNpdGlvbkluZm8oY2xvbmUpO1xyXG4gICAgICAgICAgICB0aGlzLiRlbC5yZW1vdmVDaGlsZChjbG9uZSk7XHJcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5faGFzTW92ZSA9IGluZm8uaGFzVHJhbnNmb3JtKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIGNhbGxQZW5kaW5nQ2JzKGMpIHtcclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgaWYgKGMuZWxtLl9tb3ZlQ2IpIHtcclxuICAgICAgICBjLmVsbS5fbW92ZUNiKCk7XHJcbiAgICB9XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgIGlmIChjLmVsbS5fZW50ZXJDYikge1xyXG4gICAgICAgIGMuZWxtLl9lbnRlckNiKCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcmVjb3JkUG9zaXRpb24oYykge1xyXG4gICAgYy5kYXRhLm5ld1BvcyA9IGMuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG59XHJcbmZ1bmN0aW9uIGFwcGx5VHJhbnNsYXRpb24oYykge1xyXG4gICAgdmFyIG9sZFBvcyA9IGMuZGF0YS5wb3M7XHJcbiAgICB2YXIgbmV3UG9zID0gYy5kYXRhLm5ld1BvcztcclxuICAgIHZhciBkeCA9IG9sZFBvcy5sZWZ0IC0gbmV3UG9zLmxlZnQ7XHJcbiAgICB2YXIgZHkgPSBvbGRQb3MudG9wIC0gbmV3UG9zLnRvcDtcclxuICAgIGlmIChkeCB8fCBkeSkge1xyXG4gICAgICAgIGMuZGF0YS5tb3ZlZCA9IHRydWU7XHJcbiAgICAgICAgdmFyIHMgPSBjLmVsbS5zdHlsZTtcclxuICAgICAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUoXCIuY29uY2F0KGR4LCBcInB4LFwiKS5jb25jYXQoZHksIFwicHgpXCIpO1xyXG4gICAgICAgIHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBzJztcclxuICAgIH1cclxufVxuXG52YXIgcGxhdGZvcm1Db21wb25lbnRzID0ge1xyXG4gICAgVHJhbnNpdGlvbjogVHJhbnNpdGlvbixcclxuICAgIFRyYW5zaXRpb25Hcm91cDogVHJhbnNpdGlvbkdyb3VwXHJcbn07XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gc3BlY2lmaWMgdXRpbHNcclxuVnVlLmNvbmZpZy5tdXN0VXNlUHJvcCA9IG11c3RVc2VQcm9wO1xyXG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRUYWcgPSBpc1Jlc2VydmVkVGFnO1xyXG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRBdHRyID0gaXNSZXNlcnZlZEF0dHI7XHJcblZ1ZS5jb25maWcuZ2V0VGFnTmFtZXNwYWNlID0gZ2V0VGFnTmFtZXNwYWNlO1xyXG5WdWUuY29uZmlnLmlzVW5rbm93bkVsZW1lbnQgPSBpc1Vua25vd25FbGVtZW50O1xyXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHJ1bnRpbWUgZGlyZWN0aXZlcyAmIGNvbXBvbmVudHNcclxuZXh0ZW5kKFZ1ZS5vcHRpb25zLmRpcmVjdGl2ZXMsIHBsYXRmb3JtRGlyZWN0aXZlcyk7XHJcbmV4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLCBwbGF0Zm9ybUNvbXBvbmVudHMpO1xyXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHBhdGNoIGZ1bmN0aW9uXHJcblZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fID0gaW5Ccm93c2VyID8gcGF0Y2ggOiBub29wO1xyXG4vLyBwdWJsaWMgbW91bnQgbWV0aG9kXHJcblZ1ZS5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKGVsLCBoeWRyYXRpbmcpIHtcclxuICAgIGVsID0gZWwgJiYgaW5Ccm93c2VyID8gcXVlcnkoZWwpIDogdW5kZWZpbmVkO1xyXG4gICAgcmV0dXJuIG1vdW50Q29tcG9uZW50KHRoaXMsIGVsLCBoeWRyYXRpbmcpO1xyXG59O1xyXG4vLyBkZXZ0b29scyBnbG9iYWwgaG9va1xyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5pZiAoaW5Ccm93c2VyKSB7XHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoY29uZmlnLmRldnRvb2xzKSB7XHJcbiAgICAgICAgICAgIGlmIChkZXZ0b29scykge1xyXG4gICAgICAgICAgICAgICAgZGV2dG9vbHMuZW1pdCgnaW5pdCcsIFZ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXSgnRG93bmxvYWQgdGhlIFZ1ZSBEZXZ0b29scyBleHRlbnNpb24gZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6XFxuJyArXHJcbiAgICAgICAgICAgICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtZGV2dG9vbHMnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxyXG4gICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXHJcbiAgICAgICAgICAgIGNvbmZpZy5wcm9kdWN0aW9uVGlwICE9PSBmYWxzZSAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgICAgICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcIllvdSBhcmUgcnVubmluZyBWdWUgaW4gZGV2ZWxvcG1lbnQgbW9kZS5cXG5cIiArXHJcbiAgICAgICAgICAgICAgICBcIk1ha2Ugc3VyZSB0byB0dXJuIG9uIHByb2R1Y3Rpb24gbW9kZSB3aGVuIGRlcGxveWluZyBmb3IgcHJvZHVjdGlvbi5cXG5cIiArXHJcbiAgICAgICAgICAgICAgICBcIlNlZSBtb3JlIHRpcHMgYXQgaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvZGVwbG95bWVudC5odG1sXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH0sIDApO1xyXG59XG5cbmV4cG9ydCB7IEVmZmVjdFNjb3BlLCBjb21wdXRlZCwgY3VzdG9tUmVmLCBWdWUgYXMgZGVmYXVsdCwgZGVmaW5lQXN5bmNDb21wb25lbnQsIGRlZmluZUNvbXBvbmVudCwgZGVsLCBlZmZlY3RTY29wZSwgZ2V0Q3VycmVudEluc3RhbmNlLCBnZXRDdXJyZW50U2NvcGUsIGgsIGluamVjdCwgaXNQcm94eSwgaXNSZWFjdGl2ZSwgaXNSZWFkb25seSwgaXNSZWYsIGlzU2hhbGxvdywgbWFya1JhdywgbWVyZ2VEZWZhdWx0cywgbmV4dFRpY2ssIG9uQWN0aXZhdGVkLCBvbkJlZm9yZU1vdW50LCBvbkJlZm9yZVVubW91bnQsIG9uQmVmb3JlVXBkYXRlLCBvbkRlYWN0aXZhdGVkLCBvbkVycm9yQ2FwdHVyZWQsIG9uTW91bnRlZCwgb25SZW5kZXJUcmFja2VkLCBvblJlbmRlclRyaWdnZXJlZCwgb25TY29wZURpc3Bvc2UsIG9uU2VydmVyUHJlZmV0Y2gsIG9uVW5tb3VudGVkLCBvblVwZGF0ZWQsIHByb3ZpZGUsIHByb3h5UmVmcywgcmVhY3RpdmUsIHJlYWRvbmx5LCByZWYkMSBhcyByZWYsIHNldCwgc2hhbGxvd1JlYWN0aXZlLCBzaGFsbG93UmVhZG9ubHksIHNoYWxsb3dSZWYsIHRvUmF3LCB0b1JlZiwgdG9SZWZzLCB0cmlnZ2VyUmVmLCB1bnJlZiwgdXNlQXR0cnMsIHVzZUNzc01vZHVsZSwgdXNlQ3NzVmFycywgdXNlU2xvdHMsIHZlcnNpb24sIHdhdGNoLCB3YXRjaEVmZmVjdCwgd2F0Y2hQb3N0RWZmZWN0LCB3YXRjaFN5bmNFZmZlY3QgfTtcbiIsIi8qKlxuICAqIHZ1ZS1jbGFzcy1jb21wb25lbnQgdjcuMi42XG4gICogKGMpIDIwMTUtcHJlc2VudCBFdmFuIFlvdVxuICAqIEBsaWNlbnNlIE1JVFxuICAqL1xuaW1wb3J0IFZ1ZSBmcm9tICd2dWUnO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gICAgcmV0dXJuIGFycjI7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xufVxuXG4vLyBUaGUgcmF0aW9uYWwgYmVoaW5kIHRoZSB2ZXJib3NlIFJlZmxlY3QtZmVhdHVyZSBjaGVjayBiZWxvdyBpcyB0aGUgZmFjdCB0aGF0IHRoZXJlIGFyZSBwb2x5ZmlsbHNcbi8vIHdoaWNoIGFkZCBhbiBpbXBsZW1lbnRhdGlvbiBmb3IgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YSBidXQgbm90IGZvciBSZWZsZWN0LmdldE93bk1ldGFkYXRhS2V5cy5cbi8vIFdpdGhvdXQgdGhpcyBjaGVjayBjb25zdW1lcnMgd2lsbCBlbmNvdW50ZXIgaGFyZCB0byB0cmFjayBkb3duIHJ1bnRpbWUgZXJyb3JzLlxuZnVuY3Rpb24gcmVmbGVjdGlvbklzU3VwcG9ydGVkKCkge1xuICByZXR1cm4gdHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnICYmIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEgJiYgUmVmbGVjdC5nZXRPd25NZXRhZGF0YUtleXM7XG59XG5mdW5jdGlvbiBjb3B5UmVmbGVjdGlvbk1ldGFkYXRhKHRvLCBmcm9tKSB7XG4gIGZvcndhcmRNZXRhZGF0YSh0bywgZnJvbSk7XG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGZyb20ucHJvdG90eXBlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBmb3J3YXJkTWV0YWRhdGEodG8ucHJvdG90eXBlLCBmcm9tLnByb3RvdHlwZSwga2V5KTtcbiAgfSk7XG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGZyb20pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGZvcndhcmRNZXRhZGF0YSh0bywgZnJvbSwga2V5KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGZvcndhcmRNZXRhZGF0YSh0bywgZnJvbSwgcHJvcGVydHlLZXkpIHtcbiAgdmFyIG1ldGFLZXlzID0gcHJvcGVydHlLZXkgPyBSZWZsZWN0LmdldE93bk1ldGFkYXRhS2V5cyhmcm9tLCBwcm9wZXJ0eUtleSkgOiBSZWZsZWN0LmdldE93bk1ldGFkYXRhS2V5cyhmcm9tKTtcbiAgbWV0YUtleXMuZm9yRWFjaChmdW5jdGlvbiAobWV0YUtleSkge1xuICAgIHZhciBtZXRhZGF0YSA9IHByb3BlcnR5S2V5ID8gUmVmbGVjdC5nZXRPd25NZXRhZGF0YShtZXRhS2V5LCBmcm9tLCBwcm9wZXJ0eUtleSkgOiBSZWZsZWN0LmdldE93bk1ldGFkYXRhKG1ldGFLZXksIGZyb20pO1xuXG4gICAgaWYgKHByb3BlcnR5S2V5KSB7XG4gICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKG1ldGFLZXksIG1ldGFkYXRhLCB0bywgcHJvcGVydHlLZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKG1ldGFLZXksIG1ldGFkYXRhLCB0byk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIGZha2VBcnJheSA9IHtcbiAgX19wcm90b19fOiBbXVxufTtcbnZhciBoYXNQcm90byA9IGZha2VBcnJheSBpbnN0YW5jZW9mIEFycmF5O1xuZnVuY3Rpb24gY3JlYXRlRGVjb3JhdG9yKGZhY3RvcnkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSwgaW5kZXgpIHtcbiAgICB2YXIgQ3RvciA9IHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicgPyB0YXJnZXQgOiB0YXJnZXQuY29uc3RydWN0b3I7XG5cbiAgICBpZiAoIUN0b3IuX19kZWNvcmF0b3JzX18pIHtcbiAgICAgIEN0b3IuX19kZWNvcmF0b3JzX18gPSBbXTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGluZGV4ICE9PSAnbnVtYmVyJykge1xuICAgICAgaW5kZXggPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgQ3Rvci5fX2RlY29yYXRvcnNfXy5wdXNoKGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeShvcHRpb25zLCBrZXksIGluZGV4KTtcbiAgICB9KTtcbiAgfTtcbn1cbmZ1bmN0aW9uIG1peGlucygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIEN0b3JzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIEN0b3JzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIFZ1ZS5leHRlbmQoe1xuICAgIG1peGluczogQ3RvcnNcbiAgfSk7XG59XG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IF90eXBlb2YodmFsdWUpO1xuXG4gIHJldHVybiB2YWx1ZSA9PSBudWxsIHx8IHR5cGUgIT09ICdvYmplY3QnICYmIHR5cGUgIT09ICdmdW5jdGlvbic7XG59XG5mdW5jdGlvbiB3YXJuKG1lc3NhZ2UpIHtcbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnNvbGUud2FybignW3Z1ZS1jbGFzcy1jb21wb25lbnRdICcgKyBtZXNzYWdlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb2xsZWN0RGF0YUZyb21Db25zdHJ1Y3Rvcih2bSwgQ29tcG9uZW50KSB7XG4gIC8vIG92ZXJyaWRlIF9pbml0IHRvIHByZXZlbnQgdG8gaW5pdCBhcyBWdWUgaW5zdGFuY2VcbiAgdmFyIG9yaWdpbmFsSW5pdCA9IENvbXBvbmVudC5wcm90b3R5cGUuX2luaXQ7XG5cbiAgQ29tcG9uZW50LnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8gcHJveHkgdG8gYWN0dWFsIHZtXG4gICAgdmFyIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2bSk7IC8vIDIuMi4wIGNvbXBhdCAocHJvcHMgYXJlIG5vIGxvbmdlciBleHBvc2VkIGFzIHNlbGYgcHJvcGVydGllcylcblxuICAgIGlmICh2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgICAgZm9yICh2YXIga2V5IGluIHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgICAgIGlmICghdm0uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpcywga2V5LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB2bVtrZXldO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgICAgIHZtW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTsgLy8gc2hvdWxkIGJlIGFjcXVpcmVkIGNsYXNzIHByb3BlcnR5IHZhbHVlc1xuXG5cbiAgdmFyIGRhdGEgPSBuZXcgQ29tcG9uZW50KCk7IC8vIHJlc3RvcmUgb3JpZ2luYWwgX2luaXQgdG8gYXZvaWQgbWVtb3J5IGxlYWsgKCMyMDkpXG5cbiAgQ29tcG9uZW50LnByb3RvdHlwZS5faW5pdCA9IG9yaWdpbmFsSW5pdDsgLy8gY3JlYXRlIHBsYWluIGRhdGEgb2JqZWN0XG5cbiAgdmFyIHBsYWluRGF0YSA9IHt9O1xuICBPYmplY3Qua2V5cyhkYXRhKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBsYWluRGF0YVtrZXldID0gZGF0YVtrZXldO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIShDb21wb25lbnQucHJvdG90eXBlIGluc3RhbmNlb2YgVnVlKSAmJiBPYmplY3Qua2V5cyhwbGFpbkRhdGEpLmxlbmd0aCA+IDApIHtcbiAgICAgIHdhcm4oJ0NvbXBvbmVudCBjbGFzcyBtdXN0IGluaGVyaXQgVnVlIG9yIGl0cyBkZXNjZW5kYW50IGNsYXNzICcgKyAnd2hlbiBjbGFzcyBwcm9wZXJ0eSBpcyB1c2VkLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwbGFpbkRhdGE7XG59XG5cbnZhciAkaW50ZXJuYWxIb29rcyA9IFsnZGF0YScsICdiZWZvcmVDcmVhdGUnLCAnY3JlYXRlZCcsICdiZWZvcmVNb3VudCcsICdtb3VudGVkJywgJ2JlZm9yZURlc3Ryb3knLCAnZGVzdHJveWVkJywgJ2JlZm9yZVVwZGF0ZScsICd1cGRhdGVkJywgJ2FjdGl2YXRlZCcsICdkZWFjdGl2YXRlZCcsICdyZW5kZXInLCAnZXJyb3JDYXB0dXJlZCcsICdzZXJ2ZXJQcmVmZXRjaCcgLy8gMi42XG5dO1xuZnVuY3Rpb24gY29tcG9uZW50RmFjdG9yeShDb21wb25lbnQpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICBvcHRpb25zLm5hbWUgPSBvcHRpb25zLm5hbWUgfHwgQ29tcG9uZW50Ll9jb21wb25lbnRUYWcgfHwgQ29tcG9uZW50Lm5hbWU7IC8vIHByb3RvdHlwZSBwcm9wcy5cblxuICB2YXIgcHJvdG8gPSBDb21wb25lbnQucHJvdG90eXBlO1xuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwcm90bykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKGtleSA9PT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gaG9va3NcblxuXG4gICAgaWYgKCRpbnRlcm5hbEhvb2tzLmluZGV4T2Yoa2V5KSA+IC0xKSB7XG4gICAgICBvcHRpb25zW2tleV0gPSBwcm90b1trZXldO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwcm90bywga2V5KTtcblxuICAgIGlmIChkZXNjcmlwdG9yLnZhbHVlICE9PSB2b2lkIDApIHtcbiAgICAgIC8vIG1ldGhvZHNcbiAgICAgIGlmICh0eXBlb2YgZGVzY3JpcHRvci52YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAob3B0aW9ucy5tZXRob2RzIHx8IChvcHRpb25zLm1ldGhvZHMgPSB7fSkpW2tleV0gPSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdHlwZXNjcmlwdCBkZWNvcmF0ZWQgZGF0YVxuICAgICAgICAob3B0aW9ucy5taXhpbnMgfHwgKG9wdGlvbnMubWl4aW5zID0gW10pKS5wdXNoKHtcbiAgICAgICAgICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7fSwga2V5LCBkZXNjcmlwdG9yLnZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZGVzY3JpcHRvci5nZXQgfHwgZGVzY3JpcHRvci5zZXQpIHtcbiAgICAgIC8vIGNvbXB1dGVkIHByb3BlcnRpZXNcbiAgICAgIChvcHRpb25zLmNvbXB1dGVkIHx8IChvcHRpb25zLmNvbXB1dGVkID0ge30pKVtrZXldID0ge1xuICAgICAgICBnZXQ6IGRlc2NyaXB0b3IuZ2V0LFxuICAgICAgICBzZXQ6IGRlc2NyaXB0b3Iuc2V0XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG4gIChvcHRpb25zLm1peGlucyB8fCAob3B0aW9ucy5taXhpbnMgPSBbXSkpLnB1c2goe1xuICAgIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7XG4gICAgICByZXR1cm4gY29sbGVjdERhdGFGcm9tQ29uc3RydWN0b3IodGhpcywgQ29tcG9uZW50KTtcbiAgICB9XG4gIH0pOyAvLyBkZWNvcmF0ZSBvcHRpb25zXG5cbiAgdmFyIGRlY29yYXRvcnMgPSBDb21wb25lbnQuX19kZWNvcmF0b3JzX187XG5cbiAgaWYgKGRlY29yYXRvcnMpIHtcbiAgICBkZWNvcmF0b3JzLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICByZXR1cm4gZm4ob3B0aW9ucyk7XG4gICAgfSk7XG4gICAgZGVsZXRlIENvbXBvbmVudC5fX2RlY29yYXRvcnNfXztcbiAgfSAvLyBmaW5kIHN1cGVyXG5cblxuICB2YXIgc3VwZXJQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihDb21wb25lbnQucHJvdG90eXBlKTtcbiAgdmFyIFN1cGVyID0gc3VwZXJQcm90byBpbnN0YW5jZW9mIFZ1ZSA/IHN1cGVyUHJvdG8uY29uc3RydWN0b3IgOiBWdWU7XG4gIHZhciBFeHRlbmRlZCA9IFN1cGVyLmV4dGVuZChvcHRpb25zKTtcbiAgZm9yd2FyZFN0YXRpY01lbWJlcnMoRXh0ZW5kZWQsIENvbXBvbmVudCwgU3VwZXIpO1xuXG4gIGlmIChyZWZsZWN0aW9uSXNTdXBwb3J0ZWQoKSkge1xuICAgIGNvcHlSZWZsZWN0aW9uTWV0YWRhdGEoRXh0ZW5kZWQsIENvbXBvbmVudCk7XG4gIH1cblxuICByZXR1cm4gRXh0ZW5kZWQ7XG59XG52YXIgcmVzZXJ2ZWRQcm9wZXJ0eU5hbWVzID0gWy8vIFVuaXF1ZSBpZFxuJ2NpZCcsIC8vIFN1cGVyIFZ1ZSBjb25zdHJ1Y3RvclxuJ3N1cGVyJywgLy8gQ29tcG9uZW50IG9wdGlvbnMgdGhhdCB3aWxsIGJlIHVzZWQgYnkgdGhlIGNvbXBvbmVudFxuJ29wdGlvbnMnLCAnc3VwZXJPcHRpb25zJywgJ2V4dGVuZE9wdGlvbnMnLCAnc2VhbGVkT3B0aW9ucycsIC8vIFByaXZhdGUgYXNzZXRzXG4nY29tcG9uZW50JywgJ2RpcmVjdGl2ZScsICdmaWx0ZXInXTtcbnZhciBzaG91bGRJZ25vcmUgPSB7XG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZVxufTtcblxuZnVuY3Rpb24gZm9yd2FyZFN0YXRpY01lbWJlcnMoRXh0ZW5kZWQsIE9yaWdpbmFsLCBTdXBlcikge1xuICAvLyBXZSBoYXZlIHRvIHVzZSBnZXRPd25Qcm9wZXJ0eU5hbWVzIHNpbmNlIEJhYmVsIHJlZ2lzdGVycyBtZXRob2RzIGFzIG5vbi1lbnVtZXJhYmxlXG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE9yaWdpbmFsKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAvLyBTa2lwIHRoZSBwcm9wZXJ0aWVzIHRoYXQgc2hvdWxkIG5vdCBiZSBvdmVyd3JpdHRlblxuICAgIGlmIChzaG91bGRJZ25vcmVba2V5XSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gU29tZSBicm93c2VycyBkb2VzIG5vdCBhbGxvdyByZWNvbmZpZ3VyZSBidWlsdC1pbiBwcm9wZXJ0aWVzXG5cblxuICAgIHZhciBleHRlbmRlZERlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKEV4dGVuZGVkLCBrZXkpO1xuXG4gICAgaWYgKGV4dGVuZGVkRGVzY3JpcHRvciAmJiAhZXh0ZW5kZWREZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPcmlnaW5hbCwga2V5KTsgLy8gSWYgdGhlIHVzZXIgYWdlbnQgZG9lcyBub3Qgc3VwcG9ydCBgX19wcm90b19fYCBvciBpdHMgZmFtaWx5IChJRSA8PSAxMCksXG4gICAgLy8gdGhlIHN1YiBjbGFzcyBwcm9wZXJ0aWVzIG1heSBiZSBpbmhlcml0ZWQgcHJvcGVydGllcyBmcm9tIHRoZSBzdXBlciBjbGFzcyBpbiBUeXBlU2NyaXB0LlxuICAgIC8vIFdlIG5lZWQgdG8gZXhjbHVkZSBzdWNoIHByb3BlcnRpZXMgdG8gcHJldmVudCB0byBvdmVyd3JpdGVcbiAgICAvLyB0aGUgY29tcG9uZW50IG9wdGlvbnMgb2JqZWN0IHdoaWNoIHN0b3JlZCBvbiB0aGUgZXh0ZW5kZWQgY29uc3RydWN0b3IgKFNlZSAjMTkyKS5cbiAgICAvLyBJZiB0aGUgdmFsdWUgaXMgYSByZWZlcmVuY2VkIHZhbHVlIChvYmplY3Qgb3IgZnVuY3Rpb24pLFxuICAgIC8vIHdlIGNhbiBjaGVjayBlcXVhbGl0eSBvZiB0aGVtIGFuZCBleGNsdWRlIGl0IGlmIHRoZXkgaGF2ZSB0aGUgc2FtZSByZWZlcmVuY2UuXG4gICAgLy8gSWYgaXQgaXMgYSBwcmltaXRpdmUgdmFsdWUsIGl0IHdpbGwgYmUgZm9yd2FyZGVkIGZvciBzYWZldHkuXG5cbiAgICBpZiAoIWhhc1Byb3RvKSB7XG4gICAgICAvLyBPbmx5IGBjaWRgIGlzIGV4cGxpY2l0bHkgZXhsdWRlZCBmcm9tIHByb3BlcnR5IGZvcndhcmRpbmdcbiAgICAgIC8vIGJlY2F1c2Ugd2UgY2Fubm90IGRldGVjdCB3aGV0aGVyIGl0IGlzIGEgaW5oZXJpdGVkIHByb3BlcnR5IG9yIG5vdFxuICAgICAgLy8gb24gdGhlIG5vIGBfX3Byb3RvX19gIGVudmlyb25tZW50IGV2ZW4gdGhvdWdoIHRoZSBwcm9wZXJ0eSBpcyByZXNlcnZlZC5cbiAgICAgIGlmIChrZXkgPT09ICdjaWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHN1cGVyRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoU3VwZXIsIGtleSk7XG5cbiAgICAgIGlmICghaXNQcmltaXRpdmUoZGVzY3JpcHRvci52YWx1ZSkgJiYgc3VwZXJEZXNjcmlwdG9yICYmIHN1cGVyRGVzY3JpcHRvci52YWx1ZSA9PT0gZGVzY3JpcHRvci52YWx1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSAvLyBXYXJuIGlmIHRoZSB1c2VycyBtYW51YWxseSBkZWNsYXJlIHJlc2VydmVkIHByb3BlcnRpZXNcblxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgcmVzZXJ2ZWRQcm9wZXJ0eU5hbWVzLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICB3YXJuKFwiU3RhdGljIHByb3BlcnR5IG5hbWUgJ1wiLmNvbmNhdChrZXksIFwiJyBkZWNsYXJlZCBvbiBjbGFzcyAnXCIpLmNvbmNhdChPcmlnaW5hbC5uYW1lLCBcIicgXCIpICsgJ2NvbmZsaWN0cyB3aXRoIHJlc2VydmVkIHByb3BlcnR5IG5hbWUgb2YgVnVlIGludGVybmFsLiAnICsgJ0l0IG1heSBjYXVzZSB1bmV4cGVjdGVkIGJlaGF2aW9yIG9mIHRoZSBjb21wb25lbnQuIENvbnNpZGVyIHJlbmFtaW5nIHRoZSBwcm9wZXJ0eS4nKTtcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXh0ZW5kZWQsIGtleSwgZGVzY3JpcHRvcik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBDb21wb25lbnQob3B0aW9ucykge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gY29tcG9uZW50RmFjdG9yeShvcHRpb25zKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29tcG9uZW50KSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudEZhY3RvcnkoQ29tcG9uZW50LCBvcHRpb25zKTtcbiAgfTtcbn1cblxuQ29tcG9uZW50LnJlZ2lzdGVySG9va3MgPSBmdW5jdGlvbiByZWdpc3Rlckhvb2tzKGtleXMpIHtcbiAgJGludGVybmFsSG9va3MucHVzaC5hcHBseSgkaW50ZXJuYWxIb29rcywgX3RvQ29uc3VtYWJsZUFycmF5KGtleXMpKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudDtcbmV4cG9ydCB7IGNyZWF0ZURlY29yYXRvciwgbWl4aW5zIH07XG4iLCIvKiogQHNlZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1jbGFzcy1jb21wb25lbnQvYmxvYi9tYXN0ZXIvc3JjL3JlZmxlY3QudHN9ICovXG52YXIgcmVmbGVjdE1ldGFkYXRhSXNTdXBwb3J0ZWQgPSB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIFJlZmxlY3QuZ2V0TWV0YWRhdGEgIT09ICd1bmRlZmluZWQnO1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5TWV0YWRhdGEob3B0aW9ucywgdGFyZ2V0LCBrZXkpIHtcbiAgICBpZiAocmVmbGVjdE1ldGFkYXRhSXNTdXBwb3J0ZWQpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG9wdGlvbnMpICYmXG4gICAgICAgICAgICB0eXBlb2Ygb3B0aW9ucyAhPT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgICAgIW9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSAmJlxuICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMudHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHZhciB0eXBlID0gUmVmbGVjdC5nZXRNZXRhZGF0YSgnZGVzaWduOnR5cGUnLCB0YXJnZXQsIGtleSk7XG4gICAgICAgICAgICBpZiAodHlwZSAhPT0gT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy50eXBlID0gdHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IFNoaXBUeXBlIH0gZnJvbSBcIi4uLy4uLy4uL21vZGVscy9vZ2FtZS9zaGlwcy9TaGlwVHlwZVwiO1xyXG5pbXBvcnQgeyBTaGlwVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBkZTogU2hpcFRyYW5zbGF0aW9ucyA9ICB7XHJcbiAgICBbU2hpcFR5cGUubGlnaHRGaWdodGVyXTogJ0xlaWNodGVyIErDpGdlcicsXHJcbiAgICBbU2hpcFR5cGUuaGVhdnlGaWdodGVyXTogJ1NjaHdlcmVyIErDpGdlcicsXHJcbiAgICBbU2hpcFR5cGUuY3J1aXNlcl06ICdLcmV1emVyJyxcclxuICAgIFtTaGlwVHlwZS5iYXR0bGVzaGlwXTogJ1NjaGxhY2h0c2NoaWZmJyxcclxuICAgIFtTaGlwVHlwZS5iYXR0bGVjcnVpc2VyXTogJ1NjaGxhY2h0a3JldXplcicsXHJcbiAgICBbU2hpcFR5cGUuYm9tYmVyXTogJ0JvbWJlcicsXHJcbiAgICBbU2hpcFR5cGUuZGVzdHJveWVyXTogJ1plcnN0w7ZyZXInLFxyXG4gICAgW1NoaXBUeXBlLmRlYXRoU3Rhcl06ICdUb2Rlc3N0ZXJuJyxcclxuICAgIFtTaGlwVHlwZS5yZWFwZXJdOiAnUmVhcGVyJyxcclxuICAgIFtTaGlwVHlwZS5wYXRoZmluZGVyXTogJ1BhdGhmaW5kZXInLFxyXG4gICAgW1NoaXBUeXBlLnNtYWxsQ2FyZ29dOiAnS2xlaW5lciBUcmFuc3BvcnRlcicsXHJcbiAgICBbU2hpcFR5cGUubGFyZ2VDYXJnb106ICdHcm/Dn2VyIFRyYW5zcG9ydGVyJyxcclxuICAgIFtTaGlwVHlwZS5jb2xvbnlTaGlwXTogJ0tvbG9uaWVzY2hpZmYnLFxyXG4gICAgW1NoaXBUeXBlLnJlY3ljbGVyXTogJ1JlY3ljbGVyJyxcclxuICAgIFtTaGlwVHlwZS5lc3Bpb25hZ2VQcm9iZV06ICdTcGlvbmFnZXNvbmRlJyxcclxuICAgIFtTaGlwVHlwZS5zb2xhclNhdGVsbGl0ZV06ICdTb2xhcnNhdGVsbGl0JyxcclxuICAgIFtTaGlwVHlwZS5jcmF3bGVyXTogJ0NyYXdsZXInLFxyXG59OyIsImV4cG9ydCBlbnVtIERlZmVuc2VUeXBlIHtcclxuICAgIHJvY2tldExhdW5jaGVyID0gNDAxLFxyXG4gICAgbGlnaHRMYXNlciA9IDQwMixcclxuICAgIGhlYXZ5TGFzZXIgPSA0MDMsXHJcbiAgICBnYXVzc0Nhbm5vbiA9IDQwNCxcclxuICAgIGlvbkNhbm5vbiA9IDQwNSxcclxuICAgIHBsYXNtYVR1cnJldCA9IDQwNixcclxuICAgIHNtYWxsU2hpZWxkRG9tZSA9IDQwNyxcclxuICAgIGxhcmdlU2hpZWxkRG9tZSA9IDQwOCxcclxufSIsImltcG9ydCB7IERlZmVuc2VUeXBlIH0gZnJvbSBcIkAvc2hhcmVkL21vZGVscy9vZ2FtZS9kZWZlbnNlcy9EZWZlbnNlVHlwZVwiO1xyXG5pbXBvcnQgeyBEZWZlbnNlVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBkZTogRGVmZW5zZVRyYW5zbGF0aW9ucyA9IHtcclxuICAgIFtEZWZlbnNlVHlwZS5yb2NrZXRMYXVuY2hlcl06ICdSYWtldGVud2VyZmVyJyxcclxuICAgIFtEZWZlbnNlVHlwZS5saWdodExhc2VyXTogJ0xlaWNodGVzIExhc2VyZ2VzY2jDvHR6JyxcclxuICAgIFtEZWZlbnNlVHlwZS5oZWF2eUxhc2VyXTogJ1NjaHdlcmVzIExhc2VyZ2VzY2jDvHR6JyxcclxuICAgIFtEZWZlbnNlVHlwZS5nYXVzc0Nhbm5vbl06ICdHYXXDn2thbm9uZScsXHJcbiAgICBbRGVmZW5zZVR5cGUuaW9uQ2Fubm9uXTogJ0lvbmVuZ2VzY2jDvHR6JyxcclxuICAgIFtEZWZlbnNlVHlwZS5wbGFzbWFUdXJyZXRdOiAnUGxhc21hd2VyZmVyJyxcclxuICAgIFtEZWZlbnNlVHlwZS5zbWFsbFNoaWVsZERvbWVdOiAnS2xlaW5lIFNjaGlsZGt1cHBlbCcsXHJcbiAgICBbRGVmZW5zZVR5cGUubGFyZ2VTaGllbGREb21lXTogJ0dyb8OfZSBTY2hpbGRrdXBwZWwnLFxyXG59OyIsImltcG9ydCB7IEJ1aWxkaW5nVHlwZSB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvb2dhbWUvYnVpbGRpbmdzL0J1aWxkaW5nVHlwZVwiO1xyXG5pbXBvcnQgeyBCdWlsZGluZ1RyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZGU6IEJ1aWxkaW5nVHJhbnNsYXRpb25zID0ge1xyXG4gICAgW0J1aWxkaW5nVHlwZS5tZXRhbE1pbmVdOiAnTWV0YWxsbWluZScsXHJcbiAgICBbQnVpbGRpbmdUeXBlLm1ldGFsU3RvcmFnZV06ICdNZXRhbGxzcGVpY2hlcicsXHJcbiAgICBbQnVpbGRpbmdUeXBlLmNyeXN0YWxNaW5lXTogJ0tyaXN0YWxsbWluZScsXHJcbiAgICBbQnVpbGRpbmdUeXBlLmNyeXN0YWxTdG9yYWdlXTogJ0tyaXN0YWxsc3BlaWNoZXInLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5kZXV0ZXJpdW1TeW50aGVzaXplcl06ICdEZXV0ZXJpdW0tU3ludGhldGlzaWVyZXInLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5kZXV0ZXJpdW1UYW5rXTogJ0RldXRlcml1bXRhbmsnLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5zb2xhclBsYW50XTogJ1NvbGFya3JhZnR3ZXJrJyxcclxuICAgIFtCdWlsZGluZ1R5cGUuZnVzaW9uUmVhY3Rvcl06ICdGdXNpb25za3JhZnR3ZXJrJyxcclxuICAgIFtCdWlsZGluZ1R5cGUucm9ib3RpY3NGYWN0b3J5XTogJ1JvYm90ZXJmYWJyaWsnLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5uYW5pdGVGYWN0b3J5XTogJ05hbml0ZW5mYWJyaWsnLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5zaGlweWFyZF06ICdSYXVtc2NoaWZmc3dlcmZ0JyxcclxuICAgIFtCdWlsZGluZ1R5cGUuc3BhY2VEb2NrXTogJ1JhdW1kb2NrJyxcclxuICAgIFtCdWlsZGluZ1R5cGUubWlzc2lsZVNpbG9dOiAnUmFrZXRlbnNpbG8nLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5yZXNlYXJjaExhYl06ICdGb3JzY2h1bmdzbGFib3InLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5hbGxpYW5jZURlcG90XTogJ0FsbGlhbnpkZXBvdCcsXHJcbiAgICBbQnVpbGRpbmdUeXBlLnRlcnJhZm9ybWVyXTogJ1RlcnJhZm9ybWVyJyxcclxuICAgIFtCdWlsZGluZ1R5cGUubHVuYXJCYXNlXTogJ01vbmRiYXNpcycsXHJcbiAgICBbQnVpbGRpbmdUeXBlLnNlbnNvclBoYWxhbnhdOiAnU2Vuc29ycGhhbGFueCcsXHJcbiAgICBbQnVpbGRpbmdUeXBlLmp1bXBHYXRlXTogJ1NwcnVuZ3RvcicsXHJcbn07IiwiaW1wb3J0IHsgUmVzZWFyY2hUeXBlIH0gZnJvbSBcIkAvc2hhcmVkL21vZGVscy9vZ2FtZS9yZXNlYXJjaC9SZXNlYXJjaFR5cGVcIjtcclxuaW1wb3J0IHsgUmVzZWFyY2hUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRlOiBSZXNlYXJjaFRyYW5zbGF0aW9ucyA9IHtcclxuICAgIFtSZXNlYXJjaFR5cGUuZW5lcmd5VGVjaG5vbG9neV06ICdFbmVyZ2lldGVjaG5paycsXHJcbiAgICBbUmVzZWFyY2hUeXBlLmxhc2VyVGVjaG5vbG9neV06ICdMYXNlcnRlY2huaWsnLFxyXG4gICAgW1Jlc2VhcmNoVHlwZS5pb25UZWNobm9sb2d5XTogJ0lvbmVudGVjaG5paycsXHJcbiAgICBbUmVzZWFyY2hUeXBlLmh5cGVyc3BhY2VUZWNobm9sb2d5XTogJ0h5cGVycmF1bXRlY2huaWsnLFxyXG4gICAgW1Jlc2VhcmNoVHlwZS5wbGFzbWFUZWNobm9sb2d5XTogJ1BsYXNtYXRlY2huaWsnLFxyXG4gICAgW1Jlc2VhcmNoVHlwZS5lc3Bpb25hZ2VUZWNobm9sb2d5XTogJ1NwaW9uYWdldGVjaG5paycsXHJcbiAgICBbUmVzZWFyY2hUeXBlLmNvbXB1dGVyVGVjaG5vbG9neV06ICdDb21wdXRlcnRlY2huaWsnLFxyXG4gICAgW1Jlc2VhcmNoVHlwZS5hc3Ryb3BoeXNpY3NdOiAnQXN0cm9waHlzaWsnLFxyXG4gICAgW1Jlc2VhcmNoVHlwZS5pbnRlcmdhbGFjdGljUmVzZWFyY2hOZXR3b3JrXTogJ0ludGVyZ2FsYWt0aXNjaGVzIEZvcnNjaHVuZ3NuZXR6d2VyaycsXHJcbiAgICBbUmVzZWFyY2hUeXBlLmdyYXZpdG9uVGVjaG5vbG9neV06ICdHcmF2aXRvbmZvcnNjaHVuZycsXHJcbiAgICBbUmVzZWFyY2hUeXBlLmNvbWJ1c3Rpb25Ecml2ZV06ICdWZXJicmVubnVuZ3N0cmllYndlcmsnLFxyXG4gICAgW1Jlc2VhcmNoVHlwZS5pbXB1bHNlRHJpdmVdOiAnSW1wdWxzdHJpZWJ3ZXJrJyxcclxuICAgIFtSZXNlYXJjaFR5cGUuaHlwZXJzcGFjZURyaXZlXTogJ0h5cGVycmF1bWFudHJpZWInLFxyXG4gICAgW1Jlc2VhcmNoVHlwZS53ZWFwb25zVGVjaG5vbG9neV06ICdXYWZmZW50ZWNobmlrJyxcclxuICAgIFtSZXNlYXJjaFR5cGUuc2hpZWxkaW5nVGVjaG5vbG9neV06ICdTY2hpbGR0ZWNobmlrJyxcclxuICAgIFtSZXNlYXJjaFR5cGUuYXJtb3JUZWNobm9sb2d5XTogJ1JhdW1zY2hpZmZwYW56ZXJ1bmcnLFxyXG59OyIsImltcG9ydCB7IExpZmVmb3JtVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuaW1wb3J0IHsgTGlmZWZvcm1UeXBlIH0gZnJvbSBcIkAvc2hhcmVkL21vZGVscy9vZ2FtZS9saWZlZm9ybXMvTGlmZWZvcm1UeXBlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZGU6IExpZmVmb3JtVHJhbnNsYXRpb25zID0ge1xyXG4gICAgW0xpZmVmb3JtVHlwZS5ub25lXTogJ0tlaW5lIExlYmVuc2Zvcm0nLFxyXG4gICAgW0xpZmVmb3JtVHlwZS5odW1hbnNdOiAnTWVuc2NoZW4nLFxyXG4gICAgW0xpZmVmb3JtVHlwZS5yb2NrdGFsXTogJ1JvY2tcXCd0YWwnLFxyXG4gICAgW0xpZmVmb3JtVHlwZS5tZWNoYXNdOiAnTWVjaGFzJyxcclxuICAgIFtMaWZlZm9ybVR5cGUua2FlbGVzaF06ICdLYWVsZXNoJyxcclxufTsiLCJpbXBvcnQgeyBMaWZlZm9ybUJ1aWxkaW5nc1RyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcbmltcG9ydCB7IExpZmVmb3JtQnVpbGRpbmdUeXBlIH0gZnJvbSBcIkAvc2hhcmVkL21vZGVscy9vZ2FtZS9saWZlZm9ybXMvTGlmZWZvcm1CdWlsZGluZ1R5cGVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBkZTogTGlmZWZvcm1CdWlsZGluZ3NUcmFuc2xhdGlvbnMgPSB7XHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUucmVzaWRlbnRpYWxTZWN0b3JdOiAnV29obnNla3RvcicsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuYmlvc3BoZXJlRmFybV06ICdCaW9zcGjDpHJlbi1GYXJtJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5yZXNlYXJjaENlbnRyZV06ICdGb3JzY2h1bmdzemVudHJ1bScsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuYWNhZGVteU9mU2NpZW5jZXNdOiAnQWthZGVtaWUgZGVyIFdpc3NlbnNjaGFmdGVuJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5uZXVyb0NhbGlicmF0aW9uQ2VudHJlXTogJ05ldXJvLUthbGlicmllcnVuZ3N6ZW50cnVtJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5oaWdoRW5lcmd5U21lbHRpbmddOiAnSG9jaGVuZXJnaWUtU2NobWVsemUnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmZvb2RTaWxvXTogJ05haHJ1bmdzc3BlaWNoZXInLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmZ1c2lvblBvd2VyZWRQcm9kdWN0aW9uXTogJ0Z1c2lvbnNiZXRyaWViZW5lIEbDtnJkZXJ1bmcnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLnNreXNjcmFwZXJdOiAnU2t5c2NyYXBlcicsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuYmlvdGVjaExhYl06ICdCaW90ZWNoLUxhYm9yJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5tZXRyb3BvbGlzXTogJ01ldHJvcG9saXMnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLnBsYW5ldGFyeVNoaWVsZF06ICdQbGFuZXRhci1TY2hpbGQnLFxyXG5cclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5tZWRpdGF0aW9uRW5jbGF2ZV06ICdNZWRpdGF0aW9uc2Vua2xhdmUnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmNyeXN0YWxGYXJtXTogJ0tyaXN0YWxsenVjaHQnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLnJ1bmVUZWNobm9sb2dpdW1dOiAnUnVuZW50ZWNobm9sb2dpa3VtJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5ydW5lRm9yZ2VdOiAnUnVuZW5zY2htaWVkZScsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUub3Jpa3Rvcml1bV06ICdPcmlrdG9yaXVtJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5tYWdtYUZvcmdlXTogJ01hZ21hLVNjaG1lbHplJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5kaXNydXB0aW9uQ2hhbWJlcl06ICdEaXNydXB0aW9uc2thbW1lcicsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUubWVnYWxpdGhdOiAnRmVsc2VubW9udW1lbnQnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmNyeXN0YWxSZWZpbmVyeV06ICdLcmlzdGFsbC1SYWZmaW5lcmllJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5kZXV0ZXJpdW1TeW50aGVzaXNlcl06ICdEZXV0ZXJpdW0tU3ludG9uaXNpZXJlcicsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUubWluZXJhbFJlc2VhcmNoQ2VudHJlXTogJ01pbmVyYWwtRm9yc2NodW5nc3plbnRydW0nLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmFkdmFuY2VkUmVjeWNsaW5nUGxhbnRdOiAnSG9jaGxlaXN0dW5ncy1WZXJ3ZXJ0dW5nc2FubGFnZScsXHJcblxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmFzc2VtYmx5TGluZV06ICdGZXJ0aWd1bmdzc3RyYcOfZScsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuZnVzaW9uQ2VsbEZhY3RvcnldOiAnRnVzaW9uc3plbGxlbi1GYWJyaWsnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLnJvYm90aWNzUmVzZWFyY2hDZW50cmVdOiAnUm9ib3Rpay1Gb3JzY2h1bmdzemVudHJ1bScsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUudXBkYXRlTmV0d29ya106ICdVcGRhdGUtTmV0endlcmsnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLnF1YW50dW1Db21wdXRlckNlbnRyZV06ICdRdWFudGVuLUNvbXB1dGVyemVudHJ1bScsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuYXV0b21hdGlzZWRBc3NlbWJseUNlbnRyZV06ICdBdXRvbWF0aXNpZXJ0ZXMgTW9udGFnZXplbnRydW0nLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmhpZ2hQZXJmb3JtYW5jZVRyYW5zZm9ybWVyXTogJ0hvY2hsZWlzdHVuZ3MtVHJhbnNmb3JtYXRvcicsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUubWljcm9jaGlwQXNzZW1ibHlMaW5lXTogJ01pa3JvY2hpcC1GZXJ0aWd1bmdzc3RyYcOfZScsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUucHJvZHVjdGlvbkFzc2VtYmx5SGFsbF06ICdGbGllw59iYW5kLU1vbnRhZ2VoYWxsZScsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuaGlnaFBlcmZvcm1hbmNlU3ludGhlc2lzZXJdOiAnSG9jaGxlaXN0dW5ncy1TeW50aGV0aXNpZXJlcicsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuY2hpcE1hc3NQcm9kdWN0aW9uXTogJ0NoaXAtTWFzc2VucHJvZHVrdGlvbicsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUubmFub1JlcGFpckJvdHNdOiAnTmFuby1SZXBhcmF0dXJib3RzJyxcclxuXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuc2FuY3R1YXJ5XTogJ1JlZnVnaXVtJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5hbnRpbWF0dGVyQ29uZGVuc2VyXTogJ0FudGltYXRlcmllLUtvbmRlbnNhdG9yJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS52b3J0ZXhDaGFtYmVyXTogJ1ZvcnRleGthbW1lcicsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuaGFsbHNPZlJlYWxpc2F0aW9uXTogJ0hhbGxlbiBkZXIgRXJrZW5udG5pcycsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuZm9ydW1PZlRyYW5zY2VuZGVuY2VdOiAnRm9ydW0gZGVyIFRyYW5zemVuZGVueicsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuYW50aW1hdHRlckNvbnZlY3Rvcl06ICdBbnRpbWF0ZXJpZS1Lb252ZWt0b3InLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmNsb25pbmdMYWJvcmF0b3J5XTogJ0tsb25sYWJvcicsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuY2hyeXNhbGlzQWNjZWxlcmF0b3JdOiAnQ2hyeXNhbGlzLUFremVsZXJhdG9yJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5iaW9Nb2RpZmllcl06ICdCaW8tTW9kaWZpa2F0b3InLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLnBzaW9uaWNNb2R1bGF0b3JdOiAnUHNpb25pc2NoZXIgTW9kdWxhdG9yJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5zaGlwTWFudWZhY3R1cmluZ0hhbGxdOiAnU2NoaWZmcy1GYWJyaWthdGlvbnNoYWxsZScsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuc3VwcmFSZWZyYWN0b3JdOiAnU3VwcmEtUmVmcmFrdG9yJyxcclxufTsiLCJpbXBvcnQgeyBMaWZlZm9ybVRlY2hub2xvZ2llc1RyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcbmltcG9ydCB7IExpZmVmb3JtVGVjaG5vbG9neVR5cGUgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL29nYW1lL2xpZmVmb3Jtcy9MaWZlZm9ybVRlY2hub2xvZ3lUeXBlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZGU6IExpZmVmb3JtVGVjaG5vbG9naWVzVHJhbnNsYXRpb25zID0ge1xyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuaW50ZXJnYWxhY3RpY0Vudm95c106ICdJbnRlcmdhbGFrdGlzY2hlIEJvdHNjaGFmdGVyJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmhpZ2hQZXJmb3JtYW5jZUV4dHJhY3RvcnNdOiAnSG9jaGxlaXN0dW5ncy1FeHRyYWt0b3JlbicsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5mdXNpb25Ecml2ZXNdOiAnRnVzaW9uc3RyaWVid2Vya2UnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuc3RlYWx0aEZpZWxkR2VuZXJhdG9yXTogJ1Rhcm5mZWxkLUdlbmVyYXRvcicsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5vcmJpdGFsRGVuXTogJ09yYml0YWwtVmVyc3RlY2snLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUucmVzZWFyY2hBSV06ICdGb3JzY2h1bmdzLUtJJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmhpZ2hQZXJmb3JtYW5jZVRlcnJhZm9ybWVyXTogJ0hvY2hsZWlzdHVuZ3MtVGVycmFmb3JtZXInLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZW5oYW5jZWRQcm9kdWN0aW9uVGVjaG5vbG9naWVzXTogJ1ZlcmJlc3NlcnRlIEbDtnJkZXJ1bmdzdGVjaG5vbG9naWVuJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmxpZ2h0RmlnaHRlck1rSUldOiAnTGVpY2h0ZXIgSsOkZ2VyIE1rIElJJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmNydWlzZXJNa0lJXTogJ0tyZXV6ZXIgTWsgSUknLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuaW1wcm92ZWRMYWJUZWNobm9sb2d5XTogJ1ZlcmJlc3NlcnRlIExhYm9ydGVjaG5paycsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5wbGFzbWFUZXJyYWZvcm1lcl06ICdQbGFzbWEtVGVycmFmb3JtZXInLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUubG93VGVtcGVyYXR1cmVEcml2ZXNdOiAnTmllZHJpZ3RlbXBlcmF0dXItVHJpZWJ3ZXJrZScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5ib21iZXJNa0lJXTogJ0JvbWJlciBNayBJSScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5kZXN0cm95ZXJNa0lJXTogJ1plcnN0w7ZyZXIgTWsgSUknLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuYmF0dGxlY3J1aXNlck1rSUldOiAnU2NobGFjaHRrcmV1emVyIE1rIElJJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnJvYm90QXNzaXN0YW50c106ICdSb2JvdGVyLUFzc2lzdGVudGVuJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnN1cGVyY29tcHV0ZXJdOiAnU3VwZXJjb21wdXRlcicsXHJcblxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUudm9sY2FuaWNCYXR0ZXJpZXNdOiAnVnVsa2FuaXNjaGUgQmF0dGVyaWVuJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmFjb3VzdGljU2Nhbm5pbmddOiAnQWt1c3Rpc2NoZSBTb25kaWVydW5nJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmhpZ2hFbmVyZ3lQdW1wU3lzdGVtc106ICdIb2NoZW5lcmdpZS1QdW1wc3lzdGVtZScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5jYXJnb0hvbGRFeHBhbnNpb25fQ2l2aWxpYW5TaGlwc106ICdMYWRlcmF1bS1FcndlaXRlcnVuZyAoWml2aWxlIFNjaGlmZmUpJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm1hZ21hUG93ZXJlZFByb2R1Y3Rpb25dOiAnTWFnbWFiZXRyaWViZW5lIEbDtnJkZXJ1bmcnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZ2VvdGhlcm1hbFBvd2VyUGxhbnRzXTogJ0dlb3RoZXJtaWUtS3JhZnR3ZXJrZScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5kZXB0aFNvdW5kaW5nXTogJ1RpZWZlbnNvbmRpZXJ1bmcnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuaW9uQ3J5c3RhbEVuaGFuY2VtZW50X2hlYXZ5RmlnaHRlcl06ICdJb25lbmtyaXN0YWxsLVZlcnN0w6Rya3VuZyAoU2Nod2VyZXIgSsOkZ2VyKScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5pbXByb3ZlZFN0ZWxsYXJhdG9yXTogJ1ZlcmJlc3NlcnRlciBTdGVsbGFyYXRvcicsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5oYXJkZW5lZERpYW1vbmREcmlsbEhlYWRzXTogJ0dlaMOkcnRldGUgRGlhbWFudC1Cb2hya8O2cGZlJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnNlaXNtaWNNaW5pbmdUZWNobm9sb2d5XTogJ1NlaXNtaXNjaGUgQWJiYXV0ZWNobm9sb2dpZW4nLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUubWFnbWFQb3dlcmVkUHVtcFN5c3RlbXNdOiAnTWFnbWFiZXRyaWViZW5lcyBQdW1wc3lzdGVtJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmlvbkNyeXN0YWxNb2R1bGVzXTogJ0lvbmVua3Jpc3RhbGwtTW9kdWxlJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm9wdGltaXNlZFNpbG9Db25zdHJ1Y3Rpb25NZXRob2RdOiAnT3B0aW1pZXJ0ZSBTaWxvLUJhdXdlaXNlJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmRpYW1vbmRFbmVyZ3lUcmFuc21pdHRlcl06ICdEaWFtYW50LUVuZXJnaWV0cmFuc21pdHRlcicsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5vYnNpZGlhblNoaWVsZFJlaW5mb3JjZW1lbnRdOiAnT2JzaWRpYW4tU2NoaWxkdmVyc3TDpHJrdW5nJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnJ1bmVTaGllbGRzXTogJ1J1bmVuc2NoaWxkZScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5yb2NrdGFsQ29sbGVjdG9yRW5oYW5jZW1lbnRdOiAnUm9ja2B0YWwtS29sbGVrdG9ydmVyc3TDpHJrdW5nJyxcclxuXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5jYXRhbHlzZXJUZWNobm9sb2d5XTogJ0thdGFseXNhdG9yLVRlY2huaWsnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUucGxhc21hRHJpdmVdOiAnUGxhc21hLUFudHJpZWInLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZWZmaWNpZW5jeU1vZHVsZV06ICdFZmZpemllbnotTW9kdWwnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZGVwb3RBSV06ICdEZXBvdC1LSScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW5lcmFsT3ZlcmhhdWxfbGlnaHRGaWdodGVyXTogJ0dlbmVyYWzDvGJlcmhvbHVuZyAoTGVpY2h0ZXIgSsOkZ2VyKScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5hdXRvbWF0ZWRUcmFuc3BvcnRMaW5lc106ICdBdXRvbWF0aXNpZXJ0ZSBGw7ZyZGVyc3RyYcOfZW4nLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuaW1wcm92ZWREcm9uZUFJXTogJ1ZlcmJlc3NlcnRlIERyb2huZW4tS0knLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZXhwZXJpbWVudGFsUmVjeWNsaW5nVGVjaG5vbG9neV06ICdFeHBlcmltZW50ZWxsZSBXaWVkZXJhdWZiZXJlaXR1bmdzdGVjaG5paycsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW5lcmFsT3ZlcmhhdWxfY3J1aXNlcl06ICdHZW5lcmFsw7xiZXJob2x1bmcgKEtyZXV6ZXIpJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnNsaW5nc2hvdEF1dG9waWxvdF06ICdTbGluZ3Nob3QtQXV0b3BpbG90JyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmhpZ2hUZW1wZXJhdHVyZVN1cGVyY29uZHVjdG9yc106ICdIb2NodGVtcGVyYXR1ci1TdXByYWxlaXRlcicsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW5lcmFsT3ZlcmhhdWxfYmF0dGxlc2hpcF06ICdHZW5lcmFsw7xiZXJob2x1bmcgKFNjaGxhY2h0c2NoaWZmKScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5hcnRpZmljaWFsU3dhcm1JbnRlbGxpZ2VuY2VdOiAnS8O8bnN0bGljaGUgU2Nod2FybWludGVsbGlnZW56JyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmdlbmVyYWxPdmVyaGF1bF9iYXR0bGVjcnVpc2VyXTogJ0dlbmVyYWzDvGJlcmhvbHVuZyAoU2NobGFjaHRrcmV1emVyKScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW5lcmFsT3ZlcmhhdWxfYm9tYmVyXTogJ0dlbmVyYWzDvGJlcmhvbHVuZyAoQm9tYmVyKScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW5lcmFsT3ZlcmhhdWxfZGVzdHJveWVyXTogJ0dlbmVyYWzDvGJlcmhvbHVuZyAoWmVyc3TDtnJlciknLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZXhwZXJpbWVudGFsV2VhcG9uc1RlY2hub2xvZ3ldOiAnRXhwZXJpbWVudGVsbGUgV2FmZmVudGVjaG5paycsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5tZWNoYW5HZW5lcmFsRW5oYW5jZW1lbnRdOiAnTWVjaGEtR2VuZXJhbHZlcnN0w6Rya3VuZycsXHJcblxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuaGVhdFJlY292ZXJ5XTogJ1fDpHJtZS1Sw7xja2dld2lubnVuZycsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5zdWxwaGlkZVByb2Nlc3NdOiAnU3VsZmlkLVByb3plc3N0ZWNobmlrJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnBzaW9uaWNOZXR3b3JrXTogJ1BzaW9uaXNjaGVzIE5ldHp3ZXJrJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnRlbGVraW5ldGljVHJhY3RvckJlYW1dOiAnVGVsZWtpbmVzZS1UcmFrdG9yc3RyYWhsJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmVuaGFuY2VkU2Vuc29yVGVjaG5vbG9neV06ICdWZXJiZXNzZXJ0ZSBTZW5zb3J0ZWNobmlrJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm5ldXJvbW9kYWxDb21wcmVzc29yXTogJ05ldXJvbW9kYWxlciBLb21wcmltYXRvcicsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5uZXVyb0ludGVyZmFjZV06ICdOZXVyby1JbnRlcmZhY2UnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuaW50ZXJwbGFuZXRhcnlBbmFseXNpc05ldHdvcmtdOiAnU3VwZXJnbG9iYWxlcyBBbmFseXNlbmV0endlcmsnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUub3ZlcmNsb2NraW5nX2hlYXZ5RmlnaHRlcl06ICfDnGJlcnRha3R1bmcgKFNjaHdlcmVyIErDpGdlciknLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUudGVsZWtpbmV0aWNEcml2ZV06ICdUZWxla2luZXRpc2NoZXMgU2NodWJzeXN0ZW0nLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuc2l4dGhTZW5zZV06ICdTZWNoc3RlciBTaW5uJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnBzeWNob2hhcm1vbmlzZXJdOiAnUHN5Y2hvLUhhcm1vbmlzaWVyZXInLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZWZmaWNpZW50U3dhcm1JbnRlbGxpZ2VuY2VdOiAnRWZmaXppZW50ZSBTY2h3YXJtaW50ZWxsaWdlbnonLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUub3ZlcmNsb2NraW5nX2xhcmdlQ2FyZ29dOiAnw5xiZXJ0YWt0dW5nIChHcm/Dn2VyIFRyYW5zcG9ydGVyKScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5ncmF2aXRhdGlvblNlbnNvcnNdOiAnR3Jhdml0YXRpb25zc2Vuc29yZW4nLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUub3ZlcmNsb2NraW5nX2JhdHRsZXNoaXBdOiAnw5xiZXJ0YWt0dW5nIChTY2hsYWNodHNjaGlmZiknLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUucHNpb25pY1NoaWVsZE1hdHJpeF06ICdQc2lvbmlzY2hlIFNjaHV0em1hdHJpeCcsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5rYWVsZXNoRGlzY292ZXJlckVuaGFuY2VtZW50XTogJ0thZWxlc2gtRW50ZGVja2VydmVyc3TDpHJrdW5nJyxcclxufTsiLCJpbXBvcnQgeyBQcmVtaXVtVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBkZTogUHJlbWl1bVRyYW5zbGF0aW9ucyA9IHtcclxuICAgIGRhcmtNYXR0ZXI6ICdEdW5rbGUgTWF0ZXJpZScsXHJcbn07IiwiaW1wb3J0IHsgU2V0dGluZ3NUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZGU6IFNldHRpbmdzVHJhbnNsYXRpb25zID0ge1xyXG4gICAgdGFiczoge1xyXG4gICAgICAgIGRhdGVSYW5nZXM6ICdEYXR1bXNiZXJlaWNoZScsXHJcbiAgICAgICAgY29sb3JzOiAnRmFyYmVuJyxcclxuICAgICAgICBjb21tb246ICdBbGxnZW1laW4nLFxyXG4gICAgICAgIGltcG9ydEV4cG9ydDogJ0ltcG9ydC9FeHBvcnQnLFxyXG4gICAgICAgIGV4cGVkaXRpb25zOiAnRXhwZWRpdGlvbmVuJyxcclxuICAgICAgICBjb21iYXRzOiAnS8OkbXBmZScsXHJcbiAgICAgICAgZGVicmlzRmllbGRzOiAnVHLDvG1tZXJmZWxkZXInLFxyXG4gICAgICAgIHJlc291cmNlQmFsYW5jZTogJ1JvaHN0b2ZmYmlsYW56JyxcclxuICAgICAgICB1bml2ZXJzZUhpc3Rvcnk6ICdVbml2ZXJzdW1zaGlzdG9yaWUnLFxyXG4gICAgICAgIGRhbmdlclpvbmU6ICdHZWZhaHJlbnpvbmUnLFxyXG4gICAgICAgIGFjY2Vzc2JpbGl0eTogJ0JhcnJpZXJlZnJlaWhlaXQnLFxyXG4gICAgICAgIGxpbmtBY2NvdW50czogJ0FjY291bnRzIHZlcmtuw7xwZmVuJyxcclxuXHJcbiAgICAgICAgbWlncmF0ZU9sZERhdGE6ICdBbHRkYXRlbiBtaWdyaWVyZW4nLFxyXG4gICAgfSxcclxuICAgIGRhdGVSYW5nZXM6IHtcclxuICAgICAgICBkZWZhdWx0TmFtZXM6IHtcclxuICAgICAgICAgICAgdG9kYXk6ICdIZXV0ZScsXHJcbiAgICAgICAgICAgIHllc3RlcmRheTogJ0dlc3Rlcm4nLFxyXG4gICAgICAgICAgICBjdXJyZW50V2VlazogJ0FrdHVlbGxlIFdvY2hlJyxcclxuICAgICAgICAgICAgbGFzdFdlZWs6ICdMZXR6dGUgV29jaGUnLFxyXG4gICAgICAgICAgICBjdXJyZW50TW9udGg6ICdBa3R1ZWxsZXIgTW9uYXQnLFxyXG4gICAgICAgICAgICBuZXdSYW5nZTogJ05ldWVyIEJlcmVpY2gnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2luY2U6IChkYXRlKSA9PiBgU2VpdCAke2RhdGV9YCxcclxuICAgICAgICBmaXJzdERheVRlbXBsYXRlOiAnPGVyc3RlciBUYWc+JyxcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgIGxhYmVsOiAnQmVuZW5udW5nJyxcclxuICAgICAgICAgICAgdHlwZTogJ1R5cCcsXHJcbiAgICAgICAgICAgIHJhbmdlU3RhcnQ6ICdCZXJlaWNoIHN0YXJ0ZXQgdm9yJyxcclxuICAgICAgICAgICAgcmFuZ2VDb250YWluczogJ0JlcmVpY2ggZW50aMOkbHQnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGF5OiAnVGFnJyxcclxuICAgICAgICBkYXlzOiAnVGFnJyxcclxuICAgICAgICBkYXlzQWdvOiAnVGFnZW4nLFxyXG4gICAgICAgIHdlZWs6ICdXb2NoZScsXHJcbiAgICAgICAgd2Vla3M6ICdXb2NoZW4nLFxyXG4gICAgICAgIHdlZWtzQWdvOiAnV29jaGVuJyxcclxuICAgICAgICBtb250aDogJ01vbmF0JyxcclxuICAgICAgICBtb250aHM6ICdNb25hdGUnLFxyXG4gICAgICAgIG1vbnRoc0FnbzogJ01vbmF0ZW4nLFxyXG4gICAgICAgIHllYXI6ICdKYWhyJyxcclxuICAgICAgICB5ZWFyczogJ0phaHJlJyxcclxuICAgICAgICB5ZWFyc0FnbzogJ0phaHJlbicsXHJcbiAgICB9LFxyXG4gICAgY29sb3JzOiB7XHJcbiAgICAgICAgY29tYmF0UmVzdWx0czogJ0thbXBmZXJnZWJuaXMnLFxyXG4gICAgICAgIGV4cGVkaXRpb25FdmVudHM6ICdFeHBlZGl0aW9uc2VyZWlnbmlzc2UnLFxyXG4gICAgICAgIGV4cGVkaXRpb25FdmVudFNpemVzOiAnRXJlaWduaXNncsO2w59lbicsXHJcbiAgICAgICAgZXhwZWRpdGlvbkRlcGxldGlvbkxldmVsczogJ1N5c3RlbWF1c2xhc3R1bmcnLFxyXG4gICAgICAgIGxpZmVmb3JtRGlzY292ZXJpZXM6ICdFbnRkZWNrdW5nc21pc3Npb25lbicsXHJcbiAgICAgICAgbGlmZWZvcm1zOiAnTGViZW5zZm9ybWVuJyxcclxuICAgICAgICByZXNvdXJjZXM6ICdSb2hzdG9mZmUnLFxyXG4gICAgICAgIHNoaXBzOiAnU2NoaWZmZScsXHJcbiAgICB9LFxyXG4gICAgY29tbW9uOiB7XHJcbiAgICAgICAgZXh0ZW5zaW9uTGFuZ3VhZ2U6ICdVSS1TcHJhY2hlIChpbSBPR2FtZSBUcmFja2VyKScsXHJcbiAgICAgICAgZXh0ZW5zaW9uTGFuZ3VhZ2VGYWxsYmFja0hpbnQ6ICdTb2xsdGVuIFRleHRlIG5pY2h0IGluIGRlciBnZXfDpGhsdGVuIFNwcmFjaGUgdmVyZsO8Z2JhciBzZWluLCB3ZXJkZW4gZW5nbGlzY2hlIFRleHRlIGFuZ2V6ZWlndC4nLFxyXG4gICAgICAgIGNvbnZlcnNpb25SYXRlczoge1xyXG4gICAgICAgICAgICB0aXRsZTogJ1VtcmVjaG51bmdza3Vyc2UnLFxyXG4gICAgICAgICAgICBtc3VMb25nOiAnVW1yZWNobnVuZyBuYWNoIE1ldGFsbCcsXHJcbiAgICAgICAgICAgIGRzdUxvbmc6ICdVbXJlY2hudW5nIG5hY2ggRGV1dGVyaXVtJyxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXJ2ZXJTZXR0aW5nczoge1xyXG4gICAgICAgICAgICB0aXRsZTogJ1NlcnZlcmRhdGVuJyxcclxuICAgICAgICAgICAgbGFzdFVwZGF0ZTogJ0xldHp0ZSBBa3R1YWxpc2llcnVuZycsXHJcbiAgICAgICAgICAgIGZvcmNlVXBkYXRlOiAnU2VydmVyZGF0ZW4gYWt0dWFsaXNpZXJlbicsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBleHBlZGl0aW9uczoge1xyXG4gICAgICAgIHJlc291cmNlVW5pdEZhY3RvcnNPZlNoaXBGb3VuZE9uRXhwZWRpdGlvbnM6ICdGYWt0b3JlbiBkZXIgUm9oc3RvZmZlaW5oZWl0ZW4gYXVmIEV4cGVkaXRpb25lbiBnZWZ1bmRlbmVyIFNjaGlmZmUnLFxyXG4gICAgfSxcclxuICAgIGNvbWJhdHM6IHtcclxuICAgICAgICByZXNvdXJjZVVuaXRGYWN0b3JzT2ZMb3N0U2hpcHM6ICdGYWt0b3JlbiBkZXIgUm9oc3RvZmZlaW5oZWl0ZW4gaW4gS8OkbXBmZW4gdmVybG9yZW5lciBTY2hpZmZlJyxcclxuICAgICAgICBpZ25vcmVFc3Bpb25hZ2VDb21iYXRzOiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnU3Bpb25hZ2Vrw6RtcGZlIGlnbm9yaWVyZW4nLFxyXG4gICAgICAgICAgICBsYWJlbDogJ1NwaW9uYWdlLUthbXBmYmVyaWNodGUgZsO8ciBkYXMgVHJhY2tpbmcgaWdub3JpZXJlbicsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICByZXNvdXJjZUJhbGFuY2U6IHtcclxuICAgICAgICBkZXRhaWxlZFJlc291cmNlQmFsYW5jZToge1xyXG4gICAgICAgICAgICBoZWFkZXI6ICdEZXRhaWxsaWVydGUgUm9oc3RvZmZiaWxhbnonLFxyXG4gICAgICAgICAgICBjaGVja2JveExhYmVsOiAnZGV0YWlsbGllcnRlIEFuemVpZ2UgZGVyIFJvaHN0b2ZmYmlsYW56JyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGluY2x1ZGVTaGlwc0ZvdW5kT25FeHBlZGl0aW9uczoge1xyXG4gICAgICAgICAgICBoZWFkZXI6ICdBdWYgRXhwZWRpdGlvbmVuIGdlZnVuZGVuZSBTY2hpZmZlJyxcclxuICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ1JvaHN0b2ZmZWluaGVpdGVuIGF1ZiBFeHBlZGl0aW9uZW4gZ2VmdW5kZW5lciBTY2hpZmZlIGluIGRpZSBSb2hzdG9mZmJpbGFueiBlaW5iZXppZWhlbicsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbmNsdWRlU2hpcHNMb3N0SW5Db21iYXRzOiB7XHJcbiAgICAgICAgICAgIGhlYWRlcjogJ0luIEvDpG1wZmVuIHZlcmxvcmVuZSBTY2hpZmZlJyxcclxuICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ1JvaHN0b2ZmZWluaGVpdGVuIGluIEvDpG1wZmVuIHZlcmxvcmVuZXIgU2NoaWZmZSBpbiBkaWUgUm9oc3RvZmZiaWxhbnogZWluYmV6aWVoZW4nLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5jbHVkZUxvc3RMb290UmVzb3VyY2VzOiB7XHJcbiAgICAgICAgICAgIGhlYWRlcjogJ0luIEvDpG1wZmVuIHZlcmxvcmVuZSBSb2hzdG9mZmUnLFxyXG4gICAgICAgICAgICBjaGVja2JveExhYmVsOiAnaW4gS8OkbXBmZW4gdmVybG9yZW5lIFJvaHN0b2ZmZWluaGVpdGVuIGluIGRpZSBSb2hzdG9mZmJpbGFueiBlaW5iZXppZWhlbicsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBzaG93Q29udmVydGVkVW5pdHNJblRhYmxlczoge1xyXG4gICAgICAgIHRpdGxlOiAnTVNFL0RTRSBpbiBUYWJlbGxlbicsXHJcbiAgICAgICAgbGFiZWw6ICdVbWdlcmVjaG5ldGUgTVNFL0RTRS1XZXJ0ZSBpbiBUYWJlbGxlbiBhbnplaWdlbicsXHJcblxyXG4gICAgICAgIGluZm9BbW9ydGl6YXRpb246ICdBbW90aXNhdGlvbnN6ZWl0IHdpcmQgd2VpdGVyaGluIGFuaGFuZCB2b24gS29zdGVuIHVuZCBQcm9kdWt0aW9uIGluIE1TRS9EU0UgZXJyZWNobmV0JyxcclxuICAgIH0sXHJcblxyXG4gICAgcmVzZXQ6ICdFaW5zdGVsbHVuZ2VuIHp1csO8Y2tzZXR6ZW4nLFxyXG4gICAgc2V0RGVmYXVsdFJvdXRlOiAnYWxzIFN0YW5kYXJkYXVzd2FobCBmZXN0bGVnZW4nLFxyXG4gICAgc2V0RGVmYXVsdFN1YlJvdXRlOiAnYWxzIFN0YW5kYXJkYXVzd2FobCBmw7xyIGRpZXNlbiBCZXJlaWNoIGF1c3fDpGhsZW4nLFxyXG5cclxuICAgIGRhbmdlclpvbmU6IHtcclxuICAgICAgICBkb1lvdVdhbnRUb0NvbnRpbnVlOiAnQklTVCBEVSBTSUNIRVIsIERBU1MgRFUgRk9SVEZBSFJFTiBXSUxMU1Q/JyxcclxuXHJcbiAgICAgICAgZGVsZXRlRXhwZWRpdGlvbnM6IHtcclxuICAgICAgICAgICAgYnV0dG9uOiAoYWNjb3VudDogc3RyaW5nKSA9PiBgQWxsZSBnZXRyYWNrdGVuIEV4cGVkaXRpb25lbiBkZXMgYWt0dWVsbCBnZXfDpGhsdGVuIEFjY291bnRzICgke2FjY291bnR9KSBlbnRmZXJuZW5gLFxyXG4gICAgICAgICAgICBjb25maXJtYXRpb25UZXh0OiAoYWNjb3VudDogc3RyaW5nLCBjb3VudDogc3RyaW5nKSA9PiBgTmFjaCBkZW0gQmVzdMOkdGlnZW4gZGllc2VyIEFrdGlvbiB3ZXJkZW4gYWxsZSAke2NvdW50fSBnZXRyYWNrdGVuIEV4cGVkaXRpb25lbiBkZXMgYWt0dWVsbCBnZXfDpGhsdGVuIEFjY291bnRzICgke2FjY291bnR9KSBnZWzDtnNjaHQuYCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlbGV0ZUNvbWJhdHM6IHtcclxuICAgICAgICAgICAgYnV0dG9uOiAoYWNjb3VudDogc3RyaW5nKSA9PiBgQWxsZSBnZXRyYWNrdGVuIEvDpG1wZmUgZGVzIGFrdHVlbGwgZ2V3w6RobHRlbiBBY2NvdW50cyAoJHthY2NvdW50fSkgZW50ZmVybmVuYCxcclxuICAgICAgICAgICAgY29uZmlybWF0aW9uVGV4dDogKGFjY291bnQ6IHN0cmluZywgY291bnQ6IHN0cmluZykgPT4gYE5hY2ggZGVtIEJlc3TDpHRpZ2VuIGRpZXNlciBBa3Rpb24gd2VyZGVuIGFsbGUgJHtjb3VudH0gZ2V0cmFja3RlbiBLw6RtcGZlIGRlcyBha3R1ZWxsIGdld8OkaGx0ZW4gQWNjb3VudHMgKCR7YWNjb3VudH0pIGdlbMO2c2NodC5gLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGVsZXRlRGVicmlzRmllbGRSZXBvcnRzOiB7XHJcbiAgICAgICAgICAgIGJ1dHRvbjogKGFjY291bnQ6IHN0cmluZykgPT4gYEFsbGUgZ2V0cmFja3RlbiBURi1BYmJhdWJlcmljaHRlIGRlcyBha3R1ZWxsIGdld8OkaGx0ZW4gQWNjb3VudHMgKCR7YWNjb3VudH0pIGVudGZlcm5lbmAsXHJcbiAgICAgICAgICAgIGNvbmZpcm1hdGlvblRleHQ6IChhY2NvdW50OiBzdHJpbmcsIGNvdW50OiBzdHJpbmcpID0+IGBOYWNoIGRlbSBCZXN0w6R0aWdlbiBkaWVzZXIgQWt0aW9uIHdlcmRlbiBhbGxlICR7Y291bnR9IGdldHJhY2t0ZW4gVEYtQWJiYXViZXJpY2h0ZSBkZXMgYWt0dWVsbCBnZXfDpGhsdGVuIEFjY291bnRzICgke2FjY291bnR9KSBnZWzDtnNjaHQuYCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlbGV0ZUFjY291bnQ6IHtcclxuICAgICAgICAgICAgYnV0dG9uOiAoYWNjb3VudDogc3RyaW5nKSA9PiBgQWxsZSBEYXRlbiBkZXMgYWt0dWVsbCBnZXfDpGhsdGVuIEFjY291bnRzICgke2FjY291bnR9KSBlbnRmZXJuZW5gLFxyXG4gICAgICAgICAgICBjb25maXJtYXRpb25UZXh0OiAoYWNjb3VudDogc3RyaW5nKSA9PiBgTmFjaCBkZW0gQmVzdMOkdGlnZW4gZGllc2VyIEFrdGlvbiB3ZXJkZW4gYWxsZSBnZXNwZWljaGVydGVuIERhdGVuIGRlcyBha3R1ZWxsIGdld8OkaGx0ZW4gQWNjb3VudHMgKCR7YWNjb3VudH0pIGdlbMO2c2NodC5cXG5gXHJcbiAgICAgICAgICAgICAgICArIGBEaWVzIGJlaW5oYWx0ZXQgZGllIGdldHJhY2t0ZSBVbml2ZXJzdW1zaGlzdG9yaWUgZGllc2VzIFNlcnZlcnMgc29mZXJuIGtlaW4gYW5kZXJlciBBY2NvdW50IGbDvHIgZGllc2VuIFNlcnZlciBnZXRyYWNrdCBpc3QuYCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlbGV0ZVVuaXZlcnNlSGlzdG9yeToge1xyXG4gICAgICAgICAgICBidXR0b246IChzZXJ2ZXI6IHN0cmluZykgPT4gYFVuaXZlcnN1bXNoaXN0b3JpZSBkZXMgYWt0dWVsbCBnZXfDpGhsdGVuIFVuaXZlcnN1bXMgKCR7c2VydmVyfSkgZW50ZmVybmVuYCxcclxuICAgICAgICAgICAgY29uZmlybWF0aW9uVGV4dDogKHNlcnZlcjogc3RyaW5nKSA9PiBgTmFjaCBkZW0gQmVzdMOkdGlnZW4gZGllc2VyIEFrdGlvbiB3ZXJkZW4gYWxsZSBnZXRyYWNrdGVuIERhdGVuIHp1ciBVbml2ZXJzdW1zaGlzdG9yaWUgZGVzIGFrdHVlbGwgZ2V3w6RobHRlbiBVbml2ZXJzdW1zICgke3NlcnZlcn0pIGdlbMO2c2NodC5gLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGVsZXRlRXZlcnl0aGluZzoge1xyXG4gICAgICAgICAgICBidXR0b246ICdBbGxlIERhdGVuIGVudGZlcm5lbicsXHJcbiAgICAgICAgICAgIGNvbmZpcm1hdGlvblRleHQxOiBgTmFjaCBkZW0gQmVzdMOkdGlnZW4gZGllc2VyIEFrdGlvbiB3ZXJkZW4gYWxsZSBEYXRlbiBnZWzDtnNjaHQuXFxuYFxyXG4gICAgICAgICAgICAgICAgKyAnRGFzIGhlacOfdCwgYWxsZSBEYXRlbiBpbmtsdXNpdmUgZ2V0cmFja3RlciBFeHBlZGl0aW9uZW4sIEvDpG1wZmUsIFRGLUFiYmF1YmVyaWNodGUsIFVuaXZlcnN1bXNoaXN0b3JpZSB1bmQgbWVociwgd2VyZGVuIGVudGZlcm50LicsXHJcbiAgICAgICAgICAgIGNvbmZpcm1hdGlvblRleHQyOiAnQml0dGUgYmVzdMOkdGlnZSBlcm5ldXQsIGRhc3MgZHUgYWxsZSBEYXRlbiBsw7ZzY2hlbiBtw7ZjaHRlc3QuJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuXHJcbiAgICBpbXBvcnRFeHBvcnQ6IHtcclxuICAgICAgICBleHBvcnQ6IHtcclxuICAgICAgICAgICAgaGVhZGVyOiAnRXhwb3J0JyxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdIaWVyIGthbm5zdCBkdSBkZWluZSBEYXRlbiBleHBvcnRpZXJlbi4gRGVyIEV4cG9ydCBlbnRow6RsdCBhbGxlIHJlbGV2YW50ZW4gRGF0ZW4gZGVpbmVyIGdldHJhY2t0ZW4gQWNjb3VudHMgdW5kIGRhenVnZWjDtnJpZ2VuIFNlcnZlcm4uJyxcclxuICAgICAgICAgICAgaW5jbHVkZVVuaXZlcnNlSGlzdG9yeTogJ2F1Y2ggVW5pdmVyc3Vtc2hpc3RvcmllIGV4cG9ydGllcmVuIChrYW5uIGRpZSBEYXRlaWdyw7bDn2UgdW5kIEltcG9ydHplaXQgZGV1dGxpY2ggZXJow7ZoZW4hKScsXHJcbiAgICAgICAgICAgIGJ1dHRvbjogJ0V4cG9ydCBzdGFydGVuJyxcclxuICAgICAgICAgICAgd2FpdDogJ0JpdHRlIHdhcnRlIHfDpGhyZW5kIGRlaW5lIERhdGVuIGbDvHIgZGVuIEV4cG9ydCB2b3JiZXJlaXRldCB3ZXJkZW4uLi4nLFxyXG5cclxuICAgICAgICAgICAgZXJyb3JzOiB7XHJcbiAgICAgICAgICAgICAgICB1bmV4cGVjdGVkRXJyb3I6ICdFaW4gdW5lcndhcnRldGVyIEZlaGxlciBpc3Qgd8OkaHJlbmQgZGVzIEV4cG9ydHMgYXVmZ2V0cmV0ZW4uJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGltcG9ydDoge1xyXG4gICAgICAgICAgICBoZWFkZXI6ICdJbXBvcnQnLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0hpZXIga2FubnN0IGR1IGRlaW5lIERhdGVuIGF1cyBlaW5lciBEYXRlaSBpbXBvcnRpZXJlbi4gQml0dGUgd8OkaGxlIGRpZSBJbXBvcnRkYXRlaS4nLFxyXG4gICAgICAgICAgICBidXR0b246ICdJbXBvcnQgc3RhcnRlbicsXHJcbiAgICAgICAgICAgIHdhaXQ6ICdCaXR0ZSB3YXJ0ZSB3w6RocmVuZCBkZWluZSBEYXRlbiBpbXBvcnRpZXJ0IHdlcmRlbi4uLicsXHJcblxyXG4gICAgICAgICAgICBlcnJvcnM6IHtcclxuICAgICAgICAgICAgICAgIGludmFsaWRGb3JtYXQ6ICdEYXMgRGF0ZWlmb3JtYXQgaXN0IHVuZ8O8bHRpZy4nLFxyXG4gICAgICAgICAgICAgICAgdW5leHBlY3RlZEVycm9yOiAnRWluIHVuZXJ3YXJ0ZXRlciBGZWhsZXIgaXN0IHfDpGhyZW5kIGRlcyBJbXBvcnRzIGF1ZmdldHJldGVuLicsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW1wb3J0Q2FsbGJhY2tzOiB7XHJcbiAgICAgICAgICAgIGltcG9ydGluZ1NldHRpbmdzOiAnRWluc3RlbGx1bmdlbiB3ZXJkZW4gaW1wb3JpZXJ0JyxcclxuICAgICAgICAgICAgaW1wb3J0aW5nQmFzaWNEYXRhOiAnR3J1bmRsZWdlbmRlIEFjY291bnQtIHVuZCBTZXJ2ZXItSW5mb3JtYXRpb25lbiB3ZXJkZW4gaW1wb3J0aWVydCcsXHJcbiAgICAgICAgICAgIGltcG9ydGluZ1VuaXZlcnNlSGlzdG9yaWVzOiAoXHJcbiAgICAgICAgICAgICAgICBzZXJ2ZXJJbmRleDogbnVtYmVyLCBcclxuICAgICAgICAgICAgICAgIHNlcnZlclRvdGFsOiBudW1iZXIsIFxyXG4gICAgICAgICAgICAgICAgZW50cnlJbmRleDogbnVtYmVyLCBcclxuICAgICAgICAgICAgICAgIGVudHJ5VG90YWw6IG51bWJlcixcclxuICAgICAgICAgICAgKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBiYXNlTWVzc2FnZSA9ICdVbml2ZXJzdW1zaGlzdG9yaWVuIHdlcmRlbiBpbXBvcnRpZXJ0JztcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7YmFzZU1lc3NhZ2V9IChTZXJ2ZXIgJHtzZXJ2ZXJJbmRleCArIDF9LyR7c2VydmVyVG90YWx9LCBFaW50cmFnICR7ZW50cnlJbmRleCArIDF9LyR7ZW50cnlUb3RhbH0pYDsgICAgICBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW1wb3J0aW5nQWNjb3VudHM6IChcclxuICAgICAgICAgICAgICAgIGFjY291bnRJbmRleDogbnVtYmVyLCBcclxuICAgICAgICAgICAgICAgIHRvdGFsQWNjb3VudHM6IG51bWJlciwgXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnYWNjb3VudCcgfCAnY29tYmF0LXJlcG9ydHMnIHwgJ2V4cGVkaXRpb25zJyB8ICdkZWJyaXMtZmllbGRzJyB8ICdsaWZlZm9ybS1kaXNjb3ZlcmllcycgfCAndW5pdmVyc2Utc3BlY2lmaWMtc2V0dGluZ3MnIHwgJ2VtcGlyZS5kYXRhJyB8ICdlbXBpcmUucGxhbmV0cycgfCAnZW1waXJlLm1vb25zJyxcclxuICAgICAgICAgICAgICAgIHN0ZXBJbmRleDogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgc3RlcFRvdGFsOiBudW1iZXIsXHJcbiAgICAgICAgICAgICkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmFzZU1lc3NhZ2UgPSBgQWNjb3VudHMgd2VyZGVuIGltcG9ydGllcnRgO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWNjb3VudFByb2dyZXNzID0gYCR7YWNjb3VudEluZGV4ICsgMX0vJHt0b3RhbEFjY291bnRzfWA7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYodHlwZSA9PSAnYWNjb3VudCcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7YmFzZU1lc3NhZ2V9ICgke2FjY291bnRQcm9ncmVzc30pYDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZih0eXBlID09ICdjb21iYXQtcmVwb3J0cycpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7YmFzZU1lc3NhZ2V9ICgke2FjY291bnRQcm9ncmVzc30sIEthbXBmICR7c3RlcEluZGV4ICsgMX0vJHtzdGVwVG90YWx9KWA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYodHlwZSA9PSAnZXhwZWRpdGlvbnMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke2Jhc2VNZXNzYWdlfSAoJHthY2NvdW50UHJvZ3Jlc3N9LCBFeHBlZGl0aW9uICR7c3RlcEluZGV4ICsgMX0vJHtzdGVwVG90YWx9KWA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYodHlwZSA9PSAnZGVicmlzLWZpZWxkcycpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7YmFzZU1lc3NhZ2V9ICgke2FjY291bnRQcm9ncmVzc30sIFRGLUJlcsOtY2h0ICR7c3RlcEluZGV4ICsgMX0vJHtzdGVwVG90YWx9KWA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYodHlwZSA9PSAnbGlmZWZvcm0tZGlzY292ZXJpZXMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke2Jhc2VNZXNzYWdlfSAoJHthY2NvdW50UHJvZ3Jlc3N9LCBMRi1NaXNzaW9uICR7c3RlcEluZGV4ICsgMX0vJHtzdGVwVG90YWx9KWA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYodHlwZSA9PSAnZW1waXJlLmRhdGEnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke2Jhc2VNZXNzYWdlfSAoJHthY2NvdW50UHJvZ3Jlc3N9LCBncnVuZGxlZ2VuZGUgSW1wZXJpdW1zZGF0ZW4pYDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZih0eXBlID09ICdlbXBpcmUucGxhbmV0cycpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7YmFzZU1lc3NhZ2V9ICgke2FjY291bnRQcm9ncmVzc30sIFBsYW5ldCAke3N0ZXBJbmRleCArIDF9LyR7c3RlcFRvdGFsfSlgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYodHlwZSA9PSAnZW1waXJlLm1vb25zJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtiYXNlTWVzc2FnZX0gKCR7YWNjb3VudFByb2dyZXNzfSwgTW9uZCAke3N0ZXBJbmRleCArIDF9LyR7c3RlcFRvdGFsfSlgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKHR5cGUgPT0gJ3VuaXZlcnNlLXNwZWNpZmljLXNldHRpbmdzJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtiYXNlTWVzc2FnZX0gKCR7YWNjb3VudFByb2dyZXNzfSwgdW5pdmVyc3Vtc3NwZXppZmlzY2hlIEVpbnN0ZWxsdW5nZW4pYDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdHlwZSAnJHt0eXBlfSdgKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIGFjY2Vzc2liaWxpdHk6IHtcclxuICAgICAgICBzaG93U2ltcGxpZmllZFJlc3VsdHM6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICdWZXJlaW5mYWNodGUgQW5zaWNodCcsXHJcbiAgICAgICAgICAgIGxhYmVsOiAnVmVyZWluZmFjaHRlIEFuc2ljaHQsIHZlcnN0ZWNrdCBPcmlnaW5hbHRleHRlIHZvbiBFeHBlZGl0aW9uc2VyZ2Vibmlzc2VuIHVuZCBURi1BYmJhdWJlcmljaHRlbiwgdW5kIHplaWd0IEljb25zIGFuc3RhdHQgVGV4dGVuIGluIGRlbiBCZW5hY2hyaWNodGlndW5nZW4uJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuXHJcbiAgICBkZWJyaXNGaWVsZHM6IHtcclxuICAgICAgICBzZXBhcmF0ZUV4cGVkaXRpb25EZWJyaXNGaWVsZHM6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICdURnMgdm9uIFBvc2l0aW9uIDE2IHNlcGFyYXQgYW56ZWlnZW4nLFxyXG4gICAgICAgICAgICBsYWJlbDogJ1RGcyB2b24gUG9zaXRpb24gMTYgc2VwYXJhdCBhbnplaWdlbicsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcblxyXG4gICAgbGlua0FjY291bnRzOiB7XHJcbiAgICAgICAgaGVhZGVyOiAoYWNjb3VudDogc3RyaW5nKSA9PiBgQWNjb3VudHMgbWl0IGRlbSBha3R1ZWxsZW4gQWNjb3VudCAoJHthY2NvdW50fSkgdmVya27DvHBmZW5gLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uSHRtbDogKGFjY291bnQ6IHN0cmluZykgPT5cclxuICAgICAgICAgICAgYEhpZXIgc29sbHRlbiBudXIgQWNjb3VudHMgbWl0ZWluYW5kZXIgdmVya27DvHBmdCB3ZXJkZW4sIHdlbm4gZGllIERhdGVuIGRlciBnZXfDpGhsdGVuIEFjY291bnRzIGFscyBEYXRlbiBkZXMgYWt0dWVsbGVuIEFjY291bnRzICgke2FjY291bnR9KSBiZWhhbmRlbHQgd2VyZGVuIHNvbGxlbi48YnIvPmBcclxuICAgICAgICAgICAgKyBgRGllcyBpc3QgenVtIEJlaXNwaWVsIGdld8O8bnNjaHQsIHdlbm4gZWluIEFjY291bnQgYXVmZ3J1bmQgZWluZXIgRnVzaW9uIHZvbiBlaW5lbSBTZXJ2ZXIgYXVmIGVpbmVuIGFuZGVyZW4gdmVyc2Nob2JlbiB3dXJkZSB1bmQgc29taXQgaW0gVHJhY2tlciBhbHMgc2VwYXJhdGVyIEFjY291bnQgYmVoYW5kZWx0IHdpcmQsIGBcclxuICAgICAgICAgICAgKyBgYWJlciBic3B3LiBkaWUgRXhwZWRpdGlvbmVuIGRlcyB1cnNwcsO8Z25saWNoZW4gQWNjb3VudHMgd2VpdGVyaGluIGFuZ2V6ZWlndCB3ZXJkZW4gc29sbGVuLjxici8+PGJyLz5gXHJcbiAgICAgICAgICAgICsgYEJlaXNwaWVsOiA8YnIvPmBcclxuICAgICAgICAgICAgKyBgPG9sPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaT5kZXIgU3BpZWxlciBcIk9HYW1lIFByb2ZpXCIgc3BpZWx0IGF1ZiBkZW0gU2VydmVyIFwiREUgTWlsY2hzdHJhw59lXCI8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaT5kZXIgU2VydmVyIFwiREUgTWlsY2hzdHJhw59lXCIgd2lyZCBudW4gRXhvZHVzdW5pIGJlaSBlaW5lciBGdXNpb248L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaT5kZXIgU3BpZWxlciBcIk9HYW1lIFByb2ZpXCIgZnVzaW9uaWVydCBhbHNvIHNlaW5lbiBBY2NvdW50IG5hY2ggXCJERSBXYWdlbnJhZFwiPC9saT4gICBcclxuICAgICAgICAgICAgICAgICAgICA8bGk+ZGVyIE9HYW1lIFRyYWNrZXIgemVpZ3QgZsO8ciBkZW4gQWNjb3VudCBuYWNoIGRlciBGdXNpb24ga2VpbmUgRXhwZWRpdGlvbmVuIG1laHIgdm9tIFVyc3BydW5nc3NlcnZlciBcIkRFIE1pbGNoc3RyYcOfZVwiPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGk+aW0gT0dhbWUgVHJhY2tlciB3aXJkIGRlciBBY2NvdW50IFwiT0dhbWUgUHJvZmlcIiB2b20gU2VydmVyIFwiREUgTWlsY2hzdHJhw59lXCIgbWl0IGRlbSBBY2NvdW50IHZvbSBTZXJ2ZXIgXCJERSBXYWdlbnJhZFwiIHZlcmtuw7xwZnQ8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaT5FeHBlZGl0aW9uZW4sIGRpZSBhdWYgZGVtIFVyc3BydW5nc3NlcnZlciBcIkRFIE1pbGNoc3RyYcOfZVwiIGdlc2VuZGV0IHd1cmRlbiwgd2VyZGVuIG51biBhdWNoIGbDvHIgZGVuIGZ1c2lvbmllcnRlbiBBY2NvdW50IGF1ZiBkZW0gU2VydmVyIFwiREUgV2FnZW5yYWRcIiBhbmdlemVpZ3Q8L2xpPlxyXG4gICAgICAgICAgICAgICAgPC9vbD5cclxuICAgICAgICAgICAgYCxcclxuICAgICAgICBsaW5rQWNjb3VudDogJ3dlaXRlcmVuIEFjY291bnQgdmVya27DvHBmZW46JyxcclxuICAgICAgICBsaW5rZWRBY2NvdW50czogJ1Zlcmtuw7xwZnRlIEFjY291bnRzOicsXHJcbiAgICB9LFxyXG59OyIsImltcG9ydCB7IFJlc291cmNlVHlwZSB9IGZyb20gXCIuLi8uLi8uLi9tb2RlbHMvb2dhbWUvcmVzb3VyY2VzL1Jlc291cmNlVHlwZVwiO1xyXG5pbXBvcnQgeyBSZXNvdXJjZVRyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZGU6IFJlc291cmNlVHJhbnNsYXRpb25zID0ge1xyXG4gICAgW1Jlc291cmNlVHlwZS5tZXRhbF06ICdNZXRhbGwnLFxyXG4gICAgW1Jlc291cmNlVHlwZS5jcnlzdGFsXTogJ0tyaXN0YWxsJyxcclxuICAgIFtSZXNvdXJjZVR5cGUuZGV1dGVyaXVtXTogJ0RldXRlcml1bScsXHJcbiAgICBlbmVyZ3k6ICdFbmVyZ2llJyxcclxufTsiLCJpbXBvcnQgeyBkZSBhcyBzaGlwcyB9IGZyb20gJy4uL29nYW1lL3NoaXBzL2RlJztcclxuaW1wb3J0IHsgZGUgYXMgZGVmZW5zZXMgfSBmcm9tICcuLi9vZ2FtZS9kZWZlbnNlcy9kZSc7XHJcbmltcG9ydCB7IGRlIGFzIGJ1aWxkaW5ncyB9IGZyb20gJy4uL29nYW1lL2J1aWxkaW5ncy9kZSc7XHJcbmltcG9ydCB7IGRlIGFzIHJlc2VhcmNoIH0gZnJvbSAnLi4vb2dhbWUvcmVzZWFyY2gvZGUnO1xyXG5pbXBvcnQgeyBkZSBhcyBsaWZlZm9ybXMgfSBmcm9tICcuLi9vZ2FtZS9saWZlZm9ybXMvZGUnO1xyXG5pbXBvcnQgeyBkZSBhcyBsaWZlZm9ybUJ1aWxkaW5ncyB9IGZyb20gJy4uL29nYW1lL2xpZmVmb3Jtcy9idWlsZGluZ3MvZGUnO1xyXG5pbXBvcnQgeyBkZSBhcyBsaWZlZm9ybVRlY2hub2xvZ2llcyB9IGZyb20gJy4uL29nYW1lL2xpZmVmb3Jtcy90ZWNobm9sb2dpZXMvZGUnO1xyXG5pbXBvcnQgeyBkZSBhcyBwcmVtaXVtIH0gZnJvbSAnLi4vb2dhbWUvcHJlbWl1bS9kZSc7XHJcblxyXG5pbXBvcnQgeyBFeHRlbnNpb25UcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XHJcbmltcG9ydCB7IGRlIGFzIHNldHRpbmdzIH0gZnJvbSAnLi9zZXR0aW5ncy9kZSc7XHJcbmltcG9ydCB7IGRlIGFzIHJlc291cmNlcyB9IGZyb20gJy4vcmVzb3VyY2VzL2RlJztcclxuaW1wb3J0IHsgZGUgYXMgY29tbW9uIH0gZnJvbSAnLi9jb21tb24vZGUnO1xyXG5pbXBvcnQgeyBkZSBhcyBleHBlZGl0aW9ucyB9IGZyb20gJy4vZXhwZWRpdGlvbnMvZGUnO1xyXG5pbXBvcnQgeyBkZSBhcyBjb21iYXRzIH0gZnJvbSAnLi9jb21iYXRzL2RlJztcclxuaW1wb3J0IHsgZGUgYXMgZG9uYXRlIH0gZnJvbSAnLi9kb25hdGUvZGUnO1xyXG5pbXBvcnQgeyBkZSBhcyBkZWJyaXNGaWVsZHMgfSBmcm9tICcuL2RlYnJpc0ZpZWxkcy9kZSc7XHJcbmltcG9ydCB7IGRlIGFzIHJlc291cmNlQmFsYW5jZSB9IGZyb20gJy4vcmVzb3VyY2VCYWxhbmNlL2RlJztcclxuaW1wb3J0IHsgZGUgYXMgZW1waXJlIH0gZnJvbSAnLi9lbXBpcmUvZGUnO1xyXG5pbXBvcnQgeyBkZSBhcyBzd2l0Y2hBY2NvdW50cyB9IGZyb20gJy4vc3dpdGNoQWNjb3VudHMvZGUnO1xyXG5pbXBvcnQgeyBkZSBhcyBhYm91dCB9IGZyb20gJy4vYWJvdXQvZGUnO1xyXG5pbXBvcnQgeyBkZSBhcyB1bml2ZXJzZUhpc3RvcnkgfSBmcm9tICcuL3VuaXZlcnNlSGlzdG9yeS9kZSc7XHJcbmltcG9ydCB7IGRlIGFzIG5vdGlmaWNhdGlvbnMgfSBmcm9tICcuL25vdGlmaWNhdGlvbnMvZGUnO1xyXG5pbXBvcnQgeyBkZSBhcyB0b29scyB9IGZyb20gJy4vdG9vbHMvZGUnO1xyXG5cclxuaW1wb3J0IHsgZGUgYXMgZXhjZWxFeHBvcnQgfSBmcm9tICcuL2V4Y2VsRXhwb3J0L2RlJztcclxuaW1wb3J0IHsgZGUgYXMgcGxheWVyQ2xhc3NlcyB9IGZyb20gJy4vcGxheWVyQ2xhc3Nlcy9kZSc7XHJcblxyXG5leHBvcnQgY29uc3QgZGU6IEV4dGVuc2lvblRyYW5zbGF0aW9ucyA9IHtcclxuICAgIG9nYW1lOiB7XHJcbiAgICAgICAgYnVpbGRpbmdzLFxyXG4gICAgICAgIGxpZmVmb3JtcyxcclxuICAgICAgICBsaWZlZm9ybUJ1aWxkaW5ncyxcclxuICAgICAgICBsaWZlZm9ybVRlY2hub2xvZ2llcyxcclxuICAgICAgICBwcmVtaXVtLFxyXG4gICAgICAgIHJlc291cmNlcyxcclxuICAgICAgICByZXNlYXJjaCxcclxuICAgICAgICBzaGlwcyxcclxuICAgICAgICBkZWZlbnNlcyxcclxuICAgIH0sXHJcblxyXG4gICAgZXh0ZW5zaW9uOiB7XHJcbiAgICAgICAgY29tbW9uLFxyXG4gICAgICAgIHNldHRpbmdzLFxyXG4gICAgICAgIHJlc291cmNlcyxcclxuICAgICAgICBleHBlZGl0aW9ucyxcclxuICAgICAgICBjb21iYXRzLFxyXG4gICAgICAgIGRvbmF0ZSxcclxuICAgICAgICBkZWJyaXNGaWVsZHMsXHJcbiAgICAgICAgcmVzb3VyY2VCYWxhbmNlLFxyXG4gICAgICAgIGVtcGlyZSxcclxuICAgICAgICBzd2l0Y2hBY2NvdW50cyxcclxuICAgICAgICBhYm91dCxcclxuICAgICAgICB1bml2ZXJzZUhpc3RvcnksXHJcbiAgICAgICAgbm90aWZpY2F0aW9ucyxcclxuICAgICAgICB0b29scyxcclxuXHJcbiAgICAgICAgZXhjZWxFeHBvcnQsXHJcbiAgICAgICAgcGxheWVyQ2xhc3NlcyxcclxuICAgIH0sXHJcbn07IiwiaW1wb3J0IHsgUmVzb3VyY2VUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XHJcbmltcG9ydCB7IGRlIGFzIG9nYW1lUmVzb3VyY2VzIH0gZnJvbSAnLi4vLi4vb2dhbWUvcmVzb3VyY2VzL2RlJztcclxuXHJcbmV4cG9ydCBjb25zdCBkZTogUmVzb3VyY2VUcmFuc2xhdGlvbnMgPSBvZ2FtZVJlc291cmNlczsiLCJpbXBvcnQgeyBDb21tb25UcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZGU6IENvbW1vblRyYW5zbGF0aW9ucyA9IHtcclxuICAgIGF2ZXJhZ2VQZXJEYXk6ICfijIAgcHJvIFRhZycsXHJcbiAgICBjaGFydDogJ0RpYWdyYW1tJyxcclxuICAgIHRhYmxlOiAnVGFiZWxsZScsXHJcbiAgICBzdW06ICdTdW1tZScsXHJcbiAgICB0b3RhbDogJ2dlc2FtdCcsXHJcbiAgICByZXNvdXJjZVVuaXRzOiAnUm9oc3RvZmZlaW5oZWl0ZW4nLFxyXG4gICAgZHN1OiAnRFNFJyxcclxuICAgIG1zdTogJ01TRScsXHJcbiAgICBkYXRlOiAnRGF0dW0nLFxyXG4gICAgZGF0ZVRpbWU6ICdEYXR1bSAmIFplaXQnLFxyXG5cclxuICAgIG1hZGVXaXRoTG92ZTE6ICdNaXQnLFxyXG4gICAgbWFkZVdpdGhMb3ZlMjogJ3ZvbiBXb25reWRvbmt5IGVudHdpY2tlbHQnLFxyXG59OyIsImltcG9ydCB7IEV4cGVkaXRpb25FdmVudFNpemUgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL2V4cGVkaXRpb25zL0V4cGVkaXRpb25FdmVudFNpemVcIjtcclxuaW1wb3J0IHsgRXhwZWRpdGlvbkV2ZW50VHlwZSB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvZXhwZWRpdGlvbnMvRXhwZWRpdGlvbkV2ZW50VHlwZVwiO1xyXG5pbXBvcnQgeyBFeHBlZGl0aW9uc1RyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVcIjtcclxuaW1wb3J0IHsgZGUgYXMgb2dhbWVQcmVtaXVtIH0gZnJvbSAnLi4vLi4vb2dhbWUvcHJlbWl1bS9kZSc7XHJcbmltcG9ydCB7IGRlIGFzIG9nYW1lRmFjdGlvbnMgfSBmcm9tICcuLi8uLi9vZ2FtZS9mYWN0aW9ucy9kZSc7XHJcbmltcG9ydCB7IEV4cGVkaXRpb25EZXBsZXRpb25MZXZlbCB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvZXhwZWRpdGlvbnMvRXhwZWRpdGlvbkRlcGxldGlvbkxldmVsXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZGU6IEV4cGVkaXRpb25zVHJhbnNsYXRpb25zID0ge1xyXG4gICAgaGVhZGVyOiAnRXhwZWRpdGlvbmVuJyxcclxuICAgIHRhYkhlYWRlcnM6IHtcclxuICAgICAgICBvdmVydmlldzogJ8OcYmVyc2ljaHQnLFxyXG4gICAgICAgIGZvdW5kUmVzb3VyY2VzOiAnUm9oc3RvZmZmdW5kZScsXHJcbiAgICAgICAgZm91bmRTaGlwczogJ0Zsb3R0ZW5mdW5kZScsXHJcbiAgICAgICAgZm91bmREYXJrTWF0dGVyOiBvZ2FtZVByZW1pdW0uZGFya01hdHRlcixcclxuICAgICAgICBmb3VuZEl0ZW1zOiAnSXRlbWZ1bmRlJyxcclxuICAgICAgICBkZXBsZXRpb246ICdBdXNsYXN0dW5nJyxcclxuICAgICAgICBpbmZvOiB7XHJcbiAgICAgICAgICAgIGhlYWRlcjogJ0luZm8nLFxyXG5cclxuICAgICAgICAgICAgdG9wRmluZHM6ICdUb3AtRnVuZGUnLFxyXG4gICAgICAgICAgICBwb3NzaWJsZUZpbmRzOiAnTGlzdGUgbcO2Z2xpY2hlciBGdW5kZScsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc3ViSGVhZGVyczoge1xyXG4gICAgICAgICAgICBhbW91bnQ6ICdNZW5nZScsXHJcbiAgICAgICAgICAgIHNpemVzOiAnRnVuZGdyw7bDn2VuJyxcclxuICAgICAgICAgICAgcmVzb3VyY2VzOiAnUm9oc3RvZmZlaW5oZWl0ZW4nLFxyXG4gICAgICAgICAgICBjb3VudDogJ0FuemFobCcsXHJcbiAgICAgICAgICAgIHNpemVzQnlSZXNvdXJjZTogJ0Z1bmRncsO2w59lbiBuYWNoIFJvaHN0b2ZmJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuXHJcbiAgICBleHBlZGl0aW9uRXZlbnRzOiB7XHJcbiAgICAgICAgW0V4cGVkaXRpb25FdmVudFR5cGUubm90aGluZ106ICdvaG5lIEVyZWlnbmlzJyxcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5yZXNvdXJjZXNdOiAnUm9oc3RvZmZmdW5kJyxcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5mbGVldF06ICdGbG90dGVuZnVuZCcsXHJcbiAgICAgICAgW0V4cGVkaXRpb25FdmVudFR5cGUuZGVsYXldOiAnVmVyc3DDpHR1bmcnLFxyXG4gICAgICAgIFtFeHBlZGl0aW9uRXZlbnRUeXBlLmVhcmx5XTogJ1ZlcmZyw7xodW5nJyxcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5kYXJrTWF0dGVyXTogb2dhbWVQcmVtaXVtLmRhcmtNYXR0ZXIsXHJcbiAgICAgICAgW0V4cGVkaXRpb25FdmVudFR5cGUucGlyYXRlc106IG9nYW1lRmFjdGlvbnMucGlyYXRlcyxcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5hbGllbnNdOiBvZ2FtZUZhY3Rpb25zLmFsaWVucyxcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5jb21iYXRdOiAnS2FtcGYnLFxyXG4gICAgICAgIFtFeHBlZGl0aW9uRXZlbnRUeXBlLml0ZW1dOiAnSXRlbScsXHJcbiAgICAgICAgW0V4cGVkaXRpb25FdmVudFR5cGUudHJhZGVyXTogJ0jDpG5kbGVyJyxcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5sb3N0RmxlZXRdOiAnRmxvdHRlbnZlcmx1c3QnLFxyXG4gICAgfSxcclxuICAgIGV4cGVkaXRpb25FdmVudFNpemVzOiB7XHJcbiAgICAgICAgW0V4cGVkaXRpb25FdmVudFNpemUuc21hbGxdOiAnbm9ybWFsZXIgRnVuZCcsXHJcbiAgICAgICAgW0V4cGVkaXRpb25FdmVudFNpemUubWVkaXVtXTogJ2dyb8OfZXIgRnVuZCcsXHJcbiAgICAgICAgW0V4cGVkaXRpb25FdmVudFNpemUubGFyZ2VdOiAncmllc2lnZXIgRnVuZCcsXHJcbiAgICAgICAgJ2ZsZWQtZGVhdGgtc3Rhcic6ICdHZWduZXIgc2luZCBnZWZsb2hlbicsXHJcbiAgICB9LFxyXG4gICAgZGVwbGV0aW9uTGV2ZWxzOiB7XHJcbiAgICAgICAgW0V4cGVkaXRpb25EZXBsZXRpb25MZXZlbC5ub25lXTogJ1NlaHIgR2VyaW5nJyxcclxuICAgICAgICBbRXhwZWRpdGlvbkRlcGxldGlvbkxldmVsLmxvd106ICdHZXJpbmcnLFxyXG4gICAgICAgIFtFeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWwubWVkaXVtXTogJ01pdHRlbCcsXHJcbiAgICAgICAgW0V4cGVkaXRpb25EZXBsZXRpb25MZXZlbC5oaWdoXTogJ0hvY2gnLFxyXG4gICAgICAgIHVua25vd246ICdVbmJla2FubnQnLFxyXG4gICAgfSxcclxuXHJcbiAgICBleHBlZGl0aW9uczogJ0V4cGVkaXRpb25lbicsXHJcbiAgICBmaW5kczogJ0Z1bmRlJyxcclxuICAgIHNoaXBzRm91bmQ6ICdTY2hpZmZlIGdlZnVuZGVuJyxcclxuICAgIGRlcGxldGlvbjogJ1N5c3RlbWF1c2xhc3R1bmcnLFxyXG5cclxuICAgIHRvcEZpbmRzOiB7XHJcbiAgICAgICAgdGl0bGU6ICh0eXBlOiBzdHJpbmcpID0+IGBUb3AtRnVuZGUgKCR7dHlwZX0pYCxcclxuICAgICAgICBzaGlwVW5pdHM6ICdTY2hpZmZzZWluaGVpdGVuJyxcclxuICAgICAgICBzaGlwQW1vdW50OiAnU2NoaWZmc2FuemFobCcsXHJcblxyXG4gICAgICAgIHNpemU6ICdHcsO2w59lJyxcclxuICAgICAgICBhbW91bnQ6ICdNZW5nZScsXHJcbiAgICAgICAgZGF0ZTogJ0RhdHVtJyxcclxuICAgIH0sXHJcbiAgICBwb3NzaWJsZUZpbmRzOiB7XHJcbiAgICAgICAgaW5mbzoge1xyXG4gICAgICAgICAgICBwbGF5ZXJDbGFzczogJ1NwaWVsZXItS2xhc3NlJyxcclxuICAgICAgICAgICAgZWNvbm9teVNwZWVkOiAnw5Zrb25vbWllLUdlc2Nod2luZGlna2VpdCcsXHJcbiAgICAgICAgICAgIHJlc291cmNlRmluZEJvbnVzOiAnQm9udXMgUm9oc3RvZmZmdW5kZScsXHJcbiAgICAgICAgICAgIHNoaXBGaW5kQm9udXM6ICdCb251cyBTY2hpZmZzZnVuZGUnLFxyXG4gICAgICAgICAgICBkYXJrTWF0dGVyRmluZEJvbnVzOiAnQm9udXMgRE0tRnVuZGUnLFxyXG4gICAgICAgICAgICBkaXNjb3ZlcmVyQm9udXM6ICdCb251cyBFbnRkZWNrZXJrbGFzc2UnLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG1heGltdW1GaW5kczogJ01heGltYWxmdW5kZScsXHJcbiAgICAgICAgZmluZHNEYXJrTWF0dGVyOiAnQmVyZWljaGUgZGVyIERNLUZ1bmRlJyxcclxuXHJcbiAgICAgICAgbGlzdE9mUG9zc2libGVGaW5kczogJ0xpc3RlIGRlcnplaXQgbcO2Z2xpY2hlciBGdW5kZSAoUm9oc3RvZmZlLCBTY2hpZmZzZWluaGVpdGVuKScsXHJcbiAgICAgICAgZmluZFNpemVzOiAoc2l6ZTogc3RyaW5nKSA9PiBgRnVuZG1lbmdlbiAoJHtzaXplfSlgLFxyXG4gICAgICAgIHNoaXBVbml0czogJ1NjaGlmZnNlaW5oZWl0ZW4nLFxyXG4gICAgICAgIHNoaXBNYXhVbml0c0NvbnZlcnRlZDogJ01heC4gU2NoaWZmc2VpbmhlaXRlbicsXHJcbiAgICB9LFxyXG59OyIsImltcG9ydCB7IEZhY3Rpb25UcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRlOiBGYWN0aW9uVHJhbnNsYXRpb25zID0ge1xyXG4gICAgcGlyYXRlczogJ1BpcmF0ZW4nLFxyXG4gICAgYWxpZW5zOiAnQWxpZW5zJyxcclxufTsiLCJpbXBvcnQgeyBDb21iYXRSZXN1bHRUeXBlIH0gZnJvbSBcIkAvc2hhcmVkL21vZGVscy9jb21iYXQtcmVwb3J0cy9Db21iYXRSZXN1bHRUeXBlXCI7XHJcbmltcG9ydCB7IENvbWJhdHNUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZGU6IENvbWJhdHNUcmFuc2xhdGlvbnMgPSB7XHJcbiAgICBoZWFkZXI6ICdLw6RtcGZlJyxcclxuICAgIHRhYkhlYWRlcnM6IHtcclxuICAgICAgICBvdmVydmlldzogJ8OcYmVyc2ljaHQnLFxyXG4gICAgICAgIGxvb3Q6ICdCZXV0ZScsXHJcbiAgICAgICAgbG9zdFNoaXBzOiAnVmVybG9yZW5lbmUgU2NoaWZmZScsXHJcbiAgICAgICAgc3ViSGVhZGVyczoge1xyXG4gICAgICAgICAgICBhZ2FpbnN0UGxheWVyczogJ0dlZ2VuIFNwaWVsZXInLFxyXG4gICAgICAgICAgICBvbkV4cGVkaXRpb25zOiAnQXVmIEV4cGVkaXRpb25lbicsXHJcblxyXG4gICAgICAgICAgICBhbW91bnQ6ICdNZW5nZScsXHJcbiAgICAgICAgICAgIHJlc291cmNlczogJ1JvaHN0b2ZmZWluaGVpdGVuJ1xyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgY29tYmF0czogJ0vDpG1wZmUnLFxyXG4gICAgc2hpcHNMb3N0OiAndmVybG9yZW5lIFNjaGlmZmUnLFxyXG4gICAgY29tYmF0UmVzdWx0czoge1xyXG4gICAgICAgIFtDb21iYXRSZXN1bHRUeXBlLndvbl06ICdnZXdvbm5lbmUgS8OkbXBmZScsXHJcbiAgICAgICAgW0NvbWJhdFJlc3VsdFR5cGUubG9zdF06ICd2ZXJsb3JlbmUgS8OkbXBmZScsXHJcbiAgICAgICAgW0NvbWJhdFJlc3VsdFR5cGUuZHJhd106ICdVbmVudHNjaGllZGVuJyxcclxuICAgIH0sXHJcbn07IiwiaW1wb3J0IHsgRG9uYXRlVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRlOiBEb25hdGVUcmFuc2xhdGlvbnMgPSB7XHJcbiAgICBoZWFkZXI6ICdTcGVuZGVuJyxcclxuICAgIHN1YkhlYWRlcjogJ1NwZW5kZSwgdW0gZGllIEVudHdpY2tsdW5nIGRlcyBPR2FtZSBUcmFja2VycyB6dSB1bnRlcnN0w7x0emVuJyxcclxuICAgIFxyXG4gICAgY3J5cHRvOiB7XHJcbiAgICAgICAgaGVhZGVyOiAnQ3J5cHRvIHNwZW5kZW4nLFxyXG4gICAgfSxcclxuICAgIGtvZmk6IHtcclxuICAgICAgICBoZWFkZXI6ICdNaXQgUGF5UGFsIG9kZXIgS3JlZGl0LS9EZWJpdGthcnRlIHNwZW5kZW4nLFxyXG4gICAgICAgIGJ1dHRvblRleHQ6ICdBdWYgS28tRmkgc3BlbmRlbicsXHJcbiAgICAgICAgbWVzc2FnZTogJ0R1IGJyYXVjaHN0IGtlaW5lbiBBY2NvdW50IGF1ZiBLby1GaSwgdW0gZG9ydCB6dSBzcGVuZGVuLiBBbGxlIFNwZW5kZW4gd2VyZGVuIGRpcmVrdCBhbiBkZW4gRW50d2lja2xlciB3ZWl0ZXJnZWxlaXRldC4nLFxyXG4gICAgfSxcclxufTsiLCJpbXBvcnQgeyBEZWJyaXNGaWVsZHNUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZGU6IERlYnJpc0ZpZWxkc1RyYW5zbGF0aW9ucyA9IHtcclxuICAgIGhlYWRlcjogJ1Ryw7xtbWVyZmVsZGVyJyxcclxuICAgIGFkZERlYnJpc0ZpZWxkTWFudWFsbHk6IHtcclxuICAgICAgICB0aXRsZTogJ1Ryw7xtbWVyZmVsZCBtYW51ZWxsIGhpbnp1ZsO8Z2VuJyxcclxuICAgICAgICBidXR0b25UZXh0OiAnSGluenVmw7xnZW4nLFxyXG4gICAgfSxcclxuICAgIHBvc2l0aW9uOiAnUG9zaXRpb24nLFxyXG59OyIsImltcG9ydCB7IFJlc291cmNlQmFsYW5jZVRyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBkZTogUmVzb3VyY2VCYWxhbmNlVHJhbnNsYXRpb25zID0ge1xyXG4gICAgaGVhZGVyOiAnUm9oc3RvZmZiaWxhbnonLFxyXG4gICAgXCJjb21iYXQtcmVwb3J0XCI6ICdhdXMgS8OkbXBmZW4nLFxyXG4gICAgXCJkZWJyaXMtZmllbGQtcmVwb3J0XCI6ICdhdXMgVHLDvG1tZXJmZWxkZXJuJyxcclxuICAgIGV4cGVkaXRpb246ICdhdXMgRXhwZWRpdGlvbmVuJyxcclxufTsiLCJpbXBvcnQgeyBMaWZlZm9ybURpc2NvdmVyeUV2ZW50QXJ0aWZhY3RGaW5kaW5nU2l6ZSB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvbGlmZWZvcm0tZGlzY292ZXJpZXMvTGlmZWZvcm1EaXNjb3ZlcnlFdmVudEFydGlmYWN0RmluZGluZ1NpemVcIjtcclxuaW1wb3J0IHsgTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL2xpZmVmb3JtLWRpc2NvdmVyaWVzL0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlXCI7XHJcbmltcG9ydCB7IEVtcGlyZVRyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBkZTogRW1waXJlVHJhbnNsYXRpb25zID0ge1xyXG4gICAgaGVhZGVyOiAnSW1wZXJpdW0nLFxyXG4gICAgcGxhbmV0OiAnUGxhbmV0JyxcclxuICAgIG92ZXJ2aWV3OiB7XHJcbiAgICAgICAgaGVhZGVyOiAnw5xiZXJzaWNodCcsXHJcbiAgICAgICAgc3VwcGx5QnVpbGRpbmdzOiAnVmVyc29yZ3VuZ3NnZWLDpHVkZScsXHJcbiAgICAgICAgZmFjaWxpdHlCdWlsZGluZ3M6ICdBbmxhZ2VuJyxcclxuICAgIH0sXHJcbiAgICBwcm9kdWN0aW9uOiB7XHJcbiAgICAgICAgaGVhZGVyOiAnUHJvZHVrdGlvbicsXHJcbiAgICAgICAgc3ViSGVhZGVyczoge1xyXG4gICAgICAgICAgICByZXNvdXJjZVByb2R1Y3Rpb246ICdSb2hzdG9mZnByb2R1a3Rpb24nLFxyXG4gICAgICAgICAgICBtaW5lT3ZlcnZpZXc6ICdNaW5lbsO8YmVyc2ljaHQnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYXZlcmFnZVBlckhvdXI6ICfijIAgcHJvIFN0dW5kZScsXHJcbiAgICAgICAgdG90YWxQZXJIb3VyOiAnZ2VzYW10IHBybyBTdHVuZGUnLFxyXG4gICAgICAgIHRvdGFsUGVyRGF5OiAnZ2VzYW10IHBybyBUYWcnLFxyXG4gICAgICAgIHRvdGFsUGVyV2VlazogJ2dlc2FtdCBwcm8gV29jaGUnLFxyXG4gICAgICAgIGFjdGl2ZVByb2R1Y3Rpb25TZXR0aW5nczogJ2FrdGl2ZSBQcm9kdWt0aW9uc2VpbnN0ZWxsdW5nZW4nLFxyXG4gICAgICAgIG1lc3NhZ2VQcm9kdWN0aW9uMTAwOiAnRGllIGFuZ2V6ZWlndGVuIFdlcnRlIGJlemllaGVuIHNpY2ggYXVmIGVpbmVuIFByb2R1a3Rpb25zZmFrdG9yIHZvbiAxMDAlIHVuZCBiZXLDvGNrc2ljaHRpZ2VuIGVpbmVuIEVuZXJnaWVtYW5nZWwgbmljaHQuJyxcclxuXHJcbiAgICAgICAgbWluZXM6IHtcclxuICAgICAgICAgICAgY3Jhd2xlcnNBdmFpbGFibGU6ICd2ZXJmw7xnYmFyJyxcclxuICAgICAgICAgICAgY3Jhd2xlcnNUb1JlYWNoTGltaXQ6IGNvdW50ID0+IGAke2NvdW50fSBDcmF3bGVyIGbDvHIgTWF4aW1hbGJvbnVzYCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGl0ZW1zOiAnQWt0aXZlIEl0ZW1zJyxcclxuICAgICAgICBicmVha2Rvd246IHtcclxuICAgICAgICAgICAgYmFzaWNJbmNvbWU6ICdHcnVuZHByb2R1a3Rpb24nLFxyXG4gICAgICAgICAgICBtaW5lUHJvZHVjdGlvbjogJ01pbmVucHJvZHVrdGlvbicsXHJcbiAgICAgICAgICAgIGNvbnN1bXB0aW9uOiAnVmVyYnJhdWNoJyxcclxuICAgICAgICAgICAgbGlmZWZvcm1CdWlsZGluZ3M6ICdMZWJlbnNmb3JtLUdlYsOkdWRlJyxcclxuICAgICAgICAgICAgY3Jhd2xlcnM6ICdDcmF3bGVyJyxcclxuICAgICAgICAgICAgaXRlbXM6ICdJdGVtcycsXHJcbiAgICAgICAgICAgIGdlb2xvZ2lzdDogJ0dlb2xvZ2UnLFxyXG4gICAgICAgICAgICBjb21tYW5kU3RhZmY6ICdLb21tYW5kb3N0YWInLFxyXG4gICAgICAgICAgICBwbGF5ZXJDbGFzczogJ1NwaWVsZXJrbGFzc2UnLFxyXG4gICAgICAgICAgICBhbGxpYW5jZUNsYXNzOiAnQWxsaWFuemtsYXNzZScsXHJcbiAgICAgICAgICAgIGxpZmVmb3JtVGVjaG5vbG9naWVzOiAnTGViZW5zZm9ybS1UZWNobm9sb2dpZW4nLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgIHJlc2V0OiAnWnVyw7xja3NldHplbicsXHJcbiAgICAgICAgICAgIGhlYWRlcjogJ1Byb2R1a3Rpb25zZWluc3RlbGx1bmdlbicsXHJcbiAgICAgICAgICAgIGFwcGx5QW5kQ2xvc2U6ICdQcm9kdWt0aW9uc2VpbnN0ZWxsdW5nZW4gYW53ZW5kZW4gdW5kIHNjaGxpZcOfZW4nLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgYW1vcnRpemF0aW9uOiB7XHJcbiAgICAgICAgaGVhZGVyOiAnQW1vcnRpc2F0aW9uJyxcclxuXHJcbiAgICAgICAgdGFibGU6IHtcclxuICAgICAgICAgICAgY29zdDogJ0tvc3RlbicsXHJcbiAgICAgICAgICAgIGxldmVsczogJ1N0dWZlbicsXHJcbiAgICAgICAgICAgIHByb2R1Y3Rpb25QbHVzOiAnUHJvZHVrdGlvbnNwbHVzJyxcclxuICAgICAgICAgICAgYW1vcnRpemF0aW9uVGltZTogJ0Ftb3J0aXNhdGlvbnN6ZWl0JyxcclxuICAgICAgICAgICAgZ3JvdXBTZWxlY3RlZEl0ZW1zOiAnR2V3w6RobHRlIEVsZW1lbnRlIGdydXBwaWVyZW4nLFxyXG4gICAgICAgICAgICBzaG93T3JpZ2luYWxJdGVtczogJ0FsbCBFbGVtZW50ZSBlaW56ZWxuIGFuemVpZ2VuJyxcclxuXHJcbiAgICAgICAgICAgIGxldmVsc09uUGxhbmV0czogKGxldmVscywgcGxhbmV0cykgPT4gYCR7bGV2ZWxzfSAke2xldmVscyA9PSAxID8gJ1N0dWZlJyA6ICdTdHVmZW4nfSBhdWYgJHtwbGFuZXRzfSBQbGFuZXRlbmAsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgaGVhZGVyOiAnRWluc3RlbGx1bmdlbicsXHJcbiAgICAgICAgICAgIGFwcGx5QW5kQ2xvc2U6ICdFaW5zdGVsbHVuZ2VuIGFud2VuZGVuIHVuZCBzY2hsaWXDn2VuJyxcclxuXHJcbiAgICAgICAgICAgIGluY2x1ZGVTZXR0aW5nczoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnRsO8ciBCZXJlY2hudW5nIGJlcsO8Y2tzaWNodGlnZW4nLFxyXG5cclxuICAgICAgICAgICAgICAgIG1pbmVzOiAnTWluZW4nLFxyXG4gICAgICAgICAgICAgICAgZXhwZWRpdGlvbnM6ICdFeHBlZGl0aW9uZW4nLFxyXG4gICAgICAgICAgICAgICAgZXhwZWRpdGlvbnNSZXF1aXJlbWVudDogJ0hpbndlaXM6IEJlbsO2dGlndCBXYWhsIHZvbiBMZWJlbnNmb3JtLUV4cGVkaXRpb25zYm9udXNmb3JzY2h1bmdlbiwgTGViZW5zZm9ybS1Gb3JzY2h1bmdzYm9udXNnZWLDpHVkZW4sIHVuZC9vZGVyIEFzdHJvcGh5c2lrJyxcclxuICAgICAgICAgICAgICAgIGxpZmVmb3JtUHJvZHVjdGlvbkJvbnVzQnVpbGRpbmdzOiAnTGViZW5zZm9ybS1Qcm9kdWt0aW9uc2JvbnVzZ2Viw6R1ZGUnLFxyXG4gICAgICAgICAgICAgICAgbGlmZWZvcm1UZWNobm9sb2d5Qm9vc3RCdWlsZGluZ3M6ICdMZWJlbnNmb3JtLUZvcnNjaHVuZ3Nib251c2dlYsOkdWRlJyxcclxuICAgICAgICAgICAgICAgIGxpZmVmb3JtUHJvZHVjdGlvbkJvbnVzVGVjaG5vbG9naWVzOiAnTGViZW5zZm9ybS1Qcm9kdWt0aW9uc2JvbnVzZm9yc2NodW5nZW4nLFxyXG4gICAgICAgICAgICAgICAgbGlmZWZvcm1FeHBlZGl0aW9uQm9udXNUZWNobm9sb2dpZXM6ICdMZWJlbnNmb3JtLUV4cGVkaXRpb25zYm9udXNmb3JzY2h1bmdlbicsXHJcbiAgICAgICAgICAgICAgICBhc3Ryb3BoeXNpY3NBbmRDb2xvbnk6ICdBc3Ryb3BoeXNpayB1bmQgbmV1ZSBLb2xvbmllbicsXHJcbiAgICAgICAgICAgICAgICBhc3Ryb3BoeXNpY3NQZXJmb3JtYW5jZU5vdGU6ICdIaW53ZWlzOiBSZWNoZW5pbnRlbnNpdiwgaGF0IHN0YXJrZW4gRWluZmx1c3MgYXVmIEJlcmVjaG51bmdzZ2VzY2h3aW5kaWdrZWl0JyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGxheWVyU2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ0FsbGdlbWVpbmUgRWluc3RlbGx1bmdlbicsXHJcbiAgICAgICAgICAgICAgICBvcHRpbWl6ZUZvclJlc291cmNlczogJ0bDvHIgZ2V3w6RobHRlIFJvaHN0b2ZmZSBvcHRpbWllcmVuJyxcclxuICAgICAgICAgICAgICAgIG9mZmljZXJzOiAnT2ZmaXppZXJlJyxcclxuICAgICAgICAgICAgICAgIHBsYXllckNsYXNzOiAnU3BpZWxlcmtsYXNzZScsXHJcbiAgICAgICAgICAgICAgICBhbGxpYW5jZUNsYXNzOiAnQWxsaWFuemtsYXNzZScsXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50TGV2ZWxPZjogKG5hbWU6IHN0cmluZykgPT4gYGFrdHVlbGxlIFN0dWZlICR7bmFtZX1gLFxyXG4gICAgICAgICAgICAgICAgbGlmZWZvcm1MZXZlbHM6ICdMZWJlbmZvcm0tTGV2ZWxzJyxcclxuXHJcbiAgICAgICAgICAgICAgICB1bnVzZWRSYWlkQ29sb255U2xvdHM6ICdEZXJ6ZWl0IHVuZ2VudXR6dGUgUmFpZGtvbG8tU2xvdHMnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhc3Ryb3BoeXNpY3NTZXR0aW5nczoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAobmFtZTogc3RyaW5nKSA9PiBgRWluc3RlbGx1bmdlbiB6dSAke25hbWV9YCxcclxuICAgICAgICAgICAgICAgIG5ld0NvbG9ueTogJ25ldWUgS29sb25pZScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsYW5ldFNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdFaW5zdGVsbHVuZ2VuIGRlciBQbGFuZXRlbicsXHJcblxyXG4gICAgICAgICAgICAgICAgZ2xvYmFsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVzZWxlY3RJdGVtczogJ0FsbGUgSXRlbXMgYWJ3w6RobGVuJyxcclxuICAgICAgICAgICAgICAgICAgICBpZ25vcmVJbmFjdGl2ZUxpZmVmb3JtVGVjaG5vbG9neVNsb3RzOiAnSW5ha3RpdmUgTGViZW5zZm9ybS1UZWNobm9sb2dpZS1TbG90cyBmw7xyIGFsbGUgUGxhbmV0ZW4gaWdub3JpZXJlbicsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVzZWxlY3RBbGxQbGFuZXRzOiAnQWxsZSBQbGFuZXRlbiBhYnfDpGhsZW4nLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICBpbmNsdWRlSW5SZXN1bHQ6ICdmw7xyIEJlcmVjaG51bmcgYmVyw7xja3NpY2h0aWdlbicsXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ1Bvc2l0aW9uJyxcclxuICAgICAgICAgICAgICAgIG1heFRlbXBlcmF0dXJlOiAnTWF4LiBUZW1wZXJhdHVyJyxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZUl0ZW1zOiAnQWt0aXZlIEl0ZW1zJyxcclxuICAgICAgICAgICAgICAgIGNyYXdsZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdDcmF3bGVyJyxcclxuICAgICAgICAgICAgICAgICAgICBwZXJjZW50YWdlOiAnJSBQcm9kdWt0aW9uJyxcclxuICAgICAgICAgICAgICAgICAgICBmaXhDb3VudDogJ0Zlc3RlIEFuemFobCcsXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4Q291bnQ6ICdNYXguIEFuemFobCcsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbWluZXM6ICdBa3R1ZWxsZSBNaW5lbnN0dWZlbicsXHJcblxyXG4gICAgICAgICAgICAgICAgbGlmZWZvcm06ICdMZWJlbnNmb3JtJyxcclxuICAgICAgICAgICAgICAgIGxpZmVmb3JtU2V0dGluZ3M6ICdMZWJlbnNmb3JtLUVpbnN0ZWxsdW5nZW4nLFxyXG4gICAgICAgICAgICAgICAgcmVsZXZhbnRMaWZlZm9ybUJ1aWxkaW5nczogJ1JlbGV2YW50ZSBMZWJlbnNmb3JtLUdlYsOkdWRlJyxcclxuICAgICAgICAgICAgICAgIGxpZmVmb3JtVGVjaG5vbG9naWVzOiAnTGViZW5zZm9ybS1UZWNobm9sb2dpZW4nLFxyXG4gICAgICAgICAgICAgICAgaWdub3JlRW1wdHlTbG90czogJ0luYWt0aXZlIFNsb3RzIGlnbm9yaWVyZW4nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBleHBlZGl0aW9uU2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ0V4cGVkaXRpb25zZWluc3RlbGx1bmdlbicsXHJcbiAgICAgICAgICAgICAgICBhdmVyYWdlV2F2ZXNQZXJEYXk6ICfijIAgV2VsbGVuIHBybyBUYWcnLFxyXG4gICAgICAgICAgICAgICAgaXRlbXM6ICdTbG90LUl0ZW1zJyxcclxuICAgICAgICAgICAgICAgIGF2ZXJhZ2VFeHBlZGl0aW9uc1BlckRheTogJ+KMgCBFeHBlZGl0aW9uZW4gcHJvIFRhZycsXHJcbiAgICAgICAgICAgICAgICBzaGlwVW5pdEZhY3RvcnM6ICdGYWt0b3JlbiBmw7xyIFNjaGlmZnNlaW5oZWl0ZW4nLFxyXG4gICAgICAgICAgICAgICAgdG9wUGxheWVyU2NvcmU6ICdQdW5rdGUgUGxhdHogMScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5mbzoge1xyXG4gICAgICAgICAgICBnZW5lcmF0aW5nSXRlbXM6ICdCZXJlY2huZSBuw6RjaHN0ZSBFaW50csOkZ2UnLFxyXG5cclxuICAgICAgICAgICAgc2xvd0NhbGN1bGF0aW9uOiAnRGllIEFtb3J0aXNhdGlvbnNiZXJlY2hudW5nIGlzdCBsZWlkZXIgZXR3YXMgbGFuZ3NhbSBnZXdvcmRlbiwgc2VpdGRlbSBMZWJlbnNmb3JtZW4gdW5kIGRlcmVuIEdlYsOkdWRlIHVuZCBUZWNobm9sb2dpZW4gYmVyw7xja3NpY2h0aWd0IHdlcmRlbi4gRGllIFBlcmZvcm1hbmNlIHdpcmQgd2VpdGVyaGluIHVudGVyc3VjaHQgdW5kIHdpcmQgaG9mZmVudGxpY2ggaW4gZGVyIFp1a3VuZnQgdmVyYmVzc2VydC4nLFxyXG4gICAgICAgICAgICBjdHJsQ2xpY2s6ICdTdHJnICsgS2xpY2sgYXVmIGVpbmUgQ2hlY2tib3gsIHVtIGFsbGUgRWxlbWVudGUgYmlzIHp1bSBnZXfDpGhsdGVuIEVsZW1lbnQgYW4tL2FienV3w6RobGVuLicsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2F2ZUxvYWQ6IHtcclxuICAgICAgICAgICAgc2F2ZUJ1dHRvbjogJ0Ftb3J0aXNhdGlvbnNlcmdlYm5pc3NlIHNwZWljaGVybicsXHJcbiAgICAgICAgICAgIGxvYWRCdXR0b246IChkYXRlOiBzdHJpbmcpID0+IGBTcGVpY2hlcnN0YW5kIGxhZGVuICgke2RhdGV9KWAsXHJcbiAgICAgICAgICAgIGxvYWRlZFNhdmU6IChkYXRlOiBzdHJpbmcsIGhpZGRlbkl0ZW1zOiBzdHJpbmcpID0+IGBTcGVpY2hlcnN0YW5kIHdpcmQgYW5nZXplaWd0ICgke2RhdGV9KSAtICR7aGlkZGVuSXRlbXN9IGF1c2dlYmxlbmRldGUgWmVpbGVuYCxcclxuICAgICAgICAgICAgYWJhbmRvbmVkUGxhbmV0OiAnQXVmZ2VnZWJlbmVyIFBsYW5ldCcsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2VuZXJhdGVJdGVtczogdmFsdWUgPT4gYCR7dmFsdWV9IEVpbnRyw6RnZWAsXHJcbiAgICB9LFxyXG4gICAgbGlmZWZvcm1zOiB7XHJcbiAgICAgICAgaGVhZGVyOiAnTGViZW5zZm9ybWVuJyxcclxuICAgICAgICBzdWJIZWFkZXJzOiB7XHJcbiAgICAgICAgICAgIG92ZXJ2aWV3OiAnw5xiZXJzaWNodCcsXHJcbiAgICAgICAgICAgIHByb2dyZXNzOiAnRm9ydHNjaHJpdHQnLFxyXG4gICAgICAgICAgICBkaXNjb3ZlcnlNaXNzaW9uczogJ01pc3Npb25lbicsXHJcblxyXG4gICAgICAgICAgICBkaXNjb3ZlcnlSZXN1bHRzOiAnRXJnZWJuaXNzZScsXHJcbiAgICAgICAgICAgIGV4cGVyaWVuY2U6ICdFcmZhaHJ1bmcnLFxyXG4gICAgICAgICAgICByZXNlYXJjaEJvbnVzZXM6ICdHbG9iYWxlIEZvcnNjaHVuZ3Nib25pJyxcclxuICAgICAgICAgICAgcGxhbmV0Qm9udXNlczogJ0VmZmVrdGl2ZSBCb25pIHBybyBQbGFuZXQnLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHBsYW5ldDogJ1BsYW5ldCcsXHJcbiAgICAgICAgbGlmZWZvcm06ICdMZWJlbnNmb3JtJyxcclxuICAgICAgICBidWlsZGluZ3M6ICdMZWJlbnNmb3JtLUdlYsOkdWRlJyxcclxuICAgICAgICB0ZWNobm9sb2dpZXM6ICdMZWJlbnNmb3JtLVRlY2hub2xvZ2llbicsXHJcbiAgICAgICAgdGllcjogJ1RpZXInLFxyXG4gICAgICAgIGxldmVsOiAnTGV2ZWwnLFxyXG4gICAgICAgIHRvdGFsTGlmZWZvcm1FeHBlcmllbmNlOiAnRXJmYWhydW5nIChnZXNhbXQpJyxcclxuICAgICAgICBkaXNjb3ZlcnlEYXRlVW5rbm93bjogJ1VuYmVrYW5udCcsXHJcbiAgICAgICAgbm90RGlzY292ZXJlZFlldDogJ05vY2ggbmljaHQgZW50ZGVja3QnLFxyXG4gICAgICAgIGRpc2NvdmVyeU1pc3Npb25zOiAnRW50ZGVja3VuZ3NtaXNzaW9uZW4nLFxyXG4gICAgICAgIGV2ZW50VHlwZXM6IHtcclxuICAgICAgICAgICAgW0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlLm5vdGhpbmddOiAnS2VpbiBGdW5kJyxcclxuICAgICAgICAgICAgW0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlLmxvc3RTaGlwXTogJ1NjaGlmZiB2ZXJsb3JlbicsXHJcbiAgICAgICAgICAgIFtMaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZS5uZXdMaWZlZm9ybUZvdW5kXTogJ05ldWUgTGViZW5zZm9ybScsXHJcbiAgICAgICAgICAgIFtMaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZS5rbm93bkxpZmVmb3JtRm91bmRdOiAnTGViZW5zZm9ybS1FcmZhaHJ1bmcnLFxyXG4gICAgICAgICAgICBbTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUuYXJ0aWZhY3RzXTogJ0FydGVmYWt0ZnVuZCcsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBhcnRpZmFjdEZpbmRpbmdTaXplczoge1xyXG4gICAgICAgICAgICBbTGlmZWZvcm1EaXNjb3ZlcnlFdmVudEFydGlmYWN0RmluZGluZ1NpemUuc21hbGxdOiAnbm9ybWFsZXIgRnVuZCcsXHJcbiAgICAgICAgICAgIFtMaWZlZm9ybURpc2NvdmVyeUV2ZW50QXJ0aWZhY3RGaW5kaW5nU2l6ZS5tZWRpdW1dOiAnZ3Jvw59lciBGdW5kJyxcclxuICAgICAgICAgICAgW0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRBcnRpZmFjdEZpbmRpbmdTaXplLmxhcmdlXTogJ3JpZXNpZ2VyIEZ1bmQnLFxyXG4gICAgICAgICAgICBbTGlmZWZvcm1EaXNjb3ZlcnlFdmVudEFydGlmYWN0RmluZGluZ1NpemUuc3RvcmFnZUZ1bGxdOiAnU3BlaWNoZXIgdm9sbCcsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBsaWZlZm9ybUZvdW5kOiAnTGViZW5zZm9ybSBnZWZ1bmRlbicsXHJcbiAgICAgICAgYWx3YXlzQXZhaWxhYmxlOiAnSW1tZXIgdmVyZsO8Z2JhcicsXHJcbiAgICAgICAgYXJ0aWZhY3RzOiAnQXJ0ZWZha3RlJyxcclxuXHJcbiAgICAgICAgZXhwZXJpZW5jZVBvaW50czogJ0VyZmFocnVuZ3NwdW5rdGUnLFxyXG4gICAgICAgIGRpc2NvdmVyZWRPbjogJ0xlYmVuc2Zvcm0gZW50ZGVja3QgYW0nLFxyXG4gICAgICAgIG51bWJlck9mTGlmZWZvcm1EaXNjb3ZlcmllczogJ0FuemFobCBFbnRkZWNrdW5nZW4nLFxyXG5cclxuICAgICAgICBnbG9iYWxSZXNlYXJjaEJvbnVzOiAnR2xvYmFsZXIgRm9yc2NodW5nc2JvbnVzJyxcclxuXHJcbiAgICAgICAgcmVzZWFyY2hCb251c2VzOiB7XHJcbiAgICAgICAgICAgIGJyZWFrZG93bjoge1xyXG4gICAgICAgICAgICAgICAgc2xvdDogJ1Nsb3QnLFxyXG4gICAgICAgICAgICAgICAgcmVzZWFyY2g6ICdGb3JzY2h1bmcnLFxyXG4gICAgICAgICAgICAgICAgYm9udXM6ICdCb251cycsXHJcbiAgICAgICAgICAgICAgICBsaWZlZm9ybUJ1aWxkaW5nc0Jvb3N0OiBgTGViZW5zZm9ybWdlYsOkdWRlLUJvb3N0YCxcclxuICAgICAgICAgICAgICAgIGxpZmVmb3JtTGV2ZWxCb29zdDogKGxpZmVmb3JtOiBzdHJpbmcsIGJvb3N0OiBzdHJpbmcpID0+IGBMZWJlbnNmb3JtLUxldmVsLUJvb3N0ICgke2xpZmVmb3JtfTogJHtib29zdH0pYCxcclxuICAgICAgICAgICAgICAgIGJ1Z0Jvb3N0OiAnZHVyY2ggQnVncyB2ZXJ1cnNhY2h0ZXIgQm9vc3QnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwcm9kdWN0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdSb2hzdG9mZnByb2R1a3Rpb24nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBleHBlZGl0aW9uRmluZHM6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ0V4cGVkaXRpb25zZnVuZGUnLFxyXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VzOiAnUm9oc3RvZmZlJyxcclxuICAgICAgICAgICAgICAgIHNoaXBzOiAnU2NoaWZmZScsXHJcbiAgICAgICAgICAgICAgICBmbGVldExvc3M6ICdGbG90dGVudmVybHVzdGUnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBleHBlZGl0aW9uU3BlZWQ6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ0dlc2Nod2luZGlna2VpdCB6dW0gRXhwZWRpdGlvbnNvcnQnLFxyXG4gICAgICAgICAgICAgICAgYm9udXM6ICdHZXNjaHdpbmRpZ2tlaXRzYm9udXMnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzaGlwczoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnU2NoaWZmZScsXHJcbiAgICAgICAgICAgICAgICBhcm1vcjogJ1BhbnplcnVuZycsXHJcbiAgICAgICAgICAgICAgICBzaGllbGQ6ICdTY2hpbGQnLFxyXG4gICAgICAgICAgICAgICAgZGFtYWdlOiAnU2NoYWRlbicsXHJcbiAgICAgICAgICAgICAgICBjYXJnbzogJ0xhZGVyYXVtJyxcclxuICAgICAgICAgICAgICAgIHNwZWVkOiAnR2VzY2h3aW5kaWdrZWl0JyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGVmZW5zZXM6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ1ZlcnRlaWRpZ3VuZ3NhbmxhZ2VuJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZnVlbENvbnN1bXB0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdUcmVpYnN0b2ZmdmVyYnJhdWNoJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZnVlbFJldHVybjoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnVHJlaWJzdG9mZnLDvGNrZ2V3aW5uIGJlaSBSw7xja3J1ZicsXHJcbiAgICAgICAgICAgICAgICBib251czogJ1RyZWlic3RvZmZyw7xja2dld2lubicsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJ1aWxkaW5nQ29zdFRpbWU6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ0dlYsOkdWRlIEtvc3RlbiAmIFplaXQnLFxyXG4gICAgICAgICAgICAgICAgY29zdDogJ0tvc3RlbicsXHJcbiAgICAgICAgICAgICAgICB0aW1lOiAnWmVpdCcsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJlc2VhcmNoQ29zdFRpbWU6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ0ZvcnNjaHVuZ2VuIEtvc3RlbiAmIFplaXQnLFxyXG4gICAgICAgICAgICAgICAgcmVzZWFyY2hlczogJ0ZvcnNjaHVuZ2VuJyxcclxuICAgICAgICAgICAgICAgIGxpZmVmb3JtUmVzZWFyY2hlczogJ0xlYmVuc2Zvcm0tRm9yc2NodW5nZW4nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjcmF3bGVyczoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnQ3Jhd2xlcicsXHJcbiAgICAgICAgICAgICAgICBwcm9kdWN0aW9uQm9udXM6ICdSb2hzdG9mZnByb2R1a3Rpb24nLFxyXG4gICAgICAgICAgICAgICAgZW5lcmd5Q29uc3VtcHRpb246ICdFbmVyZ2lldmVyYnJhdWNoJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGVuQ2FwYWNpdHk6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ1ZlcnN0ZWNra2FwYXppdMOkdCcsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBoYWxhbnhSYW5nZToge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnUGhhbGFueC1SZWljaHdlaXRlJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGlzY292ZXJ5TWlzc2lvbnM6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ0dlc2Nod2luZGlna2VpdCBFbnRkZWNrdW5nc21pc3Npb25lbicsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsYXllckNsYXNzZXM6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ1NwaWVsZXJrbGFzc2VuJyxcclxuXHJcbiAgICAgICAgICAgICAgICBjb2xsZWN0b3I6IHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0aW9uQm9udXM6ICdFcmjDtmh0ZSBNaW5lbnByb2R1a3Rpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZXJneVByb2R1Y3Rpb25Cb251czogJ0VyaMO2aHRlIEVuZXJnaWVwcm9kdWt0aW9uJyxcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnRlclNwZWVkQm9udXM6ICdUcmFuc3BvcnRlci1HZXNjaHdpbmRpZ2tlaXRzYm9udXMnLFxyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydGVyQ2FyZ29Cb251czogJ1RyYW5zcG9ydGVyLUxhZGVyYXVtYm9udXMnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNyYXdsZXJQcm9kdWN0aW9uQm9udXM6ICdDcmF3bGVyLVByb2R1a3Rpb25zYm9udXMnLFxyXG4gICAgICAgICAgICAgICAgICAgIGdlb2xvZ2lzdENyYXdsZXJBbW91bnRCb251czogJ01laHIgdmVyd2VuZGJhcmUgQ3Jhd2xlciBtaXQgR2VvbG9nZScsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZGlzY292ZXJlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc2VhcmNoRHVyYXRpb246ICdGb3JzY2h1bmdzemVpdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5jcmVhc2VkRXhwZWRpdGlvbkZpbmRzOiAnRXJow7ZodGVyIEVydHJhZyBiZWkgRXhwZWRpdGlvbmVuJyxcclxuICAgICAgICAgICAgICAgICAgICBsYXJnZXJQbGFuZXRzOiAnR3LDtsOfZXJlIFBsYW5ldGVuIGJlaSBLb2xvbmlzaWVydW5nJyxcclxuICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsRXhwZWRpdGlvblNsb3RzOiAnWnVzw6R0emxpY2hlIEV4cGVkaXRpb25zc2xvdHMnLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlZHVjZWRFeHBlZGl0aW9uQ29tYmF0Q2hhbmNlOiAnQ2hhbmdlIGF1ZiBFeHBlZGl0aW9uc2dlZ25lcicsXHJcbiAgICAgICAgICAgICAgICAgICAgcGhhbGFueFJhbmdlOiAnRXJow7ZodGUgUGhhbGFueC1SZWljaHdlaXRlJyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBnZW5lcmFsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tYmF0U2hpcFNwZWVkOiAnS2FtcGZzY2hpZmYtR2VzY2h3aW5kaWdrZWl0c2JvbnVzJyxcclxuICAgICAgICAgICAgICAgICAgICByZWN5Y2xlclNwZWVkOiAnUmVjeWNsZXItR2VzY2h3aW5kaWdrZWl0c2JvbnVzJyxcclxuICAgICAgICAgICAgICAgICAgICBmdWVsQ29uc3VtcHRpb246ICdUcmVpYnN0b2ZmdmVyYnJhdWNoIGbDvHIgYWxsZSBTY2hpZmZlJyxcclxuICAgICAgICAgICAgICAgICAgICBpbmNyZWFzZWRDYXJnb1JlY3ljbGVyc1BhdGhmaW5kZXJzOiAnRXJow7ZodGVyIExhZGVyYXVtIGbDvHIgUmVjeWNsZXIvUGF0aGZpbmRlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbENvbWJhdFJlc2VhcmNoTGV2ZWxzOiAnWnVzw6R0emxpY2hlIEthbXBmZm9yc2NodW5nc3N0dWZlbicsXHJcbiAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbEZsZWV0U2xvdHM6ICdadXPDpHR6bGljaGUgRmxvdHRlbnNsb3RzJyxcclxuICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsTW9vbkZpZWxkczogJ1p1c8OkdHpsaWNoZSBNb25kZmVsZGVyJyxcclxuICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgY2xhc3NCb251czogJ0tsYXNzZW5ib251cycsXHJcbiAgICAgICAgICAgICAgICBib251czogJ0JvbnVzJyxcclxuICAgICAgICAgICAgICAgIGJhc2VWYWx1ZTogJ0Jhc2lzd2VydCcsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZVdpdGhCb251c2VzOiAnV2VydCBpbmtsLiBCb25pJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBwbGFuZXRCb251c2VzOiB7XHJcbiAgICAgICAgICAgIHJlc291cmNlUHJvZHVjdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnUm9oc3RvZmZwcm9kdWt0aW9uJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGlmZWZvcm1SZXNlYXJjaENvc3RUaW1lOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdMZWJlbnNmb3JtZm9yc2NodW5nZW4gS29zdGVuICYgWmVpdCcsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHdyZWNrZmllbGQ6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ1dyYWNrZmVsZCcsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdG9wRmluZHM6IHtcclxuICAgICAgICAgICAgdG9wRmluZHM6ICdCZXN0ZSBGdW5kZScsXHJcbiAgICAgICAgICAgIHdvcnN0RmluZHM6ICdTY2hsZWNodGVzdGUgRnVuZGUnLFxyXG5cclxuICAgICAgICAgICAgc2l6ZTogJ0dyw7bDn2UnLFxyXG4gICAgICAgICAgICBhbW91bnQ6ICdNZW5nZScsXHJcbiAgICAgICAgICAgIGRhdGU6ICdEYXR1bScsXHJcbiAgICAgICAgICAgIGFydGlmYWN0czogJ0FydGVmYWt0ZScsXHJcbiAgICAgICAgICAgIGV4cGVyaWVuY2U6ICdYUCcsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbn07IiwiaW1wb3J0IHsgU3dpdGNoQWNjb3VudHNUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZGU6IFN3aXRjaEFjY291bnRzVHJhbnNsYXRpb25zID0ge1xyXG4gICAgdGl0bGU6ICdBY2NvdW50IHfDpGhsZW4sIHVtIERhdGVuIGluIG5ldWVtIFRhYiBhbnp1c2VoZW4nLFxyXG59OyIsImltcG9ydCB7IEFib3V0VHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRlOiBBYm91dFRyYW5zbGF0aW9ucyA9IHtcclxuICAgIGZhcUhlbHA6IHtcclxuICAgICAgICBoZWFkZXI6ICdIaWxmZScsXHJcbiAgICAgICAgZmFxOiB7XHJcbiAgICAgICAgICAgIGhlYWRlcjogJ0YuQS5RLicsXHJcbiAgICAgICAgICAgIGZsZWV0TG9zdE9uRXhwZWRpdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnV2FydW0gd2VyZGVuIGRlaW5lIFNjaGlmZmUgbmljaHQgZ2V0cmFja3QsIGRpZSBkdSBhdWYgRXhwZWRpdGlvbmVuIHZlcmxvcmVuIGhhc3Q/JyxcclxuICAgICAgICAgICAgICAgIHRleHQ6ICdEYXMgVHJhY2tpbmcgdmVybG9yZW5lciBTY2hpZmZlIGVyZm9yZGVydCBkYXVlcmhhZnRlcyBGbG90dGVudHJhY2tpbmcsIHdhcyBuaWNodCBtw7ZnbGljaCBpc3QuJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3luY0JldHdlZW5EZXZpY2VzOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdXYXJ1bSB3ZXJkZW4gZGVpbmUgRGF0ZW4gbmljaHQgYXVmIG1laHJlcmVuIEdlcsOkdGVuIHN5bmNocm9uaXNpZXJ0PycsXHJcbiAgICAgICAgICAgICAgICB0ZXh0OiAnRGllIE1lbmdlIGRlciB2b20gVHJhY2tlciBlcmZhc3N0ZW4gRGF0ZW4gw7xiZXJzdGVpZ3QgZGllIEdyw7bDn2UgZGVyIERhdGVuLCBkaWUgw7xiZXIgZGVpbmVuIE51dHplcmFjY291bnQgKEdvb2dsZSwgTWljcm9zb2Z0LCBvLsOkLikgc3luY2hyb25pc2llcnQgd2VyZGVuIGvDtm5uZW4uIEVpbmUgU3luY2hyb25pc2llcnVuZyDDvGJlciBlaW5lbiBleHRlcm5lbiBTZXJ2ZXIgd2lyZCBldmVudHVlbGwgaW4gZGVyIFp1a3VuZnQgbcO2Z2xpY2ggc2Vpbi4nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwcm9kdWN0aW9uSW5SZXNvdXJjZUJhbGFuY2U6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ1dhcnVtIHdpcmQgZGVpbmUgUm9oc3RvZmZwcm9kdWt0aW9uIG5pY2h0IGluIGRlciBSb2hzdG9mZmJpbGFueiBiZXLDvGNrc2ljaHRpZ3Q/JyxcclxuICAgICAgICAgICAgICAgIHRleHQ6ICdEaWUgUm9oc3RvZmZwcm9kdWt0aW9uIGjDpG5ndCB2b24gdmllbGVuIEZha3RvcmVuIGFiLCBkZXJlbiDDhG5kZXJ1bmdlbiBkYXVlcmhhZnQgZ2V0cmFja3Qgd2VyZGVuIG3DvHNzdGVuLiBEaWVzIGlzdCB6d2FyIG3DtmdsaWNoLCBqZWRvY2ggw7xiZXJzdGVpZ3QgZGllIEtvbXBsZXhpdMOkdCBkaWVzZXMgRmVhdHVyZXMgZGllIGRlcyB6dXPDpHR6bGljaGVuIE51dHplbnMuJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgd2hhdEFyZUF2ZXJhZ2VzOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdXYXMgYmVkZXV0ZXQgXFwn4oyAIHBybyBUYWdcXCc/JyxcclxuICAgICAgICAgICAgICAgIHRleHQ6ICdEaWVzIGlzdCBkZXIgRHVyY2hzY2huaXR0IMO8YmVyIGFsbGUgVGFnZSBtaXQgbWluZGVzdGVucyBlaW5lbSBnZXRyYWNrdGVuIEVyZWlnbmlzLicsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0aXBzOiB7XHJcbiAgICAgICAgICAgIGhlYWRlcjogJ1RpcHBzJyxcclxuICAgICAgICAgICAgcmlnaHRDbGlja0RlZmF1bHRSb3V0ZTogJ0R1IGthbm5zdCBlaW5lbiBkZXIgbGlua2VuIFRhYnMgaW0gSGF1cHRtZW7DvCBzb3dpZSB1bnRlcmdlb3JkbmV0ZSBNZW7DvHMgcmVjaHRza2xpY2tlbiwgdW0gZGllc2VzIChVbnRlci0pTWVuw7wgYWxzIFN0YW5kYXJkbWVuw7wgZsO8ciBkaWUgZ2V3w6RobHRlIFJvdXRlIGF1c3p1d8OkaGxlbi4nLFxyXG4gICAgICAgICAgICBudW1iZXJzS2V5Ym9hcmROYXZpZ2F0aW9uOiAnRGllIG1pdCBaaWZmZXJuIHZlcnNlaGVuZW4gVGFicyBrw7ZubmVuIGF1Y2ggw7xiZXIgZGllIFRhc3RhdHVyIGdlw7ZmZm5ldCB3ZXJkZW4sIGluZGVtIG1hbiBkaWUgcGFzc2VuZGUgWmlmZmVybnRhc3RlIGRyw7xja3QuJyxcclxuICAgICAgICAgICAgYW1vcnRpemF0aW9uVGFibGU6IHtcclxuICAgICAgICAgICAgICAgIHBhcnQxOiAnRHUgbcO2Y2h0ZXN0IHdpc3Nlbiwgd2FzIGR1IGFscyBuw6RjaHN0ZXMgYmF1ZW4gb2RlciBmb3JzY2hlbiBzb2xsdGVzdCwgdW0gZGVpbmUgUHJvZHVrdGlvbiBtw7ZnbGljaHN0IGVmZml6aWVudCB6dSBlcmjDtmhlbj8gUHJvYmllcmUgZGVuXFx4YTAnLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogJ2ludGVyYWt0aXZlbiBBbW9ydGlzYXRpb25zcmVjaG5lcicsXHJcbiAgICAgICAgICAgICAgICBwYXJ0MjogJy4nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbmxpbmVTZXR0aW5nczogJ0R1IGthbm5zdCBkYXp1Z2Vow7ZyaWdlIEVpbnN0ZWxsdW5nZW4gZGlyZWt0IMOkbmRlcm4sIGluZGVtIGR1IGF1ZiBlaW5lciBwYXNzZW5kZW4gU2VpdGUgZGFzIGtsZWluZSBaYWhucmFkLUljb24gYXVmIGRlbSByZWNodGVuIFNlaXRlIGtsaWNrc3QuJyxcclxuICAgICAgICAgICAgc3dpdGNoQWNjb3VudEh0bWw6ICdEdSBrYW5uc3QgZGFzIEludGVyZmFjZSBkZXMgT0dhbWUgVHJhY2tlcnMgZsO8ciBlaW5lbiBhbmRlcmVuIGdldHJhY2t0ZW4gQWNjb3VudHMgYW5zZWhlbiwgaW5kZW0gZHUgaW0gTWVuw7wgZGFzIEljb24gPHNwYW4gY2xhc3M9XCJtZGkgbWRpLWFjY291bnQtbXVsdGlwbGVcIj48L3NwYW4+IGtsaWNrc3QgdW5kIGRlbiBwYXNzZW5kZW4gQWNjb3VudCB3w6RobHN0LicsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgbWVzc2FnZURpc2NvcmQ6IHtcclxuICAgICAgICAgICAgcGFydDE6ICdEdSBicmF1Y2hzdCBIaWxmZSwgaGFzdCBlaW5lbiBCdWcgZ2VmdW5kZW4sIG9kZXIgaGFzdCBlaW5lIEZlYXR1cmUtQW5mcmFnZT8gVHJpdHQgZGVtXFx4YTAnLFxyXG4gICAgICAgICAgICBkaXNjb3JkU2VydmVyOiAnRGlzY29yZC1TZXJ2ZXInLFxyXG4gICAgICAgICAgICBwYXJ0MjogJ1xceGEwYmVpIHVuZCBzY2hyZWliZSBlaW5lIE5hY2hyaWNodCBpbSBwYXNzZW5kZW4gQ2hhbm5lbC4nLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgaW5mbzoge1xyXG4gICAgICAgIGhlYWRlcjogJ0luZm8nLFxyXG4gICAgICAgIHRhYmxlOiB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRBY2NvdW50OiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdJbmZvcm1hdGlvbmVuIMO8YmVyIGRlbiBhdXNnZXfDpGhsdGVuIEFjY291bnQnLFxyXG4gICAgICAgICAgICAgICAgbnVtYmVyT2ZUcmFja2VkRXhwZWRpdGlvbnM6ICdBbnphaGwgZ2V0cmFja3RlciBFeHBlZGl0aW9uZW4nLFxyXG4gICAgICAgICAgICAgICAgbnVtYmVyT2ZUcmFja2VkQ29tYmF0UmVwb3J0czogJ0FuemFobCBnZXRyYWNrdGVyIEvDpG1wZmUnLFxyXG4gICAgICAgICAgICAgICAgbnVtYmVyT2ZUcmFja2VkRGVicmlzRmllbGRSZXBvcnRzOiAnQW56YWhsIGdldHJhY2t0ZXIgVEYtQWJiYXViZXJpY2h0ZScsXHJcbiAgICAgICAgICAgICAgICBudW1iZXJPZlRyYWNrZWRMaWZlZm9ybURpc2NvdmVyaWVzOiAnQW56YWhsIGdldHJhY2t0ZXIgRW50ZGVja3VuZ3NtaXNzaW9uZW4nLFxyXG4gICAgICAgICAgICAgICAgbGFzdFVwZGF0ZVNlcnZlclNldHRpbmdzOiAnTGV0enRlIEFrdHVhbGlzaWVydW5nIGRlciBTZXJ2ZXJpbmZvcm1hdGlvbmVuJyxcclxuICAgICAgICAgICAgICAgIG51bWJlck9mVW5pdmVyc2VIaXN0b3J5RW50cmllczogJ0FuemFobCBFaW50csOkZ2UgaW4gVW5pdmVyc3Vtc2hpc3RvcmllJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2xvYmFsOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdJbmZvcm1hdGlvbmVuIMO8YmVyIGFsbGUgRGF0ZW4gaW0gT0dhbWUgVHJhY2tlcicsXHJcbiAgICAgICAgICAgICAgICBudW1iZXJPZlRyYWNrZWRBY2NvdW50czogJ0FuemFobCBnZXRyYWNrdGVyIEFjY291bnRzJyxcclxuICAgICAgICAgICAgICAgIGVzdGltYXRlZFNpemU6ICdHcsO2w59lIGFsbGVyIGdlc3BlaWNodGVybiBEYXRlbicsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbn07IiwiaW1wb3J0IHsgVW5pdmVyc2VIaXN0b3J5VHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRlOiBVbml2ZXJzZUhpc3RvcnlUcmFuc2xhdGlvbnMgPSB7XHJcbiAgICBoZWFkZXI6ICdVbml2ZXJzdW1zaGlzdG9yaWUnLFxyXG4gICAgc2V0dGluZ3M6IHsgIFxyXG4gICAgICAgIG1lc3NhZ2VzOiB7XHJcbiAgICAgICAgICAgIG5vdEVuYWJsZWRIdG1sOiBgXHJcbiAgICAgICAgICAgIDxiPkhpZ2hzY29yZS1UcmFja2luZyBkZXMgVW5pdmVyc3VtcyBpc3QgZGVha3RpdmllcnQuPC9iPjxici8+XHJcbiAgICAgICAgICAgIEFrdGl2aWVyZW4gZGllc2VzIEZlYXR1cmVzIHNvcmd0IGRhZsO8ciwgZGFzcyBIaWdoc2NvcmV2ZXLDpG5kZXJ1bmdlbiBcclxuICAgICAgICAgICAgZsO8ciBhbGxlIFNwaWVsZXIgdW5kIEFsbGlhbnplbiBnZXRyYWNrdCB3ZXJkZW4uXHJcbiAgICAgICAgICAgIGAsXHJcbiAgICAgICAgICAgIGhpc3RvcnlUcmFja2luZ05vdEVuYWJsZWRIdG1sOiBgXHJcbiAgICAgICAgICAgIDxiPlRyYWNraW5nIGRlciBVbml2ZXJzdW1zaGlzdG9yaWUgaXN0IGRlYWt0aXZpZXJ0LjwvYj48YnIvPlxyXG4gICAgICAgICAgICBJc3QgZGllc2VzIEZlYXR1cmUgYWt0aXZpZXJ0LCB3ZXJkZW4genVzw6R0emxpY2ggYWxsZSDDhG5kZXJ1bmdlbiB2b24gU3BpZWxlci1cclxuICAgICAgICAgICAgdW5kIEFsbGlhbnppbmZvcm1hdGlvbmVuIGdldHJhY2t0LjxiciAvPlxyXG4gICAgICAgICAgICBEaWVzIGJlaW5oYWx0ZXQgw4RuZGVydW5nZW4gYW4gU3BpZWxlci0gdW5kIEFsbGlhbnpuYW1lbiB1bmQgLVRhZ3MsIEFsbGlhbnptaXRnbGllZHNjaGFmdGVuLFxyXG4gICAgICAgICAgICBWZXLDpG5kZXJ1bmdlbiBhbiBTcGllbGVyc3RhdHVzLCBzb3dpZSDDhG5kZXJ1bmdlbiB6dSBQbGFuZXRlbiB1bmQgTW9uZGVuIGlua2x1c2l2ZVxyXG4gICAgICAgICAgICBWZXLDpG5kZXJ1bmdlbiBkZXIgTmFtZW4gdW5kIEtvb3JkaW5hdGVuLCB1bmQgdmVybGFzc2VuZS96ZXJzdMO2cnRlIFBsYW5ldGVuIHVuZCBNb25kZS48YnIvPlxyXG5cclxuICAgICAgICAgICAgPGk+RGllcyBrYW5uIGVpbmUgTWVuZ2UgRGF0ZW4gZ2VuZXJpZXJlbiEgXHJcbiAgICAgICAgICAgIFdpcmQgZGllIERhdGVubWVuZ2UgenUgZ3Jvw58sIFxyXG4gICAgICAgICAgICBrYW5uIGRhcyBGZWF0dXJlIDxhIGhyZWY9XCIjL3NldHRpbmdzL3VuaXZlcnNlLWhpc3RvcnlcIj5pbiBkZW4gRWluc3RlbGx1bmdlbjwvYT4gXHJcbiAgICAgICAgICAgIHdpZWRlciBkZWFrdGl2aWVydCB3ZXJkZW4uPC9pPlxyXG4gICAgICAgICAgICBgLFxyXG4gICAgICAgICAgICB0cmFja2luZ1RpbWVzSHRtbDogYFxyXG4gICAgICAgICAgICBNaW5kZXN0ZW5zIGVpbm1hbCB0w6RnbGljaCB3ZXJkZW4gSGlnaHNjb3JlcyB1bmQgVW5pdmVyc3Vtc2luZm9ybWF0aW9uZW4gKHNvZmVybiBha3RpdmllcnQpIGFrdHVhbGlzaWVydC48YnIvPlxyXG4gICAgICAgICAgICBEaWUgVWhyemVpdGVuIGbDvHIgZGllIEFrdHVhbGlzaWVydW5nZW4ga8O2bm5lbiB1bnRlbiBlaW5nZXN0ZWxsdCB3ZXJkZW4uXHJcbiAgICAgICAgICAgIEZhbGxzIGVpbmUgQWt0dWFsaXNpZXJ1bmcgenUgZWluZXIgVWhyemVpdCB2ZXJwYXNzdCB3dXJkZSwgd2lyZCBkYXMgVXBkYXRlIHNvIGZyw7xoIHdpZSBtw7ZnbGljaCBuYWNoZ2Vob2x0LlxyXG4gICAgICAgICAgICBgXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbmFibGVIaWdoc2NvcmVUcmFja2luZ09ubHk6ICdIaWdoc2NvcmUtVHJhY2tpbmcgYWt0aXZpZXJlbicsXHJcbiAgICAgICAgZW5hYmxlSGlzdG9yeVRyYWNraW5nOiAnVHJhY2tpbmcgZGVyIFVuaXZlcnN1bXNoaXN0b3JpZSBha3RpdmllcmVuJyxcclxuICAgIH0sXHJcblxyXG4gICAgdGFiczoge1xyXG4gICAgICAgIHBsYXllcnM6ICdTcGllbGVyJyxcclxuICAgICAgICBhbGxpYW5jZXM6ICdBbGxpYW56ZW4nLFxyXG5cclxuICAgICAgICBzdWJ0YWJzOiB7XHJcbiAgICAgICAgICAgIGhpZ2hzY29yZTogJ0hpZ2hzY29yZScsXHJcbiAgICAgICAgICAgIGhpc3Rvcnk6ICdIaXN0b3JpZScsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcblxyXG4gICAgcGxheWVyU2VsZWN0aW9uOiB7XHJcbiAgICAgICAgaGVhZGVyOiAnU3BpZWxlcmF1c3dhaGwnLFxyXG4gICAgICAgIHNlYXJjaDogJ1NwaWVsZXIgc3VjaGVuJyxcclxuICAgIH0sXHJcbiAgICBhbGxpYW5jZVNlbGVjdGlvbjoge1xyXG4gICAgICAgIGhlYWRlcjogJ0FsbGlhbnphdXN3YWhsJyxcclxuICAgICAgICBzZWFyY2g6ICdBbGxpYW56IHN1Y2hlbicsXHJcbiAgICB9LFxyXG5cclxuICAgIGhpZ2hzY29yZVRhYnM6IHtcclxuICAgICAgICB0b3RhbDogJ0dlc2FtdCcsXHJcbiAgICAgICAgZWNvbm9teTogJ8OWa29ub21pZScsXHJcbiAgICAgICAgcmVzZWFyY2g6ICdGb3JzY2h1bmcnLFxyXG4gICAgICAgIG1pbGl0YXJ5OiAnTWlsaXTDpHInLFxyXG4gICAgICAgIG1pbGl0YXJ5QnVpbHQ6ICdNaWxpdMOkciBnZWJhdXQnLFxyXG4gICAgICAgIG1pbGl0YXJ5RGVzdHJveWVkOiAnTWlsaXTDpHIgemVyc3TDtnJ0JyxcclxuICAgICAgICBtaWxpdGFyeUxvc3Q6ICdNaWxpdMOkciB2ZXJsb3JlbicsXHJcbiAgICAgICAgaG9ub3I6ICdFaHJlbnB1bmt0ZScsXHJcbiAgICAgICAgbnVtYmVyT2ZTaGlwczogJ0FuemFobCBTY2hpZmZlJyxcclxuICAgICAgICBsaWZlZm9ybTogJ0xlYmVuc2Zvcm0nLFxyXG4gICAgICAgIGxpZmVmb3JtRGlzY292ZXJpZXM6ICdMZWJlbnNmb3JtLUVudGRlY2t1bmdlbicsXHJcbiAgICAgICAgbGlmZWZvcm1FY29ub215OiAnTGViZW5zZm9ybS3Dlmtvbm9taWUnLFxyXG4gICAgICAgIGxpZmVmb3JtVGVjaG5vbG9neTogJ0xlYmVuc2Zvcm0tVGVjaG5vbG9naWUnLFxyXG4gICAgfSxcclxuICAgIGhpc3RvcnlUYWJzOiB7XHJcbiAgICAgICAgc3RhdHVzOiAnU3RhdHVzJyxcclxuICAgICAgICBuaWNrbmFtZXM6ICdOaWNrbmFtZW4nLFxyXG4gICAgICAgIGFsbGlhbmNlczogJ0FsbGlhbnplbicsXHJcbiAgICAgICAgcGxhbmV0QW5kTW9vbnM6ICdQbGFuZXRlbiAmIE1vbmRlJyxcclxuXHJcbiAgICAgICAgdGFnczogJ1RhZ3MnLFxyXG4gICAgICAgIG5hbWVzOiAnTmFtZW4nLFxyXG4gICAgICAgIG1lbWJlcnM6ICdNaXRnbGllZGVyJyxcclxuICAgIH0sXHJcblxyXG4gICAgbm9BbGxpYW5jZTogJ2tlaW5lIEFsbGlhbnonLFxyXG4gICAgdG9kYXk6ICdoZXV0ZScsXHJcbiAgICBuYW1lOiAnTmFtZScsXHJcbiAgICB0YWc6ICdUYWcnLFxyXG4gICAgbWVtYmVyczogJ01pdGdsaWVkZXInLFxyXG4gICAgYWxsaWFuY2U6ICdBbGxpYW56JyxcclxuICAgIGZyb206ICdWb24nLFxyXG4gICAgdW50aWw6ICdCaXMnLFxyXG5cclxuICAgIHN0YXR1czoge1xyXG4gICAgICAgIGFjdGl2ZTogJ0FrdGl2JyxcclxuICAgICAgICB2YWNhdGlvbjogJ1VybGF1YnNtb2R1cycsXHJcbiAgICAgICAgaW5hY3RpdmU6ICdJbmFrdGl2ICg+PSA3IFRhZ2UpJyxcclxuICAgICAgICBpbmFjdGl2ZUxvbmc6ICdJbmFrdGl2ICg+PSAyOCBUYWdlKScsXHJcbiAgICAgICAgYmFubmVkOiAnR2VzcGVycnQnLFxyXG4gICAgICAgIG91dGxhdzogJ1ZvZ2VsZnJlaScsXHJcbiAgICAgICAgZGVsZXRlZDogJ0dlbMO2c2NodCcsXHJcbiAgICAgICAgYWRtaW46ICdBZG1pbicsXHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBsb2FkaW5nVGFraW5nTG9uZzogJ0RhcyBMYWRlbiBkZXIgRGF0ZW4gZGF1ZXJ0IGzDpG5nZXIgYWxzIGVyd2FydGV0LiBWZXJtdXRsaWNoIHdpcmQgZGllIERhdGVuYmFuayBnZXJhZGUgYWt0dWFsaXNpZXJ0LCBiaXR0ZSB3YXJ0ZSBvZGVyIHZlcnN1Y2ggZXMgc3DDpHRlciBlcm5ldXQuJyxcclxufTsiLCJpbXBvcnQgeyBOb3RpZmljYXRpb25UcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZGU6IE5vdGlmaWNhdGlvblRyYW5zbGF0aW9ucyA9IHtcclxuICAgIGNvbWJhdFRyYWNraW5nOiB7XHJcbiAgICAgICAgdGl0bGU6ICh2YWx1ZTogc3RyaW5nKSA9PlxyXG4gICAgICAgICAgICB2YWx1ZSA9PSAnMSdcclxuICAgICAgICAgICAgICAgID8gYCR7dmFsdWV9IG5ldWVyIEthbXBmYmVyaWNodCBnZXRyYWNrdGBcclxuICAgICAgICAgICAgICAgIDogYCR7dmFsdWV9IG5ldWUgS2FtcGZiZXJpY2h0ZSBnZXRyYWNrdGAsXHJcbiAgICAgICAgbWVzc2FnZTogKHZhbHVlOiBzdHJpbmcpID0+XHJcbiAgICAgICAgICAgIHZhbHVlID09ICcxJ1xyXG4gICAgICAgICAgICAgICAgPyBgRXMgd3VyZGUgJHt2YWx1ZX0gbmV1ZXIgS2FtcGZiZXJpY2h0IGdldHJhY2t0LmBcclxuICAgICAgICAgICAgICAgIDogYEVzIHd1cmRlbiAke3ZhbHVlfSBuZXVlIEthbXBmYmVyaWNodGUgZ2V0cmFja3QuYCxcclxuICAgIH0sXHJcbiAgICBkZWJyaXNGaWVsZFJlcG9ydFRyYWNraW5nOiB7XHJcbiAgICAgICAgdGl0bGU6ICh2YWx1ZTogc3RyaW5nKSA9PlxyXG4gICAgICAgICAgICB2YWx1ZSA9PSAnMSdcclxuICAgICAgICAgICAgICAgID8gYCR7dmFsdWV9IG5ldWVyIFRGLUFiYmF1YmVyaWNodCBnZXRyYWNrdGBcclxuICAgICAgICAgICAgICAgIDogYCR7dmFsdWV9IG5ldWUgVEYtQWJiYXViZXJpY2h0ZSBnZXRyYWNrdGAsXHJcbiAgICAgICAgbWVzc2FnZTogKHZhbHVlOiBzdHJpbmcpID0+XHJcbiAgICAgICAgICAgIHZhbHVlID09ICcxJ1xyXG4gICAgICAgICAgICAgICAgPyBgRXMgd3VyZGUgJHt2YWx1ZX0gbmV1ZXIgVEYtQWJiYXViZXJpY2h0IGdldHJhY2t0LmBcclxuICAgICAgICAgICAgICAgIDogYEVzIHd1cmRlbiAke3ZhbHVlfSBuZXVlIFRGLUFiYmF1YmVyaWNodGUgZ2V0cmFja3QuYCxcclxuICAgIH0sXHJcbiAgICBleHBlZGl0aW9uVHJhY2tpbmc6IHtcclxuICAgICAgICBmbGVldExvc3Q6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICh2YWx1ZTogc3RyaW5nKSA9PlxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPT0gJzEnXHJcbiAgICAgICAgICAgICAgICAgICAgPyBgJHt2YWx1ZX0gRmxvdHRlbnZlcmx1c3RgXHJcbiAgICAgICAgICAgICAgICAgICAgOiBgJHt2YWx1ZX0gRmxvdHRlbnZlcmx1c3RlYCxcclxuICAgICAgICAgICAgbWVzc2FnZTogKHZhbHVlOiBzdHJpbmcpID0+XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9PSAnMSdcclxuICAgICAgICAgICAgICAgICAgICA/IGAke3ZhbHVlfSBGbG90dGUgaXN0IG5pY2h0IHZvbiBpaHJlciBFeHBlZGl0aW9uIHp1csO8Y2tnZWtlaHJ0LmBcclxuICAgICAgICAgICAgICAgICAgICA6IGAke3ZhbHVlfSBGbG90dGVuIHNpbmQgbmljaHQgdm9uIGlocmVyIEV4cGVkaXRpb24genVyw7xja2dla2VocnQuYCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlc3VsdDoge1xyXG4gICAgICAgICAgICB0aXRsZTogKHZhbHVlOiBzdHJpbmcpID0+XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9PSAnMSdcclxuICAgICAgICAgICAgICAgICAgICA/IGAke3ZhbHVlfSBuZXVlIEV4cGVkaXRpb24gZ2V0cmFja3RgXHJcbiAgICAgICAgICAgICAgICAgICAgOiBgJHt2YWx1ZX0gbmV1ZSBFeHBlZGl0aW9uZW4gZ2V0cmFja3RgLFxyXG4gICAgICAgICAgICBzdW1tYXJ5OiAnWnVzYW1tZW5mYXNzdW5nIGRlciBGdW5kZScsXHJcbiAgICAgICAgICAgIGV2ZW50czogJ0V4cGVkaXRpb25zZXJlaWduaXNzZScsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBsaWZlZm9ybURpc2NvdmVyeVRyYWNraW5nOiB7XHJcbiAgICAgICAgdGl0bGU6ICh2YWx1ZTogc3RyaW5nKSA9PlxyXG4gICAgICAgICAgICB2YWx1ZSA9PSAnMSdcclxuICAgICAgICAgICAgICAgID8gYCR7dmFsdWV9IG5ldWUgTEYtRW50ZGVja3VuZ3NtaXNzaW9uIGdldHJhY2t0YFxyXG4gICAgICAgICAgICAgICAgOiBgJHt2YWx1ZX0gbmV1ZSBMRi1FbnRkZWNrdW5nc21pc3Npb25lbiBnZXRyYWNrdGAsXHJcbiAgICAgICAgbWVzc2FnZTogKHZhbHVlOiBzdHJpbmcpID0+XHJcbiAgICAgICAgICAgIHZhbHVlID09ICcxJ1xyXG4gICAgICAgICAgICAgICAgPyBgJHt2YWx1ZX0gbmV1ZSBMZWJlbnNmb3JtLUVudGRlY2t1bmdzbWlzc2lvbiB3dXJkZSBnZXRyYWNrdC5gXHJcbiAgICAgICAgICAgICAgICA6IGAke3ZhbHVlfSBuZXVlIExlYmVuc2Zvcm0tRW50ZGVja3VuZ3NtaXNzaW9uZW4gd3VyZGVuIGdldHJhY2t0LmAsXHJcbiAgICB9LFxyXG5cclxuICAgIG1lc3NhZ2VUcmFja2luZ0Vycm9yOiB7XHJcbiAgICAgICAgdGl0bGU6ICh2YWx1ZTogc3RyaW5nKSA9PlxyXG4gICAgICAgICAgICB2YWx1ZSA9PSAnMSdcclxuICAgICAgICAgICAgICAgID8gYEZlaGxlciBiZWltIFZlcmFyYmVpdGVuIHZvbiAke3ZhbHVlfSBOYWNocmljaHRgXHJcbiAgICAgICAgICAgICAgICA6IGBGZWhsZXIgYmVpbSBWZXJhcmJlaXRlbiB2b24gJHt2YWx1ZX0gTmFjaHJpY2h0ZW5gLFxyXG4gICAgICAgIG1lc3NhZ2U6ICh2YWx1ZTogc3RyaW5nKSA9PlxyXG4gICAgICAgICAgICB2YWx1ZSA9PSAnMSdcclxuICAgICAgICAgICAgICAgID8gYCR7dmFsdWV9IE5hY2hyaWNodCBoYXQgZWluZW4gRmVobGVyIHZlcnVyc2FjaHQgdW5kIHd1cmRlIG5pY2h0IGdldHJhY2t0LiBEaWUgZmVobGVyaGFmdGUgTmFjaHJpY2h0IHd1cmRlbiByb3QgbWFya2llcnQuIEJpdHRlIGtvbnRha3RpZXJlIGRlbiBFbnR3aWNrbGVyLmBcclxuICAgICAgICAgICAgICAgIDogYCR7dmFsdWV9IE5hY2hyaWNodGVuIGhhYmVuIGVpbmVuIEZlaGxlciB2ZXJ1cnNhY2h0IHVuZCB3dXJkZW4gbmljaHQgZ2V0cmFja3QuIERpZSBmZWhsZXJoYWZ0ZW4gTmFjaHJpY2h0ZW4gd3VyZGVuIHJvdCBtYXJraWVydC4gQml0dGUga29udGFrdGllcmUgZGVuIEVudHdpY2tsZXIuYCxcclxuICAgIH0sXHJcbn07IiwiaW1wb3J0IHsgVG9vbHNUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZGU6IFRvb2xzVHJhbnNsYXRpb25zID0ge1xyXG4gICAgc2lnbmF0dXJlR2VuZXJhdG9yOiB7XHJcbiAgICAgICAgaGVhZGVyOiAnU2lnbmF0dXItR2VuZXJhdG9yJyxcclxuICAgICAgICBcclxuICAgICAgICBhdmVyYWdlUGVySG91cjogJ+KMgC9TdHVuZGUnLFxyXG4gICAgICAgIHRvdGFsUGVySG91cjogJ3BybyBTdHVuZGUnLFxyXG4gICAgICAgIHRvdGFsUGVyRGF5OiAncHJvIFRhZycsXHJcbiAgICAgICAgdG90YWxQZXJXZWVrOiAncHJvIFdvY2hlJyxcclxuXHJcbiAgICAgICAgcHJvZHVjdGlvbjogJ1Byb2R1a3Rpb24nLFxyXG4gICAgICAgIGV4cGVkaXRpb25zOiAnRXhwZWRpdGlvbmVuJyxcclxuICAgICAgICBsaWZlZm9ybURpc2NvdmVyaWVzOiAnTEYtTWlzc2lvbmVuJyxcclxuICAgICAgICBjb21iYXRzOiAnS8OkbXBmZScsXHJcbiAgICAgICAgZGVicmlzRmllbGRSZXBvcnRzOiAnQWJnZWJhdXRlIFRGcycsXHJcbiAgICB9LFxyXG4gICAgc2NyYXB5YXJkTWVyY2hhbnQ6IHtcclxuICAgICAgICBoZWFkZXI6ICdTY2hyb3R0aMOkbmRsZXInLFxyXG4gICAgICAgIHBlcmNlbnRhZ2U6ICclIGJlaW0gU2Nocm90dGjDpG5kbGVyJyxcclxuICAgICAgICBjb3VudDogJ0FuemFobCcsXHJcbiAgICB9LFxyXG59OyIsImltcG9ydCB7IEV4Y2VsRXhwb3J0VHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRlOiBFeGNlbEV4cG9ydFRyYW5zbGF0aW9ucyA9IHtcclxuICAgIGhlYWRlcjogJ0V4Y2VsLUV4cG9ydCcsXHJcbiAgICBjaG9vc2VCZWxvd01lc3NhZ2U6ICdXw6RobGUgZGllIHp1IGV4cG9ydGllcmVuZGVuIERhdGVuOicsXHJcbiAgICBncm91cHM6IHtcclxuICAgICAgICBleHBlZGl0aW9uczoge1xyXG4gICAgICAgICAgICBoZWFkZXI6ICdFeHBlZGl0aW9uZW4nLFxyXG4gICAgICAgICAgICByYXdEYXRhOiAnUm9oZGF0ZW4gKGplZGUgZWluemVsbmUgZ2V0cmFja3RlIEV4cGVkaXRpb24pJyxcclxuICAgICAgICAgICAgZGFpbHlPdmVydmlldzogJ8OcYmVyc2ljaHQgw7xiZXIgRXJnZWJuaXNzZSBwcm8gVGFnJyxcclxuICAgICAgICAgICAgZGFpbHlEZXBsZXRpb246ICfDnGJlcnNpY2h0IMO8YmVyIFN5c3RlbWF1c2xhc3R1bmcgcHJvIFRhZycsXHJcbiAgICAgICAgICAgIGRhaWx5UmVzb3VyY2VzOiAnUm9oc3RvZmZmdW5kZSBwcm8gVGFnJyxcclxuICAgICAgICAgICAgZGFpbHlSZXNvdXJjZVNpemVzOiAnR3LDtsOfZW4gZGVyIFJvaHN0b2ZmZnVuZGUgcHJvIFRhZycsXHJcbiAgICAgICAgICAgIGRhaWx5U2hpcHM6ICdTY2hpZmZzZnVuZGUgcHJvIFRhZycsXHJcbiAgICAgICAgICAgIGRhaWx5U2hpcFNpemVzOiAnR3LDtsOfZW4gZGVyIFNjaGlmZnNmdW5kZSBwcm8gVGFnJyxcclxuICAgICAgICAgICAgZGFpbHlEYXJrTWF0dGVyOiAnRE0tRnVuZGUgcHJvIFRhZycsXHJcbiAgICAgICAgICAgIGRhaWx5RGFya01hdHRlclNpemVzOiAnR3LDtsOfZW4gZGVyIERNLUZ1bmRlIHBybyBUYWcnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29tYmF0czoge1xyXG4gICAgICAgICAgICBoZWFkZXI6ICdLw6RtcGZlJyxcclxuICAgICAgICAgICAgcmF3RGF0YTogJ1JvaGRhdGVuIChqZWRlcyBlaW56ZWxuZSBLYW1wZmVyZ2VibmlzKScsXHJcbiAgICAgICAgICAgIGRhaWx5UmVzdWx0czogJ0thbXBmZXJnZWJuaXNzZSBwcm8gVGFnJyxcclxuICAgICAgICAgICAgZGFpbHlMb290OiAnQmV1dGViaWxhbnogcHJvIFRhZycsXHJcbiAgICAgICAgICAgIGRhaWx5TG9zdFNoaXBzOiAnVmVybG9yZW5lIFNjaGlmZmUgcHJvIFRhZycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZWJyaXNGaWVsZHM6IHtcclxuICAgICAgICAgICAgaGVhZGVyOiAnVHLDvG1tZXJmZWxkZXInLFxyXG4gICAgICAgICAgICByYXdEYXRhOiAnUm9oZGF0ZW4gKGplZGVyIGVpbnplbG5lIGdldHJhY2t0ZSBURi1BYmJhdWJlcmljaHQpJyxcclxuICAgICAgICAgICAgZGFpbHlSZXNvdXJjZXM6ICdBYmdlYmF1dGUgUm9oc3RvZmZlIHBybyBUYWcnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGlmZWZvcm1EaXNjb3Zlcmllczoge1xyXG4gICAgICAgICAgICBoZWFkZXI6ICdFbnRkZWNrdW5nc21pc3Npb25lbicsXHJcbiAgICAgICAgICAgIHJhd0RhdGE6ICdSb2hkYXRlbiAoamVkZSBlaW56ZWxuZSBnZXRyYWNrdGUgTWlzc2lvbiknLFxyXG4gICAgICAgICAgICBkYWlseUV4cGVyaWVuY2U6ICdHZXNhbW1lbHRlIEVyZmFocnVuZyBwcm8gVGFnJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIGdlbmVyYXRlQnV0dG9uOiAnRXhjZWwtRXhwb3J0IGdlbmVyaWVyZW4nLFxyXG5cclxuICAgIGV4cGVkaXRpb25zOiB7XHJcbiAgICAgICAgcHJlZml4OiAnRVgnLFxyXG5cclxuICAgICAgICBzaGVldHM6IHtcclxuICAgICAgICAgICAgcmF3RGF0YTogJ1JvaGRhdGVuJyxcclxuICAgICAgICAgICAgZGFpbHlEZXBsZXRpb246ICdUw6RnbC4gU3lzdGVtYXVzbGFzdHVuZycsXHJcbiAgICAgICAgICAgIGRhaWx5UmVzdWx0czogJ1TDpGdsLiBFcmdlYm5pc3NlJyxcclxuICAgICAgICAgICAgZGFpbHlSZXNvdXJjZXM6ICdUw6RnbC4gUm9oc3RvZmZlJyxcclxuICAgICAgICAgICAgZGFpbHlSZXNvdXJjZXNTaXplOiAnVMOkZ2wuIFJvaHN0b2ZmZSAoR3LDtsOfZW4nLFxyXG4gICAgICAgICAgICBkYWlseVNoaXBzOiAnVMOkZ2wuIFNjaGlmZmUnLFxyXG4gICAgICAgICAgICBkYWlseVNoaXBzU2l6ZTogJ1TDpGdsLiBTY2hpZmZlIChHcsO2w59lKScsXHJcbiAgICAgICAgICAgIGRhaWx5RGFya01hdHRlcjogJ1TDpGdsLiBETScsXHJcbiAgICAgICAgICAgIGRhaWx5RGFya01hdHRlclNpemU6ICdUw6RnbC4gRE0gKEdyw7bDn2UpJyxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBldmVudFR5cGU6ICdUeXAnLFxyXG4gICAgICAgIGV2ZW50U2l6ZTogJ0dyw7bDn2UnLFxyXG4gICAgICAgIGl0ZW06ICdJdGVtJyxcclxuICAgIH0sXHJcbiAgICBjb21iYXRzOiB7XHJcbiAgICAgICAgcHJlZml4OiAnS0InLFxyXG5cclxuICAgICAgICBzaGVldHM6IHtcclxuICAgICAgICAgICAgcmF3RGF0YTogJ1JvaGRhdGVuJyxcclxuICAgICAgICAgICAgZGFpbHlSZXN1bHRzOiAnVMOkZ2xpY2hlIEVyZ2Vibmlzc2UnLFxyXG4gICAgICAgICAgICBkYWlseUxvb3Q6ICdUw6RnbGljaGUgQmV1dGUnLFxyXG4gICAgICAgICAgICBkYWlseUxvc3RTaGlwczogJ1TDpGdsaWNoIHZlcmxvcmVuZSBTY2hpZmZlJyxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICByZXN1bHQ6ICdLYW1wZmVyZ2VibmlzJyxcclxuICAgICAgICBjb29yZGluYXRlczogJ0tvb3JkaW5hdGVuJyxcclxuICAgICAgICBnYWxheHk6ICdHYWxheGllJyxcclxuICAgICAgICBzeXN0ZW06ICdTeXN0ZW0nLFxyXG4gICAgICAgIHBvc2l0aW9uOiAnUG9zaXRpb24nLFxyXG4gICAgICAgIHRhcmdldFR5cGU6ICdaaWVsdHlwJyxcclxuICAgICAgICBjb21iYXRUeXBlOiAnS2FtcGZ0eXAnLFxyXG4gICAgICAgIGV4cGVkaXRpb25Db21iYXRPcHBvbmVudDogJ0V4cGVkaXRpb25za2FtcGZnZWduZXInLFxyXG4gICAgICAgIGxvb3Q6ICdCZXV0ZScsXHJcbiAgICAgICAgbG9zdFNoaXBzOiAnVmVybG9yZW5lIFNjaGlmZmUnLFxyXG4gICAgICAgIGRlYnJpc0ZpZWxkOiAnVHLDvG1tZXJmZWxkJyxcclxuICAgICAgICBtb29uOiAnTW9uZCcsXHJcbiAgICAgICAgcGxhbmV0OiAnUGxhbmV0JyxcclxuICAgICAgICBleHBlZGl0aW9uQ29tYmF0OiAnRXhwZWRpdGlvbnNrYW1wZicsXHJcbiAgICAgICAgcGxheWVyQ29tYmF0OiAnU3BpZWxlcmthbXBmJyxcclxuICAgICAgICBwaXJhdGVzOiAnUGlyYXRlbicsXHJcbiAgICAgICAgYWxpZW5zOiAnQWxpZW5zJyxcclxuXHJcbiAgICAgICAgYWdhaW5zdFBsYXllcnM6ICdHZWdlbiBTcGllbGVyJyxcclxuICAgICAgICBvbkV4cGVkaXRpb25zOiAnQXVmIEV4cGVkaXRpb25lbicsXHJcbiAgICB9LFxyXG4gICAgZGVicmlzRmllbGRzOiB7XHJcbiAgICAgICAgcHJlZml4OiAnVEYnLFxyXG5cclxuICAgICAgICBzaGVldHM6IHtcclxuICAgICAgICAgICAgcmF3RGF0YTogJ1JvaGRhdGVuJyxcclxuICAgICAgICAgICAgZGFpbHlSZXNvdXJjZXM6ICdUw6RnbGljaGUgUm9oc3RvZmZlJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIGxpZmVmb3JtRGlzY292ZXJpZXM6IHtcclxuICAgICAgICBwcmVmaXg6ICdMRicsXHJcblxyXG4gICAgICAgIHNoZWV0czoge1xyXG4gICAgICAgICAgICByYXdEYXRhOiAnUm9oZGF0ZW4nLFxyXG4gICAgICAgICAgICBkYWlseUV4cGVyaWVuY2U6ICdUw6RnbGljaGUgRXJmYWhydW5nJyxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICByZXN1bHQ6ICdGdW5kJyxcclxuICAgICAgICBleHBlcmllbmNlOiAnRXJmYWhydW5nJyxcclxuICAgICAgICBsaWZlZm9ybTogJ0xlYmVuc2Zvcm0nLFxyXG4gICAgICAgIGFydGlmYWN0czogJ0FydGVmYWt0ZScsXHJcbiAgICAgICAgYXJ0aWZhY3RzU2l6ZTogJ0dyw7bDn2UnLFxyXG4gICAgfSxcclxufTsiLCJpbXBvcnQgeyBQbGF5ZXJDbGFzc1RyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBkZTogUGxheWVyQ2xhc3NUcmFuc2xhdGlvbnMgPSB7XHJcbiAgICBjb2xsZWN0b3I6ICdLb2xsZWt0b3InLFxyXG4gICAgZGlzY292ZXJlcjogJ0VudGRlY2tlcicsXHJcbiAgICBnZW5lcmFsOiAnR2VuZXJhbCcsXHJcbiAgICBub25lOiAna2VpbmUnLFxyXG59OyIsImltcG9ydCB7IFNoaXBUeXBlIH0gZnJvbSBcIi4uLy4uLy4uL21vZGVscy9vZ2FtZS9zaGlwcy9TaGlwVHlwZVwiO1xyXG5pbXBvcnQgeyBTaGlwVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBlbjogU2hpcFRyYW5zbGF0aW9ucyA9ICB7XHJcbiAgICBbU2hpcFR5cGUubGlnaHRGaWdodGVyXTogJ0xpZ2h0IEZpZ2h0ZXInLFxyXG4gICAgW1NoaXBUeXBlLmhlYXZ5RmlnaHRlcl06ICdIZWF2eSBGaWdodGVyJyxcclxuICAgIFtTaGlwVHlwZS5jcnVpc2VyXTogJ0NydWlzZXInLFxyXG4gICAgW1NoaXBUeXBlLmJhdHRsZXNoaXBdOiAnQmF0dGxlc2hpcCcsXHJcbiAgICBbU2hpcFR5cGUuYmF0dGxlY3J1aXNlcl06ICdCYXR0bGVjcnVpc2VyJyxcclxuICAgIFtTaGlwVHlwZS5ib21iZXJdOiAnQm9tYmVyJyxcclxuICAgIFtTaGlwVHlwZS5kZXN0cm95ZXJdOiAnRGVzdHJveWVyJyxcclxuICAgIFtTaGlwVHlwZS5kZWF0aFN0YXJdOiAnRGVhdGhzdGFyJyxcclxuICAgIFtTaGlwVHlwZS5yZWFwZXJdOiAnUmVhcGVyJyxcclxuICAgIFtTaGlwVHlwZS5wYXRoZmluZGVyXTogJ1BhdGhmaW5kZXInLFxyXG4gICAgW1NoaXBUeXBlLnNtYWxsQ2FyZ29dOiAnU21hbGwgQ2FyZ28nLFxyXG4gICAgW1NoaXBUeXBlLmxhcmdlQ2FyZ29dOiAnTGFyZ2UgQ2FyZ28nLFxyXG4gICAgW1NoaXBUeXBlLnJlY3ljbGVyXTogJ1JlY3ljbGVyJyxcclxuICAgIFtTaGlwVHlwZS5jb2xvbnlTaGlwXTogJ0NvbG9ueSBTaGlwJyxcclxuICAgIFtTaGlwVHlwZS5lc3Bpb25hZ2VQcm9iZV06ICdFc3Bpb25hZ2UgUHJvYmUnLFxyXG4gICAgW1NoaXBUeXBlLmNyYXdsZXJdOiAnQ3Jhd2xlcicsXHJcbiAgICBbU2hpcFR5cGUuc29sYXJTYXRlbGxpdGVdOiAnU29sYXIgU2F0ZWxsaXRlJyxcclxufTsiLCJpbXBvcnQgeyBEZWZlbnNlVHlwZSB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvb2dhbWUvZGVmZW5zZXMvRGVmZW5zZVR5cGVcIjtcclxuaW1wb3J0IHsgRGVmZW5zZVRyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZW46IERlZmVuc2VUcmFuc2xhdGlvbnMgPSAge1xyXG4gICAgW0RlZmVuc2VUeXBlLnJvY2tldExhdW5jaGVyXTogJ1JvY2tldCBMYXVuY2hlcicsXHJcbiAgICBbRGVmZW5zZVR5cGUubGlnaHRMYXNlcl06ICdMaWdodCBMYXNlcicsXHJcbiAgICBbRGVmZW5zZVR5cGUuaGVhdnlMYXNlcl06ICdIZWF2eSBMYXNlcicsXHJcbiAgICBbRGVmZW5zZVR5cGUuZ2F1c3NDYW5ub25dOiAnR2F1c3MgQ2Fubm9uJyxcclxuICAgIFtEZWZlbnNlVHlwZS5pb25DYW5ub25dOiAnSW9uIENhbm5vbicsXHJcbiAgICBbRGVmZW5zZVR5cGUucGxhc21hVHVycmV0XTogJ1BsYXNtYSBUdXJyZXQnLFxyXG4gICAgW0RlZmVuc2VUeXBlLnNtYWxsU2hpZWxkRG9tZV06ICdTbWFsbCBTaGllbGQgRG9tZScsXHJcbiAgICBbRGVmZW5zZVR5cGUubGFyZ2VTaGllbGREb21lXTogJ0xhcmdlIFNoaWVsZCBEb21lJyxcclxufTsiLCJpbXBvcnQgeyBCdWlsZGluZ1R5cGUgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL29nYW1lL2J1aWxkaW5ncy9CdWlsZGluZ1R5cGVcIjtcclxuaW1wb3J0IHsgQnVpbGRpbmdUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGVuOiBCdWlsZGluZ1RyYW5zbGF0aW9ucyA9IHtcclxuICAgIFtCdWlsZGluZ1R5cGUubWV0YWxNaW5lXTogJ01ldGFsIE1pbmUnLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5tZXRhbFN0b3JhZ2VdOiAnTWV0YWwgU3RvcmFnZScsXHJcbiAgICBbQnVpbGRpbmdUeXBlLmNyeXN0YWxNaW5lXTogJ0NyeXN0YWwgTWluZScsXHJcbiAgICBbQnVpbGRpbmdUeXBlLmNyeXN0YWxTdG9yYWdlXTogJ0NyeXN0YWwgU3RvcmFnZScsXHJcbiAgICBbQnVpbGRpbmdUeXBlLmRldXRlcml1bVN5bnRoZXNpemVyXTogJ0RldXRlcml1bSBTeW50aGVzaXplcicsXHJcbiAgICBbQnVpbGRpbmdUeXBlLmRldXRlcml1bVRhbmtdOiAnRGV1dGVyaXVtIFRhbmsnLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5zb2xhclBsYW50XTogJ1NvbGFyIFBsYW50JyxcclxuICAgIFtCdWlsZGluZ1R5cGUuZnVzaW9uUmVhY3Rvcl06ICdGdXNpb24gUmVhY3RvcicsXHJcbiAgICBbQnVpbGRpbmdUeXBlLnJvYm90aWNzRmFjdG9yeV06ICdSb2JvdGljcyBGYWN0b3J5JyxcclxuICAgIFtCdWlsZGluZ1R5cGUubmFuaXRlRmFjdG9yeV06ICdOYW5pdGUgRmFjdG9yeScsXHJcbiAgICBbQnVpbGRpbmdUeXBlLnNoaXB5YXJkXTogJ1NoaXB5YXJkJyxcclxuICAgIFtCdWlsZGluZ1R5cGUuc3BhY2VEb2NrXTogJ1NwYWNlIERvY2snLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5taXNzaWxlU2lsb106ICdNaXNzaWxlIFNpbG8nLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5yZXNlYXJjaExhYl06ICdSZXNlYXJjaCBMYWInLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5hbGxpYW5jZURlcG90XTogJ0FsbGlhbmNlIERlcG90JyxcclxuICAgIFtCdWlsZGluZ1R5cGUudGVycmFmb3JtZXJdOiAnVGVycmFmb3JtZXInLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5sdW5hckJhc2VdOiAnTHVuYXIgQmFzZScsXHJcbiAgICBbQnVpbGRpbmdUeXBlLnNlbnNvclBoYWxhbnhdOiAnU2Vuc29yIFBoYWxhbngnLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5qdW1wR2F0ZV06ICdKdW1wIEdhdGUnLFxyXG59OyIsImltcG9ydCB7IFJlc2VhcmNoVHlwZSB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvb2dhbWUvcmVzZWFyY2gvUmVzZWFyY2hUeXBlXCI7XHJcbmltcG9ydCB7IFJlc2VhcmNoVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBlbjogUmVzZWFyY2hUcmFuc2xhdGlvbnMgPSB7XHJcbiAgICBbUmVzZWFyY2hUeXBlLmVuZXJneVRlY2hub2xvZ3ldOiAnRW5lcmd5IFRlY2hub2xvZ3knLFxyXG4gICAgW1Jlc2VhcmNoVHlwZS5sYXNlclRlY2hub2xvZ3ldOiAnTGFzZXIgVGVjaG5vbG9neScsXHJcbiAgICBbUmVzZWFyY2hUeXBlLmlvblRlY2hub2xvZ3ldOiAnSW9uIFRlY2hub2xvZ3knLFxyXG4gICAgW1Jlc2VhcmNoVHlwZS5oeXBlcnNwYWNlVGVjaG5vbG9neV06ICdIeXBlcnNwYWNlIFRlY2hub2xvZ3knLFxyXG4gICAgW1Jlc2VhcmNoVHlwZS5wbGFzbWFUZWNobm9sb2d5XTogJ1BsYXNtYSBUZWNobm9sb2d5JyxcclxuICAgIFtSZXNlYXJjaFR5cGUuZXNwaW9uYWdlVGVjaG5vbG9neV06ICdFc3Bpb25hZ2UgVGVjaG5vbG9neScsXHJcbiAgICBbUmVzZWFyY2hUeXBlLmNvbXB1dGVyVGVjaG5vbG9neV06ICdDb21wdXRlciBUZWNobm9sb2d5JyxcclxuICAgIFtSZXNlYXJjaFR5cGUuYXN0cm9waHlzaWNzXTogJ0FzdHJvcGh5c2ljcycsXHJcbiAgICBbUmVzZWFyY2hUeXBlLmludGVyZ2FsYWN0aWNSZXNlYXJjaE5ldHdvcmtdOiAnSW50ZXJnYWxhY3RpYyBSZXNlYXJjaCBOZXR3b3JrJyxcclxuICAgIFtSZXNlYXJjaFR5cGUuZ3Jhdml0b25UZWNobm9sb2d5XTogJ0dyYXZpdG9uIFRlY2hub2xvZ3knLFxyXG4gICAgW1Jlc2VhcmNoVHlwZS5jb21idXN0aW9uRHJpdmVdOiAnQ29tYnVzdGlvbiBEcml2ZScsXHJcbiAgICBbUmVzZWFyY2hUeXBlLmltcHVsc2VEcml2ZV06ICdJbXB1bHNlIERyaXZlJyxcclxuICAgIFtSZXNlYXJjaFR5cGUuaHlwZXJzcGFjZURyaXZlXTogJ0h5cGVyc3BhY2UgRHJpdmUnLFxyXG4gICAgW1Jlc2VhcmNoVHlwZS53ZWFwb25zVGVjaG5vbG9neV06ICdXZWFwb25zIFRlY2hub2xvZ3knLFxyXG4gICAgW1Jlc2VhcmNoVHlwZS5zaGllbGRpbmdUZWNobm9sb2d5XTogJ1NoaWVsZGluZyBUZWNobm9sb2d5JyxcclxuICAgIFtSZXNlYXJjaFR5cGUuYXJtb3JUZWNobm9sb2d5XTogJ0FybW91ciBUZWNobm9sb2d5JyxcclxufTsiLCJpbXBvcnQgeyBMaWZlZm9ybVR5cGUgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL29nYW1lL2xpZmVmb3Jtcy9MaWZlZm9ybVR5cGVcIjtcclxuaW1wb3J0IHsgTGlmZWZvcm1UcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBlbjogTGlmZWZvcm1UcmFuc2xhdGlvbnMgPSB7XHJcbiAgICBbTGlmZWZvcm1UeXBlLm5vbmVdOiAnTm8gTGlmZWZvcm0nLFxyXG4gICAgW0xpZmVmb3JtVHlwZS5odW1hbnNdOiAnSHVtYW5zJyxcclxuICAgIFtMaWZlZm9ybVR5cGUucm9ja3RhbF06ICdSb2NrXFwndGFsJyxcclxuICAgIFtMaWZlZm9ybVR5cGUubWVjaGFzXTogJ01lY2hhcycsXHJcbiAgICBbTGlmZWZvcm1UeXBlLmthZWxlc2hdOiAnS2FlbGVzaCcsXHJcbn07IiwiaW1wb3J0IHsgTGlmZWZvcm1CdWlsZGluZ1R5cGUgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL29nYW1lL2xpZmVmb3Jtcy9MaWZlZm9ybUJ1aWxkaW5nVHlwZVwiO1xyXG5pbXBvcnQgeyBMaWZlZm9ybUJ1aWxkaW5nc1RyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZW46IExpZmVmb3JtQnVpbGRpbmdzVHJhbnNsYXRpb25zID0ge1xyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLnJlc2lkZW50aWFsU2VjdG9yXTogJ1Jlc2lkZW50aWFsIFNlY3RvcicsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuYmlvc3BoZXJlRmFybV06ICdCaW9zcGhlcmUgRmFybScsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUucmVzZWFyY2hDZW50cmVdOiAnUmVzZWFyY2ggQ2VudHJlJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5hY2FkZW15T2ZTY2llbmNlc106ICdBY2FkZW15IG9mIFNjaWVuY2VzJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5uZXVyb0NhbGlicmF0aW9uQ2VudHJlXTogJ05ldXJvLUNhbGlicmF0aW9uIENlbnRyZScsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuaGlnaEVuZXJneVNtZWx0aW5nXTogJ0hpZ2ggRW5lcmd5IFNtZWx0aW5nJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5mb29kU2lsb106ICdGb29kIFNpbG8nLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmZ1c2lvblBvd2VyZWRQcm9kdWN0aW9uXTogJ0Z1c2lvbi1Qb3dlcmVkIFByb2R1Y3Rpb24nLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLnNreXNjcmFwZXJdOiAnU2t5c2NyYXBlcicsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuYmlvdGVjaExhYl06ICdCaW90ZWNoIExhYicsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUubWV0cm9wb2xpc106ICdNZXRyb3BvbGlzJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5wbGFuZXRhcnlTaGllbGRdOiAnUGxhbmV0YXJ5IFNoaWVsZCcsXHJcblxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLm1lZGl0YXRpb25FbmNsYXZlXTogJ01lZGl0YXRpb24gRW5jbGF2ZScsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuY3J5c3RhbEZhcm1dOiAnQ3J5c3RhbCBGYXJtJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5ydW5lVGVjaG5vbG9naXVtXTogJ1J1bmUgVGVjaG5vbG9naXVtJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5ydW5lRm9yZ2VdOiAnUnVuZSBGb3JnZScsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUub3Jpa3Rvcml1bV06ICdPcmlrdG9yaXVtJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5tYWdtYUZvcmdlXTogJ01hZ21hIEZvcmdlJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5kaXNydXB0aW9uQ2hhbWJlcl06ICdEaXNydXB0aW9uIENoYW1iZXInLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLm1lZ2FsaXRoXTogJ01lZ2FsaXRoJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5jcnlzdGFsUmVmaW5lcnldOiAnQ3J5c3RhbCBSZWZpbmVyeScsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuZGV1dGVyaXVtU3ludGhlc2lzZXJdOiAnRGV1dGVyaXVtIFN5bnRoZXNpc2VyJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5taW5lcmFsUmVzZWFyY2hDZW50cmVdOiAnTWluZXJhbCBSZXNlYXJjaCBDZW50cmUnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmFkdmFuY2VkUmVjeWNsaW5nUGxhbnRdOiAnQWR2YW5jZWQgUmVjeWNsaW5nIFBsYW50JyxcclxuXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuYXNzZW1ibHlMaW5lXTogJ0Fzc2VtYmx5IExpbmUnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmZ1c2lvbkNlbGxGYWN0b3J5XTogJ0Z1c2lvbiBDZWxsIEZhY3RvcnknLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLnJvYm90aWNzUmVzZWFyY2hDZW50cmVdOiAnUm9ib3RpY3MgUmVzZWFyY2ggQ2VudHJlJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS51cGRhdGVOZXR3b3JrXTogJ1VwZGF0ZSBOZXR3b3JrJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5xdWFudHVtQ29tcHV0ZXJDZW50cmVdOiAnUXVhbnR1bSBDb21wdXRlciBDZW50cmUnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmF1dG9tYXRpc2VkQXNzZW1ibHlDZW50cmVdOiAnQXV0b21hdGlzZWQgQXNzZW1ibHkgQ2VudHJlJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5oaWdoUGVyZm9ybWFuY2VUcmFuc2Zvcm1lcl06ICdIaWdoLVBlcmZvcm1hbmNlIFRyYW5zZm9ybWVyJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5taWNyb2NoaXBBc3NlbWJseUxpbmVdOiAnTWljcm9jaGlwIEFzc2VtYmx5IExpbmUnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLnByb2R1Y3Rpb25Bc3NlbWJseUhhbGxdOiAnUHJvZHVjdGlvbiBBc3NlbWJseSBIYWxsJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5oaWdoUGVyZm9ybWFuY2VTeW50aGVzaXNlcl06ICdIaWdoLVBlcmZvcm1hbmNlIFN5bnRoZXNpc2VyJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5jaGlwTWFzc1Byb2R1Y3Rpb25dOiAnQ2hpcCBNYXNzIFByb2R1Y3Rpb24nLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLm5hbm9SZXBhaXJCb3RzXTogJ05hbm8gUmVwYWlyIEJvdHMnLFxyXG5cclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5zYW5jdHVhcnldOiAnU2FuY3R1YXJ5JyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5hbnRpbWF0dGVyQ29uZGVuc2VyXTogJ0FudGltYXR0ZXIgQ29uZGVuc2VyJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS52b3J0ZXhDaGFtYmVyXTogJ1ZvcnRleCBDaGFtYmVyJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5oYWxsc09mUmVhbGlzYXRpb25dOiAnSGFsbHMgb2YgUmVhbGlzYXRpb24nLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmZvcnVtT2ZUcmFuc2NlbmRlbmNlXTogJ0ZvcnVtIG9mIFRyYW5zY2VuZGVuY2UnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmFudGltYXR0ZXJDb252ZWN0b3JdOiAnQW50aW1hdHRlciBDb252ZWN0b3InLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmNsb25pbmdMYWJvcmF0b3J5XTogJ0Nsb25pbmcgTGFib3JhdG9yeScsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuY2hyeXNhbGlzQWNjZWxlcmF0b3JdOiAnQ2hyeXNhbGlzIEFjY2VsZXJhdG9yJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5iaW9Nb2RpZmllcl06ICdCaW8gTW9kaWZpZXInLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLnBzaW9uaWNNb2R1bGF0b3JdOiAnUHNpb25pYyBNb2R1bGF0b3InLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLnNoaXBNYW51ZmFjdHVyaW5nSGFsbF06ICdTaGlwIE1hbnVmYWN0dXJpbmcgSGFsbCcsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuc3VwcmFSZWZyYWN0b3JdOiAnU3VwcmEgUmVmcmFjdG9yJyxcclxufTsiLCJpbXBvcnQgeyBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlIH0gZnJvbSBcIkAvc2hhcmVkL21vZGVscy9vZ2FtZS9saWZlZm9ybXMvTGlmZWZvcm1UZWNobm9sb2d5VHlwZVwiO1xyXG5pbXBvcnQgeyBMaWZlZm9ybVRlY2hub2xvZ2llc1RyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGVuOiBMaWZlZm9ybVRlY2hub2xvZ2llc1RyYW5zbGF0aW9ucyA9IHtcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmludGVyZ2FsYWN0aWNFbnZveXNdOiAnSW50ZXJnYWxhY3RpYyBFbnZveXMnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuaGlnaFBlcmZvcm1hbmNlRXh0cmFjdG9yc106ICdIaWdoLVBlcmZvcm1hbmNlIEV4dHJhY3RvcnMnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZnVzaW9uRHJpdmVzXTogJ0Z1c2lvbiBEcml2ZXMnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuc3RlYWx0aEZpZWxkR2VuZXJhdG9yXTogJ1N0ZWFsdGggRmllbGQgR2VuZXJhdG9yJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm9yYml0YWxEZW5dOiAnT3JiaXRhbCBEZW4nLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUucmVzZWFyY2hBSV06ICdSZXNlYXJjaCBBSScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5oaWdoUGVyZm9ybWFuY2VUZXJyYWZvcm1lcl06ICdIaWdoLVBlcmZvcm1hbmNlIFRlcnJhZm9ybWVyJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmVuaGFuY2VkUHJvZHVjdGlvblRlY2hub2xvZ2llc106ICdFbmhhbmNlZCBQcm9kdWN0aW9uIFRlY2hub2xvZ2llcycsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5saWdodEZpZ2h0ZXJNa0lJXTogJ0xpZ2h0IEZpZ2h0ZXIgTWsgSUknLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuY3J1aXNlck1rSUldOiAnQ3J1aXNlciBNayBJSScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5pbXByb3ZlZExhYlRlY2hub2xvZ3ldOiAnSW1wcm92ZWQgTGFiIFRlY2hub2xvZ3knLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUucGxhc21hVGVycmFmb3JtZXJdOiAnUGxhc21hIFRlcnJhZm9ybWVyJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmxvd1RlbXBlcmF0dXJlRHJpdmVzXTogJ0xvdy1UZW1wZXJhdHVyZSBEcml2ZXMnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuYm9tYmVyTWtJSV06ICdCb21iZXIgTWsgSUknLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZGVzdHJveWVyTWtJSV06ICdEZXN0cm95ZXIgTWsgSUknLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuYmF0dGxlY3J1aXNlck1rSUldOiAnQmF0dGxlY3J1aXNlciBNayBJSScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5yb2JvdEFzc2lzdGFudHNdOiAnUm9ib3QgQXNzaXN0YW50cycsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5zdXBlcmNvbXB1dGVyXTogJ1N1cGVyY29tcHV0ZXInLFxyXG5cclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnZvbGNhbmljQmF0dGVyaWVzXTogJ1ZvbGNhbmljIEJhdHRlcmllcycsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5hY291c3RpY1NjYW5uaW5nXTogJ0Fjb3VzdGljIFNjYW5uaW5nJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmhpZ2hFbmVyZ3lQdW1wU3lzdGVtc106ICdIaWdoIEVuZXJneSBQdW1wIFN5c3RlbXMnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuY2FyZ29Ib2xkRXhwYW5zaW9uX0NpdmlsaWFuU2hpcHNdOiAnQ2FyZ28gSG9sZCBFeHBhbnNpb24gKENpdmlsaWFuIFNoaXBzKScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5tYWdtYVBvd2VyZWRQcm9kdWN0aW9uXTogJ01hZ21hLVBvd2VyZWQgUHJvZHVjdGlvbicsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW90aGVybWFsUG93ZXJQbGFudHNdOiAnR2VvdGhlcm1hbCBQb3dlciBQbGFudHMnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZGVwdGhTb3VuZGluZ106ICdEZXB0aCBTb3VuZGluZycsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5pb25DcnlzdGFsRW5oYW5jZW1lbnRfaGVhdnlGaWdodGVyXTogJ0lvbiBDcnlzdGFsIEVuaGFuY2VtZW50IChIZWF2eSBGaWdodGVyKScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5pbXByb3ZlZFN0ZWxsYXJhdG9yXTogJ0ltcHJvdmVkIFN0ZWxsYXJhdG9yJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmhhcmRlbmVkRGlhbW9uZERyaWxsSGVhZHNdOiAnSGFyZGVuZWQgRGlhbW9uZCBEcmlsbCBIZWFkcycsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5zZWlzbWljTWluaW5nVGVjaG5vbG9neV06ICdTZWlzbWljIE1pbmluZyBUZWNobm9sb2d5JyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm1hZ21hUG93ZXJlZFB1bXBTeXN0ZW1zXTogJ01hZ21hLVBvd2VyZWQgUHVtcCBTeXN0ZW1zJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmlvbkNyeXN0YWxNb2R1bGVzXTogJ0lvbiBDcnlzdGFsIE1vZHVsZXMnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUub3B0aW1pc2VkU2lsb0NvbnN0cnVjdGlvbk1ldGhvZF06ICdPcHRpbWlzZWQgU2lsbyBDb25zdHJ1Y3Rpb24gTWV0aG9kJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmRpYW1vbmRFbmVyZ3lUcmFuc21pdHRlcl06ICdEaWFtb25kIEVuZXJneSBUcmFuc21pdHRlcicsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5vYnNpZGlhblNoaWVsZFJlaW5mb3JjZW1lbnRdOiAnT2JzaWRpYW4gU2hpZWxkIFJlaW5mb3JjZW1lbnQnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUucnVuZVNoaWVsZHNdOiAnUnVuZSBTaGllbGRzJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnJvY2t0YWxDb2xsZWN0b3JFbmhhbmNlbWVudF06ICdSb2NrXFwndGFsIENvbGxlY3RvciBFbmhhbmNlbWVudCcsXHJcblxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuY2F0YWx5c2VyVGVjaG5vbG9neV06ICdDYXRhbHlzZXIgVGVjaG5vbG9neScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5wbGFzbWFEcml2ZV06ICdQbGFzbWEgRHJpdmUnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZWZmaWNpZW5jeU1vZHVsZV06ICdFZmZpY2llbmN5IE1vZHVsZScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5kZXBvdEFJXTogJ0RlcG90IEFJJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmdlbmVyYWxPdmVyaGF1bF9saWdodEZpZ2h0ZXJdOiAnR2VuZXJhbCBPdmVyaGF1bCAoTGlnaHQgRmlnaHRlciknLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuYXV0b21hdGVkVHJhbnNwb3J0TGluZXNdOiAnQXV0b21hdGVkIFRyYW5zcG9ydCBMaW5lcycsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5pbXByb3ZlZERyb25lQUldOiAnSW1wcm92ZWQgRHJvbmUgQUknLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZXhwZXJpbWVudGFsUmVjeWNsaW5nVGVjaG5vbG9neV06ICdFeHBlcmltZW50YWwgUmVjeWNsaW5nIFRlY2hub2xvZ3knLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZ2VuZXJhbE92ZXJoYXVsX2NydWlzZXJdOiAnR2VuZXJhbCBPdmVyaGF1bCAoQ3J1aXNlciknLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuc2xpbmdzaG90QXV0b3BpbG90XTogJ1NsaW5nc2hvdCBBdXRvcGlsb3QnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuaGlnaFRlbXBlcmF0dXJlU3VwZXJjb25kdWN0b3JzXTogJ0hpZ2gtVGVtcGVyYXR1cmUgU3VwZXJjb25kdWN0b3JzJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmdlbmVyYWxPdmVyaGF1bF9iYXR0bGVzaGlwXTogJ0dlbmVyYWwgT3ZlcmhhdWwgKEJhdHRsZXNoaXApJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmFydGlmaWNpYWxTd2FybUludGVsbGlnZW5jZV06ICdBcnRpZmljaWFsIFN3YXJtIEludGVsbGlnZW5jZScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW5lcmFsT3ZlcmhhdWxfYmF0dGxlY3J1aXNlcl06ICdHZW5lcmFsIE92ZXJoYXVsIChCYXR0bGVjcnVpc2VyKScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW5lcmFsT3ZlcmhhdWxfYm9tYmVyXTogJ0dlbmVyYWwgT3ZlcmhhdWwgKEJvbWJlciknLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZ2VuZXJhbE92ZXJoYXVsX2Rlc3Ryb3llcl06ICdHZW5lcmFsIE92ZXJoYXVsIChEZXN0cm95ZXIpJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmV4cGVyaW1lbnRhbFdlYXBvbnNUZWNobm9sb2d5XTogJ0V4cGVyaW1lbnRhbCBXZWFwb25zIFRlY2hub2xvZ3knLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUubWVjaGFuR2VuZXJhbEVuaGFuY2VtZW50XTogJ01lY2hhbiBHZW5lcmFsIEVuaGFuY2VtZW50JyxcclxuXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5oZWF0UmVjb3ZlcnldOiAnSGVhdCBSZWNvdmVyeScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5zdWxwaGlkZVByb2Nlc3NdOiAnU3VscGhpZGUgUHJvY2VzcycsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5wc2lvbmljTmV0d29ya106ICdQc2lvbmljIE5ldHdvcmsnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUudGVsZWtpbmV0aWNUcmFjdG9yQmVhbV06ICdUZWxla2luZXRpYyBUcmFjdG9yIEJlYW0nLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZW5oYW5jZWRTZW5zb3JUZWNobm9sb2d5XTogJ0VuaGFuY2VkIFNlbnNvciBUZWNobm9sb2d5JyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm5ldXJvbW9kYWxDb21wcmVzc29yXTogJ05ldXJvbW9kYWwgQ29tcHJlc3NvcicsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5uZXVyb0ludGVyZmFjZV06ICdOZXVyby1JbnRlcmZhY2UnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuaW50ZXJwbGFuZXRhcnlBbmFseXNpc05ldHdvcmtdOiAnSW50ZXJwbGFuZXRhcnkgQW5hbHlzaXMgTmV0d29yaycsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5vdmVyY2xvY2tpbmdfaGVhdnlGaWdodGVyXTogJ092ZXJjbG9ja2luZyAoSGVhdnkgRmlnaHRlciknLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUudGVsZWtpbmV0aWNEcml2ZV06ICdUZWxla2luZXRpYyBEcml2ZScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5zaXh0aFNlbnNlXTogJ1NpeHRoIFNlbnNlJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnBzeWNob2hhcm1vbmlzZXJdOiAnUHN5Y2hvaGFybW9uaXNlcicsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5lZmZpY2llbnRTd2FybUludGVsbGlnZW5jZV06ICdFZmZpY2llbnQgU3dhcm0gSW50ZWxsaWdlbmNlJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm92ZXJjbG9ja2luZ19sYXJnZUNhcmdvXTogJ092ZXJjbG9ja2luZyAoTGFyZ2UgQ2FyZ28pJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmdyYXZpdGF0aW9uU2Vuc29yc106ICdHcmF2aXRhdGlvbiBTZW5zb3JzJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm92ZXJjbG9ja2luZ19iYXR0bGVzaGlwXTogJ092ZXJjbG9ja2luZyAoQmF0dGxlc2hpcCknLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUucHNpb25pY1NoaWVsZE1hdHJpeF06ICdQc2lvbmljIFNoaWVsZCBNYXRyaXgnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUua2FlbGVzaERpc2NvdmVyZXJFbmhhbmNlbWVudF06ICdLYWVsZXNoIERpc2NvdmVyZXIgRW5oYW5jZW1lbnQnLFxyXG59OyIsImltcG9ydCB7IFByZW1pdW1UcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGVuOiBQcmVtaXVtVHJhbnNsYXRpb25zID0ge1xyXG4gICAgZGFya01hdHRlcjogJ0RhcmsgTWF0dGVyJyxcclxufTsiLCJpbXBvcnQgeyBTZXR0aW5nc1RyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBlbjogU2V0dGluZ3NUcmFuc2xhdGlvbnMgPSB7XHJcbiAgICB0YWJzOiB7XHJcbiAgICAgICAgZGF0ZVJhbmdlczogJ0RhdGUgUmFuZ2VzJyxcclxuICAgICAgICBjb2xvcnM6ICdDb2xvcnMnLFxyXG4gICAgICAgIGNvbW1vbjogJ0NvbW1vbicsXHJcbiAgICAgICAgaW1wb3J0RXhwb3J0OiAnSW1wb3J0L0V4cG9ydCcsXHJcbiAgICAgICAgZXhwZWRpdGlvbnM6ICdFeHBlZGl0aW9ucycsXHJcbiAgICAgICAgY29tYmF0czogJ0NvbWJhdHMnLFxyXG4gICAgICAgIGRlYnJpc0ZpZWxkczogJ0RlYnJpcyBGaWVsZHMnLFxyXG4gICAgICAgIHJlc291cmNlQmFsYW5jZTogJ1Jlc291cmNlIEJhbGFuY2UnLFxyXG4gICAgICAgIHVuaXZlcnNlSGlzdG9yeTogJ1VuaXZlcnNlIEhpc3RvcnknLFxyXG4gICAgICAgIGRhbmdlclpvbmU6ICdEYW5nZXIgWm9uZScsXHJcbiAgICAgICAgYWNjZXNzYmlsaXR5OiAnQWNjZXNzaWJpbGl0eScsXHJcbiAgICAgICAgbGlua0FjY291bnRzOiAnTGluayBBY2NvdW50cycsXHJcblxyXG4gICAgICAgIG1pZ3JhdGVPbGREYXRhOiAnTWlncmF0ZSBvbGQgZGF0YScsXHJcbiAgICB9LFxyXG4gICAgZGF0ZVJhbmdlczoge1xyXG4gICAgICAgIGRlZmF1bHROYW1lczoge1xyXG4gICAgICAgICAgICB0b2RheTogJ1RvZGF5JyxcclxuICAgICAgICAgICAgeWVzdGVyZGF5OiAnWWVzdGVyZGF5JyxcclxuICAgICAgICAgICAgY3VycmVudFdlZWs6ICdDdXJyZW50IHdlZWsnLFxyXG4gICAgICAgICAgICBsYXN0V2VlazogJ0xhc3Qgd2VlaycsXHJcbiAgICAgICAgICAgIGN1cnJlbnRNb250aDogJ0N1cnJlbnQgbW9udGgnLFxyXG4gICAgICAgICAgICBuZXdSYW5nZTogJ25ldyByYW5nZScsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzaW5jZTogKGRhdGUpID0+IGBTaW5jZSAke2RhdGV9YCxcclxuICAgICAgICBmaXJzdERheVRlbXBsYXRlOiAnPGZpcnN0IGRheT4nLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgbGFiZWw6ICdMYWJlbCcsXHJcbiAgICAgICAgICAgIHR5cGU6ICdUeXBlJyxcclxuICAgICAgICAgICAgcmFuZ2VTdGFydDogJ1JhbmdlIHN0YXJ0cycsXHJcbiAgICAgICAgICAgIHJhbmdlQ29udGFpbnM6ICdSYW5nZSBjb250YWlucycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkYXk6ICdkYXknLFxyXG4gICAgICAgIGRheXM6ICdkYXlzJyxcclxuICAgICAgICBkYXlzQWdvOiAnZGF5cyBhZ28nLFxyXG4gICAgICAgIHdlZWs6ICd3ZWVrJyxcclxuICAgICAgICB3ZWVrczogJ3dlZWtzJyxcclxuICAgICAgICB3ZWVrc0FnbzogJ3dlZWtzIGFnbycsXHJcbiAgICAgICAgbW9udGg6ICdtb250aCcsXHJcbiAgICAgICAgbW9udGhzOiAnbW9udGhzJyxcclxuICAgICAgICBtb250aHNBZ286ICdtb250aHMgYWdvJyxcclxuICAgICAgICB5ZWFyOiAneWVhcicsXHJcbiAgICAgICAgeWVhcnM6ICd5ZWFycycsXHJcbiAgICAgICAgeWVhcnNBZ286ICd5ZWFycyBhZ28nLFxyXG4gICAgfSxcclxuICAgIGNvbG9yczoge1xyXG4gICAgICAgIGNvbWJhdFJlc3VsdHM6ICdDb21iYXQgcmVzdWx0cycsXHJcbiAgICAgICAgZXhwZWRpdGlvbkV2ZW50czogJ0V4cGVkaXRpb24gZXZlbnRzJyxcclxuICAgICAgICBleHBlZGl0aW9uRXZlbnRTaXplczogJ0V4cGVkaXRpb24gZXZlbnQgc2l6ZXMnLFxyXG4gICAgICAgIGV4cGVkaXRpb25EZXBsZXRpb25MZXZlbHM6ICdTeXN0ZW0gZGVwbGV0aW9uJyxcclxuICAgICAgICBsaWZlZm9ybURpc2NvdmVyaWVzOiAnTGlmZWZvcm0gZGlzY292ZXJpZXMnLFxyXG4gICAgICAgIGxpZmVmb3JtczogJ0xpZmVmb3JtcycsXHJcbiAgICAgICAgcmVzb3VyY2VzOiAnUmVzb3VyY2VzJyxcclxuICAgICAgICBzaGlwczogJ1NoaXBzJyxcclxuICAgIH0sXHJcbiAgICBjb21tb246IHtcclxuICAgICAgICBjb252ZXJzaW9uUmF0ZXM6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICdDb252ZXJzaW9uIHJhdGVzJyxcclxuICAgICAgICAgICAgbXN1TG9uZzogJ0NvbnZlcnQgdG8gTWV0YWwnLFxyXG4gICAgICAgICAgICBkc3VMb25nOiAnQ29udmVydCB0byBEZXV0ZXJpdW0nLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXh0ZW5zaW9uTGFuZ3VhZ2U6ICdVSSBsYW5ndWFnZSAod2l0aGluIE9HYW1lIFRyYWNrZXIpJyxcclxuICAgICAgICBleHRlbnNpb25MYW5ndWFnZUZhbGxiYWNrSGludDogJ0VuZ2xpc2ggdGV4dHMgd2lsbCBiZSBzaG93biBpZiB0ZXh0cyBhcmUgbm90IGF2YWlsYWJsZSBpbiB0aGUgc2VsZWN0ZWQgbGFuZ3VhZ2UuJyxcclxuXHJcbiAgICAgICAgc2VydmVyU2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICdTZXJ2ZXIgZGF0YScsXHJcbiAgICAgICAgICAgIGxhc3RVcGRhdGU6ICdMYXN0IHVwZGF0ZScsXHJcbiAgICAgICAgICAgIGZvcmNlVXBkYXRlOiAnVXBkYXRlIHNlcnZlciBkYXRhJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIGV4cGVkaXRpb25zOiB7XHJcbiAgICAgICAgcmVzb3VyY2VVbml0RmFjdG9yc09mU2hpcEZvdW5kT25FeHBlZGl0aW9uczogJ0ZhY3RvcnMgb2YgcmVzb3VyY2UgdW5pdHMgb2Ygc2hpcHMgZm91bmQgb24gZXhwZWRpdGlvbnMnLFxyXG4gICAgfSxcclxuICAgIGNvbWJhdHM6IHtcclxuICAgICAgICByZXNvdXJjZVVuaXRGYWN0b3JzT2ZMb3N0U2hpcHM6ICdGYWN0b3Igb2YgcmVzb3VyY2UgdW5pdHMgb2Ygc2hpcHMgbG9zdCBpbiBjb21iYXQnLFxyXG4gICAgICAgIGlnbm9yZUVzcGlvbmFnZUNvbWJhdHM6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICdJZ25vcmUgZXNwaW9uYWdlIGNvbWJhdHMnLFxyXG4gICAgICAgICAgICBsYWJlbDogJ0lnbm9yZSBlc3Bpb25hZ2UgY29tYmF0IHJlcG9ydHMgZm9yIGNvbWJhdCB0cmFja2luZycsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICByZXNvdXJjZUJhbGFuY2U6IHtcclxuICAgICAgICBkZXRhaWxlZFJlc291cmNlQmFsYW5jZToge1xyXG4gICAgICAgICAgICBoZWFkZXI6ICdEZXRhaWxlZCByZXNvdXJjZSBiYWxhbmNlJyxcclxuICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ1Nob3cgZGV0YWlsZWQgcmVzb3VyY2UgYmFsYW5jZScsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbmNsdWRlU2hpcHNGb3VuZE9uRXhwZWRpdGlvbnM6IHtcclxuICAgICAgICAgICAgaGVhZGVyOiAnU2hpcHMgZm91bmQgaW4gZXhwZWRpdGlvbnMnLFxyXG4gICAgICAgICAgICBjaGVja2JveExhYmVsOiAnSW5jbHVkZSByZXNvdXJjZXMgb2Ygc2hpcHMgZm91bmQgb24gZXhwZWRpdGlvbnMgaW4gcmVzb3VyY2UgYmFsYW5jZScsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbmNsdWRlU2hpcHNMb3N0SW5Db21iYXRzOiB7XHJcbiAgICAgICAgICAgIGhlYWRlcjogJ1NoaXBzIGxvc3QgaW4gY29tYmF0cycsXHJcbiAgICAgICAgICAgIGNoZWNrYm94TGFiZWw6ICdJbmNsdWRlIHJlc291cmNlcyBvZiBzaGlwcyBsb3N0IGluIGNvbWJhdHMgaW4gcmVzb3VyY2UgYmFsYW5jZScsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbmNsdWRlTG9zdExvb3RSZXNvdXJjZXM6IHtcclxuICAgICAgICAgICAgaGVhZGVyOiAnUmVzb3VyY2UgbG9zdCBpbiBjb21iYXRzJyxcclxuICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ0luY2x1ZGUgcmVzb3VyY2VzIHRoYXQgd2VyZSBsb3N0IGluIGNvbWJhdHMgaW4gcmVzb3VyY2UgYmFsYW5jZScsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBzaG93Q29udmVydGVkVW5pdHNJblRhYmxlczoge1xyXG4gICAgICAgIHRpdGxlOiAnTVNVL0RTVSBpbiB0YWJsZXMnLFxyXG4gICAgICAgIGxhYmVsOiAnU2hvdyBjb252ZXJ0ZWQgTVNVL0RTVSB2YWx1ZXMgaW4gdGFibGVzJyxcclxuXHJcbiAgICAgICAgaW5mb0Ftb3J0aXphdGlvbjogJ0Ftb3J0aXphdGlvbiB0aW1lIHdpbGwgc3RpbGwgYmUgY2FsY3VsYXRlZCB1c2luZyBjb3N0IGFuZCBwcm9kdWN0aW9uIGluIE1TVS9EU1UnLFxyXG4gICAgfSxcclxuXHJcbiAgICByZXNldDogJ1Jlc2V0IHNldHRpbmdzJyxcclxuICAgIHNldERlZmF1bHRSb3V0ZTogJ1NldCBhcyBkZWZhdWx0JyxcclxuICAgIHNldERlZmF1bHRTdWJSb3V0ZTogJ1NldCBhcyBkZWZhdWx0IGZvciB0aGlzIGFyZWEnLFxyXG5cclxuICAgIGRhbmdlclpvbmU6IHtcclxuICAgICAgICBkb1lvdVdhbnRUb0NvbnRpbnVlOiAnQVJFIFlPVSBTVVJFIFlPVSBXQU5UIFRPIENPTlRJTlVFPycsXHJcblxyXG4gICAgICAgIGRlbGV0ZUV4cGVkaXRpb25zOiB7XHJcbiAgICAgICAgICAgIGJ1dHRvbjogKGFjY291bnQ6IHN0cmluZykgPT4gYERlbGV0ZSBhbGwgdHJhY2tlZCBleHBlZGl0aW9ucyBmb3IgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBhY2NvdW50ICgke2FjY291bnR9KWAsXHJcbiAgICAgICAgICAgIGNvbmZpcm1hdGlvblRleHQ6IChhY2NvdW50OiBzdHJpbmcsIGNvdW50OiBzdHJpbmcpID0+IGBJZiB5b3UgY29uZmlybSwgYWxsICR7Y291bnR9IHRyYWNrZWQgZXhwZWRpdGlvbnMgd2lsbCBiZSBkZWxldGVkIGZvciB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGFjY291bnQgKCR7YWNjb3VudH0pLmAsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZWxldGVDb21iYXRzOiB7XHJcbiAgICAgICAgICAgIGJ1dHRvbjogKGFjY291bnQ6IHN0cmluZykgPT4gYERlbGV0ZSBhbGwgdHJhY2tlZCBjb21iYXRzIGZvciB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGFjY291bnQgKCR7YWNjb3VudH0pYCxcclxuICAgICAgICAgICAgY29uZmlybWF0aW9uVGV4dDogKGFjY291bnQ6IHN0cmluZywgY291bnQ6IHN0cmluZykgPT4gYElmIHlvdSBjb25maXJtLCBhbGwgJHtjb3VudH0gdHJhY2tlZCBjb21iYXRzIHdpbGwgYmUgZGVsZXRlZCBmb3IgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBhY2NvdW50ICgke2FjY291bnR9KS5gLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGVsZXRlRGVicmlzRmllbGRSZXBvcnRzOiB7XHJcbiAgICAgICAgICAgIGJ1dHRvbjogKGFjY291bnQ6IHN0cmluZykgPT4gYERlbGV0ZSBhbGwgdHJhY2tlZCBkZWJyaXMgZmllbGQgaGFydmVzdCByZXBvcnRzIGZvciB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGFjY291bnQgKCR7YWNjb3VudH0pYCxcclxuICAgICAgICAgICAgY29uZmlybWF0aW9uVGV4dDogKGFjY291bnQ6IHN0cmluZywgY291bnQ6IHN0cmluZykgPT4gYElmIHlvdSBjb25maXJtLCBhbGwgJHtjb3VudH0gdHJhY2tlZCBkZWJyaXMgZmllbGQgaGFydmVzdCByZXBvcnRzIHdpbGwgYmUgZGVsZXRlZCBmb3IgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBhY2NvdW50ICgke2FjY291bnR9KS5gLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGVsZXRlQWNjb3VudDoge1xyXG4gICAgICAgICAgICBidXR0b246IChhY2NvdW50OiBzdHJpbmcpID0+IGBEZWxldGUgYWxsIGRhdGEgb2YgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBhY2NvdW50ICgke2FjY291bnR9KWAsXHJcbiAgICAgICAgICAgIGNvbmZpcm1hdGlvblRleHQ6IChhY2NvdW50OiBzdHJpbmcpID0+IGBJZiB5b3UgY29uZmlybSwgYWxsIHRyYWNrZWQgZGF0YSBmb3IgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBhY2NvdW50ICgke2FjY291bnR9KSB3aWxsIGJlIGRlbGV0ZWQuXFxuYFxyXG4gICAgICAgICAgICAgICAgKyBgVGhpcyBpbmNsdWRlcyB0cmFja2VkIHVuaXZlcnNlIGhpc3RvcnkgZGF0YSBpZiB0aGVyZSBpcyBubyBvdGhlciBhY2NvdW50IHRyYWNrZWQgZm9yIHRoaXMgdW5pdmVyc2UuYCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlbGV0ZVVuaXZlcnNlSGlzdG9yeToge1xyXG4gICAgICAgICAgICBidXR0b246IChzZXJ2ZXI6IHN0cmluZykgPT4gYERlbGV0ZSB0cmFja2VkIHVuaXZlcnNlIGhpc3Rvcnkgb2YgY3VycmVudGx5IHNlbGVjdGVkIHVuaXZlcnNlICgke3NlcnZlcn0pYCxcclxuICAgICAgICAgICAgY29uZmlybWF0aW9uVGV4dDogKHNlcnZlcjogc3RyaW5nKSA9PiBgSWYgeW91IGNvbmZpcm0sIGFsbCB0cmFja2VkIHVuaXZlcnNlIGhpc3RvcnkgZGF0YSBmb3IgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCB1bml2ZXJzZSAoJHtzZXJ2ZXJ9KSB3aWxsIGJlIGRlbGV0ZWQuYCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlbGV0ZUV2ZXJ5dGhpbmc6IHtcclxuICAgICAgICAgICAgYnV0dG9uOiAnRGVsZXRlIGFsbCBkYXRhJyxcclxuICAgICAgICAgICAgY29uZmlybWF0aW9uVGV4dDE6IGBJZiB5b3UgY29uZmlybSwgYWxsIGRhdGEgd2lsbCBiZSBkZWxldGVkLlxcbmBcclxuICAgICAgICAgICAgICAgICsgJ1RoaXMgaW5jbHVkZXMgdHJhY2tlZCBkYXRhIG9mIGV2ZXJ5IGFjY291bnQgaW5jbHVkaW5nIHRyYWNrZWQgZXhwZWRpdGlvbnMsIGNvbWJhdHMsIGRlYnJpcyBmaWVsZCByZXBvcnRzLCB1bml2ZXJzZSBoaXN0b3J5IGRhdGEsIGFuZCBtb3JlLicsXHJcbiAgICAgICAgICAgIGNvbmZpcm1hdGlvblRleHQyOiAnUGxlYXNlIGNvbmZpcm0gYWdhaW4gdGhhdCB5b3Ugd2FudCB0byBkZWxldGUgYWxsIGRhdGEuJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuXHJcbiAgICBpbXBvcnRFeHBvcnQ6IHtcclxuICAgICAgICBleHBvcnQ6IHtcclxuICAgICAgICAgICAgaGVhZGVyOiAnRXhwb3J0JyxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdIZXJlIHlvdSBjYW4gZXhwb3J0IHlvdXIgZGF0YS4gVGhpcyB3aWxsIGluY2x1ZGUgcmVsZXZhbnQgZGF0YSBvZiBhbGwgeW91ciB0cmFja2VkIGFjY291bnRzIGFuZCB0aGVpciBzZXJ2ZXJzLicsXHJcbiAgICAgICAgICAgIGluY2x1ZGVVbml2ZXJzZUhpc3Rvcnk6ICdpbmNsdWRlIHVuaXZlcnNlIGhpc3RvcnkgaW4gZXhwb3J0ICh0aGlzIG1heSBncmVhdGx5IGluY3JlYXNlIGZpbGUgc2l6ZSBhbmQgaW1wb3J0IHRpbWUhKScsXHJcbiAgICAgICAgICAgIGJ1dHRvbjogJ1N0YXJ0IGV4cG9ydCcsXHJcbiAgICAgICAgICAgIHdhaXQ6ICdQbGVhc2Ugd2FpdCB3aGlsZSB5b3VyIGRhdGEgaXMgYmVpbmcgcHJlcGFyZWQgZm9yIHRoZSBleHBvcnQuLi4nLFxyXG5cclxuICAgICAgICAgICAgZXJyb3JzOiB7XHJcbiAgICAgICAgICAgICAgICB1bmV4cGVjdGVkRXJyb3I6ICdBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VyZWQgd2hpbGUgZXhwb3J0aW5nIHlvdXIgZGF0YS4nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW1wb3J0OiB7XHJcbiAgICAgICAgICAgIGhlYWRlcjogJ0ltcG9ydCcsXHJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnSGVyZSB5b3UgY2FuIGltcG9ydCB5b3VyIGRhdGEgZnJvbSBhIGZpbGUuIFBsZWFzZSBzZWxlY3QgeW91ciBmaWxlLicsXHJcbiAgICAgICAgICAgIGJ1dHRvbjogJ1N0YXJ0IGltcG9ydCcsXHJcbiAgICAgICAgICAgIHdhaXQ6ICdQbGVhc2Ugd2FpdCB3aGlsZSB5b3VyIGRhdGEgaXMgYmVpbmcgaW1wb3J0ZWQuLi4nLFxyXG5cclxuICAgICAgICAgICAgZXJyb3JzOiB7XHJcbiAgICAgICAgICAgICAgICBpbnZhbGlkRm9ybWF0OiAnVGhlIGZpbGUgZm9ybWF0IGlzIGludmFsaWQuJyxcclxuICAgICAgICAgICAgICAgIHVuZXhwZWN0ZWRFcnJvcjogJ0FuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJlZCB3aGlsZSBpbXBvcnRpbmcgeW91ciBkYXRhLicsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW1wb3J0Q2FsbGJhY2tzOiB7XHJcbiAgICAgICAgICAgIGltcG9ydGluZ1NldHRpbmdzOiAnSW1wb3J0aW5nIHlvdXIgc2V0dGluZ3MnLFxyXG4gICAgICAgICAgICBpbXBvcnRpbmdCYXNpY0RhdGE6ICdJbXBvcnRpbmcgYmFzaWMgYWNjb3VudCBhbmQgc2VydmVyIGRhdGEnLFxyXG4gICAgICAgICAgICBpbXBvcnRpbmdVbml2ZXJzZUhpc3RvcmllczogKFxyXG4gICAgICAgICAgICAgICAgc2VydmVySW5kZXg6IG51bWJlciwgXHJcbiAgICAgICAgICAgICAgICBzZXJ2ZXJUb3RhbDogbnVtYmVyLCBcclxuICAgICAgICAgICAgICAgIGVudHJ5SW5kZXg6IG51bWJlciwgXHJcbiAgICAgICAgICAgICAgICBlbnRyeVRvdGFsOiBudW1iZXIsXHJcbiAgICAgICAgICAgICkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmFzZU1lc3NhZ2UgPSAnSW1wb3J0aW5nIHNlcnZlciB1bml2ZXJzZSBoaXN0b3J5JztcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7YmFzZU1lc3NhZ2V9IChzZXJ2ZXIgJHtzZXJ2ZXJJbmRleCArIDF9LyR7c2VydmVyVG90YWx9LCBlbnRyeSAke2VudHJ5SW5kZXggKyAxfS8ke2VudHJ5VG90YWx9KWA7ICAgICAgXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGltcG9ydGluZ0FjY291bnRzOiAoXHJcbiAgICAgICAgICAgICAgICBhY2NvdW50SW5kZXg6IG51bWJlciwgXHJcbiAgICAgICAgICAgICAgICB0b3RhbEFjY291bnRzOiBudW1iZXIsIFxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2FjY291bnQnIHwgJ2NvbWJhdC1yZXBvcnRzJyB8ICdleHBlZGl0aW9ucycgfCAnZGVicmlzLWZpZWxkcycgfCAnbGlmZWZvcm0tZGlzY292ZXJpZXMnIHwgJ3VuaXZlcnNlLXNwZWNpZmljLXNldHRpbmdzJyB8ICdlbXBpcmUuZGF0YScgfCAnZW1waXJlLnBsYW5ldHMnIHwgJ2VtcGlyZS5tb29ucycsXHJcbiAgICAgICAgICAgICAgICBzdGVwSW5kZXg6IG51bWJlcixcclxuICAgICAgICAgICAgICAgIHN0ZXBUb3RhbDogbnVtYmVyLFxyXG4gICAgICAgICAgICApID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJhc2VNZXNzYWdlID0gYEltcG9ydGluZyBhY2NvdW50c2A7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhY2NvdW50UHJvZ3Jlc3MgPSBgJHthY2NvdW50SW5kZXggKyAxfS8ke3RvdGFsQWNjb3VudHN9YDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZih0eXBlID09ICdhY2NvdW50Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtiYXNlTWVzc2FnZX0gKCR7YWNjb3VudFByb2dyZXNzfSlgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKHR5cGUgPT0gJ2NvbWJhdC1yZXBvcnRzJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtiYXNlTWVzc2FnZX0gKCR7YWNjb3VudFByb2dyZXNzfSwgY29tYmF0ICR7c3RlcEluZGV4ICsgMX0vJHtzdGVwVG90YWx9KWA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYodHlwZSA9PSAnZXhwZWRpdGlvbnMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke2Jhc2VNZXNzYWdlfSAoJHthY2NvdW50UHJvZ3Jlc3N9LCBleHBlZGl0aW9uICR7c3RlcEluZGV4ICsgMX0vJHtzdGVwVG90YWx9KWA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYodHlwZSA9PSAnZGVicmlzLWZpZWxkcycpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7YmFzZU1lc3NhZ2V9ICgke2FjY291bnRQcm9ncmVzc30sIGRlYnJpcyBmaWVsZCAke3N0ZXBJbmRleCArIDF9LyR7c3RlcFRvdGFsfSlgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKHR5cGUgPT0gJ2xpZmVmb3JtLWRpc2NvdmVyaWVzJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtiYXNlTWVzc2FnZX0gKCR7YWNjb3VudFByb2dyZXNzfSwgbGlmZWZvcm0gbWlzc2lvbiAke3N0ZXBJbmRleCArIDF9LyR7c3RlcFRvdGFsfSlgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKHR5cGUgPT0gJ2VtcGlyZS5kYXRhJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtiYXNlTWVzc2FnZX0gKCR7YWNjb3VudFByb2dyZXNzfSwgYmFzaWMgZW1waXJlIGRhdGEpYDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZih0eXBlID09ICdlbXBpcmUucGxhbmV0cycpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7YmFzZU1lc3NhZ2V9ICgke2FjY291bnRQcm9ncmVzc30sIHBsYW5ldCAke3N0ZXBJbmRleCArIDF9LyR7c3RlcFRvdGFsfSlgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYodHlwZSA9PSAnZW1waXJlLm1vb25zJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtiYXNlTWVzc2FnZX0gKCR7YWNjb3VudFByb2dyZXNzfSwgbW9vbiAke3N0ZXBJbmRleCArIDF9LyR7c3RlcFRvdGFsfSlgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKHR5cGUgPT0gJ3VuaXZlcnNlLXNwZWNpZmljLXNldHRpbmdzJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtiYXNlTWVzc2FnZX0gKCR7YWNjb3VudFByb2dyZXNzfSwgdW5pdmVyc2Ugc3BlY2lmaWMgc2V0dGluZ3MpYDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdHlwZSAnJHt0eXBlfSdgKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIGFjY2Vzc2liaWxpdHk6IHtcclxuICAgICAgICBzaG93U2ltcGxpZmllZFJlc3VsdHM6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICdTaW1wbGlmaWVkIHZpc3VhbGl6YXRpb24nLFxyXG4gICAgICAgICAgICBsYWJlbDogJ1NpbXBsaWZpZWQgdmlzdWFsaXphdGlvbiwgaGlkZXMgb3JpZ2luYWwgbWVzc2FnZXMgb2YgZXhwZWRpdGlvbiByZXN1bHRzIGFuZCBERiBoYXJ2ZXN0IHJlcG9ydHMsIGFuZCBzaG93cyBpY29ucyBpbnN0ZWFkIG9mIHRleHRzIGluIG5vdGlmaWNhdGlvbnMuJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuXHJcbiAgICBkZWJyaXNGaWVsZHM6IHtcclxuICAgICAgICBzZXBhcmF0ZUV4cGVkaXRpb25EZWJyaXNGaWVsZHM6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICdTZXBhcmF0ZSBwb3NpdGlvbiAxNicsXHJcbiAgICAgICAgICAgIGxhYmVsOiAnU2VwYXJhdGUgZGVicmlzIGZpZWxkcyBoYXJ2ZXN0ZWQgYXQgcG9zaXRpb24gMTYgZnJvbSBwb3NpdGlvbiAxLTE1JyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuXHJcbiAgICBsaW5rQWNjb3VudHM6IHtcclxuICAgICAgICBoZWFkZXI6IChhY2NvdW50OiBzdHJpbmcpID0+IGBMaW5rIGFjY291bnRzIHdpdGggdGhlIGN1cnJlbnQgYWNjb3VudCAoJHthY2NvdW50fSlgLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uSHRtbDogKGFjY291bnQ6IHN0cmluZykgPT5cclxuICAgICAgICAgICAgYFlvdSBzaG91bGQgb25seSBsaW5rIGFjY291bnRzIGlmIHlvdSB3YW50IHRoZSBPR2FtZSBUcmFja2VyIHRvIGNvbnNpZGVyIGRhdGEgb2YgdGhlIGxpbmtlZCBhY2NvdW50cyBhcyBkYXRhIG9mIHRoZSBjdXJyZW50IGFjY291bnQgKCR7YWNjb3VudH0pLjxici8+YFxyXG4gICAgICAgICAgICArIGBUaGlzIGlzIG9mdGVuIHRoZSBjYXNlIHdoZW4gYW4gYWNjb3VudCBoYXMgYmVlbiBtZXJnZWQgdG8gYW5vdGhlciBzZXJ2ZXIgYW5kIGlzIGhhbmRsZWQgYXMgYSBzZXBhcmF0ZSBhY2NvdW50IGluIHRoZSBPR2FtZSBUcmFja2VyLjxici8+PGJyLz5gXHJcbiAgICAgICAgICAgICsgYEV4YW1wbGU6IDxici8+YFxyXG4gICAgICAgICAgICArIGA8b2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpPnRoZSBwbGF5ZXIgXCJPR2FtZSBQcm9mZXNzaW9uYWxcIiBpcyBwbGF5aW5nIG9uIHRoZSBzZXJ2ZXIgXCJFTiBNaWxreXdheVwiPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGk+dGhlIHNlcnZlciBcIkVOIE1pbGt5d2F5XCIgYmVjb21lcyBleG9kdXMgdW5pdmVyc2UgZHVyaW5nIGEgbWVyZ2U8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaT50aGUgcGxheWVyIFwiT0dhbWUgUHJvZmVzc2lvbmFsXCIgbWVyZ2VzIHRoZWlyIGFjY291bnQgdG8gXCJFTiBDYXJ0d2hlZWxcIjwvbGk+ICAgXHJcbiAgICAgICAgICAgICAgICAgICAgPGxpPmFmdGVyIHRoZSBtZXJnZSwgdGhlIE9HYW1lIFRyYWNrZXIgc2hvd3Mgbm8gZXhwZWRpdGlvbnMgZnJvbSB0aGUgb3JpZ2luYWwgc2VydmVyIFwiRU4gTWlsa3l3YXlcIiBmb3IgdGhlIG1lcmdlZCBhY2NvdW50PC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGk+aW4gdGhlIE9HYW1lIFRyYWNrZXIgdGhlIG9sZCBhY2NvdW50IFwiT0dhbWUgUHJvZmVzc2lvbmFsXCIgb24gc2VydmVyIFwiRU4gTWlsa3l3YXlcIiBpcyBsaW5rZWQgdG8gdGhlIG5ldyBhY2NvdW50IFwiT0dhbWUgUHJvZmVzc2lvbmFsXCIgb24gc2VydmVyIFwiRU4gQ2FydHdoZWVsXCI8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaT5leHBlZGl0aW9ucyB0aGF0IHdlcmUgc2VudCBvbiB0aGUgb2xkIHNlcnZlciBcIkVOIE1pbGt5d2F5XCIgd2lsbCBub3cgc2hvdyB1cCBhZ2FpbiBmb3IgdGhlIG1lcmdlZCBhY2NvdW50IG9uIFwiRU4gQ2FydHdoZWVsXCI8L2xpPlxyXG4gICAgICAgICAgICAgICAgPC9vbD5cclxuICAgICAgICAgICAgYCxcclxuICAgICAgICBsaW5rQWNjb3VudDogJ2xpbmsgYW5vdGhlciBhY2NvdW50OicsXHJcbiAgICAgICAgbGlua2VkQWNjb3VudHM6ICdMaW5rZWQgYWNjb3VudHM6JyxcclxuICAgIH0sXHJcbn07IiwiaW1wb3J0IHsgUmVzb3VyY2VUeXBlIH0gZnJvbSBcIi4uLy4uLy4uL21vZGVscy9vZ2FtZS9yZXNvdXJjZXMvUmVzb3VyY2VUeXBlXCI7XHJcbmltcG9ydCB7IFJlc291cmNlVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBlbjogUmVzb3VyY2VUcmFuc2xhdGlvbnMgPSB7XHJcbiAgICBbUmVzb3VyY2VUeXBlLm1ldGFsXTogJ01ldGFsJyxcclxuICAgIFtSZXNvdXJjZVR5cGUuY3J5c3RhbF06ICdDcnlzdGFsJyxcclxuICAgIFtSZXNvdXJjZVR5cGUuZGV1dGVyaXVtXTogJ0RldXRlcml1bScsXHJcbiAgICBlbmVyZ3k6ICdFbmVyZ3knLFxyXG59OyIsImltcG9ydCB7IGVuIGFzIHNoaXBzIH0gZnJvbSAnLi4vb2dhbWUvc2hpcHMvZW4nO1xyXG5pbXBvcnQgeyBlbiBhcyBkZWZlbnNlcyB9IGZyb20gJy4uL29nYW1lL2RlZmVuc2VzL2VuJztcclxuaW1wb3J0IHsgZW4gYXMgYnVpbGRpbmdzIH0gZnJvbSAnLi4vb2dhbWUvYnVpbGRpbmdzL2VuJztcclxuaW1wb3J0IHsgZW4gYXMgcmVzZWFyY2ggfSBmcm9tICcuLi9vZ2FtZS9yZXNlYXJjaC9lbic7XHJcbmltcG9ydCB7IGVuIGFzIGxpZmVmb3JtcyB9IGZyb20gJy4uL29nYW1lL2xpZmVmb3Jtcy9lbic7XHJcbmltcG9ydCB7IGVuIGFzIGxpZmVmb3JtQnVpbGRpbmdzIH0gZnJvbSAnLi4vb2dhbWUvbGlmZWZvcm1zL2J1aWxkaW5ncy9lbic7XHJcbmltcG9ydCB7IGVuIGFzIGxpZmVmb3JtVGVjaG5vbG9naWVzIH0gZnJvbSAnLi4vb2dhbWUvbGlmZWZvcm1zL3RlY2hub2xvZ2llcy9lbic7XHJcbmltcG9ydCB7IGVuIGFzIHByZW1pdW0gfSBmcm9tICcuLi9vZ2FtZS9wcmVtaXVtL2VuJztcclxuXHJcbmltcG9ydCB7IEV4dGVuc2lvblRyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVcIjtcclxuaW1wb3J0IHsgZW4gYXMgc2V0dGluZ3MgfSBmcm9tICcuL3NldHRpbmdzL2VuJztcclxuaW1wb3J0IHsgZW4gYXMgcmVzb3VyY2VzIH0gZnJvbSAnLi9yZXNvdXJjZXMvZW4nO1xyXG5pbXBvcnQgeyBlbiBhcyBjb21tb24gfSBmcm9tICcuL2NvbW1vbi9lbic7XHJcbmltcG9ydCB7IGVuIGFzIGV4cGVkaXRpb25zIH0gZnJvbSAnLi9leHBlZGl0aW9ucy9lbic7XHJcbmltcG9ydCB7IGVuIGFzIGNvbWJhdHMgfSBmcm9tICcuL2NvbWJhdHMvZW4nO1xyXG5pbXBvcnQgeyBlbiBhcyBkb25hdGUgfSBmcm9tICcuL2RvbmF0ZS9lbic7XHJcbmltcG9ydCB7IGVuIGFzIGRlYnJpc0ZpZWxkcyB9IGZyb20gJy4vZGVicmlzRmllbGRzL2VuJztcclxuaW1wb3J0IHsgZW4gYXMgcmVzb3VyY2VCYWxhbmNlIH0gZnJvbSAnLi9yZXNvdXJjZUJhbGFuY2UvZW4nO1xyXG5pbXBvcnQgeyBlbiBhcyBlbXBpcmUgfSBmcm9tICcuL2VtcGlyZS9lbic7XHJcbmltcG9ydCB7IGVuIGFzIHN3aXRjaEFjY291bnRzIH0gZnJvbSAnLi9zd2l0Y2hBY2NvdW50cy9lbic7XHJcbmltcG9ydCB7IGVuIGFzIGFib3V0IH0gZnJvbSAnLi9hYm91dC9lbic7XHJcbmltcG9ydCB7IGVuIGFzIHVuaXZlcnNlSGlzdG9yeSB9IGZyb20gJy4vdW5pdmVyc2VIaXN0b3J5L2VuJztcclxuaW1wb3J0IHsgZW4gYXMgbm90aWZpY2F0aW9ucyB9IGZyb20gJy4vbm90aWZpY2F0aW9ucy9lbic7XHJcbmltcG9ydCB7IGVuIGFzIHRvb2xzIH0gZnJvbSAnLi90b29scy9lbic7XHJcblxyXG5pbXBvcnQgeyBlbiBhcyBleGNlbEV4cG9ydCB9IGZyb20gJy4vZXhjZWxFeHBvcnQvZW4nO1xyXG5pbXBvcnQgeyBlbiBhcyBwbGF5ZXJDbGFzc2VzIH0gZnJvbSAnLi9wbGF5ZXJDbGFzc2VzL2VuJztcclxuXHJcbmV4cG9ydCBjb25zdCBlbjogRXh0ZW5zaW9uVHJhbnNsYXRpb25zID0ge1xyXG4gICAgb2dhbWU6IHtcclxuICAgICAgICBidWlsZGluZ3MsXHJcbiAgICAgICAgbGlmZWZvcm1zLFxyXG4gICAgICAgIGxpZmVmb3JtQnVpbGRpbmdzLFxyXG4gICAgICAgIGxpZmVmb3JtVGVjaG5vbG9naWVzLFxyXG4gICAgICAgIHByZW1pdW0sXHJcbiAgICAgICAgcmVzb3VyY2VzLFxyXG4gICAgICAgIHJlc2VhcmNoLFxyXG4gICAgICAgIHNoaXBzLFxyXG4gICAgICAgIGRlZmVuc2VzLFxyXG4gICAgfSxcclxuXHJcbiAgICBleHRlbnNpb246IHtcclxuICAgICAgICBjb21tb24sXHJcbiAgICAgICAgc2V0dGluZ3MsXHJcbiAgICAgICAgcmVzb3VyY2VzLFxyXG4gICAgICAgIGV4cGVkaXRpb25zLFxyXG4gICAgICAgIGNvbWJhdHMsXHJcbiAgICAgICAgZG9uYXRlLFxyXG4gICAgICAgIGRlYnJpc0ZpZWxkcyxcclxuICAgICAgICByZXNvdXJjZUJhbGFuY2UsXHJcbiAgICAgICAgZW1waXJlLFxyXG4gICAgICAgIHN3aXRjaEFjY291bnRzLFxyXG4gICAgICAgIGFib3V0LFxyXG4gICAgICAgIHVuaXZlcnNlSGlzdG9yeSxcclxuICAgICAgICBub3RpZmljYXRpb25zLFxyXG4gICAgICAgIHRvb2xzLFxyXG5cclxuICAgICAgICBleGNlbEV4cG9ydCxcclxuICAgICAgICBwbGF5ZXJDbGFzc2VzLFxyXG4gICAgfSxcclxufTsiLCJpbXBvcnQgeyBSZXNvdXJjZVRyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVcIjtcclxuaW1wb3J0IHsgZW4gYXMgb2dhbWVSZXNvdXJjZXMgfSBmcm9tICcuLi8uLi9vZ2FtZS9yZXNvdXJjZXMvZW4nO1xyXG5cclxuZXhwb3J0IGNvbnN0IGVuOiBSZXNvdXJjZVRyYW5zbGF0aW9ucyA9IG9nYW1lUmVzb3VyY2VzOyIsImltcG9ydCB7IENvbW1vblRyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBlbjogQ29tbW9uVHJhbnNsYXRpb25zID0ge1xyXG4gICAgYXZlcmFnZVBlckRheTogJ+KMgCBwZXIgZGF5JyxcclxuICAgIGNoYXJ0OiAnQ2hhcnQnLFxyXG4gICAgdGFibGU6ICdUYWJsZScsXHJcbiAgICBzdW06ICdTdW0nLFxyXG4gICAgdG90YWw6ICd0b3RhbCcsXHJcbiAgICByZXNvdXJjZVVuaXRzOiAnUmVzb3VyY2UgdW5pdHMnLFxyXG4gICAgZHN1OiAnRFNVJyxcclxuICAgIG1zdTogJ01TVScsXHJcbiAgICBkYXRlOiAnRGF0ZScsXHJcbiAgICBkYXRlVGltZTogJ0RhdGUgJiBUaW1lJyxcclxuXHJcbiAgICBtYWRlV2l0aExvdmUxOiAnTWFkZSB3aXRoJyxcclxuICAgIG1hZGVXaXRoTG92ZTI6ICdieSBXb25reWRvbmt5JyxcclxufTsiLCJpbXBvcnQgeyBFeHBlZGl0aW9uRXZlbnRTaXplIH0gZnJvbSBcIkAvc2hhcmVkL21vZGVscy9leHBlZGl0aW9ucy9FeHBlZGl0aW9uRXZlbnRTaXplXCI7XHJcbmltcG9ydCB7IEV4cGVkaXRpb25FdmVudFR5cGUgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL2V4cGVkaXRpb25zL0V4cGVkaXRpb25FdmVudFR5cGVcIjtcclxuaW1wb3J0IHsgRXhwZWRpdGlvbnNUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XHJcbmltcG9ydCB7IGVuIGFzIG9nYW1lUHJlbWl1bSB9IGZyb20gJy4uLy4uL29nYW1lL3ByZW1pdW0vZW4nO1xyXG5pbXBvcnQgeyBlbiBhcyBvZ2FtZUZhY3Rpb25zIH0gZnJvbSAnLi4vLi4vb2dhbWUvZmFjdGlvbnMvZW4nO1xyXG5pbXBvcnQgeyBFeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWwgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL2V4cGVkaXRpb25zL0V4cGVkaXRpb25EZXBsZXRpb25MZXZlbFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGVuOiBFeHBlZGl0aW9uc1RyYW5zbGF0aW9ucyA9IHtcclxuICAgIGhlYWRlcjogJ0V4cGVkaXRpb25zJyxcclxuICAgIHRhYkhlYWRlcnM6IHtcclxuICAgICAgICBvdmVydmlldzogJ092ZXJ2aWV3JyxcclxuICAgICAgICBmb3VuZFJlc291cmNlczogJ1Jlc291cmNlcycsXHJcbiAgICAgICAgZm91bmRTaGlwczogJ1NoaXBzJyxcclxuICAgICAgICBmb3VuZERhcmtNYXR0ZXI6IG9nYW1lUHJlbWl1bS5kYXJrTWF0dGVyLFxyXG4gICAgICAgIGZvdW5kSXRlbXM6ICdJdGVtcycsXHJcbiAgICAgICAgZGVwbGV0aW9uOiAnRGVwbGV0aW9uJyxcclxuICAgICAgICBpbmZvOiB7XHJcbiAgICAgICAgICAgIGhlYWRlcjogJ0luZm8nLFxyXG5cclxuICAgICAgICAgICAgdG9wRmluZHM6ICdUb3AgRmluZHMnLFxyXG4gICAgICAgICAgICBwb3NzaWJsZUZpbmRzOiAnTGlzdCBvZiBQb3NzaWJsZSBGaW5kcycsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc3ViSGVhZGVyczoge1xyXG4gICAgICAgICAgICBhbW91bnQ6ICdBbW91bnQnLFxyXG4gICAgICAgICAgICBzaXplczogJ1NpemVzJyxcclxuICAgICAgICAgICAgcmVzb3VyY2VzOiAnUmVzb3VyY2UgVW5pdHMnLFxyXG4gICAgICAgICAgICBjb3VudDogJ0NvdW50JyxcclxuICAgICAgICAgICAgc2l6ZXNCeVJlc291cmNlOiAnU2l6ZXMgYnkgUmVzb3VyY2UnLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG5cclxuICAgIGV4cGVkaXRpb25FdmVudHM6IHtcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5ub3RoaW5nXTogJ05vIEV2ZW50JyxcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5yZXNvdXJjZXNdOiAnUmVzb3VyY2VzJyxcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5mbGVldF06ICdTaGlwcycsXHJcbiAgICAgICAgW0V4cGVkaXRpb25FdmVudFR5cGUuZGVsYXldOiAnRGVsYXknLFxyXG4gICAgICAgIFtFeHBlZGl0aW9uRXZlbnRUeXBlLmVhcmx5XTogJ0Vhcmx5JyxcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5kYXJrTWF0dGVyXTogb2dhbWVQcmVtaXVtLmRhcmtNYXR0ZXIsXHJcbiAgICAgICAgW0V4cGVkaXRpb25FdmVudFR5cGUucGlyYXRlc106IG9nYW1lRmFjdGlvbnMucGlyYXRlcyxcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5hbGllbnNdOiBvZ2FtZUZhY3Rpb25zLmFsaWVucyxcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5jb21iYXRdOiAnQ29tYmF0JyxcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5pdGVtXTogJ0l0ZW0nLFxyXG4gICAgICAgIFtFeHBlZGl0aW9uRXZlbnRUeXBlLnRyYWRlcl06ICdUcmFkZXInLFxyXG4gICAgICAgIFtFeHBlZGl0aW9uRXZlbnRUeXBlLmxvc3RGbGVldF06ICdMb3N0IEZsZWV0JyxcclxuICAgIH0sXHJcbiAgICBleHBlZGl0aW9uRXZlbnRTaXplczoge1xyXG4gICAgICAgIFtFeHBlZGl0aW9uRXZlbnRTaXplLnNtYWxsXTogJ0NvbW1vbiBGaW5kJyxcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50U2l6ZS5tZWRpdW1dOiAnTGFyZ2UgRmluZCcsXHJcbiAgICAgICAgW0V4cGVkaXRpb25FdmVudFNpemUubGFyZ2VdOiAnSHVnZSBGaW5kJyxcclxuICAgICAgICAnZmxlZC1kZWF0aC1zdGFyJzogJ0VuZW1pZXMgZmxlZCcsXHJcbiAgICB9LFxyXG4gICAgZGVwbGV0aW9uTGV2ZWxzOiB7XHJcbiAgICAgICAgW0V4cGVkaXRpb25EZXBsZXRpb25MZXZlbC5ub25lXTogJ1ZlcnkgTG93JyxcclxuICAgICAgICBbRXhwZWRpdGlvbkRlcGxldGlvbkxldmVsLmxvd106ICdMb3cnLFxyXG4gICAgICAgIFtFeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWwubWVkaXVtXTogJ01lZGl1bScsXHJcbiAgICAgICAgW0V4cGVkaXRpb25EZXBsZXRpb25MZXZlbC5oaWdoXTogJ0hpZ2gnLFxyXG4gICAgICAgIHVua25vd246ICdVbmtub3duJyxcclxuICAgIH0sXHJcblxyXG4gICAgZXhwZWRpdGlvbnM6ICdFeHBlZGl0aW9ucycsXHJcbiAgICBmaW5kczogJ0ZpbmRzJyxcclxuICAgIHNoaXBzRm91bmQ6ICdTaGlwcyBmb3VuZCcsXHJcbiAgICBkZXBsZXRpb246ICdTeXN0ZW0gZGVwbGV0aW9uJyxcclxuXHJcbiAgICB0b3BGaW5kczoge1xyXG4gICAgICAgIHRpdGxlOiAodHlwZTogc3RyaW5nKSA9PiBgVG9wIGZpbmRzICgke3R5cGV9KWAsXHJcbiAgICAgICAgc2hpcFVuaXRzOiAnU2hpcCB1bml0cycsXHJcbiAgICAgICAgc2hpcEFtb3VudDogJ1NoaXAgYW1vdW50JyxcclxuXHJcbiAgICAgICAgc2l6ZTogJ1NpemUnLFxyXG4gICAgICAgIGFtb3VudDogJ0Ftb3VudCcsXHJcbiAgICAgICAgZGF0ZTogJ0RhdGUnLFxyXG4gICAgfSxcclxuICAgIHBvc3NpYmxlRmluZHM6IHtcclxuICAgICAgICBpbmZvOiB7XHJcbiAgICAgICAgICAgIHBsYXllckNsYXNzOiAnUGxheWVyIGNsYXNzJyxcclxuICAgICAgICAgICAgZWNvbm9teVNwZWVkOiAnRWNvbm9teSBzcGVlZCcsXHJcbiAgICAgICAgICAgIHJlc291cmNlRmluZEJvbnVzOiAnQm9udXMgcmVzb3VyY2UgZmluZHMnLFxyXG4gICAgICAgICAgICBzaGlwRmluZEJvbnVzOiAnQm9udXMgc2hpcCBmaW5kcycsXHJcbiAgICAgICAgICAgIGRhcmtNYXR0ZXJGaW5kQm9udXM6ICdCb251cyBEYXJrIE1hdHRlciBmaW5kcycsXHJcbiAgICAgICAgICAgIGRpc2NvdmVyZXJCb251czogJ0Rpc2NvdmVyZXIgY2xhc3MgYm9udXMnLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG1heGltdW1GaW5kczogJ01heGltdW0gRmluZHMnLFxyXG4gICAgICAgIGZpbmRzRGFya01hdHRlcjogJ1JhbmdlcyBvZiBETSBmaW5kcycsXHJcblxyXG4gICAgICAgIGxpc3RPZlBvc3NpYmxlRmluZHM6ICdMaXN0IG9mIHBvc3NpYmxlIGZpbmRzIChyZXNvdXJjZXMsIHNoaXAgdW5pdHMpJyxcclxuICAgICAgICBmaW5kU2l6ZXM6IChzaXplOiBzdHJpbmcpID0+IGBQb3NzaWJsZSBmaW5kIGFtb3VudHMgKCR7c2l6ZX0pYCxcclxuICAgICAgICBzaGlwVW5pdHM6ICdTaGlwIHVuaXRzJyxcclxuICAgICAgICBzaGlwTWF4VW5pdHNDb252ZXJ0ZWQ6ICdNYXguIFNoaXAgdW5pdHMnLFxyXG4gICAgfSxcclxufTsiLCJpbXBvcnQgeyBGYWN0aW9uVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBlbjogRmFjdGlvblRyYW5zbGF0aW9ucyA9IHtcclxuICAgIHBpcmF0ZXM6ICdQaXJhdGVzJyxcclxuICAgIGFsaWVuczogJ0FsaWVucycsXHJcbn07IiwiaW1wb3J0IHsgQ29tYmF0UmVzdWx0VHlwZSB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvY29tYmF0LXJlcG9ydHMvQ29tYmF0UmVzdWx0VHlwZVwiO1xyXG5pbXBvcnQgeyBDb21iYXRzVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGVuOiBDb21iYXRzVHJhbnNsYXRpb25zID0ge1xyXG4gICAgaGVhZGVyOiAnQ29tYmF0cycsXHJcbiAgICB0YWJIZWFkZXJzOiB7XHJcbiAgICAgICAgb3ZlcnZpZXc6ICdPdmVydmlldycsXHJcbiAgICAgICAgbG9vdDogJ0xvb3QnLFxyXG4gICAgICAgIGxvc3RTaGlwczogJ0xvc3QgU2hpcHMnLFxyXG4gICAgICAgIHN1YkhlYWRlcnM6IHtcclxuICAgICAgICAgICAgYWdhaW5zdFBsYXllcnM6ICdBZ2FpbnN0IFBsYXllcnMnLFxyXG4gICAgICAgICAgICBvbkV4cGVkaXRpb25zOiAnT24gRXhwZWRpdGlvbnMnLFxyXG5cclxuICAgICAgICAgICAgYW1vdW50OiAnQW1vdW50JyxcclxuICAgICAgICAgICAgcmVzb3VyY2VzOiAnUmVzb3VyY2UgVW5pdHMnXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBjb21iYXRzOiAnQ29tYmF0cycsXHJcbiAgICBzaGlwc0xvc3Q6ICdTaGlwcyBMb3N0JyxcclxuICAgIGNvbWJhdFJlc3VsdHM6IHtcclxuICAgICAgICBbQ29tYmF0UmVzdWx0VHlwZS53b25dOiAnV2lucycsXHJcbiAgICAgICAgW0NvbWJhdFJlc3VsdFR5cGUubG9zdF06ICdMb3NzZXMnLFxyXG4gICAgICAgIFtDb21iYXRSZXN1bHRUeXBlLmRyYXddOiAnRHJhd3MnLFxyXG4gICAgfSxcclxufTsiLCJpbXBvcnQgeyBEb25hdGVUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZW46IERvbmF0ZVRyYW5zbGF0aW9ucyA9IHtcclxuICAgIGhlYWRlcjogJ0RvbmF0ZScsXHJcbiAgICBzdWJIZWFkZXI6ICdEb25hdGUgdG8gc3VwcG9ydCB0aGUgZGV2ZWxvcG1lbnQgb2YgdGhlIE9HYW1lIFRyYWNrZXInLFxyXG4gICAgXHJcbiAgICBjcnlwdG86IHtcclxuICAgICAgICBoZWFkZXI6ICdEb25hdGUgY3J5cHRvJyxcclxuICAgIH0sXHJcbiAgICBrb2ZpOiB7XHJcbiAgICAgICAgaGVhZGVyOiAnRG9uYXRlIHdpdGggUGF5UGFsIG9yIGRlYml0L2NyZWRpdCBjYXJkJyxcclxuICAgICAgICBidXR0b25UZXh0OiAnRG9uYXRlIG9uIEtvLUZpJyxcclxuICAgICAgICBtZXNzYWdlOiAnWW91IGRvblxcJ3QgbmVlZCB0byBjcmVhdGUgYW4gYWNjb3VudCBvbiBLby1GaSB0byBkb25hdGUuIEFsbCBkb25hdGlvbnMgYXJlIGZvcndhcmRlZCBkaXJlY3RseSB0byB0aGUgZGV2ZWxvcGVyLicsXHJcbiAgICB9LFxyXG59OyIsImltcG9ydCB7IERlYnJpc0ZpZWxkc1RyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBlbjogRGVicmlzRmllbGRzVHJhbnNsYXRpb25zID0ge1xyXG4gICAgaGVhZGVyOiAnRGVicmlzIEZpZWxkcycsXHJcbiAgICBhZGREZWJyaXNGaWVsZE1hbnVhbGx5OiB7XHJcbiAgICAgICAgdGl0bGU6ICdBZGQgZGVicmlzIGZpZWxkIG1hbnVhbGx5JyxcclxuICAgICAgICBidXR0b25UZXh0OiAnQWRkJyxcclxuICAgIH0sXHJcbiAgICBwb3NpdGlvbjogJ1Bvc2l0aW9uJyxcclxufTsiLCJpbXBvcnQgeyBSZXNvdXJjZUJhbGFuY2VUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZW46IFJlc291cmNlQmFsYW5jZVRyYW5zbGF0aW9ucyA9IHtcclxuICAgIGhlYWRlcjogJ1Jlc291cmNlIEJhbGFuY2UnLFxyXG4gICAgXCJjb21iYXQtcmVwb3J0XCI6ICdmcm9tIGNvbWJhdHMnLFxyXG4gICAgXCJkZWJyaXMtZmllbGQtcmVwb3J0XCI6ICdmcm9tIGRlYnJpcyBmaWVsZHMnLFxyXG4gICAgZXhwZWRpdGlvbjogJ2Zyb20gZXhwZWRpdGlvbnMnXHJcbn07IiwiaW1wb3J0IHsgTGlmZWZvcm1EaXNjb3ZlcnlFdmVudEFydGlmYWN0RmluZGluZ1NpemUgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL2xpZmVmb3JtLWRpc2NvdmVyaWVzL0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRBcnRpZmFjdEZpbmRpbmdTaXplXCI7XHJcbmltcG9ydCB7IExpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlIH0gZnJvbSBcIkAvc2hhcmVkL21vZGVscy9saWZlZm9ybS1kaXNjb3Zlcmllcy9MaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZVwiO1xyXG5pbXBvcnQgeyBFbXBpcmVUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZW46IEVtcGlyZVRyYW5zbGF0aW9ucyA9IHtcclxuICAgIGhlYWRlcjogJ0VtcGlyZScsXHJcbiAgICBwbGFuZXQ6ICdQbGFuZXQnLFxyXG4gICAgb3ZlcnZpZXc6IHtcclxuICAgICAgICBoZWFkZXI6ICdPdmVydmlldycsXHJcbiAgICAgICAgc3VwcGx5QnVpbGRpbmdzOiAnU3VwcGx5IEJ1aWxkaW5ncycsXHJcbiAgICAgICAgZmFjaWxpdHlCdWlsZGluZ3M6ICdGYWNpbGl0aWVzJyxcclxuICAgIH0sXHJcbiAgICBwcm9kdWN0aW9uOiB7XHJcbiAgICAgICAgaGVhZGVyOiAnUHJvZHVjdGlvbicsXHJcbiAgICAgICAgc3ViSGVhZGVyczoge1xyXG4gICAgICAgICAgICByZXNvdXJjZVByb2R1Y3Rpb246ICdSZXNvdXJjZSBQcm9kdWN0aW9uJyxcclxuICAgICAgICAgICAgbWluZU92ZXJ2aWV3OiAnTWluZSBPdmVydmlldycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBhdmVyYWdlUGVySG91cjogJ+KMgCBwZXIgaG91cicsXHJcbiAgICAgICAgdG90YWxQZXJIb3VyOiAndG90YWwgcGVyIGhvdXInLFxyXG4gICAgICAgIHRvdGFsUGVyRGF5OiAndG90YWwgcGVyIGRheScsXHJcbiAgICAgICAgdG90YWxQZXJXZWVrOiAndG90YWwgcGVyIHdlZWsnLFxyXG4gICAgICAgIGFjdGl2ZVByb2R1Y3Rpb25TZXR0aW5nczogJ0FjdGl2ZSBQcm9kdWN0aW9uIFNldHRpbmdzJyxcclxuICAgICAgICBtZXNzYWdlUHJvZHVjdGlvbjEwMDogJ1RoZSBzaG93biB2YWx1ZXMgcmVmZXIgdG8gYSBwcm9kdWN0aW9uIGZhY3RvciBvZiAxMDAlIGFuZCBkbyBub3QgdGFrZSBsYWNrIG9mIGVuZXJneSBpbnRvIGFjY291bnQuJyxcclxuXHJcbiAgICAgICAgbWluZXM6IHtcclxuICAgICAgICAgICAgY3Jhd2xlcnNBdmFpbGFibGU6ICdhdmFpbGFibGUnLFxyXG4gICAgICAgICAgICBjcmF3bGVyc1RvUmVhY2hMaW1pdDogY291bnQgPT4gYCR7Y291bnR9IGNyYXdsZXJzIGZvciBtYXhpbXVtIGJvbnVzYCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGl0ZW1zOiAnQWN0aXZlIGl0ZW1zJyxcclxuICAgICAgICBicmVha2Rvd246IHtcclxuICAgICAgICAgICAgYmFzaWNJbmNvbWU6ICdCYXNpYyBJbmNvbWUnLFxyXG4gICAgICAgICAgICBtaW5lUHJvZHVjdGlvbjogJ01pbmUgUHJvZHVjdGlvbicsXHJcbiAgICAgICAgICAgIGNvbnN1bXB0aW9uOiAnQ29uc3VtcHRpb24nLFxyXG4gICAgICAgICAgICBsaWZlZm9ybUJ1aWxkaW5nczogJ0xpZmVmb3JtIEJ1aWxkaW5ncycsXHJcbiAgICAgICAgICAgIGNyYXdsZXJzOiAnQ3Jhd2xlcnMnLFxyXG4gICAgICAgICAgICBpdGVtczogJ0l0ZW1zJyxcclxuICAgICAgICAgICAgZ2VvbG9naXN0OiAnR2VvbG9naXN0JyxcclxuICAgICAgICAgICAgY29tbWFuZFN0YWZmOiAnQ29tbWFuZCBTdGFmZicsXHJcbiAgICAgICAgICAgIHBsYXllckNsYXNzOiAnUGxheWVyIENsYXNzJyxcclxuICAgICAgICAgICAgYWxsaWFuY2VDbGFzczogJ0FsbGlhbmNlIENsYXNzJyxcclxuICAgICAgICAgICAgbGlmZWZvcm1UZWNobm9sb2dpZXM6ICdMaWZlZm9ybSBUZWNobm9sb2dpZXMnLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgIHJlc2V0OiAnUmVzZXQnLFxyXG4gICAgICAgICAgICBoZWFkZXI6ICdQcm9kdWN0aW9uIHNldHRpbmdzJyxcclxuICAgICAgICAgICAgYXBwbHlBbmRDbG9zZTogJ0FwcGx5IGFuZCBjbG9zZSBwcm9kdWN0aW9uIHNldHRpbmdzJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIGFtb3J0aXphdGlvbjoge1xyXG4gICAgICAgIGhlYWRlcjogJ0Ftb3J0aXphdGlvbicsXHJcblxyXG4gICAgICAgIHRhYmxlOiB7XHJcbiAgICAgICAgICAgIGNvc3Q6ICdDb3N0JyxcclxuICAgICAgICAgICAgbGV2ZWxzOiAnTGV2ZWxzJyxcclxuICAgICAgICAgICAgcHJvZHVjdGlvblBsdXM6ICdQcm9kdWN0aW9uIFBsdXMnLFxyXG4gICAgICAgICAgICBhbW9ydGl6YXRpb25UaW1lOiAnQW1vcnRpemF0aW9uIFRpbWUnLFxyXG4gICAgICAgICAgICBncm91cFNlbGVjdGVkSXRlbXM6ICdHcm91cCBzZWxlY3RlZCBpdGVtcycsXHJcbiAgICAgICAgICAgIHNob3dPcmlnaW5hbEl0ZW1zOiAnU2hvdyBhbGwgaXRlbXMgaW5kaXZpZHVhbGx5JyxcclxuXHJcbiAgICAgICAgICAgIGxldmVsc09uUGxhbmV0czogKGxldmVscywgcGxhbmV0cykgPT4gYCR7bGV2ZWxzfSAke2xldmVscyA9PSAxID8gJ2xldmVsJyA6ICdsZXZlbHMnfSBvbiAke3BsYW5ldHN9ICR7cGxhbmV0cyA9PSAxID8gJ3BsYW5ldCcgOiAncGxhbmV0cyd9YCxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXR0aW5nczoge1xyXG4gICAgICAgICAgICBoZWFkZXI6ICdTZXR0aW5ncycsXHJcbiAgICAgICAgICAgIGFwcGx5QW5kQ2xvc2U6ICdBcHBseSBzZXR0aW5ncyBhbmQgY2xvc2UnLFxyXG5cclxuICAgICAgICAgICAgaW5jbHVkZVNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdJbmNsdWRlIGluIGNhbGN1bGF0aW9uJyxcclxuXHJcbiAgICAgICAgICAgICAgICBtaW5lczogJ01pbmVzJyxcclxuICAgICAgICAgICAgICAgIGV4cGVkaXRpb25zOiAnRXhwZWRpdGlvbnMnLFxyXG4gICAgICAgICAgICAgICAgZXhwZWRpdGlvbnNSZXF1aXJlbWVudDogJ05vdGU6IFJlcXVpcmVzIGF0IGxlYXN0IG9uZSBvZiBsaWZlZm9ybSBleHBlZGl0aW9uIGJvbnVzIHJlc2VhcmNoZXMsIGxpZmVmb3JtIHJlc2VhcmNoIGJvbnVzIGJ1aWxkaW5ncywgYW5kIGFzdHJvcGh5c2ljcyB0byBiZSBzZWxlY3RlZCcsXHJcbiAgICAgICAgICAgICAgICBsaWZlZm9ybVByb2R1Y3Rpb25Cb251c0J1aWxkaW5nczogJ0xpZmVmb3JtIHByb2R1Y3Rpb24gYm9udXMgYnVpbGRpbmdzJyxcclxuICAgICAgICAgICAgICAgIGxpZmVmb3JtVGVjaG5vbG9neUJvb3N0QnVpbGRpbmdzOiAnTGlmZWZvcm0gcmVzZWFyY2ggYm9udXMgYnVpbGRpbmdzJyxcclxuICAgICAgICAgICAgICAgIGxpZmVmb3JtUHJvZHVjdGlvbkJvbnVzVGVjaG5vbG9naWVzOiAnTGlmZWZvcm0gcHJvZHVjdGlvbiBib251cyByZXNlYXJjaGVzJyxcclxuICAgICAgICAgICAgICAgIGxpZmVmb3JtRXhwZWRpdGlvbkJvbnVzVGVjaG5vbG9naWVzOiAnTGlmZWZvcm0gZXhwZWRpdGlvbiBib251cyByZXNlYXJjaGVzJyxcclxuICAgICAgICAgICAgICAgIGFzdHJvcGh5c2ljc0FuZENvbG9ueTogJ0FzdHJvcGh5c2ljcyBhbmQgbmV3IGNvbG9uaWVzJyxcclxuICAgICAgICAgICAgICAgIGFzdHJvcGh5c2ljc1BlcmZvcm1hbmNlTm90ZTogJ05vdGU6IENvbXB1dGF0aW9uYWxseSBpbnRlbnNpdmUsIHdpbGwgZ3JlYXRseSBhZmZlY3QgcGVyZm9ybWFuY2UnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwbGF5ZXJTZXR0aW5nczoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnR2VuZXJhbCBTZXR0aW5ncycsXHJcbiAgICAgICAgICAgICAgICBvcHRpbWl6ZUZvclJlc291cmNlczogJ09wdGltaXplIGZvciBzZWxlY3RlZCByZXNvdXJjZXMnLFxyXG4gICAgICAgICAgICAgICAgb2ZmaWNlcnM6ICdPZmZpY2VycycsXHJcbiAgICAgICAgICAgICAgICBwbGF5ZXJDbGFzczogJ1BsYXllciBDbGFzcycsXHJcbiAgICAgICAgICAgICAgICBhbGxpYW5jZUNsYXNzOiAnQWxsaWFuY2UgQ2xhc3MnLFxyXG4gICAgICAgICAgICAgICAgY3VycmVudExldmVsT2Y6IChuYW1lOiBzdHJpbmcpID0+IGBDdXJyZW50IExldmVsIG9mICR7bmFtZX1gLFxyXG4gICAgICAgICAgICAgICAgbGlmZWZvcm1MZXZlbHM6ICdMaWZlZm9ybSBMZXZlbHMnLFxyXG5cclxuICAgICAgICAgICAgICAgIHVudXNlZFJhaWRDb2xvbnlTbG90czogJ0N1cnJlbnRseSB1bnVzZWQgcmFpZCBjb2xvbnkgc2xvdHMnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhc3Ryb3BoeXNpY3NTZXR0aW5nczoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAobmFtZTogc3RyaW5nKSA9PiBgJHtuYW1lfSBTZXR0aW5nc2AsXHJcbiAgICAgICAgICAgICAgICBuZXdDb2xvbnk6ICduZXcgQ29sb255JyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGxhbmV0U2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ1BsYW5ldCBTZXR0aW5ncycsXHJcblxyXG4gICAgICAgICAgICAgICAgZ2xvYmFsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVzZWxlY3RJdGVtczogJ0Rlc2VsZWN0IGFsbCBpdGVtcycsXHJcbiAgICAgICAgICAgICAgICAgICAgaWdub3JlSW5hY3RpdmVMaWZlZm9ybVRlY2hub2xvZ3lTbG90czogJ0lnbm9yZSBpbmFjdGl2ZSBsaWZlZm9ybSB0ZWNobm9sb2d5IHNsb3RzIGZvciBhbGwgcGxhbmV0cycsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVzZWxlY3RBbGxQbGFuZXRzOiAnRGVzZWxlY3QgYWxsIHBsYW5ldHMnLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICBpbmNsdWRlSW5SZXN1bHQ6ICdJbmNsdWRlIGluIGNhbGN1bGF0aW9uJyxcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnUG9zaXRpb24nLFxyXG4gICAgICAgICAgICAgICAgbWF4VGVtcGVyYXR1cmU6ICdNYXguIFRlbXBlcmF0dXJlJyxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZUl0ZW1zOiAnQWN0aXZlIEl0ZW1zJyxcclxuICAgICAgICAgICAgICAgIGNyYXdsZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdDcmF3bGVycycsXHJcbiAgICAgICAgICAgICAgICAgICAgcGVyY2VudGFnZTogJyUgUHJvZHVjdGlvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgZml4Q291bnQ6ICdGaXhlZCBDb3VudCcsXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4Q291bnQ6ICdNYXguIENvdW50JyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBtaW5lczogJ0N1cnJlbnQgTWluZSBMZXZlbHMnLFxyXG5cclxuICAgICAgICAgICAgICAgIGxpZmVmb3JtOiAnTGlmZWZvcm0nLFxyXG4gICAgICAgICAgICAgICAgbGlmZWZvcm1TZXR0aW5nczogJ0xpZmVmb3JtIHNldHRpbmdzJyxcclxuICAgICAgICAgICAgICAgIHJlbGV2YW50TGlmZWZvcm1CdWlsZGluZ3M6ICdSZWxldmFudCBMaWZlZm9ybSBCdWlsZGluZ3MnLFxyXG4gICAgICAgICAgICAgICAgbGlmZWZvcm1UZWNobm9sb2dpZXM6ICdMaWZlZm9ybSBUZWNobm9sb2dpZXMnLFxyXG4gICAgICAgICAgICAgICAgaWdub3JlRW1wdHlTbG90czogJ0lnbm9yZSBpbmFjdGl2ZSBzbG90cycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4cGVkaXRpb25TZXR0aW5nczoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnRXhwZWRpdGlvbiBTZXR0aW5ncycsXHJcbiAgICAgICAgICAgICAgICBhdmVyYWdlV2F2ZXNQZXJEYXk6ICfijIAgV2F2ZXMgcGVyIGRheScsXHJcbiAgICAgICAgICAgICAgICBpdGVtczogJ1Nsb3QgaXRlbXMnLFxyXG4gICAgICAgICAgICAgICAgYXZlcmFnZUV4cGVkaXRpb25zUGVyRGF5OiAn4oyAIEV4cGVkaXRpb25zIHBlciBkYXknLFxyXG4gICAgICAgICAgICAgICAgc2hpcFVuaXRGYWN0b3JzOiAnU2hpcCByZXNvdXJjZSB1bml0IGZhY3RvcnMnLFxyXG4gICAgICAgICAgICAgICAgdG9wUGxheWVyU2NvcmU6ICdUb3AgcGxheWVyIHNjb3JlJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbmZvOiB7XHJcbiAgICAgICAgICAgIGdlbmVyYXRpbmdJdGVtczogJ0NhbGN1bGF0aW5nIG5leHQgYmVzdCBpdGVtcycsXHJcblxyXG4gICAgICAgICAgICBzbG93Q2FsY3VsYXRpb246ICdUaGUgYW1vcnRpemF0aW9uIGNhbGN1bGF0aW9uIGJlY2FtZSBwcmV0dHkgc2xvdyBub3cgdGhhdCBpdCBpbmNsdWRlcyBsaWZlZm9ybSBidWlsZGluZ3MgYW5kIHRlY2hub2xvZ2llcy4gVGhpcyB3aWxsIGhvcGVmdWxseSBiZSBpbXByb3ZlZCBpbiB0aGUgZnV0dXJlLicsXHJcbiAgICAgICAgICAgIGN0cmxDbGljazogJ0N0cmwgKyBDbGljayBvbiBhIGNoZWNrIHRvIChkZSlzZWxlY3QgYWxsIGl0ZW1zIHVwIHRvIHRoZSBzZWxlY3RlZCBvbmUuJyxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzYXZlTG9hZDoge1xyXG4gICAgICAgICAgICBzYXZlQnV0dG9uOiAnU2F2ZSBjYWxjdWxhdGVkIGFtb3J0aXphdGlvbiByZXN1bHRzJyxcclxuICAgICAgICAgICAgbG9hZEJ1dHRvbjogKGRhdGU6IHN0cmluZykgPT4gYExvYWQgc2F2ZSAoJHtkYXRlfSlgLFxyXG4gICAgICAgICAgICBsb2FkZWRTYXZlOiAoZGF0ZTogc3RyaW5nLCBoaWRkZW5JdGVtczogc3RyaW5nKSA9PiBgVmlld2luZyBzYXZlZCByZXN1bHRzICgke2RhdGV9KSAtICR7aGlkZGVuSXRlbXN9IGhpZGRlbiByb3dzYCxcclxuICAgICAgICAgICAgYWJhbmRvbmVkUGxhbmV0OiAnQWJhbmRvbmVkIFBsYW5ldCcsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2VuZXJhdGVJdGVtczogdmFsdWUgPT4gYCR7dmFsdWV9IGVudHJpZXNgLFxyXG4gICAgfSxcclxuICAgIGxpZmVmb3Jtczoge1xyXG4gICAgICAgIGhlYWRlcjogJ0xpZmVmb3JtcycsXHJcbiAgICAgICAgc3ViSGVhZGVyczoge1xyXG4gICAgICAgICAgICBvdmVydmlldzogJ092ZXJ2aWV3JyxcclxuICAgICAgICAgICAgcHJvZ3Jlc3M6ICdQcm9ncmVzcycsXHJcbiAgICAgICAgICAgIGRpc2NvdmVyeU1pc3Npb25zOiAnTWlzc2lvbnMnLFxyXG5cclxuICAgICAgICAgICAgZGlzY292ZXJ5UmVzdWx0czogJ1Jlc3VsdHMnLFxyXG4gICAgICAgICAgICBleHBlcmllbmNlOiAnRXhwZXJpZW5jZScsXHJcbiAgICAgICAgICAgIHJlc2VhcmNoQm9udXNlczogJ0dsb2JhbCBSZXNlYXJjaCBCb251c2VzJyxcclxuICAgICAgICAgICAgcGxhbmV0Qm9udXNlczogJ0VmZmVjdGl2ZSBQbGFuZXQgQm9udXNlcycsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcGxhbmV0OiAnUGxhbmV0JyxcclxuICAgICAgICBsaWZlZm9ybTogJ0xpZmVmb3JtJyxcclxuICAgICAgICBidWlsZGluZ3M6ICdMaWZlZm9ybSBCdWlsZGluZ3MnLFxyXG4gICAgICAgIHRlY2hub2xvZ2llczogJ0xpZmVmb3JtIFRlY2hub2xvZ2llcycsXHJcbiAgICAgICAgdGllcjogJ1RpZXInLFxyXG4gICAgICAgIGxldmVsOiAnTGV2ZWwnLFxyXG4gICAgICAgIHRvdGFsTGlmZWZvcm1FeHBlcmllbmNlOiAnRXhwZXJpZW5jZSAodG90YWwpJyxcclxuICAgICAgICBkaXNjb3ZlcnlEYXRlVW5rbm93bjogJ1Vua25vd24nLFxyXG4gICAgICAgIG5vdERpc2NvdmVyZWRZZXQ6ICdOb3QgZGlzY292ZXJlZCB5ZXQnLFxyXG4gICAgICAgIGRpc2NvdmVyeU1pc3Npb25zOiAnRGlzY292ZXJ5IE1pc3Npb25zJyxcclxuICAgICAgICBldmVudFR5cGVzOiB7XHJcbiAgICAgICAgICAgIFtMaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZS5ub3RoaW5nXTogJ05vIGZpbmRpbmcnLFxyXG4gICAgICAgICAgICBbTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUubG9zdFNoaXBdOiAnTG9zdCBleHBsb3JhdGlvbiBzaGlwJyxcclxuICAgICAgICAgICAgW0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlLm5ld0xpZmVmb3JtRm91bmRdOiAnTmV3IGxpZmVmb3JtJyxcclxuICAgICAgICAgICAgW0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlLmtub3duTGlmZWZvcm1Gb3VuZF06ICdMaWZlZm9ybSBleHBlcmllbmNlJyxcclxuICAgICAgICAgICAgW0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlLmFydGlmYWN0c106ICdBcnRpZmFjdHMgZm91bmQnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYXJ0aWZhY3RGaW5kaW5nU2l6ZXM6IHtcclxuICAgICAgICAgICAgW0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRBcnRpZmFjdEZpbmRpbmdTaXplLnNtYWxsXTogJ0NvbW1vbiBGaW5kJyxcclxuICAgICAgICAgICAgW0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRBcnRpZmFjdEZpbmRpbmdTaXplLm1lZGl1bV06ICdMYXJnZSBGaW5kJyxcclxuICAgICAgICAgICAgW0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRBcnRpZmFjdEZpbmRpbmdTaXplLmxhcmdlXTogJ0h1Z2UgRmluZCcsXHJcbiAgICAgICAgICAgIFtMaWZlZm9ybURpc2NvdmVyeUV2ZW50QXJ0aWZhY3RGaW5kaW5nU2l6ZS5zdG9yYWdlRnVsbF06ICdTdG9yYWdlIEZ1bGwnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGlmZWZvcm1Gb3VuZDogJ0xpZmVmb3JtIGZvdW5kJyxcclxuICAgICAgICBhbHdheXNBdmFpbGFibGU6ICdBbHdheXMgYXZhaWxhYmxlJyxcclxuICAgICAgICBhcnRpZmFjdHM6ICdBcnRpZmFjdHMnLFxyXG5cclxuICAgICAgICBleHBlcmllbmNlUG9pbnRzOiAnRXhwZXJpZW5jZSBQb2ludHMnLFxyXG4gICAgICAgIGRpc2NvdmVyZWRPbjogJ0xpZmVmb3JtIGRpc2NvdmVyZWQgb24nLFxyXG4gICAgICAgIG51bWJlck9mTGlmZWZvcm1EaXNjb3ZlcmllczogJ051bWJlciBvZiBkaXNjb3ZlcmllcycsXHJcblxyXG4gICAgICAgIGdsb2JhbFJlc2VhcmNoQm9udXM6ICdHbG9iYWwgcmVzZWFyY2ggYm9udXMnLFxyXG5cclxuICAgICAgICByZXNlYXJjaEJvbnVzZXM6IHtcclxuICAgICAgICAgICAgYnJlYWtkb3duOiB7XHJcbiAgICAgICAgICAgICAgICBzbG90OiAnU2xvdCcsXHJcbiAgICAgICAgICAgICAgICByZXNlYXJjaDogJ1Jlc2VhcmNoJyxcclxuICAgICAgICAgICAgICAgIGJvbnVzOiAnQm9udXMnLFxyXG4gICAgICAgICAgICAgICAgbGlmZWZvcm1CdWlsZGluZ3NCb29zdDogYExpZmVmb3JtIEJ1aWxkaW5nIEJvb3N0YCxcclxuICAgICAgICAgICAgICAgIGxpZmVmb3JtTGV2ZWxCb29zdDogKGxpZmVmb3JtOiBzdHJpbmcsIGJvb3N0OiBzdHJpbmcpID0+IGBMaWZlZm9ybSBMZXZlbCBCb29zdCAoJHtsaWZlZm9ybX06ICR7Ym9vc3R9KWAsXHJcbiAgICAgICAgICAgICAgICBidWdCb29zdDogJ0Jvb3N0IGNhdXNlZCBieSBidWdzJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcHJvZHVjdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnUmVzb3VyY2UgUHJvZHVjdGlvbicsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4cGVkaXRpb25GaW5kczoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnRXhwZWRpdGlvbiBGaW5kcycsXHJcbiAgICAgICAgICAgICAgICByZXNvdXJjZXM6ICdSZXNvdXJjZXMnLFxyXG4gICAgICAgICAgICAgICAgc2hpcHM6ICdTaGlwcycsXHJcbiAgICAgICAgICAgICAgICBmbGVldExvc3M6ICdGbGVldCBsb3NzZXMnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBleHBlZGl0aW9uU3BlZWQ6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ0V4cGVkaXRpb24gQXJyaXZhbCBTcGVlZCcsXHJcbiAgICAgICAgICAgICAgICBib251czogJ1NwZWVkIEJvbnVzJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2hpcHM6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ1NoaXBzJyxcclxuICAgICAgICAgICAgICAgIGFybW9yOiAnQXJtb3InLFxyXG4gICAgICAgICAgICAgICAgc2hpZWxkOiAnU2hpZWxkJyxcclxuICAgICAgICAgICAgICAgIGRhbWFnZTogJ0RhbWFnZScsXHJcbiAgICAgICAgICAgICAgICBjYXJnbzogJ0NhcmdvJyxcclxuICAgICAgICAgICAgICAgIHNwZWVkOiAnU3BlZWQnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkZWZlbnNlczoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnRGVmZW5zZXMnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmdWVsQ29uc3VtcHRpb246IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ0Z1ZWwgQ29uc3VtcHRpb24nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmdWVsUmV0dXJuOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdGdWVsIFJldHVybiBvbiBSZWNhbGwnLFxyXG4gICAgICAgICAgICAgICAgYm9udXM6ICdGdWVsIFJldHVybicsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJ1aWxkaW5nQ29zdFRpbWU6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ0J1aWxkaW5nIENvc3QgJiBUaW1lJyxcclxuICAgICAgICAgICAgICAgIGNvc3Q6ICdDb3N0JyxcclxuICAgICAgICAgICAgICAgIHRpbWU6ICdUaW1lJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmVzZWFyY2hDb3N0VGltZToge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnUmVzZWFyY2ggQ29zdCAmIFRpbWUnLFxyXG4gICAgICAgICAgICAgICAgcmVzZWFyY2hlczogJ1Jlc2VhcmNoZXMnLFxyXG4gICAgICAgICAgICAgICAgbGlmZWZvcm1SZXNlYXJjaGVzOiAnTGlmZWZvcm0gUmVzZWFyY2hlcycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNyYXdsZXJzOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdDcmF3bGVycycsXHJcbiAgICAgICAgICAgICAgICBwcm9kdWN0aW9uQm9udXM6ICdSZXNvdXJjZSBQcm9kdWN0aW9uJyxcclxuICAgICAgICAgICAgICAgIGVuZXJneUNvbnN1bXB0aW9uOiAnRW5lcmd5IENvbnN1bXB0aW9uJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGVuQ2FwYWNpdHk6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ0RlbiBDYXBhY2l0eScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBoYWxhbnhSYW5nZToge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnUGhhbGFueCBSYW5nZScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRpc2NvdmVyeU1pc3Npb25zOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdEaXNjb3ZlcnkgTWlzc2lvbiBTcGVlZCcsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsYXllckNsYXNzZXM6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ1BsYXllciBDbGFzc2VzJyxcclxuXHJcbiAgICAgICAgICAgICAgICBjb2xsZWN0b3I6IHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0aW9uQm9udXM6ICdJbmNyZWFzZWQgbWluZSBwcm9kdWN0aW9uJyxcclxuICAgICAgICAgICAgICAgICAgICBlbmVyZ3lQcm9kdWN0aW9uQm9udXM6ICdJbmNyZWFzZWQgZW5lcmd5IHByb2R1Y3Rpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydGVyU3BlZWRCb251czogJ1RyYW5zcG9ydGVyIHNwZWVkIGJvbnVzJyxcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnRlckNhcmdvQm9udXM6ICdUcmFuc3BvcnRlciBjYXJnbyBib251cycsXHJcbiAgICAgICAgICAgICAgICAgICAgY3Jhd2xlclByb2R1Y3Rpb25Cb251czogJ0NyYXdsZXIgcHJvZHVjdGlvbiBib251cycsXHJcbiAgICAgICAgICAgICAgICAgICAgZ2VvbG9naXN0Q3Jhd2xlckFtb3VudEJvbnVzOiAnTW9yZSB1c2FibGUgY3Jhd2xlcnMgd2l0aCBHZW9sb2dpc3QnLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRpc2NvdmVyZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICByZXNlYXJjaER1cmF0aW9uOiAnUmVzZWFyY2ggdGltZScsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5jcmVhc2VkRXhwZWRpdGlvbkZpbmRzOiAnSW5jcmVhc2VkIGdhaW4gb24gZXhwZWRpdGlvbnMnLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhcmdlclBsYW5ldHM6ICdMYXJnZXIgcGxhbmV0cyBvbiBjb2xvbml6YXRpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxFeHBlZGl0aW9uU2xvdHM6ICdBZGRpdGlvbmFsIGV4cGVkaXRpb24gc2xvdHMnLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlZHVjZWRFeHBlZGl0aW9uQ29tYmF0Q2hhbmNlOiAnQ2hhbmNlIG9mIGV4cGVkaXRpb24gY29tYmF0cycsXHJcbiAgICAgICAgICAgICAgICAgICAgcGhhbGFueFJhbmdlOiAnSW5jcmVhc2VkIHBoYWxhbnggcmFuZ2UnLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGdlbmVyYWw6IHtcclxuICAgICAgICAgICAgICAgICAgICBjb21iYXRTaGlwU3BlZWQ6ICdDb21iYXQgc2hpcCBzcGVlZCBib251cycsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVjeWNsZXJTcGVlZDogJ3JlY3ljbGVyIHNwZWVkIGJvbnVzJyxcclxuICAgICAgICAgICAgICAgICAgICBmdWVsQ29uc3VtcHRpb246ICdGdWVsIGNvbnN1bXB0aW9uIGZvciBhbGwgc2hpcHMnLFxyXG4gICAgICAgICAgICAgICAgICAgIGluY3JlYXNlZENhcmdvUmVjeWNsZXJzUGF0aGZpbmRlcnM6ICdJbmNyZWFzZWQgY2FyZ28gZm9yIFJlY3ljbGVycy9QYXRoZmluZGVycycsXHJcbiAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbENvbWJhdFJlc2VhcmNoTGV2ZWxzOiAnQWRkaXRpb25hbCBjb21iYXQgcmVzZWFyY2ggbGV2ZWxzJyxcclxuICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsRmxlZXRTbG90czogJ0FkZGl0aW9uYWwgZmxlZXQgc2xvdHMnLFxyXG4gICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxNb29uRmllbGRzOiAnQWRkaXRpb25hbCBtb29uIGZpZWxkcycsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIGNsYXNzQm9udXM6ICdDbGFzcyBCb251cycsXHJcbiAgICAgICAgICAgICAgICBib251czogJ0JvbnVzJyxcclxuICAgICAgICAgICAgICAgIGJhc2VWYWx1ZTogJ0Jhc2UgVmFsdWUnLFxyXG4gICAgICAgICAgICAgICAgdmFsdWVXaXRoQm9udXNlczogJ1ZhbHVlIHdpdGggQm9udXNlcycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcGxhbmV0Qm9udXNlczoge1xyXG4gICAgICAgICAgICByZXNvdXJjZVByb2R1Y3Rpb246IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ1Jlc291cmNlIFByb2R1Y3Rpb24nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsaWZlZm9ybVJlc2VhcmNoQ29zdFRpbWU6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ0xpZmVmb3JtIFJlc2VhcmNoIENvc3QgJiBUaW1lJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgd3JlY2tmaWVsZDoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnV3JlY2tmaWVsZCcsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdG9wRmluZHM6IHtcclxuICAgICAgICAgICAgdG9wRmluZHM6ICdCZXN0IEZpbmRzJyxcclxuICAgICAgICAgICAgd29yc3RGaW5kczogJ1dvcnN0IEZpbmRzJyxcclxuXHJcbiAgICAgICAgICAgIHNpemU6ICdTaXplJyxcclxuICAgICAgICAgICAgYW1vdW50OiAnQW1vdW50JyxcclxuICAgICAgICAgICAgZGF0ZTogJ0RhdGUnLFxyXG4gICAgICAgICAgICBhcnRpZmFjdHM6ICdBcnRpZmFjdHMnLFxyXG4gICAgICAgICAgICBleHBlcmllbmNlOiAnWFAnLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG59OyIsImltcG9ydCB7IFN3aXRjaEFjY291bnRzVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGVuOiBTd2l0Y2hBY2NvdW50c1RyYW5zbGF0aW9ucyA9IHtcclxuICAgIHRpdGxlOiAnU2VsZWN0IGFjY291bnQgdG8gdmlldyBpbiBhIG5ldyB0YWInLFxyXG59OyIsImltcG9ydCB7IEFib3V0VHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGVuOiBBYm91dFRyYW5zbGF0aW9ucyA9IHtcclxuICAgIGZhcUhlbHA6IHtcclxuICAgICAgICBoZWFkZXI6ICdIZWxwJyxcclxuICAgICAgICBmYXE6IHtcclxuICAgICAgICAgICAgaGVhZGVyOiAnRi5BLlEuJyxcclxuICAgICAgICAgICAgZmxlZXRMb3N0T25FeHBlZGl0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdXaHkgYXJlIHRoZSBzaGlwcyBub3QgdHJhY2tlZCB0aGF0IEkgbG9zdCBvbiBleHBlZGl0aW9ucz8nLFxyXG4gICAgICAgICAgICAgICAgdGV4dDogJ1RyYWNraW5nIGxvc3Qgc2hpcHMgb24gZXhwZWRpdGlvbnMgcmVxdWlyZXMgcGVybWFuZW50IGZsZWV0IHRyYWNraW5nIHdoaWNoIGlzIG5vdCBmZWFzaWJsZS4nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzeW5jQmV0d2VlbkRldmljZXM6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ1doeSBpcyB0aGVyZSBubyBzeW5jaHJvbml6YXRpb24gb2YgbXkgZGF0YSBiZXR3ZWVuIG11bHRpcGxlIGRldmljZXM/JyxcclxuICAgICAgICAgICAgICAgIHRleHQ6ICdUaGUgdHJhY2tlciBzYXZlcyBhIGxvdCBtb3JlIGRhdGEgdGhhbiBjYW4gYmUgc3luY2hyb25pemVkIHVzaW5nIHlvdXIgdXNlciBhY2NvdW50IChHb29nbGUsIE1pY3Jvc29mdCwgZXRjKS4gQSBzeW5jaHJvbml6YXRpb24gd2l0aCBhbiBleHRlcm5hbCBzZXJ2ZXIgbWlnaHQgYmUgcG9zc2libGUgaW4gdGhlIGZ1dHVyZS4nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwcm9kdWN0aW9uSW5SZXNvdXJjZUJhbGFuY2U6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ1doeSBkb2VzIHRoZSByZXNvdXJjZSBiYWxhbmNlIG5vdCBpbmNsdWRlIG15IHJlc291cmNlIHByb2R1Y3Rpb24/JyxcclxuICAgICAgICAgICAgICAgIHRleHQ6ICdZb3VyIHJlc291cmNlIHByb2R1Y3Rpb24gZGVwZW5kcyBvbiB2YXJpb3VzIGZhY3RvcnMsIGFuZCB0aGVpciBjaGFuZ2VzIHdvdWxkIGhhdmUgdG8gYmUgdHJhY2tlZCBwZXJtYW5lbnRseS4gV2hpbGUgdGhpcyBpcyBwb3NzaWJsZSwgYW4gaW1wbGVtZW50YXRpb24gb2YgdGhpcyBmZWF0dXJlIHdvdWxkIGJlIG11Y2ggbW9yZSBjb21wbGV4IHRoYW4gaXQgd291bGQgYmUgb2YgdXNlIGZvciBpdHMgdXNlcnMuJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgd2hhdEFyZUF2ZXJhZ2VzOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdXaGF0IGRvZXMgdGhlIFxcJ+KMgCBwZXIgZGF5XFwnIG1lYW4/JyxcclxuICAgICAgICAgICAgICAgIHRleHQ6ICdUaGlzIGlzIHRoZSBhdmVyYWdlIG92ZXIgYWxsIGRheXMgd2l0aCBhdCBsZWFzdCBvbmUgdHJhY2tlZCBldmVudC4nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGlwczoge1xyXG4gICAgICAgICAgICBoZWFkZXI6ICdUaXBzJyxcclxuICAgICAgICAgICAgcmlnaHRDbGlja0RlZmF1bHRSb3V0ZTogJ1lvdSBjYW4gcmlnaHQtY2xpY2sgYSBtYWluIHRhYiBvbiB0aGUgbGVmdCBzaWRlIG9yIGFueSBvZiBpdHMgc3ViLW1lbnUgaXRlbXMgdG8gc2V0IHRoaXMgbWVudSBhcyBzdGFuZGFyZCBmb3IgdGhlIHNlbGVjdGVkIHJvdXRlLicsXHJcbiAgICAgICAgICAgIG51bWJlcnNLZXlib2FyZE5hdmlnYXRpb246ICdZb3UgY2FuIG9wZW4gdGhlIHBhZ2VzIG9mIHRoZSB0YWJzIHdpdGggYSBkaWdpdCBieSBwcmVzc2luZyB0aGUgcmVzcGVjdGl2ZSBkaWdpdCBrZXkgb24geW91ciBrZXlib2FyZC4nLFxyXG4gICAgICAgICAgICBhbW9ydGl6YXRpb25UYWJsZToge1xyXG4gICAgICAgICAgICAgICAgcGFydDE6ICdXYW50IHRvIGtub3cgd2hhdCB0byBidWlsZCBvciByZXNlYXJjaCBuZXh0IHRvIGltcHJvdmUgeW91ciByZXNvdXJjZSBwcm9kdWN0aW9uIHRoZSBtb3N0IGVmZmljaWVudCB3YXk/IFRyeSB0aGVcXHhhMCcsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnaW50ZXJhY3RpdmUgYW1vcnRpemF0aW9uIGNhbGN1bGF0b3InLFxyXG4gICAgICAgICAgICAgICAgcGFydDI6ICcuJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW5saW5lU2V0dGluZ3M6ICdZb3UgY2FuIGNoYW5nZSByZWxhdGVkIHNldHRpbmdzIGltbWVkaWF0ZWx5IGJ5IHByZXNzaW5nIHRoZSBzbWFsbCBnZWFyIGljb24gb24gdGhlIHJpZ2h0IHNpZGUuJyxcclxuICAgICAgICAgICAgc3dpdGNoQWNjb3VudEh0bWw6ICdZb3UgY2FuIG9wZW4gdGhlIE9HYW1lIFRyYWNrZXIgaW50ZXJmYWNlIGZvciBhbm90aGVyIHRyYWNrZWQgYWNjb3VudCBieSBjbGlja2luZyB0aGUgPHNwYW4gY2xhc3M9XCJtZGkgbWRpLWFjY291bnQtbXVsdGlwbGVcIj48L3NwYW4+IGljb24gYW5kIHNlbGVjdGluZyB0aGUgYWNjb3VudC4nLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG1lc3NhZ2VEaXNjb3JkOiB7XHJcbiAgICAgICAgICAgIHBhcnQxOiAnTmVlZCBoZWxwLCBmb3VuZCBhIGJ1Zywgb3IgaGF2ZSBhIGZlYXR1cmUgcmVxdWVzdD8gSm9pbiB0aGVcXHhhMCcsXHJcbiAgICAgICAgICAgIGRpc2NvcmRTZXJ2ZXI6ICdEaXNjb3JkIHNlcnZlcicsXHJcbiAgICAgICAgICAgIHBhcnQyOiAnXFx4YTBhbmQgd3JpdGUgYSBtZXNzYWdlIGluIHRoZSByZWxhdGVkIGNoYW5uZWwuJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIGluZm86IHtcclxuICAgICAgICBoZWFkZXI6ICdJbmZvJyxcclxuICAgICAgICB0YWJsZToge1xyXG4gICAgICAgICAgICBjdXJyZW50QWNjb3VudDoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnSW5mb3JtYXRpb24gYWJvdXQgdGhlIHNlbGVjdGVkIGFjY291bnQnLFxyXG4gICAgICAgICAgICAgICAgbnVtYmVyT2ZUcmFja2VkRXhwZWRpdGlvbnM6ICdOdW1iZXIgb2YgdHJhY2tlZCBleHBlZGl0aW9ucycsXHJcbiAgICAgICAgICAgICAgICBudW1iZXJPZlRyYWNrZWRDb21iYXRSZXBvcnRzOiAnTnVtYmVyIG9mIHRyYWNrZWQgY29tYmF0IHJlcG9ydHMnLFxyXG4gICAgICAgICAgICAgICAgbnVtYmVyT2ZUcmFja2VkRGVicmlzRmllbGRSZXBvcnRzOiAnTnVtYmVyIG9mIHRyYWNrZWQgaGFydmVzdCByZXBvcnRzJyxcclxuICAgICAgICAgICAgICAgIG51bWJlck9mVHJhY2tlZExpZmVmb3JtRGlzY292ZXJpZXM6ICdOdW1iZXIgb2YgdHJhY2tlZCBkaXNjb3ZlcnkgbWlzc2lvbmdzJyxcclxuICAgICAgICAgICAgICAgIGxhc3RVcGRhdGVTZXJ2ZXJTZXR0aW5nczogJ0xhdGVzdCBzZXJ2ZXIgc2V0dGluZ3MgdXBkYXRlJyxcclxuICAgICAgICAgICAgICAgIG51bWJlck9mVW5pdmVyc2VIaXN0b3J5RW50cmllczogJ051bWJlciBvZiBlbnRyaWVzIGluIHVuaXZlcnNlIGhpc3RvcnknLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnbG9iYWw6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ0luZm9ybWF0aW9uIGFib3V0IGFsbCBkYXRhIGluIHRoZSBPR2FtZSBUcmFja2VyJyxcclxuICAgICAgICAgICAgICAgIG51bWJlck9mVHJhY2tlZEFjY291bnRzOiAnTnVtYmVyIG9mIHRyYWNrZWQgYWNjb3VudHMnLFxyXG4gICAgICAgICAgICAgICAgZXN0aW1hdGVkU2l6ZTogJ1NpemUgb2YgYWxsIHNhdmVkIGRhdGEgb24gZGlzaycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbn07IiwiaW1wb3J0IHsgVW5pdmVyc2VIaXN0b3J5VHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGVuOiBVbml2ZXJzZUhpc3RvcnlUcmFuc2xhdGlvbnMgPSB7XHJcbiAgICBoZWFkZXI6ICdVbml2ZXJzZSBIaXN0b3J5JyxcclxuICAgIHNldHRpbmdzOiB7ICBcclxuICAgICAgICBtZXNzYWdlczoge1xyXG4gICAgICAgICAgICBub3RFbmFibGVkSHRtbDogYFxyXG4gICAgICAgICAgICA8Yj5Vbml2ZXJzZSBoaWdoc2NvcmUgdHJhY2tpbmcgaXMgbm90IGVuYWJsZWQuPC9iPjxici8+XHJcbiAgICAgICAgICAgIEVuYWJsaW5nIHRoaXMgZmVhdHVyZSB3aWxsIHRyYWNrIGhpZ2hzY29yZSBjaGFuZ2VzIGZvciBwbGF5ZXJzIGFuZCBhbGxpYW5jZXMuXHJcbiAgICAgICAgICAgIGAsXHJcbiAgICAgICAgICAgIGhpc3RvcnlUcmFja2luZ05vdEVuYWJsZWRIdG1sOiBgXHJcbiAgICAgICAgICAgIDxiPlVuaXZlcnNlIGhpc3RvcnkgdHJhY2tpbmcgaXMgbm90IGVuYWJsZWQuPC9iPjxici8+XHJcbiAgICAgICAgICAgIEVuYWJsaW5nIHRoaXMgZmVhdHVyZSB3aWxsIGFkZGl0aW9uYWxseSB0cmFjayBhbGwgY2hhbmdlcyBmb3IgcGxheWVycyBhbmQgYWxsaWFuY2VzLjxici8+XHJcbiAgICAgICAgICAgIFRoaXMgaW5jbHVkZXMgcGxheWVyIGFuZCBhbGxpYW5jZSBuYW1lIGFuZCB0YWcgY2hhbmdlcywgYWxsaWFuY2UgbWVtYmVyc2hpcCBjaGFuZ2VzLCBcclxuICAgICAgICAgICAgcGxheWVyIHN0YXR1cyBjaGFuZ2VzLCBhbmQgY2hhbmdlcyByZWdhcmRpbmcgcGxhbmV0cyBhbmQgbW9vbnMgXHJcbiAgICAgICAgICAgIGluY2x1ZGluZyBuYW1lcywgY29vcmRpbmF0ZXMsIGFuZCBhYmFuZG9uZWQvZGVzdHJveWVkIHBsYW5ldHMgYW5kIG1vb25zLjxiciAvPlxyXG4gICAgICAgICAgICA8aT5UaGlzIGNhbiBnZW5lcmF0ZSBhIGxvdCBvZiBkYXRhIVxyXG4gICAgICAgICAgICBZb3UgY2FuIGRlYWN0aXZhdGUgdGhpcyBmZWF0dXJlIDxhIGhyZWY9XCIjL3NldHRpbmdzL3VuaXZlcnNlLWhpc3RvcnlcIj5pbiB0aGUgc2V0dGluZ3MgbWVudTwvYT4gXHJcbiAgICAgICAgICAgIGFnYWluLjwvaT5cclxuICAgICAgICAgICAgYCxcclxuICAgICAgICAgICAgdHJhY2tpbmdUaW1lc0h0bWw6IGBcclxuICAgICAgICAgICAgQXQgbGVhc3Qgb25jZSBldmVyeSBkYXkgdGhlIGhpZ2hzY29yZXMgYW5kIHVuaXZlcnNlIGRhdGEgKGlmIGVuYWJsZWQpIHdpbGwgYmUgdXBkYXRlZC48YnIvPlxyXG4gICAgICAgICAgICBZb3UgY2FuIHNldCB0aGUgdXBkYXRlIHRpbWVzIGJlbG93LlxyXG4gICAgICAgICAgICBJZiBhbiB1cGRhdGUgd2FzIG1pc3NlZCB0aGVuIGl0IHdpbGwgdXBkYXRlIGFzIHNvb24gYXMgcG9zc2libGUgYWZ0ZXJ3YXJkcy5cclxuICAgICAgICAgICAgYFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW5hYmxlSGlnaHNjb3JlVHJhY2tpbmdPbmx5OiAnRW5hYmxlIHVuaXZlcnNlIGhpZ2hzY29yZSB0cmFja2luZycsXHJcbiAgICAgICAgZW5hYmxlSGlzdG9yeVRyYWNraW5nOiAnRW5hYmxlIHVuaXZlcnNlIGhpc3RvcnkgdHJhY2tpbmcnLFxyXG4gICAgfSxcclxuXHJcbiAgICB0YWJzOiB7XHJcbiAgICAgICAgcGxheWVyczogJ1BsYXllcnMnLFxyXG4gICAgICAgIGFsbGlhbmNlczogJ0FsbGlhbmNlcycsXHJcblxyXG4gICAgICAgIHN1YnRhYnM6IHtcclxuICAgICAgICAgICAgaGlnaHNjb3JlOiAnSGlnaHNjb3JlJyxcclxuICAgICAgICAgICAgaGlzdG9yeTogJ0hpc3RvcnknLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG5cclxuICAgIHBsYXllclNlbGVjdGlvbjoge1xyXG4gICAgICAgIGhlYWRlcjogJ1BsYXllciBzZWxlY3Rpb24nLFxyXG4gICAgICAgIHNlYXJjaDogJ3NlYXJjaCBmb3IgcGxheWVyJyxcclxuICAgIH0sXHJcbiAgICBhbGxpYW5jZVNlbGVjdGlvbjoge1xyXG4gICAgICAgIGhlYWRlcjogJ0FsbGlhbmNlIHNlbGVjdGlvbicsXHJcbiAgICAgICAgc2VhcmNoOiAnc2VhcmNoIGZvciBhbGxpYW5jZScsXHJcbiAgICB9LFxyXG5cclxuICAgIGhpZ2hzY29yZVRhYnM6IHtcclxuICAgICAgICB0b3RhbDogJ1RvdGFsJyxcclxuICAgICAgICBlY29ub215OiAnRWNvbm9teScsXHJcbiAgICAgICAgcmVzZWFyY2g6ICdSZXNlYXJjaCcsXHJcbiAgICAgICAgbWlsaXRhcnk6ICdNaWxpdGFyeScsXHJcbiAgICAgICAgbWlsaXRhcnlCdWlsdDogJ01pbGl0YXJ5IGJ1aWx0JyxcclxuICAgICAgICBtaWxpdGFyeURlc3Ryb3llZDogJ01pbGl0YXJ5IGRlc3Ryb3llZCcsXHJcbiAgICAgICAgbWlsaXRhcnlMb3N0OiAnTWlsaXRhcnkgbG9zdCcsXHJcbiAgICAgICAgaG9ub3I6ICdIb25vcicsXHJcbiAgICAgICAgbnVtYmVyT2ZTaGlwczogJ051bWJlciBvZiBzaGlwcycsXHJcbiAgICAgICAgbGlmZWZvcm06ICdMaWZlZm9ybScsXHJcbiAgICAgICAgbGlmZWZvcm1EaXNjb3ZlcmllczogJ0xpZmVmb3JtIGRpc2NvdmVyaWVzJyxcclxuICAgICAgICBsaWZlZm9ybUVjb25vbXk6ICdMaWZlZm9ybSBlY29ub215JyxcclxuICAgICAgICBsaWZlZm9ybVRlY2hub2xvZ3k6ICdMaWZlZm9ybSB0ZWNobm9sb2d5JyxcclxuICAgIH0sXHJcbiAgICBoaXN0b3J5VGFiczoge1xyXG4gICAgICAgIHN0YXR1czogJ1N0YXR1cycsXHJcbiAgICAgICAgbmlja25hbWVzOiAnTmlja25hbWVzJyxcclxuICAgICAgICBhbGxpYW5jZXM6ICdBbGxpYW5jZXMnLFxyXG4gICAgICAgIHBsYW5ldEFuZE1vb25zOiAnUGxhbmV0cyAmIE1vb25zJyxcclxuXHJcbiAgICAgICAgdGFnczogJ1RhZ3MnLFxyXG4gICAgICAgIG5hbWVzOiAnTmFtZXMnLFxyXG4gICAgICAgIG1lbWJlcnM6ICdNZW1iZXJzJyxcclxuICAgIH0sXHJcblxyXG4gICAgbm9BbGxpYW5jZTogJ25vIGFsbGlhbmNlJyxcclxuICAgIHRvZGF5OiAndG9kYXknLFxyXG4gICAgbmFtZTogJ05hbWUnLFxyXG4gICAgdGFnOiAnVGFnJyxcclxuICAgIG1lbWJlcnM6ICdNZW1iZXJzJyxcclxuICAgIGFsbGlhbmNlOiAnQWxsaWFuY2UnLFxyXG4gICAgZnJvbTogJ0Zyb20nLFxyXG4gICAgdW50aWw6ICdVbnRpbCcsXHJcblxyXG4gICAgc3RhdHVzOiB7XHJcbiAgICAgICAgYWN0aXZlOiAnQWN0aXZlJyxcclxuICAgICAgICB2YWNhdGlvbjogJ1ZhY2F0aW9uIE1vZGUnLFxyXG4gICAgICAgIGluYWN0aXZlOiAnSW5hY3RpdmUgKD49IDcgZGF5cyknLFxyXG4gICAgICAgIGluYWN0aXZlTG9uZzogJ0luYWN0aXZlICg+PSAyOCBkYXlzKScsXHJcbiAgICAgICAgYmFubmVkOiAnQmFubmVkJyxcclxuICAgICAgICBvdXRsYXc6ICdPdXRsYXcnLFxyXG4gICAgICAgIGRlbGV0ZWQ6ICdEZWxldGVkJyxcclxuICAgICAgICBhZG1pbjogJ0FkbWluJyxcclxuICAgIH0sXHJcblxyXG4gICAgbG9hZGluZ1Rha2luZ0xvbmc6ICdMb2FkaW5nIHRoZSBkYXRhIGlzIHRha2luZyBsb25nZXIgdGhhbiBleHBlY3RlZC4gVGhlIGRhdGFiYXNlIGlzIHByb2JhYmx5IHVwZGF0aW5nIHJpZ2h0IG5vdywgc28gcGxlYXNlIGJlIHBhdGllbnQgb3IgdHJ5IGFnYWluIGxhdGVyLicsXHJcbn07IiwiaW1wb3J0IHsgTm90aWZpY2F0aW9uVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGVuOiBOb3RpZmljYXRpb25UcmFuc2xhdGlvbnMgPSB7XHJcbiAgICBjb21iYXRUcmFja2luZzoge1xyXG4gICAgICAgIHRpdGxlOiAodmFsdWU6IHN0cmluZykgPT5cclxuICAgICAgICAgICAgdmFsdWUgPT0gJzEnXHJcbiAgICAgICAgICAgICAgICA/IGAke3ZhbHVlfSBuZXcgY29tYmF0IHJlcG9ydCB0cmFja2VkYFxyXG4gICAgICAgICAgICAgICAgOiBgJHt2YWx1ZX0gbmV3IGNvbWJhdCByZXBvcnRzIHRyYWNrZWRgLFxyXG4gICAgICAgIG1lc3NhZ2U6ICh2YWx1ZTogc3RyaW5nKSA9PlxyXG4gICAgICAgICAgICB2YWx1ZSA9PSAnMSdcclxuICAgICAgICAgICAgICAgID8gYCR7dmFsdWV9IG5ldyBjb21iYXQgcmVwb3J0IGhhcyBiZWVuIHRyYWNrZWQuYFxyXG4gICAgICAgICAgICAgICAgOiBgJHt2YWx1ZX0gbmV3IGNvbWJhdCByZXBvcnRzIGhhdmUgYmVlbiB0cmFja2VkLmAsXHJcbiAgICB9LFxyXG4gICAgZGVicmlzRmllbGRSZXBvcnRUcmFja2luZzoge1xyXG4gICAgICAgIHRpdGxlOiAodmFsdWU6IHN0cmluZykgPT5cclxuICAgICAgICAgICAgdmFsdWUgPT0gJzEnXHJcbiAgICAgICAgICAgICAgICA/IGAke3ZhbHVlfSBuZXcgZGVicmlzIGZpZWxkIHJlcG9ydCB0cmFja2VkYFxyXG4gICAgICAgICAgICAgICAgOiBgJHt2YWx1ZX0gbmV3IGRlYnJpcyBmaWVsZCByZXBvcnRzIHRyYWNrZWRgLFxyXG4gICAgICAgIG1lc3NhZ2U6ICh2YWx1ZTogc3RyaW5nKSA9PlxyXG4gICAgICAgICAgICB2YWx1ZSA9PSAnMSdcclxuICAgICAgICAgICAgICAgID8gYCR7dmFsdWV9IG5ldyBkZWJyaXMgZmllbGQgcmVwb3J0IGhhcyBiZWVuIHRyYWNrZWQuYFxyXG4gICAgICAgICAgICAgICAgOiBgJHt2YWx1ZX0gbmV3IGRlYnJpcyBmaWVsZCByZXBvcnRzIGhhdmUgYmVlbiB0cmFja2VkLmAsXHJcbiAgICB9LFxyXG4gICAgZXhwZWRpdGlvblRyYWNraW5nOiB7XHJcbiAgICAgICAgZmxlZXRMb3N0OiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAodmFsdWU6IHN0cmluZykgPT5cclxuICAgICAgICAgICAgICAgIHZhbHVlID09ICcxJ1xyXG4gICAgICAgICAgICAgICAgICAgID8gYCR7dmFsdWV9IGxvc3QgZmxlZXRgXHJcbiAgICAgICAgICAgICAgICAgICAgOiBgJHt2YWx1ZX0gbG9zdCBmbGVldGAsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6ICh2YWx1ZTogc3RyaW5nKSA9PlxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPT0gJzEnXHJcbiAgICAgICAgICAgICAgICAgICAgPyBgJHt2YWx1ZX0gZmxlZXQgZGlkIG5vdCByZXR1cm4gZnJvbSBpdHMgZXhwZWRpdGlvbi5gXHJcbiAgICAgICAgICAgICAgICAgICAgOiBgJHt2YWx1ZX0gZmxlZXRzIGRpZCBub3QgcmV0dXJuIGZyb20gdGhlaXIgZXhwZWRpdGlvbnMuYCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlc3VsdDoge1xyXG4gICAgICAgICAgICB0aXRsZTogKHZhbHVlOiBzdHJpbmcpID0+XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9PSAnMSdcclxuICAgICAgICAgICAgICAgICAgICA/IGAke3ZhbHVlfSBuZXcgZXhwZWRpdGlvbiB0cmFja2VkYFxyXG4gICAgICAgICAgICAgICAgICAgIDogYCR7dmFsdWV9IG5ldyBleHBlZGl0aW9ucyB0cmFja2VkYCxcclxuICAgICAgICAgICAgc3VtbWFyeTogJ1N1bW1hcnkgb2YgZmluZGluZ3MnLFxyXG4gICAgICAgICAgICBldmVudHM6ICdFeHBlZGl0aW9uIGV2ZW50cycsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBsaWZlZm9ybURpc2NvdmVyeVRyYWNraW5nOiB7XHJcbiAgICAgICAgdGl0bGU6ICh2YWx1ZTogc3RyaW5nKSA9PlxyXG4gICAgICAgICAgICB2YWx1ZSA9PSAnMSdcclxuICAgICAgICAgICAgICAgID8gYCR7dmFsdWV9IG5ldyBsaWZlZm9ybSBkaXNjb3ZlcnkgbWlzc2lvbiB0cmFja2VkYFxyXG4gICAgICAgICAgICAgICAgOiBgJHt2YWx1ZX0gbmV3IGxpZmVmb3JtIGRpc2NvdmVyeSBtaXNzaW9ucyB0cmFja2VkYCxcclxuICAgICAgICBtZXNzYWdlOiAodmFsdWU6IHN0cmluZykgPT4gXHJcbiAgICAgICAgdmFsdWUgPT0gJzEnXHJcbiAgICAgICAgICAgID8gYCR7dmFsdWV9IG5ldyBsaWZlZm9ybSBkaXNjb3ZlcnkgbWlzc2lvbiBoYXMgYmVlbiB0cmFja2VkLmBcclxuICAgICAgICAgICAgOiBgJHt2YWx1ZX0gbmV3IGxpZmVmb3JtIGRpc2NvdmVyeSBtaXNzaW9ucyBoYXZlIGJlZW4gdHJhY2tlZC5gLFxyXG4gICAgfSxcclxuXHJcbiAgICBtZXNzYWdlVHJhY2tpbmdFcnJvcjoge1xyXG4gICAgICAgIHRpdGxlOiAodmFsdWU6IHN0cmluZykgPT5cclxuICAgICAgICAgICAgdmFsdWUgPT0gJzEnXHJcbiAgICAgICAgICAgICAgICA/IGBGYWlsZWQgdG8gcHJvY2VzcyAke3ZhbHVlfSBtZXNzYWdlYFxyXG4gICAgICAgICAgICAgICAgOiBgRmFpbGVkIHRvIHByb2Nlc3MgJHt2YWx1ZX0gbWVzc2FnZXNgLFxyXG4gICAgICAgIG1lc3NhZ2U6ICh2YWx1ZTogc3RyaW5nKSA9PlxyXG4gICAgICAgICAgICB2YWx1ZSA9PSAnMSdcclxuICAgICAgICAgICAgICAgID8gYCR7dmFsdWV9IG1lc3NhZ2UgY2F1c2VkIGFuIGVycm9yIGFuZCBoYXMgbm90IGJlZW4gdHJhY2tlZC4gVGhlIGNhdXNpbmcgbWVzc2FnZSBoYXMgYmVlbiBtYXJrZWQgaW4gcmVkLiBQbGVhc2UgY29udGFjdCB0aGUgZGV2ZWxvcGVyLmBcclxuICAgICAgICAgICAgICAgIDogYCR7dmFsdWV9IG1lc3NhZ2VzIGNhdXNlZCBhbiBlcnJvciBhbmQgaGF2ZSBub3QgYmVlbiB0cmFja2VkLiBUaGUgY2F1c2luZyBtZXNzYWdlcyBoYXZlIGJlZW4gbWFya2VkIGluIHJlZC4gUGxlYXNlIGNvbnRhY3QgdGhlIGRldmVsb3Blci5gLFxyXG4gICAgfSxcclxufTsiLCJpbXBvcnQgeyBUb29sc1RyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBlbjogVG9vbHNUcmFuc2xhdGlvbnMgPSB7XHJcbiAgICBzaWduYXR1cmVHZW5lcmF0b3I6IHtcclxuICAgICAgICBoZWFkZXI6ICdTaWduYXR1cmUgR2VuZXJhdG9yJyxcclxuICAgICAgICBcclxuICAgICAgICBhdmVyYWdlUGVySG91cjogJ+KMgC9ob3VyJyxcclxuICAgICAgICB0b3RhbFBlckhvdXI6ICdwZXIgaG91cicsXHJcbiAgICAgICAgdG90YWxQZXJEYXk6ICdwZXIgZGF5JyxcclxuICAgICAgICB0b3RhbFBlcldlZWs6ICdwZXIgd2VlaycsXHJcbiAgICAgICAgcHJvZHVjdGlvbjogJ1Byb2R1Y3Rpb24nLFxyXG5cclxuICAgICAgICBleHBlZGl0aW9uczogJ0V4cGVkaXRpb25zJyxcclxuICAgICAgICBsaWZlZm9ybURpc2NvdmVyaWVzOiAnTEYgTWlzc2lvbnMnLFxyXG4gICAgICAgIGNvbWJhdHM6ICdDb21iYXRzJyxcclxuICAgICAgICBkZWJyaXNGaWVsZFJlcG9ydHM6ICdIYXJ2ZXN0ZWQgREZzJyxcclxuICAgIH0sXHJcbiAgICBzY3JhcHlhcmRNZXJjaGFudDoge1xyXG4gICAgICAgIGhlYWRlcjogJ1NjcmFweWFyZCBNZXJjaGFudCcsXHJcbiAgICAgICAgcGVyY2VudGFnZTogJyUgYXQgdGhlIHNjcmFweWFyZCBtZXJjaGFudCcsXHJcbiAgICAgICAgY291bnQ6ICdDb3VudCcsXHJcbiAgICB9LFxyXG59OyIsImltcG9ydCB7IEV4Y2VsRXhwb3J0VHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGVuOiBFeGNlbEV4cG9ydFRyYW5zbGF0aW9ucyA9IHtcclxuICAgIGhlYWRlcjogJ0V4Y2VsIEV4cG9ydCcsXHJcbiAgICBjaG9vc2VCZWxvd01lc3NhZ2U6ICdDaG9vc2UgYmVsb3cgd2hpY2ggZGF0YSB5b3Ugd2FudCB0byBpbmNsdWRlIGluIHRoZSBleHBvcnQ6JyxcclxuICAgIGdyb3Vwczoge1xyXG4gICAgICAgIGV4cGVkaXRpb25zOiB7XHJcbiAgICAgICAgICAgIGhlYWRlcjogJ0V4cGVkaXRpb25zJyxcclxuICAgICAgICAgICAgcmF3RGF0YTogJ1JhdyBkYXRhIChldmVyeSBzaW5nbGUgdHJhY2tlZCBleHBlZGl0aW9uKScsXHJcbiAgICAgICAgICAgIGRhaWx5T3ZlcnZpZXc6ICdPdmVydmlldyBvZiByZXN1bHRzIHBlciBkYXknLFxyXG4gICAgICAgICAgICBkYWlseURlcGxldGlvbjogJ092ZXJ2aWV3IG9mIHN5c3RlbSBkZXBsZXRpb24gcGVyIGRheScsXHJcbiAgICAgICAgICAgIGRhaWx5UmVzb3VyY2VzOiAnUmVzb3VyY2UgZmluZGluZ3MgcGVyIGRheScsXHJcbiAgICAgICAgICAgIGRhaWx5UmVzb3VyY2VTaXplczogJ1NpemVzIG9mIHJlc291cmNlIGZpbmRpbmdzIHBlciBkYXknLFxyXG4gICAgICAgICAgICBkYWlseVNoaXBzOiAnU2hpcCBmaW5kaW5ncyBwZXIgZGF5JyxcclxuICAgICAgICAgICAgZGFpbHlTaGlwU2l6ZXM6ICdTaXplcyBvZiBzaGlwIGZpbmRpbmdzIHBlciBkYXknLFxyXG4gICAgICAgICAgICBkYWlseURhcmtNYXR0ZXI6ICdEYXJrIG1hdHRlciBmaW5kaW5ncyBwZXIgZGF5JyxcclxuICAgICAgICAgICAgZGFpbHlEYXJrTWF0dGVyU2l6ZXM6ICdTaXplcyBvZiBkYXJrIG1hdHRlciBmaW5kaW5ncyBwZXIgZGF5JyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbWJhdHM6IHtcclxuICAgICAgICAgICAgaGVhZGVyOiAnQ29tYmF0cycsXHJcbiAgICAgICAgICAgIHJhd0RhdGE6ICdSYXcgZGF0YSAoZXZlcnkgc2luZ2xlIHRyYWNrZWQgY29tYmF0IHJlc3VsdCknLFxyXG4gICAgICAgICAgICBkYWlseVJlc3VsdHM6ICdDb21iYXQgcmVzdWx0cyBwZXIgZGF5JyxcclxuICAgICAgICAgICAgZGFpbHlMb290OiAnTG9vdCBiYWxhbmNlIHBlciBkYXknLFxyXG4gICAgICAgICAgICBkYWlseUxvc3RTaGlwczogJ0xvc3Qgc2hpcHMgcGVyIGRheScsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZWJyaXNGaWVsZHM6IHtcclxuICAgICAgICAgICAgaGVhZGVyOiAnRGVicmlzIEZpZWxkcycsXHJcbiAgICAgICAgICAgIHJhd0RhdGE6ICdSYXcgZGF0YSAoZXZlcnkgc2luZ2xlIHRyYWNrZWQgaGFydmVzdCByZXBvcnQpJyxcclxuICAgICAgICAgICAgZGFpbHlSZXNvdXJjZXM6ICdIYXJ2ZXN0ZWQgcmVzb3VyY2VzIHBlciBkYXknLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGlmZWZvcm1EaXNjb3Zlcmllczoge1xyXG4gICAgICAgICAgICBoZWFkZXI6ICdEaXNjb3ZlcnkgTWlzc2lvbnMnLFxyXG4gICAgICAgICAgICByYXdEYXRhOiAnUmF3IGRhdGEgKGV2ZXJ5IHNpbmdsZSB0cmFja2VkIGRpc2NvdmVyeSBtaXNzaW9uKScsXHJcbiAgICAgICAgICAgIGRhaWx5RXhwZXJpZW5jZTogJ0dhaW5lZCBleHBlcmllbmNlIHBlciBkYXknLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgZ2VuZXJhdGVCdXR0b246ICdHZW5lcmF0ZSBFeGNlbCBleHBvcnQnLFxyXG5cclxuICAgIGV4cGVkaXRpb25zOiB7XHJcbiAgICAgICAgcHJlZml4OiAnRVgnLFxyXG5cclxuICAgICAgICBzaGVldHM6IHtcclxuICAgICAgICAgICAgcmF3RGF0YTogJ1JhdyBEYXRhJyxcclxuICAgICAgICAgICAgZGFpbHlEZXBsZXRpb246ICdEYWlseSBTeXN0ZW0gRGVwbGV0aW9uJyxcclxuICAgICAgICAgICAgZGFpbHlSZXN1bHRzOiAnRGFpbHkgUmVzdWx0cycsXHJcbiAgICAgICAgICAgIGRhaWx5UmVzb3VyY2VzOiAnRGFpbHkgUmVzb3VyY2VzJyxcclxuICAgICAgICAgICAgZGFpbHlSZXNvdXJjZXNTaXplOiAnRGFpbHkgUmVzb3VyY2VzIChTaXplKScsXHJcbiAgICAgICAgICAgIGRhaWx5U2hpcHM6ICdEYWlseSBTaGlwcycsXHJcbiAgICAgICAgICAgIGRhaWx5U2hpcHNTaXplOiAnRGFpbHkgU2hpcHMgKFNpemUpJyxcclxuICAgICAgICAgICAgZGFpbHlEYXJrTWF0dGVyOiAnRGFpbHkgRGFyayBNYXR0ZXInLFxyXG4gICAgICAgICAgICBkYWlseURhcmtNYXR0ZXJTaXplOiAnRGFpbHkgRGFyayBNYXR0ZXIgKFNpemUpJyxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBldmVudFR5cGU6ICdUeXBlJyxcclxuICAgICAgICBldmVudFNpemU6ICdTaXplJyxcclxuICAgICAgICBpdGVtOiAnSXRlbScsXHJcbiAgICB9LFxyXG4gICAgY29tYmF0czoge1xyXG4gICAgICAgIHByZWZpeDogJ0NSJyxcclxuXHJcbiAgICAgICAgc2hlZXRzOiB7XHJcbiAgICAgICAgICAgIHJhd0RhdGE6ICdSYXcgRGF0YScsXHJcbiAgICAgICAgICAgIGRhaWx5UmVzdWx0czogJ0RhaWx5IFJlc3VsdHMnLFxyXG4gICAgICAgICAgICBkYWlseUxvb3Q6ICdEYWlseSBMb290JyxcclxuICAgICAgICAgICAgZGFpbHlMb3N0U2hpcHM6ICdEYWlseSBMb3N0IFNoaXBzJyxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICByZXN1bHQ6ICdDb21iYXQgUmVzdWx0JyxcclxuICAgICAgICBjb29yZGluYXRlczogJ0Nvb3JkaW5hdGVzJyxcclxuICAgICAgICBnYWxheHk6ICdHYWxheHknLFxyXG4gICAgICAgIHN5c3RlbTogJ1N5c3RlbScsXHJcbiAgICAgICAgcG9zaXRpb246ICdQb3NpdGlvbicsXHJcbiAgICAgICAgdGFyZ2V0VHlwZTogJ1RhcmdldCBUeXBlJyxcclxuICAgICAgICBjb21iYXRUeXBlOiAnQ29tYmF0IFR5cGUnLFxyXG4gICAgICAgIGV4cGVkaXRpb25Db21iYXRPcHBvbmVudDogJ0V4cGVkaXRpb24gQ29tYmF0IE9wcG9uZW50JyxcclxuICAgICAgICBsb290OiAnTG9vdCcsXHJcbiAgICAgICAgbG9zdFNoaXBzOiAnTG9zdCBTaGlwcycsXHJcbiAgICAgICAgZGVicmlzRmllbGQ6ICdEZWJyaXMgRmllbGQnLFxyXG4gICAgICAgIG1vb246ICdNb29uJyxcclxuICAgICAgICBwbGFuZXQ6ICdQbGFuZXQnLFxyXG4gICAgICAgIGV4cGVkaXRpb25Db21iYXQ6ICdFeHBlZGl0aW9uIENvbWJhdCcsXHJcbiAgICAgICAgcGxheWVyQ29tYmF0OiAnUGxheWVyIENvbWJhdCcsXHJcbiAgICAgICAgcGlyYXRlczogJ1BpcmF0ZXMnLFxyXG4gICAgICAgIGFsaWVuczogJ0FsaWVucycsXHJcblxyXG4gICAgICAgIGFnYWluc3RQbGF5ZXJzOiAnQWdhaW5zdCBQbGF5ZXJzJyxcclxuICAgICAgICBvbkV4cGVkaXRpb25zOiAnT24gRXhwZWRpdGlvbnMnLFxyXG4gICAgfSxcclxuICAgIGRlYnJpc0ZpZWxkczoge1xyXG4gICAgICAgIHByZWZpeDogJ0RGJyxcclxuXHJcbiAgICAgICAgc2hlZXRzOiB7XHJcbiAgICAgICAgICAgIHJhd0RhdGE6ICdSYXcgRGF0YScsXHJcbiAgICAgICAgICAgIGRhaWx5UmVzb3VyY2VzOiAnRGFpbHkgUmVzb3VyY2VzJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIGxpZmVmb3JtRGlzY292ZXJpZXM6IHtcclxuICAgICAgICBwcmVmaXg6ICdMRicsXHJcblxyXG4gICAgICAgIHNoZWV0czp7XHJcbiAgICAgICAgICAgIHJhd0RhdGE6ICdSYXcgRGF0YScsXHJcbiAgICAgICAgICAgIGRhaWx5RXhwZXJpZW5jZTogJ0RhaWx5IEV4cGVyaWVuY2UnLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHJlc3VsdDogJ0ZpbmRpbmcnLFxyXG4gICAgICAgIGV4cGVyaWVuY2U6ICdFeHBlcmllbmNlJyxcclxuICAgICAgICBsaWZlZm9ybTogJ0xpZmVmb3JtJyxcclxuICAgICAgICBhcnRpZmFjdHM6ICdBcnRpZmFjdHMnLFxyXG4gICAgICAgIGFydGlmYWN0c1NpemU6ICdTaXplJyxcclxuICAgIH0sXHJcbn07IiwiaW1wb3J0IHsgUGxheWVyQ2xhc3NUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZW46IFBsYXllckNsYXNzVHJhbnNsYXRpb25zID0ge1xyXG4gICAgY29sbGVjdG9yOiAnQ29sbGVjdG9yJyxcclxuICAgIGRpc2NvdmVyZXI6ICdEaXNjb3ZlcmVyJyxcclxuICAgIGdlbmVyYWw6ICdHZW5lcmFsJyxcclxuICAgIG5vbmU6ICdub25lJyxcclxufTsiLCJpbXBvcnQgeyBTaGlwVHlwZSB9IGZyb20gXCIuLi8uLi8uLi9tb2RlbHMvb2dhbWUvc2hpcHMvU2hpcFR5cGVcIjtcclxuaW1wb3J0IHsgU2hpcFRyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgcHRfcHQ6IFNoaXBUcmFuc2xhdGlvbnMgPSAge1xyXG4gICAgW1NoaXBUeXBlLmxpZ2h0RmlnaHRlcl06ICdDYcOnYSBMaWdlaXJvJyxcclxuICAgIFtTaGlwVHlwZS5oZWF2eUZpZ2h0ZXJdOiAnQ2HDp2EgUGVzYWRvJyxcclxuICAgIFtTaGlwVHlwZS5jcnVpc2VyXTogJ0NydXphZG9yJyxcclxuICAgIFtTaGlwVHlwZS5iYXR0bGVzaGlwXTogJ05hdmUgZGUgQmF0YWxoYScsXHJcbiAgICBbU2hpcFR5cGUuYmF0dGxlY3J1aXNlcl06ICdJbnRlcmNlcHRvcicsXHJcbiAgICBbU2hpcFR5cGUuYm9tYmVyXTogJ0JvbWJhcmRlaXJvJyxcclxuICAgIFtTaGlwVHlwZS5kZXN0cm95ZXJdOiAnRGVzdHJ1aWRvcicsXHJcbiAgICBbU2hpcFR5cGUuZGVhdGhTdGFyXTogJ0VzdHJlbGEgZGEgTW9ydGUnLFxyXG4gICAgW1NoaXBUeXBlLnJlYXBlcl06ICdDZWlmZWlyYScsXHJcbiAgICBbU2hpcFR5cGUucGF0aGZpbmRlcl06ICdFeHBsb3JhZG9yYScsXHJcbiAgICBbU2hpcFR5cGUuc21hbGxDYXJnb106ICdDYXJndWVpcm8gUGVxdWVubycsXHJcbiAgICBbU2hpcFR5cGUubGFyZ2VDYXJnb106ICdDYXJndWVpcm8gR3JhbmRlJyxcclxuICAgIFtTaGlwVHlwZS5jb2xvbnlTaGlwXTogJ05hdmUgZGUgQ29sb25pemHDp8OjbycsXHJcbiAgICBbU2hpcFR5cGUucmVjeWNsZXJdOiAnUmVjaWNsYWRvcicsXHJcbiAgICBbU2hpcFR5cGUuZXNwaW9uYWdlUHJvYmVdOiAnU29uZGEgZGUgRXNwaW9uYWdlbScsXHJcbiAgICBbU2hpcFR5cGUuc29sYXJTYXRlbGxpdGVdOiAnU2F0w6lsaXRlIFNvbGFyJyxcclxuICAgIFtTaGlwVHlwZS5jcmF3bGVyXTogJ1Jhc3RlamFkb3InLFxyXG59OyIsImltcG9ydCB7IERlZmVuc2VUeXBlIH0gZnJvbSBcIkAvc2hhcmVkL21vZGVscy9vZ2FtZS9kZWZlbnNlcy9EZWZlbnNlVHlwZVwiO1xyXG5pbXBvcnQgeyBEZWZlbnNlVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBwdF9wdDogRGVmZW5zZVRyYW5zbGF0aW9ucyA9ICB7XHJcbiAgICBbRGVmZW5zZVR5cGUucm9ja2V0TGF1bmNoZXJdOiAnTGFuw6dhZG9yIGRlIE1pc3PDqWlzJyxcclxuICAgIFtEZWZlbnNlVHlwZS5saWdodExhc2VyXTogJ0xhc2VyIExpZ2Vpcm8nLFxyXG4gICAgW0RlZmVuc2VUeXBlLmhlYXZ5TGFzZXJdOiAnTGFzZXIgUGVzYWRvJyxcclxuICAgIFtEZWZlbnNlVHlwZS5nYXVzc0Nhbm5vbl06ICdDYW5ow6NvIGRlIEdhdXNzJyxcclxuICAgIFtEZWZlbnNlVHlwZS5pb25DYW5ub25dOiAnQ2FuaMOjbyBkZSBJw7VlcycsXHJcbiAgICBbRGVmZW5zZVR5cGUucGxhc21hVHVycmV0XTogJ0NhbmjDo28gZGUgUGxhc21hJyxcclxuICAgIFtEZWZlbnNlVHlwZS5zbWFsbFNoaWVsZERvbWVdOiAnUGVxdWVubyBFc2N1ZG8gUGxhbmV0w6FyaW8nLFxyXG4gICAgW0RlZmVuc2VUeXBlLmxhcmdlU2hpZWxkRG9tZV06ICdHcmFuZGUgRXNjdWRvIFBsYW5ldMOhcmlvJyxcclxufTtcclxuIiwiaW1wb3J0IHsgQnVpbGRpbmdUeXBlIH0gZnJvbSBcIkAvc2hhcmVkL21vZGVscy9vZ2FtZS9idWlsZGluZ3MvQnVpbGRpbmdUeXBlXCI7XHJcbmltcG9ydCB7IEJ1aWxkaW5nVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBwdF9wdDogQnVpbGRpbmdUcmFuc2xhdGlvbnMgPSB7XHJcbiAgICBbQnVpbGRpbmdUeXBlLm1ldGFsTWluZV06ICdNaW5hIGRlIE1ldGFsJyxcclxuICAgIFtCdWlsZGluZ1R5cGUuY3J5c3RhbE1pbmVdOiAnTWluYSBkZSBDcmlzdGFsJyxcclxuICAgIFtCdWlsZGluZ1R5cGUuZGV1dGVyaXVtU3ludGhlc2l6ZXJdOiAnU2ludGV0aXphZG9yIGRlIERldXTDqXJpbycsXHJcblxyXG4gICAgW0J1aWxkaW5nVHlwZS5tZXRhbFN0b3JhZ2VdOiAnQXJtYXrDqW0gZGUgTWV0YWwnLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5jcnlzdGFsU3RvcmFnZV06ICdBcm1hesOpbSBkZSBDcmlzdGFsJyxcclxuICAgIFtCdWlsZGluZ1R5cGUuZGV1dGVyaXVtVGFua106ICdUYW5xdWUgZGUgRGV1dMOpcmlvJyxcclxuXHJcbiAgICBbQnVpbGRpbmdUeXBlLnNvbGFyUGxhbnRdOiAnUGxhbnRhIGRlIEVuZXJnaWEgU29sYXInLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5mdXNpb25SZWFjdG9yXTogJ1BsYW50YSBkZSBGdXPDo28nLFxyXG5cclxuICAgIFtCdWlsZGluZ1R5cGUucm9ib3RpY3NGYWN0b3J5XTogJ0bDoWJyaWNhIGRlIFJvYm90cycsXHJcbiAgICBbQnVpbGRpbmdUeXBlLnNoaXB5YXJkXTogJ0hhbmdhcicsXHJcbiAgICBbQnVpbGRpbmdUeXBlLnJlc2VhcmNoTGFiXTogJ0xhYm9yYXTDs3JpbyBkZSBQZXNxdWlzYXMnLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5hbGxpYW5jZURlcG90XTogJ0RlcMOzc2l0byBkYSBBbGlhbsOnYScsXHJcbiAgICBbQnVpbGRpbmdUeXBlLm1pc3NpbGVTaWxvXTogJ1NpbG8gZGUgTcOtc3NlaXMnLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5uYW5pdGVGYWN0b3J5XTogJ0bDoWJyaWNhIGRlIE5hbml0ZXMnLFxyXG4gICAgW0J1aWxkaW5nVHlwZS50ZXJyYWZvcm1lcl06ICdUZXJyYS1Gb3JtYWRvcicsXHJcbiAgICBbQnVpbGRpbmdUeXBlLnNwYWNlRG9ja106ICdFc3RhbGVpcm8gRXNwYWNpYWwnLFxyXG5cclxuICAgIFtCdWlsZGluZ1R5cGUubHVuYXJCYXNlXTogJ0Jhc2UgTHVuYXInLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5zZW5zb3JQaGFsYW54XTogJ1NlbnNvciBQaGFsYW54JyxcclxuICAgIFtCdWlsZGluZ1R5cGUuanVtcEdhdGVdOiAnUG9ydGFsIGRlIFNhbHRvIFF1w6JudGljbycsXHJcbn07IiwiaW1wb3J0IHsgUmVzZWFyY2hUeXBlIH0gZnJvbSBcIkAvc2hhcmVkL21vZGVscy9vZ2FtZS9yZXNlYXJjaC9SZXNlYXJjaFR5cGVcIjtcclxuaW1wb3J0IHsgUmVzZWFyY2hUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHB0X3B0OiBSZXNlYXJjaFRyYW5zbGF0aW9ucyA9IHtcclxuICAgIFtSZXNlYXJjaFR5cGUuZW5lcmd5VGVjaG5vbG9neV06ICdUZWNub2xvZ2lhIGRlIEVuZXJnaWEnLFxyXG4gICAgW1Jlc2VhcmNoVHlwZS5sYXNlclRlY2hub2xvZ3ldOiAnVGVjbm9sb2dpYSBMYXNlcicsXHJcbiAgICBbUmVzZWFyY2hUeXBlLmlvblRlY2hub2xvZ3ldOiAnVGVjbm9sb2dpYSBkZSBJw7VlcycsXHJcbiAgICBbUmVzZWFyY2hUeXBlLmh5cGVyc3BhY2VUZWNobm9sb2d5XTogJ1RlY25vbG9naWEgZGUgSGlwZXJlc3Bhw6dvJyxcclxuICAgIFtSZXNlYXJjaFR5cGUucGxhc21hVGVjaG5vbG9neV06ICdUZWNub2xvZ2lhIGRlIFBsYXNtYScsXHJcbiAgICBbUmVzZWFyY2hUeXBlLmVzcGlvbmFnZVRlY2hub2xvZ3ldOiAnVGVjbm9sb2dpYSBkZSBFc3Bpb25hZ2VtJyxcclxuICAgIFtSZXNlYXJjaFR5cGUuY29tcHV0ZXJUZWNobm9sb2d5XTogJ1RlY25vbG9naWEgZGUgQ29tcHV0YWRvcmVzJyxcclxuICAgIFtSZXNlYXJjaFR5cGUuYXN0cm9waHlzaWNzXTogJ0FzdHJvZsOtc2ljYScsXHJcbiAgICBbUmVzZWFyY2hUeXBlLmludGVyZ2FsYWN0aWNSZXNlYXJjaE5ldHdvcmtdOiAnUmVkZSBJbnRlcmdhbMOhY3RpY2EgZGUgUGVzcXVpc2FzJyxcclxuICAgIFtSZXNlYXJjaFR5cGUuZ3Jhdml0b25UZWNobm9sb2d5XTogJ1RlY25vbG9naWEgZGUgR3Jhdml0YcOnw6NvJyxcclxuICAgIFtSZXNlYXJjaFR5cGUuY29tYnVzdGlvbkRyaXZlXTogJ01vdG9yIGRlIENvbWJ1c3TDo28nLFxyXG4gICAgW1Jlc2VhcmNoVHlwZS5pbXB1bHNlRHJpdmVdOiAnTW90b3IgZGUgSW1wdWxzw6NvJyxcclxuICAgIFtSZXNlYXJjaFR5cGUuaHlwZXJzcGFjZURyaXZlXTogJ01vdG9yIFByb3B1bHNvciBkZSBIaXBlcmVzcGHDp28nLFxyXG4gICAgW1Jlc2VhcmNoVHlwZS53ZWFwb25zVGVjaG5vbG9neV06ICdUZWNub2xvZ2lhIGRlIEFybWFzJyxcclxuICAgIFtSZXNlYXJjaFR5cGUuc2hpZWxkaW5nVGVjaG5vbG9neV06ICdUZWNub2xvZ2lhIGRlIEVzY3VkbycsXHJcbiAgICBbUmVzZWFyY2hUeXBlLmFybW9yVGVjaG5vbG9neV06ICdUZWNub2xvZ2lhIGRlIEJsaW5kYWdlbScsXHJcbn07IiwiaW1wb3J0IHsgTGlmZWZvcm1UcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5pbXBvcnQgeyBMaWZlZm9ybVR5cGUgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL29nYW1lL2xpZmVmb3Jtcy9MaWZlZm9ybVR5cGVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBwdF9wdDogTGlmZWZvcm1UcmFuc2xhdGlvbnMgPSB7XHJcbiAgICBbTGlmZWZvcm1UeXBlLm5vbmVdOiAnTmVuaHVtYSBmb3JtYSBkZSB2aWRhJyxcclxuICAgIFtMaWZlZm9ybVR5cGUuaHVtYW5zXTogJ0h1bWFub3MnLFxyXG4gICAgW0xpZmVmb3JtVHlwZS5yb2NrdGFsXTogJ1JvY2tcXCd0YWwnLFxyXG4gICAgW0xpZmVmb3JtVHlwZS5tZWNoYXNdOiAnTWVjaGFzJyxcclxuICAgIFtMaWZlZm9ybVR5cGUua2FlbGVzaF06ICdLYWVsZXNoJyxcclxufTsiLCJpbXBvcnQgeyBMaWZlZm9ybUJ1aWxkaW5nc1RyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcbmltcG9ydCB7IExpZmVmb3JtQnVpbGRpbmdUeXBlIH0gZnJvbSBcIkAvc2hhcmVkL21vZGVscy9vZ2FtZS9saWZlZm9ybXMvTGlmZWZvcm1CdWlsZGluZ1R5cGVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBwdF9wdDogTGlmZWZvcm1CdWlsZGluZ3NUcmFuc2xhdGlvbnMgPSB7XHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUucmVzaWRlbnRpYWxTZWN0b3JdOiAnU2V0b3IgUmVzaWRlbmNpYWwnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmJpb3NwaGVyZUZhcm1dOiAnUXVpbnRhIGRlIEJpb3NmZXJhJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5yZXNlYXJjaENlbnRyZV06ICdDZW50cm8gZGUgUGVzcXVpc2EnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmFjYWRlbXlPZlNjaWVuY2VzXTogJ0FjYWRlbWlhIGRlIENpw6puY2lhcycsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUubmV1cm9DYWxpYnJhdGlvbkNlbnRyZV06ICdDZW50cm8gZGUgTmV1cm9jYWxpYnJhZ2VtJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5oaWdoRW5lcmd5U21lbHRpbmddOiAnRnVuZGnDp8OjbyBkZSBBbHRhIEVuZXJnaWEnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmZvb2RTaWxvXTogJ1NpbG8gZGUgQ29taWRhJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5mdXNpb25Qb3dlcmVkUHJvZHVjdGlvbl06ICdQcm9kdcOnw6NvIGNvbSBSZWN1cnNvIGEgRnVzw6NvJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5za3lzY3JhcGVyXTogJ0FycmFuaGEtY8OpdXMnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmJpb3RlY2hMYWJdOiAnTGFib3JhdMOzcmlvIGRlIEJpb3RlY25vbG9naWEnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLm1ldHJvcG9saXNdOiAnTWV0csOzcG9sZScsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUucGxhbmV0YXJ5U2hpZWxkXTogJ0VzY3VkbyBQbGFuZXTDoXJpbycsXHJcblxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLm1lZGl0YXRpb25FbmNsYXZlXTogJ0VuY2xhdmUgZGUgTWVkaXRhw6fDo28nLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmNyeXN0YWxGYXJtXTogJ1F1aW50YSBkZSBDcmlzdGFsJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5ydW5lVGVjaG5vbG9naXVtXTogJ1RlY25vbG9naXVtIFLDum5pY28nLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLnJ1bmVGb3JnZV06ICdGb3JqYSBSw7puaWNhJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5vcmlrdG9yaXVtXTogJ09yaWt0b3JpdW0nLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLm1hZ21hRm9yZ2VdOiAnRm9yamEgZGUgTWFnbWEnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmRpc3J1cHRpb25DaGFtYmVyXTogJ0PDom1hcmEgZGUgRGlzcnVww6fDo28nLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLm1lZ2FsaXRoXTogJ01lZ8OhbGl0bycsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuY3J5c3RhbFJlZmluZXJ5XTogJ1JlZmluYXJpYSBkZSBDcmlzdGFsJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5kZXV0ZXJpdW1TeW50aGVzaXNlcl06ICdTaW50ZXRpemFkb3IgZGUgRGV1dMOpcmlvJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5taW5lcmFsUmVzZWFyY2hDZW50cmVdOiAnQ2VudHJvIGRlIFBlc3F1aXNhIGRlIE1pbmVyYWlzJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5hZHZhbmNlZFJlY3ljbGluZ1BsYW50XTogJ0NlbnRybyBkZSBSZWNpY2xhZ2VtIEF2YW7Dp2FkYScsXHJcblxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmFzc2VtYmx5TGluZV06ICdMaW5oYSBkZSBNb250YWdlbScsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuZnVzaW9uQ2VsbEZhY3RvcnldOiAnRsOhYnJpY2EgZGUgQ8OpbHVsYXMgZGUgRnVzw6NvJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5yb2JvdGljc1Jlc2VhcmNoQ2VudHJlXTogJ0NlbnRybyBkZSBQZXNxdWlzYSBSb2LDs3RpY2EnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLnVwZGF0ZU5ldHdvcmtdOiAnUmVkZSBkZSBBdHVhbGl6YcOnw6NvJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5xdWFudHVtQ29tcHV0ZXJDZW50cmVdOiAnQ2VudHJvIGRlIENvbXB1dGHDp8OjbyBRdcOibnRpY2EnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmF1dG9tYXRpc2VkQXNzZW1ibHlDZW50cmVdOiAnQ2VudHJvIGRlIE1vbnRhZ2VtIEF1dG9tYXRpemFkbycsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuaGlnaFBlcmZvcm1hbmNlVHJhbnNmb3JtZXJdOiAnVHJhbnNmb3JtYWRvciBkZSBBbHRvIERlc2VtcGVuaG8nLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLm1pY3JvY2hpcEFzc2VtYmx5TGluZV06ICdMaW5oYSBkZSBNb250YWdlbSBkZSBNaWNyb2NoaXBzJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5wcm9kdWN0aW9uQXNzZW1ibHlIYWxsXTogJ1NhbGEgZGUgTW9udGFnZW0gZGEgTGluaGEgZGUgUHJvZHXDp8OjbycsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuaGlnaFBlcmZvcm1hbmNlU3ludGhlc2lzZXJdOiAnU2ludGV0aXphZG9yIGRlIEFsdG8gRGVzZW1wZW5obycsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuY2hpcE1hc3NQcm9kdWN0aW9uXTogJ1Byb2R1w6fDo28gTWFzc2l2YSBkZSBDaGlwcycsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUubmFub1JlcGFpckJvdHNdOiAnTmFub3JvYsO0cyBkZSBSZXBhcmHDp8OjbycsXHJcblxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLnNhbmN0dWFyeV06ICdTYW50dcOhcmlvJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5hbnRpbWF0dGVyQ29uZGVuc2VyXTogJ0NvbmRlbnNhZG9yIGRlIEFudGltYXTDqXJpYScsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUudm9ydGV4Q2hhbWJlcl06ICdDw6JtYXJhIGRvIFbDs3J0aWNlJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5oYWxsc09mUmVhbGlzYXRpb25dOiAnU2Fsw7VlcyBkbyBDb25oZWNpbWVudG8nLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmZvcnVtT2ZUcmFuc2NlbmRlbmNlXTogJ0bDs3J1bSBkYSBUcmFuc2NlbmTDqm5jaWEnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmFudGltYXR0ZXJDb252ZWN0b3JdOiAnQ29udmV0b3IgZGUgQW50aW1hdMOpcmlhJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5jbG9uaW5nTGFib3JhdG9yeV06ICdMYWJvcmF0w7NyaW8gZGUgQ2xvbmFnZW0nLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmNocnlzYWxpc0FjY2VsZXJhdG9yXTogJ0FjZWxlcmFkb3IgZGUgQ3Jpc8OhbGlkYXMnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmJpb01vZGlmaWVyXTogJ0Jpb21vZGlmaWNhZG9yJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5wc2lvbmljTW9kdWxhdG9yXTogJ01vZHVsYWRvciBQc2nDs25pY28nLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLnNoaXBNYW51ZmFjdHVyaW5nSGFsbF06ICdTYWxhIGRlIFByb2R1w6fDo28gZGUgTmF2ZXMnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLnN1cHJhUmVmcmFjdG9yXTogJ1N1cGVyLXJlZnJhdG9yJyxcclxufTsiLCJpbXBvcnQgeyBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlIH0gZnJvbSBcIkAvc2hhcmVkL21vZGVscy9vZ2FtZS9saWZlZm9ybXMvTGlmZWZvcm1UZWNobm9sb2d5VHlwZVwiO1xyXG5pbXBvcnQgeyBMaWZlZm9ybVRlY2hub2xvZ2llc1RyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgcHRfcHQ6IExpZmVmb3JtVGVjaG5vbG9naWVzVHJhbnNsYXRpb25zID0ge1xyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuaW50ZXJnYWxhY3RpY0Vudm95c106ICdFbWlzc8OhcmlvcyBJbnRlcmdhbMOhY3RpY29zJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmhpZ2hQZXJmb3JtYW5jZUV4dHJhY3RvcnNdOiAnRXh0cmF0b3JlcyBkZSBBbHRvIERlc2VtcGVuaG8nLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZnVzaW9uRHJpdmVzXTogJ01vdG9yZXMgZGUgRnVzw6NvJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnN0ZWFsdGhGaWVsZEdlbmVyYXRvcl06ICdHZXJhZG9yZXMgZGUgQ2FtcG8gRnVydGl2bycsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5vcmJpdGFsRGVuXTogJ0VzY29uZGVyaWpvIE9yYml0YWwnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUucmVzZWFyY2hBSV06ICdJQSBkZSBQZXNxdWlzYScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5oaWdoUGVyZm9ybWFuY2VUZXJyYWZvcm1lcl06ICdUZXJyYS1Gb3JtYWRvciBkZSBBbHRvIERlc2VtcGVuaG8nLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZW5oYW5jZWRQcm9kdWN0aW9uVGVjaG5vbG9naWVzXTogJ1RlY25vbG9naWFzIGRlIFByb2R1w6fDo28gTWVsaG9yYWRhcycsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5saWdodEZpZ2h0ZXJNa0lJXTogJ0Nhw6dhIExpZ2Vpcm8gVjInLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuY3J1aXNlck1rSUldOiAnQ3J1emFkb3IgVjInLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuaW1wcm92ZWRMYWJUZWNobm9sb2d5XTogJ1RlY25vbG9naWFzIGRlIExhYm9yYXTDs3JpbyBNZWxob3JhZGFzJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnBsYXNtYVRlcnJhZm9ybWVyXTogJ1RlcnJhLUZvcm1hZG9yIGEgUGxhc21hJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmxvd1RlbXBlcmF0dXJlRHJpdmVzXTogJ01vdG9yZXMgZGUgQmFpeGEgVGVtcGVyYXR1cmEnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuYm9tYmVyTWtJSV06ICdCb21iYXJkZWlybyBWMicsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5kZXN0cm95ZXJNa0lJXTogJ0Rlc3RydWlkb3IgVjInLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuYmF0dGxlY3J1aXNlck1rSUldOiAnSW50ZXJjZXB0b3IgVjInLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUucm9ib3RBc3Npc3RhbnRzXTogJ0Fzc2lzdGVudGVzIFJvYsOzdGljb3MnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuc3VwZXJjb21wdXRlcl06ICdTdXBlcmNvbXB1dGFkb3InLFxyXG5cclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnZvbGNhbmljQmF0dGVyaWVzXTogJ0JhdGVyaWFzIFZ1bGPDom5pY2FzJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmFjb3VzdGljU2Nhbm5pbmddOiAnVmFycmltZW50byBBY8O6c3RpY28nLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuaGlnaEVuZXJneVB1bXBTeXN0ZW1zXTogJ1Npc3RlbWFzIGRlIEJvbWJhIGRlIEFsdG8gRGVzZW1wZW5obycsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5jYXJnb0hvbGRFeHBhbnNpb25fQ2l2aWxpYW5TaGlwc106ICdFeHBhbnPDo28gZGEgQmHDrWEgZGUgQ2FyZ2EgKE5hdmVzIENpdmlzKScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5tYWdtYVBvd2VyZWRQcm9kdWN0aW9uXTogJ1Byb2R1w6fDo28gY29tIFJlY3Vyc28gYSBNYWdtYScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW90aGVybWFsUG93ZXJQbGFudHNdOiAnQ2VudHJhaXMgZGUgRW5lcmdpYSBHZW90w6lybWljYScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5kZXB0aFNvdW5kaW5nXTogJ1NvbmRhIGRlIFByb2Z1bmRpZGFkZScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5pb25DcnlzdGFsRW5oYW5jZW1lbnRfaGVhdnlGaWdodGVyXTogJ01lbGhvcmFtZW50byBkZSBDcmlzdGFsIGRlIEnDtWVzIChDYcOnYSBQZXNhZG8pJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmltcHJvdmVkU3RlbGxhcmF0b3JdOiAnR2VyYWRvciBFc3RlbGFyIE1lbGhvcmFkbycsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5oYXJkZW5lZERpYW1vbmREcmlsbEhlYWRzXTogJ0NhYmXDp2FzIGRlIEJyb2NhIGRlIERpYW1hbnRlIEVuZHVyZWNpZG8nLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuc2Vpc21pY01pbmluZ1RlY2hub2xvZ3ldOiAnVGVjbm9sb2dpYSBkZSBFeHRyYcOnw6NvIFPDrXNtaWNhJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm1hZ21hUG93ZXJlZFB1bXBTeXN0ZW1zXTogJ1Npc3RlbWFzIGRlIEJvbWJhIGNvbSBSZWN1cnNvIGEgTWFnbWEnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuaW9uQ3J5c3RhbE1vZHVsZXNdOiAnTcOzZHVsb3MgZGUgQ3Jpc3RhaXMgZGUgScO1ZXMnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUub3B0aW1pc2VkU2lsb0NvbnN0cnVjdGlvbk1ldGhvZF06ICdNw6l0b2RvIE90aW1pemFkbyBkZSBDb25zdHJ1w6fDo28gZGUgU2lsb3MnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZGlhbW9uZEVuZXJneVRyYW5zbWl0dGVyXTogJ1RyYW5zbWlzc29yIGRlIEVuZXJnaWEgZGUgRGlhbWFudGUnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUub2JzaWRpYW5TaGllbGRSZWluZm9yY2VtZW50XTogJ0VzY3VkbyBSZWZvcsOnYWRvIGNvbSBPYnNpZGlhbmEnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUucnVuZVNoaWVsZHNdOiAnRXNjdWRvcyBSw7puaWNvcycsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5yb2NrdGFsQ29sbGVjdG9yRW5oYW5jZW1lbnRdOiAnTWVsaG9yYW1lbnRvIGRlIENvbGVjaW9uYWRvciBkb3MgUm9ja+KAmXRhbCcsXHJcblxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuY2F0YWx5c2VyVGVjaG5vbG9neV06ICdUZWNub2xvZ2lhIGRlIENhdGFsaXNhZG9yJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnBsYXNtYURyaXZlXTogJ01vdG9yIGRlIFBsYXNtYScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5lZmZpY2llbmN5TW9kdWxlXTogJ03Ds2R1bG8gZGUgRWZpY2nDqm5jaWEnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZGVwb3RBSV06ICdJQSBkZSBEZXDDs3NpdG8nLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZ2VuZXJhbE92ZXJoYXVsX2xpZ2h0RmlnaHRlcl06ICdSZW1vZGVsYcOnw6NvIEdlcmFsIChDYcOnYSBMaWdlaXJvKScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5hdXRvbWF0ZWRUcmFuc3BvcnRMaW5lc106ICdMaW5oYXMgZGUgVHJhbnNwb3J0ZSBBdXRvbWF0aXphZGFzJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmltcHJvdmVkRHJvbmVBSV06ICdJQSBkZSBEcm9uZXMgTWVsaG9yYWRhJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmV4cGVyaW1lbnRhbFJlY3ljbGluZ1RlY2hub2xvZ3ldOiAnVGVjbm9sb2dpYSBkZSBSZWNpY2xhZ2VtIEV4cGVyaW1lbnRhbCcsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW5lcmFsT3ZlcmhhdWxfY3J1aXNlcl06ICdSZW1vZGVsYcOnw6NvIEdlcmFsIChDcnV6YWRvciknLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuc2xpbmdzaG90QXV0b3BpbG90XTogJ1BpbG90byBBdXRvbcOhdGljbyBHcmF2w610aWNvJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmhpZ2hUZW1wZXJhdHVyZVN1cGVyY29uZHVjdG9yc106ICdTdXBlcmNvbmR1dG9yZXMgZGUgQWx0YSBUZW1wZXJhdHVyYScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW5lcmFsT3ZlcmhhdWxfYmF0dGxlc2hpcF06ICdSZW1vZGVsYcOnw6NvIEdlcmFsIChOYXZlIGRlIEJhdGFsaGEpJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmFydGlmaWNpYWxTd2FybUludGVsbGlnZW5jZV06ICdJbnRlbGlnw6puY2lhIEFydGlmaWNpYWwgZGUgRW54YW1lJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmdlbmVyYWxPdmVyaGF1bF9iYXR0bGVjcnVpc2VyXTogJ1JlbW9kZWxhw6fDo28gR2VyYWwgKEludGVyY2VwdG9yKScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW5lcmFsT3ZlcmhhdWxfYm9tYmVyXTogJ1JlbW9kZWxhw6fDo28gR2VyYWwgKEJvbWJhcmRlaXJvKScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW5lcmFsT3ZlcmhhdWxfZGVzdHJveWVyXTogJ1JlbW9kZWxhw6fDo28gR2VyYWwgKERlc3RydWlkb3IpJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmV4cGVyaW1lbnRhbFdlYXBvbnNUZWNobm9sb2d5XTogJ1RlY25vbG9naWEgZGUgQXJtYXMgRXhwZXJpbWVudGFsJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm1lY2hhbkdlbmVyYWxFbmhhbmNlbWVudF06ICdNZWxob3JhbWVudG8gZGUgR2VuZXJhbCBkb3MgTWVjaGFzJyxcclxuXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5oZWF0UmVjb3ZlcnldOiAnUmVjdXBlcmHDp8OjbyBkZSBDYWxvcicsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5zdWxwaGlkZVByb2Nlc3NdOiAnUHJvY2Vzc2FtZW50byBkZSBTdWxmdXJldG9zJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnBzaW9uaWNOZXR3b3JrXTogJ1JlZGUgUHNpw7NuaWNhJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnRlbGVraW5ldGljVHJhY3RvckJlYW1dOiAnRmVpeGUgZGUgQ2FwdHVyYSBUZWxlY2luw6l0aWNvJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmVuaGFuY2VkU2Vuc29yVGVjaG5vbG9neV06ICdUZWNub2xvZ2lhcyBkZSBTZW5zb3JlcyBNZWxob3JhZGFzJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm5ldXJvbW9kYWxDb21wcmVzc29yXTogJ0NvbXByZXNzb3IgTmV1cm9tb2R1bGFyJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm5ldXJvSW50ZXJmYWNlXTogJ05ldXJvaW50ZXJmYWNlJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmludGVycGxhbmV0YXJ5QW5hbHlzaXNOZXR3b3JrXTogJ1JlZGUgZGUgQW7DoWxpc2UgSW50ZXJwbGFuZXTDoXJpYScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5vdmVyY2xvY2tpbmdfaGVhdnlGaWdodGVyXTogJ092ZXJjbG9ja2luZyAoQ2HDp2EgUGVzYWRvKScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS50ZWxla2luZXRpY0RyaXZlXTogJ01vdG9yIFRlbGVjaW7DqXRpY28nLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuc2l4dGhTZW5zZV06ICdTZXh0byBTZW50aWRvJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnBzeWNob2hhcm1vbmlzZXJdOiAnSGFybW9uaXphZG9yIFBzw61xdWljbycsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5lZmZpY2llbnRTd2FybUludGVsbGlnZW5jZV06ICdJbnRlbGlnw6puY2lhIGRlIEVueGFtZSBFZmljaWVudGUnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUub3ZlcmNsb2NraW5nX2xhcmdlQ2FyZ29dOiAnT3ZlcmNsb2NraW5nIChDYXJndWVpcm8gR3JhbmRlKScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5ncmF2aXRhdGlvblNlbnNvcnNdOiAnU2Vuc29yZXMgZGUgR3Jhdml0YcOnw6NvJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm92ZXJjbG9ja2luZ19iYXR0bGVzaGlwXTogJ092ZXJjbG9ja2luZyAoTmF2ZSBkZSBCYXRhbGhhKScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5wc2lvbmljU2hpZWxkTWF0cml4XTogJ01hdHJpeiBkZSBFc2N1ZG8gUHNpw7NuaWNvJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmthZWxlc2hEaXNjb3ZlcmVyRW5oYW5jZW1lbnRdOiAnTWVsaG9yYW1lbnRvIGRlIERlc2NvYnJpZG9yIGRvcyBLYWVsZXNoJyxcclxufTsiLCJpbXBvcnQgeyBQcmVtaXVtVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBwdF9wdDogUHJlbWl1bVRyYW5zbGF0aW9ucyA9IHtcclxuICAgIGRhcmtNYXR0ZXI6ICdNYXTDqXJpYSBOZWdyYScsXHJcbn07IiwiaW1wb3J0IHsgUmVjdXJzaXZlUGFydGlhbCB9IGZyb20gXCJAL3NoYXJlZC90eXBlcy9SZWN1cnNpdmVQYXJ0aWFsXCI7XHJcbmltcG9ydCB7IFNldHRpbmdzVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHB0X3B0OiBSZWN1cnNpdmVQYXJ0aWFsPFNldHRpbmdzVHJhbnNsYXRpb25zPiA9IHtcclxuICAgIHRhYnM6IHtcclxuICAgICAgICBkYXRlUmFuZ2VzOiAnSW50ZXJ2YWxvIGRlIGRhdGFzJyxcclxuICAgICAgICBjb2xvcnM6ICdDb3JlcycsXHJcbiAgICAgICAgY29tbW9uOiAnQ29tdW0nLFxyXG4gICAgICAgIGltcG9ydEV4cG9ydDogJ0ltcG9ydGFyL0V4cG9ydGFyJyxcclxuICAgICAgICBleHBlZGl0aW9uczogJ0V4cGVkacOnw7VlcycsXHJcbiAgICAgICAgY29tYmF0czogJ0NvbWJhdGVzJyxcclxuICAgICAgICBkZWJyaXNGaWVsZHM6ICdDYW1wb3MgZGUgRGVzdHJvw6dvcycsXHJcbiAgICAgICAgcmVzb3VyY2VCYWxhbmNlOiAnUmVzdW1vIGRlIFJlY3Vyc29zJyxcclxuICAgICAgICB1bml2ZXJzZUhpc3Rvcnk6ICdIaXN0w7NyaWNvIGRvIFVuaXZlcnNvJyxcclxuICAgICAgICBkYW5nZXJab25lOiAnWm9uYSBkZSBQZXJpZ28nLFxyXG4gICAgICAgIGFjY2Vzc2JpbGl0eTogJ0FjZXNzaWJpbGlkYWRlJyxcclxuICAgICAgICBsaW5rQWNjb3VudHM6ICdMaW5rYXIgQ29udGFzJyxcclxuXHJcbiAgICAgICAgbWlncmF0ZU9sZERhdGE6ICdNaWdyYXIgZGFkb3MgYW50aWdvcycsXHJcbiAgICB9LFxyXG4gICAgZGF0ZVJhbmdlczoge1xyXG4gICAgICAgIGRlZmF1bHROYW1lczoge1xyXG4gICAgICAgICAgICB0b2RheTogJ0hvamUnLFxyXG4gICAgICAgICAgICB5ZXN0ZXJkYXk6ICdPbnRlbScsXHJcbiAgICAgICAgICAgIGN1cnJlbnRXZWVrOiAnRXN0YSBzZW1hbmEnLFxyXG4gICAgICAgICAgICBsYXN0V2VlazogJ1NlbWFuYSBwYXNzYWRhJyxcclxuICAgICAgICAgICAgY3VycmVudE1vbnRoOiAnRXN0ZSBtw6pzJyxcclxuICAgICAgICAgICAgbmV3UmFuZ2U6ICdub3ZvIGludGVydmFsbycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzaW5jZTogKGRhdGUpID0+IGBEZXNkZSAke2RhdGV9YCxcclxuICAgICAgICBmaXJzdERheVRlbXBsYXRlOiAnPHByaW1laXJvIGRpYT4nLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgbGFiZWw6ICdMYWJlbCcsXHJcbiAgICAgICAgICAgIHR5cGU6ICdUaXBvJyxcclxuICAgICAgICAgICAgcmFuZ2VTdGFydDogJ0luw61jaW8gZG8gaW50ZXJ2YWxvJyxcclxuICAgICAgICAgICAgcmFuZ2VDb250YWluczogJ0ludGVydmFsbyBjb250ZW0nLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGF5OiAnZGlhJyxcclxuICAgICAgICBkYXlzOiAnZGlhcycsXHJcbiAgICAgICAgZGF5c0FnbzogJ2RpYXMgYXRyw6FzJyxcclxuICAgICAgICB3ZWVrOiAnc2VtYW5hJyxcclxuICAgICAgICB3ZWVrczogJ3NlbWFuYXMnLFxyXG4gICAgICAgIHdlZWtzQWdvOiAnc2VtYW5hcyBhdHLDoXMnLFxyXG4gICAgICAgIG1vbnRoOiAnbcOqcycsXHJcbiAgICAgICAgbW9udGhzOiAnbWVzZXMnLFxyXG4gICAgICAgIG1vbnRoc0FnbzogJ21lc2VzIGF0csOhcycsXHJcbiAgICAgICAgeWVhcjogJ2FubycsXHJcbiAgICAgICAgeWVhcnM6ICdhbm9zJyxcclxuICAgICAgICB5ZWFyc0FnbzogJ2Fub3MgYXRyw6FzJyxcclxuICAgIH0sXHJcbiAgICBjb2xvcnM6IHtcclxuICAgICAgICBjb21iYXRSZXN1bHRzOiAnUmVzdWx0YWRvcyBkbyBjb21iYXRlJyxcclxuICAgICAgICBleHBlZGl0aW9uRXZlbnRzOiAnRXZlbnRvcyBkZSBFeHBlZGnDp8OjbycsXHJcbiAgICAgICAgZXhwZWRpdGlvbkV2ZW50U2l6ZXM6ICdUYW1hbmhvcyBkb3MgZXZlbnRvcyBkZSBFeHBlZGnDp8OjbycsXHJcbiAgICAgICAgZXhwZWRpdGlvbkRlcGxldGlvbkxldmVsczogJ0Rlc2dhc3RlIGRvIFNpc3RlbWEnLFxyXG4gICAgICAgIGxpZmVmb3JtRGlzY292ZXJpZXM6ICdEZXNjb2JlcnRhcyBkZSBGb3JtYXMgZGUgVmlkYScsXHJcbiAgICAgICAgbGlmZWZvcm1zOiAnRm9ybWFzIGRlIFZpZGEnLFxyXG4gICAgICAgIHJlc291cmNlczogJ1JlY3Vyc29zJyxcclxuICAgICAgICBzaGlwczogJ05hdmVzJyxcclxuICAgIH0sXHJcbiAgICBjb21tb246IHtcclxuICAgICAgICBjb252ZXJzaW9uUmF0ZXM6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICdUYXhhcyBkZSBjb252ZXJzw6NvJyxcclxuICAgICAgICAgICAgbXN1TG9uZzogJ0NvbnZlcnRlciBwYXJhIE1ldGFsJyxcclxuICAgICAgICAgICAgZHN1TG9uZzogJ0NvbnZlcnRlciBwYXJhIERldXTDqXJpbycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbnNpb25MYW5ndWFnZTogJ0lkaW9tYSAoZGVudHJvIGRvIE9HYW1lIFRyYWNrZXIpJyxcclxuICAgICAgICBleHRlbnNpb25MYW5ndWFnZUZhbGxiYWNrSGludDogJ1RleHRvcyBzZXLDo28gbW9zdHJhZG9zIGVtIEluZ2zDqnMgc2UgbsOjbyBleGlzdGlyIHRyYWR1w6fDo28gcGFyYSBvIGlkaW9tYSBzZWxlY2lvbmFkby4nLFxyXG5cclxuICAgICAgICBzZXJ2ZXJTZXR0aW5nczoge1xyXG4gICAgICAgICAgICB0aXRsZTogJ0RhZG9zIGRvIFNlcnZpZG9yJyxcclxuICAgICAgICAgICAgbGFzdFVwZGF0ZTogJ8OabHRpbWEgQWN0dWFsaXphw6fDo28nLFxyXG4gICAgICAgICAgICBmb3JjZVVwZGF0ZTogJ0FjdHVhbGl6YXIgZGFkb3MgZG8gc2Vydmlkb3InLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgZXhwZWRpdGlvbnM6IHtcclxuICAgICAgICByZXNvdXJjZVVuaXRGYWN0b3JzT2ZTaGlwRm91bmRPbkV4cGVkaXRpb25zOiAnRmFjdG9yZXMgZGUgdW5pZGFkZXMgZGUgcmVjdXJzb3MgZGFzIG5hdmVzIGVuY29udHJhZGFzIGVtIGV4cGVkacOnw7VlcycsXHJcbiAgICB9LFxyXG4gICAgY29tYmF0czoge1xyXG4gICAgICAgIHJlc291cmNlVW5pdEZhY3RvcnNPZkxvc3RTaGlwczogJ0ZhY3RvciBkZSB1bmlkYWRlcyBkZSByZWN1cnNvIGRhcyBuYXZlcyBwZXJkaWRhcyBlbSBjb21iYXRlJyxcclxuICAgICAgICBpZ25vcmVFc3Bpb25hZ2VDb21iYXRzOiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnSWdub3JhciBjb21iYXRlcyBkZSBlc3Bpb25hZ2VtJyxcclxuICAgICAgICAgICAgbGFiZWw6ICdJZ25vcmFyIGNvbWJhdGVzIGRlIGVzcGlvbmFnZW0gcGFyYSBhIG1vbml0b3JpemHDp8OjbyBkb3MgY29tYmF0ZXMnLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgcmVzb3VyY2VCYWxhbmNlOiB7XHJcbiAgICAgICAgZGV0YWlsZWRSZXNvdXJjZUJhbGFuY2U6IHtcclxuICAgICAgICAgICAgaGVhZGVyOiAnUmVzdW1vIGRldGFsaGFkbyBkb3MgUmVjdXJzb3MnLFxyXG4gICAgICAgICAgICBjaGVja2JveExhYmVsOiAnTW9zdHJhciByZXN1bW8gZGV0YWxoYWRvIGRvcyByZWN1cnNvcycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbmNsdWRlU2hpcHNGb3VuZE9uRXhwZWRpdGlvbnM6IHtcclxuICAgICAgICAgICAgaGVhZGVyOiAnTmF2ZXMgZW5jb250cmFkYXMgZW0gZXhwZWRpw6fDtWVzJyxcclxuICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ0luY2x1aXIgb3MgcmVjdXJzb3MgZGFzIG5hdmVzIGVuY29udHJhZGFzIGVtIGV4cGVkacOnw7VlcyBubyBSZXN1bW8gZG9zIFJlY3Vyc29zJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGluY2x1ZGVTaGlwc0xvc3RJbkNvbWJhdHM6IHtcclxuICAgICAgICAgICAgaGVhZGVyOiAnTmF2ZXMgZGVzdHJ1aWRhcyBlbSBjb21iYXRlcycsXHJcbiAgICAgICAgICAgIGNoZWNrYm94TGFiZWw6ICdJbmNsdWlyIG9zIHJlY3Vyc29zIGRhcyBuYXZlcyBwZXJkaWRhcyBlbSBjb21iYXRlIG5vIFJlc3VtbyBkb3MgUmVjdXJzb3MnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5jbHVkZUxvc3RMb290UmVzb3VyY2VzOiB7XHJcbiAgICAgICAgICAgIGhlYWRlcjogJ1JlY3Vyc29zIHBlcmRpZG9zIGVtIGNvbWJhdGVzJyxcclxuICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ0luY2x1aXIgb3MgcmVjdXJzb3MgcGVyZGlkb3MgZW0gY29tYmF0ZSBubyBSZXN1bW8gZG9zIFJlY3Vyc29zJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIHNob3dDb252ZXJ0ZWRVbml0c0luVGFibGVzOiB7XHJcbiAgICAgICAgdGl0bGU6ICdNU1UvRFNVIGVtIHRhYmVsYXMnLFxyXG4gICAgICAgIGxhYmVsOiAnTW9zdHJhciB2YWxvcmVzIE1TVS9EU1UgY29udmVydGlkb3MgbmFzIHRhYmVsYXMnLFxyXG5cclxuICAgICAgICBpbmZvQW1vcnRpemF0aW9uOiAnVGVtcG8gZGUgYW1vcnRpemHDp8OjbywgYWluZGEgYXNzaW0sIHNlcsOhIGNhbGN1bGFkbyBjdXNhbmRvIG8gY3VzdG8gZSBwcm9kdcOnw6NvIGVtIE1TVS9EU1UnLFxyXG4gICAgfSxcclxuXHJcbiAgICByZXNldDogJ1Jlc3RhdXJhciBkZWZpbmnDp8O1ZXMnLFxyXG4gICAgc2V0RGVmYXVsdFJvdXRlOiAnTWFyY2FyIGNvbW8gZGVmYXVsdCcsXHJcbiAgICBzZXREZWZhdWx0U3ViUm91dGU6ICdNYXJjYXIgY29tbyBkZWZhdWx0IHBhcmEgZXN0YSDDoXJlYScsXHJcblxyXG4gICAgZGFuZ2VyWm9uZToge1xyXG4gICAgICAgIGRvWW91V2FudFRvQ29udGludWU6ICdURU5TIEEgQ0VSVEVaQSBRVUUgUVVFUkVTIENPTlRJTlVBUj8nLFxyXG5cclxuICAgICAgICBkZWxldGVFeHBlZGl0aW9uczoge1xyXG4gICAgICAgICAgICBidXR0b246IChhY2NvdW50OiBzdHJpbmcpID0+IGBBcGFnYXIgdG9kYXMgYXMgZXhwZWRpw6fDtWVzIG1vbml0b3JpemFkYXMgbmEgY29udGEgYWN0dWFsbWVudGUgc2VsZWNpb25hZGEgKCR7YWNjb3VudH0pYCxcclxuICAgICAgICAgICAgY29uZmlybWF0aW9uVGV4dDogKGFjY291bnQ6IHN0cmluZywgY291bnQ6IHN0cmluZykgPT4gYFNlIGNvbmZpcm1hcmVzLCB0b2RhcyBhcyAke2NvdW50fSBleHBlZGnDp8O1ZXMgbW9uaXRvcml6YWRhcyBzZXLDo28gYXBhZ2FkYXMgZGEgY29udGEgYWN0dWFsbWVudGUgc2VsZWNpb25hZGEgKCR7YWNjb3VudH0pLmAsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZWxldGVDb21iYXRzOiB7XHJcbiAgICAgICAgICAgIGJ1dHRvbjogKGFjY291bnQ6IHN0cmluZykgPT4gYEFwYWdhciB0b2RvcyBvcyBjb21iYXRlcyBtb25pdG9yaXphZG9zIG5hIGNvbnRhIGFjdHVhbG1lbnRlIHNlbGVjaW9uYWRhICgke2FjY291bnR9KWAsXHJcbiAgICAgICAgICAgIGNvbmZpcm1hdGlvblRleHQ6IChhY2NvdW50OiBzdHJpbmcsIGNvdW50OiBzdHJpbmcpID0+IGBTZSBjb25maXJtYXJlcywgdG9kb3Mgb3MgJHtjb3VudH0gY29tYmF0ZXMgbW9uaXRvcml6YWRvcyBzZXLDo28gYXBhZ2Fkb3MgZGEgY29udGEgYWN0dWFsbWVudGUgc2VsZWNpb25kYSAoJHthY2NvdW50fSkuYCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlbGV0ZURlYnJpc0ZpZWxkUmVwb3J0czoge1xyXG4gICAgICAgICAgICBidXR0b246IChhY2NvdW50OiBzdHJpbmcpID0+IGBBcGFnYXIgdG9kb3Mgb3MgcmVsYXTDs3Jpb3MgZGUgcmVjaWNsYWdlbSBkZSBjYW1wb3MgZGUgZGVzdHJvw6dvcyBtb25pdG9yaXphZG9zIG5hIGNvbnRhIGFjdHVhbG1lbnRlIHNlbGVjaW9uYWRhICgke2FjY291bnR9KWAsXHJcbiAgICAgICAgICAgIGNvbmZpcm1hdGlvblRleHQ6IChhY2NvdW50OiBzdHJpbmcsIGNvdW50OiBzdHJpbmcpID0+IGBTZSBjb25maXJtYXJlcywgdG9kb3Mgb3MgJHtjb3VudH0gcmVsYXTDs3Jpb3MgZGUgcmVjaWNsYWdlbSBkZSBjYW1wb3MgZGUgZGVzdHJvw6dvcyBzZXLDo28gYXBhZ2Fkb3MgZGEgY29udGEgYWN0dWFsbWVudGUgc2VsZWNpb25hZGEgKCR7YWNjb3VudH0pLmAsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZWxldGVBY2NvdW50OiB7XHJcbiAgICAgICAgICAgIGJ1dHRvbjogKGFjY291bnQ6IHN0cmluZykgPT4gYEFwYWdhciB0b2RhIGEgaW5mb3JtYcOnw6NvIGRhIGNvbnRhIGFjdHVhbG1lbnRlIHNlbGVjaW9uYWRhICgke2FjY291bnR9KWAsXHJcbiAgICAgICAgICAgIGNvbmZpcm1hdGlvblRleHQ6IChhY2NvdW50OiBzdHJpbmcpID0+IGBTZSBjb25maXJtYXJlcywgdG9kb3Mgb3MgZGFkb3MgZGEgY29udGEgYWN0dWFsbWVudGUgc2VsZWNpb25hZGEgKCR7YWNjb3VudH0pIHNlcsOjbyBhcGFnYWRvcy5cXG5gXHJcbiAgICAgICAgICAgICAgICArIGBJc3RvIGluY2x1aSBvIGhpc3TDs3JpY28gZG8gdW5pdmVyc28gc2UgbsOjbyBleGlzdGlyIG91dHJhIGNvbnRhIG1vbml0b3JpemFkYSBuZXNzZSB1bml2ZXJzby5gLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGVsZXRlVW5pdmVyc2VIaXN0b3J5OiB7XHJcbiAgICAgICAgICAgIGJ1dHRvbjogKHNlcnZlcjogc3RyaW5nKSA9PiBgQXBhZ2FyIG8gaGlzdMOzcmljbyBkbyB1bml2ZXJzbyBkYSBjb250YSBhY3R1YWxtZW50ZSBzZWxlY2lvbmFkYSAoJHtzZXJ2ZXJ9KWAsXHJcbiAgICAgICAgICAgIGNvbmZpcm1hdGlvblRleHQ6IChzZXJ2ZXI6IHN0cmluZykgPT4gYFNlIGNvbmZpcm1hcmVzLCB0b2RvIG8gaGlzdMOzcmljbyBkbyB1bml2ZXJzbyBkYSBjb250YSBhY3R1YWxtZW50ZSBzZWxlY2lvbmFkYSAoJHtzZXJ2ZXJ9KSBzZXLDoSBhcGFnYWRvLmAsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZWxldGVFdmVyeXRoaW5nOiB7XHJcbiAgICAgICAgICAgIGJ1dHRvbjogJ0FwYWdhciB0b2RvcyBvcyBkYWRvcycsXHJcbiAgICAgICAgICAgIGNvbmZpcm1hdGlvblRleHQxOiBgU2UgY29uZmlybWFyZXMsIHRvZG9zIG9zIGRhZG9zIHNlcsOjbyBhcGFnYWRvcy5cXG5gXHJcbiAgICAgICAgICAgICAgICArICdJc3RvIGluY2x1aSB0byB0b2RvcyBkZSB0b2RhcyBhcyBjb250YXMgaW5jbHVpbmRvIGV4cGVkacOnw7VlcywgY29tYmF0ZXMsIHJlY2ljbGFnZW0gZGUgY2FtcG9zIGRlIGRlc3Ryb8Onb3MsIGhpc3RvcmljbyBkb3MgdW5pdmVyc29zIGUgbWFpcy4nLFxyXG4gICAgICAgICAgICBjb25maXJtYXRpb25UZXh0MjogJ0NvbmZpcm1hIG5vdmFtZW50ZSBxdWUgw6kgcGFyYSBhcGFnYXIgdG9kb3Mgb3MgZGFkb3MuJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuXHJcbiAgICBpbXBvcnRFeHBvcnQ6IHtcclxuICAgICAgICBleHBvcnQ6IHtcclxuICAgICAgICAgICAgaGVhZGVyOiAnRXhwb3J0YXInLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0FxdWkgcG9kZXMgZXhwb3J0YXIgb3MgdGV1cyBkYWRvcy4gSXLDoSBpbmNsdWlyIGRhZG9zIHJlbGV2YW50ZXMgZGUgdG9kYXMgYXMgdHVhcyBjb250YXMgbW9uaXRvcml6YWRhcyBlIG9zIHNldXMgc2Vydmlkb3Jlcy4nLFxyXG4gICAgICAgICAgICBpbmNsdWRlVW5pdmVyc2VIaXN0b3J5OiAnaW5jbHVpciBvIGhpc3RvcmljbyBkbyB1bml2ZXJzbyBubyBleHBvcnQgKGlzdG8gdmFpIGF1bWVudGFyIHNpZ25pZmljYXRpdmFtZW50ZSBvIHRhbWFuaG8gZG8gZmljaGVpcm8gYXNzaW0gY29tbyBkbyB0ZW1wbyBkZSBpbXBvcnRhw6fDo28hKScsXHJcbiAgICAgICAgICAgIGJ1dHRvbjogJ0luaWNpYXIgZXhwb3J0YcOnw6NvJyxcclxuICAgICAgICAgICAgd2FpdDogJ0FndWFyZGEgZW5xdWFudG8gb3MgZGFkb3Mgc8OjbyBwcmVwYXJhZG9zIHBhcmEgYSBleHBvcnRhw6fDo28uLi4nLFxyXG5cclxuICAgICAgICAgICAgZXJyb3JzOiB7XHJcbiAgICAgICAgICAgICAgICB1bmV4cGVjdGVkRXJyb3I6ICdPY29ycmV1IHVtIGVycm8gaW5lc3BlcmFkbyBkdXJhbnRlIGEgZXhwb3J0YcOnw6NvIGRvcyB0ZXVzIGRhZG9zLicsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbXBvcnQ6IHtcclxuICAgICAgICAgICAgaGVhZGVyOiAnSW1wb3J0YXInLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0FxdWkgcG9kZXLDoXMgaW1wb3J0YXIgb3MgdGV1cyBkYWRvcyBhIHBhcnRpciBkZSB1bSBmaWNoZWlyby4gU2VsZWNpb25hIG8gZmljaGVpcm8uJyxcclxuICAgICAgICAgICAgYnV0dG9uOiAnSW5pY2lhciBpbXBvcnRhw6fDo28nLFxyXG4gICAgICAgICAgICB3YWl0OiAnQWd1YXJkYSBlbnF1YW50byBvcyB0ZXVzIGRhZG9zIHPDo28gaW1wb3J0YWRvcy4uLicsXHJcblxyXG4gICAgICAgICAgICBlcnJvcnM6IHtcclxuICAgICAgICAgICAgICAgIGludmFsaWRGb3JtYXQ6ICdPIGZvcm1hdG8gZG8gZmljaGVpcm8gw6kgaW52w6FsaWRvLicsXHJcbiAgICAgICAgICAgICAgICB1bmV4cGVjdGVkRXJyb3I6ICdPY29ycmV1IHVtIGVycm8gaW5lc3BlcmFkbyBkdXJhbnRlIGEgaW1wb3J0YcOnw6NvIGRvcyB0ZXVzIGRhZG9zLicsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW1wb3J0Q2FsbGJhY2tzOiB7XHJcbiAgICAgICAgICAgIGltcG9ydGluZ1NldHRpbmdzOiAnQSBpbXBvcnRhciBhcyB0dWFzIGRlZmluacOnw7VlcycsXHJcbiAgICAgICAgICAgIGltcG9ydGluZ0Jhc2ljRGF0YTogJ0EgaW1wb3J0YXIgYSBjb250YSBkZWZhdWx0IGUgb3MgZGFkb3MgZG8gc2Vydmlkb3InLCAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpbXBvcnRpbmdVbml2ZXJzZUhpc3RvcmllczogKFxyXG4gICAgICAgICAgICAgICAgc2VydmVySW5kZXg6IG51bWJlciwgXHJcbiAgICAgICAgICAgICAgICBzZXJ2ZXJUb3RhbDogbnVtYmVyLCBcclxuICAgICAgICAgICAgICAgIGVudHJ5SW5kZXg6IG51bWJlciwgXHJcbiAgICAgICAgICAgICAgICBlbnRyeVRvdGFsOiBudW1iZXIsXHJcbiAgICAgICAgICAgICkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmFzZU1lc3NhZ2UgPSAnQSBpbXBvcnRhciBoaXN0b3JpY28gZG9zIHVuaXZlcnNvcyc7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke2Jhc2VNZXNzYWdlfSAoc2Vydmlkb3IgJHtzZXJ2ZXJJbmRleCArIDF9LyR7c2VydmVyVG90YWx9LCBlbnRyYWRhICR7ZW50cnlJbmRleCArIDF9LyR7ZW50cnlUb3RhbH0pYDsgICAgICBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW1wb3J0aW5nQWNjb3VudHM6IChcclxuICAgICAgICAgICAgICAgIGFjY291bnRJbmRleDogbnVtYmVyLCBcclxuICAgICAgICAgICAgICAgIHRvdGFsQWNjb3VudHM6IG51bWJlciwgXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnYWNjb3VudCcgfCAnY29tYmF0LXJlcG9ydHMnIHwgJ2V4cGVkaXRpb25zJyB8ICdkZWJyaXMtZmllbGRzJyB8ICdsaWZlZm9ybS1kaXNjb3ZlcmllcycgfCAndW5pdmVyc2Utc3BlY2lmaWMtc2V0dGluZ3MnIHwgJ2VtcGlyZS5kYXRhJyB8ICdlbXBpcmUucGxhbmV0cycgfCAnZW1waXJlLm1vb25zJyxcclxuICAgICAgICAgICAgICAgIHN0ZXBJbmRleDogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgc3RlcFRvdGFsOiBudW1iZXIsXHJcbiAgICAgICAgICAgICkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmFzZU1lc3NhZ2UgPSBgQSBpbXBvcnRhciBjb250YXNgO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWNjb3VudFByb2dyZXNzID0gYCR7YWNjb3VudEluZGV4ICsgMX0vJHt0b3RhbEFjY291bnRzfWA7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYodHlwZSA9PSAnYWNjb3VudCcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7YmFzZU1lc3NhZ2V9ICgke2FjY291bnRQcm9ncmVzc30pYDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZih0eXBlID09ICdjb21iYXQtcmVwb3J0cycpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7YmFzZU1lc3NhZ2V9ICgke2FjY291bnRQcm9ncmVzc30sIGNvbWJhdGUgJHtzdGVwSW5kZXggKyAxfS8ke3N0ZXBUb3RhbH0pYDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZih0eXBlID09ICdleHBlZGl0aW9ucycpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7YmFzZU1lc3NhZ2V9ICgke2FjY291bnRQcm9ncmVzc30sIGV4cGVkacOnw6NvICR7c3RlcEluZGV4ICsgMX0vJHtzdGVwVG90YWx9KWA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYodHlwZSA9PSAnZGVicmlzLWZpZWxkcycpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7YmFzZU1lc3NhZ2V9ICgke2FjY291bnRQcm9ncmVzc30sIGNhbXBvIGRlIGRldHJpdG9zICR7c3RlcEluZGV4ICsgMX0vJHtzdGVwVG90YWx9KWA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYodHlwZSA9PSAnbGlmZWZvcm0tZGlzY292ZXJpZXMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke2Jhc2VNZXNzYWdlfSAoJHthY2NvdW50UHJvZ3Jlc3N9LCBtaXNzw6NvIGRlIGRlc2NvYmVydGEgZGUgZm9ybWFzIGRlIHZpZGEgJHtzdGVwSW5kZXggKyAxfS8ke3N0ZXBUb3RhbH0pYDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZih0eXBlID09ICdlbXBpcmUuZGF0YScpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7YmFzZU1lc3NhZ2V9ICgke2FjY291bnRQcm9ncmVzc30sIGRhZG9zIGLDoXNpY29zIGRvIGltcMOpcmlvKWA7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYodHlwZSA9PSAnZW1waXJlLnBsYW5ldHMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke2Jhc2VNZXNzYWdlfSAoJHthY2NvdW50UHJvZ3Jlc3N9LCBwbGFuZXRhICR7c3RlcEluZGV4ICsgMX0vJHtzdGVwVG90YWx9KWA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZih0eXBlID09ICdlbXBpcmUubW9vbnMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke2Jhc2VNZXNzYWdlfSAoJHthY2NvdW50UHJvZ3Jlc3N9LCBsdWEgJHtzdGVwSW5kZXggKyAxfS8ke3N0ZXBUb3RhbH0pYDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZih0eXBlID09ICd1bml2ZXJzZS1zcGVjaWZpYy1zZXR0aW5ncycpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7YmFzZU1lc3NhZ2V9ICgke2FjY291bnRQcm9ncmVzc30sIGRlZmluacOnw7VlcyBlc3BlY8OtZmljYXMgZG8gdW5pdmVyc28pYDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdHlwZSAnJHt0eXBlfSdgKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIGFjY2Vzc2liaWxpdHk6IHtcclxuICAgICAgICBzaG93U2ltcGxpZmllZFJlc3VsdHM6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICdWaXN0YSBzaW1wbGlmaWNhZGEnLFxyXG4gICAgICAgICAgICBsYWJlbDogJ1Zpc3RhIHNpbXBsaWZpY2FkYSwgZXNjb25kZSBhcyBtZW5zYWdlbnMgb3JpZ2luYWlzIGRvcyByZXN1bHRhZG9zIGRhcyBleHBlZGnDp8O1ZXMgZSBkb3MgcmVsYXTDs3Jpb3MgZGUgcmVjaWNsYWdlbSBkb3MgY2FtcG9zIGRlIGRlc3Ryb8Onb3MgZSBtb3N0cmEgaWNvbnMgbmFzIG5vdGlmaWNhw6fDtWVzLicsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcblxyXG4gICAgZGVicmlzRmllbGRzOiB7XHJcbiAgICAgICAgc2VwYXJhdGVFeHBlZGl0aW9uRGVicmlzRmllbGRzOiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAnUG9zacOnw6NvIDE2IHNlcGFyYWRhJyxcclxuICAgICAgICAgICAgbGFiZWw6ICdTZXBhcmFyIGFzIHJlY2ljbGFnZW0gZG9zIGNhbXBvcyBkZSBkZXN0cm/Dp29zIGRhIHBvc2nDp8OjbyAxNiBkYXMgb3V0cmFzICgxLTE1KScsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcblxyXG4gICAgbGlua0FjY291bnRzOiB7XHJcbiAgICAgICAgaGVhZGVyOiAoYWNjb3VudDogc3RyaW5nKSA9PiBgTGlua2FyIGNvbnRhcyBjb20gYSBjb250YSBhY3R1YWxtZW50ZSBzZWxlY2lvbmFkYSAoJHthY2NvdW50fSlgLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uSHRtbDogKGFjY291bnQ6IHN0cmluZykgPT5cclxuICAgICAgICAgICAgYFPDsyBkZXZlcsOhcyBsaW5rYXIgY29udGFzIHNlIHF1aXNlcmVzIHF1ZSBvIE9nYW1lIFRyYWNrZXIgY29uc2lkZXIgb3MgZGFkb3MgZGFzIGNvbnRhcyBhIGxpbmsgY29tbyBkYWRvcyBkYSBjb250YSBhY3R1YWxtZW50ZSBzZWxlY2lvbmFkYSAoJHthY2NvdW50fSkuPGJyLz5gXHJcbiAgICAgICAgICAgICsgYElzdG8gw6kgY29tdW0gYWNvbnRlY2VyIHF1YW5kbyBleGlzdGUgdW1hIGZ1c8OjbyBkZSB1bml2ZXJzb3MgZSBhcyBjb250YXMgcGFzc2FtIGEgc2VyIGNvbnNpZGVyYWRhcyBvdXRyYXMgcGVsbyBPR2FtZSBUcmFja2VyLjxici8+PGJyLz5gXHJcbiAgICAgICAgICAgICsgYEV4YW1wbG86IDxici8+YFxyXG4gICAgICAgICAgICArIGA8b2w+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpPk8gam9nYWRvciBcIk9HYW1lIFByb2Zlc3Npb25hbFwiIGVzdMOhIGEgam9nYXIgbm8gc2Vydmlkb3IgXCJFTiBNaWxreXdheVwiPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGk+TyBzZXJ2aWRvciBcIkVOIE1pbGt5d2F5XCIgw6kgdG9ybmFkbyBleG9kdXMgZHVyYW50ZSBhIGZ1c8OjbzwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpPk8gam9nYWRvciBcIk9HYW1lIFByb2Zlc3Npb25hbFwiIGZheiBtZXJnZSBkYSBzdWEgY29udGEgcGFyYSBvIHNlcnZpZG9yIFwiRU4gQ2FydHdoZWVsXCI8L2xpPiAgIFxyXG4gICAgICAgICAgICAgICAgICAgIDxsaT5EZXBvaXMgZG8gbWVyZ2UsIG8gT0dhbWUgVHJhY2tlciBuw6NvIG1vc3RyYSBxdWFpcyBxdWVyIGRhZG9zIGRvIHNlcnZpZG9yIG9yaWdpbmFsIFwiRU4gTWlsa3l3YXlcIiBwYXJhIGEgbm92YSBjb250YSBxdWUgZm9pIG1lcmdlZDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpPk5vIE9HYW1lIFRyYWNrZXIgYSBjb250YSBhbnRpZ28gXCJPR2FtZSBQcm9mZXNzaW9uYWxcIiBubyBzZXJ2aWRvciBcIkVOIE1pbGt5d2F5XCIgw6kgbGlua2FkYSBwYXJhIG5vdmEgY29udGEgXCJPR2FtZSBQcm9mZXNzaW9uYWxcIiBubyBzZXJ2aWRvciBcIkVOIENhcnR3aGVlbFwiPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGk+T3MgZGFkb3MgcXVlIGZvcmFtIGVudmlhZG9zIGUgZ3VhcmRhZG9zIGRvIGFudGlnbyBzZXJ2aWRvciBcIkVOIE1pbGt5d2F5XCIgc2Vyw6NvIGFnb3JhIG1vc3RyYWRvcyBuYSBub3ZhIGNvbnRhIG5vIHNlcnZpZG9yIFwiRU4gQ2FydHdoZWVsXCI8L2xpPlxyXG4gICAgICAgICAgICAgICAgPC9vbD5cclxuICAgICAgICAgICAgYCxcclxuICAgICAgICBsaW5rQWNjb3VudDogJ0xpbmthciBvdXRyYSBjb250YTonLFxyXG4gICAgICAgIGxpbmtlZEFjY291bnRzOiAnQ29udGFzIGxpbmthZGFzOicsXHJcbiAgICB9LFxyXG59OyIsImltcG9ydCB7IFJlc291cmNlVHlwZSB9IGZyb20gXCIuLi8uLi8uLi9tb2RlbHMvb2dhbWUvcmVzb3VyY2VzL1Jlc291cmNlVHlwZVwiO1xyXG5pbXBvcnQgeyBSZXNvdXJjZVRyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgcHRfcHQ6IFJlc291cmNlVHJhbnNsYXRpb25zID0ge1xyXG4gICAgW1Jlc291cmNlVHlwZS5tZXRhbF06ICdNZXRhbCcsXHJcbiAgICBbUmVzb3VyY2VUeXBlLmNyeXN0YWxdOiAnQ3Jpc3RhbCcsXHJcbiAgICBbUmVzb3VyY2VUeXBlLmRldXRlcml1bV06ICdEZXV0w6lyaW8nLFxyXG4gICAgZW5lcmd5OiAnRW5lcmdpYScsXHJcbn07IiwiaW1wb3J0IHsgcHRfcHQgYXMgc2hpcHMgfSBmcm9tICcuLi9vZ2FtZS9zaGlwcy9wdF9wdCc7XHJcbmltcG9ydCB7IHB0X3B0IGFzIGRlZmVuc2VzIH0gZnJvbSAnLi4vb2dhbWUvZGVmZW5zZXMvcHRfcHQnO1xyXG5pbXBvcnQgeyBwdF9wdCBhcyBidWlsZGluZ3MgfSBmcm9tICcuLi9vZ2FtZS9idWlsZGluZ3MvcHRfcHQnO1xyXG5pbXBvcnQgeyBwdF9wdCBhcyByZXNlYXJjaCB9IGZyb20gJy4uL29nYW1lL3Jlc2VhcmNoL3B0X3B0JztcclxuaW1wb3J0IHsgcHRfcHQgYXMgbGlmZWZvcm1zIH0gZnJvbSAnLi4vb2dhbWUvbGlmZWZvcm1zL3B0X3B0JztcclxuaW1wb3J0IHsgcHRfcHQgYXMgbGlmZWZvcm1CdWlsZGluZ3MgfSBmcm9tICcuLi9vZ2FtZS9saWZlZm9ybXMvYnVpbGRpbmdzL3B0X3B0JztcclxuaW1wb3J0IHsgcHRfcHQgYXMgbGlmZWZvcm1UZWNobm9sb2dpZXMgfSBmcm9tICcuLi9vZ2FtZS9saWZlZm9ybXMvdGVjaG5vbG9naWVzL3B0X3B0JztcclxuaW1wb3J0IHsgcHRfcHQgYXMgcHJlbWl1bSB9IGZyb20gJy4uL29nYW1lL3ByZW1pdW0vcHRfcHQnO1xyXG5cclxuaW1wb3J0IHsgRXh0ZW5zaW9uVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5pbXBvcnQgeyBwdF9wdCBhcyBzZXR0aW5ncyB9IGZyb20gJy4vc2V0dGluZ3MvcHRfcHQnO1xyXG5pbXBvcnQgeyBwdF9wdCBhcyByZXNvdXJjZXMgfSBmcm9tICcuL3Jlc291cmNlcy9wdF9wdCc7XHJcbmltcG9ydCB7IHB0X3B0IGFzIGNvbW1vbiB9IGZyb20gJy4vY29tbW9uL3B0X3B0JztcclxuaW1wb3J0IHsgcHRfcHQgYXMgZXhwZWRpdGlvbnMgfSBmcm9tICcuL2V4cGVkaXRpb25zL3B0X3B0JztcclxuaW1wb3J0IHsgcHRfcHQgYXMgY29tYmF0cyB9IGZyb20gJy4vY29tYmF0cy9wdF9wdCc7XHJcbmltcG9ydCB7IHB0X3B0IGFzIGRvbmF0ZSB9IGZyb20gJy4vZG9uYXRlL3B0X3B0JztcclxuaW1wb3J0IHsgcHRfcHQgYXMgZGVicmlzRmllbGRzIH0gZnJvbSAnLi9kZWJyaXNGaWVsZHMvcHRfcHQnO1xyXG5pbXBvcnQgeyBwdF9wdCBhcyByZXNvdXJjZUJhbGFuY2UgfSBmcm9tICcuL3Jlc291cmNlQmFsYW5jZS9wdF9wdCc7XHJcbmltcG9ydCB7IHB0X3B0IGFzIGVtcGlyZSB9IGZyb20gJy4vZW1waXJlL3B0X3B0JztcclxuaW1wb3J0IHsgcHRfcHQgYXMgc3dpdGNoQWNjb3VudHMgfSBmcm9tICcuL3N3aXRjaEFjY291bnRzL3B0X3B0JztcclxuaW1wb3J0IHsgcHRfcHQgYXMgYWJvdXQgfSBmcm9tICcuL2Fib3V0L3B0X3B0JztcclxuaW1wb3J0IHsgcHRfcHQgYXMgdW5pdmVyc2VIaXN0b3J5IH0gZnJvbSAnLi91bml2ZXJzZUhpc3RvcnkvcHRfcHQnO1xyXG5pbXBvcnQgeyBwdF9wdCBhcyBub3RpZmljYXRpb25zIH0gZnJvbSAnLi9ub3RpZmljYXRpb25zL3B0X3B0JztcclxuaW1wb3J0IHsgcHRfcHQgYXMgdG9vbHMgfSBmcm9tICcuL3Rvb2xzL3B0X3B0JztcclxuXHJcbmltcG9ydCB7IHB0X3B0IGFzIGV4Y2VsRXhwb3J0IH0gZnJvbSAnLi9leGNlbEV4cG9ydC9wdF9wdCc7XHJcbmltcG9ydCB7IHB0X3B0IGFzIHBsYXllckNsYXNzZXMgfSBmcm9tICcuL3BsYXllckNsYXNzZXMvcHRfcHQnO1xyXG5pbXBvcnQgeyBSZWN1cnNpdmVQYXJ0aWFsIH0gZnJvbSAnQC9zaGFyZWQvdHlwZXMvUmVjdXJzaXZlUGFydGlhbCc7XHJcblxyXG5leHBvcnQgY29uc3QgcHRfcHQ6IFJlY3Vyc2l2ZVBhcnRpYWw8RXh0ZW5zaW9uVHJhbnNsYXRpb25zPiA9IHtcclxuICAgIG9nYW1lOiB7XHJcbiAgICAgICAgYnVpbGRpbmdzLFxyXG4gICAgICAgIGxpZmVmb3JtcyxcclxuICAgICAgICBsaWZlZm9ybUJ1aWxkaW5ncyxcclxuICAgICAgICBsaWZlZm9ybVRlY2hub2xvZ2llcyxcclxuICAgICAgICBwcmVtaXVtLFxyXG4gICAgICAgIHJlc291cmNlcyxcclxuICAgICAgICByZXNlYXJjaCxcclxuICAgICAgICBzaGlwcyxcclxuICAgICAgICBkZWZlbnNlcyxcclxuICAgIH0sXHJcblxyXG4gICAgZXh0ZW5zaW9uOiB7XHJcbiAgICAgICAgY29tbW9uLFxyXG4gICAgICAgIHNldHRpbmdzLFxyXG4gICAgICAgIHJlc291cmNlcyxcclxuICAgICAgICBleHBlZGl0aW9ucyxcclxuICAgICAgICBjb21iYXRzLFxyXG4gICAgICAgIGRvbmF0ZSxcclxuICAgICAgICBkZWJyaXNGaWVsZHMsXHJcbiAgICAgICAgcmVzb3VyY2VCYWxhbmNlLFxyXG4gICAgICAgIGVtcGlyZSxcclxuICAgICAgICBzd2l0Y2hBY2NvdW50cyxcclxuICAgICAgICBhYm91dCxcclxuICAgICAgICB1bml2ZXJzZUhpc3RvcnksXHJcbiAgICAgICAgbm90aWZpY2F0aW9ucyxcclxuICAgICAgICB0b29scyxcclxuXHJcbiAgICAgICAgZXhjZWxFeHBvcnQsXHJcbiAgICAgICAgcGxheWVyQ2xhc3NlcyxcclxuICAgIH0sXHJcbn07XHJcbiIsImltcG9ydCB7IFJlc291cmNlVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5pbXBvcnQgeyBwdF9wdCBhcyBvZ2FtZVJlc291cmNlcyB9IGZyb20gJy4uLy4uL29nYW1lL3Jlc291cmNlcy9wdF9wdCc7XHJcbmltcG9ydCB7IFJlY3Vyc2l2ZVBhcnRpYWwgfSBmcm9tIFwiQC9zaGFyZWQvdHlwZXMvUmVjdXJzaXZlUGFydGlhbFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHB0X3B0OiBSZWN1cnNpdmVQYXJ0aWFsPFJlc291cmNlVHJhbnNsYXRpb25zPiA9IG9nYW1lUmVzb3VyY2VzO1xyXG4iLCJpbXBvcnQgeyBSZWN1cnNpdmVQYXJ0aWFsIH0gZnJvbSBcIkAvc2hhcmVkL3R5cGVzL1JlY3Vyc2l2ZVBhcnRpYWxcIjtcclxuaW1wb3J0IHsgQ29tbW9uVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHB0X3B0OiBSZWN1cnNpdmVQYXJ0aWFsPENvbW1vblRyYW5zbGF0aW9ucz4gPSB7XHJcbiAgICBhdmVyYWdlUGVyRGF5OiAn4oyAIHBvciBkaWEnLFxyXG4gICAgY2hhcnQ6ICdHcsOhZmljbycsXHJcbiAgICB0YWJsZTogJ1RhYmVsYScsXHJcbiAgICBzdW06ICdTb21hJyxcclxuICAgIHRvdGFsOiAndG90YWwnLFxyXG4gICAgcmVzb3VyY2VVbml0czogJ1VuaWRhZGVzIGRlIFJlY3Vyc29zJyxcclxuICAgIGRzdTogJ0RTVScsXHJcbiAgICBtc3U6ICdNU1UnLFxyXG4gICAgZGF0ZTogJ0RhdGEnLFxyXG4gICAgZGF0ZVRpbWU6ICdEYXRhICYgSG9yYScsXHJcblxyXG4gICAgbWFkZVdpdGhMb3ZlMTogJ0ZlaXRvIGNvbScsXHJcbiAgICBtYWRlV2l0aExvdmUyOiAncG9yIFdvbmt5ZG9ua3knLFxyXG59O1xyXG4iLCJpbXBvcnQgeyBFeHBlZGl0aW9uRXZlbnRTaXplIH0gZnJvbSBcIkAvc2hhcmVkL21vZGVscy9leHBlZGl0aW9ucy9FeHBlZGl0aW9uRXZlbnRTaXplXCI7XHJcbmltcG9ydCB7IEV4cGVkaXRpb25FdmVudFR5cGUgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL2V4cGVkaXRpb25zL0V4cGVkaXRpb25FdmVudFR5cGVcIjtcclxuaW1wb3J0IHsgRXhwZWRpdGlvbnNUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XHJcbmltcG9ydCB7IHB0X3B0IGFzIG9nYW1lUHJlbWl1bSB9IGZyb20gJy4uLy4uL29nYW1lL3ByZW1pdW0vcHRfcHQnO1xyXG5pbXBvcnQgeyBwdF9wdCBhcyBvZ2FtZUZhY3Rpb25zIH0gZnJvbSAnLi4vLi4vb2dhbWUvZmFjdGlvbnMvcHRfcHQnO1xyXG5pbXBvcnQgeyBFeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWwgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL2V4cGVkaXRpb25zL0V4cGVkaXRpb25EZXBsZXRpb25MZXZlbFwiO1xyXG5pbXBvcnQgeyBSZWN1cnNpdmVQYXJ0aWFsIH0gZnJvbSBcIkAvc2hhcmVkL3R5cGVzL1JlY3Vyc2l2ZVBhcnRpYWxcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBwdF9wdDogUmVjdXJzaXZlUGFydGlhbDxFeHBlZGl0aW9uc1RyYW5zbGF0aW9ucz4gPSB7XHJcbiAgICBoZWFkZXI6ICdFeHBlZGnDp8O1ZXMnLFxyXG4gICAgdGFiSGVhZGVyczoge1xyXG4gICAgICAgIG92ZXJ2aWV3OiAnUmVzdW1vJyxcclxuICAgICAgICBmb3VuZFJlc291cmNlczogJ1JlY3Vyc29zJyxcclxuICAgICAgICBmb3VuZFNoaXBzOiAnTmF2ZXMnLFxyXG4gICAgICAgIGZvdW5kRGFya01hdHRlcjogb2dhbWVQcmVtaXVtLmRhcmtNYXR0ZXIsXHJcbiAgICAgICAgZm91bmRJdGVtczogJ0l0ZW1zJyxcclxuICAgICAgICBkZXBsZXRpb246ICdEZXNnYXN0ZScsXHJcbiAgICAgICAgaW5mbzoge1xyXG4gICAgICAgICAgICBoZWFkZXI6ICdJbmZvJyxcclxuXHJcbiAgICAgICAgICAgIHRvcEZpbmRzOiAnTWVsaG9yZXMgRGVzY29iZXJ0YXMnLFxyXG4gICAgICAgICAgICBwb3NzaWJsZUZpbmRzOiAnTGlzdGEgZGUgcG9zc8OtdmVpcyBkZXNjb2JlcnRhcycsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc3ViSGVhZGVyczoge1xyXG4gICAgICAgICAgICBhbW91bnQ6ICdRdWFudGlkYWRlJyxcclxuICAgICAgICAgICAgc2l6ZXM6ICdUYW1hbmhvcycsXHJcbiAgICAgICAgICAgIHJlc291cmNlczogJ1VuaWRhZGVzIGRlIHJlY3Vyc28nLFxyXG4gICAgICAgICAgICBjb3VudDogJ0NvbnRhZ2VtJyxcclxuICAgICAgICAgICAgc2l6ZXNCeVJlc291cmNlOiAnVGFtYW5ob3MgcG9yIHJlY3Vyc29zJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuXHJcbiAgICBleHBlZGl0aW9uRXZlbnRzOiB7XHJcbiAgICAgICAgW0V4cGVkaXRpb25FdmVudFR5cGUubm90aGluZ106ICdTZW0gZXZlbnRvJyxcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5yZXNvdXJjZXNdOiAnUmVjdXJzb3MnLFxyXG4gICAgICAgIFtFeHBlZGl0aW9uRXZlbnRUeXBlLmZsZWV0XTogJ05hdmVzJyxcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5kZWxheV06ICdBdHJhc28nLFxyXG4gICAgICAgIFtFeHBlZGl0aW9uRXZlbnRUeXBlLmVhcmx5XTogJ0NlZG8nLFxyXG4gICAgICAgIFtFeHBlZGl0aW9uRXZlbnRUeXBlLmRhcmtNYXR0ZXJdOiBvZ2FtZVByZW1pdW0uZGFya01hdHRlcixcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5waXJhdGVzXTogb2dhbWVGYWN0aW9ucy5waXJhdGVzLFxyXG4gICAgICAgIFtFeHBlZGl0aW9uRXZlbnRUeXBlLmFsaWVuc106IG9nYW1lRmFjdGlvbnMuYWxpZW5zLFxyXG4gICAgICAgIFtFeHBlZGl0aW9uRXZlbnRUeXBlLmNvbWJhdF06ICdDb21iYXRlJyxcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5pdGVtXTogJ0l0ZW0nLFxyXG4gICAgICAgIFtFeHBlZGl0aW9uRXZlbnRUeXBlLnRyYWRlcl06ICdNZXJjYWRvcicsXHJcbiAgICAgICAgW0V4cGVkaXRpb25FdmVudFR5cGUubG9zdEZsZWV0XTogJ0Zyb3RhIFBlcmRpZGEnLFxyXG4gICAgfSxcclxuICAgIGV4cGVkaXRpb25FdmVudFNpemVzOiB7XHJcbiAgICAgICAgW0V4cGVkaXRpb25FdmVudFNpemUuc21hbGxdOiAnRGVzY29iZXJ0YSBDb211bScsXHJcbiAgICAgICAgW0V4cGVkaXRpb25FdmVudFNpemUubWVkaXVtXTogJ0Rlc2NvYmVydGEgR3JhbmRlJyxcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50U2l6ZS5sYXJnZV06ICdEZXNjb2JlcnRhIEVub3JtZScsXHJcbiAgICAgICAgJ2ZsZWQtZGVhdGgtc3Rhcic6ICdJbmltaWdvcyBmdWdpcmFtJyxcclxuICAgIH0sXHJcbiAgICBkZXBsZXRpb25MZXZlbHM6IHtcclxuICAgICAgICBbRXhwZWRpdGlvbkRlcGxldGlvbkxldmVsLm5vbmVdOiAnTXVpdG8gYmFpeG8nLFxyXG4gICAgICAgIFtFeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWwubG93XTogJ0JhaXhvJyxcclxuICAgICAgICBbRXhwZWRpdGlvbkRlcGxldGlvbkxldmVsLm1lZGl1bV06ICdNw6lkaW8nLFxyXG4gICAgICAgIFtFeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWwuaGlnaF06ICdBbHRvJyxcclxuICAgICAgICB1bmtub3duOiAnRGVzY29uaGVjaWRvJyxcclxuICAgIH0sXHJcblxyXG4gICAgZXhwZWRpdGlvbnM6ICdFeHBlZGnDp8O1ZXMnLFxyXG4gICAgZmluZHM6ICdEZXNjb2JlcnRhcycsXHJcbiAgICBzaGlwc0ZvdW5kOiAnTmF2ZXMgZW5jb250cmFkYXMnLFxyXG4gICAgZGVwbGV0aW9uOiAnRGVzZ2F0ZSBkbyBzaXN0ZW1hJyxcclxuXHJcbiAgICB0b3BGaW5kczoge1xyXG4gICAgICAgIHRpdGxlOiAodHlwZTogc3RyaW5nKSA9PiBgTWVsaG9yZXMgZGVzY29iZXJ0YXMgKCR7dHlwZX0pYCxcclxuICAgICAgICBzaGlwVW5pdHM6ICdVbmlkYWRlcyBkZSBuYXZlcycsXHJcblxyXG4gICAgICAgIHNpemU6ICdUYW1hbmhvJyxcclxuICAgICAgICBhbW91bnQ6ICdRdWFudGlkYWRlJyxcclxuICAgICAgICBkYXRlOiAnRGF0YScsXHJcbiAgICB9LFxyXG4gICAgcG9zc2libGVGaW5kczoge1xyXG4gICAgICAgIGluZm86IHtcclxuICAgICAgICAgICAgcGxheWVyQ2xhc3M6ICdDbGFzc2UgZG8gSm9nYWRvcicsXHJcbiAgICAgICAgICAgIGVjb25vbXlTcGVlZDogJ1ZlbG9jaWRhZGUgZGEgRWNvbm9taWEnLFxyXG4gICAgICAgICAgICByZXNvdXJjZUZpbmRCb251czogJ0LDs251cyBkZSBkZXNjb2JlcnRhcyBkZSByZWN1cnNvcycsXHJcbiAgICAgICAgICAgIHNoaXBGaW5kQm9udXM6ICdCw7NudXMgZGUgZGVjb2JlcnRhcyBkZSBuYXZlcycsXHJcbiAgICAgICAgICAgIGRhcmtNYXR0ZXJGaW5kQm9udXM6ICdCw7NudXMgZGUgZGVzY29iZXJ0YXMgZGUgTWF0w6lyaWEgTmVncmEnLFxyXG4gICAgICAgICAgICBkaXNjb3ZlcmVyQm9udXM6ICdCw7NudXMgZGUgQ2xhc3NlIGRlIERlc2NvYnJpZG9yJyxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBtYXhpbXVtRmluZHM6ICdNw6F4aW1vIGRlIERlc2NvYmVydGFzJyxcclxuICAgICAgICBmaW5kc0RhcmtNYXR0ZXI6ICdMaW1pdGVzIGRhcyBkZXNjb2JlcnRhcyBkZSBNTicsXHJcblxyXG4gICAgICAgIGxpc3RPZlBvc3NpYmxlRmluZHM6ICdMaXN0YSBkZSBwb3Nzw612ZWlzIGRlc2NvYmVydGFzIChyZWN1cnNvcywgbmF2ZXMpJyxcclxuICAgICAgICBmaW5kU2l6ZXM6IChzaXplOiBzdHJpbmcpID0+IGBQb3Nzw612ZWlzIHF1YW50aWRhZGVzIGRlIGRlc2NvYmVydGFzICgke3NpemV9KWAsXHJcbiAgICAgICAgc2hpcFVuaXRzOiAnVW5pZGFkZXMgZGUgbmF2ZXMnLFxyXG4gICAgfSxcclxufTsiLCJpbXBvcnQgeyBGYWN0aW9uVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBwdF9wdDogRmFjdGlvblRyYW5zbGF0aW9ucyA9IHtcclxuICAgIHBpcmF0ZXM6ICdQaXJhdGFzJyxcclxuICAgIGFsaWVuczogJ0FsaWVucycsXHJcbn07IiwiaW1wb3J0IHsgQ29tYmF0UmVzdWx0VHlwZSB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvY29tYmF0LXJlcG9ydHMvQ29tYmF0UmVzdWx0VHlwZVwiO1xyXG5pbXBvcnQgeyBDb21iYXRzVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5pbXBvcnQgeyBSZWN1cnNpdmVQYXJ0aWFsIH0gZnJvbSBcIkAvc2hhcmVkL3R5cGVzL1JlY3Vyc2l2ZVBhcnRpYWxcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBwdF9wdDogUmVjdXJzaXZlUGFydGlhbDxDb21iYXRzVHJhbnNsYXRpb25zPiA9IHtcclxuICAgIGhlYWRlcjogJ0NvbWJhdGVzJyxcclxuICAgIHRhYkhlYWRlcnM6IHtcclxuICAgICAgICBvdmVydmlldzogJ1Jlc3VtbycsXHJcbiAgICAgICAgbG9vdDogJ1BpbGhhZ2VtJyxcclxuICAgICAgICBsb3N0U2hpcHM6ICdOYXZlcyBQZXJkaWRhcycsXHJcbiAgICAgICAgc3ViSGVhZGVyczoge1xyXG4gICAgICAgICAgICBhZ2FpbnN0UGxheWVyczogJ0NvbnRyYSBKb2dhZG9yZXNzJyxcclxuICAgICAgICAgICAgb25FeHBlZGl0aW9uczogJ0VtIEV4cGVkacOnw7VlcycsXHJcblxyXG4gICAgICAgICAgICBhbW91bnQ6ICdRdWFudGlkYWRlJyxcclxuICAgICAgICAgICAgcmVzb3VyY2VzOiAnVW5pZGFkZXMgZGUgUmVjdXJzb3MnXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBjb21iYXRzOiAnQ29tYmF0ZXMnLFxyXG4gICAgc2hpcHNMb3N0OiAnTmF2ZXMgUGVyZGlkYXMnLFxyXG4gICAgY29tYmF0UmVzdWx0czoge1xyXG4gICAgICAgIFtDb21iYXRSZXN1bHRUeXBlLndvbl06ICdWaXTDs3JpYXMnLFxyXG4gICAgICAgIFtDb21iYXRSZXN1bHRUeXBlLmxvc3RdOiAnRGVycm90YXMnLFxyXG4gICAgICAgIFtDb21iYXRSZXN1bHRUeXBlLmRyYXddOiAnRW1wYXRlcycsXHJcbiAgICB9LFxyXG59O1xyXG4iLCJpbXBvcnQgeyBSZWN1cnNpdmVQYXJ0aWFsIH0gZnJvbSBcIkAvc2hhcmVkL3R5cGVzL1JlY3Vyc2l2ZVBhcnRpYWxcIjtcclxuaW1wb3J0IHsgRG9uYXRlVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHB0X3B0OiBSZWN1cnNpdmVQYXJ0aWFsPERvbmF0ZVRyYW5zbGF0aW9ucz4gPSB7XHJcbiAgICBoZWFkZXI6ICdEb2HDp8OjbycsXHJcbiAgICBzdWJIZWFkZXI6ICdEb2FyIHBhcmEgYWp1ZGFyIG8gZGVzZW52b2x2aW1lbnRvIGRvIE9HYW1lIFRyYWNrZXInLFxyXG4gICAgXHJcbiAgICBjcnlwdG86IHtcclxuICAgICAgICBoZWFkZXI6ICdEb2FyIGNyaXB0b21vZWRhcycsXHJcbiAgICB9LFxyXG4gICAga29maToge1xyXG4gICAgICAgIGhlYWRlcjogJ0RvYXIgYXRyYXbDqXMgZG8gUGF5UGFsIG91IGNhcnTDo28gZGUgY3LDqWRpdG8vZMOpYml0bycsXHJcbiAgICAgICAgYnV0dG9uVGV4dDogJ0RvYXIgYXRyYXbDqXMgZG8gS28tRmknLFxyXG4gICAgICAgIG1lc3NhZ2U6ICdOw6NvIMOpIG5lY2Vzc8OhcmlvIGNyaWFyIHVtYSBjb250YSBwYXJhIGRvYXIgYXRyYXbDqXMgZG8gS28tZmkuIFRvZGFzIGFzIGRvYcOnw7VlcyB2w6NvIGRpcmVjdGFtZW50ZSBwYXJhIG8gcHJvZ3JhbWFkb3IuJyxcclxuICAgIH0sXHJcbn07XHJcbiIsImltcG9ydCB7IFJlY3Vyc2l2ZVBhcnRpYWwgfSBmcm9tIFwiQC9zaGFyZWQvdHlwZXMvUmVjdXJzaXZlUGFydGlhbFwiO1xyXG5pbXBvcnQgeyBEZWJyaXNGaWVsZHNUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgcHRfcHQ6IFJlY3Vyc2l2ZVBhcnRpYWw8RGVicmlzRmllbGRzVHJhbnNsYXRpb25zPiA9IHtcclxuICAgIGhlYWRlcjogJ0NhbXBvIGRlIERlc3Ryb8Onb3MnLFxyXG4gICAgYWRkRGVicmlzRmllbGRNYW51YWxseToge1xyXG4gICAgICAgIHRpdGxlOiAnQWRpY2lvbmFyIGNhbXBvIGRlIGRlc3Ryb8Onb3MgbWFudWFsbWVudGUnLFxyXG4gICAgICAgIGJ1dHRvblRleHQ6ICdBZGljaW9uYXInLFxyXG4gICAgfSxcclxuICAgIHBvc2l0aW9uOiAnUG9zacOnw6NvJyxcclxufTtcclxuIiwiaW1wb3J0IHsgUmVjdXJzaXZlUGFydGlhbCB9IGZyb20gXCJAL3NoYXJlZC90eXBlcy9SZWN1cnNpdmVQYXJ0aWFsXCI7XHJcbmltcG9ydCB7IFJlc291cmNlQmFsYW5jZVRyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBwdF9wdDogUmVjdXJzaXZlUGFydGlhbDxSZXNvdXJjZUJhbGFuY2VUcmFuc2xhdGlvbnM+ID0ge1xyXG4gICAgaGVhZGVyOiAnRXN0aW1hdGl2YSBkZSBSZWN1cnNvcycsXHJcbiAgICBcImNvbWJhdC1yZXBvcnRcIjogJ2RlIGNvbWJhdGVzJyxcclxuICAgIFwiZGVicmlzLWZpZWxkLXJlcG9ydFwiOiAnZGUgY2FtcG9zIGRlIGRlc3Ryb8Onb3MnLFxyXG4gICAgZXhwZWRpdGlvbjogJ2RlIGV4cGVkacOnw7VlcydcclxufTtcclxuIiwiaW1wb3J0IHsgTGlmZWZvcm1EaXNjb3ZlcnlFdmVudEFydGlmYWN0RmluZGluZ1NpemUgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL2xpZmVmb3JtLWRpc2NvdmVyaWVzL0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRBcnRpZmFjdEZpbmRpbmdTaXplXCI7XHJcbmltcG9ydCB7IExpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlIH0gZnJvbSBcIkAvc2hhcmVkL21vZGVscy9saWZlZm9ybS1kaXNjb3Zlcmllcy9MaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZVwiO1xyXG5pbXBvcnQgeyBFbXBpcmVUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XHJcbmltcG9ydCB7IFJlY3Vyc2l2ZVBhcnRpYWwgfSBmcm9tIFwiQC9zaGFyZWQvdHlwZXMvUmVjdXJzaXZlUGFydGlhbFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHB0X3B0OiBSZWN1cnNpdmVQYXJ0aWFsPEVtcGlyZVRyYW5zbGF0aW9ucz4gPSB7XHJcbiAgICBoZWFkZXI6ICdJbXDDqXJpbycsXHJcbiAgICBwbGFuZXQ6ICdQbGFuZXRhJyxcclxuICAgIHByb2R1Y3Rpb246IHtcclxuICAgICAgICBoZWFkZXI6ICdQcm9kdcOnw6NvJyxcclxuICAgICAgICBzdWJIZWFkZXJzOiB7XHJcbiAgICAgICAgICAgIHJlc291cmNlUHJvZHVjdGlvbjogJ1Byb2R1w6fDo28gZGUgUmVjdXJzb3MnLFxyXG4gICAgICAgICAgICBtaW5lT3ZlcnZpZXc6ICdSZXN1bW8gZGFzIE1pbmFzJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGF2ZXJhZ2VQZXJIb3VyOiAn4oyAIHBvciBob3JhJyxcclxuICAgICAgICB0b3RhbFBlckhvdXI6ICd0b3RhbCBwb3IgaG9yYScsXHJcbiAgICAgICAgdG90YWxQZXJEYXk6ICd0b3RhbCBwb3IgZGlhJyxcclxuICAgICAgICB0b3RhbFBlcldlZWs6ICd0b3RhbCBwb3Igc2VtYW5hJyxcclxuICAgICAgICBhY3RpdmVQcm9kdWN0aW9uU2V0dGluZ3M6ICdEZWZpbmnDp8O1ZXMgZGUgUHJvZHXDp8OjbyBBY3RpdmFzJyxcclxuICAgICAgICBtZXNzYWdlUHJvZHVjdGlvbjEwMDogJ09zIHZhbG9yZXMgYXByZXNlbnRhZG9zIHPDo28gY29tIGJhc2Ugbm8gZmFjdG9yIGRlIHByb2R1w6fDo28gZGUgMTAwJSBlIG7Do28gdGVtIGVtIGNvbnRhIGEgZmFsdGEgZGUgZW5lcmdpYS4nLFxyXG5cclxuICAgICAgICBtaW5lczoge1xyXG4gICAgICAgICAgICBjcmF3bGVyc0F2YWlsYWJsZTogJ2Rpc3Bvbml2ZWwnLFxyXG4gICAgICAgICAgICBjcmF3bGVyc1RvUmVhY2hMaW1pdDogY291bnQgPT4gYCR7Y291bnR9IHJhc3RlamFkb3JlcyBwYXJhIGJvbsO6cyBtw6F4aW1vYCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGl0ZW1zOiAnSXRlbXMgQWN0aXZvcycsXHJcbiAgICAgICAgYnJlYWtkb3duOiB7XHJcbiAgICAgICAgICAgIGJhc2ljSW5jb21lOiAnUHJvZHXDp8OjbyBCw6FzaWNhJyxcclxuICAgICAgICAgICAgbWluZVByb2R1Y3Rpb246ICdQcm9kdcOnw6NvIGRhIE1pbmEnLFxyXG4gICAgICAgICAgICBjb25zdW1wdGlvbjogJ0NvbnN1bW8nLFxyXG4gICAgICAgICAgICBsaWZlZm9ybUJ1aWxkaW5nczogJ0VkaWbDrWNpb3MgZGUgRm9ybWEgZGUgVmlkYScsXHJcbiAgICAgICAgICAgIGNyYXdsZXJzOiAnUmFzdGVqYWRvcmVzJyxcclxuICAgICAgICAgICAgaXRlbXM6ICdJdGVtcycsXHJcbiAgICAgICAgICAgIGdlb2xvZ2lzdDogJ0dlw7Nsb2dvJyxcclxuICAgICAgICAgICAgY29tbWFuZFN0YWZmOiAnRXF1aXBhIGRlIENvbWFuZG8nLFxyXG4gICAgICAgICAgICBwbGF5ZXJDbGFzczogJ0NsYXNzZSBkbyBKb2dhZG9yJyxcclxuICAgICAgICAgICAgYWxsaWFuY2VDbGFzczogJ0NsYXNzZSBkYSBBbGlhbsOnYScsXHJcbiAgICAgICAgICAgIGxpZmVmb3JtVGVjaG5vbG9naWVzOiAnVGVjbm9sb2dpYXMgZGUgRm9ybWEgZGUgVmlkYScsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgcmVzZXQ6ICdSZXNldCcsXHJcbiAgICAgICAgICAgIGhlYWRlcjogJ0RlZmluacOnw7VlcyBkZSBQcm9kdcOnw6NvJyxcclxuICAgICAgICAgICAgYXBwbHlBbmRDbG9zZTogJ0FwbGljYXIgZSBmZWNoYXIgZGVmaW5pw6fDtWVzIGRlIHByb2R1w6fDo28nLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgYW1vcnRpemF0aW9uOiB7XHJcbiAgICAgICAgaGVhZGVyOiAnQW1vcnRpemHDp8OjbycsXHJcblxyXG4gICAgICAgIHRhYmxlOiB7XHJcbiAgICAgICAgICAgIGNvc3Q6ICdDdXN0bycsXHJcbiAgICAgICAgICAgIGxldmVsczogJ07DrXZlaXMnLFxyXG4gICAgICAgICAgICBwcm9kdWN0aW9uUGx1czogJ0RpZmVyZW7Dp2EgZGUgUHJvZHXDp8OjbycsXHJcbiAgICAgICAgICAgIGFtb3J0aXphdGlvblRpbWU6ICdUZW1wbyBkZSBBbW9ydGl6YcOnw6NvJyxcclxuICAgICAgICAgICAgZ3JvdXBTZWxlY3RlZEl0ZW1zOiAnQWdydXBhciBpdGVtcyBzZWxlY2lvbmFkb3MnLFxyXG4gICAgICAgICAgICBzaG93T3JpZ2luYWxJdGVtczogJ01vc3RyYXIgdG9kb3Mgb3MgaXRlbXMgaW5kaXZpZHVhbG1lbnRlJyxcclxuXHJcbiAgICAgICAgICAgIGxldmVsc09uUGxhbmV0czogKGxldmVscywgcGxhbmV0cykgPT4gYCR7bGV2ZWxzfSAke2xldmVscyA9PSAxID8gJ27DrXZlbCcgOiAnbsOtdmVpcyd9ICR7cGxhbmV0cyA9PSAxID8gJ25vJyA6ICdub3MnfSAke3BsYW5ldHN9ICR7cGxhbmV0cyA9PSAxID8gJ3BsYW5ldGEnIDogJ3BsYW5ldGFzJ31gLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgIGhlYWRlcjogJ0RlZmluacOnw7VlcycsXHJcbiAgICAgICAgICAgIGFwcGx5QW5kQ2xvc2U6ICdBcGxpY2FyIGRlZmluacOnw7VlcyBlIGZlY2hhcicsXHJcblxyXG4gICAgICAgICAgICBpbmNsdWRlU2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ0luY2x1w61kbyBubyBjw6FsY3VsbycsXHJcblxyXG4gICAgICAgICAgICAgICAgbWluZXM6ICdNaW5hcycsXHJcbiAgICAgICAgICAgICAgICBleHBlZGl0aW9uczogJ0V4cGVkacOnw7VlcycsXHJcbiAgICAgICAgICAgICAgICBhc3Ryb3BoeXNpY3NQZXJmb3JtYW5jZU5vdGU6ICdOb3RhOiBSZXF1ZXIgYmFzdGFudGUgcHJvY2Vzc2FtZW50bywgaXLDoSBhZmVjdGFyIG11aXRvIG8gZGVzZW1wZW5obycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsYXllclNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdEZWZpbmnDp8O1ZXMgR2VyYWlzJyxcclxuICAgICAgICAgICAgICAgIG9wdGltaXplRm9yUmVzb3VyY2VzOiAnT3B0aW1pemFyIHBhcmEgcmVjdXJzb3Mgc2VsZWNpb25hZG9zJyxcclxuICAgICAgICAgICAgICAgIG9mZmljZXJzOiAnT2ZpY2lhaXMnLFxyXG4gICAgICAgICAgICAgICAgcGxheWVyQ2xhc3M6ICdDbGFzc2UgZG8gSm9nYWRvcicsXHJcbiAgICAgICAgICAgICAgICBhbGxpYW5jZUNsYXNzOiAnQ2xhc3NlIGRhIEFsaWFuw6dhJyxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRMZXZlbE9mOiAobmFtZTogc3RyaW5nKSA9PiBgTsOtdmVsIEFjdHVhbCBkZSAke25hbWV9YCxcclxuICAgICAgICAgICAgICAgIGxpZmVmb3JtTGV2ZWxzOiAnTsOtdmVpcyBkZSBGb3JtYSBkZSBWaWRhJyxcclxuXHJcbiAgICAgICAgICAgICAgICB1bnVzZWRSYWlkQ29sb255U2xvdHM6ICdTbG90cyBkZSBjb2zDs25pYXMgbsOjbyB1c2Fkb3MgYWN0dWFsbWVudGUnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhc3Ryb3BoeXNpY3NTZXR0aW5nczoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAobmFtZTogc3RyaW5nKSA9PiBgJHtuYW1lfSBkZWZpbmnDp8O1ZXNgLFxyXG4gICAgICAgICAgICAgICAgbmV3Q29sb255OiAnbm92YSBDb2zDs25pYScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsYW5ldFNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdEZWZpbmnDp8O1ZXMgZG8gUGxhbmV0YScsXHJcblxyXG4gICAgICAgICAgICAgICAgZ2xvYmFsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVzZWxlY3RJdGVtczogJ0Rlc21hcmNhciB0b2RvcyBvcyBpdGVtcycsXHJcbiAgICAgICAgICAgICAgICAgICAgaWdub3JlSW5hY3RpdmVMaWZlZm9ybVRlY2hub2xvZ3lTbG90czogJ0lnbm9yYXIgc2xvdHMgZGUgdGVjbm9sb2dpYXMgaW5hY3RpdmFzIGRlIGZvcm1hIGRlIHZpZGEgcGFyYSB0b2RvcyBvcyBwbGFuZXRhcycsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIGluY2x1ZGVJblJlc3VsdDogJ0luY2x1aXIgbm8gY8OhbGN1bG8nLFxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdQb3Npw6fDo28nLFxyXG4gICAgICAgICAgICAgICAgbWF4VGVtcGVyYXR1cmU6ICdUZW1wLiBNYXguJyxcclxuICAgICAgICAgICAgICAgIGFjdGl2ZUl0ZW1zOiAnSXRlbXMgQWN0aXZvcycsXHJcbiAgICAgICAgICAgICAgICBjcmF3bGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnUmFzdGVqYWRvcmVzJyxcclxuICAgICAgICAgICAgICAgICAgICBwZXJjZW50YWdlOiAnJSBQcm9kdcOnw6NvJyxcclxuICAgICAgICAgICAgICAgICAgICBmaXhDb3VudDogJ0NvbnRhZ2VtIEZpeGEnLFxyXG4gICAgICAgICAgICAgICAgICAgIG1heENvdW50OiAnQ29udGFnZW0gTWF4LicsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbWluZXM6ICdOw612ZWwgQWN0dWFsIGRhcyBNaW5hcycsXHJcblxyXG4gICAgICAgICAgICAgICAgbGlmZWZvcm06ICdGb3JtYSBkZSBWaWRhJyxcclxuICAgICAgICAgICAgICAgIGxpZmVmb3JtU2V0dGluZ3M6ICdEZWZpbmnDp8O1ZXMgZGUgRm9ybWEgZGUgVmlkYScsXHJcbiAgICAgICAgICAgICAgICByZWxldmFudExpZmVmb3JtQnVpbGRpbmdzOiAnRWTDrWZpY2lvcyBSZWxldmFudGVzIGRlIEZvcm1hIGRlIFZpZGEnLFxyXG4gICAgICAgICAgICAgICAgbGlmZWZvcm1UZWNobm9sb2dpZXM6ICdUZWNub2xvZ2lhcyBkZSBGb3JtYSBkZSBWaWRhJyxcclxuICAgICAgICAgICAgICAgIGlnbm9yZUVtcHR5U2xvdHM6ICdJZ25vcmFyIHNsb3RzIGluYWN0aXZvcycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4cGVkaXRpb25TZXR0aW5nczoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnRGVmaW5pw6fDtWVzIGRlIEV4cGVkacOnw7VlcycsXHJcbiAgICAgICAgICAgICAgICBhdmVyYWdlV2F2ZXNQZXJEYXk6ICfijIAgVmFnYXMgcG9yIGRpYScsXHJcbiAgICAgICAgICAgICAgICBpdGVtczogJ1Nsb3RzIGRlIGl0ZW0nLFxyXG4gICAgICAgICAgICAgICAgYXZlcmFnZUV4cGVkaXRpb25zUGVyRGF5OiAn4oyAIEV4cGVkacOnw7VlcyBwb3IgZGlhJyxcclxuICAgICAgICAgICAgICAgIHNoaXBVbml0RmFjdG9yczogJ0ZhY3RvciBkZSByZWN1cnNvIGRlIG5hdmVzJyxcclxuICAgICAgICAgICAgICAgIHRvcFBsYXllclNjb3JlOiAnUG9udHVhw6fDo28gZG8gVG9wIHBsYXllcicsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5mbzoge1xyXG4gICAgICAgICAgICBnZW5lcmF0aW5nSXRlbXM6ICdBIGNhbGN1bGFyIG9zIHByw7N4aW1vcyBtZWxob3JlcyBpdGVtcycsXHJcblxyXG4gICAgICAgICAgICBzbG93Q2FsY3VsYXRpb246ICdPIGPDoWxjdWxvIGRhIGFtb3J0aXphw6fDo28gZmljYXLDoSBiYXN0YW50ZSBtYWlzIGxlbnRvIGFnb3JhIHF1ZSBvcyBlZGlmw61jaW9zIGUgdGVjbm9sb2dpYXMgZGFzIGZvcm1hcyBkZSB2aWRhIGZvcmFtIGluY2x1w61kYXMuIElzdG8gc2Vyw6EsIHByb3ZhdmVsbWVudGUsIG9wdGltaXphZG8gbm8gZnV0dXJvLicsXHJcbiAgICAgICAgICAgIGN0cmxDbGljazogJ0N0cmwgKyBDbGljayBudW1hIGNoZWNrYm94IHBhcmEgKGRlcylzZWxlY2lvbmFyIHRvZG9zIG9zIGl0ZW0gYXTDqSBhbyBzZWxlY2lvbmFkby4nLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNhdmVMb2FkOiB7XHJcbiAgICAgICAgICAgIHNhdmVCdXR0b246ICdHcmF2YXIgcmVzdWx0YWRvcyBkbyBjw6FsY3VsbyBkYSBhbW9ydGl6YcOnw6NvJyxcclxuICAgICAgICAgICAgbG9hZEJ1dHRvbjogKGRhdGU6IHN0cmluZykgPT4gYENhcnJlZ2FyIGdyYXZhw6fDo28gKCR7ZGF0ZX0pYCxcclxuICAgICAgICAgICAgbG9hZGVkU2F2ZTogKGRhdGU6IHN0cmluZywgaGlkZGVuSXRlbXM6IHN0cmluZykgPT4gYEEgdmVyIG9zIHJlc3VsdGFkb3MgZ3VhcmRhZG9zICgke2RhdGV9KSAtICR7aGlkZGVuSXRlbXN9IGVudHJhZGFzIGVzY29uZGlkYXNgLFxyXG4gICAgICAgICAgICBhYmFuZG9uZWRQbGFuZXQ6ICdQbGFuZXRhIERlc3RydcOtZG8nLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdlbmVyYXRlSXRlbXM6IHZhbHVlID0+IGAke3ZhbHVlfSByZWdpc3Rvc2AsXHJcbiAgICB9LFxyXG4gICAgbGlmZWZvcm1zOiB7XHJcbiAgICAgICAgaGVhZGVyOiAnRm9ybWFzIGRlIFZpZGEnLFxyXG4gICAgICAgIHN1YkhlYWRlcnM6IHtcclxuICAgICAgICAgICAgb3ZlcnZpZXc6ICdSZXN1bW8nLFxyXG4gICAgICAgICAgICBwcm9ncmVzczogJ1Byb2dyZXNzbycsXHJcbiAgICAgICAgICAgIGRpc2NvdmVyeU1pc3Npb25zOiAnTWlzc8O1ZXMnLFxyXG5cclxuICAgICAgICAgICAgZGlzY292ZXJ5UmVzdWx0czogJ1Jlc3VsdGFkb3MnLFxyXG4gICAgICAgICAgICBleHBlcmllbmNlOiAnRXhwZXJpw6puY2lhJyxcclxuICAgICAgICAgICAgcmVzZWFyY2hCb251c2VzOiAnQm9udXMgZGUgUGVzcXVpc2FzJyxcclxuICAgICAgICAgICAgcGxhbmV0Qm9udXNlczogJ0LDs251cyBlZmVjdGl2byBub3MgcGxhbmV0YXMnLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHBsYW5ldDogJ1BsYW5ldGEnLFxyXG4gICAgICAgIGxpZmVmb3JtOiAnRm9ybWEgZGUgVmlkYScsXHJcbiAgICAgICAgYnVpbGRpbmdzOiAnRWRpZsOtY2lvcyBkZSBGb3JtYSBkZSBWaWRhJyxcclxuICAgICAgICB0ZWNobm9sb2dpZXM6ICdUZWNub2xvZ2lhcyBkZSBGb3JtYSBkZSBWaWRhJyxcclxuICAgICAgICB0aWVyOiAnRXNjYWzDo28nLFxyXG4gICAgICAgIGxldmVsOiAnTsOtdmVsJyxcclxuICAgICAgICB0b3RhbExpZmVmb3JtRXhwZXJpZW5jZTogJ0V4cGVyacOqbmNpYSAodG90YWwpJyxcclxuICAgICAgICBkaXNjb3ZlcnlEYXRlVW5rbm93bjogJ0Rlc2NvbmhlY2lkbycsXHJcbiAgICAgICAgbm90RGlzY292ZXJlZFlldDogJ0FpbmRhIG7Do28gZGVzY29iZXJ0bycsXHJcbiAgICAgICAgZGlzY292ZXJ5TWlzc2lvbnM6ICdNaXNzw7VlcyBkZSBEZXNjb2JlcnRhJyxcclxuICAgICAgICBldmVudFR5cGVzOiB7XHJcbiAgICAgICAgICAgIFtMaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZS5ub3RoaW5nXTogJ05hZGEgZW5jb250cmFkbycsXHJcbiAgICAgICAgICAgIFtMaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZS5sb3N0U2hpcF06ICdGcm90YSBkZSBleHBsb3Jhw6fDo28gcGVyZGlkYScsXHJcbiAgICAgICAgICAgIFtMaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZS5uZXdMaWZlZm9ybUZvdW5kXTogJ05vdmEgRm9ybWEgZGUgVmlkYScsXHJcbiAgICAgICAgICAgIFtMaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZS5rbm93bkxpZmVmb3JtRm91bmRdOiAnRXhwZXJpw6puY2lhIGRlIEZvcm1hIGRlIFZpZGEnLFxyXG4gICAgICAgICAgICBbTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUuYXJ0aWZhY3RzXTogJ0FydGVmYWN0b3MgZW5jb250cmFkb3MnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYXJ0aWZhY3RGaW5kaW5nU2l6ZXM6IHtcclxuICAgICAgICAgICAgW0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRBcnRpZmFjdEZpbmRpbmdTaXplLnNtYWxsXTogJ0Rlc2NvYmVydGEgQ29tdW0nLFxyXG4gICAgICAgICAgICBbTGlmZWZvcm1EaXNjb3ZlcnlFdmVudEFydGlmYWN0RmluZGluZ1NpemUubWVkaXVtXTogJ0Rlc2NvYmVydGEgR3JhbmRlJyxcclxuICAgICAgICAgICAgW0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRBcnRpZmFjdEZpbmRpbmdTaXplLmxhcmdlXTogJ0Rlc2NvYmVydGEgRW5vcm1lJyxcclxuICAgICAgICAgICAgW0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRBcnRpZmFjdEZpbmRpbmdTaXplLnN0b3JhZ2VGdWxsXTogJ0FybWF6ZW5hbWVudG8gQ2hlaW8nLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGlmZWZvcm1Gb3VuZDogJ0Zvcm1hIGRlIFZpZGEgZW5jb250cmFkYScsXHJcbiAgICAgICAgYWx3YXlzQXZhaWxhYmxlOiAnU2VtcHJlIGRpc3BvbsOtdmVsJyxcclxuICAgICAgICBhcnRpZmFjdHM6ICdBcnRlZmFjdG9zJyxcclxuXHJcbiAgICAgICAgZXhwZXJpZW5jZVBvaW50czogJ1BvbnRvcyBkZSBFeHBlcmnDqm5jaWEnLFxyXG4gICAgICAgIGRpc2NvdmVyZWRPbjogJ0Zvcm1hIGRlIFZpZGEgZGVzY29iZXJ0YSBlbScsXHJcbiAgICAgICAgbnVtYmVyT2ZMaWZlZm9ybURpc2NvdmVyaWVzOiAnTsO6bWVybyBkZSBkZXNjb2JlcnRhcycsXHJcblxyXG4gICAgICAgIHJlc2VhcmNoQm9udXNlczoge1xyXG4gICAgICAgICAgICBicmVha2Rvd246IHtcclxuICAgICAgICAgICAgICAgIHNsb3Q6ICdTbG90JyxcclxuICAgICAgICAgICAgICAgIHJlc2VhcmNoOiAnUGVzcXVpc2EnLFxyXG4gICAgICAgICAgICAgICAgYm9udXM6ICdCw7NudXMnLFxyXG4gICAgICAgICAgICAgICAgbGlmZWZvcm1CdWlsZGluZ3NCb29zdDogYEJvb3N0IGRlIEVkaWbDrWNpb3MgZGUgRm9ybWEgZGUgVmlkYWAsXHJcbiAgICAgICAgICAgICAgICBsaWZlZm9ybUxldmVsQm9vc3Q6IChsaWZlZm9ybTogc3RyaW5nLCBib29zdDogc3RyaW5nKSA9PiBgQm9vc3QgZGUgTsOtdmVsIGRlIEZvcm1hIGRlIFZpZGEgKCR7bGlmZWZvcm19OiAke2Jvb3N0fSlgLFxyXG4gICAgICAgICAgICAgICAgYnVnQm9vc3Q6ICdCb29zdCBjYXVzYWRvIHBvciBidWdzJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcHJvZHVjdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnUHJvZHXDp8OjbyBkZSBSZWN1cnNvcycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4cGVkaXRpb25GaW5kczoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnRGVzY29iZXJ0YXMgZGFzIEV4cGVkacOnw7VlcycsXHJcbiAgICAgICAgICAgICAgICByZXNvdXJjZXM6ICdSZWN1cnNvcycsXHJcbiAgICAgICAgICAgICAgICBzaGlwczogJ05hdmVzJyxcclxuICAgICAgICAgICAgICAgIGZsZWV0TG9zczogJ0Zyb3RhcyBQZXJkaWRhcycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4cGVkaXRpb25TcGVlZDoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnTcOpZGlhIGRhIGVsb2NpZGFkZSBkZSBjaGVnYWRhIGRhcyBFeHBlZGnDp8O1ZXMnLFxyXG4gICAgICAgICAgICAgICAgYm9udXM6ICdCw7NudXMgZGUgVmVsb2NpZGFkZScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNoaXBzOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdOYXZlcycsXHJcbiAgICAgICAgICAgICAgICBhcm1vcjogJ0JsaW5kYWdlbScsXHJcbiAgICAgICAgICAgICAgICBzaGllbGQ6ICdFc2N1ZG8nLFxyXG4gICAgICAgICAgICAgICAgZGFtYWdlOiAnRGFubycsXHJcbiAgICAgICAgICAgICAgICBjYXJnbzogJ0NhcGFjaWRhZGUnLFxyXG4gICAgICAgICAgICAgICAgc3BlZWQ6ICdWZWxvY2lkYWRlJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGVmZW5zZXM6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ0RlZmVzYXMnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmdWVsQ29uc3VtcHRpb246IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ0NvbnN1bW8gZGUgRGV1dMOpcmlvJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZnVlbFJldHVybjoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnRGV1dMOpcmlvIHJlY3VwZXJhZG8gYW8gdm9sdGFyIHBhcmEgdHLDoXMnLFxyXG4gICAgICAgICAgICAgICAgYm9udXM6ICdEZXV0w6lyaW8gcmVjdXBlcmFkbycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJ1aWxkaW5nQ29zdFRpbWU6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ0N1c3RvJlRlbXBvIGRvcyBFZGlmw61jaW9zJyxcclxuICAgICAgICAgICAgICAgIGNvc3Q6ICdDdXN0bycsXHJcbiAgICAgICAgICAgICAgICB0aW1lOiAnVGVtcG8nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZXNlYXJjaENvc3RUaW1lOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdDdXN0byZUZW1wbyBkYXMgUGVzcXVpc2FzJyxcclxuICAgICAgICAgICAgICAgIHJlc2VhcmNoZXM6ICdQZXNxdWlzYXMnLFxyXG4gICAgICAgICAgICAgICAgbGlmZWZvcm1SZXNlYXJjaGVzOiAnUGVzcXVpc2FzIGRlIEZvcm1hcyBkZSBWaWRhJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY3Jhd2xlcnM6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ1Jhc3RlamFkb3JlcycsXHJcbiAgICAgICAgICAgICAgICBwcm9kdWN0aW9uQm9udXM6ICdQcm9kdcOnw6NvIGRlIFJlY3Vyc29zJyxcclxuICAgICAgICAgICAgICAgIGVuZXJneUNvbnN1bXB0aW9uOiAnQ29uc3VtbyBkZSBFbmVyZ2lhJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGVuQ2FwYWNpdHk6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ0NhcGFjaWRhZGUgZG8gRGVuJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGhhbGFueFJhbmdlOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdBbGNhbmNlIGRvIFBoYWxhbngnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkaXNjb3ZlcnlNaXNzaW9uczoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnVmVsb2NpZGFkZSBkZSBNaXNzw7VlcyBkZSBEZXNjb2JlcnRhJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGxheWVyQ2xhc3Nlczoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnQ2xhc3NlcyBkZSBKb2dhZG9yJyxcclxuXHJcbiAgICAgICAgICAgICAgICBjb2xsZWN0b3I6IHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0aW9uQm9udXM6ICdBdW1lbnRhIGEgcHJvZHXDp8OjbyBkYXMgbWluYXMnLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZXJneVByb2R1Y3Rpb25Cb251czogJ0F1bWVudGEgYSBwcm9kdcOnw6NvIGRlIEVuZXJnaWEnLFxyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydGVyU3BlZWRCb251czogJ0LDs251cyBkZSB2ZWxvY2lkYWRlIGRvcyBjYXJndWVpcm9zJyxcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnRlckNhcmdvQm9udXM6ICdCw7NudXMgZGUgY2FwYWNpZGFkZSBkb3MgY2FyZ3VlaXJvcycsXHJcbiAgICAgICAgICAgICAgICAgICAgY3Jhd2xlclByb2R1Y3Rpb25Cb251czogJ0LDs251cyBuYSBwcm9kdcOnw6NvIGRvcyBSYXN0ZWphZG9yZXMnLFxyXG4gICAgICAgICAgICAgICAgICAgIGdlb2xvZ2lzdENyYXdsZXJBbW91bnRCb251czogJ01haXMgY2FwYWNpZGFkZSBwYXJhIFJhc3RlamFkb3JlcyBjb20gbyBHZcOzbG9nbycsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZGlzY292ZXJlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc2VhcmNoRHVyYXRpb246ICdSZWR1eiB0ZW1wbyBkZSBwZXNxdWlzYScsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5jcmVhc2VkRXhwZWRpdGlvbkZpbmRzOiAnQXVtZW50YSBnYW5ob3MgY29tIGV4cGVkacOnw7VlcycsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFyZ2VyUGxhbmV0czogJ01haW9yZXMgcGxhbmV0YXMgYW8gY29sb25pemFyJyxcclxuICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsRXhwZWRpdGlvblNsb3RzOiAnU2xvdHMgYWRpY2lvbmFpcyBwYXJhIGV4cGVkacOnw7VlcycsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVkdWNlZEV4cGVkaXRpb25Db21iYXRDaGFuY2U6ICdSZWR1eiBwcm9iYWJpbGlkYWRlIGRlIGluaW1pZ29zIG5hIGV4cGVkacOnw6NvJyxcclxuICAgICAgICAgICAgICAgICAgICBwaGFsYW54UmFuZ2U6ICdNYWlvciBhbGNhbmNlIGRvIFBoYWxheCcsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZ2VuZXJhbDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbWJhdFNoaXBTcGVlZDogJ0LDs251cyBkZSB2ZWxvY2lkYWRlIGVtIG5hdmVzIGRlIGNvbWJhdGUnLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlY3ljbGVyU3BlZWQ6ICdCw7NudXMgZGUgdmVsb2NpZGFkZSBub3MgcmVjaWNsYWRvcmVzJyxcclxuICAgICAgICAgICAgICAgICAgICBmdWVsQ29uc3VtcHRpb246ICdSZWR1eiBvIGNvbnN1bW8gZGUgZGV1dMOpcmlvIGVtIHRvZGFzIGFzIG5hdmVzJyxcclxuICAgICAgICAgICAgICAgICAgICBpbmNyZWFzZWRDYXJnb1JlY3ljbGVyc1BhdGhmaW5kZXJzOiAnQXVtZW50YSBhIGNhcGFjaWRhZGUgZG9zIHJlY2ljbGFkb3JlcyBlIGV4cGxvcmFkb3JhcycsXHJcbiAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbENvbWJhdFJlc2VhcmNoTGV2ZWxzOiAnTsOtdmVpcyBhZGljaW9uYWlzIG5hcyBwZXNxdWlzYXMgZGUgY29tYmF0ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbEZsZWV0U2xvdHM6ICdTbG90cyBhZGljaW9uYWlzIHBhcmEgZnJvdGEnLFxyXG4gICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxNb29uRmllbGRzOiAnQ2FtcG9zIGFkaWNpb25haXMgbmFzIGx1YXMnLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICBjbGFzc0JvbnVzOiAnQsOzbnVzIGRhIENsYXNzZScsXHJcbiAgICAgICAgICAgICAgICBib251czogJ0LDs251cycsXHJcbiAgICAgICAgICAgICAgICBiYXNlVmFsdWU6ICdWYWxvciBCYXNlJyxcclxuICAgICAgICAgICAgICAgIHZhbHVlV2l0aEJvbnVzZXM6ICdWYWxvciBjb20gQsOzbnVzJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHBsYW5ldEJvbnVzZXM6IHtcclxuICAgICAgICAgICAgcmVzb3VyY2VQcm9kdWN0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdQcm9kdcOnw6NvIGRlIHJlY3Vyc29zJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGlmZWZvcm1SZXNlYXJjaENvc3RUaW1lOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdUZW1wbyBlIEN1c3RvIGRlIFBlc3F1aXNhcyBkZSBGb3JtYSBkZSBWaWRhJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgd3JlY2tmaWVsZDoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnQ2FtcG8gZGUgRGVzdHJvw6dvcycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0b3BGaW5kczoge1xyXG4gICAgICAgICAgICB0b3BGaW5kczogJ01lbGhvcmVzIERlc2NvYmVydGFzJyxcclxuICAgICAgICAgICAgd29yc3RGaW5kczogJ1Bpb3JlcyBEZXNjb2JlcnRhcycsXHJcblxyXG4gICAgICAgICAgICBzaXplOiAnVGFtYW5obycsXHJcbiAgICAgICAgICAgIGFtb3VudDogJ1F1YW50aWRhZGUnLFxyXG4gICAgICAgICAgICBkYXRlOiAnRGF0YScsXHJcbiAgICAgICAgICAgIGFydGlmYWN0czogJ0FydGlmYWN0b3MnLFxyXG4gICAgICAgICAgICBleHBlcmllbmNlOiAnWFAnLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG59OyIsImltcG9ydCB7IFJlY3Vyc2l2ZVBhcnRpYWwgfSBmcm9tIFwiQC9zaGFyZWQvdHlwZXMvUmVjdXJzaXZlUGFydGlhbFwiO1xyXG5pbXBvcnQgeyBTd2l0Y2hBY2NvdW50c1RyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBwdF9wdDogUmVjdXJzaXZlUGFydGlhbDxTd2l0Y2hBY2NvdW50c1RyYW5zbGF0aW9ucz4gPSB7XHJcbiAgICB0aXRsZTogJ1NlbGVjaW9uYSB1bWEgY29udGEgcGFyYSBhYnJpciBudW1hIG5vdmEgdGFiJyxcclxufTtcclxuIiwiaW1wb3J0IHsgUmVjdXJzaXZlUGFydGlhbCB9IGZyb20gXCJAL3NoYXJlZC90eXBlcy9SZWN1cnNpdmVQYXJ0aWFsXCI7XHJcbmltcG9ydCB7IEFib3V0VHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHB0X3B0OiBSZWN1cnNpdmVQYXJ0aWFsPEFib3V0VHJhbnNsYXRpb25zPiA9IHtcclxuICAgIGZhcUhlbHA6IHtcclxuICAgICAgICBoZWFkZXI6ICdBanVkYScsXHJcbiAgICAgICAgZmFxOiB7XHJcbiAgICAgICAgICAgIGhlYWRlcjogJ0YuQS5RLicsXHJcbiAgICAgICAgICAgIGZsZWV0TG9zdE9uRXhwZWRpdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnUG9ycXVlIHF1ZSDDqSBxdWUgYXMgbmF2ZXMgcGVyZGlkYXMgZW0gZXhwZWRpw6fDtWVzIG7Do28gc8OjbyBjb250YWJpbGl6YWRhcz8nLFxyXG4gICAgICAgICAgICAgICAgdGV4dDogJ0NvbnRhYmlsaXphciBhcyBuYXZlcyBwZXJkaWRhcyBlbSBleHBlZGnDp8O1ZXMgcmVxdWVyIGZhemVyIG1vbml0b3JpemHDp8OjbyBwZXJtYW5lbnRlIGEgdG9kYXMgYXMgZnJvdGFzLCBvIHF1ZSBuw6NvIMOpIHBvc3PDrXZlbC4nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzeW5jQmV0d2VlbkRldmljZXM6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ1BvcnF1ZSDDqSBxdWUgbsOjbyBleGlzdGUgc2luY3Jvbml6YcOnw6NvIGRvcyBtZXVzIGRhZG9zIGVudHJlIHbDoXJpb3MgZGlzcG9zaXRpdm9zPycsXHJcbiAgICAgICAgICAgICAgICB0ZXh0OiAnTyBPZ2FtZSBUcmFja2VyIGd1YXJkYSBtYWlzIGluZm9ybWHDp8OjbyBkbyBxdWUgYXF1ZWxhIHF1ZSBwb2RlIHNlciBzaW5jcm9uaXphZGEgdXNhbmRvIGEgdHVhIGNvbnRhIChHb29nbGUsIE1pY3Jvc29mdCwgZXRjKS4gQSBzaW5jcm9uaXphw6fDo28gY29tIHVtIHNlcnZpZG9yIGV4dGVybm9zIHBvZGVyw6Egc2VyIHVtYSBwb3NzaWJpbGlkYWRlIG5vIGZ1dHVyby4nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwcm9kdWN0aW9uSW5SZXNvdXJjZUJhbGFuY2U6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ1BvcnF1ZSDDqSBxdWUgYSBlc3RpbWF0aXZhIGRlIHJlY3Vyc29zIG7Do28gaW5jbHVpIGEgbWluaGEgcHJvZHXDp8OjbyBkZSByZWN1cnNvcz8nLFxyXG4gICAgICAgICAgICAgICAgdGV4dDogJ0EgdHVhIHByb2R1w6fDo28gZGUgcmVjdXJzb3MgZGVwZW5kZSBkZSB2w6FyaW9zIGZhY3RvcmVzIGUgc2VyaWEgbmVjZXNzw6FyaW8gdW1hIG1vbml0b3JpemHDp8OjbyBwZXJtYW5lbnRlLiDDiSBwb3Nzw612ZWwgbWFzIGEgaW1wbGVtZW50YcOnw6NvIGRlc3RhIGZ1bmNpb25hbGlkYWRlIMOpIG11aXRvIG1haXMgY29tcGxleGEgZG8gcXVlIGEgdXRpbGl6YWRlIHJlYWwgcGFyYSBvIGpvZ2Fkb3IuJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgd2hhdEFyZUF2ZXJhZ2VzOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdPIHF1ZSBzaWduaWZpY2EgXFwn4oyAIHBvciBkaWFcXCc/JyxcclxuICAgICAgICAgICAgICAgIHRleHQ6ICdTaWduaWZpY2EgYSBtw6lkaWEgZ2xvYmFsIGRlIGRpYXMgY29tIHBlbG8gbWVub3MgdW0gZXZlbnRvLicsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0aXBzOiB7XHJcbiAgICAgICAgICAgIGhlYWRlcjogJ0RpY2FzJyxcclxuICAgICAgICAgICAgcmlnaHRDbGlja0RlZmF1bHRSb3V0ZTogJ1BvZGVzIHVzYXIgbyBib3TDo28gZGlyZWl0byBkbyByYXRvbmEgdGFiIHByaW5jaXBhbCBkbyBsYWRvIGVzcXVlcmRvIG91IGVtIHF1YWxxdWVyIHN1Yi1tZW51IHBhcmEgbyB0b3JuYXIgY29tbyBzdGFuZGFyZCBwYXJhIGEgcm90YSBzZWxlY2lvbmFkYS4nLFxyXG4gICAgICAgICAgICBudW1iZXJzS2V5Ym9hcmROYXZpZ2F0aW9uOiAnUG9kZXMgYWJyaXIgYXMgdGFiIGNhcnJlZ2FuZG8gbm8gcmVzcGVjdGl2byBkaWdpdG8gbm8gdGVjbGFkby4nLFxyXG4gICAgICAgICAgICBhbW9ydGl6YXRpb25UYWJsZToge1xyXG4gICAgICAgICAgICAgICAgcGFydDE6ICdRdWVyZXMgc2FiZXIgbyBxdWUgY29uc3RydWlyIG91IHBlc3F1aXNhciBwYXJhIGF1bWVudGFyIGEgdHVhIHByb2R1w6fDo28gZGUgcmVjdXJzb3MgZGEgbWFuZWlyYSBtYWlzIGVmaWNpZW50ZT8gVGVudGEgYVxceGEwJyxcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdjYWxjdWxhZG9yYSBkZSBhbW9ydGl6YcOnw6NvIGludGVyYWN0aXZhJyxcclxuICAgICAgICAgICAgICAgIHBhcnQyOiAnLicsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGlubGluZVNldHRpbmdzOiAnUG9kZXLDoXMgYWx0ZXJhIGFzIGRlZmluacOnw7VlcyByZWxhY2lvbmFkYXMgY2xpY2FuZG8gbm8gw61jb25lIGRhIHJvZGEgZGVudGFkYSBubyBsYWRvIGRpcmVpdG8uJyxcclxuICAgICAgICAgICAgc3dpdGNoQWNjb3VudEh0bWw6ICdQb2RlcsOhcyBhYnJpciBvIE9HYW1lIFRyYWNrZXIgcGFyYSB1bWEgb3V0cmEgY29udGEgY2xpY2FuZG8gbm8gw61jb25lIDxzcGFuIGNsYXNzPVwibWRpIG1kaS1hY2NvdW50LW11bHRpcGxlXCI+PC9zcGFuPiBlIHNlbGVjaW9uYW5kbyBhIHJlc3BlY3RpdmEgY29udGEuJyxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBtZXNzYWdlRGlzY29yZDoge1xyXG4gICAgICAgICAgICBwYXJ0MTogJ1ByZWNpc2FzIGRlIGFqdWRhLCBlbmNvbnRyYXN0ZSB1bSBidWcgb3UgdGVucyBhbGd1bWEgZnVuY2lvbmFsaWRhZGUgcXVlIHF1ZWlyYXMgdmVyIGltcGxlbWVudGFkYT8gRW50cmEgbm9cXHhhMCcsXHJcbiAgICAgICAgICAgIGRpc2NvcmRTZXJ2ZXI6ICdEaXNjb3JkJyxcclxuICAgICAgICAgICAgcGFydDI6ICdcXHhhMGUgZXNjcmV2ZSB1bWEgbWVuc2FnZW0gbm8gY2FuYWwgYWRlcXVhZG8uJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIGluZm86IHtcclxuICAgICAgICBoZWFkZXI6ICdJbmZvJyxcclxuICAgICAgICB0YWJsZToge1xyXG4gICAgICAgICAgICBjdXJyZW50QWNjb3VudDoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnSW5mb3JtYcOnw6NvIGFjZXJjYSBkYSBjb250YSBzZWxlY2lvbmFkYScsXHJcbiAgICAgICAgICAgICAgICBudW1iZXJPZlRyYWNrZWRFeHBlZGl0aW9uczogJ07Dum1lcm8gZGUgZXhwZWRpw6fDtWVzIG1vbml0b3JpemFkYXMnLFxyXG4gICAgICAgICAgICAgICAgbnVtYmVyT2ZUcmFja2VkQ29tYmF0UmVwb3J0czogJ07Dum1lcm8gZGUgcmVsYXTDs3Jpb3MgZGUgY29tYmF0ZSBtb25pdG9yaXphZG9zICcsXHJcbiAgICAgICAgICAgICAgICBudW1iZXJPZlRyYWNrZWREZWJyaXNGaWVsZFJlcG9ydHM6ICdOw7ptZXJvIGRlIHJlbGF0w7NyaW9zIGRlIHJlY2ljbGFnZW0gbW9uaXRvcml6YWRvcycsXHJcbiAgICAgICAgICAgICAgICBudW1iZXJPZlRyYWNrZWRMaWZlZm9ybURpc2NvdmVyaWVzOiAnTsO6bWVybyBkZSBleHBsb3Jhw6fDtWVzIG1vbml0b3JpemFkYXMnLFxyXG4gICAgICAgICAgICAgICAgbGFzdFVwZGF0ZVNlcnZlclNldHRpbmdzOiAnw5psdGltYSBhY3R1YWxpemHDp8OjbyBkYXMgZGVmaW5pw6fDtWVzIGRvIHNlcnZpZG9yJyxcclxuICAgICAgICAgICAgICAgIG51bWJlck9mVW5pdmVyc2VIaXN0b3J5RW50cmllczogJ07Dum1lcm8gZGUgcmVnaXN0b3Mgbm8gaGlzdG9yaWNvIGRvIHVuaXZlcnNvJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2xvYmFsOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdJbmZvcm1hw6fDo28gYWNlcmNhIGRlIHRvZG9zIG9zIGRhZG9zIG5vIE9HYW1lIFRyYWNrZXInLFxyXG4gICAgICAgICAgICAgICAgbnVtYmVyT2ZUcmFja2VkQWNjb3VudHM6ICdOw7ptZXJvIGRlIGNvbnRhcyBtb25pdG9yaXphZGFzJyxcclxuICAgICAgICAgICAgICAgIGVzdGltYXRlZFNpemU6ICdUYW1hbmhvIGRvcyBkYWRvcyBndWFyZGFkb3MgZW0gZGlzY28nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG59O1xyXG4iLCJpbXBvcnQgeyBSZWN1cnNpdmVQYXJ0aWFsIH0gZnJvbSBcIkAvc2hhcmVkL3R5cGVzL1JlY3Vyc2l2ZVBhcnRpYWxcIjtcclxuaW1wb3J0IHsgVW5pdmVyc2VIaXN0b3J5VHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHB0X3B0OiBSZWN1cnNpdmVQYXJ0aWFsPFVuaXZlcnNlSGlzdG9yeVRyYW5zbGF0aW9ucz4gPSB7XHJcbiAgICBoZWFkZXI6ICdIaXN0w7NyaWNvIGRvIFVuaXZlcnNvJyxcclxuICAgIHNldHRpbmdzOiB7ICBcclxuICAgICAgICBtZXNzYWdlczoge1xyXG4gICAgICAgICAgICBub3RFbmFibGVkSHRtbDogYFxyXG4gICAgICAgICAgICA8Yj5Nb25pdG9yaXphw6fDo28gZG8gaGlzdMOzcmljbyBkYXMgdGFiZWxhcyBkZSBwb250dWHDp8OjbyBuw6NvIGVzdMOhIGFjdGl2by48L2I+PGJyLz5cclxuICAgICAgICAgICAgQWN0aXZhciBlc3RhIGZ1bmNpb25hbGlkYWRlIGZhcsOhIGNvbSBxdWUgYXMgcG9udHVhw6fDtWVzIGRvcyBqb2dhZG9yZXMgZSBhbGlhbsOnYXMgc2VqYW0gbW9uaXRvcml6YWRvcy5gLFxyXG4gICAgICAgICAgICBoaXN0b3J5VHJhY2tpbmdOb3RFbmFibGVkSHRtbDogYFxyXG4gICAgICAgICAgICA8Yj5Nb25pdG9yaXphw6fDo28gZG8gaGlzdMOzcmljbyBkbyB1bml2ZXJzbyBuw6NvIGVzdMOhIGFjdGl2YWRvLjwvYj48YnIvPlxyXG4gICAgICAgICAgICBBY3RpdmFyIGVzdGEgZnVuY2lvbmFsaWRhZGUgZmFyw6EgY29tIHF1ZSB0b2RhcyBhcyBhbHRlcmHDp8O1ZXMgYSBqb2dhZG9yZXMgb3UgYWxpYW7Dp2FzIHNlamEgbW9uaXRvcml6YWRhLjxici8+XHJcbiAgICAgICAgICAgIElzdG8gaW5jbHXDrXJhIG5vbWVzIGRlIGpvZ2Fkb3JlcyBlIGFsaWFuw6dhcywgdGFncyBkZSBhbGlhbsOnYXMsIGVudHJhZGFzIGUgc2HDrWRhcyBkZSBtZW1icm9zIGRlIGFsaWFuw6dhcywgXHJcbiAgICAgICAgICAgIGVzdGFkb3MgZG9zIGpvZ2Fkb3JlcyBlIGFsdGVyYcOnw7VlcyByZWxhdGl2YXMgYSBwbGFuZXRhcyBlIGx1YXMgXHJcbiAgICAgICAgICAgIGluY2x1aW5kbyBub21lcywgY29vcmRlbmFkYXMgZSBhYmFuZG9ub3MvZGVzdHJ1acOnw6NvIGRlIHBsYW5ldGFzIGUgdHVhcyAuPGJyIC8+XHJcbiAgICAgICAgICAgIDxpPklzdG8gaXLDoSBnZXJhciB1bWEgZ3JhbmRlIHF1YW50aWRhZGUgZGUgZGFkb3MhXHJcbiAgICAgICAgICAgIFBvZGVyw6FzIGRlc2FjdGl2YXIgZXN0YSBmdW5jaW9uYWxpZGFkZSA8YSBocmVmPVwiIy9zZXR0aW5ncy91bml2ZXJzZS1oaXN0b3J5XCI+bmVzdGUgbWVudSBkZSBkZWZpbmnDp8O1ZXM8L2E+LjwvaT5cclxuICAgICAgICAgICAgYCxcclxuICAgICAgICAgICAgdHJhY2tpbmdUaW1lc0h0bWw6IGBcclxuICAgICAgICAgICAgUGVsbyBtZW5vcyB1bWEgdmV6IHBvciBkaWEgYXMgcG9udHVhw6fDtWVzIGUgb3MgZGFkb3MgZG8gdW5pdmVyc28gc2Vyw6NvIGFjdHVhbGl6YWRvcyAoc2UgYSBmdW5jaW9uYWxpZGFkZSBlc3RpdmVyIGFjdGl2YSkuPGJyLz5cclxuICAgICAgICAgICAgUG9kZXLDoXMgdmVyIG8gbW9tZW50byBkbyB1cGRhdGUgYWJhaXhvLlxyXG4gICAgICAgICAgICBTZSB1bWEgYWN0dWFsaXphw6fDo28gZm9yIHBlcmRpZGEgcG9yIGFsZ3VtIG1vdGl2byBzZXLDoSBmZWl0YSBub3ZhbWVudGUgYXNzaW0gcXVlIHBvc3PDrXZlbC5gXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbmFibGVIaWdoc2NvcmVUcmFja2luZ09ubHk6ICdBY3RpdmFyIG1vbml0b3JpemHDp8OjbyBkYXMgcG9udHVhw6fDtWVzIGRvIHVuaXZlcnNvJyxcclxuICAgICAgICBlbmFibGVIaXN0b3J5VHJhY2tpbmc6ICdBY3RpdmFyIGEgbW9uaXRvcml6YcOnw6NvIGRvIGhpc3RvcmljbyBkbyB1bml2ZXJzbycsXHJcbiAgICB9LFxyXG5cclxuICAgIHRhYnM6IHtcclxuICAgICAgICBwbGF5ZXJzOiAnSm9nYWRvcmVzJyxcclxuICAgICAgICBhbGxpYW5jZXM6ICdBbGlhbsOnYXMnLFxyXG5cclxuICAgICAgICBzdWJ0YWJzOiB7XHJcbiAgICAgICAgICAgIGhpZ2hzY29yZTogJ1BvbnR1YcOnw7VlcycsXHJcbiAgICAgICAgICAgIGhpc3Rvcnk6ICdIaXN0w7NyaWNvJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuXHJcbiAgICBwbGF5ZXJTZWxlY3Rpb246IHtcclxuICAgICAgICBoZWFkZXI6ICdTZWxlw6fDo28gZGUgam9nYWRvcmVzJyxcclxuICAgICAgICBzZWFyY2g6ICdwcm9jdXJhciBqb2dhZG9yJyxcclxuICAgIH0sXHJcbiAgICBhbGxpYW5jZVNlbGVjdGlvbjoge1xyXG4gICAgICAgIGhlYWRlcjogJ1NlbGXDp8OjbyBkZSBhbGlhbsOnYXMnLFxyXG4gICAgICAgIHNlYXJjaDogJ3Byb2N1cmFyIGFsaWFuw6dhJyxcclxuICAgIH0sXHJcblxyXG4gICAgaGlnaHNjb3JlVGFiczoge1xyXG4gICAgICAgIHRvdGFsOiAnVG90YWwnLFxyXG4gICAgICAgIGVjb25vbXk6ICdFY29ub21pYScsXHJcbiAgICAgICAgcmVzZWFyY2g6ICdQZXNxdWlzYXMnLFxyXG4gICAgICAgIG1pbGl0YXJ5OiAnTWlsaXRhcicsXHJcbiAgICAgICAgbWlsaXRhcnlCdWlsdDogJ01pbGl0YXIgY29uc3RydcOtZG8nLFxyXG4gICAgICAgIG1pbGl0YXJ5RGVzdHJveWVkOiAnTWlsaXRhciBkZXN0cnXDrWRvJyxcclxuICAgICAgICBtaWxpdGFyeUxvc3Q6ICdNaWxpdGFyIHBlcmRpZG8nLFxyXG4gICAgICAgIGhvbm9yOiAnSG9ucmEnLFxyXG4gICAgICAgIG51bWJlck9mU2hpcHM6ICdOw7ptZXJvIGRlIG5hdmVzJyxcclxuICAgICAgICBsaWZlZm9ybTogJ0Zvcm1hcyBkZSBWaWRhJyxcclxuICAgICAgICBsaWZlZm9ybURpc2NvdmVyaWVzOiAnRGVzY29iZXJ0YXMgZGUgRm9ybWFzIGRlIFZpZGEnLFxyXG4gICAgICAgIGxpZmVmb3JtRWNvbm9teTogJ0Vjb25vbWlhIGRlIEZvcm1hcyBkZSBWaWRhJyxcclxuICAgICAgICBsaWZlZm9ybVRlY2hub2xvZ3k6ICdUZWNub2xvZ2lhIGRlIEZvcm1hcyBkZSBWaWRhJyxcclxuICAgIH0sXHJcbiAgICBoaXN0b3J5VGFiczoge1xyXG4gICAgICAgIHN0YXR1czogJ0VzdGFkbycsXHJcbiAgICAgICAgbmlja25hbWVzOiAnTmlja3MnLFxyXG4gICAgICAgIGFsbGlhbmNlczogJ0FsaWFuw6dhcycsXHJcbiAgICAgICAgcGxhbmV0QW5kTW9vbnM6ICdQbGFuZXRhcyBlIEx1YXMnLFxyXG5cclxuICAgICAgICB0YWdzOiAnVGFncycsXHJcbiAgICAgICAgbmFtZXM6ICdOb21lcycsXHJcbiAgICAgICAgbWVtYmVyczogJ01lbWJyb3MnLFxyXG4gICAgfSxcclxuXHJcbiAgICBub0FsbGlhbmNlOiAnU2VtIEFsaWFuw6dhJyxcclxuICAgIHRvZGF5OiAnaG9qZScsXHJcbiAgICBuYW1lOiAnTm9tZScsXHJcbiAgICB0YWc6ICdUYWcnLFxyXG4gICAgbWVtYmVyczogJ01lbWJyb3MnLFxyXG4gICAgYWxsaWFuY2U6ICdBbGlhbsOnYScsXHJcbiAgICBmcm9tOiAnRGUnLFxyXG4gICAgdW50aWw6ICdBdMOpJyxcclxuXHJcbiAgICBzdGF0dXM6IHtcclxuICAgICAgICBhY3RpdmU6ICdBY3Rpdm8nLFxyXG4gICAgICAgIHZhY2F0aW9uOiAnTW9kbyBkZSBGw6lyaWFzJyxcclxuICAgICAgICBpbmFjdGl2ZTogJ0luYWN0aXZvICg+PSA3IGRpYXMpJyxcclxuICAgICAgICBpbmFjdGl2ZUxvbmc6ICdJYW5jdGl2byAoPj0gMjggZGlhcyknLFxyXG4gICAgICAgIGJhbm5lZDogJ0JhbmlkbycsXHJcbiAgICAgICAgb3V0bGF3OiAnRm9yYSBkYSBMZWknLFxyXG4gICAgICAgIGRlbGV0ZWQ6ICdBcGFnYWRvJyxcclxuICAgICAgICBhZG1pbjogJ0FkbWluaXN0cmFkbycsXHJcbiAgICB9LFxyXG5cclxuICAgIGxvYWRpbmdUYWtpbmdMb25nOiAnQ2FycmVnYXIgb3MgZGFkb3MgZXN0w6EgYSBkZW1vcmFyIG1haXMgZG8gcXVlIGVyYSBlc3BlcmFkby4gQSBiYXNlIGRlIGRhZG9zIHBvZGVyw6EgZXN0w6EgYSBzZXIgYWN0dWFsaXphZGEgbmVzdGUgbW9tZW50by4gRXNwZXJhIHVtIHBvdWNvIG1haXMgb3UgdGVudGEgbWFpcyB0YXJkZS4nLFxyXG59OyIsImltcG9ydCB7IFJlY3Vyc2l2ZVBhcnRpYWwgfSBmcm9tIFwiQC9zaGFyZWQvdHlwZXMvUmVjdXJzaXZlUGFydGlhbFwiO1xyXG5pbXBvcnQgeyBOb3RpZmljYXRpb25UcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgcHRfcHQ6IFJlY3Vyc2l2ZVBhcnRpYWw8Tm90aWZpY2F0aW9uVHJhbnNsYXRpb25zPiA9IHtcclxuICAgIGNvbWJhdFRyYWNraW5nOiB7XHJcbiAgICAgICAgdGl0bGU6ICh2YWx1ZTogc3RyaW5nKSA9PlxyXG4gICAgICAgICAgICB2YWx1ZSA9PSAnMSdcclxuICAgICAgICAgICAgICAgID8gYCR7dmFsdWV9IG5vdm8gcmVsYXRvcmlvIGRlIGNvbWJhdGUgbW9uaXRvcml6YWRvYFxyXG4gICAgICAgICAgICAgICAgOiBgJHt2YWx1ZX0gbm92b3MgcmVsYXTDs3Jpb3MgZGUgY29tYmF0ZSBtb25pdG9yaXphZG9zYCxcclxuICAgICAgICBtZXNzYWdlOiAodmFsdWU6IHN0cmluZykgPT5cclxuICAgICAgICAgICAgdmFsdWUgPT0gJzEnXHJcbiAgICAgICAgICAgICAgICA/IGAke3ZhbHVlfSBub3ZvIHJlbGF0b3JpbyBkZSBjb21iYXRlIGZvaSBncmF2YWRvLmBcclxuICAgICAgICAgICAgICAgIDogYCR7dmFsdWV9IG5vdm9zIHJlbGF0w7NyaW9zIGRlIGNvbWJhdGUgZm9yYW0gZ3JhdmFkb3MuYCxcclxuICAgIH0sXHJcbiAgICBkZWJyaXNGaWVsZFJlcG9ydFRyYWNraW5nOiB7XHJcbiAgICAgICAgdGl0bGU6ICh2YWx1ZTogc3RyaW5nKSA9PlxyXG4gICAgICAgICAgICB2YWx1ZSA9PSAnMSdcclxuICAgICAgICAgICAgICAgID8gYCR7dmFsdWV9IG5vdm8gY2FtcG8gZGUgZGVzdHJvw6dvcyBtb25pdG9yaXphZG9gXHJcbiAgICAgICAgICAgICAgICA6IGAke3ZhbHVlfSBub3ZvcyBjYW1wb3MgZGUgZGVzdHJvw6dvcyBtb25pdG9yaXphZG9zYCxcclxuICAgICAgICBtZXNzYWdlOiAodmFsdWU6IHN0cmluZykgPT5cclxuICAgICAgICAgICAgdmFsdWUgPT0gJzEnXHJcbiAgICAgICAgICAgICAgICA/IGAke3ZhbHVlfSBub3ZvIGNhbXBvIGRlIGRlc3Ryb8Onb3MgZm9pIGdyYXZhZG8uYFxyXG4gICAgICAgICAgICAgICAgOiBgJHt2YWx1ZX0gbm92b3MgY2FtcG9zIGRlIGRlc3Ryb8Onb3MgZm9yYW0gZ3JhdmFkb3MuYCxcclxuICAgIH0sXHJcbiAgICBleHBlZGl0aW9uVHJhY2tpbmc6IHtcclxuICAgICAgICBmbGVldExvc3Q6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICh2YWx1ZTogc3RyaW5nKSA9PlxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPT0gJzEnXHJcbiAgICAgICAgICAgICAgICAgICAgPyBgJHt2YWx1ZX0gZnJvdGEgcGVyZGlkYWBcclxuICAgICAgICAgICAgICAgICAgICA6IGAke3ZhbHVlfSBmcm90YXMgcGVyZGlkYXNgLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiAodmFsdWU6IHN0cmluZykgPT5cclxuICAgICAgICAgICAgICAgIHZhbHVlID09ICcxJ1xyXG4gICAgICAgICAgICAgICAgICAgID8gYCR7dmFsdWV9IGZyb3RhIG7Do28gcmV0b3Jub3UgZGEgZXhwZWRpw6fDo28uYFxyXG4gICAgICAgICAgICAgICAgICAgIDogYCR7dmFsdWV9IGZyb3RhcyBuYW8gcmV0b3JuYXJhbSBkYXMgZXhwZWRpw6fDtWVzLmAsXHJcbiAgICAgICAgfSxcclxuICAgICAgICByZXN1bHQ6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICh2YWx1ZTogc3RyaW5nKSA9PlxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPT0gJzEnXHJcbiAgICAgICAgICAgICAgICAgICAgPyBgJHt2YWx1ZX0gbm92YSBleHBlZGnDp8OjbyBtb25pdG9yaXphZGFgXHJcbiAgICAgICAgICAgICAgICAgICAgOiBgJHt2YWx1ZX0gbm92YXMgZXhwZWRpw6fDtWVzIG1vbml0b3JpemFkYXNgLFxyXG4gICAgICAgICAgICBzdW1tYXJ5OiAnUmVzdW1vIGRhcyBkZXNjb2JlcnRhcycsXHJcbiAgICAgICAgICAgIGV2ZW50czogJ0V2ZW50b3MgZGUgRXhwZWRpw6fDtWVzJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIGxpZmVmb3JtRGlzY292ZXJ5VHJhY2tpbmc6IHtcclxuICAgICAgICB0aXRsZTogKHZhbHVlOiBzdHJpbmcpID0+XHJcbiAgICAgICAgICAgIHZhbHVlID09ICcxJ1xyXG4gICAgICAgICAgICAgICAgPyBgJHt2YWx1ZX0gbm92YSBkZXNjb2JlcnRhIGRlIGZvcm1hIGRlIHZpZGEgbW9uaXRvcml6YWRhYFxyXG4gICAgICAgICAgICAgICAgOiBgJHt2YWx1ZX0gbm92YXMgZGVzY29iZXJ0YXMgZGUgZm9ybWEgZGUgdmlkYSBtb25pdG9yaXphZGFzYCxcclxuICAgICAgICBtZXNzYWdlOiAodmFsdWU6IHN0cmluZykgPT4gXHJcbiAgICAgICAgdmFsdWUgPT0gJzEnXHJcbiAgICAgICAgICAgID8gYCR7dmFsdWV9IG5vdmEgZGVzY29iZXJ0YSBkZSBmb3JtYSBkZSB2aWRhIGd1YXJkYWRhLmBcclxuICAgICAgICAgICAgOiBgJHt2YWx1ZX0gbm92YXMgZGVzY29iZXJ0YXMgZGUgZm9ybWEgZGUgdmlkYSBndWFyZGFkYXMuYCxcclxuICAgIH0sXHJcblxyXG4gICAgbWVzc2FnZVRyYWNraW5nRXJyb3I6IHtcclxuICAgICAgICB0aXRsZTogKHZhbHVlOiBzdHJpbmcpID0+XHJcbiAgICAgICAgICAgIHZhbHVlID09ICcxJ1xyXG4gICAgICAgICAgICAgICAgPyBgRmFsaG91IG8gcHJvY2Vzc2FtZW50byBkZSAke3ZhbHVlfSBtZW5zYWdlbWBcclxuICAgICAgICAgICAgICAgIDogYEZhbGhvdSBvIHByb2Nlc3NhbWVudG8gZGUgJHt2YWx1ZX0gbWVuc2FnZW5zYCxcclxuICAgICAgICBtZXNzYWdlOiAodmFsdWU6IHN0cmluZykgPT5cclxuICAgICAgICAgICAgdmFsdWUgPT0gJzEnXHJcbiAgICAgICAgICAgICAgICA/IGAke3ZhbHVlfSBtZW5zYWdlbSBjYXVzb3UgdW0gZXJybyBlIG7Do28gZm9pIG1vbml0b3JpemFkYS4gQSBtZW5zYWdlbSBlbSBjYXVzYSBmb2kgbWFyY2FkYSBhIHZlcm1lbGhvLiBDb250YWN0YSBvIGRldmVsb3BlciB2aWEgRGlzY29yZC5gXHJcbiAgICAgICAgICAgICAgICA6IGAke3ZhbHVlfSBtZW5zYWdlbnMgY2F1c2FyYW0gdW0gZXJybyBlIG7Do28gZm9yYW0gbW9uaXRvcml6YWRhcy4gQXMgbWVuc2FnZW5zIGVtIGNhdXNhIGRvcmFtIG1hcmNhZGFzIGEgdmVybWVsaG8uIENvbnRhY2F0YSBvIGRldmVsb3BlciB2aWEgRGlzY29yZC5gLFxyXG4gICAgfSxcclxufTsiLCJpbXBvcnQgeyBSZWN1cnNpdmVQYXJ0aWFsIH0gZnJvbSBcIkAvc2hhcmVkL3R5cGVzL1JlY3Vyc2l2ZVBhcnRpYWxcIjtcclxuaW1wb3J0IHsgVG9vbHNUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgcHRfcHQ6IFJlY3Vyc2l2ZVBhcnRpYWw8VG9vbHNUcmFuc2xhdGlvbnM+ID0ge1xyXG4gICAgc2lnbmF0dXJlR2VuZXJhdG9yOiB7XHJcbiAgICAgICAgaGVhZGVyOiAnR2VyYWRvciBkZSBBc3NpbmF0dXJhJyxcclxuICAgICAgICBcclxuICAgICAgICBhdmVyYWdlUGVySG91cjogJ+KMgC9ob3JhJyxcclxuICAgICAgICB0b3RhbFBlckhvdXI6ICdwb3IgaG9yYScsXHJcbiAgICAgICAgdG90YWxQZXJEYXk6ICdwb3IgZGlhJyxcclxuICAgICAgICB0b3RhbFBlcldlZWs6ICdwb3Igc2VtYW5hJyxcclxuICAgICAgICBwcm9kdWN0aW9uOiAnUHJvZHXDp8OjbycsXHJcblxyXG4gICAgICAgIGV4cGVkaXRpb25zOiAnRXhwZWRpw6fDtWVzJyxcclxuICAgICAgICBsaWZlZm9ybURpc2NvdmVyaWVzOiAnTWlzc8O1ZXMgRlYnLFxyXG4gICAgICAgIGNvbWJhdHM6ICdDb21iYXRlcycsXHJcbiAgICAgICAgZGVicmlzRmllbGRSZXBvcnRzOiAnRGVzdHJvw6dvcyByZWNpY2xhZG9zJyxcclxuICAgIH0sXHJcbiAgICBzY3JhcHlhcmRNZXJjaGFudDoge1xyXG4gICAgICAgIGhlYWRlcjogJ01lcmNhZG9yIGRlIFN1Y2F0YScsXHJcbiAgICAgICAgcGVyY2VudGFnZTogJyUgbm8gTWVyY2Fkb3IgZGUgU3VjYXRhJyxcclxuICAgICAgICBjb3VudDogJ0NvbnRhZ2VtJyxcclxuICAgIH0sXHJcbn07XHJcbiIsImltcG9ydCB7IFJlY3Vyc2l2ZVBhcnRpYWwgfSBmcm9tIFwiQC9zaGFyZWQvdHlwZXMvUmVjdXJzaXZlUGFydGlhbFwiO1xyXG5pbXBvcnQgeyBFeGNlbEV4cG9ydFRyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBwdF9wdDogUmVjdXJzaXZlUGFydGlhbDxFeGNlbEV4cG9ydFRyYW5zbGF0aW9ucz4gPSB7XHJcbiAgICBoZWFkZXI6ICdFeHBvcnRhciBwYXJhIEV4Y2VsJyxcclxuICAgIGNob29zZUJlbG93TWVzc2FnZTogJ0VzY29saGUgcXVlIGRhZG9zIHF1ZXJlcyBpbmNsdWlyIG5hIGV4cG9ydGHDp8OjbzonLFxyXG4gICAgZ3JvdXBzOiB7XHJcbiAgICAgICAgZXhwZWRpdGlvbnM6IHtcclxuICAgICAgICAgICAgaGVhZGVyOiAnRXhwZWRpw6fDtWVzJyxcclxuICAgICAgICAgICAgcmF3RGF0YTogJ0RhZG9zIGVtIGJydXRvICh0b2RvcyBvcyByZWdpc3RvcyBndWFyZGFkb3MpJyxcclxuICAgICAgICAgICAgZGFpbHlPdmVydmlldzogJ1Jlc3VtbyBkb3MgcmVzdWx0YWRvcyBwb3IgZGlhJyxcclxuICAgICAgICAgICAgZGFpbHlEZXBsZXRpb246ICdSZXN1bW8gZG8gZGVzZ2FzdGUgZG8gc2lzdGVtYSBwb3IgZGlhJyxcclxuICAgICAgICAgICAgZGFpbHlSZXNvdXJjZXM6ICdEZXNjb2JlcnRhcyBkZSByZWN1cnNvcyBwb3IgZGlhJyxcclxuICAgICAgICAgICAgZGFpbHlSZXNvdXJjZVNpemVzOiAnVGFtYW5obyBkYXMgZGVzY29iZXJ0YXMgZGUgcmVjdXJzb3MgcG9yIGRpYScsXHJcbiAgICAgICAgICAgIGRhaWx5U2hpcHM6ICdEZXNjb2JlcnRhcyBkZSBuYXZlcyBwb3IgZGlhJyxcclxuICAgICAgICAgICAgZGFpbHlTaGlwU2l6ZXM6ICdUYW1hbmhvIGRhcyBkZXNjb2JlcnRhcyBkZSBuYXZlcyBwb3IgZGlhJyxcclxuICAgICAgICAgICAgZGFpbHlEYXJrTWF0dGVyOiAnRGVzY29iZXJ0YXMgZGUgTWF0w6lyaWEgTmVncmEgcG9yIGRpYScsXHJcbiAgICAgICAgICAgIGRhaWx5RGFya01hdHRlclNpemVzOiAnVGFtYW5obyBkYXMgZGVzY29iZXJ0YXMgZGUgTWF0w6lyaWEgTmVncmEgcG9yIGRpYScsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb21iYXRzOiB7XHJcbiAgICAgICAgICAgIGhlYWRlcjogJ0NvbWJhdGVzJyxcclxuICAgICAgICAgICAgcmF3RGF0YTogJ0RhZG9zIGVtIGJydXRvICh0b2RvcyBvcyByZWdpc3RvcyBndWFyZGFkb3MpJyxcclxuICAgICAgICAgICAgZGFpbHlSZXN1bHRzOiAnUmVzdWx0YWRvcyBkb3MgY29tYWJ0ZXMgcG9yIGRpYScsXHJcbiAgICAgICAgICAgIGRhaWx5TG9vdDogJ01vbnRhbnRlIGRlIHBpbGhhZ2VtIHBvciBkaWEnLFxyXG4gICAgICAgICAgICBkYWlseUxvc3RTaGlwczogJ05hdmVzIHBlcmRpZGFzIHBvciBkaWEnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGVicmlzRmllbGRzOiB7XHJcbiAgICAgICAgICAgIGhlYWRlcjogJ0NhbXBvcyBkZSBEZXN0cm/Dp29zJyxcclxuICAgICAgICAgICAgcmF3RGF0YTogJ0RhZG9zIGVtIGJydXRvICh0b2RvcyBvcyByZWdpc3RvcyBndWFyZGFkb3MpJyxcclxuICAgICAgICAgICAgZGFpbHlSZXNvdXJjZXM6ICdSZWN1cnNvcyByZWNpY2xhZG9zIHBvciBkaWEnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGlmZWZvcm1EaXNjb3Zlcmllczoge1xyXG4gICAgICAgICAgICBoZWFkZXI6ICdNaXNzw7VlcyBkZSBEZXNjb2JlcnRhJyxcclxuICAgICAgICAgICAgcmF3RGF0YTogJ0RhZG9zIGVtIGJydXRvICh0b2RvcyBvcyByZWdpc3RvcyBndWFyZGFkb3MpJyxcclxuICAgICAgICAgICAgZGFpbHlFeHBlcmllbmNlOiAnRXhwZXJpZW5jaWEgZ2FuaGEgcG9yIGRpYScsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBnZW5lcmF0ZUJ1dHRvbjogJ0dlcmFyIGZpY2hlaXJvIGRlIEV4Y2VsJyxcclxuXHJcbiAgICBleHBlZGl0aW9uczoge1xyXG4gICAgICAgIHByZWZpeDogJ0VYJyxcclxuXHJcbiAgICAgICAgc2hlZXRzOiB7XHJcbiAgICAgICAgICAgIHJhd0RhdGE6ICdEYWRvcyBlbSBicnV0bycsXHJcbiAgICAgICAgICAgIGRhaWx5RGVwbGV0aW9uOiAnRGVzZ2FzdGUgZGnDoXJpbyBkbyBzaXN0ZW1hJyxcclxuICAgICAgICAgICAgZGFpbHlSZXN1bHRzOiAnUmVzdWx0YWRvcyAtIGRpw6FyaW8nLFxyXG4gICAgICAgICAgICBkYWlseVJlc291cmNlczogJ1JlY3Vyc29zIC0gZGnDoXJpbycsXHJcbiAgICAgICAgICAgIGRhaWx5UmVzb3VyY2VzU2l6ZTogJ1JlY3Vyc29zIC0gZGnDoXJpbyAodGFtYW5ob3MpJyxcclxuICAgICAgICAgICAgZGFpbHlTaGlwczogJ05hdmVzIC0gZGnDoXJpbycsXHJcbiAgICAgICAgICAgIGRhaWx5U2hpcHNTaXplOiAnTmF2ZXMgLSBkacOhcmlvICh0YW1hbmhvKScsXHJcbiAgICAgICAgICAgIGRhaWx5RGFya01hdHRlcjogJ01hdMOpcmlhIE5lZ3JhIC0gZGnDoXJpbycsXHJcbiAgICAgICAgICAgIGRhaWx5RGFya01hdHRlclNpemU6ICdNYXTDqXJpYSBOZWdyYSAtIGRpw6FyaW8gKHRhbWFuaG8pJyxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBldmVudFR5cGU6ICdUaXBvJyxcclxuICAgICAgICBldmVudFNpemU6ICdUYW1hbmhvJyxcclxuICAgICAgICBpdGVtOiAnSXRlbScsXHJcbiAgICB9LFxyXG4gICAgY29tYmF0czoge1xyXG4gICAgICAgIHByZWZpeDogJ0NSJyxcclxuXHJcbiAgICAgICAgc2hlZXRzOiB7XHJcbiAgICAgICAgICAgIHJhd0RhdGE6ICdEYWRvcyBlbSBicnV0bycsXHJcbiAgICAgICAgICAgIGRhaWx5UmVzdWx0czogJ1Jlc3VsdGFkb3MgLSBkacOhcmlvJyxcclxuICAgICAgICAgICAgZGFpbHlMb290OiAnUGlsaGFnZW0gLSBkacOhcmlvJyxcclxuICAgICAgICAgICAgZGFpbHlMb3N0U2hpcHM6ICdOYXZlcyBwZXJkaWRhcyAtIGRpw6FyaW8nLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHJlc3VsdDogJ1Jlc3VsdGFkbyBkbyBjb21iYXRlJyxcclxuICAgICAgICBjb29yZGluYXRlczogJ0Nvb3JkZW5hZGFzJyxcclxuICAgICAgICBnYWxheHk6ICdHYWzDoXhpYScsXHJcbiAgICAgICAgc3lzdGVtOiAnU2lzdGVtYScsXHJcbiAgICAgICAgcG9zaXRpb246ICdQb3Npw6fDo28nLFxyXG4gICAgICAgIHRhcmdldFR5cGU6ICdUaXBvIGRlIGFsdm8nLFxyXG4gICAgICAgIGNvbWJhdFR5cGU6ICdUaXBvIGRlIGNvbWJhdGUnLFxyXG4gICAgICAgIGV4cGVkaXRpb25Db21iYXRPcHBvbmVudDogJ0FkdmVyc8OhcmlvIGRlIGNvbWJhdGUgZGUgZXhwZWRpw6fDo28nLFxyXG4gICAgICAgIGxvb3Q6ICdQaWxoYWdlbScsXHJcbiAgICAgICAgbG9zdFNoaXBzOiAnTmF2ZXMgUGVyZGlkYXMnLFxyXG4gICAgICAgIGRlYnJpc0ZpZWxkOiAnQ2FtcG8gZGUgRGVzdHJvw6dvcycsXHJcbiAgICAgICAgbW9vbjogJ0x1YScsXHJcbiAgICAgICAgcGxhbmV0OiAnUGxhbmV0YScsXHJcbiAgICAgICAgZXhwZWRpdGlvbkNvbWJhdDogJ0NvbWJhdGUgZGUgRXhwZWRpw6fDo28nLFxyXG4gICAgICAgIHBsYXllckNvbWJhdDogJ0NvbWJhdGUgZGUgSm9nYWRvcicsXHJcbiAgICAgICAgcGlyYXRlczogJ1BpcmF0YXMnLFxyXG4gICAgICAgIGFsaWVuczogJ0FsaWVucycsXHJcblxyXG4gICAgICAgIGFnYWluc3RQbGF5ZXJzOiAnQ29udHJhIGpvZ2Fkb3JlcycsXHJcbiAgICAgICAgb25FeHBlZGl0aW9uczogJ0VtIGV4cGVkacOnw7VlcycsXHJcbiAgICB9LFxyXG4gICAgZGVicmlzRmllbGRzOiB7XHJcbiAgICAgICAgcHJlZml4OiAnREYnLFxyXG5cclxuICAgICAgICBzaGVldHM6IHtcclxuICAgICAgICAgICAgcmF3RGF0YTogJ0RhZG9zIGVtIGJydXRvJyxcclxuICAgICAgICAgICAgZGFpbHlSZXNvdXJjZXM6ICdSZWN1cnNvcyAtIGRpw6FyaW8nLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgbGlmZWZvcm1EaXNjb3Zlcmllczoge1xyXG4gICAgICAgIHByZWZpeDogJ0xGJyxcclxuXHJcbiAgICAgICAgc2hlZXRzOntcclxuICAgICAgICAgICAgcmF3RGF0YTogJ0RhZG9zIGVtIGJydXRvJyxcclxuICAgICAgICAgICAgZGFpbHlFeHBlcmllbmNlOiAnRXhwZXJpw6puY2lhIC0gZGnDoXJpbycsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcmVzdWx0OiAnRGVzY29iZXJ0YXMnLFxyXG4gICAgICAgIGV4cGVyaWVuY2U6ICdFeHBlcmnDqm5jaWEnLFxyXG4gICAgICAgIGxpZmVmb3JtOiAnRm9ybWEgZGUgVmlkYScsXHJcbiAgICAgICAgYXJ0aWZhY3RzOiAnQXJ0ZWZhY3RvcycsXHJcbiAgICAgICAgYXJ0aWZhY3RzU2l6ZTogJ1RhbWFuaG8nLFxyXG4gICAgfSxcclxufTsiLCJpbXBvcnQgeyBSZWN1cnNpdmVQYXJ0aWFsIH0gZnJvbSBcIkAvc2hhcmVkL3R5cGVzL1JlY3Vyc2l2ZVBhcnRpYWxcIjtcclxuaW1wb3J0IHsgUGxheWVyQ2xhc3NUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgcHRfcHQ6IFJlY3Vyc2l2ZVBhcnRpYWw8UGxheWVyQ2xhc3NUcmFuc2xhdGlvbnM+ID0ge1xyXG4gICAgY29sbGVjdG9yOiAnQ29sZWNpb25hZG9yJyxcclxuICAgIGRpc2NvdmVyZXI6ICdEZXNjb2JyaWRvcicsXHJcbiAgICBnZW5lcmFsOiAnR2VuZXJhbCcsXHJcbiAgICBub25lOiAnTmVuaHVtYScsXHJcbn07XHJcbiIsImltcG9ydCB7IFNoaXBUeXBlIH0gZnJvbSBcIi4uLy4uLy4uL21vZGVscy9vZ2FtZS9zaGlwcy9TaGlwVHlwZVwiO1xyXG5pbXBvcnQgeyBTaGlwVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBmcjogU2hpcFRyYW5zbGF0aW9ucyA9IHtcclxuICAgIFtTaGlwVHlwZS5saWdodEZpZ2h0ZXJdOiAnQ2hhc3NldXIgbMOpZ2VyJyxcclxuICAgIFtTaGlwVHlwZS5oZWF2eUZpZ2h0ZXJdOiAnQ2hhc3NldXIgbG91cmQnLFxyXG4gICAgW1NoaXBUeXBlLmNydWlzZXJdOiAnQ3JvaXNldXInLFxyXG4gICAgW1NoaXBUeXBlLmJhdHRsZXNoaXBdOiAnVmFpc3NlYXUgZGUgYmF0YWlsbGUnLFxyXG4gICAgW1NoaXBUeXBlLmJhdHRsZWNydWlzZXJdOiAnVHJhcXVldXInLFxyXG4gICAgW1NoaXBUeXBlLmJvbWJlcl06ICdCb21iYXJkaWVyJyxcclxuICAgIFtTaGlwVHlwZS5kZXN0cm95ZXJdOiAnRGVzdHJ1Y3RldXInLFxyXG4gICAgW1NoaXBUeXBlLmRlYXRoU3Rhcl06ICfDiXRvaWxlIGRlIGxhIG1vcnQnLFxyXG4gICAgW1NoaXBUeXBlLnJlYXBlcl06ICdGYXVjaGV1cicsXHJcbiAgICBbU2hpcFR5cGUucGF0aGZpbmRlcl06ICfDiWNsYWlyZXVyJyxcclxuICAgIFtTaGlwVHlwZS5zbWFsbENhcmdvXTogJ1BldGl0IHRyYW5zcG9ydGV1cicsXHJcbiAgICBbU2hpcFR5cGUubGFyZ2VDYXJnb106ICdHcmFuZCB0cmFuc3BvcnRldXInLFxyXG4gICAgW1NoaXBUeXBlLmNvbG9ueVNoaXBdOiAnVmFpc3NlYXUgZGUgY29sb25pc2F0aW9uJyxcclxuICAgIFtTaGlwVHlwZS5yZWN5Y2xlcl06ICdSZWN5Y2xldXInLFxyXG4gICAgW1NoaXBUeXBlLmVzcGlvbmFnZVByb2JlXTogJ1NvbmRlIGRgZXNwaW9ubmFnZScsXHJcbiAgICBbU2hpcFR5cGUuc29sYXJTYXRlbGxpdGVdOiAnU2F0ZWxsaXRlIHNvbGFpcmUnLFxyXG4gICAgW1NoaXBUeXBlLmNyYXdsZXJdOiAnRm9yZXVzZScsXHJcbn07IiwiaW1wb3J0IHsgRGVmZW5zZVR5cGUgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL29nYW1lL2RlZmVuc2VzL0RlZmVuc2VUeXBlXCI7XHJcbmltcG9ydCB7IERlZmVuc2VUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGZyOiBEZWZlbnNlVHJhbnNsYXRpb25zID0gIHtcclxuICAgIFtEZWZlbnNlVHlwZS5yb2NrZXRMYXVuY2hlcl06ICdMYW5jZXVyIGRlIG1pc3NpbGVzJyxcclxuICAgIFtEZWZlbnNlVHlwZS5saWdodExhc2VyXTogJ0FydGlsbGVyaWUgbGFzZXIgbMOpZ8OocmUnLFxyXG4gICAgW0RlZmVuc2VUeXBlLmhlYXZ5TGFzZXJdOiAnQXJ0aWxsZXJpZSBsYXNlciBsb3VyZGUnLFxyXG4gICAgW0RlZmVuc2VUeXBlLmdhdXNzQ2Fubm9uXTogJ0Nhbm9uIGRlIEdhdXNzJyxcclxuICAgIFtEZWZlbnNlVHlwZS5pb25DYW5ub25dOiAnQXJ0aWxsZXJpZSDDoCBpb25zJyxcclxuICAgIFtEZWZlbnNlVHlwZS5wbGFzbWFUdXJyZXRdOiAnTGFuY2V1ciBkZSBwbGFzbWEnLFxyXG4gICAgW0RlZmVuc2VUeXBlLnNtYWxsU2hpZWxkRG9tZV06ICdQZXRpdCBib3VjbGllcicsXHJcbiAgICBbRGVmZW5zZVR5cGUubGFyZ2VTaGllbGREb21lXTogJ0dyYW5kIGJvdWNsaWVyJyxcclxufTtcclxuIiwiaW1wb3J0IHsgQnVpbGRpbmdUeXBlIH0gZnJvbSBcIkAvc2hhcmVkL21vZGVscy9vZ2FtZS9idWlsZGluZ3MvQnVpbGRpbmdUeXBlXCI7XHJcbmltcG9ydCB7IEJ1aWxkaW5nVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBmcjogQnVpbGRpbmdUcmFuc2xhdGlvbnMgPSB7XHJcbiAgICBbQnVpbGRpbmdUeXBlLm1ldGFsTWluZV06ICdNaW5lIGRlIG3DqXRhbCcsXHJcbiAgICBbQnVpbGRpbmdUeXBlLm1ldGFsU3RvcmFnZV06ICdIYW5nYXIgZGUgbcOpdGFsJyxcclxuICAgIFtCdWlsZGluZ1R5cGUuY3J5c3RhbE1pbmVdOiAnTWluZSBkZSBjcmlzdGFsJyxcclxuICAgIFtCdWlsZGluZ1R5cGUuY3J5c3RhbFN0b3JhZ2VdOiAnSGFuZ2FyIGRlIGNyaXN0YWwnLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5kZXV0ZXJpdW1TeW50aGVzaXplcl06ICdTeW50aMOpdGlzZXVyIGRlIGRldXTDqXJpdW0nLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5kZXV0ZXJpdW1UYW5rXTogJ1LDqXNlcnZvaXIgZGUgZGV1dMOpcml1bScsXHJcbiAgICBbQnVpbGRpbmdUeXBlLnNvbGFyUGxhbnRdOiAnQ2VudHJhbGUgw6lsZWN0cmlxdWUgc29sYWlyZScsXHJcbiAgICBbQnVpbGRpbmdUeXBlLmZ1c2lvblJlYWN0b3JdOiAnQ2VudHJhbGUgw6lsZWN0cmlxdWUgZGUgZnVzaW9uJyxcclxuICAgIFtCdWlsZGluZ1R5cGUucm9ib3RpY3NGYWN0b3J5XTogJ1VzaW5lIGRlIHJvYm90cycsXHJcbiAgICBbQnVpbGRpbmdUeXBlLm5hbml0ZUZhY3RvcnldOiAnVXNpbmUgZGUgbmFuaXRlcycsXHJcbiAgICBbQnVpbGRpbmdUeXBlLnNoaXB5YXJkXTogJ0NoYW50aWVyIHNwYXRpYWwnLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5zcGFjZURvY2tdOiAnRG9jayBzcGF0aWFsJyxcclxuICAgIFtCdWlsZGluZ1R5cGUubWlzc2lsZVNpbG9dOiAnU2lsbyBkZSBtaXNzaWxlcycsXHJcbiAgICBbQnVpbGRpbmdUeXBlLnJlc2VhcmNoTGFiXTogJ0xhYm9yYXRvaXJlIGRlIHJlY2hlcmNoZScsXHJcbiAgICBbQnVpbGRpbmdUeXBlLmFsbGlhbmNlRGVwb3RdOiAnRMOpcMO0dCBkZSByYXZpdGFpbGxlbWVudCcsXHJcbiAgICBbQnVpbGRpbmdUeXBlLnRlcnJhZm9ybWVyXTogJ1RlcnJhZm9ybWV1cicsXHJcbiAgICBbQnVpbGRpbmdUeXBlLmx1bmFyQmFzZV06ICdCYXNlIGx1bmFpcmUnLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5zZW5zb3JQaGFsYW54XTogJ1BoYWxhbmdlIGRlIGNhcHRldXInLFxyXG4gICAgW0J1aWxkaW5nVHlwZS5qdW1wR2F0ZV06ICdQb3J0ZSBkZSBzYXV0IHNwYXRpYWwnLFxyXG59OyIsImltcG9ydCB7IFJlc2VhcmNoVHlwZSB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvb2dhbWUvcmVzZWFyY2gvUmVzZWFyY2hUeXBlXCI7XHJcbmltcG9ydCB7IFJlc2VhcmNoVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBmcjogUmVzZWFyY2hUcmFuc2xhdGlvbnMgPSB7XHJcbiAgICBbUmVzZWFyY2hUeXBlLmVuZXJneVRlY2hub2xvZ3ldOiAnVGVjaG5vbG9naWUgw6luZXJnw6l0aXF1ZScsXHJcbiAgICBbUmVzZWFyY2hUeXBlLmxhc2VyVGVjaG5vbG9neV06ICdUZWNobm9sb2dpZSBMYXNlcicsXHJcbiAgICBbUmVzZWFyY2hUeXBlLmlvblRlY2hub2xvZ3ldOiAnVGVjaG5vbG9naWUgw6AgaW9ucycsXHJcbiAgICBbUmVzZWFyY2hUeXBlLmh5cGVyc3BhY2VUZWNobm9sb2d5XTogJ1RlY2hub2xvZ2llIGh5cGVyZXNwYWNlJyxcclxuICAgIFtSZXNlYXJjaFR5cGUucGxhc21hVGVjaG5vbG9neV06ICdUZWNobm9sb2dpZSBQbGFzbWEnLFxyXG4gICAgW1Jlc2VhcmNoVHlwZS5lc3Bpb25hZ2VUZWNobm9sb2d5XTogJ1RlY2hub2xvZ2llIEVzcGlvbm5hZ2UnLFxyXG4gICAgW1Jlc2VhcmNoVHlwZS5jb21wdXRlclRlY2hub2xvZ3ldOiAnVGVjaG5vbG9naWUgT3JkaW5hdGV1cicsXHJcbiAgICBbUmVzZWFyY2hUeXBlLmFzdHJvcGh5c2ljc106ICdBc3Ryb3BoeXNpcXVlJyxcclxuICAgIFtSZXNlYXJjaFR5cGUuaW50ZXJnYWxhY3RpY1Jlc2VhcmNoTmV0d29ya106ICdSw6lzZWF1IGRlIHJlY2hlcmNoZSBpbnRlcmdhbGFjdGlxdWUnLFxyXG4gICAgW1Jlc2VhcmNoVHlwZS5ncmF2aXRvblRlY2hub2xvZ3ldOiAnVGVjaG5vbG9naWUgR3Jhdml0b24nLFxyXG4gICAgW1Jlc2VhcmNoVHlwZS5jb21idXN0aW9uRHJpdmVdOiAnUsOpYWN0ZXVyIMOgIGNvbWJ1c3Rpb24nLFxyXG4gICAgW1Jlc2VhcmNoVHlwZS5pbXB1bHNlRHJpdmVdOiAnUsOpYWN0ZXVyIMOgIGltcHVsc2lvbicsXHJcbiAgICBbUmVzZWFyY2hUeXBlLmh5cGVyc3BhY2VEcml2ZV06ICdQcm9wdWxzaW9uIGh5cGVyZXNwYWNlJyxcclxuICAgIFtSZXNlYXJjaFR5cGUud2VhcG9uc1RlY2hub2xvZ3ldOiAnVGVjaG5vbG9naWUgQXJtZXMnLFxyXG4gICAgW1Jlc2VhcmNoVHlwZS5zaGllbGRpbmdUZWNobm9sb2d5XTogJ1RlY2hub2xvZ2llIEJvdWNsaWVyJyxcclxuICAgIFtSZXNlYXJjaFR5cGUuYXJtb3JUZWNobm9sb2d5XTogJ1RlY2hub2xvZ2llIFByb3RlY3Rpb24gZGVzIHZhaXNzZWF1eCBzcGF0aWF1eCcsXHJcbn07XHJcbiIsImltcG9ydCB7IExpZmVmb3JtVHlwZSB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvb2dhbWUvbGlmZWZvcm1zL0xpZmVmb3JtVHlwZVwiO1xyXG5pbXBvcnQgeyBMaWZlZm9ybVRyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZnI6IExpZmVmb3JtVHJhbnNsYXRpb25zID0ge1xyXG4gICAgW0xpZmVmb3JtVHlwZS5ub25lXTogJ0F1Y3VuZSBmb3JtZSBkZSB2aWUnLFxyXG4gICAgW0xpZmVmb3JtVHlwZS5odW1hbnNdOiAnTGVzIEh1bWFpbnMnLFxyXG4gICAgW0xpZmVmb3JtVHlwZS5yb2NrdGFsXTogJ1JvY3RhcycsXHJcbiAgICBbTGlmZWZvcm1UeXBlLm1lY2hhc106ICdNw6ljYXMnLFxyXG4gICAgW0xpZmVmb3JtVHlwZS5rYWVsZXNoXTogJ0thZWxlc2hzJyxcclxufTsiLCJpbXBvcnQgeyBMaWZlZm9ybUJ1aWxkaW5nVHlwZSB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvb2dhbWUvbGlmZWZvcm1zL0xpZmVmb3JtQnVpbGRpbmdUeXBlXCI7XHJcbmltcG9ydCB7IExpZmVmb3JtQnVpbGRpbmdzVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBmcjogTGlmZWZvcm1CdWlsZGluZ3NUcmFuc2xhdGlvbnMgPSB7XHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUucmVzaWRlbnRpYWxTZWN0b3JdOiAnU2VjdGV1ciByw6lzaWRlbnRpZWwnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmJpb3NwaGVyZUZhcm1dOiAnRmVybWUgYmlvc3Bow6lyaXF1ZScsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUucmVzZWFyY2hDZW50cmVdOiAnQ2VudHJlIGRlIHJlY2hlcmNoZScsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuYWNhZGVteU9mU2NpZW5jZXNdOiAnQWNhZMOpbWllIGRlcyBzY2llbmNlcycsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUubmV1cm9DYWxpYnJhdGlvbkNlbnRyZV06ICdDZW50cmUgZGUgbmV1cm9jYWxpYnJhZ2UnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmhpZ2hFbmVyZ3lTbWVsdGluZ106ICdGdXNpb24gw6AgaGF1dGUgw6luZXJnaWUnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmZvb2RTaWxvXTogJ1LDqXNlcnZlIGFsaW1lbnRhaXJlJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5mdXNpb25Qb3dlcmVkUHJvZHVjdGlvbl06ICdFeHRyYWN0aW9uIHBhciBmdXNpb24nLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLnNreXNjcmFwZXJdOiAnVG91ciBkYGhhYml0YXRpb24nLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmJpb3RlY2hMYWJdOiAnTGFib3JhdG9pcmUgZGUgYmlvdGVjaG5vbG9naWUnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLm1ldHJvcG9saXNdOiAnTcOpdHJvcG9saXMnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLnBsYW5ldGFyeVNoaWVsZF06ICdCb3VjbGllciBwbGFuw6l0YWlyZScsXHJcblxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLm1lZGl0YXRpb25FbmNsYXZlXTogJ0VuY2xhdmUgc3Rvw69xdWUnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmNyeXN0YWxGYXJtXTogJ0N1bHR1cmUgZHUgY3Jpc3RhbCcsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUucnVuZVRlY2hub2xvZ2l1bV06ICdDZW50cmUgdGVjaG5vbG9naXF1ZSBydW5pcXVlJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5ydW5lRm9yZ2VdOiAnRm9yZ2UgcnVuaXF1ZScsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUub3Jpa3Rvcml1bV06ICdPcmljdG9yaXVtJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5tYWdtYUZvcmdlXTogJ0Z1c2lvbiBtYWdtYXRpcXVlJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5kaXNydXB0aW9uQ2hhbWJlcl06ICdDaGFtYnJlIGRlIGRpc3J1cHRpb24nLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLm1lZ2FsaXRoXTogJ01vbnVtZW50IHJvY2hldXgnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmNyeXN0YWxSZWZpbmVyeV06ICdSYWZmaW5lcmllIGRlIGNyaXN0YXV4JyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5kZXV0ZXJpdW1TeW50aGVzaXNlcl06ICdTeW50b25pc2V1ciBkZSBkZXV0w6lyaXVtJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5taW5lcmFsUmVzZWFyY2hDZW50cmVdOiAnQ2VudHJlIGRlIHJlY2hlcmNoZSBzdXIgbGVzIG1pbsOpcmF1eCcsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuYWR2YW5jZWRSZWN5Y2xpbmdQbGFudF06ICdVc2luZSBkZSB0cmFpdGVtZW50IMOgIGhhdXQgcmVuZGVtZW50JyxcclxuXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuYXNzZW1ibHlMaW5lXTogJ0NoYcOubmUgZGUgcHJvZHVjdGlvbicsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuZnVzaW9uQ2VsbEZhY3RvcnldOiAnVXNpbmUgZGUgZnVzaW9uIGRlIGNlbGx1bGVzJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5yb2JvdGljc1Jlc2VhcmNoQ2VudHJlXTogJ0NlbnRyZSBkZSByZWNoZXJjaGUgZW4gcm9ib3RpcXVlJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS51cGRhdGVOZXR3b3JrXTogJ1LDqXNlYXUgZGBhY3R1YWxpc2F0aW9uJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5xdWFudHVtQ29tcHV0ZXJDZW50cmVdOiAnQ2VudHJlIGRgaW5mb3JtYXRpcXVlIHF1YW50aXF1ZScsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuYXV0b21hdGlzZWRBc3NlbWJseUNlbnRyZV06ICdDZW50cmUgZGBhc3NlbWJsYWdlIGF1dG9tYXRpc8OpJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5oaWdoUGVyZm9ybWFuY2VUcmFuc2Zvcm1lcl06ICdUcmFuc2Zvcm1hdGV1ciBoeXBlcnB1aXNzYW50JyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5taWNyb2NoaXBBc3NlbWJseUxpbmVdOiAnQ2hhw65uZSBkZSBwcm9kdWN0aW9uIGRlIG1pY3JvcHVjZXMnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLnByb2R1Y3Rpb25Bc3NlbWJseUhhbGxdOiAnQXRlbGllciBkZSBtb250YWdlJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5oaWdoUGVyZm9ybWFuY2VTeW50aGVzaXNlcl06ICdTeW50aMOpdGlzZXVyIMOgIGhhdXQgcmVuZGVtZW50JyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5jaGlwTWFzc1Byb2R1Y3Rpb25dOiAnUHJvZHVjdGlvbiBkZSBtYXNzZSBkZSBwdWNlcycsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUubmFub1JlcGFpckJvdHNdOiAnTmFub3JvYm90cyByw6lwYXJhdGV1cnMnLFxyXG5cclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS5zYW5jdHVhcnldOiAnUmVmdWdpdW0nLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmFudGltYXR0ZXJDb25kZW5zZXJdOiAnQ29uZGVuc2F0ZXVyIGRgYW50aW1hdGnDqHJlJyxcclxuICAgIFtMaWZlZm9ybUJ1aWxkaW5nVHlwZS52b3J0ZXhDaGFtYmVyXTogJ1NhbGxlIMOgIHZvcnRleCcsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuaGFsbHNPZlJlYWxpc2F0aW9uXTogJ01haXNvbiBkdSBzYXZvaXInLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmZvcnVtT2ZUcmFuc2NlbmRlbmNlXTogJ0ZvcnVtIGRlIGxhIHRyYW5zY2VuZGFuY2UnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmFudGltYXR0ZXJDb252ZWN0b3JdOiAnQ29udmVjdGV1ciBkYGFudGltYXRpw6hyZScsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuY2xvbmluZ0xhYm9yYXRvcnldOiAnTGFib3JhdG9pcmUgZGUgY2xvbmFnZScsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuY2hyeXNhbGlzQWNjZWxlcmF0b3JdOiAnQWNjw6lsw6lyYXRldXIgcGFyIGNocnlzYWxpZGUnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLmJpb01vZGlmaWVyXTogJ0Jpb21vZGlmaWNhdGV1cicsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUucHNpb25pY01vZHVsYXRvcl06ICdNb2R1bGF0ZXVyIHBzaW9uaXF1ZScsXHJcbiAgICBbTGlmZWZvcm1CdWlsZGluZ1R5cGUuc2hpcE1hbnVmYWN0dXJpbmdIYWxsXTogJ0hhbmdhciBkZSBjb25zdHJ1Y3Rpb24gZGUgdmFpc3NlYXUnLFxyXG4gICAgW0xpZmVmb3JtQnVpbGRpbmdUeXBlLnN1cHJhUmVmcmFjdG9yXTogJ1N1cHJhcsOpZnJhY3RldXInLFxyXG59OyIsImltcG9ydCB7IExpZmVmb3JtVGVjaG5vbG9neVR5cGUgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL29nYW1lL2xpZmVmb3Jtcy9MaWZlZm9ybVRlY2hub2xvZ3lUeXBlXCI7XHJcbmltcG9ydCB7IExpZmVmb3JtVGVjaG5vbG9naWVzVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBmcjogTGlmZWZvcm1UZWNobm9sb2dpZXNUcmFuc2xhdGlvbnMgPSB7XHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5pbnRlcmdhbGFjdGljRW52b3lzXTogJ0FtYmFzc2FkZXVycyBpbnRlcmdhbGFjdGlxdWVzJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmhpZ2hQZXJmb3JtYW5jZUV4dHJhY3RvcnNdOiAnRXh0cmFjdGV1cnMgw6AgaGF1dGUgcGVyZm9ybWFuY2UnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZnVzaW9uRHJpdmVzXTogJ01vdGV1cnMgw6AgZnVzaW9uJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnN0ZWFsdGhGaWVsZEdlbmVyYXRvcl06ICdHw6luw6lyYXRldXIgZGUgY2hhbXAgZGUgY2Ftb3VmbGFnZScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5vcmJpdGFsRGVuXTogJ1BsYW5xdWUgb3JiaXRhbGUnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUucmVzZWFyY2hBSV06ICdJQSBkZSByZWNoZXJjaGUnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuaGlnaFBlcmZvcm1hbmNlVGVycmFmb3JtZXJdOiAnVGVycmFmb3JtZXVyIMOgIGhhdXRlIHBlcmZvcm1hbmNlJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmVuaGFuY2VkUHJvZHVjdGlvblRlY2hub2xvZ2llc106ICdUZWNobm9sb2dpZXMgZGBleHRyYWN0aW9uIGFtw6lsaW9yw6llcycsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5saWdodEZpZ2h0ZXJNa0lJXTogJ0NoYXNzZXVyIGzDqWdlciBNa8KgSUknLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuY3J1aXNlck1rSUldOiAnQ3JvaXNldXIgTWvCoElJJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmltcHJvdmVkTGFiVGVjaG5vbG9neV06ICdUZWNobm9sb2dpZSBkZSBsYWJvcmF0b2lyZSBhbcOpbGlvcsOpZScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5wbGFzbWFUZXJyYWZvcm1lcl06ICdUZXJyYWZvcm1ldXIgw6AgcGxhc21hJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmxvd1RlbXBlcmF0dXJlRHJpdmVzXTogJ1Byb3B1bHNldXJzIMOgIGZhaWJsZSB0ZW1ww6lyYXR1cmUnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuYm9tYmVyTWtJSV06ICdCb21iYXJkaWVyIE1rwqBJSScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5kZXN0cm95ZXJNa0lJXTogJ0Rlc3RydWN0ZXVyIE1rwqBJSScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5iYXR0bGVjcnVpc2VyTWtJSV06ICdUcmFxdWV1ciBNa8KgSUknLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUucm9ib3RBc3Npc3RhbnRzXTogJ0Fzc2lzdGFudHMgcm9ib3RpcXVlcycsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5zdXBlcmNvbXB1dGVyXTogJ1N1cGVyb3JkaW5hdGV1cicsXHJcblxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUudm9sY2FuaWNCYXR0ZXJpZXNdOiAnQmF0dGVyaWVzIHZvbGNhbmlxdWVzJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmFjb3VzdGljU2Nhbm5pbmddOiAnU29uZGFnZSBhY291c3RpcXVlJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmhpZ2hFbmVyZ3lQdW1wU3lzdGVtc106ICdTeXN0w6htZSBkZSBwb21wYWdlIMOgIGhhdXRlIMOpbmVyZ2llJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmNhcmdvSG9sZEV4cGFuc2lvbl9DaXZpbGlhblNoaXBzXTogJ0V4dGVuc2lvbiBkYGVzcGFjZSBmcmV0ICh2YWlzc2VhdXggY2l2aWxzKScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5tYWdtYVBvd2VyZWRQcm9kdWN0aW9uXTogJ0V4dHJhY3Rpb24gbWFnbWF0aXF1ZScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW90aGVybWFsUG93ZXJQbGFudHNdOiAnQ2VudHJhbGVzIGfDqW90aGVybWlxdWVzJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmRlcHRoU291bmRpbmddOiAnU29uZGFnZSBlbiBwcm9mb25kZXVyJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmlvbkNyeXN0YWxFbmhhbmNlbWVudF9oZWF2eUZpZ2h0ZXJdOiAnUmVuZm9yY2VtZW50IMOgIGNyaXN0YXV4IGlvbmlxdWVzIChjaGFzc2V1cnMgbG91cmRzKScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5pbXByb3ZlZFN0ZWxsYXJhdG9yXTogJ1N0ZWxsYXJhdG9yIGFtw6lsaW9yw6knLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuaGFyZGVuZWREaWFtb25kRHJpbGxIZWFkc106ICdUw6p0ZXMgZGUgZm9yYWdlIGVuIGRpYW1hbnQgcmVuZm9yY8OpZXMnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuc2Vpc21pY01pbmluZ1RlY2hub2xvZ3ldOiAnVGVjaG5vbG9naWVzIGRgZXh0cmFjdGlvbiBzaXNtaXF1ZScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5tYWdtYVBvd2VyZWRQdW1wU3lzdGVtc106ICdQb21wZXMgYXUgbWFnbWEnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuaW9uQ3J5c3RhbE1vZHVsZXNdOiAnTW9kdWxlIMOgIGNyaXN0YXV4IGlvbmlxdWVzJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm9wdGltaXNlZFNpbG9Db25zdHJ1Y3Rpb25NZXRob2RdOiAnQ29uc3RydWN0aW9uIG9wdGltaXPDqWUgZGUgc2lsb3MnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZGlhbW9uZEVuZXJneVRyYW5zbWl0dGVyXTogJ8OJbWV0dGV1ciBkYMOpbmVyZ2llIMOgIGRpYW1hbnRzJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm9ic2lkaWFuU2hpZWxkUmVpbmZvcmNlbWVudF06ICdJbnRlbnNpZmljYXRpb24gZHUgYm91Y2xpZXIgw6AgbGBvYnNpZGllbm5lJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnJ1bmVTaGllbGRzXTogJ0JvdWNsaWVycyBydW5pcXVlcycsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5yb2NrdGFsQ29sbGVjdG9yRW5oYW5jZW1lbnRdOiAnUmVuZm9ydCBkdSBjb2xsZWN0ZXVyIHJvY3RhJyxcclxuXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5jYXRhbHlzZXJUZWNobm9sb2d5XTogJ1RlY2huaXF1ZSBkZSBjYXRhbHlzZScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5wbGFzbWFEcml2ZV06ICdNb3RldXIgw6AgcGxhc21hJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmVmZmljaWVuY3lNb2R1bGVdOiAnTW9kdWxlIGRgb3B0aW1pc2F0aW9uJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmRlcG90QUldOiAnSUEgZHUgZMOpcMO0dCcsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW5lcmFsT3ZlcmhhdWxfbGlnaHRGaWdodGVyXTogJ1LDqXZpc2lvbiBjb21wbMOodGUgKGNoYXNzZXVyIGzDqWdlciknLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuYXV0b21hdGVkVHJhbnNwb3J0TGluZXNdOiAnQ2hhw65uZSBkZSBwcm9kdWN0aW9uIGF1dG9tYXRpc8OpZScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5pbXByb3ZlZERyb25lQUldOiAnSUEgZGUgZHJvbmUgYW3DqWxpb3LDqWUnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZXhwZXJpbWVudGFsUmVjeWNsaW5nVGVjaG5vbG9neV06ICdUZWNobmlxdWUgZGUgcmVjeWNsYWdlIGV4cMOpcmltZW50YWwnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZ2VuZXJhbE92ZXJoYXVsX2NydWlzZXJdOiAnUsOpdmlzaW9uIGNvbXBsw6h0ZSAoY3JvaXNldXIpJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnNsaW5nc2hvdEF1dG9waWxvdF06ICdQaWxvdGUgYXV0b21hdGlxdWUgU2xpbmdzaG90JyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmhpZ2hUZW1wZXJhdHVyZVN1cGVyY29uZHVjdG9yc106ICdTdXByYWNvbmR1Y3RldXJzIMOgIGhhdXRlIHRlbXDDqXJhdHVyZScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW5lcmFsT3ZlcmhhdWxfYmF0dGxlc2hpcF06ICdSw6l2aXNpb24gY29tcGzDqHRlICh2YWlzc2VhdSBkZSBiYXRhaWxsZSknLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuYXJ0aWZpY2lhbFN3YXJtSW50ZWxsaWdlbmNlXTogJ0ludGVsbGlnZW5jZSBhcnRpZmljaWVsbGUgY29sbGVjdGl2ZScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW5lcmFsT3ZlcmhhdWxfYmF0dGxlY3J1aXNlcl06ICdSw6l2aXNpb24gY29tcGzDqHRlICh0cmFxdWV1ciknLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZ2VuZXJhbE92ZXJoYXVsX2JvbWJlcl06ICdSw6l2aXNpb24gY29tcGzDqHRlIChib21iYXJkaWVyKScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5nZW5lcmFsT3ZlcmhhdWxfZGVzdHJveWVyXTogJ1LDqXZpc2lvbiBjb21wbMOodGUgKGRlc3RydWN0ZXVyKScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5leHBlcmltZW50YWxXZWFwb25zVGVjaG5vbG9neV06ICdUZWNobmlxdWUgZGBhcm1lbWVudCBleHDDqXJpbWVudGFsZScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5tZWNoYW5HZW5lcmFsRW5oYW5jZW1lbnRdOiAnUmVuZm9yY2VtZW50IGR1IGfDqW7DqXJhbCBkZXMgTcOpY2FzJyxcclxuXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5oZWF0UmVjb3ZlcnldOiAnUsOpY3Vww6lyYXRpb24gZGUgY2hhbGV1cicsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5zdWxwaGlkZVByb2Nlc3NdOiAnVHJhaXRlbWVudCBhdSBzdWxmdXJlJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnBzaW9uaWNOZXR3b3JrXTogJ1LDqXNlYXUgcHNpb25pcXVlJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLnRlbGVraW5ldGljVHJhY3RvckJlYW1dOiAnRmFpc2NlYXUgZGUgdHJhY3Rpb24gdMOpbMOpa2luw6lzaXF1ZScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5lbmhhbmNlZFNlbnNvclRlY2hub2xvZ3ldOiAnVGVjaG5vbG9naWUgZGUgZMOpdGVjdGlvbiBhbcOpbGlvcsOpZScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5uZXVyb21vZGFsQ29tcHJlc3Nvcl06ICdDb21wcmVzc2V1ciBuZXVyb21vZGFsJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm5ldXJvSW50ZXJmYWNlXTogJ05ldXJvLWludGVyZmFjZScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5pbnRlcnBsYW5ldGFyeUFuYWx5c2lzTmV0d29ya106ICdSw6lzZWF1IGRgYW5hbHlzZSBzdXBlcmdsb2JhbCcsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5vdmVyY2xvY2tpbmdfaGVhdnlGaWdodGVyXTogJ1N1cmNhZGVuw6dhZ2UgKGNoYXNzZXVyIGxvdXJkKScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS50ZWxla2luZXRpY0RyaXZlXTogJ1N5c3TDqG1lIGRlIHByb3B1bHNpb24gdMOpbMOpa2luw6l0aXF1ZScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5zaXh0aFNlbnNlXTogJ1NpeGnDqG1lIHNlbnMnLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUucHN5Y2hvaGFybW9uaXNlcl06ICdIYXJtb25pc2F0ZXVyIHBzeWNoaXF1ZScsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5lZmZpY2llbnRTd2FybUludGVsbGlnZW5jZV06ICdJbnRlbGxpZ2VuY2UgY29sbGVjdGl2ZSBvcHRpbWlzw6llJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLm92ZXJjbG9ja2luZ19sYXJnZUNhcmdvXTogJ1N1cmNhZGVuw6dhZ2UgKGdyYW5kIHRyYW5zcG9ydGV1ciknLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUuZ3Jhdml0YXRpb25TZW5zb3JzXTogJ0NhcHRldXJzIGdyYXZpdGF0aW9ubmVscycsXHJcbiAgICBbTGlmZWZvcm1UZWNobm9sb2d5VHlwZS5vdmVyY2xvY2tpbmdfYmF0dGxlc2hpcF06ICdTdXJjYWRlbsOnYWdlICh2YWlzc2VhdSBkZSBiYXRhaWxsZSknLFxyXG4gICAgW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUucHNpb25pY1NoaWVsZE1hdHJpeF06ICdNYXRyaWNlIGRlIHByb3RlY3Rpb24gcHNpb25pcXVlJyxcclxuICAgIFtMaWZlZm9ybVRlY2hub2xvZ3lUeXBlLmthZWxlc2hEaXNjb3ZlcmVyRW5oYW5jZW1lbnRdOiAnUmVuZm9yY2VtZW50IGRgZXhwbG9yYXRldXIga2FlbGVzaCcsXHJcbn07IiwiaW1wb3J0IHsgUHJlbWl1bVRyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZnI6IFByZW1pdW1UcmFuc2xhdGlvbnMgPSB7XHJcbiAgICBkYXJrTWF0dGVyOiAnQW50aW1hdGnDqHJlIChBTSknLFxyXG59OyIsImltcG9ydCB7IFJlY3Vyc2l2ZVBhcnRpYWwgfSBmcm9tIFwiQC9zaGFyZWQvdHlwZXMvUmVjdXJzaXZlUGFydGlhbFwiO1xyXG5pbXBvcnQgeyBTZXR0aW5nc1RyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBmcjogUmVjdXJzaXZlUGFydGlhbDxTZXR0aW5nc1RyYW5zbGF0aW9ucz4gPSB7XHJcbiAgICB0YWJzOiB7XHJcbiAgICAgICAgZGF0ZVJhbmdlczogJ1BsYWdlcyBkZSBkYXRlcycsXHJcbiAgICAgICAgY29sb3JzOiAnQ291bGV1cnMnLFxyXG4gICAgICAgIGNvbW1vbjogJ0NvbW11bicsXHJcbiAgICAgICAgaW1wb3J0RXhwb3J0OiAnSW1wb3J0YXRpb24vRXhwb3J0YXRpb24nLFxyXG4gICAgICAgIGV4cGVkaXRpb25zOiAnRXhww6lkaXRpb25zJyxcclxuICAgICAgICBjb21iYXRzOiAnQ29tYmF0cycsXHJcbiAgICAgICAgZGVicmlzRmllbGRzOiAnQ2hhbXBzIGRlIGTDqWJyaXMnLFxyXG4gICAgICAgIHJlc291cmNlQmFsYW5jZTogJ0JhbGFuY2UgZGVzIHJlc3NvdXJjZXMnLFxyXG4gICAgICAgIHVuaXZlcnNlSGlzdG9yeTogJ0hpc3RvcmlxdWUgZGUgbFxcJ3VuaXZlcnMnLFxyXG4gICAgICAgIGRhbmdlclpvbmU6ICdab25lIGRhbmdlcmV1c2UnLFxyXG4gICAgICAgIGFjY2Vzc2JpbGl0eTogJ0FjY2Vzc2liaWxpdMOpJyxcclxuICAgICAgICBsaW5rQWNjb3VudHM6ICdMaWVyIGxlcyBjb21wdGVzJyxcclxuXHJcbiAgICAgICAgbWlncmF0ZU9sZERhdGE6ICdNaWdyZXIgbGVzIGFuY2llbm5lcyBkb25uw6llcycsXHJcbiAgICB9LFxyXG4gICAgZGF0ZVJhbmdlczoge1xyXG4gICAgICAgIGRlZmF1bHROYW1lczoge1xyXG4gICAgICAgICAgICB0b2RheTogJ0F1am91cmRcXCdodWknLFxyXG4gICAgICAgICAgICB5ZXN0ZXJkYXk6ICdIaWVyJyxcclxuICAgICAgICAgICAgY3VycmVudFdlZWs6ICdTZW1haW5lIGVuIGNvdXJzJyxcclxuICAgICAgICAgICAgbGFzdFdlZWs6ICdTZW1haW5lIGRlcm5pw6hyZScsXHJcbiAgICAgICAgICAgIGN1cnJlbnRNb250aDogJ01vaXMgZW4gY291cnMnLFxyXG4gICAgICAgICAgICBuZXdSYW5nZTogJ25vdXZlbGxlIHBsYWdlJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNpbmNlOiAoZGF0ZSkgPT4gYERlcHVpcyBsZSAke2RhdGV9YCxcclxuICAgICAgICBmaXJzdERheVRlbXBsYXRlOiAnPHByZW1pZXIgam91cj4nLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgbGFiZWw6ICfDiXRpcXVldHRlJyxcclxuICAgICAgICAgICAgdHlwZTogJ1R5cGUnLFxyXG4gICAgICAgICAgICByYW5nZVN0YXJ0OiAnRMOpYnV0IGRlIGxhIHBsYWdlJyxcclxuICAgICAgICAgICAgcmFuZ2VDb250YWluczogJ0xhIHBsYWdlIGNvbnRpZW50JyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRheTogJ2pvdXInLFxyXG4gICAgICAgIGRheXM6ICdqb3VycycsXHJcbiAgICAgICAgZGF5c0FnbzogJ2pvdXJzIGF1cGFyYXZhbnQnLFxyXG4gICAgICAgIHdlZWs6ICdzZW1haW5lJyxcclxuICAgICAgICB3ZWVrczogJ3NlbWFpbmVzJyxcclxuICAgICAgICB3ZWVrc0FnbzogJ3NlbWFpbmVzIGF1cGFyYXZhbnQnLFxyXG4gICAgICAgIG1vbnRoOiAnbW9pcycsXHJcbiAgICAgICAgbW9udGhzOiAnbW9pcycsXHJcbiAgICAgICAgbW9udGhzQWdvOiAnbW9pcyBhdXBhcmF2YW50JyxcclxuICAgICAgICB5ZWFyOiAnYW5uw6llJyxcclxuICAgICAgICB5ZWFyczogJ2FubsOpZXMnLFxyXG4gICAgICAgIHllYXJzQWdvOiAnYW5uw6llcyBhdXBhcmF2YW50JyxcclxuICAgIH0sXHJcbiAgICBjb2xvcnM6IHtcclxuICAgICAgICBjb21iYXRSZXN1bHRzOiAnUsOpc3VsdGF0cyBkZXMgY29tYmF0cycsXHJcbiAgICAgICAgZXhwZWRpdGlvbkV2ZW50czogJ8OJdsOpbmVtZW50cyBkXFwnZXhww6lkaXRpb24nLFxyXG4gICAgICAgIGV4cGVkaXRpb25FdmVudFNpemVzOiAnVGFpbGxlcyBkXFwnw6l2w6luZW1lbnRzIGRcXCdleHDDqWRpdGlvbicsXHJcbiAgICAgICAgZXhwZWRpdGlvbkRlcGxldGlvbkxldmVsczogJ8OJcHVpc2VtZW50IGR1IHN5c3TDqG1lJyxcclxuICAgICAgICBsaWZlZm9ybURpc2NvdmVyaWVzOiAnRMOpY291dmVydGVzIGRlIGZvcm1lcyBkZSB2aWUnLFxyXG4gICAgICAgIGxpZmVmb3JtczogJ0Zvcm1lcyBkZSB2aWUnLFxyXG4gICAgICAgIHJlc291cmNlczogJ1Jlc3NvdXJjZXMnLFxyXG4gICAgICAgIHNoaXBzOiAnVmFpc3NlYXV4JyxcclxuICAgIH0sXHJcbiAgICBjb21tb246IHtcclxuICAgICAgICBjb252ZXJzaW9uUmF0ZXM6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICdUYXV4IGRlIGNvbnZlcnNpb24nLFxyXG4gICAgICAgICAgICBtc3VMb25nOiAnQ29udmVydGlyIGVuIE3DqXRhbCAoVVNNKScsXHJcbiAgICAgICAgICAgIGRzdUxvbmc6ICdDb252ZXJ0aXIgZW4gRGV1dMOpcml1bSAoVVNEKScsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbnNpb25MYW5ndWFnZTogJ0xhbmd1ZSBkZSBsXFwnaW50ZXJmYWNlIHV0aWxpc2F0ZXVyIChkYW5zIE9HYW1lIFRyYWNrZXIpJyxcclxuICAgICAgICBleHRlbnNpb25MYW5ndWFnZUZhbGxiYWNrSGludDogJ0xlcyB0ZXh0ZXMgZW4gYW5nbGFpcyBzZXJvbnQgYWZmaWNow6lzIHNpIGxlcyB0ZXh0ZXMgbmUgc29udCBwYXMgZGlzcG9uaWJsZXMgZGFucyBsYSBsYW5ndWUgc8OpbGVjdGlvbm7DqWUuJyxcclxuXHJcbiAgICAgICAgc2VydmVyU2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICdEb25uw6llcyBkdSBzZXJ2ZXVyJyxcclxuICAgICAgICAgICAgbGFzdFVwZGF0ZTogJ0Rlcm5pw6hyZSBtaXNlIMOgIGpvdXInLFxyXG4gICAgICAgICAgICBmb3JjZVVwZGF0ZTogJ01ldHRyZSDDoCBqb3VyIGxlcyBkb25uw6llcyBkdSBzZXJ2ZXVyJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIGV4cGVkaXRpb25zOiB7XHJcbiAgICAgICAgcmVzb3VyY2VVbml0RmFjdG9yc09mU2hpcEZvdW5kT25FeHBlZGl0aW9uczogJ1BvbmTDqXJhdGlvbiBkZSBsYSB2YWxldXIgZW4gcmVzc291cmNlcyBkZXMgdmFpc3NlYXV4IHRyb3V2w6lzIGxvcnMgZGVzIGV4cMOpZGl0aW9ucycsXHJcbiAgICB9LFxyXG4gICAgY29tYmF0czoge1xyXG4gICAgICAgIHJlc291cmNlVW5pdEZhY3RvcnNPZkxvc3RTaGlwczogJ1BvbmTDqXJhdGlvbiBkZSBsYSB2YWxldXIgZW4gcmVzc291cmNlcyBkZXMgdmFpc3NlYXV4IHBlcmR1cyBlbiBjb21iYXQnLFxyXG4gICAgICAgIGlnbm9yZUVzcGlvbmFnZUNvbWJhdHM6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICdJZ25vcmVyIGxlcyBjb21iYXRzIGRcXCdlc3Bpb25uYWdlJyxcclxuICAgICAgICAgICAgbGFiZWw6ICdJZ25vcmVyIGxlcyByYXBwb3J0cyBkZSBjb21iYXQgZFxcJ2VzcGlvbm5hZ2UgcG91ciBsZSBzdWl2aSBkZXMgY29tYmF0cycsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICByZXNvdXJjZUJhbGFuY2U6IHtcclxuICAgICAgICBkZXRhaWxlZFJlc291cmNlQmFsYW5jZToge1xyXG4gICAgICAgICAgICBoZWFkZXI6ICdCaWxhbiBkw6l0YWlsbMOpIGRlcyByZXNzb3VyY2VzJyxcclxuICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ0FmZmljaGVyIGxlIGJpbGFuIGTDqXRhaWxsw6kgZGVzIHJlc3NvdXJjZXMnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5jbHVkZVNoaXBzRm91bmRPbkV4cGVkaXRpb25zOiB7XHJcbiAgICAgICAgICAgIGhlYWRlcjogJ1ZhaXNzZWF1eCB0cm91dsOpcyBsb3JzIGRlcyBleHDDqWRpdGlvbnMnLFxyXG4gICAgICAgICAgICBjaGVja2JveExhYmVsOiAnSW5jbHVyZSBsZXMgcmVzc291cmNlcyBkZXMgdmFpc3NlYXV4IHRyb3V2w6lzIGxvcnMgZGVzIGV4cMOpZGl0aW9ucyBkYW5zIGxlIGJpbGFuIGRlcyByZXNzb3VyY2VzJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGluY2x1ZGVTaGlwc0xvc3RJbkNvbWJhdHM6IHtcclxuICAgICAgICAgICAgaGVhZGVyOiAnVmFpc3NlYXV4IHBlcmR1cyBlbiBjb21iYXRzJyxcclxuICAgICAgICAgICAgY2hlY2tib3hMYWJlbDogJ0luY2x1cmUgbGVzIHJlc3NvdXJjZXMgZGVzIHZhaXNzZWF1eCBwZXJkdXMgZW4gY29tYmF0cyBkYW5zIGxlIGJpbGFuIGRlcyByZXNzb3VyY2VzJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGluY2x1ZGVMb3N0TG9vdFJlc291cmNlczoge1xyXG4gICAgICAgICAgICBoZWFkZXI6ICdSZXNzb3VyY2VzIHBlcmR1ZXMgZW4gY29tYmF0cycsXHJcbiAgICAgICAgICAgIGNoZWNrYm94TGFiZWw6ICdJbmNsdXJlIGxlcyByZXNzb3VyY2VzIHBlcmR1ZXMgZW4gY29tYmF0cyBkYW5zIGxlIGJpbGFuIGRlcyByZXNzb3VyY2VzJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIHNob3dDb252ZXJ0ZWRVbml0c0luVGFibGVzOiB7XHJcbiAgICAgICAgdGl0bGU6ICdVU00vVVNEIGRhbnMgbGVzIHRhYmxlcycsXHJcbiAgICAgICAgbGFiZWw6ICdBZmZpY2hlciBsZXMgdmFsZXVycyBjb252ZXJ0aWVzIFVTTS9VU0QgZGFucyBsZXMgdGFibGVzJyxcclxuXHJcbiAgICAgICAgaW5mb0Ftb3J0aXphdGlvbjogJ0xlIHRlbXBzIGRcXCdhbW9ydGlzc2VtZW50IHNlcmEgdG91am91cnMgY2FsY3Vsw6kgZW4gdXRpbGlzYW50IGxlIGNvw7t0IGV0IGxhIHByb2R1Y3Rpb24gZW4gVVNNL1VTRCcsXHJcbiAgICB9LFxyXG5cclxuICAgIHJlc2V0OiAnUsOpaW5pdGlhbGlzZXIgbGVzIHBhcmFtw6h0cmVzJyxcclxuICAgIHNldERlZmF1bHRSb3V0ZTogJ0TDqWZpbmlyIGNvbW1lIHBhciBkw6lmYXV0JyxcclxuICAgIHNldERlZmF1bHRTdWJSb3V0ZTogJ0TDqWZpbmlyIGNvbW1lIHBhciBkw6lmYXV0IHBvdXIgY2V0dGUgem9uZScsXHJcblxyXG4gICAgZGFuZ2VyWm9uZToge1xyXG4gICAgICAgIGRvWW91V2FudFRvQ29udGludWU6ICfDilRFUy1WT1VTIFPDm1IgREUgVk9VTE9JUiBDT05USU5VRVIgPycsXHJcblxyXG4gICAgICAgIGRlbGV0ZUV4cGVkaXRpb25zOiB7XHJcbiAgICAgICAgICAgIGJ1dHRvbjogKGFjY291bnQ6IHN0cmluZykgPT4gYFN1cHByaW1lciB0b3V0ZXMgbGVzIGV4cMOpZGl0aW9ucyBzdWl2aWVzIHBvdXIgbGUgY29tcHRlIGFjdHVlbGxlbWVudCBzw6lsZWN0aW9ubsOpICgke2FjY291bnR9KWAsXHJcbiAgICAgICAgICAgIGNvbmZpcm1hdGlvblRleHQ6IChhY2NvdW50OiBzdHJpbmcsIGNvdW50OiBzdHJpbmcpID0+IGBTaSB2b3VzIGNvbmZpcm1leiwgdG91dGVzIGxlcyAke2NvdW50fSBleHDDqWRpdGlvbnMgc3VpdmllcyBzZXJvbnQgc3VwcHJpbcOpZXMgcG91ciBsZSBjb21wdGUgYWN0dWVsbGVtZW50IHPDqWxlY3Rpb25uw6kgKCR7YWNjb3VudH0pLmAsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZWxldGVDb21iYXRzOiB7XHJcbiAgICAgICAgICAgIGJ1dHRvbjogKGFjY291bnQ6IHN0cmluZykgPT4gYFN1cHByaW1lciB0b3VzIGxlcyBjb21iYXRzIHN1aXZpcyBwb3VyIGxlIGNvbXB0ZSBhY3R1ZWxsZW1lbnQgc8OpbGVjdGlvbm7DqSAoJHthY2NvdW50fSlgLFxyXG4gICAgICAgICAgICBjb25maXJtYXRpb25UZXh0OiAoYWNjb3VudDogc3RyaW5nLCBjb3VudDogc3RyaW5nKSA9PiBgU2kgdm91cyBjb25maXJtZXosIHRvdXMgbGVzICR7Y291bnR9IGNvbWJhdHMgc3VpdmlzIHNlcm9udCBzdXBwcmltw6lzIHBvdXIgbGUgY29tcHRlIGFjdHVlbGxlbWVudCBzw6lsZWN0aW9ubsOpICgke2FjY291bnR9KS5gLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGVsZXRlRGVicmlzRmllbGRSZXBvcnRzOiB7XHJcbiAgICAgICAgICAgIGJ1dHRvbjogKGFjY291bnQ6IHN0cmluZykgPT4gYFN1cHByaW1lciB0b3VzIGxlcyByYXBwb3J0cyBkZSByw6ljb2x0ZSBkZSBjaGFtcHMgZGUgZMOpYnJpcyBzdWl2aXMgcG91ciBsZSBjb21wdGUgYWN0dWVsbGVtZW50IHPDqWxlY3Rpb25uw6kgKCR7YWNjb3VudH0pYCxcclxuICAgICAgICAgICAgY29uZmlybWF0aW9uVGV4dDogKGFjY291bnQ6IHN0cmluZywgY291bnQ6IHN0cmluZykgPT4gYFNpIHZvdXMgY29uZmlybWV6LCB0b3VzIGxlcyAke2NvdW50fSByYXBwb3J0cyBkZSByw6ljb2x0ZSBkZSBjaGFtcHMgZGUgZMOpYnJpcyBzdWl2aXMgc2Vyb250IHN1cHByaW3DqXMgcG91ciBsZSBjb21wdGUgYWN0dWVsbGVtZW50IHPDqWxlY3Rpb25uw6kgKCR7YWNjb3VudH0pLmAsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZWxldGVBY2NvdW50OiB7XHJcbiAgICAgICAgICAgIGJ1dHRvbjogKGFjY291bnQ6IHN0cmluZykgPT4gYFN1cHByaW1lciB0b3V0ZXMgbGVzIGRvbm7DqWVzIGR1IGNvbXB0ZSBhY3R1ZWxsZW1lbnQgc8OpbGVjdGlvbm7DqSAoJHthY2NvdW50fSlgLFxyXG4gICAgICAgICAgICBjb25maXJtYXRpb25UZXh0OiAoYWNjb3VudDogc3RyaW5nKSA9PiBgU2kgdm91cyBjb25maXJtZXosIHRvdXRlcyBsZXMgZG9ubsOpZXMgc3VpdmllcyBwb3VyIGxlIGNvbXB0ZSBhY3R1ZWxsZW1lbnQgc8OpbGVjdGlvbm7DqSAoJHthY2NvdW50fSkgc2Vyb250IHN1cHByaW3DqWVzLlxcbmBcclxuICAgICAgICAgICAgICAgICsgYENlbGEgaW5jbHV0IGxlcyBkb25uw6llcyBzdWl2aWVzIGRlIGwnaGlzdG9yaXF1ZSBkZSBsJ3VuaXZlcnMgcydpbCBuJ3kgYSBwYXMgZCdhdXRyZSBjb21wdGUgc3VpdmkgcG91ciBjZXQgdW5pdmVycy5gLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGVsZXRlVW5pdmVyc2VIaXN0b3J5OiB7XHJcbiAgICAgICAgICAgIGJ1dHRvbjogKHNlcnZlcjogc3RyaW5nKSA9PiBgU3VwcHJpbWVyIGwnaGlzdG9yaXF1ZSBkZSBsJ3VuaXZlcnMgc3VpdmkgZHUgc2VydmV1ciBhY3R1ZWxsZW1lbnQgc8OpbGVjdGlvbm7DqSAoJHtzZXJ2ZXJ9KWAsXHJcbiAgICAgICAgICAgIGNvbmZpcm1hdGlvblRleHQ6IChzZXJ2ZXI6IHN0cmluZykgPT4gYFNpIHZvdXMgY29uZmlybWV6LCB0b3V0ZXMgbGVzIGRvbm7DqWVzIGQnaGlzdG9yaXF1ZSBkZSBsJ3VuaXZlcnMgc3VpdmllcyBwb3VyIGxlIHNlcnZldXIgYWN0dWVsbGVtZW50IHPDqWxlY3Rpb25uw6kgKCR7c2VydmVyfSkgc2Vyb250IHN1cHByaW3DqWVzLmAsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZWxldGVFdmVyeXRoaW5nOiB7XHJcbiAgICAgICAgICAgIGJ1dHRvbjogJ1N1cHByaW1lciB0b3V0ZXMgbGVzIGRvbm7DqWVzJyxcclxuICAgICAgICAgICAgY29uZmlybWF0aW9uVGV4dDE6IGBTaSB2b3VzIGNvbmZpcm1leiwgdG91dGVzIGxlcyBkb25uw6llcyBzZXJvbnQgc3VwcHJpbcOpZXMuXFxuYFxyXG4gICAgICAgICAgICAgICAgKyAnQ2VsYSBpbmNsdXQgbGVzIGRvbm7DqWVzIHN1aXZpZXMgZGUgY2hhcXVlIGNvbXB0ZSwgeSBjb21wcmlzIGxlcyBleHDDqWRpdGlvbnMgc3VpdmllcywgbGVzIGNvbWJhdHMgc3VpdmlzLCBsZXMgcmFwcG9ydHMgZGUgcsOpY29sdGUgZGUgY2hhbXBzIGRlIGTDqWJyaXMgc3VpdmlzLCBsZXMgZG9ubsOpZXMgZFxcJ2hpc3RvcmlxdWUgZGUgbFxcJ3VuaXZlcnMgZXQgcGx1cyBlbmNvcmUuJyxcclxuICAgICAgICAgICAgY29uZmlybWF0aW9uVGV4dDI6ICdWZXVpbGxleiBjb25maXJtZXIgw6Agbm91dmVhdSBxdWUgdm91cyB2b3VsZXogc3VwcHJpbWVyIHRvdXRlcyBsZXMgZG9ubsOpZXMuJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuXHJcbiAgICBpbXBvcnRFeHBvcnQ6IHtcclxuICAgICAgICBleHBvcnQ6IHtcclxuICAgICAgICAgICAgaGVhZGVyOiAnRXhwb3J0ZXInLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0ljaSwgdm91cyBwb3V2ZXogZXhwb3J0ZXIgdm9zIGRvbm7DqWVzLiBDZWxhIGluY2x1cmEgbGVzIGRvbm7DqWVzIHBlcnRpbmVudGVzIGRlIHRvdXMgdm9zIGNvbXB0ZXMgc3VpdmlzIGV0IGRlIGxldXJzIHNlcnZldXJzLicsXHJcbiAgICAgICAgICAgIGluY2x1ZGVVbml2ZXJzZUhpc3Rvcnk6ICdpbmNsdXJlIGxcXCdoaXN0b3JpcXVlIGRlIGxcXCd1bml2ZXJzIGRhbnMgbFxcJ2V4cG9ydGF0aW9uIChjZWxhIHBldXQgY29uc2lkw6lyYWJsZW1lbnQgYXVnbWVudGVyIGxhIHRhaWxsZSBkdSBmaWNoaWVyIGV0IGxlIHRlbXBzIGRcXCdpbXBvcnRhdGlvbiAhKScsXHJcbiAgICAgICAgICAgIGJ1dHRvbjogJ0NvbW1lbmNlciBsXFwnZXhwb3J0YXRpb24nLFxyXG4gICAgICAgICAgICB3YWl0OiAnVmV1aWxsZXogcGF0aWVudGVyIHBlbmRhbnQgcXVlIHZvcyBkb25uw6llcyBzb250IHByw6lwYXLDqWVzIHBvdXIgbFxcJ2V4cG9ydGF0aW9uLi4uJyxcclxuXHJcbiAgICAgICAgICAgIGVycm9yczoge1xyXG4gICAgICAgICAgICAgICAgdW5leHBlY3RlZEVycm9yOiAnVW5lIGVycmV1ciBpbmF0dGVuZHVlIHNcXCdlc3QgcHJvZHVpdGUgbG9ycyBkZSBsXFwnZXhwb3J0YXRpb24gZGUgdm9zIGRvbm7DqWVzLicsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbXBvcnQ6IHtcclxuICAgICAgICAgICAgaGVhZGVyOiAnSW1wb3J0ZXInLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0ljaSwgdm91cyBwb3V2ZXogaW1wb3J0ZXIgdm9zIGRvbm7DqWVzIMOgIHBhcnRpciBkXFwndW4gZmljaGllci4gVmV1aWxsZXogc8OpbGVjdGlvbm5lciB2b3RyZSBmaWNoaWVyLicsXHJcbiAgICAgICAgICAgIGJ1dHRvbjogJ0NvbW1lbmNlciBsXFwnaW1wb3J0YXRpb24nLFxyXG4gICAgICAgICAgICB3YWl0OiAnVmV1aWxsZXogcGF0aWVudGVyIHBlbmRhbnQgcXVlIHZvcyBkb25uw6llcyBzb250IGltcG9ydMOpZXMuLi4nLFxyXG5cclxuICAgICAgICAgICAgZXJyb3JzOiB7XHJcbiAgICAgICAgICAgICAgICBpbnZhbGlkRm9ybWF0OiAnTGUgZm9ybWF0IGR1IGZpY2hpZXIgZXN0IGludmFsaWRlLicsXHJcbiAgICAgICAgICAgICAgICB1bmV4cGVjdGVkRXJyb3I6ICdVbmUgZXJyZXVyIGluYXR0ZW5kdWUgc1xcJ2VzdCBwcm9kdWl0ZSBsb3JzIGRlIGxcXCdpbXBvcnRhdGlvbiBkZSB2b3MgZG9ubsOpZXMuJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbXBvcnRDYWxsYmFja3M6IHtcclxuICAgICAgICAgICAgaW1wb3J0aW5nU2V0dGluZ3M6ICdJbXBvcnRhdGlvbiBkZSB2b3MgcGFyYW3DqHRyZXMnLFxyXG4gICAgICAgICAgICBpbXBvcnRpbmdCYXNpY0RhdGE6ICdJbXBvcnRhdGlvbiBkZXMgZG9ubsOpZXMgZGUgYmFzZSBkdSBjb21wdGUgZXQgZHUgc2VydmV1cicsXHJcbiAgICAgICAgICAgIGltcG9ydGluZ1VuaXZlcnNlSGlzdG9yaWVzOiAoXHJcbiAgICAgICAgICAgICAgICBzZXJ2ZXJJbmRleDogbnVtYmVyLCBcclxuICAgICAgICAgICAgICAgIHNlcnZlclRvdGFsOiBudW1iZXIsIFxyXG4gICAgICAgICAgICAgICAgZW50cnlJbmRleDogbnVtYmVyLCBcclxuICAgICAgICAgICAgICAgIGVudHJ5VG90YWw6IG51bWJlcixcclxuICAgICAgICAgICAgKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBiYXNlTWVzc2FnZSA9IGBJbXBvcnRhdGlvbiBkZSBsJ2hpc3RvcmlxdWUgZGUgbCd1bml2ZXJzIGR1IHNlcnZldXJgO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBgJHtiYXNlTWVzc2FnZX0gKHNlcnZldXIgJHtzZXJ2ZXJJbmRleCArIDF9LyR7c2VydmVyVG90YWx9LCBlbnRyw6llICR7ZW50cnlJbmRleCArIDF9LyR7ZW50cnlUb3RhbH0pYDsgICAgICBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW1wb3J0aW5nQWNjb3VudHM6IChcclxuICAgICAgICAgICAgICAgIGFjY291bnRJbmRleDogbnVtYmVyLCBcclxuICAgICAgICAgICAgICAgIHRvdGFsQWNjb3VudHM6IG51bWJlciwgXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnYWNjb3VudCcgfCAnY29tYmF0LXJlcG9ydHMnIHwgJ2V4cGVkaXRpb25zJyB8ICdkZWJyaXMtZmllbGRzJyB8ICdsaWZlZm9ybS1kaXNjb3ZlcmllcycgfCAndW5pdmVyc2Utc3BlY2lmaWMtc2V0dGluZ3MnIHwgJ2VtcGlyZS5kYXRhJyB8ICdlbXBpcmUucGxhbmV0cycgfCAnZW1waXJlLm1vb25zJyxcclxuICAgICAgICAgICAgICAgIHN0ZXBJbmRleDogbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgc3RlcFRvdGFsOiBudW1iZXIsXHJcbiAgICAgICAgICAgICkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmFzZU1lc3NhZ2UgPSBgSW1wb3J0YXRpb24gZGVzIGNvbXB0ZXNgO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWNjb3VudFByb2dyZXNzID0gYCR7YWNjb3VudEluZGV4ICsgMX0vJHt0b3RhbEFjY291bnRzfWA7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYodHlwZSA9PSAnYWNjb3VudCcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7YmFzZU1lc3NhZ2V9ICgke2FjY291bnRQcm9ncmVzc30pYDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZih0eXBlID09ICdjb21iYXQtcmVwb3J0cycpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7YmFzZU1lc3NhZ2V9ICgke2FjY291bnRQcm9ncmVzc30sIGNvbWJhdCAke3N0ZXBJbmRleCArIDF9LyR7c3RlcFRvdGFsfSlgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKHR5cGUgPT0gJ2V4cGVkaXRpb25zJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtiYXNlTWVzc2FnZX0gKCR7YWNjb3VudFByb2dyZXNzfSwgZXhww6lkaXRpb24gJHtzdGVwSW5kZXggKyAxfS8ke3N0ZXBUb3RhbH0pYDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZih0eXBlID09ICdkZWJyaXMtZmllbGRzJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtiYXNlTWVzc2FnZX0gKCR7YWNjb3VudFByb2dyZXNzfSwgY2hhbXAgZGUgZMOpYnJpcyAke3N0ZXBJbmRleCArIDF9LyR7c3RlcFRvdGFsfSlgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKHR5cGUgPT0gJ2xpZmVmb3JtLWRpc2NvdmVyaWVzJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtiYXNlTWVzc2FnZX0gKCR7YWNjb3VudFByb2dyZXNzfSwgbWlzc2lvbiBkZSBkw6ljb3V2ZXJ0ZSAke3N0ZXBJbmRleCArIDF9LyR7c3RlcFRvdGFsfSlgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKHR5cGUgPT0gJ2VtcGlyZS5kYXRhJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtiYXNlTWVzc2FnZX0gKCR7YWNjb3VudFByb2dyZXNzfSwgZG9ubsOpZXMgZGUgYmFzZSBkZSBsJ2VtcGlyZSlgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKHR5cGUgPT0gJ2VtcGlyZS5wbGFuZXRzJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtiYXNlTWVzc2FnZX0gKCR7YWNjb3VudFByb2dyZXNzfSwgcGxhbsOodGUgJHtzdGVwSW5kZXggKyAxfS8ke3N0ZXBUb3RhbH0pYDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKHR5cGUgPT0gJ2VtcGlyZS5tb29ucycpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7YmFzZU1lc3NhZ2V9ICgke2FjY291bnRQcm9ncmVzc30sIGx1bmUgJHtzdGVwSW5kZXggKyAxfS8ke3N0ZXBUb3RhbH0pYDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZih0eXBlID09ICd1bml2ZXJzZS1zcGVjaWZpYy1zZXR0aW5ncycpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7YmFzZU1lc3NhZ2V9ICgke2FjY291bnRQcm9ncmVzc30sIHBhcmFtw6h0cmVzIHNww6ljaWZpcXVlcyDDoCBsJ3VuaXZlcnMpYDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdHlwZSAnJHt0eXBlfSdgKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIGFjY2Vzc2liaWxpdHk6IHtcclxuICAgICAgICBzaG93U2ltcGxpZmllZFJlc3VsdHM6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICdWaXN1YWxpc2F0aW9uIHNpbXBsaWZpw6llJyxcclxuICAgICAgICAgICAgbGFiZWw6ICdWaXN1YWxpc2F0aW9uIHNpbXBsaWZpw6llLCBtYXNxdWUgbGVzIG1lc3NhZ2VzIG9yaWdpbmF1eCBkZXMgcsOpc3VsdGF0cyBkXFwnZXhww6lkaXRpb24gZXQgZGVzIHJhcHBvcnRzIGRlIHLDqWNvbHRlIGRlIGNoYW1wcyBkZSBkw6licmlzLCBldCBhZmZpY2hlIGRlcyBpY8O0bmVzIGF1IGxpZXUgZGUgdGV4dGVzIGRhbnMgbGVzIG5vdGlmaWNhdGlvbnMuJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuXHJcbiAgICBkZWJyaXNGaWVsZHM6IHtcclxuICAgICAgICBzZXBhcmF0ZUV4cGVkaXRpb25EZWJyaXNGaWVsZHM6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICdTw6lwYXJlciBsYSBwb3NpdGlvbiAxNicsXHJcbiAgICAgICAgICAgIGxhYmVsOiAnU8OpcGFyZXIgbGVzIGNoYW1wcyBkZSBkw6licmlzIHLDqWNvbHTDqXMgZW4gcG9zaXRpb24gMTYgZGVzIHBvc2l0aW9ucyAxIMOgIDE1JyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuXHJcbiAgICBsaW5rQWNjb3VudHM6IHtcclxuICAgICAgICBoZWFkZXI6IChhY2NvdW50OiBzdHJpbmcpID0+IGBMaWVyIGRlcyBjb21wdGVzIGF2ZWMgbGUgY29tcHRlIGFjdHVlbCAoJHthY2NvdW50fSlgLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uSHRtbDogKGFjY291bnQ6IHN0cmluZykgPT5cclxuICAgICAgICAgICAgYFZvdXMgbmUgZGV2cmlleiBsaWVyIGRlcyBjb21wdGVzIHF1ZSBzaSB2b3VzIHZvdWxleiBxdWUgbCdPR2FtZSBUcmFja2VyIGNvbnNpZMOocmUgbGVzIGRvbm7DqWVzIGRlcyBjb21wdGVzIGxpw6lzIGNvbW1lIGRlcyBkb25uw6llcyBkdSBjb21wdGUgYWN0dWVsICgke2FjY291bnR9KS48YnIvPmBcclxuICAgICAgICAgICAgKyBgQydlc3Qgc291dmVudCBsZSBjYXMgbG9yc3F1ZSBxdSd1biBjb21wdGUgYSDDqXTDqSBmdXNpb25uw6kgYXZlYyB1biBhdXRyZSBzZXJ2ZXVyIGV0IGVzdCB0cmFpdMOpIGNvbW1lIHVuIGNvbXB0ZSBkaXN0aW5jdCBkYW5zIGwnT0dhbWUgVHJhY2tlci48YnIvPjxici8+YFxyXG4gICAgICAgICAgICArIGBFeGVtcGxlOiA8YnIvPmBcclxuICAgICAgICAgICAgKyBgPG9sPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaT5sZSBqb3VldXIgXCJPR2FtZSBQcm9mZXNzaW9uYWxcIiBqb3VlIHN1ciBsZSBzZXJ2ZXVyIFwiRlIgVm9pZSBMYWN0w6llXCI8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaT5sZSBzZXJ2ZXVyIFwiRlIgVm9pZSBMYWN0w6llXCIgZGV2aWVudCB1biB1bml2ZXJzIGV4b2RlIGxvcnMgZCd1bmUgZnVzaW9uPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGk+bGUgam91ZXVyIFwiT0dhbWUgUHJvZmVzc2lvbmFsXCIgZnVzaW9ubmUgc29uIGNvbXB0ZSBhdmVjIFwiRlIgVHLDqGZsZVwiPC9saT5cclxuICAgICAgICAgICAgICAgICAgICA8bGk+YXByw6hzIGxhIGZ1c2lvbiwgbCdPR2FtZSBUcmFja2VyIG5lIG1vbnRyZSBhdWN1bmUgZXhww6lkaXRpb24gZGUgbCdhbmNpZW4gc2VydmV1ciBcIkZSIFZvaWUgTGFjdMOpZVwiIHBvdXIgbGUgY29tcHRlIGZ1c2lvbm7DqTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgPGxpPmRhbnMgbCdPR2FtZSBUcmFja2VyLCBsJ2FuY2llbiBjb21wdGUgXCJPR2FtZSBQcm9mZXNzaW9uYWxcIiBzdXIgbGUgc2VydmV1ciBcIkZSIFZvaWUgTGFjdMOpZVwiIGVzdCBsacOpIGF1IG5vdXZlYXUgY29tcHRlIFwiT0dhbWUgUHJvZmVzc2lvbmFsXCIgc3VyIGxlIHNlcnZldXIgXCJGUiBUcsOoZmxlXCI8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDxsaT5sZXMgZXhww6lkaXRpb25zIHF1aSBvbnQgw6l0w6kgZW52b3nDqWVzIHN1ciBsJ2FuY2llbiBzZXJ2ZXVyIFwiRlIgVm9pZSBMYWN0w6llXCIgYXBwYXJhw650cm9udCBtYWludGVuYW50IMOgIG5vdXZlYXUgcG91ciBsZSBjb21wdGUgZnVzaW9ubsOpIHN1ciBcIkZSIFRyw6hmbGVcIjwvbGk+XHJcbiAgICAgICAgICAgICAgICA8L29sPlxyXG4gICAgICAgICAgICBgLFxyXG4gICAgICAgIGxpbmtBY2NvdW50OiAnbGllciB1biBhdXRyZSBjb21wdGUgOicsXHJcbiAgICAgICAgbGlua2VkQWNjb3VudHM6ICdDb21wdGVzIGxpw6lzIDonLFxyXG4gICAgfSxcclxufTtcclxuIiwiaW1wb3J0IHsgUmVzb3VyY2VUeXBlIH0gZnJvbSBcIi4uLy4uLy4uL21vZGVscy9vZ2FtZS9yZXNvdXJjZXMvUmVzb3VyY2VUeXBlXCI7XHJcbmltcG9ydCB7IFJlc291cmNlVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBmcjogUmVzb3VyY2VUcmFuc2xhdGlvbnMgPSB7XHJcbiAgICBbUmVzb3VyY2VUeXBlLm1ldGFsXTogJ03DqXRhbCcsXHJcbiAgICBbUmVzb3VyY2VUeXBlLmNyeXN0YWxdOiAnQ3Jpc3RhbCcsXHJcbiAgICBbUmVzb3VyY2VUeXBlLmRldXRlcml1bV06ICdEZXV0w6lyaXVtJyxcclxuICAgIGVuZXJneTogJ8OJbmVyZ2llJyxcclxufTsiLCJpbXBvcnQgeyBJMThuTWVzc2FnZU1hcCB9IGZyb20gJy4vJGkxOG4nO1xyXG5pbXBvcnQgeyBkZSB9IGZyb20gJy4vZGUnO1xyXG5pbXBvcnQgeyBlbiB9IGZyb20gJy4vZW4nO1xyXG5pbXBvcnQgeyBwdF9wdCB9IGZyb20gJy4vcHRfcHQnO1xyXG5pbXBvcnQgeyBmciB9IGZyb20gJy4vZnInO1xyXG5pbXBvcnQgeyBFeHRlbnNpb25UcmFuc2xhdGlvbnMgfSBmcm9tICcuL3R5cGUnO1xyXG5cclxuY29uc3QgdHJhbnNsYXRpb25zOiBJMThuTWVzc2FnZU1hcDxFeHRlbnNpb25UcmFuc2xhdGlvbnM+ID0ge1xyXG4gICAgZGUsXHJcbiAgICBlbixcclxuICAgIFwicHQtcHRcIjogcHRfcHQsXHJcbiAgICBmcixcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRpb25zOyIsImltcG9ydCB7IGZyIGFzIHNoaXBzIH0gZnJvbSAnLi4vb2dhbWUvc2hpcHMvZnInO1xyXG5pbXBvcnQgeyBmciBhcyBkZWZlbnNlcyB9IGZyb20gJy4uL29nYW1lL2RlZmVuc2VzL2ZyJztcclxuaW1wb3J0IHsgZnIgYXMgYnVpbGRpbmdzIH0gZnJvbSAnLi4vb2dhbWUvYnVpbGRpbmdzL2ZyJztcclxuaW1wb3J0IHsgZnIgYXMgcmVzZWFyY2ggfSBmcm9tICcuLi9vZ2FtZS9yZXNlYXJjaC9mcic7XHJcbmltcG9ydCB7IGZyIGFzIGxpZmVmb3JtcyB9IGZyb20gJy4uL29nYW1lL2xpZmVmb3Jtcy9mcic7XHJcbmltcG9ydCB7IGZyIGFzIGxpZmVmb3JtQnVpbGRpbmdzIH0gZnJvbSAnLi4vb2dhbWUvbGlmZWZvcm1zL2J1aWxkaW5ncy9mcic7XHJcbmltcG9ydCB7IGZyIGFzIGxpZmVmb3JtVGVjaG5vbG9naWVzIH0gZnJvbSAnLi4vb2dhbWUvbGlmZWZvcm1zL3RlY2hub2xvZ2llcy9mcic7XHJcbmltcG9ydCB7IGZyIGFzIHByZW1pdW0gfSBmcm9tICcuLi9vZ2FtZS9wcmVtaXVtL2ZyJztcclxuXHJcbmltcG9ydCB7IEV4dGVuc2lvblRyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVcIjtcclxuaW1wb3J0IHsgZnIgYXMgc2V0dGluZ3MgfSBmcm9tICcuL3NldHRpbmdzL2ZyJztcclxuaW1wb3J0IHsgZnIgYXMgcmVzb3VyY2VzIH0gZnJvbSAnLi9yZXNvdXJjZXMvZnInO1xyXG5pbXBvcnQgeyBmciBhcyBjb21tb24gfSBmcm9tICcuL2NvbW1vbi9mcic7XHJcbmltcG9ydCB7IGZyIGFzIGV4cGVkaXRpb25zIH0gZnJvbSAnLi9leHBlZGl0aW9ucy9mcic7XHJcbmltcG9ydCB7IGZyIGFzIGNvbWJhdHMgfSBmcm9tICcuL2NvbWJhdHMvZnInO1xyXG5pbXBvcnQgeyBmciBhcyBkb25hdGUgfSBmcm9tICcuL2RvbmF0ZS9mcic7XHJcbmltcG9ydCB7IGZyIGFzIGRlYnJpc0ZpZWxkcyB9IGZyb20gJy4vZGVicmlzRmllbGRzL2ZyJztcclxuaW1wb3J0IHsgZnIgYXMgcmVzb3VyY2VCYWxhbmNlIH0gZnJvbSAnLi9yZXNvdXJjZUJhbGFuY2UvZnInO1xyXG5pbXBvcnQgeyBmciBhcyBlbXBpcmUgfSBmcm9tICcuL2VtcGlyZS9mcic7XHJcbmltcG9ydCB7IGZyIGFzIHN3aXRjaEFjY291bnRzIH0gZnJvbSAnLi9zd2l0Y2hBY2NvdW50cy9mcic7XHJcbmltcG9ydCB7IGZyIGFzIGFib3V0IH0gZnJvbSAnLi9hYm91dC9mcic7XHJcbmltcG9ydCB7IGZyIGFzIHVuaXZlcnNlSGlzdG9yeSB9IGZyb20gJy4vdW5pdmVyc2VIaXN0b3J5L2ZyJztcclxuaW1wb3J0IHsgZnIgYXMgbm90aWZpY2F0aW9ucyB9IGZyb20gJy4vbm90aWZpY2F0aW9ucy9mcic7XHJcbmltcG9ydCB7IGZyIGFzIHRvb2xzIH0gZnJvbSAnLi90b29scy9mcic7XHJcblxyXG5pbXBvcnQgeyBmciBhcyBleGNlbEV4cG9ydCB9IGZyb20gJy4vZXhjZWxFeHBvcnQvZnInO1xyXG5pbXBvcnQgeyBmciBhcyBwbGF5ZXJDbGFzc2VzIH0gZnJvbSAnLi9wbGF5ZXJDbGFzc2VzL2ZyJztcclxuaW1wb3J0IHsgUmVjdXJzaXZlUGFydGlhbCB9IGZyb20gJ0Avc2hhcmVkL3R5cGVzL1JlY3Vyc2l2ZVBhcnRpYWwnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGZyOiBSZWN1cnNpdmVQYXJ0aWFsPEV4dGVuc2lvblRyYW5zbGF0aW9ucz4gPSB7XHJcbiAgICBvZ2FtZToge1xyXG4gICAgICAgIGJ1aWxkaW5ncyxcclxuICAgICAgICBsaWZlZm9ybXMsXHJcbiAgICAgICAgbGlmZWZvcm1CdWlsZGluZ3MsXHJcbiAgICAgICAgbGlmZWZvcm1UZWNobm9sb2dpZXMsXHJcbiAgICAgICAgcHJlbWl1bSxcclxuICAgICAgICByZXNvdXJjZXMsXHJcbiAgICAgICAgcmVzZWFyY2gsXHJcbiAgICAgICAgc2hpcHMsXHJcbiAgICAgICAgZGVmZW5zZXMsXHJcbiAgICB9LFxyXG5cclxuICAgIGV4dGVuc2lvbjoge1xyXG4gICAgICAgIGNvbW1vbixcclxuICAgICAgICBzZXR0aW5ncyxcclxuICAgICAgICByZXNvdXJjZXMsXHJcbiAgICAgICAgZXhwZWRpdGlvbnMsXHJcbiAgICAgICAgY29tYmF0cyxcclxuICAgICAgICBkb25hdGUsXHJcbiAgICAgICAgZGVicmlzRmllbGRzLFxyXG4gICAgICAgIHJlc291cmNlQmFsYW5jZSxcclxuICAgICAgICBlbXBpcmUsXHJcbiAgICAgICAgc3dpdGNoQWNjb3VudHMsXHJcbiAgICAgICAgYWJvdXQsXHJcbiAgICAgICAgdW5pdmVyc2VIaXN0b3J5LFxyXG4gICAgICAgIG5vdGlmaWNhdGlvbnMsXHJcbiAgICAgICAgdG9vbHMsXHJcblxyXG4gICAgICAgIGV4Y2VsRXhwb3J0LFxyXG4gICAgICAgIHBsYXllckNsYXNzZXMsXHJcbiAgICB9LFxyXG59O1xyXG4iLCJpbXBvcnQgeyBSZXNvdXJjZVRyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVcIjtcclxuaW1wb3J0IHsgZnIgYXMgb2dhbWVSZXNvdXJjZXMgfSBmcm9tICcuLi8uLi9vZ2FtZS9yZXNvdXJjZXMvZnInO1xyXG5pbXBvcnQgeyBSZWN1cnNpdmVQYXJ0aWFsIH0gZnJvbSBcIkAvc2hhcmVkL3R5cGVzL1JlY3Vyc2l2ZVBhcnRpYWxcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBmcjogUmVjdXJzaXZlUGFydGlhbDxSZXNvdXJjZVRyYW5zbGF0aW9ucz4gPSBvZ2FtZVJlc291cmNlcztcclxuIiwiaW1wb3J0IHsgUmVjdXJzaXZlUGFydGlhbCB9IGZyb20gXCJAL3NoYXJlZC90eXBlcy9SZWN1cnNpdmVQYXJ0aWFsXCI7XHJcbmltcG9ydCB7IENvbW1vblRyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBmcjogUmVjdXJzaXZlUGFydGlhbDxDb21tb25UcmFuc2xhdGlvbnM+ID0ge1xyXG4gICAgYXZlcmFnZVBlckRheTogJ+KMgCBwYXIgam91cicsXHJcbiAgICBjaGFydDogJ0dyYXBoaXF1ZScsXHJcbiAgICB0YWJsZTogJ1RhYmxlYXUnLFxyXG4gICAgc3VtOiAnU29tbWUnLFxyXG4gICAgdG90YWw6ICdUb3RhbCcsXHJcbiAgICByZXNvdXJjZVVuaXRzOiAnVW5pdMOpcyBkZXMgcmVzc291cmNlcycsXHJcbiAgICBkc3U6ICdVU0QnLFxyXG4gICAgbXN1OiAnVVNNJyxcclxuICAgIGRhdGU6ICdEYXRlJyxcclxuICAgIGRhdGVUaW1lOiAnRGF0ZSBldCBoZXVyZScsXHJcblxyXG4gICAgbWFkZVdpdGhMb3ZlMTogJ0Nyw6nDqSBhdmVjJyxcclxuICAgIG1hZGVXaXRoTG92ZTI6ICdwYXIgV29ua3lkb25reScsXHJcbn07XHJcbiIsImltcG9ydCB7IEV4cGVkaXRpb25FdmVudFNpemUgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL2V4cGVkaXRpb25zL0V4cGVkaXRpb25FdmVudFNpemVcIjtcclxuaW1wb3J0IHsgRXhwZWRpdGlvbkV2ZW50VHlwZSB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvZXhwZWRpdGlvbnMvRXhwZWRpdGlvbkV2ZW50VHlwZVwiO1xyXG5pbXBvcnQgeyBFeHBlZGl0aW9uc1RyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVcIjtcclxuaW1wb3J0IHsgZnIgYXMgb2dhbWVQcmVtaXVtIH0gZnJvbSAnLi4vLi4vb2dhbWUvcHJlbWl1bS9mcic7XHJcbmltcG9ydCB7IGZyIGFzIG9nYW1lRmFjdGlvbnMgfSBmcm9tICcuLi8uLi9vZ2FtZS9mYWN0aW9ucy9mcic7XHJcbmltcG9ydCB7IEV4cGVkaXRpb25EZXBsZXRpb25MZXZlbCB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvZXhwZWRpdGlvbnMvRXhwZWRpdGlvbkRlcGxldGlvbkxldmVsXCI7XHJcbmltcG9ydCB7IFJlY3Vyc2l2ZVBhcnRpYWwgfSBmcm9tIFwiQC9zaGFyZWQvdHlwZXMvUmVjdXJzaXZlUGFydGlhbFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGZyOiBSZWN1cnNpdmVQYXJ0aWFsPEV4cGVkaXRpb25zVHJhbnNsYXRpb25zPiA9IHtoZWFkZXI6ICdFeHDDqWRpdGlvbnMnLFxyXG4gICAgdGFiSGVhZGVyczoge1xyXG4gICAgICAgIG92ZXJ2aWV3OiAnVnVlIGRcXCdlbnNlbWJsZScsXHJcbiAgICAgICAgZm91bmRSZXNvdXJjZXM6ICdSZXNzb3VyY2VzJyxcclxuICAgICAgICBmb3VuZFNoaXBzOiAnVmFpc3NlYXV4JyxcclxuICAgICAgICBmb3VuZERhcmtNYXR0ZXI6IG9nYW1lUHJlbWl1bS5kYXJrTWF0dGVyLFxyXG4gICAgICAgIGZvdW5kSXRlbXM6ICdPYmpldHMnLFxyXG4gICAgICAgIGRlcGxldGlvbjogJ8OJcHVpc2VtZW50JyxcclxuICAgICAgICBpbmZvOiB7XHJcbiAgICAgICAgICAgIGhlYWRlcjogJ0luZm8nLFxyXG5cclxuICAgICAgICAgICAgdG9wRmluZHM6ICdNZWlsbGV1cmVzIGTDqWNvdXZlcnRlcycsXHJcbiAgICAgICAgICAgIHBvc3NpYmxlRmluZHM6ICdMaXN0ZSBkZXMgZMOpY291dmVydGVzIHBvc3NpYmxlcycsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc3ViSGVhZGVyczoge1xyXG4gICAgICAgICAgICBhbW91bnQ6ICdRdWFudGl0w6knLFxyXG4gICAgICAgICAgICBzaXplczogJ1RhaWxsZXMnLFxyXG4gICAgICAgICAgICByZXNvdXJjZXM6ICdVbml0w6lzIGRlIHJlc3NvdXJjZXMnLFxyXG4gICAgICAgICAgICBjb3VudDogJ05vbWJyZScsXHJcbiAgICAgICAgICAgIHNpemVzQnlSZXNvdXJjZTogJ1RhaWxsZXMgcGFyIHJlc3NvdXJjZScsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcblxyXG4gICAgZXhwZWRpdGlvbkV2ZW50czoge1xyXG4gICAgICAgIFtFeHBlZGl0aW9uRXZlbnRUeXBlLm5vdGhpbmddOiAnQXVjdW4gw6l2w6luZW1lbnQnLFxyXG4gICAgICAgIFtFeHBlZGl0aW9uRXZlbnRUeXBlLnJlc291cmNlc106ICdSZXNzb3VyY2VzJyxcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5mbGVldF06ICdWYWlzc2VhdXgnLFxyXG4gICAgICAgIFtFeHBlZGl0aW9uRXZlbnRUeXBlLmRlbGF5XTogJ1JldGFyZCcsXHJcbiAgICAgICAgW0V4cGVkaXRpb25FdmVudFR5cGUuZWFybHldOiAnQXZhbmNlJyxcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5kYXJrTWF0dGVyXTogb2dhbWVQcmVtaXVtLmRhcmtNYXR0ZXIsXHJcbiAgICAgICAgW0V4cGVkaXRpb25FdmVudFR5cGUucGlyYXRlc106IG9nYW1lRmFjdGlvbnMucGlyYXRlcyxcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5hbGllbnNdOiBvZ2FtZUZhY3Rpb25zLmFsaWVucyxcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5jb21iYXRdOiAnQ29tYmF0JyxcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5pdGVtXTogJ09iamV0JyxcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS50cmFkZXJdOiAnTWFyY2hhbmQnLFxyXG4gICAgICAgIFtFeHBlZGl0aW9uRXZlbnRUeXBlLmxvc3RGbGVldF06ICdGbG90dGUgcGVyZHVlJyxcclxuICAgIH0sXHJcbiAgICBleHBlZGl0aW9uRXZlbnRTaXplczoge1xyXG4gICAgICAgIFtFeHBlZGl0aW9uRXZlbnRTaXplLnNtYWxsXTogJ0TDqWNvdXZlcnRlIGNvbW11bmUnLFxyXG4gICAgICAgIFtFeHBlZGl0aW9uRXZlbnRTaXplLm1lZGl1bV06ICdEw6ljb3V2ZXJ0ZSBpbXBvcnRhbnRlJyxcclxuICAgICAgICBbRXhwZWRpdGlvbkV2ZW50U2l6ZS5sYXJnZV06ICdEw6ljb3V2ZXJ0ZSBleGNlcHRpb25uZWxsZScsXHJcbiAgICAgICAgJ2ZsZWQtZGVhdGgtc3Rhcic6ICdFbm5lbWlzIG9udCBmdWknLFxyXG4gICAgfSxcclxuICAgIGRlcGxldGlvbkxldmVsczoge1xyXG4gICAgICAgIFtFeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWwubm9uZV06ICdUcsOocyBiYXMnLFxyXG4gICAgICAgIFtFeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWwubG93XTogJ0JhcycsXHJcbiAgICAgICAgW0V4cGVkaXRpb25EZXBsZXRpb25MZXZlbC5tZWRpdW1dOiAnTW95ZW4nLFxyXG4gICAgICAgIFtFeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWwuaGlnaF06ICfDiWxldsOpJyxcclxuICAgICAgICB1bmtub3duOiAnSW5jb25udScsXHJcbiAgICB9LFxyXG5cclxuICAgIGV4cGVkaXRpb25zOiAnRXhww6lkaXRpb25zJyxcclxuICAgIGZpbmRzOiAnRMOpY291dmVydGVzJyxcclxuICAgIHNoaXBzRm91bmQ6ICdWYWlzc2VhdXggdHJvdXbDqXMnLFxyXG4gICAgZGVwbGV0aW9uOiAnw4lwdWlzZW1lbnQgZHUgc3lzdMOobWUnLFxyXG5cclxuICAgIHRvcEZpbmRzOiB7XHJcbiAgICAgICAgdGl0bGU6ICh0eXBlOiBzdHJpbmcpID0+IGBNZWlsbGV1cmVzIGTDqWNvdXZlcnRlcyAoJHt0eXBlfSlgLFxyXG4gICAgICAgIHNoaXBVbml0czogJ1VuaXTDqXMgZGUgdmFpc3NlYXV4JyxcclxuXHJcbiAgICAgICAgc2l6ZTogJ1RhaWxsZScsXHJcbiAgICAgICAgYW1vdW50OiAnUXVhbnRpdMOpJyxcclxuICAgICAgICBkYXRlOiAnRGF0ZScsXHJcbiAgICB9LFxyXG4gICAgcG9zc2libGVGaW5kczoge1xyXG4gICAgICAgIGluZm86IHtcclxuICAgICAgICAgICAgcGxheWVyQ2xhc3M6ICdDbGFzc2UgZHUgam91ZXVyJyxcclxuICAgICAgICAgICAgZWNvbm9teVNwZWVkOiAnVml0ZXNzZSDDqWNvbm9taXF1ZScsXHJcbiAgICAgICAgICAgIHJlc291cmNlRmluZEJvbnVzOiAnQm9udXMgZGUgZMOpY291dmVydGVzIGRlIHJlc3NvdXJjZXMnLFxyXG4gICAgICAgICAgICBzaGlwRmluZEJvbnVzOiAnQm9udXMgZGUgZMOpY291dmVydGVzIGRlIHZhaXNzZWF1eCcsXHJcbiAgICAgICAgICAgIGRhcmtNYXR0ZXJGaW5kQm9udXM6ICdCb251cyBkZSBkw6ljb3V2ZXJ0ZXMgZFxcJ0FudGltYXRpw6hyZScsXHJcbiAgICAgICAgICAgIGRpc2NvdmVyZXJCb251czogJ0JvbnVzIGRlIGNsYXNzZSBFeHBsb3JhdGV1cicsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgbWF4aW11bUZpbmRzOiAnRMOpY291dmVydGVzIG1heGltYWxlcycsXHJcbiAgICAgICAgZmluZHNEYXJrTWF0dGVyOiAnUGxhZ2VzIGRlIGTDqWNvdXZlcnRlcyBkXFwnQW50aW1hdGnDqHJlJyxcclxuXHJcbiAgICAgICAgbGlzdE9mUG9zc2libGVGaW5kczogJ0xpc3RlIGRlcyBkw6ljb3V2ZXJ0ZXMgcG9zc2libGVzIChyZXNzb3VyY2VzLCB1bml0w6lzIGRlIHZhaXNzZWF1eCknLFxyXG4gICAgICAgIGZpbmRTaXplczogKHNpemU6IHN0cmluZykgPT4gYFF1YW50aXTDqXMgcG9zc2libGVzICgke3NpemV9KWAsXHJcbiAgICAgICAgc2hpcFVuaXRzOiAnVW5pdMOpcyBkZSB2YWlzc2VhdXgnLFxyXG4gICAgfSxcclxufTtcclxuIiwiaW1wb3J0IHsgRmFjdGlvblRyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZnI6IEZhY3Rpb25UcmFuc2xhdGlvbnMgPSB7XHJcbiAgICBwaXJhdGVzOiAnUGlyYXRlcycsXHJcbiAgICBhbGllbnM6ICdBbGllbnMnLFxyXG59OyIsImltcG9ydCB7IENvbWJhdFJlc3VsdFR5cGUgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL2NvbWJhdC1yZXBvcnRzL0NvbWJhdFJlc3VsdFR5cGVcIjtcclxuaW1wb3J0IHsgQ29tYmF0c1RyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVcIjtcclxuaW1wb3J0IHsgUmVjdXJzaXZlUGFydGlhbCB9IGZyb20gXCJAL3NoYXJlZC90eXBlcy9SZWN1cnNpdmVQYXJ0aWFsXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZnI6IFJlY3Vyc2l2ZVBhcnRpYWw8Q29tYmF0c1RyYW5zbGF0aW9ucz4gPSB7XHJcbiAgICBoZWFkZXI6ICdDb21iYXRzJyxcclxuICAgIHRhYkhlYWRlcnM6IHtcclxuICAgICAgICBvdmVydmlldzogJ1Z1ZSBkXFwnZW5zZW1ibGUnLFxyXG4gICAgICAgIGxvb3Q6ICdCdXRpbicsXHJcbiAgICAgICAgbG9zdFNoaXBzOiAnVmFpc3NlYXV4IHBlcmR1cycsXHJcbiAgICAgICAgc3ViSGVhZGVyczoge1xyXG4gICAgICAgICAgICBhZ2FpbnN0UGxheWVyczogJ0NvbnRyZSBsZXMgam91ZXVycycsXHJcbiAgICAgICAgICAgIG9uRXhwZWRpdGlvbnM6ICdFbiBleHDDqWRpdGlvbnMnLFxyXG5cclxuICAgICAgICAgICAgYW1vdW50OiAnUXVhbnRpdMOpJyxcclxuICAgICAgICAgICAgcmVzb3VyY2VzOiAnVW5pdMOpcyBkZSByZXNzb3VyY2VzJ1xyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgY29tYmF0czogJ0NvbWJhdHMnLFxyXG4gICAgc2hpcHNMb3N0OiAnVmFpc3NlYXV4IHBlcmR1cycsXHJcbiAgICBjb21iYXRSZXN1bHRzOiB7XHJcbiAgICAgICAgW0NvbWJhdFJlc3VsdFR5cGUud29uXTogJ1ZpY3RvaXJlcycsXHJcbiAgICAgICAgW0NvbWJhdFJlc3VsdFR5cGUubG9zdF06ICdEw6lmYWl0ZXMnLFxyXG4gICAgICAgIFtDb21iYXRSZXN1bHRUeXBlLmRyYXddOiAnTWF0Y2hzIG51bHMnLFxyXG4gICAgfSxcclxuXHJcbn07XHJcbiIsImltcG9ydCB7IFJlY3Vyc2l2ZVBhcnRpYWwgfSBmcm9tIFwiQC9zaGFyZWQvdHlwZXMvUmVjdXJzaXZlUGFydGlhbFwiO1xyXG5pbXBvcnQgeyBEb25hdGVUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZnI6IERvbmF0ZVRyYW5zbGF0aW9ucyA9IHtcclxuICAgIGhlYWRlcjogJ0ZhaXJlIHVuIGRvbicsXHJcbiAgICBzdWJIZWFkZXI6ICdGYWlyZSB1biBkb24gcG91ciBzb3V0ZW5pciBsZSBkw6l2ZWxvcHBlbWVudCBkXFwnT0dhbWUgVHJhY2tlcicsXHJcblxyXG4gICAgY3J5cHRvOiB7XHJcbiAgICAgICAgaGVhZGVyOiAnRmFpcmUgdW4gZG9uIGVuIGNyeXB0b21vbm5haWUnLFxyXG4gICAgfSxcclxuICAgIGtvZmk6IHtcclxuICAgICAgICBoZWFkZXI6ICdGYWlyZSB1biBkb24gYXZlYyBQYXlQYWwgb3UgY2FydGUgZGUgZMOpYml0L2Nyw6lkaXQnLFxyXG4gICAgICAgIGJ1dHRvblRleHQ6ICdGYWlyZSB1biBkb24gc3VyIEtvLUZpJyxcclxuICAgICAgICBtZXNzYWdlOiAnVm91cyBuXFwnYXZleiBwYXMgYmVzb2luIGRlIGNyw6llciB1biBjb21wdGUgc3VyIEtvLUZpIHBvdXIgZmFpcmUgdW4gZG9uLiBUb3VzIGxlcyBkb25zIHNvbnQgZGlyZWN0ZW1lbnQgdHJhbnNtaXMgYXUgZMOpdmVsb3BwZXVyLicsXHJcbiAgICB9LFxyXG59O1xyXG4iLCJpbXBvcnQgeyBSZWN1cnNpdmVQYXJ0aWFsIH0gZnJvbSBcIkAvc2hhcmVkL3R5cGVzL1JlY3Vyc2l2ZVBhcnRpYWxcIjtcclxuaW1wb3J0IHsgRGVicmlzRmllbGRzVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGZyOiBSZWN1cnNpdmVQYXJ0aWFsPERlYnJpc0ZpZWxkc1RyYW5zbGF0aW9ucz4gPSB7XHJcbiAgICBoZWFkZXI6ICdDaGFtcHMgZGUgZMOpYnJpcycsXHJcbiAgICBhZGREZWJyaXNGaWVsZE1hbnVhbGx5OiB7XHJcbiAgICAgICAgdGl0bGU6ICdBam91dGVyIG1hbnVlbGxlbWVudCB1biBjaGFtcCBkZSBkw6licmlzJyxcclxuICAgICAgICBidXR0b25UZXh0OiAnQWpvdXRlcicsXHJcbiAgICB9LFxyXG4gICAgcG9zaXRpb246ICdQb3NpdGlvbicsXHJcbn07XHJcbiIsImltcG9ydCB7IFJlY3Vyc2l2ZVBhcnRpYWwgfSBmcm9tIFwiQC9zaGFyZWQvdHlwZXMvUmVjdXJzaXZlUGFydGlhbFwiO1xyXG5pbXBvcnQgeyBSZXNvdXJjZUJhbGFuY2VUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZnI6IFJlY3Vyc2l2ZVBhcnRpYWw8UmVzb3VyY2VCYWxhbmNlVHJhbnNsYXRpb25zPiA9IHtcclxuICAgIGhlYWRlcjogJ0JpbGFuIGRlcyByZXNzb3VyY2VzJyxcclxuICAgIFwiY29tYmF0LXJlcG9ydFwiOiAnZGVzIGNvbWJhdHMnLFxyXG4gICAgXCJkZWJyaXMtZmllbGQtcmVwb3J0XCI6ICdkZXMgY2hhbXBzIGRlIGTDqWJyaXMnLFxyXG4gICAgZXhwZWRpdGlvbjogJ2RlcyBleHDDqWRpdGlvbnMnLFxyXG59O1xyXG4iLCJpbXBvcnQgeyBMaWZlZm9ybURpc2NvdmVyeUV2ZW50QXJ0aWZhY3RGaW5kaW5nU2l6ZSB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvbGlmZWZvcm0tZGlzY292ZXJpZXMvTGlmZWZvcm1EaXNjb3ZlcnlFdmVudEFydGlmYWN0RmluZGluZ1NpemVcIjtcclxuaW1wb3J0IHsgTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL2xpZmVmb3JtLWRpc2NvdmVyaWVzL0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlXCI7XHJcbmltcG9ydCB7IEVtcGlyZVRyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVcIjtcclxuaW1wb3J0IHsgUmVjdXJzaXZlUGFydGlhbCB9IGZyb20gXCJAL3NoYXJlZC90eXBlcy9SZWN1cnNpdmVQYXJ0aWFsXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZnI6IFJlY3Vyc2l2ZVBhcnRpYWw8RW1waXJlVHJhbnNsYXRpb25zPiA9IHtcclxuICAgIGhlYWRlcjogJ0VtcGlyZScsXHJcbiAgICBwbGFuZXQ6ICdQbGFuw6h0ZScsXHJcbiAgICBwcm9kdWN0aW9uOiB7XHJcbiAgICAgICAgaGVhZGVyOiAnUHJvZHVjdGlvbicsXHJcbiAgICAgICAgc3ViSGVhZGVyczoge1xyXG4gICAgICAgICAgICByZXNvdXJjZVByb2R1Y3Rpb246ICdQcm9kdWN0aW9uIGRlIHJlc3NvdXJjZXMnLFxyXG4gICAgICAgICAgICBtaW5lT3ZlcnZpZXc6ICdWdWUgZFxcJ2Vuc2VtYmxlIGRlcyBtaW5lcycsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBhdmVyYWdlUGVySG91cjogJ+KMgCBwYXIgaGV1cmUnLFxyXG4gICAgICAgIHRvdGFsUGVySG91cjogJ3RvdGFsIHBhciBoZXVyZScsXHJcbiAgICAgICAgdG90YWxQZXJEYXk6ICd0b3RhbCBwYXIgam91cicsXHJcbiAgICAgICAgdG90YWxQZXJXZWVrOiAndG90YWwgcGFyIHNlbWFpbmUnLFxyXG4gICAgICAgIGFjdGl2ZVByb2R1Y3Rpb25TZXR0aW5nczogJ1BhcmFtw6h0cmVzIGRlIHByb2R1Y3Rpb24gYWN0aWZzJyxcclxuICAgICAgICBtZXNzYWdlUHJvZHVjdGlvbjEwMDogJ0xlcyB2YWxldXJzIGFmZmljaMOpZXMgc2UgcsOpZsOocmVudCDDoCB1biBmYWN0ZXVyIGRlIHByb2R1Y3Rpb24gZGUgMTAwJSBldCBuZSB0aWVubmVudCBwYXMgY29tcHRlIGR1IG1hbnF1ZSBkXFwnw6luZXJnaWUuJyxcclxuXHJcbiAgICAgICAgbWluZXM6IHtcclxuICAgICAgICAgICAgY3Jhd2xlcnNBdmFpbGFibGU6ICdkaXNwb25pYmxlcycsXHJcbiAgICAgICAgICAgIGNyYXdsZXJzVG9SZWFjaExpbWl0OiBjb3VudCA9PiBgJHtjb3VudH0gZm9yZXVzZXMgcG91ciBsZSBib251cyBtYXhpbXVtYCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGl0ZW1zOiAnT2JqZXRzIGFjdGlmcycsXHJcbiAgICAgICAgYnJlYWtkb3duOiB7XHJcbiAgICAgICAgICAgIGJhc2ljSW5jb21lOiAnUmV2ZW51IGRlIGJhc2UnLFxyXG4gICAgICAgICAgICBtaW5lUHJvZHVjdGlvbjogJ1Byb2R1Y3Rpb24gZGUgbWluZScsXHJcbiAgICAgICAgICAgIGNvbnN1bXB0aW9uOiAnQ29uc29tbWF0aW9uJyxcclxuICAgICAgICAgICAgbGlmZWZvcm1CdWlsZGluZ3M6ICdCw6J0aW1lbnRzIGZvcm1lcyBkZSB2aWUnLFxyXG4gICAgICAgICAgICBjcmF3bGVyczogJ0ZvcmV1c2VzJyxcclxuICAgICAgICAgICAgaXRlbXM6ICdPYmpldHMnLFxyXG4gICAgICAgICAgICBnZW9sb2dpc3Q6ICdHw6lvbG9ndWUnLFxyXG4gICAgICAgICAgICBjb21tYW5kU3RhZmY6ICdDb25zZWlsIGRcXCdvZmZpY2llcnMnLFxyXG4gICAgICAgICAgICBwbGF5ZXJDbGFzczogJ0NsYXNzZSBkZSBqb3VldXInLFxyXG4gICAgICAgICAgICBhbGxpYW5jZUNsYXNzOiAnQ2xhc3NlIGRcXCdhbGxpYW5jZScsXHJcbiAgICAgICAgICAgIGxpZmVmb3JtVGVjaG5vbG9naWVzOiAnVGVjaG5vbG9naWVzIGZvcm1lcyBkZSB2aWUnLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgIHJlc2V0OiAnUsOpaW5pdGlhbGlzZXInLFxyXG4gICAgICAgICAgICBoZWFkZXI6ICdQYXJhbcOodHJlcyBkZSBwcm9kdWN0aW9uJyxcclxuICAgICAgICAgICAgYXBwbHlBbmRDbG9zZTogJ0FwcGxpcXVlciBldCBmZXJtZXIgbGVzIHBhcmFtw6h0cmVzIGRlIHByb2R1Y3Rpb24nLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgYW1vcnRpemF0aW9uOiB7XHJcbiAgICAgICAgaGVhZGVyOiAnQW1vcnRpc3NlbWVudCcsXHJcblxyXG4gICAgICAgIHRhYmxlOiB7XHJcbiAgICAgICAgICAgIGNvc3Q6ICdDb8O7dCcsXHJcbiAgICAgICAgICAgIGxldmVsczogJ05pdmVhdXgnLFxyXG4gICAgICAgICAgICBwcm9kdWN0aW9uUGx1czogJ1Byb2R1Y3Rpb24gZW4gcGx1cycsXHJcbiAgICAgICAgICAgIGFtb3J0aXphdGlvblRpbWU6ICdUZW1wcyBkXFwnYW1vcnRpc3NlbWVudCcsXHJcbiAgICAgICAgICAgIGdyb3VwU2VsZWN0ZWRJdGVtczogJ1JlZ3JvdXBlciBsZXMgb2JqZXRzIHPDqWxlY3Rpb25uw6lzJyxcclxuICAgICAgICAgICAgc2hvd09yaWdpbmFsSXRlbXM6ICdBZmZpY2hlciB0b3VzIGxlcyBvYmpldHMgaW5kaXZpZHVlbGxlbWVudCcsXHJcblxyXG4gICAgICAgICAgICBsZXZlbHNPblBsYW5ldHM6IChsZXZlbHMsIHBsYW5ldHMpID0+IGAke2xldmVsc30gJHtsZXZlbHMgPT0gMSA/ICduaXZlYXUnIDogJ25pdmVhdXgnfSBzdXIgJHtwbGFuZXRzfSAke3BsYW5ldHMgPT0gMSA/ICdwbGFuw6h0ZScgOiAncGxhbsOodGVzJ31gLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgIGhlYWRlcjogJ1BhcmFtw6h0cmVzJyxcclxuICAgICAgICAgICAgYXBwbHlBbmRDbG9zZTogJ0FwcGxpcXVlciBsZXMgcGFyYW3DqHRyZXMgZXQgZmVybWVyJyxcclxuXHJcbiAgICAgICAgICAgIGluY2x1ZGVTZXR0aW5nczoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnSW5jbHVyZSBkYW5zIGxlIGNhbGN1bCcsXHJcblxyXG4gICAgICAgICAgICAgICAgbWluZXM6ICdNaW5lcycsXHJcbiAgICAgICAgICAgICAgICBleHBlZGl0aW9uczogJ0V4cMOpZGl0aW9ucycsXHJcbiAgICAgICAgICAgICAgICBleHBlZGl0aW9uc1JlcXVpcmVtZW50OiAnUmVtYXJxdWUgOiBOw6ljZXNzaXRlIFwiUmVjaGVyY2hlIGRlcyBmb3JtZXMgZGUgdmllXCIgZXQvb3UgXCJBc3Ryb3BoeXNpcXVlXCIgYWN0aXbDqWUnLFxyXG4gICAgICAgICAgICAgICAgYXN0cm9waHlzaWNzQW5kQ29sb255OiAnQXN0cm9waHlzaXF1ZSBldCBub3V2ZWxsZXMgY29sb25pZXMnLFxyXG4gICAgICAgICAgICAgICAgYXN0cm9waHlzaWNzUGVyZm9ybWFuY2VOb3RlOiAnUmVtYXJxdWUgOiBJbnRlbnNpZiBlbiBjYWxjdWwsIGFmZmVjdGVyYSBjb25zaWTDqXJhYmxlbWVudCBsZXMgcGVyZm9ybWFuY2VzJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGxheWVyU2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ1BhcmFtw6h0cmVzIGfDqW7DqXJhdXgnLFxyXG4gICAgICAgICAgICAgICAgb3B0aW1pemVGb3JSZXNvdXJjZXM6ICdPcHRpbWlzZXIgcG91ciBsZXMgcmVzc291cmNlcyBzw6lsZWN0aW9ubsOpZXMnLFxyXG4gICAgICAgICAgICAgICAgb2ZmaWNlcnM6ICdPZmZpY2llcnMnLFxyXG4gICAgICAgICAgICAgICAgcGxheWVyQ2xhc3M6ICdDbGFzc2UgZGUgam91ZXVyJyxcclxuICAgICAgICAgICAgICAgIGFsbGlhbmNlQ2xhc3M6ICdDbGFzc2UgZFxcJ2FsbGlhbmNlJyxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRMZXZlbE9mOiAobmFtZTogc3RyaW5nKSA9PiBgTml2ZWF1IGFjdHVlbCBkZSAke25hbWV9YCxcclxuICAgICAgICAgICAgICAgIGxpZmVmb3JtTGV2ZWxzOiAnTml2ZWF1eCBkZSBsYSBmb3JtZSBkZSB2aWUnLFxyXG5cclxuICAgICAgICAgICAgICAgIHVudXNlZFJhaWRDb2xvbnlTbG90czogJ0VtcGxhY2VtZW50cyBkZSBjb2xvbmllIMOgIHLDqXNlcnZlciBwb3VyIGxlIHJhaWQgKFwidm9sYW50ZVwiKScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGFzdHJvcGh5c2ljc1NldHRpbmdzOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6IChuYW1lOiBzdHJpbmcpID0+IGBQYXJhbcOodHJlcyAke25hbWV9YCxcclxuICAgICAgICAgICAgICAgIG5ld0NvbG9ueTogJ05vdXZlbGxlIGNvbG9uaWUnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwbGFuZXRTZXR0aW5nczoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnUGFyYW3DqHRyZXMgZGUgbGEgcGxhbsOodGUnLFxyXG5cclxuICAgICAgICAgICAgICAgIGdsb2JhbDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlc2VsZWN0SXRlbXM6ICdEw6lzw6lsZWN0aW9ubmVyIHRvdXMgbGVzIMOpbMOpbWVudHMnLFxyXG4gICAgICAgICAgICAgICAgICAgIGlnbm9yZUluYWN0aXZlTGlmZWZvcm1UZWNobm9sb2d5U2xvdHM6ICdJZ25vcmVyIGxlcyBlbXBsYWNlbWVudHMgaW5hY3RpZnMgZGVzIHRlY2hub2xvZ2llcyBmb3JtZSBkZSB2aWUgcG91ciB0b3V0ZXMgbGVzIHBsYW7DqHRlcycsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVzZWxlY3RBbGxQbGFuZXRzOiAnRMOpc8OpbGVjdGlvbm5lciB0b3V0ZXMgbGVzIHBsYW7DqHRlcycsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIGluY2x1ZGVJblJlc3VsdDogJ0luY2x1cmUgZGFucyBsZSBjYWxjdWwnLFxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdQb3NpdGlvbicsXHJcbiAgICAgICAgICAgICAgICBtYXhUZW1wZXJhdHVyZTogJ1RlbXDDqXJhdHVyZSBtYXgnLFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlSXRlbXM6ICdPYmpldHMgYWN0aWZzJyxcclxuICAgICAgICAgICAgICAgIGNyYXdsZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdGb3JldXNlcycsXHJcbiAgICAgICAgICAgICAgICAgICAgcGVyY2VudGFnZTogJyUgUHJvZHVjdGlvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgZml4Q291bnQ6ICdDb21wdGUgZml4ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4Q291bnQ6ICdDb21wdGUgbWF4JyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBtaW5lczogJ05pdmVhdXggYWN0dWVscyBkZXMgbWluZXMnLFxyXG5cclxuICAgICAgICAgICAgICAgIGxpZmVmb3JtOiAnRm9ybWUgZGUgdmllJyxcclxuICAgICAgICAgICAgICAgIGxpZmVmb3JtU2V0dGluZ3M6ICdQYXJhbcOodHJlcyBkZSBsYSBmb3JtZSBkZSB2aWUnLFxyXG4gICAgICAgICAgICAgICAgcmVsZXZhbnRMaWZlZm9ybUJ1aWxkaW5nczogJ0LDonRpbWVudHMgcGVydGluZW50cyBkZSBsYSBmb3JtZSBkZSB2aWUnLFxyXG4gICAgICAgICAgICAgICAgbGlmZWZvcm1UZWNobm9sb2dpZXM6ICdUZWNobm9sb2dpZXMgZGUgbGEgZm9ybWUgZGUgdmllJyxcclxuICAgICAgICAgICAgICAgIGlnbm9yZUVtcHR5U2xvdHM6ICdJZ25vcmVyIGxlcyBlbXBsYWNlbWVudHMgaW5hY3RpZnMnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBleHBlZGl0aW9uU2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ1BhcmFtw6h0cmVzIGRcXCdleHDDqWRpdGlvbicsXHJcbiAgICAgICAgICAgICAgICBhdmVyYWdlV2F2ZXNQZXJEYXk6ICfijIAgVmFndWVzIHBhciBqb3VyJyxcclxuICAgICAgICAgICAgICAgIGl0ZW1zOiAnT2JqZXRzIGRcXCdleHDDqWRpdGlvbicsXHJcbiAgICAgICAgICAgICAgICBhdmVyYWdlRXhwZWRpdGlvbnNQZXJEYXk6ICfijIAgRXhww6lkaXRpb25zIHBhciBqb3VyJyxcclxuICAgICAgICAgICAgICAgIHNoaXBVbml0RmFjdG9yczogJ0ZhY3RldXJzIGRcXCd1bml0w6kgZGUgcmVzc291cmNlcyBkZXMgdmFpc3NlYXV4JyxcclxuICAgICAgICAgICAgICAgIHRvcFBsYXllclNjb3JlOiAnU2NvcmUgZHUgbWVpbGxldXIgam91ZXVyJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpbmZvOiB7XHJcbiAgICAgICAgICAgIGdlbmVyYXRpbmdJdGVtczogJ0NhbGN1bCBkZXMgcHJvY2hhaW5zIG1laWxsZXVycyBpbnZlc3Rpc3NlbWVudHMnLFxyXG5cclxuICAgICAgICAgICAgc2xvd0NhbGN1bGF0aW9uOiAnTGUgY2FsY3VsIGRcXCdhbW9ydGlzc2VtZW50IGVzdCBkZXZlbnUgYXNzZXogbGVudCBtYWludGVuYW50IHF1XFwnaWwgaW5jbHV0IGxlcyBiw6J0aW1lbnRzIGV0IHRlY2hub2xvZ2llcyBmb3JtZXMgZGUgdmllLiBDZWxhIGRldnJhaXQgw6p0cmUgYW3DqWxpb3LDqSDDoCBsXFwnYXZlbmlyLicsXHJcbiAgICAgICAgICAgIGN0cmxDbGljazogJ0N0cmwgKyBDbGljIHN1ciB1bmUgY2FzZSBwb3VyIChkw6kpc8OpbGVjdGlvbm5lciB0b3VzIGxlcyDDqWzDqW1lbnRzIGp1c3F1XFwnw6AgY2VsdWkgc8OpbGVjdGlvbm7DqS4nLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNhdmVMb2FkOiB7XHJcbiAgICAgICAgICAgIHNhdmVCdXR0b246ICdFbnJlZ2lzdHJlciBsZXMgcsOpc3VsdGF0cyBkXFwnYW1vcnRpc3NlbWVudCBjYWxjdWzDqXMnLFxyXG4gICAgICAgICAgICBsb2FkQnV0dG9uOiAoZGF0ZTogc3RyaW5nKSA9PiBgQ2hhcmdlciBsYSBzYXV2ZWdhcmRlICgke2RhdGV9KWAsXHJcbiAgICAgICAgICAgIGxvYWRlZFNhdmU6IChkYXRlOiBzdHJpbmcsIGhpZGRlbkl0ZW1zOiBzdHJpbmcpID0+IGBBZmZpY2hhZ2UgZGVzIHLDqXN1bHRhdHMgc2F1dmVnYXJkw6lzICgke2RhdGV9KSAtICR7aGlkZGVuSXRlbXN9IGxpZ25lcyBtYXNxdcOpZXNgLFxyXG4gICAgICAgICAgICBhYmFuZG9uZWRQbGFuZXQ6ICdQbGFuw6h0ZSBhYmFuZG9ubsOpZScsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2VuZXJhdGVJdGVtczogdmFsdWUgPT4gYCR7dmFsdWV9IGVudHLDqWVzYCxcclxuICAgIH0sXHJcbiAgICBsaWZlZm9ybXM6IHtcclxuICAgICAgICBoZWFkZXI6ICdGb3JtZXMgZGUgdmllJyxcclxuICAgICAgICBzdWJIZWFkZXJzOiB7XHJcbiAgICAgICAgICAgIG92ZXJ2aWV3OiAnVnVlIGRcXCdlbnNlbWJsZScsXHJcbiAgICAgICAgICAgIHByb2dyZXNzOiAnUHJvZ3Jlc3Npb24nLFxyXG4gICAgICAgICAgICBkaXNjb3ZlcnlNaXNzaW9uczogJ01pc3Npb25zIGRlIGTDqWNvdXZlcnRlJyxcclxuXHJcbiAgICAgICAgICAgIGRpc2NvdmVyeVJlc3VsdHM6ICdSw6lzdWx0YXRzJyxcclxuICAgICAgICAgICAgZXhwZXJpZW5jZTogJ0V4cMOpcmllbmNlJyxcclxuICAgICAgICAgICAgcmVzZWFyY2hCb251c2VzOiAnQm9udXMgZGUgcmVjaGVyY2hlIGdsb2JhdXgnLFxyXG4gICAgICAgICAgICBwbGFuZXRCb251c2VzOiAnQm9udXMgZGUgcGxhbsOodGUgZWZmZWN0aWZzJyxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBwbGFuZXQ6ICdQbGFuw6h0ZScsXHJcbiAgICAgICAgbGlmZWZvcm06ICdGb3JtZSBkZSB2aWUnLFxyXG4gICAgICAgIGJ1aWxkaW5nczogJ0LDonRpbWVudHMgZm9ybWUgZGUgdmllJyxcclxuICAgICAgICB0ZWNobm9sb2dpZXM6ICdUZWNobm9sb2dpZXMgZm9ybWUgZGUgdmllJyxcclxuICAgICAgICB0aWVyOiAnVGllcicsXHJcbiAgICAgICAgbGV2ZWw6ICdOaXZlYXUnLFxyXG4gICAgICAgIHRvdGFsTGlmZWZvcm1FeHBlcmllbmNlOiAnRXhww6lyaWVuY2UgdG90YWxlIGRlIGxhIGZvcm1lIGRlIHZpZScsXHJcbiAgICAgICAgZGlzY292ZXJ5RGF0ZVVua25vd246ICdJbmNvbm51ZScsXHJcbiAgICAgICAgbm90RGlzY292ZXJlZFlldDogJ1BhcyBlbmNvcmUgZMOpY291dmVydGUnLFxyXG4gICAgICAgIGRpc2NvdmVyeU1pc3Npb25zOiAnTWlzc2lvbnMgZGUgZMOpY291dmVydGUnLFxyXG4gICAgICAgIGV2ZW50VHlwZXM6IHtcclxuICAgICAgICAgICAgW0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlLm5vdGhpbmddOiAnQXVjdW5lIGTDqWNvdXZlcnRlJyxcclxuICAgICAgICAgICAgW0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlLmxvc3RTaGlwXTogJ1ZhaXNzZWF1IGRcXCdleHBsb3JhdGlvbiBwZXJkdScsXHJcbiAgICAgICAgICAgIFtMaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZS5uZXdMaWZlZm9ybUZvdW5kXTogJ05vdXZlbGxlIGZvcm1lIGRlIHZpZScsXHJcbiAgICAgICAgICAgIFtMaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZS5rbm93bkxpZmVmb3JtRm91bmRdOiAnRXhww6lyaWVuY2UgZGUgbGEgZm9ybWUgZGUgdmllJyxcclxuICAgICAgICAgICAgW0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlLmFydGlmYWN0c106ICdBcnTDqWZhY3RzIHRyb3V2w6lzJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFydGlmYWN0RmluZGluZ1NpemVzOiB7XHJcbiAgICAgICAgICAgIFtMaWZlZm9ybURpc2NvdmVyeUV2ZW50QXJ0aWZhY3RGaW5kaW5nU2l6ZS5zbWFsbF06ICdEw6ljb3V2ZXJ0ZSBjb21tdW5lJyxcclxuICAgICAgICAgICAgW0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRBcnRpZmFjdEZpbmRpbmdTaXplLm1lZGl1bV06ICdEw6ljb3V2ZXJ0ZSBpbXBvcnRhbnRlJyxcclxuICAgICAgICAgICAgW0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRBcnRpZmFjdEZpbmRpbmdTaXplLmxhcmdlXTogJ0TDqWNvdXZlcnRlIMOpbm9ybWUnLFxyXG4gICAgICAgICAgICBbTGlmZWZvcm1EaXNjb3ZlcnlFdmVudEFydGlmYWN0RmluZGluZ1NpemUuc3RvcmFnZUZ1bGxdOiAnU3RvY2thZ2UgcGxlaW4nLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGlmZWZvcm1Gb3VuZDogJ0Zvcm1lIGRlIHZpZSB0cm91dsOpZScsXHJcbiAgICAgICAgYWx3YXlzQXZhaWxhYmxlOiAnVG91am91cnMgZGlzcG9uaWJsZScsXHJcbiAgICAgICAgYXJ0aWZhY3RzOiAnQXJ0w6lmYWN0cycsXHJcblxyXG4gICAgICAgIGV4cGVyaWVuY2VQb2ludHM6ICdQb2ludHMgZFxcJ2V4cMOpcmllbmNlJyxcclxuICAgICAgICBkaXNjb3ZlcmVkT246ICdGb3JtZSBkZSB2aWUgZMOpY291dmVydGUgbGUnLFxyXG4gICAgICAgIG51bWJlck9mTGlmZWZvcm1EaXNjb3ZlcmllczogJ05vbWJyZSBkZSBkw6ljb3V2ZXJ0ZXMgZGUgZm9ybWVzIGRlIHZpZScsXHJcblxyXG4gICAgICAgIGdsb2JhbFJlc2VhcmNoQm9udXM6ICdCb251cyBkZSByZWNoZXJjaGUgZ2xvYmFsJyxcclxuXHJcbiAgICAgICAgcmVzZWFyY2hCb251c2VzOiB7XHJcbiAgICAgICAgICAgIGJyZWFrZG93bjoge1xyXG4gICAgICAgICAgICAgICAgc2xvdDogJ0VtcGxhY2VtZW50JyxcclxuICAgICAgICAgICAgICAgIHJlc2VhcmNoOiAnUmVjaGVyY2hlJyxcclxuICAgICAgICAgICAgICAgIGJvbnVzOiAnQm9udXMnLFxyXG4gICAgICAgICAgICAgICAgbGlmZWZvcm1CdWlsZGluZ3NCb29zdDogYEFtw6lsaW9yYXRpb24gZGVzIGLDonRpbWVudHMgZGUgbGEgZm9ybWUgZGUgdmllYCxcclxuICAgICAgICAgICAgICAgIGxpZmVmb3JtTGV2ZWxCb29zdDogKGxpZmVmb3JtOiBzdHJpbmcsIGJvb3N0OiBzdHJpbmcpID0+IGBBbcOpbGlvcmF0aW9uIGR1IG5pdmVhdSBkZSBsYSBmb3JtZSBkZSB2aWUgKCR7bGlmZWZvcm19IDogJHtib29zdH0pYCxcclxuICAgICAgICAgICAgICAgIGJ1Z0Jvb3N0OiAnQm9udXMgY2F1c8OpIHBhciBkZXMgYnVncycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHByb2R1Y3Rpb246IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ1Byb2R1Y3Rpb24gZGUgcmVzc291cmNlcycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4cGVkaXRpb25GaW5kczoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnRMOpY291dmVydGVzIGRcXCdleHDDqWRpdGlvbicsXHJcbiAgICAgICAgICAgICAgICByZXNvdXJjZXM6ICdSZXNzb3VyY2VzJyxcclxuICAgICAgICAgICAgICAgIHNoaXBzOiAnVmFpc3NlYXV4JyxcclxuICAgICAgICAgICAgICAgIGZsZWV0TG9zczogJ1BlcnRlcyBkZSBmbG90dGUnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBleHBlZGl0aW9uU3BlZWQ6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ1ZpdGVzc2UgZFxcJ2Fycml2w6llIGVuIGV4cMOpZGl0aW9uJyxcclxuICAgICAgICAgICAgICAgIGJvbnVzOiAnQm9udXMgZGUgdml0ZXNzZScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNoaXBzOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdWYWlzc2VhdXgnLFxyXG4gICAgICAgICAgICAgICAgYXJtb3I6ICdBcm11cmUnLFxyXG4gICAgICAgICAgICAgICAgc2hpZWxkOiAnQm91Y2xpZXInLFxyXG4gICAgICAgICAgICAgICAgZGFtYWdlOiAnRMOpZ8OidHMnLFxyXG4gICAgICAgICAgICAgICAgY2FyZ286ICdGcmV0JyxcclxuICAgICAgICAgICAgICAgIHNwZWVkOiAnVml0ZXNzZScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRlZmVuc2VzOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdEw6lmZW5zZXMnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmdWVsQ29uc3VtcHRpb246IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ0NvbnNvbW1hdGlvbiBkZSBjYXJidXJhbnQnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmdWVsUmV0dXJuOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdSZXRvdXIgZGUgY2FyYnVyYW50IGxvcnMgZHUgcmFwcGVsJyxcclxuICAgICAgICAgICAgICAgIGJvbnVzOiAnUmV0b3VyIGRlIGNhcmJ1cmFudCcsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJ1aWxkaW5nQ29zdFRpbWU6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ0Nvw7t0IGV0IHRlbXBzIGRlIGNvbnN0cnVjdGlvbicsXHJcbiAgICAgICAgICAgICAgICBjb3N0OiAnQ2/Du3QnLFxyXG4gICAgICAgICAgICAgICAgdGltZTogJ1RlbXBzJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmVzZWFyY2hDb3N0VGltZToge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnQ2/Du3QgZXQgdGVtcHMgZGUgcmVjaGVyY2hlJyxcclxuICAgICAgICAgICAgICAgIHJlc2VhcmNoZXM6ICdSZWNoZXJjaGVzJyxcclxuICAgICAgICAgICAgICAgIGxpZmVmb3JtUmVzZWFyY2hlczogJ1JlY2hlcmNoZXMgZm9ybWUgZGUgdmllJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY3Jhd2xlcnM6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ0ZvcmV1c2VzJyxcclxuICAgICAgICAgICAgICAgIHByb2R1Y3Rpb25Cb251czogJ1Byb2R1Y3Rpb24gZGUgcmVzc291cmNlcycsXHJcbiAgICAgICAgICAgICAgICBlbmVyZ3lDb25zdW1wdGlvbjogJ0NvbnNvbW1hdGlvbiBkXFwnw6luZXJnaWUnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkZW5DYXBhY2l0eToge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnQ2FwYWNpdMOpIGRlIGxhIGNhY2hldHRlJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGhhbGFueFJhbmdlOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdQb3J0w6llIGRlIGxhIHBoYWxhbmdlJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGlzY292ZXJ5TWlzc2lvbnM6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ1ZpdGVzc2UgZGVzIG1pc3Npb25zIGRlIGTDqWNvdXZlcnRlJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGxheWVyQ2xhc3Nlczoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnQ2xhc3NlcyBkZSBqb3VldXInLFxyXG5cclxuICAgICAgICAgICAgICAgIGNvbGxlY3Rvcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3Rpb25Cb251czogJ0F1Z21lbnRhdGlvbiBkZSBsYSBwcm9kdWN0aW9uIGRlcyBtaW5lcycsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5lcmd5UHJvZHVjdGlvbkJvbnVzOiAnQXVnbWVudGF0aW9uIGRlIGxhIHByb2R1Y3Rpb24gZFxcJ8OpbmVyZ2llJyxcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc3BvcnRlclNwZWVkQm9udXM6ICdCb251cyBkZSB2aXRlc3NlIHBvdXIgbGVzIHRyYW5zcG9ydGV1cnMnLFxyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydGVyQ2FyZ29Cb251czogJ0JvbnVzIGRlIGNhcmdvIHBvdXIgbGVzIHRyYW5zcG9ydGV1cnMnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNyYXdsZXJQcm9kdWN0aW9uQm9udXM6ICdCb251cyBkZSBwcm9kdWN0aW9uIGRlcyBmb3JldXNlcycsXHJcbiAgICAgICAgICAgICAgICAgICAgZ2VvbG9naXN0Q3Jhd2xlckFtb3VudEJvbnVzOiAnQm9udXMgZGUgZm9yZXVzZXMgdXRpbGlzYWJsZXMgYXZlYyBsZSBnw6lvbG9ndWUnLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRpc2NvdmVyZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICByZXNlYXJjaER1cmF0aW9uOiAnRHVyw6llIGRlcyByZWNoZXJjaGVzJyxcclxuICAgICAgICAgICAgICAgICAgICBpbmNyZWFzZWRFeHBlZGl0aW9uRmluZHM6ICdHYWluIGFjY3J1IGxvcnMgZGVzIGV4cMOpZGl0aW9ucycsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFyZ2VyUGxhbmV0czogJ1BsYW7DqHRlcyBwbHVzIGdyYW5kZXMgbG9ycyBkZSBsYSBjb2xvbmlzYXRpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxFeHBlZGl0aW9uU2xvdHM6ICdTbG90IGRcXCdleHDDqWRpdGlvbiBzdXBwbMOpbWVudGFpcmVzJyxcclxuICAgICAgICAgICAgICAgICAgICByZWR1Y2VkRXhwZWRpdGlvbkNvbWJhdENoYW5jZTogJ1LDqWR1Y3Rpb24gZHUgcmlzcXVlIGRlIGNvbWJhdHMgbG9ycyBkZXMgZXhww6lkaXRpb25zJyxcclxuICAgICAgICAgICAgICAgICAgICBwaGFsYW54UmFuZ2U6ICdBdWdtZW50YXRpb24gZGUgbGEgcG9ydMOpZSBkZSBsYSBwaGFsYW5nZScsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZ2VuZXJhbDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbWJhdFNoaXBTcGVlZDogJ0JvbnVzIGRlIHZpdGVzc2UgZGVzIHZhaXNzZWF1eCBkZSBjb21iYXQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlY3ljbGVyU3BlZWQ6ICdCb251cyBkZSB2aXRlc3NlIGRlcyByZWN5Y2xldXJzJyxcclxuICAgICAgICAgICAgICAgICAgICBmdWVsQ29uc3VtcHRpb246ICdDb25zb21tYXRpb24gZGUgY2FyYnVyYW50IHBvdXIgdG91cyBsZXMgdmFpc3NlYXV4JyxcclxuICAgICAgICAgICAgICAgICAgICBpbmNyZWFzZWRDYXJnb1JlY3ljbGVyc1BhdGhmaW5kZXJzOiAnQXVnbWVudGF0aW9uIGRlIGxhIGNhcGFjaXTDqSBkZSBjaGFyZ2UgZGVzIHJlY3ljbGV1cnMvw6ljbGFpcmV1cnMnLFxyXG4gICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxDb21iYXRSZXNlYXJjaExldmVsczogJ05pdmVhdXggZGVzIHJlY2hlcmNoZXMgZGUgY29tYmF0IHN1cHBsw6ltZW50YWlyZXMnLFxyXG4gICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxGbGVldFNsb3RzOiAnRmxvdHRlcyBzdXBwbMOpbWVudGFpcmVzJyxcclxuICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsTW9vbkZpZWxkczogJ0NoYW1wcyBkZSBsdW5lIHN1cHBsw6ltZW50YWlyZXMnLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICBjbGFzc0JvbnVzOiAnQm9udXMgZGUgY2xhc3NlJyxcclxuICAgICAgICAgICAgICAgIGJvbnVzOiAnQm9udXMnLFxyXG4gICAgICAgICAgICAgICAgYmFzZVZhbHVlOiAnVmFsZXVyIGRlIGJhc2UnLFxyXG4gICAgICAgICAgICAgICAgdmFsdWVXaXRoQm9udXNlczogJ1ZhbGV1ciBhdmVjIGJvbnVzJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHBsYW5ldEJvbnVzZXM6IHtcclxuICAgICAgICAgICAgcmVzb3VyY2VQcm9kdWN0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdQcm9kdWN0aW9uIGRlIHJlc3NvdXJjZXMnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsaWZlZm9ybVJlc2VhcmNoQ29zdFRpbWU6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ0Nvw7t0IGV0IHRlbXBzIGRlIHJlY2hlcmNoZSBkZXMgZm9ybWVzIGRlIHZpZScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHdyZWNrZmllbGQ6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ0NoYW1wIGRlIGTDqWJyaXMnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHRvcEZpbmRzOiB7XHJcbiAgICAgICAgICAgIHRvcEZpbmRzOiAnTWVpbGxldXJlcyBkw6ljb3V2ZXJ0ZXMnLFxyXG4gICAgICAgICAgICB3b3JzdEZpbmRzOiAnUGlyZXMgZMOpY291dmVydGVzJyxcclxuXHJcbiAgICAgICAgICAgIHNpemU6ICdUYWlsbGUnLFxyXG4gICAgICAgICAgICBhbW91bnQ6ICdRdWFudGl0w6knLFxyXG4gICAgICAgICAgICBkYXRlOiAnRGF0ZScsXHJcbiAgICAgICAgICAgIGFydGlmYWN0czogJ0FydMOpZmFjdHMnLFxyXG4gICAgICAgICAgICBleHBlcmllbmNlOiAnRXhww6lyaWVuY2UnLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG59O1xyXG4iLCJpbXBvcnQgeyBSZWN1cnNpdmVQYXJ0aWFsIH0gZnJvbSBcIkAvc2hhcmVkL3R5cGVzL1JlY3Vyc2l2ZVBhcnRpYWxcIjtcclxuaW1wb3J0IHsgU3dpdGNoQWNjb3VudHNUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZnI6IFJlY3Vyc2l2ZVBhcnRpYWw8U3dpdGNoQWNjb3VudHNUcmFuc2xhdGlvbnM+ID0ge1xyXG4gICAgdGl0bGU6ICdTw6lsZWN0aW9ubmVyIGxlIGNvbXB0ZSDDoCBhZmZpY2hlciBkYW5zIHVuIG5vdXZlbCBvbmdsZXQnLFxyXG59O1xyXG4iLCJpbXBvcnQgeyBSZWN1cnNpdmVQYXJ0aWFsIH0gZnJvbSBcIkAvc2hhcmVkL3R5cGVzL1JlY3Vyc2l2ZVBhcnRpYWxcIjtcclxuaW1wb3J0IHsgQWJvdXRUcmFuc2xhdGlvbnMgfSBmcm9tIFwiLi90eXBlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZnI6IFJlY3Vyc2l2ZVBhcnRpYWw8QWJvdXRUcmFuc2xhdGlvbnM+ID0ge1xyXG4gICAgZmFxSGVscDoge1xyXG4gICAgICAgIGhlYWRlcjogJ0FpZGUnLFxyXG4gICAgICAgIGZhcToge1xyXG4gICAgICAgICAgICBoZWFkZXI6ICdGLkEuUS4nLFxyXG4gICAgICAgICAgICBmbGVldExvc3RPbkV4cGVkaXRpb246IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ1BvdXJxdW9pIGxlcyB2YWlzc2VhdXggcXVlIGpcXCdhaSBwZXJkdXMgZW4gZXhww6lkaXRpb24gbmUgc29udC1pbHMgcGFzIHN1aXZpcz8nLFxyXG4gICAgICAgICAgICAgICAgdGV4dDogXCJMZSBzdWl2aSBkZXMgdmFpc3NlYXV4IHBlcmR1cyBlbiBleHDDqWRpdGlvbiBuw6ljZXNzaXRlIHVuIHN1aXZpIHBlcm1hbmVudCBkZSBsYSBmbG90dGUsIGNlIHF1aSBuJ2VzdCBwYXMgcsOpYWxpc2FibGUuXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN5bmNCZXR3ZWVuRGV2aWNlczoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnUG91cnF1b2kgblxcJ3kgYS10LWlsIHBhcyBkZSBzeW5jaHJvbmlzYXRpb24gZGUgbWVzIGRvbm7DqWVzIGVudHJlIHBsdXNpZXVycyBhcHBhcmVpbHM/JyxcclxuICAgICAgICAgICAgICAgIHRleHQ6ICdMZSB0cmFja2VyIGVucmVnaXN0cmUgYmVhdWNvdXAgcGx1cyBkZSBkb25uw6llcyBxdWUgY2UgcXVpIHBldXQgw6p0cmUgc3luY2hyb25pc8OpIGF2ZWMgdm90cmUgY29tcHRlIHV0aWxpc2F0ZXVyIChHb29nbGUsIE1pY3Jvc29mdCwgZXRjLikuIFVuZSBzeW5jaHJvbmlzYXRpb24gYXZlYyB1biBzZXJ2ZXVyIGV4dGVybmUgcG91cnJhaXQgw6p0cmUgcG9zc2libGUgw6AgbFxcJ2F2ZW5pci4nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwcm9kdWN0aW9uSW5SZXNvdXJjZUJhbGFuY2U6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogJ1BvdXJxdW9pIGxhIGJhbGFuY2UgZGVzIHJlc3NvdXJjZXMgblxcJ2luY2x1dC1lbGxlIHBhcyBtYSBwcm9kdWN0aW9uIGRlIHJlc3NvdXJjZXM/JyxcclxuICAgICAgICAgICAgICAgIHRleHQ6IFwiVm90cmUgcHJvZHVjdGlvbiBkZSByZXNzb3VyY2VzIGTDqXBlbmQgZGUgZGl2ZXJzIGZhY3RldXJzLCBldCBsZXVycyBjaGFuZ2VtZW50cyBkZXZyYWllbnQgw6p0cmUgc3VpdmlzIGVuIHBlcm1hbmVuY2UuIEJpZW4gcXVlIGNlbGEgc29pdCBwb3NzaWJsZSwgdW5lIG1pc2UgZW4gxZN1dnJlIGRlIGNldHRlIGZvbmN0aW9ubmFsaXTDqSBzZXJhaXQgYmVhdWNvdXAgcGx1cyBjb21wbGV4ZSBxdSdlbGxlIG5lIHNlcmFpdCB1dGlsZSBwb3VyIHNlcyB1dGlsaXNhdGV1cnMuXCIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHdoYXRBcmVBdmVyYWdlczoge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyOiAnUXVlIHNpZ25pZmllIGxhIG1lbnRpb24gXFwn4oyAIHBhciBqb3VyXFwnPycsXHJcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIklsIHMnYWdpdCBkZSBsYSBtb3llbm5lIHN1ciB0b3VzIGxlcyBqb3VycyBhdmVjIGF1IG1vaW5zIHVuIMOpdsOpbmVtZW50IHN1aXZpLlwiLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGlwczoge1xyXG4gICAgICAgICAgICBoZWFkZXI6ICdDb25zZWlscycsXHJcbiAgICAgICAgICAgIHJpZ2h0Q2xpY2tEZWZhdWx0Um91dGU6IFwiVm91cyBwb3V2ZXogZmFpcmUgdW4gY2xpYyBkcm9pdCBzdXIgdW4gb25nbGV0IHByaW5jaXBhbCBkdSBjw7R0w6kgZ2F1Y2hlIG91IHN1ciBsJ3VuIGRlIHNlcyBzb3VzLW1lbnUgcG91ciBkw6lmaW5pciBjb21tZSBwYXIgZMOpZmF1dC5cIixcclxuICAgICAgICAgICAgbnVtYmVyc0tleWJvYXJkTmF2aWdhdGlvbjogXCJWb3VzIHBvdXZleiBvdXZyaXIgbGVzIHBhZ2VzIGRlcyBvbmdsZXRzIGF2ZWMgdW4gY2hpZmZyZSBlbiBhcHB1eWFudCBzdXIgbGEgdG91Y2hlIGRlIGNoaWZmcmUgcmVzcGVjdGl2ZSBkZSB2b3RyZSBjbGF2aWVyLlwiLFxyXG4gICAgICAgICAgICBhbW9ydGl6YXRpb25UYWJsZToge1xyXG4gICAgICAgICAgICAgICAgcGFydDE6ICdWb3VzIHZvdWxleiBzYXZvaXIgcXVvaSBjb25zdHJ1aXJlIG91IHJlY2hlcmNoZXIgZW5zdWl0ZSBwb3VyIGFtw6lsaW9yZXIgdm90cmUgcHJvZHVjdGlvbiBkZSByZXNzb3VyY2VzIGRlIGxhIG1hbmnDqHJlIGxhIHBsdXMgZWZmaWNhY2U/IEVzc2F5ZXogbGVcXHhhMCcsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnY2FsY3VsYXRldXIgZFxcJ2Ftb3J0aXNzZW1lbnQgaW50ZXJhY3RpZicsXHJcbiAgICAgICAgICAgICAgICBwYXJ0MjogJy4nLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbmxpbmVTZXR0aW5nczogXCJWb3VzIHBvdXZleiBjaGFuZ2VyIGxlcyBwYXJhbcOodHJlcyBsacOpcyBpbW3DqWRpYXRlbWVudCBlbiBhcHB1eWFudCBzdXIgbGEgcGV0aXRlIGljw7RuZSBkJ2VuZ3JlbmFnZSBzdXIgbGUgY8O0dMOpIGRyb2l0LlwiLFxyXG4gICAgICAgICAgICBzd2l0Y2hBY2NvdW50SHRtbDogXCJWb3VzIHBvdXZleiBvdXZyaXIgbCdpbnRlcmZhY2UgT0dhbWUgVHJhY2tlciBwb3VyIHVuIGF1dHJlIGNvbXB0ZSBzdWl2aSBlbiBjbGlxdWFudCBzdXIgbCdpY8O0bmUgPHNwYW4gY2xhc3M9XFxcIm1kaSBtZGktYWNjb3VudC1tdWx0aXBsZVxcXCI+PC9zcGFuPiBldCBlbiBzw6lsZWN0aW9ubmFudCBsZSBjb21wdGUuXCIsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBtZXNzYWdlRGlzY29yZDoge1xyXG4gICAgICAgICAgICBwYXJ0MTogJ0Jlc29pbiBkXFwnYWlkZSA/IGF2ZXotdm91cyB0cm91dsOpIHVuIGJ1ZyBvdSBhdmV6LXZvdXMgdW5lIGRlbWFuZGUgZGUgZm9uY3Rpb25uYWxpdMOpID8gUmVqb2lnbmV6IGxlXFx4YTAnLFxyXG4gICAgICAgICAgICBkaXNjb3JkU2VydmVyOiAnc2VydmV1ciBEaXNjb3JkJyxcclxuICAgICAgICAgICAgcGFydDI6ICdcXHhhMGV0IMOpY3JpdmV6IHVuIG1lc3NhZ2UgZGFucyBsZSBjYW5hbCBjb3JyZXNwb25kYW50LicsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBpbmZvOiB7XHJcbiAgICAgICAgaGVhZGVyOiAnSW5mbycsXHJcbiAgICAgICAgdGFibGU6IHtcclxuICAgICAgICAgICAgY3VycmVudEFjY291bnQ6IHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcjogXCJJbmZvcm1hdGlvbnMgc3VyIGxlIGNvbXB0ZSBzw6lsZWN0aW9ubsOpXCIsXHJcbiAgICAgICAgICAgICAgICBudW1iZXJPZlRyYWNrZWRFeHBlZGl0aW9uczogJ05vbWJyZSBkXFwnZXhww6lkaXRpb25zIHN1aXZpZXMnLFxyXG4gICAgICAgICAgICAgICAgbnVtYmVyT2ZUcmFja2VkQ29tYmF0UmVwb3J0czogJ05vbWJyZSBkZSByYXBwb3J0cyBkZSBjb21iYXQgc3VpdmlzJyxcclxuICAgICAgICAgICAgICAgIG51bWJlck9mVHJhY2tlZERlYnJpc0ZpZWxkUmVwb3J0czogJ05vbWJyZSBkZSByYXBwb3J0cyBkZSByw6ljb2x0ZSBDRFIgc3VpdmlzJyxcclxuICAgICAgICAgICAgICAgIG51bWJlck9mVHJhY2tlZExpZmVmb3JtRGlzY292ZXJpZXM6ICdOb21icmUgZGUgbWlzc2lvbnMgZGUgZMOpY291dmVydGUgZGUgZm9ybWVzIGRlIHZpZSBzdWl2aWVzJyxcclxuICAgICAgICAgICAgICAgIGxhc3RVcGRhdGVTZXJ2ZXJTZXR0aW5nczogJ0Rlcm5pw6hyZSBtaXNlIMOgIGpvdXIgZGVzIHBhcmFtw6h0cmVzIGR1IHNlcnZldXInLFxyXG4gICAgICAgICAgICAgICAgbnVtYmVyT2ZVbml2ZXJzZUhpc3RvcnlFbnRyaWVzOiAnTm9tYnJlIGRcXCdlbnRyw6llcyBkYW5zIGxcXCdoaXN0b3JpcXVlIGRlIGxcXCd1bml2ZXJzJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2xvYmFsOiB7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXI6ICdJbmZvcm1hdGlvbnMgc3VyIGxcXCdlbnNlbWJsZSBkZXMgZG9ubsOpZXMgZGFucyBPR2FtZSBUcmFja2VyJyxcclxuICAgICAgICAgICAgICAgIG51bWJlck9mVHJhY2tlZEFjY291bnRzOiAnTm9tYnJlIGRlIGNvbXB0ZXMgc3VpdmlzJyxcclxuICAgICAgICAgICAgICAgIGVzdGltYXRlZFNpemU6ICdUYWlsbGUgZGUgdG91dGVzIGxlcyBkb25uw6llcyBlbnJlZ2lzdHLDqWVzIHN1ciBsZSBkaXNxdWUnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG59O1xyXG4iLCJpbXBvcnQgeyBSZWN1cnNpdmVQYXJ0aWFsIH0gZnJvbSBcIkAvc2hhcmVkL3R5cGVzL1JlY3Vyc2l2ZVBhcnRpYWxcIjtcclxuaW1wb3J0IHsgVW5pdmVyc2VIaXN0b3J5VHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGZyOiBSZWN1cnNpdmVQYXJ0aWFsPFVuaXZlcnNlSGlzdG9yeVRyYW5zbGF0aW9ucz4gPSB7XHJcbiAgICBoZWFkZXI6ICdIaXN0b3JpcXVlIGRlIGxgXFwndW5pdmVycycsXHJcbiAgICBzZXR0aW5nczoge1xyXG4gICAgICAgIG1lc3NhZ2VzOiB7XHJcbiAgICAgICAgICAgIG5vdEVuYWJsZWRIdG1sOiBgXHJcbiAgICAgICAgICAgICAgICA8Yj5MZSBzdWl2aSBkdSBjbGFzc2VtZW50IGRlIGwndW5pdmVycyBuJ2VzdCBwYXMgYWN0aXbDqS48L2I+PGJyLz5cclxuICAgICAgICAgICAgICAgIEFjdGl2ZXIgY2V0dGUgZm9uY3Rpb25uYWxpdMOpIHBlcm1ldHRyYSBkZSBzdWl2cmUgbGVzIGNoYW5nZW1lbnRzIGRlIGNsYXNzZW1lbnQgcG91ciBsZXMgam91ZXVycyBldCBsZXMgYWxsaWFuY2VzLlxyXG4gICAgICAgICAgICBgLFxyXG4gICAgICAgICAgICBoaXN0b3J5VHJhY2tpbmdOb3RFbmFibGVkSHRtbDogYFxyXG4gICAgICAgICAgICAgICAgPGI+TGUgc3VpdmkgZGUgbCdoaXN0b3JpcXVlIGRlIGwndW5pdmVycyBuJ2VzdCBwYXMgYWN0aXbDqS48L2I+PGJyLz5cclxuICAgICAgICAgICAgICAgIEFjdGl2ZXIgY2V0dGUgZm9uY3Rpb25uYWxpdMOpIHBlcm1ldHRyYSBkZSBzdWl2cmUgw6lnYWxlbWVudCB0b3VzIGxlcyBjaGFuZ2VtZW50cyBwb3VyIGxlcyBqb3VldXJzIGV0IGxlcyBhbGxpYW5jZXMuPGJyLz5cclxuICAgICAgICAgICAgICAgIENlbGEgaW5jbHV0IGxlcyBjaGFuZ2VtZW50cyBkZSBub20gZXQgZGUgdGFnIGRlcyBqb3VldXJzIGV0IGRlcyBhbGxpYW5jZXMsIGxlcyBjaGFuZ2VtZW50cyBkZSBtZW1icmVzIGQnYWxsaWFuY2UsXHJcbiAgICAgICAgICAgICAgICBsZXMgY2hhbmdlbWVudHMgZCfDqXRhdCBkZXMgam91ZXVycyBldCBsZXMgY2hhbmdlbWVudHMgY29uY2VybmFudCBsZXMgcGxhbsOodGVzIGV0IGxlcyBsdW5lcywgeSBjb21wcmlzIGxlcyBub21zLCBsZXMgY29vcmRvbm7DqWVzLFxyXG4gICAgICAgICAgICAgICAgZXQgbGVzIHBsYW7DqHRlcyBldCBsdW5lcyBhYmFuZG9ubsOpZXMvZMOpdHJ1aXRlcy48YnIgLz5cclxuICAgICAgICAgICAgICAgIDxpPkNlbGEgcGV1dCBnw6luw6lyZXIgYmVhdWNvdXAgZGUgZG9ubsOpZXMgIVxyXG4gICAgICAgICAgICAgICAgVm91cyBwb3V2ZXogZMOpc2FjdGl2ZXIgY2V0dGUgZm9uY3Rpb25uYWxpdMOpIDxhIGhyZWY9XCIjL3NldHRpbmdzL3VuaXZlcnNlLWhpc3RvcnlcIj5kYW5zIGxlIG1lbnUgZGVzIHBhcmFtw6h0cmVzPC9hPlxyXG4gICAgICAgICAgICAgICAgw6Agbm91dmVhdS48L2k+XHJcbiAgICAgICAgICAgIGAsXHJcbiAgICAgICAgICAgIHRyYWNraW5nVGltZXNIdG1sOiBgXHJcbiAgICAgICAgICAgICAgICBBdSBtb2lucyB1bmUgZm9pcyBwYXIgam91ciwgbGVzIGNsYXNzZW1lbnRzIGV0IGxlcyBkb25uw6llcyBkZSBsJ3VuaXZlcnMgKHNpIGFjdGl2w6lzKSBzZXJvbnQgbWlzIMOgIGpvdXIuPGJyLz5cclxuICAgICAgICAgICAgICAgIFZvdXMgcG91dmV6IGTDqWZpbmlyIGxlcyBoZXVyZXMgZGUgbWlzZSDDoCBqb3VyIGNpLWRlc3NvdXMuXHJcbiAgICAgICAgICAgICAgICBTaSB1bmUgbWlzZSDDoCBqb3VyIGVzdCBtYW5xdcOpZSwgZWxsZSBzZXJhIGVmZmVjdHXDqWUgZMOocyBxdWUgcG9zc2libGUgcGFyIGxhIHN1aXRlLlxyXG4gICAgICAgICAgICBgXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbmFibGVIaWdoc2NvcmVUcmFja2luZ09ubHk6ICdBY3RpdmVyIHVuaXF1ZW1lbnQgbGUgc3VpdmkgZHUgY2xhc3NlbWVudCBkZSBsXFwndW5pdmVycycsXHJcbiAgICAgICAgZW5hYmxlSGlzdG9yeVRyYWNraW5nOiAnQWN0aXZlciBsZSBzdWl2aSBkZSBsXFwnaGlzdG9yaXF1ZSBkZSBsXFwndW5pdmVycycsXHJcbiAgICB9LFxyXG5cclxuICAgIHRhYnM6IHtcclxuICAgICAgICBwbGF5ZXJzOiAnSm91ZXVycycsXHJcbiAgICAgICAgYWxsaWFuY2VzOiAnQWxsaWFuY2VzJyxcclxuXHJcbiAgICAgICAgc3VidGFiczoge1xyXG4gICAgICAgICAgICBoaWdoc2NvcmU6ICdDbGFzc2VtZW50JyxcclxuICAgICAgICAgICAgaGlzdG9yeTogJ0hpc3RvcmlxdWUnLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG5cclxuICAgIHBsYXllclNlbGVjdGlvbjoge1xyXG4gICAgICAgIGhlYWRlcjogJ1PDqWxlY3Rpb24gZHUgam91ZXVyJyxcclxuICAgICAgICBzZWFyY2g6ICdSZWNoZXJjaGVyIHVuIGpvdWV1cicsXHJcbiAgICB9LFxyXG4gICAgYWxsaWFuY2VTZWxlY3Rpb246IHtcclxuICAgICAgICBoZWFkZXI6ICdTw6lsZWN0aW9uIGRlIGxcXCdhbGxpYW5jZScsXHJcbiAgICAgICAgc2VhcmNoOiAnUmVjaGVyY2hlciB1bmUgYWxsaWFuY2UnLFxyXG4gICAgfSxcclxuXHJcbiAgICBoaWdoc2NvcmVUYWJzOiB7XHJcbiAgICAgICAgdG90YWw6ICdUb3RhbCcsXHJcbiAgICAgICAgZWNvbm9teTogJ8OJY29ub21pZScsXHJcbiAgICAgICAgcmVzZWFyY2g6ICdSZWNoZXJjaGUnLFxyXG4gICAgICAgIG1pbGl0YXJ5OiAnTWlsaXRhaXJlJyxcclxuICAgICAgICBtaWxpdGFyeUJ1aWx0OiAnTWlsaXRhaXJlIGNvbnN0cnVpdCcsXHJcbiAgICAgICAgbWlsaXRhcnlEZXN0cm95ZWQ6ICdNaWxpdGFpcmUgZMOpdHJ1aXQnLFxyXG4gICAgICAgIG1pbGl0YXJ5TG9zdDogJ01pbGl0YWlyZSBwZXJkdScsXHJcbiAgICAgICAgaG9ub3I6ICdIb25uZXVyJyxcclxuICAgICAgICBudW1iZXJPZlNoaXBzOiAnTm9tYnJlIGRlIHZhaXNzZWF1eCcsXHJcbiAgICAgICAgbGlmZWZvcm06ICdGb3JtZSBkZSB2aWUnLFxyXG4gICAgICAgIGxpZmVmb3JtRGlzY292ZXJpZXM6ICdEw6ljb3V2ZXJ0ZXMgZGVzIGZvcm1lcyBkZSB2aWUnLFxyXG4gICAgICAgIGxpZmVmb3JtRWNvbm9teTogJ8OJY29ub21pZSBkZXMgZm9ybWVzIGRlIHZpZScsXHJcbiAgICAgICAgbGlmZWZvcm1UZWNobm9sb2d5OiAnVGVjaG5vbG9naWUgZGVzIGZvcm1lcyBkZSB2aWUnLFxyXG4gICAgfSxcclxuICAgIGhpc3RvcnlUYWJzOiB7XHJcbiAgICAgICAgc3RhdHVzOiAnU3RhdHV0JyxcclxuICAgICAgICBuaWNrbmFtZXM6ICdBbGlhcycsXHJcbiAgICAgICAgYWxsaWFuY2VzOiAnQWxsaWFuY2VzJyxcclxuICAgICAgICBwbGFuZXRBbmRNb29uczogJ1BsYW7DqHRlcyBldCBMdW5lcycsXHJcblxyXG4gICAgICAgIHRhZ3M6ICdCYWxpc2VzJyxcclxuICAgICAgICBuYW1lczogJ05vbXMnLFxyXG4gICAgICAgIG1lbWJlcnM6ICdNZW1icmVzJyxcclxuICAgIH0sXHJcblxyXG4gICAgbm9BbGxpYW5jZTogJ3BhcyBkXFwnYWxsaWFuY2UnLFxyXG4gICAgdG9kYXk6ICdhdWpvdXJkXFwnaHVpJyxcclxuICAgIG5hbWU6ICdOb20nLFxyXG4gICAgdGFnOiAnQmFsaXNlJyxcclxuICAgIG1lbWJlcnM6ICdNZW1icmVzJyxcclxuICAgIGFsbGlhbmNlOiAnQWxsaWFuY2UnLFxyXG4gICAgZnJvbTogJ0RlJyxcclxuICAgIHVudGlsOiAnSnVzcXVcXCfDoCcsXHJcblxyXG4gICAgc3RhdHVzOiB7XHJcbiAgICAgICAgYWN0aXZlOiAnQWN0aWYnLFxyXG4gICAgICAgIHZhY2F0aW9uOiAnTW9kZSB2YWNhbmNlcycsXHJcbiAgICAgICAgaW5hY3RpdmU6ICdJbmFjdGlmICg+PSA3IGpvdXJzKScsXHJcbiAgICAgICAgaW5hY3RpdmVMb25nOiAnSW5hY3RpZiAoPj0gMjggam91cnMpJyxcclxuICAgICAgICBiYW5uZWQ6ICdCYW5uaScsXHJcbiAgICAgICAgb3V0bGF3OiAnSG9ycy1sYS1sb2knLFxyXG4gICAgICAgIGRlbGV0ZWQ6ICdTdXBwcmltw6knLFxyXG4gICAgICAgIGFkbWluOiAnQWRtaW4nLFxyXG4gICAgfSxcclxuXHJcbiAgICBsb2FkaW5nVGFraW5nTG9uZzogJ0xlIGNoYXJnZW1lbnQgZGVzIGRvbm7DqWVzIHByZW5kIHBsdXMgZGUgdGVtcHMgcXVlIHByw6l2dS4gTGEgYmFzZSBkZSBkb25uw6llcyBlc3QgcHJvYmFibGVtZW50IGVuIHRyYWluIGRlIHNlIG1ldHRyZSDDoCBqb3VyLCB2ZXVpbGxleiBwYXRpZW50ZXIgb3UgcsOpZXNzYXllciBwbHVzIHRhcmQuJyxcclxufTtcclxuIiwiaW1wb3J0IHsgUmVjdXJzaXZlUGFydGlhbCB9IGZyb20gXCJAL3NoYXJlZC90eXBlcy9SZWN1cnNpdmVQYXJ0aWFsXCI7XHJcbmltcG9ydCB7IE5vdGlmaWNhdGlvblRyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBmcjogUmVjdXJzaXZlUGFydGlhbDxOb3RpZmljYXRpb25UcmFuc2xhdGlvbnM+ID0ge1xyXG4gICAgY29tYmF0VHJhY2tpbmc6IHtcclxuICAgICAgICB0aXRsZTogKHZhbHVlOiBzdHJpbmcpID0+XHJcbiAgICAgICAgICAgIHZhbHVlID09ICcxJ1xyXG4gICAgICAgICAgICAgICAgPyBgJHt2YWx1ZX0gbm91dmVhdSByYXBwb3J0IGRlIGNvbWJhdCBzdWl2aWBcclxuICAgICAgICAgICAgICAgIDogYCR7dmFsdWV9IG5vdXZlYXV4IHJhcHBvcnRzIGRlIGNvbWJhdCBzdWl2aXNgLFxyXG4gICAgICAgIG1lc3NhZ2U6ICh2YWx1ZTogc3RyaW5nKSA9PlxyXG4gICAgICAgICAgICB2YWx1ZSA9PSAnMSdcclxuICAgICAgICAgICAgICAgID8gYCR7dmFsdWV9IG5vdXZlYXUgcmFwcG9ydCBkZSBjb21iYXQgYSDDqXTDqSBzdWl2aS5gXHJcbiAgICAgICAgICAgICAgICA6IGAke3ZhbHVlfSBub3V2ZWF1eCByYXBwb3J0cyBkZSBjb21iYXQgb250IMOpdMOpIHN1aXZpcy5gLFxyXG4gICAgfSxcclxuICAgIGRlYnJpc0ZpZWxkUmVwb3J0VHJhY2tpbmc6IHtcclxuICAgICAgICB0aXRsZTogKHZhbHVlOiBzdHJpbmcpID0+XHJcbiAgICAgICAgICAgIHZhbHVlID09ICcxJ1xyXG4gICAgICAgICAgICAgICAgPyBgJHt2YWx1ZX0gbm91dmVhdSByYXBwb3J0IGQnZXhwbG9pdGF0aW9uIGRlIGNoYW1wIGRlIGTDqWJyaXMgc3VpdmlgXHJcbiAgICAgICAgICAgICAgICA6IGAke3ZhbHVlfSBub3V2ZWF1eCByYXBwb3J0cyBkJ2V4cGxvaXRhdGlvbiBkZSBjaGFtcCBkZSBkw6licmlzIHN1aXZpc2AsXHJcbiAgICAgICAgbWVzc2FnZTogKHZhbHVlOiBzdHJpbmcpID0+XHJcbiAgICAgICAgICAgIHZhbHVlID09ICcxJ1xyXG4gICAgICAgICAgICAgICAgPyBgJHt2YWx1ZX0gbm91dmVhdSByYXBwb3J0IGQnZXhwbG9pdGF0aW9uIGRlIGNoYW1wIGRlIGTDqWJyaXMgYSDDqXTDqSBzdWl2aS5gXHJcbiAgICAgICAgICAgICAgICA6IGAke3ZhbHVlfSBub3V2ZWF1eCByYXBwb3J0cyBkJ2V4cGxvaXRhdGlvbiBkZSBjaGFtcCBkZSBkw6licmlzIG9udCDDqXTDqSBzdWl2aXMuYCxcclxuICAgIH0sXHJcbiAgICBleHBlZGl0aW9uVHJhY2tpbmc6IHtcclxuICAgICAgICBmbGVldExvc3Q6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICh2YWx1ZTogc3RyaW5nKSA9PlxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPT0gJzEnXHJcbiAgICAgICAgICAgICAgICAgICAgPyBgJHt2YWx1ZX0gZmxvdHRlIHBlcmR1ZWBcclxuICAgICAgICAgICAgICAgICAgICA6IGAke3ZhbHVlfSBmbG90dGVzIHBlcmR1ZXNgLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiAodmFsdWU6IHN0cmluZykgPT5cclxuICAgICAgICAgICAgICAgIHZhbHVlID09ICcxJ1xyXG4gICAgICAgICAgICAgICAgICAgID8gYCR7dmFsdWV9IGZsb3R0ZSBuJ2VzdCBwYXMgcmV2ZW51ZSBkZSBzb24gZXhww6lkaXRpb24uYFxyXG4gICAgICAgICAgICAgICAgICAgIDogYCR7dmFsdWV9IGZsb3R0ZXMgbmUgc29udCBwYXMgcmV2ZW51ZXMgZGUgbGV1cnMgZXhww6lkaXRpb25zLmAsXHJcbiAgICAgICAgfSxcclxuICAgICAgICByZXN1bHQ6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICh2YWx1ZTogc3RyaW5nKSA9PlxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPT0gJzEnXHJcbiAgICAgICAgICAgICAgICAgICAgPyBgJHt2YWx1ZX0gbm91dmVsbGUgZXhww6lkaXRpb24gc3VpdmllYFxyXG4gICAgICAgICAgICAgICAgICAgIDogYCR7dmFsdWV9IG5vdXZlbGxlcyBleHDDqWRpdGlvbnMgc3Vpdmllc2AsXHJcbiAgICAgICAgICAgIHN1bW1hcnk6ICdSw6lzdW3DqSBkZXMgZMOpY291dmVydGVzJyxcclxuICAgICAgICAgICAgZXZlbnRzOiAnw4l2w6luZW1lbnRzIGRcXCdleHDDqWRpdGlvbicsXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbiAgICBsaWZlZm9ybURpc2NvdmVyeVRyYWNraW5nOiB7XHJcbiAgICAgICAgdGl0bGU6ICh2YWx1ZTogc3RyaW5nKSA9PlxyXG4gICAgICAgICAgICB2YWx1ZSA9PSAnMSdcclxuICAgICAgICAgICAgICAgID8gYCR7dmFsdWV9IG5vdXZlbGxlIG1pc3Npb24gZGUgZMOpY291dmVydGUgZGUgZm9ybWUgZGUgdmllIHN1aXZpZWBcclxuICAgICAgICAgICAgICAgIDogYCR7dmFsdWV9IG5vdXZlbGxlcyBtaXNzaW9ucyBkZSBkw6ljb3V2ZXJ0ZSBkZSBmb3JtZSBkZSB2aWUgc3Vpdmllc2AsXHJcbiAgICAgICAgbWVzc2FnZTogKHZhbHVlOiBzdHJpbmcpID0+XHJcbiAgICAgICAgdmFsdWUgPT0gJzEnXHJcbiAgICAgICAgICAgID8gYCR7dmFsdWV9IG5vdXZlbGxlIG1pc3Npb24gZGUgZMOpY291dmVydGUgZGUgZm9ybWUgZGUgdmllIGEgw6l0w6kgc3VpdmllLmBcclxuICAgICAgICAgICAgOiBgJHt2YWx1ZX0gbm91dmVsbGVzIG1pc3Npb25zIGRlIGTDqWNvdXZlcnRlIGRlIGZvcm1lIGRlIHZpZSBvbnQgw6l0w6kgc3Vpdmllcy5gLFxyXG4gICAgfSxcclxuXHJcbiAgICBtZXNzYWdlVHJhY2tpbmdFcnJvcjoge1xyXG4gICAgICAgIHRpdGxlOiAodmFsdWU6IHN0cmluZykgPT5cclxuICAgICAgICAgICAgdmFsdWUgPT0gJzEnXHJcbiAgICAgICAgICAgICAgICA/IGDDiWNoZWMgZHUgdHJhaXRlbWVudCBkZSAke3ZhbHVlfSBtZXNzYWdlYFxyXG4gICAgICAgICAgICAgICAgOiBgw4ljaGVjIGR1IHRyYWl0ZW1lbnQgZGUgJHt2YWx1ZX0gbWVzc2FnZXNgLFxyXG4gICAgICAgIG1lc3NhZ2U6ICh2YWx1ZTogc3RyaW5nKSA9PlxyXG4gICAgICAgICAgICB2YWx1ZSA9PSAnMSdcclxuICAgICAgICAgICAgICAgID8gYCR7dmFsdWV9IG1lc3NhZ2UgYSBwcm92b3F1w6kgdW5lIGVycmV1ciBldCBuJ2EgcGFzIMOpdMOpIHN1aXZpLiBMZSBtZXNzYWdlIHJlc3BvbnNhYmxlIGEgw6l0w6kgbWFycXXDqSBlbiByb3VnZS4gVmV1aWxsZXogY29udGFjdGVyIGxlIGTDqXZlbG9wcGV1ci5gXHJcbiAgICAgICAgICAgICAgICA6IGAke3ZhbHVlfSBtZXNzYWdlcyBvbnQgcHJvdm9xdcOpIHVuZSBlcnJldXIgZXQgbidvbnQgcGFzIMOpdMOpIHN1aXZpcy4gTGVzIG1lc3NhZ2VzIHJlc3BvbnNhYmxlcyBvbnQgw6l0w6kgbWFycXXDqXMgZW4gcm91Z2UuIFZldWlsbGV6IGNvbnRhY3RlciBsZSBkw6l2ZWxvcHBldXIuYCxcclxuICAgIH0sXHJcbn07XHJcbiIsImltcG9ydCB7IFJlY3Vyc2l2ZVBhcnRpYWwgfSBmcm9tIFwiQC9zaGFyZWQvdHlwZXMvUmVjdXJzaXZlUGFydGlhbFwiO1xyXG5pbXBvcnQgeyBUb29sc1RyYW5zbGF0aW9ucyB9IGZyb20gXCIuL3R5cGVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBmcjogUmVjdXJzaXZlUGFydGlhbDxUb29sc1RyYW5zbGF0aW9ucz4gPSB7XHJcbiAgICBzaWduYXR1cmVHZW5lcmF0b3I6IHtcclxuICAgICAgICBoZWFkZXI6ICdHw6luw6lyYXRldXIgZGUgc2lnbmF0dXJlJyxcclxuXHJcbiAgICAgICAgYXZlcmFnZVBlckhvdXI6ICfijIAvaGV1cmUnLFxyXG4gICAgICAgIHRvdGFsUGVySG91cjogJ3BhciBoZXVyZScsXHJcbiAgICAgICAgdG90YWxQZXJEYXk6ICdwYXIgam91cicsXHJcbiAgICAgICAgdG90YWxQZXJXZWVrOiAncGFyIHNlbWFpbmUnLFxyXG4gICAgICAgIHByb2R1Y3Rpb246ICdQcm9kdWN0aW9uJyxcclxuXHJcbiAgICAgICAgZXhwZWRpdGlvbnM6ICdFeHDDqWRpdGlvbnMnLFxyXG4gICAgICAgIGxpZmVmb3JtRGlzY292ZXJpZXM6ICdEw6ljb3V2ZXJ0ZXMgRmRWJyxcclxuICAgICAgICBjb21iYXRzOiAnQ29tYmF0cycsXHJcbiAgICAgICAgZGVicmlzRmllbGRSZXBvcnRzOiAnUmFwcG9ydHMgZGUgY2hhbXBzIGRlIGTDqWJyaXMnLFxyXG4gICAgfSxcclxuICAgIHNjcmFweWFyZE1lcmNoYW50OiB7XHJcbiAgICAgICAgaGVhZGVyOiAnRmVycmFpbGxldXInLFxyXG4gICAgICAgIHBlcmNlbnRhZ2U6ICclIGF1IGZlcnJhaWxsZXVyJyxcclxuICAgICAgICBjb3VudDogJ0NvbXB0ZScsXHJcbiAgICB9LFxyXG5cclxufTtcclxuIiwiaW1wb3J0IHsgUmVjdXJzaXZlUGFydGlhbCB9IGZyb20gXCJAL3NoYXJlZC90eXBlcy9SZWN1cnNpdmVQYXJ0aWFsXCI7XHJcbmltcG9ydCB7IEV4Y2VsRXhwb3J0VHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGZyOiBSZWN1cnNpdmVQYXJ0aWFsPEV4Y2VsRXhwb3J0VHJhbnNsYXRpb25zPiA9IHtcclxuICAgIGhlYWRlcjogJ0V4cG9ydCBFeGNlbCcsXHJcbiAgICBjaG9vc2VCZWxvd01lc3NhZ2U6ICdDaG9pc2lzc2V6IGNpLWRlc3NvdXMgbGVzIGRvbm7DqWVzIHF1ZSB2b3VzIHNvdWhhaXRleiBpbmNsdXJlIGRhbnMgbFxcJ2V4cG9ydGF0aW9uIDonLFxyXG4gICAgZ3JvdXBzOiB7XHJcbiAgICAgICAgZXhwZWRpdGlvbnM6IHtcclxuICAgICAgICAgICAgaGVhZGVyOiAnRXhww6lkaXRpb25zJyxcclxuICAgICAgICAgICAgcmF3RGF0YTogJ0Rvbm7DqWVzIGJydXRlcyAoY2hhcXVlIGV4cMOpZGl0aW9uIHN1aXZpZSknLFxyXG4gICAgICAgICAgICBkYWlseU92ZXJ2aWV3OiAnVnVlIGRcXCdlbnNlbWJsZSBkZXMgcsOpc3VsdGF0cyBwYXIgam91cicsXHJcbiAgICAgICAgICAgIGRhaWx5RGVwbGV0aW9uOiAnVnVlIGRcXCdlbnNlbWJsZSBkZSBsXFwnw6lwdWlzZW1lbnQgZHUgc3lzdMOobWUgcGFyIGpvdXInLFxyXG4gICAgICAgICAgICBkYWlseVJlc291cmNlczogJ0TDqWNvdXZlcnRlcyBkZSByZXNzb3VyY2VzIHBhciBqb3VyJyxcclxuICAgICAgICAgICAgZGFpbHlSZXNvdXJjZVNpemVzOiAnVGFpbGxlcyBkZXMgZMOpY291dmVydGVzIGRlIHJlc3NvdXJjZXMgcGFyIGpvdXInLFxyXG4gICAgICAgICAgICBkYWlseVNoaXBzOiAnRMOpY291dmVydGVzIGRlIHZhaXNzZWF1eCBwYXIgam91cicsXHJcbiAgICAgICAgICAgIGRhaWx5U2hpcFNpemVzOiAnVGFpbGxlcyBkZXMgZMOpY291dmVydGVzIGRlIHZhaXNzZWF1eCBwYXIgam91cicsXHJcbiAgICAgICAgICAgIGRhaWx5RGFya01hdHRlcjogJ0TDqWNvdXZlcnRlcyBkXFwnQW50aW1hdGnDqHJlIHBhciBqb3VyJyxcclxuICAgICAgICAgICAgZGFpbHlEYXJrTWF0dGVyU2l6ZXM6ICdUYWlsbGVzIGRlcyBkw6ljb3V2ZXJ0ZXMgZGUgZFxcJ0FudGltYXRpw6hyZSBwYXIgam91cicsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb21iYXRzOiB7XHJcbiAgICAgICAgICAgIGhlYWRlcjogJ0NvbWJhdHMnLFxyXG4gICAgICAgICAgICByYXdEYXRhOiAnRG9ubsOpZXMgYnJ1dGVzIChjaGFxdWUgcsOpc3VsdGF0IGRlIGNvbWJhdCBzdWl2aSknLFxyXG4gICAgICAgICAgICBkYWlseVJlc3VsdHM6ICdSw6lzdWx0YXRzIGRlIGNvbWJhdCBwYXIgam91cicsXHJcbiAgICAgICAgICAgIGRhaWx5TG9vdDogJ0JpbGFuIGR1IGJ1dGluIHBhciBqb3VyJyxcclxuICAgICAgICAgICAgZGFpbHlMb3N0U2hpcHM6ICdWYWlzc2VhdXggcGVyZHVzIHBhciBqb3VyJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlYnJpc0ZpZWxkczoge1xyXG4gICAgICAgICAgICBoZWFkZXI6ICdDaGFtcHMgZGUgZMOpYnJpcycsXHJcbiAgICAgICAgICAgIHJhd0RhdGE6ICdEb25uw6llcyBicnV0ZXMgKGNoYXF1ZSByYXBwb3J0IGRlIHLDqWNvbHRlIHN1aXZpKScsXHJcbiAgICAgICAgICAgIGRhaWx5UmVzb3VyY2VzOiAnUmVzc291cmNlcyByw6ljb2x0w6llcyBwYXIgam91cicsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBsaWZlZm9ybURpc2NvdmVyaWVzOiB7XHJcbiAgICAgICAgICAgIGhlYWRlcjogJ01pc3Npb25zIGRlIGTDqWNvdXZlcnRlJyxcclxuICAgICAgICAgICAgcmF3RGF0YTogJ0Rvbm7DqWVzIGJydXRlcyAoY2hhcXVlIG1pc3Npb24gZGUgZMOpY291dmVydGUgc3VpdmllKScsXHJcbiAgICAgICAgICAgIGRhaWx5RXhwZXJpZW5jZTogJ0V4cMOpcmllbmNlIGdhZ27DqWUgcGFyIGpvdXInLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgZ2VuZXJhdGVCdXR0b246ICdHw6luw6lyZXIgbFxcJ2V4cG9ydCBFeGNlbCcsXHJcblxyXG4gICAgZXhwZWRpdGlvbnM6IHtcclxuICAgICAgICBwcmVmaXg6ICdFWCcsXHJcblxyXG4gICAgICAgIHNoZWV0czoge1xyXG4gICAgICAgICAgICByYXdEYXRhOiAnRG9ubsOpZXMgYnJ1dGVzJyxcclxuICAgICAgICAgICAgZGFpbHlEZXBsZXRpb246ICfDiXB1aXNlbWVudCBxdW90aWRpZW4gZHUgc3lzdMOobWUnLFxyXG4gICAgICAgICAgICBkYWlseVJlc3VsdHM6ICdSw6lzdWx0YXRzIHF1b3RpZGllbnMnLFxyXG4gICAgICAgICAgICBkYWlseVJlc291cmNlczogJ1Jlc3NvdXJjZXMgcXVvdGlkaWVubmVzJyxcclxuICAgICAgICAgICAgZGFpbHlSZXNvdXJjZXNTaXplOiAnUmVzc291cmNlcyBxdW90aWRpZW5uZXMgKFRhaWxsZSknLFxyXG4gICAgICAgICAgICBkYWlseVNoaXBzOiAnVmFpc3NlYXV4IHF1b3RpZGllbnMnLFxyXG4gICAgICAgICAgICBkYWlseVNoaXBzU2l6ZTogJ1ZhaXNzZWF1eCBxdW90aWRpZW5zIChUYWlsbGUpJyxcclxuICAgICAgICAgICAgZGFpbHlEYXJrTWF0dGVyOiAnQW50aW1hdGnDqHJlIHF1b3RpZGllbm5lJyxcclxuICAgICAgICAgICAgZGFpbHlEYXJrTWF0dGVyU2l6ZTogJ0FudGltYXRpw6hyZSBxdW90aWRpZW5uZSAoVGFpbGxlKScsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZXZlbnRUeXBlOiAnVHlwZScsXHJcbiAgICAgICAgZXZlbnRTaXplOiAnVGFpbGxlJyxcclxuICAgICAgICBpdGVtOiAnT2JqZXQnLFxyXG4gICAgfSxcclxuICAgIGNvbWJhdHM6IHtcclxuICAgICAgICBwcmVmaXg6ICdDUicsXHJcblxyXG4gICAgICAgIHNoZWV0czoge1xyXG4gICAgICAgICAgICByYXdEYXRhOiAnRG9ubsOpZXMgYnJ1dGVzJyxcclxuICAgICAgICAgICAgZGFpbHlSZXN1bHRzOiAnUsOpc3VsdGF0cyBxdW90aWRpZW5zJyxcclxuICAgICAgICAgICAgZGFpbHlMb290OiAnQnV0aW4gcXVvdGlkaWVuJyxcclxuICAgICAgICAgICAgZGFpbHlMb3N0U2hpcHM6ICdWYWlzc2VhdXggcGVyZHVzIHF1b3RpZGllbnMnLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHJlc3VsdDogJ1LDqXN1bHRhdCBkdSBjb21iYXQnLFxyXG4gICAgICAgIGNvb3JkaW5hdGVzOiAnQ29vcmRvbm7DqWVzJyxcclxuICAgICAgICBnYWxheHk6ICdHYWxheGllJyxcclxuICAgICAgICBzeXN0ZW06ICdTeXN0w6htZScsXHJcbiAgICAgICAgcG9zaXRpb246ICdQb3NpdGlvbicsXHJcbiAgICAgICAgdGFyZ2V0VHlwZTogJ1R5cGUgZGUgY2libGUnLFxyXG4gICAgICAgIGNvbWJhdFR5cGU6ICdUeXBlIGRlIGNvbWJhdCcsXHJcbiAgICAgICAgZXhwZWRpdGlvbkNvbWJhdE9wcG9uZW50OiAnT3Bwb3NhbnQgZGUgY29tYmF0IGVuIGV4cMOpZGl0aW9uJyxcclxuICAgICAgICBsb290OiAnQnV0aW4nLFxyXG4gICAgICAgIGxvc3RTaGlwczogJ1ZhaXNzZWF1eCBwZXJkdXMnLFxyXG4gICAgICAgIGRlYnJpc0ZpZWxkOiAnQ2hhbXAgZGUgZMOpYnJpcycsXHJcbiAgICAgICAgbW9vbjogJ0x1bmUnLFxyXG4gICAgICAgIHBsYW5ldDogJ1BsYW7DqHRlJyxcclxuICAgICAgICBleHBlZGl0aW9uQ29tYmF0OiAnQ29tYmF0IGVuIGV4cMOpZGl0aW9uJyxcclxuICAgICAgICBwbGF5ZXJDb21iYXQ6ICdDb21iYXQgZGUgam91ZXVyJyxcclxuICAgICAgICBwaXJhdGVzOiAnUGlyYXRlcycsXHJcbiAgICAgICAgYWxpZW5zOiAnQWxpZW5zJyxcclxuXHJcbiAgICAgICAgYWdhaW5zdFBsYXllcnM6ICdDb250cmUgbGVzIGpvdWV1cnMnLFxyXG4gICAgICAgIG9uRXhwZWRpdGlvbnM6ICdFbiBleHDDqWRpdGlvbnMnLFxyXG4gICAgfSxcclxuICAgIGRlYnJpc0ZpZWxkczoge1xyXG4gICAgICAgIHByZWZpeDogJ0RGJyxcclxuXHJcbiAgICAgICAgc2hlZXRzOiB7XHJcbiAgICAgICAgICAgIHJhd0RhdGE6ICdEb25uw6llcyBicnV0ZXMnLFxyXG4gICAgICAgICAgICBkYWlseVJlc291cmNlczogJ1Jlc3NvdXJjZXMgcXVvdGlkaWVubmVzJyxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIGxpZmVmb3JtRGlzY292ZXJpZXM6IHtcclxuICAgICAgICBwcmVmaXg6ICdMRicsXHJcblxyXG4gICAgICAgIHNoZWV0czp7XHJcbiAgICAgICAgICAgIHJhd0RhdGE6ICdEb25uw6llcyBicnV0ZXMnLFxyXG4gICAgICAgICAgICBkYWlseUV4cGVyaWVuY2U6ICdFeHDDqXJpZW5jZSBxdW90aWRpZW5uZScsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcmVzdWx0OiAnRMOpY291dmVydGUnLFxyXG4gICAgICAgIGV4cGVyaWVuY2U6ICdFeHDDqXJpZW5jZScsXHJcbiAgICAgICAgbGlmZWZvcm06ICdGb3JtZSBkZSB2aWUnLFxyXG4gICAgICAgIGFydGlmYWN0czogJ0FydMOpZmFjdHMnLFxyXG4gICAgICAgIGFydGlmYWN0c1NpemU6ICdUYWlsbGUnLFxyXG4gICAgfSxcclxufTtcclxuIiwiaW1wb3J0IHsgUmVjdXJzaXZlUGFydGlhbCB9IGZyb20gXCJAL3NoYXJlZC90eXBlcy9SZWN1cnNpdmVQYXJ0aWFsXCI7XHJcbmltcG9ydCB7IFBsYXllckNsYXNzVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGZyOiBSZWN1cnNpdmVQYXJ0aWFsPFBsYXllckNsYXNzVHJhbnNsYXRpb25zPiA9IHtcclxuICAgIGNvbGxlY3RvcjogJ0NvbGxlY3RldXInLFxyXG4gICAgZGlzY292ZXJlcjogJ0V4cGxvcmF0ZXVyJyxcclxuICAgIGdlbmVyYWw6ICdHw6luw6lyYWwnLFxyXG4gICAgbm9uZTogJ0F1Y3VuZScsXHJcbn07XHJcbiIsImltcG9ydCB7IF90aHJvdyB9IGZyb20gXCJAL3NoYXJlZC91dGlscy9fdGhyb3dcIjtcclxuaW1wb3J0IHsgZm9ybWF0IH0gZnJvbSBcImRhdGUtZm5zXCI7XHJcbmltcG9ydCB7IENvbXBvbmVudCwgVnVlIH0gZnJvbSBcInZ1ZS1wcm9wZXJ0eS1kZWNvcmF0b3JcIjtcclxuaW1wb3J0IHsgTGFuZ3VhZ2VLZXkgfSBmcm9tIFwiLi4vTGFuZ3VhZ2VLZXlcIjtcclxuaW1wb3J0IHsgRXh0ZW5zaW9uVHJhbnNsYXRpb25zIH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5pbXBvcnQgZXh0ZW5zaW9uTWVzc2FnZXMgZnJvbSAnLi8nO1xyXG5pbXBvcnQgeyBfbG9nV2FybmluZyB9IGZyb20gXCJAL3NoYXJlZC91dGlscy9fbG9nXCI7XHJcbmltcG9ydCB7IFJlY3Vyc2l2ZVBhcnRpYWwgfSBmcm9tIFwiQC9zaGFyZWQvdHlwZXMvUmVjdXJzaXZlUGFydGlhbFwiO1xyXG5cclxudHlwZSBJMThuRGF0ZVRpbWVGb3JtYXRLZXkgPSAnZGF0ZScgfCAnZGF0ZXRpbWUnIHwgJ3RpbWUnIHwgJ3RpbWVfaG0nO1xyXG5cclxudHlwZSBJMThuTGFuZ3VhZ2VSb290TWFwPFRSb290PiA9IFBhcnRpYWw8UmVjb3JkPExhbmd1YWdlS2V5LCBUUm9vdD4+O1xyXG50eXBlIEkxOG5EYXRlVGltZUZvcm1hdHM8VD4gPSBQYXJ0aWFsPFJlY29yZDxJMThuRGF0ZVRpbWVGb3JtYXRLZXksIFQ+PjtcclxuZXhwb3J0IHR5cGUgSTE4bkRhdGVUaW1lRm9ybWF0ID0gc3RyaW5nIHwgSW50bC5EYXRlVGltZUZvcm1hdE9wdGlvbnM7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEkxOG5PcHRpb25zPFRNZXNzYWdlcywgVERhdGVUaW1lRm9ybWF0cz4ge1xyXG4gICAgbG9jYWxlOiBMYW5ndWFnZUtleTtcclxuICAgIGxvY2FsZVJlZ2lvbj86IHN0cmluZztcclxuICAgIGZhbGxiYWNrTG9jYWxlczogUmVxdWlyZWRMYW5ndWFnZUtleVtdO1xyXG4gICAgbWVzc2FnZXM6IFJlY29yZDxSZXF1aXJlZExhbmd1YWdlS2V5LCBUTWVzc2FnZXM+ICYgUmVjdXJzaXZlUGFydGlhbDxSZWNvcmQ8UGFydGlhbExhbmd1YWdlS2V5LCBUTWVzc2FnZXM+PjtcclxuICAgIGRhdGVUaW1lRm9ybWF0czogSTE4bkRhdGVUaW1lRm9ybWF0TWFwPFREYXRlVGltZUZvcm1hdHM+O1xyXG59XHJcblxyXG50eXBlIFJlcXVpcmVkTGFuZ3VhZ2VLZXkgPSBMYW5ndWFnZUtleS5kZSB8IExhbmd1YWdlS2V5LmVuO1xyXG50eXBlIFBhcnRpYWxMYW5ndWFnZUtleSA9IEV4Y2x1ZGU8TGFuZ3VhZ2VLZXksIFJlcXVpcmVkTGFuZ3VhZ2VLZXk+O1xyXG5leHBvcnQgdHlwZSBJMThuRGF0ZVRpbWVGb3JtYXRNYXA8VD4gPSBSZWNvcmQ8UmVxdWlyZWRMYW5ndWFnZUtleSwgSTE4bkRhdGVUaW1lRm9ybWF0czxUPj4gJiBQYXJ0aWFsPFJlY29yZDxQYXJ0aWFsTGFuZ3VhZ2VLZXksIEkxOG5EYXRlVGltZUZvcm1hdHM8VD4+PjtcclxuZXhwb3J0IHR5cGUgSTE4bk1lc3NhZ2VNYXA8VD4gPSBSZWNvcmQ8UmVxdWlyZWRMYW5ndWFnZUtleSwgVD4gJiBSZWN1cnNpdmVQYXJ0aWFsPFJlY29yZDxQYXJ0aWFsTGFuZ3VhZ2VLZXksIFQ+PjtcclxuZXhwb3J0IHR5cGUgSTE4bkZ1bGxNZXNzYWdlTWFwPFQ+ID0gUmVjb3JkPExhbmd1YWdlS2V5LCBUPjtcclxuXHJcbmNsYXNzIEkxOG5NZXNzYWdlUHJveHk8VE1lc3NhZ2VzLCBURGF0ZVRpbWVGb3JtYXRzIGV4dGVuZHMgSTE4bkRhdGVUaW1lRm9ybWF0PiB7XHJcbiAgICByZWFkb25seSAjaTE4bjogSTE4bjxUTWVzc2FnZXMsIFREYXRlVGltZUZvcm1hdHM+O1xyXG4gICAgcmVhZG9ubHkgI2NhY2hlID0ge30gYXMgUmVjb3JkPExhbmd1YWdlS2V5LCBSZWNvcmQ8c3RyaW5nLCBhbnk+PjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihpMThuOiBJMThuPFRNZXNzYWdlcywgVERhdGVUaW1lRm9ybWF0cz4sIG1lc3NhZ2VzOiBJMThuTGFuZ3VhZ2VSb290TWFwPFRNZXNzYWdlcz4pIHtcclxuICAgICAgICB0aGlzLiNpMThuID0gaTE4bjtcclxuXHJcbiAgICAgICAgdGhpcy4jdHJhbnNmb3JtSTE4bk9iamVjdChtZXNzYWdlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgI3RyYW5zZm9ybUkxOG5PYmplY3Qob2JqOiBJMThuTGFuZ3VhZ2VSb290TWFwPFRNZXNzYWdlcz4pIHtcclxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoTGFuZ3VhZ2VLZXkpIGFzIExhbmd1YWdlS2V5W107XHJcbiAgICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuI3RyYW5zZm9ybShcclxuICAgICAgICAgICAgICAgIHRoaXMgYXMgYW55LFxyXG4gICAgICAgICAgICAgICAgb2JqW2tleV0gPz8ge30sXHJcbiAgICAgICAgICAgICAgICBrZXksXHJcbiAgICAgICAgICAgICAgICAnJyxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAjdHJhbnNmb3JtKHJvb3Q6IEkxOG5MYW5ndWFnZVJvb3RNYXA8VE1lc3NhZ2VzPiwgb2JqOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LCBsYW5nOiBMYW5ndWFnZUtleSwgZnVsbFJvb3RLZXk6IHN0cmluZykge1xyXG4gICAgICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IG9ialtrZXldO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZmllbGRLZXkgPSBgJCR7a2V5fWA7XHJcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsUm9vdCA9ICgocm9vdCBhcyBhbnkpW2ZpZWxkS2V5XSA/Pz0ge30pIGFzIGFueTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGtleVByZWZpeCA9IGZ1bGxSb290S2V5ID09ICcnID8gJycgOiBgJHtmdWxsUm9vdEtleX0uYDtcclxuICAgICAgICAgICAgY29uc3QgZnVsbEtleSA9IGAke2tleVByZWZpeH0ke2tleX1gO1xyXG5cclxuICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0ICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKSA9PT0gT2JqZWN0LnByb3RvdHlwZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4jdHJhbnNmb3JtKGxvY2FsUm9vdCwgdmFsdWUsIGxhbmcsIGZ1bGxLZXkpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocm9vdCkuaW5jbHVkZXMoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyb290LCBrZXksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNpMThuLnRocm93T25EaXNhYmxlZCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGYgPSByb290IGFzIGFueTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmW2ZpZWxkS2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbG9jYWxSb290W2xhbmddID0gdmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxlQ2FjaGUgPSAodGhpcy4jY2FjaGVbbGFuZ10gPz89IHt9KTtcclxuICAgICAgICAgICAgICAgIGxvY2FsZUNhY2hlW2Z1bGxLZXldID0gdmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhyb290KS5pbmNsdWRlcyhrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJvb3QsIGtleSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI2kxOG4udGhyb3dPbkRpc2FibGVkKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuI2dldFRyYW5zbGF0aW9uKGZ1bGxLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAjZ2V0VHJhbnNsYXRpb24oZnVsbEtleTogc3RyaW5nKTogc3RyaW5nIHwgRXJyb3Ige1xyXG4gICAgICAgIGxldCByZXN1bHQgPSB0aGlzLiNjYWNoZVt0aGlzLiNpMThuLmxvY2FsZV0/LltmdWxsS2V5XTtcclxuICAgICAgICBpZiAocmVzdWx0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBsYXN0TG9jYWxlID0gdGhpcy4jaTE4bi5sb2NhbGU7XHJcbiAgICAgICAgZm9yIChjb25zdCBmYWxsYmFja0xvY2FsZSBvZiB0aGlzLiNpMThuLmZhbGxiYWNrTG9jYWxlcykge1xyXG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLiNjYWNoZVtmYWxsYmFja0xvY2FsZV0/LltmdWxsS2V5XTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsYXN0TG9jYWxlID0gZmFsbGJhY2tMb2NhbGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfdGhyb3coYCRpMThuOiBkaWQgbm90IGZpbmQga2V5ICcke2Z1bGxLZXl9JyBmb3IgYW55IGxvY2FsZWApO1xyXG4gICAgfVxyXG59XHJcblxyXG5AQ29tcG9uZW50KHt9KVxyXG5leHBvcnQgY2xhc3MgSTE4bjxUTWVzc2FnZXMsIFREYXRlVGltZUZvcm1hdHMgZXh0ZW5kcyBJMThuRGF0ZVRpbWVGb3JtYXQ+IGV4dGVuZHMgVnVlIHtcclxuICAgIHB1YmxpYyBlbmFibGVkID0gdHJ1ZTtcclxuICAgIHB1YmxpYyBsb2NhbGUgPSBMYW5ndWFnZUtleS5kZTtcclxuICAgIHB1YmxpYyBsb2NhbGVSZWdpb246IHN0cmluZyB8IG51bGwgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBfcHJveHk6IEkxOG5NZXNzYWdlUHJveHk8VE1lc3NhZ2VzLCBURGF0ZVRpbWVGb3JtYXRzPiA9IG51bGwhO1xyXG4gICAgcHVibGljIGZhbGxiYWNrTG9jYWxlczogTGFuZ3VhZ2VLZXlbXSA9IFtMYW5ndWFnZUtleS5lbl07XHJcblxyXG4gICAgLyogd2UgdHJpY2sgdHlwZXNjcmlwdCBoZXJlLCBpdCB0aGluayB0aGUgb2JqZWN0IGxvb2tzIGxpa2UgdGhpc1xyXG4gICAgICogeyBrZXk6ICd2YWx1ZScgfSAob3IgcmVjdXJzaXZlIGxpa2UgdGhpcylcclxuICAgICAqIGJ1dCBpbiByZWFsaXR5IHRoZSBvYmplY3QgbG9va3MgbGlrZSB0aGlzOlxyXG4gICAgICogeyBcclxuICAgICAqICAgIGdldCBrZXk6IDxyZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgY3VycmVudCBsb2NhbGUgb3IgdGhlIGZhbGxiYWNrTG9jYWxlPlxyXG4gICAgICogfVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgJHQ6IFRNZXNzYWdlcyA9IG51bGwhO1xyXG5cclxuICAgIC8qIHdlIHRyaWNrIHR5cGVzY3JpcHQgaGVyZSwgaXQgdGhpbmsgdGhlIG9iamVjdCBsb29rcyBsaWtlIHRoaXNcclxuICAgICAqIHsga2V5OiAndmFsdWUnIH0gKG9yIHJlY3Vyc2l2ZSBsaWtlIHRoaXMpXHJcbiAgICAgKiBidXQgaW4gcmVhbGl0eSB0aGUgb2JqZWN0IGxvb2tzIGxpa2UgdGhpczpcclxuICAgICAqIHsgXHJcbiAgICAgKiAgICBnZXQga2V5OiA8cmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGN1cnJlbnQgbG9jYWxlIG9yIHRoZSBmYWxsYmFja0xvY2FsZT5cclxuICAgICAqIH1cclxuICAgICAqL1xyXG4gICAgcHVibGljIGRhdGVUaW1lRm9ybWF0czogSTE4bkRhdGVUaW1lRm9ybWF0czxURGF0ZVRpbWVGb3JtYXRzPiA9IG51bGwhO1xyXG5cclxuICAgIHB1YmxpYyBpbml0KG9wdGlvbnM6IEkxOG5PcHRpb25zPFRNZXNzYWdlcywgVERhdGVUaW1lRm9ybWF0cz4pOiBJMThuPFRNZXNzYWdlcywgVERhdGVUaW1lRm9ybWF0cz4ge1xyXG4gICAgICAgIHRoaXMuX3Byb3h5ID0gbmV3IEkxOG5NZXNzYWdlUHJveHk8VE1lc3NhZ2VzLCBURGF0ZVRpbWVGb3JtYXRzPih0aGlzLCBvcHRpb25zLm1lc3NhZ2VzIGFzIGFueSk7XHJcbiAgICAgICAgdGhpcy4kdCA9IHRoaXMuX3Byb3h5IGFzIGFueTtcclxuICAgICAgICB0aGlzLmRhdGVUaW1lRm9ybWF0cyA9IG5ldyBJMThuTWVzc2FnZVByb3h5PGFueSwgVERhdGVUaW1lRm9ybWF0cz4odGhpcywgb3B0aW9ucy5kYXRlVGltZUZvcm1hdHMgYXMgYW55KSBhcyBhbnk7XHJcblxyXG4gICAgICAgIHRoaXMubG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XHJcbiAgICAgICAgdGhpcy5sb2NhbGVSZWdpb24gPSBvcHRpb25zLmxvY2FsZVJlZ2lvbiA/PyBudWxsO1xyXG4gICAgICAgIHRoaXMuZmFsbGJhY2tMb2NhbGVzID0gb3B0aW9ucy5mYWxsYmFja0xvY2FsZXM7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB0aHJvd09uRGlzYWJsZWQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJMThuIG9iamVjdCBpcyBkaXNhYmxlZCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGZ1bGxMb2NhbGVJZGVudGlmaWVyKCk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYodGhpcy5sb2NhbGVSZWdpb24gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYCR7dGhpcy5sb2NhbGV9LSR7dGhpcy5sb2NhbGVSZWdpb259YDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgJGQoZGF0ZTogbnVtYmVyIHwgRGF0ZSwgZm9ybWF0TmFtZTogSTE4bkRhdGVUaW1lRm9ybWF0S2V5KTogc3RyaW5nIHtcclxuICAgICAgICB0aGlzLnRocm93T25EaXNhYmxlZCgpO1xyXG5cclxuICAgICAgICBjb25zdCBkYXRlRm9ybWF0ID0gdGhpcy5kYXRlVGltZUZvcm1hdHNbZm9ybWF0TmFtZV0gPz8gX3Rocm93KGB1bmtub3duIGRhdGV0aW1lIGZvcm1hdCBrZXkgXCIke2Zvcm1hdE5hbWV9XCJgKTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRlRm9ybWF0ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0KGRhdGUsIGRhdGVGb3JtYXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KHRoaXMuZnVsbExvY2FsZUlkZW50aWZpZXIsIGRhdGVGb3JtYXQgYXMgSW50bC5EYXRlVGltZUZvcm1hdE9wdGlvbnMpLmZvcm1hdChkYXRlKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgJG4obnVtYmVyOiBudW1iZXIsIG9wdGlvbnM/OiBJbnRsLk51bWJlckZvcm1hdE9wdGlvbnMpOiBzdHJpbmcge1xyXG4gICAgICAgIHRoaXMudGhyb3dPbkRpc2FibGVkKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGZvcm1hdHRlciA9IG5ldyBJbnRsLk51bWJlckZvcm1hdCh0aGlzLmZ1bGxMb2NhbGVJZGVudGlmaWVyLCBvcHRpb25zKTtcclxuICAgICAgICByZXR1cm4gZm9ybWF0dGVyLmZvcm1hdChudW1iZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyAkdGltZXNwYW4odmFsdWVJblNlY29uZHM6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IHRvdGFsVGltZSA9IEJpZ0ludChNYXRoLmNlaWwodmFsdWVJblNlY29uZHMpKTtcclxuXHJcbiAgICAgICAgY29uc3Qgc2Vjb25kcyA9IHRvdGFsVGltZSAlIDYwbjtcclxuICAgICAgICB0b3RhbFRpbWUgPSAodG90YWxUaW1lIC0gc2Vjb25kcykgLyA2MG47XHJcblxyXG4gICAgICAgIGNvbnN0IG1pbnV0ZXMgPSB0b3RhbFRpbWUgJSA2MG47XHJcbiAgICAgICAgdG90YWxUaW1lID0gKHRvdGFsVGltZSAtIG1pbnV0ZXMpIC8gNjBuO1xyXG5cclxuICAgICAgICBjb25zdCBob3VycyA9IHRvdGFsVGltZSAlIDI0bjtcclxuICAgICAgICB0b3RhbFRpbWUgPSAodG90YWxUaW1lIC0gaG91cnMpIC8gMjRuO1xyXG5cclxuICAgICAgICBjb25zdCB0aW1lID0gYCR7aG91cnMudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpfToke21pbnV0ZXMudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpfToke3NlY29uZHMudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpfWA7XHJcbiAgICAgICAgaWYgKHRvdGFsVGltZSA9PSAwbikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGltZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGRheXMgPSB0b3RhbFRpbWUgJSA3bjtcclxuICAgICAgICB0b3RhbFRpbWUgPSAodG90YWxUaW1lIC0gZGF5cykgLyA3bjtcclxuXHJcbiAgICAgICAgY29uc3QgdGltZVdpdGhEYXlzID0gYCR7ZGF5c31kIGAgKyB0aW1lO1xyXG4gICAgICAgIGlmICh0b3RhbFRpbWUgPT0gMG4pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRpbWVXaXRoRGF5cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHdlZWtzID0gdG90YWxUaW1lO1xyXG5cclxuICAgICAgICByZXR1cm4gYCR7dGhpcy4kbihOdW1iZXIod2Vla3MpKX13IGAgKyB0aW1lV2l0aERheXM7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCAkaTE4biA9IG5ldyBJMThuPEV4dGVuc2lvblRyYW5zbGF0aW9ucywgSW50bC5EYXRlVGltZUZvcm1hdE9wdGlvbnM+KCkuaW5pdCh7XHJcbiAgICBtZXNzYWdlczogZXh0ZW5zaW9uTWVzc2FnZXMsXHJcbiAgICBkYXRlVGltZUZvcm1hdHM6IHtcclxuICAgICAgICAvL2Fsd2F5cyBmYWxsYmFjayB0byBkZSBiZWNhdXNlIGl0IHdpbGwgdXNlIHRoZSBjdXJyZW50IGxvY2FsZSBhbnl3YXlzXHJcbiAgICAgICAgZGU6IHtcclxuICAgICAgICAgICAgZGF0ZToge1xyXG4gICAgICAgICAgICAgICAgeWVhcjogJ251bWVyaWMnLFxyXG4gICAgICAgICAgICAgICAgbW9udGg6ICcyLWRpZ2l0JyxcclxuICAgICAgICAgICAgICAgIGRheTogJzItZGlnaXQnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRldGltZToge1xyXG4gICAgICAgICAgICAgICAgeWVhcjogJ251bWVyaWMnLFxyXG4gICAgICAgICAgICAgICAgbW9udGg6ICcyLWRpZ2l0JyxcclxuICAgICAgICAgICAgICAgIGRheTogJzItZGlnaXQnLFxyXG5cclxuICAgICAgICAgICAgICAgIGhvdXIxMjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBob3VyOiAnMi1kaWdpdCcsXHJcbiAgICAgICAgICAgICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcclxuICAgICAgICAgICAgICAgIHNlY29uZDogJzItZGlnaXQnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0aW1lOiB7XHJcbiAgICAgICAgICAgICAgICBob3VyMTI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgaG91cjogJzItZGlnaXQnLFxyXG4gICAgICAgICAgICAgICAgbWludXRlOiAnMi1kaWdpdCcsXHJcbiAgICAgICAgICAgICAgICBzZWNvbmQ6ICcyLWRpZ2l0JyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGltZV9obToge1xyXG4gICAgICAgICAgICAgICAgaG91cjEyOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGhvdXI6ICcyLWRpZ2l0JyxcclxuICAgICAgICAgICAgICAgIG1pbnV0ZTogJzItZGlnaXQnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW46IHtcclxuICAgICAgICAgICAgZGF0ZToge1xyXG4gICAgICAgICAgICAgICAgeWVhcjogJ251bWVyaWMnLFxyXG4gICAgICAgICAgICAgICAgbW9udGg6ICcyLWRpZ2l0JyxcclxuICAgICAgICAgICAgICAgIGRheTogJzItZGlnaXQnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRldGltZToge1xyXG4gICAgICAgICAgICAgICAgeWVhcjogJ251bWVyaWMnLFxyXG4gICAgICAgICAgICAgICAgbW9udGg6ICcyLWRpZ2l0JyxcclxuICAgICAgICAgICAgICAgIGRheTogJzItZGlnaXQnLFxyXG5cclxuICAgICAgICAgICAgICAgIGhvdXIxMjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGhvdXI6ICcyLWRpZ2l0JyxcclxuICAgICAgICAgICAgICAgIG1pbnV0ZTogJzItZGlnaXQnLFxyXG4gICAgICAgICAgICAgICAgc2Vjb25kOiAnMi1kaWdpdCcsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRpbWU6IHtcclxuICAgICAgICAgICAgICAgIGhvdXIxMjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGhvdXI6ICcyLWRpZ2l0JyxcclxuICAgICAgICAgICAgICAgIG1pbnV0ZTogJzItZGlnaXQnLFxyXG4gICAgICAgICAgICAgICAgc2Vjb25kOiAnMi1kaWdpdCcsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRpbWVfaG06IHtcclxuICAgICAgICAgICAgICAgIGhvdXIxMjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGhvdXI6ICcyLWRpZ2l0JyxcclxuICAgICAgICAgICAgICAgIG1pbnV0ZTogJzItZGlnaXQnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgbG9jYWxlOiBMYW5ndWFnZUtleS5lbixcclxuICAgIGZhbGxiYWNrTG9jYWxlczogW0xhbmd1YWdlS2V5LmVuLCBMYW5ndWFnZUtleS5kZV0sXHJcbn0pOyIsImltcG9ydCB7IGdldEdsb2JhbERhdGFiYXNlIH0gZnJvbSBcIkAvc2hhcmVkL2RiL2FjY2Vzc1wiO1xyXG5pbXBvcnQgeyBMYW5ndWFnZUtleSB9IGZyb20gXCJAL3NoYXJlZC9pMThuL0xhbmd1YWdlS2V5XCI7XHJcbmltcG9ydCB7IG1lcmdlRGVlcCB9IGZyb20gXCJAL3NoYXJlZC91dGlscy9tZXJnZURlZXBcIjtcclxuaW1wb3J0IHsgZ2V0RGVmYXVsdFNldHRpbmdzIH0gZnJvbSBcIi4vZ2V0RGVmYXVsdFNldHRpbmdzXCI7XHJcbmltcG9ydCB7IFNldHRpbmdzIH0gZnJvbSBcIi4vU2V0dGluZ3NcIjtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkU2V0dGluZ3MobGFuZ3VhZ2U6IExhbmd1YWdlS2V5KTogUHJvbWlzZTxTZXR0aW5ncz4ge1xyXG4gICAgY29uc3QgZGIgPSBhd2FpdCBnZXRHbG9iYWxEYXRhYmFzZSgpO1xyXG5cclxuICAgIGNvbnN0IHNldHRpbmdzID0gbWVyZ2VEZWVwPFNldHRpbmdzPihcclxuICAgICAgICBnZXREZWZhdWx0U2V0dGluZ3MobGFuZ3VhZ2UpLFxyXG4gICAgICAgIChhd2FpdCBkYi5nZXQoJ3NldHRpbmdzJywgMCkpID8/IHt9IGFzIFNldHRpbmdzLFxyXG4gICAgKTtcclxuICAgIHJldHVybiBzZXR0aW5ncztcclxufSIsImltcG9ydCB7ICRpMThuIH0gZnJvbSBcIkAvc2hhcmVkL2kxOG4vZXh0ZW5zaW9uLyRpMThuXCI7XHJcbmltcG9ydCB7IExhbmd1YWdlS2V5IH0gZnJvbSBcIi4uLy4uL2kxOG4vTGFuZ3VhZ2VLZXlcIjtcclxuaW1wb3J0IHsgQ29tYmF0UmVzdWx0VHlwZSB9IGZyb20gXCIuLi9jb21iYXQtcmVwb3J0cy9Db21iYXRSZXN1bHRUeXBlXCI7XHJcbmltcG9ydCB7IEV4cGVkaXRpb25EZXBsZXRpb25MZXZlbCB9IGZyb20gXCIuLi9leHBlZGl0aW9ucy9FeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWxcIjtcclxuaW1wb3J0IHsgRXhwZWRpdGlvbkV2ZW50U2l6ZSB9IGZyb20gXCIuLi9leHBlZGl0aW9ucy9FeHBlZGl0aW9uRXZlbnRTaXplXCI7XHJcbmltcG9ydCB7IEV4cGVkaXRpb25FdmVudFR5cGUgfSBmcm9tIFwiLi4vZXhwZWRpdGlvbnMvRXhwZWRpdGlvbkV2ZW50VHlwZVwiO1xyXG5pbXBvcnQgeyBMaWZlZm9ybURpc2NvdmVyeUV2ZW50QXJ0aWZhY3RGaW5kaW5nU2l6ZSB9IGZyb20gXCIuLi9saWZlZm9ybS1kaXNjb3Zlcmllcy9MaWZlZm9ybURpc2NvdmVyeUV2ZW50QXJ0aWZhY3RGaW5kaW5nU2l6ZVwiO1xyXG5pbXBvcnQgeyBMaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZSB9IGZyb20gXCIuLi9saWZlZm9ybS1kaXNjb3Zlcmllcy9MaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZVwiO1xyXG5pbXBvcnQgeyBMaWZlZm9ybVR5cGUgfSBmcm9tIFwiLi4vb2dhbWUvbGlmZWZvcm1zL0xpZmVmb3JtVHlwZVwiO1xyXG5pbXBvcnQgeyBSZXNvdXJjZVR5cGUgfSBmcm9tIFwiLi4vb2dhbWUvcmVzb3VyY2VzL1Jlc291cmNlVHlwZVwiO1xyXG5pbXBvcnQgeyBTaGlwVHlwZSB9IGZyb20gXCIuLi9vZ2FtZS9zaGlwcy9TaGlwVHlwZVwiO1xyXG5pbXBvcnQgeyBTZXR0aW5ncyB9IGZyb20gXCIuL1NldHRpbmdzXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdFNldHRpbmdzKGxhbmd1YWdlOiBMYW5ndWFnZUtleSk6IFNldHRpbmdzIHtcclxuICAgIGNvbnN0IG9sZExhbmcgPSAkaTE4bi5sb2NhbGU7XHJcbiAgICAkaTE4bi5sb2NhbGUgPSBsYW5ndWFnZTtcclxuXHJcbiAgICBjb25zdCBkZWZhdWx0U2V0dGluZ3M6IFNldHRpbmdzID0ge1xyXG4gICAgICAgIGRhdGVSYW5nZXM6IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICRpMThuLiR0LmV4dGVuc2lvbi5zZXR0aW5ncy5kYXRlUmFuZ2VzLmRlZmF1bHROYW1lcy50b2RheSxcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdkYXknLFxyXG4gICAgICAgICAgICAgICAgc2tpcDogMCxcclxuICAgICAgICAgICAgICAgIHRha2U6IDEsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAkaTE4bi4kdC5leHRlbnNpb24uc2V0dGluZ3MuZGF0ZVJhbmdlcy5kZWZhdWx0TmFtZXMueWVzdGVyZGF5LFxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2RheScsXHJcbiAgICAgICAgICAgICAgICBza2lwOiAxLFxyXG4gICAgICAgICAgICAgICAgdGFrZTogMSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICRpMThuLiR0LmV4dGVuc2lvbi5zZXR0aW5ncy5kYXRlUmFuZ2VzLmRlZmF1bHROYW1lcy5jdXJyZW50V2VlayxcclxuICAgICAgICAgICAgICAgIHR5cGU6ICd3ZWVrJyxcclxuICAgICAgICAgICAgICAgIHNraXA6IDAsXHJcbiAgICAgICAgICAgICAgICB0YWtlOiAxLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJGkxOG4uJHQuZXh0ZW5zaW9uLnNldHRpbmdzLmRhdGVSYW5nZXMuZGVmYXVsdE5hbWVzLmxhc3RXZWVrLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ3dlZWsnLFxyXG4gICAgICAgICAgICAgICAgc2tpcDogMSxcclxuICAgICAgICAgICAgICAgIHRha2U6IDEsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAkaTE4bi4kdC5leHRlbnNpb24uc2V0dGluZ3MuZGF0ZVJhbmdlcy5kZWZhdWx0TmFtZXMuY3VycmVudE1vbnRoLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ21vbnRoJyxcclxuICAgICAgICAgICAgICAgIHNraXA6IDAsXHJcbiAgICAgICAgICAgICAgICB0YWtlOiAxLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7IHR5cGU6ICdhbGwnIH0sXHJcbiAgICAgICAgXSxcclxuICAgICAgICBsb3N0U2hpcHNSZXNvdXJjZVVuaXRzOiB7XHJcbiAgICAgICAgICAgIGZhY3RvcjogMSxcclxuICAgICAgICAgICAgZGV1dGVyaXVtRmFjdG9yOiAxLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVzb3VyY2VCYWxhbmNlOiB7XHJcbiAgICAgICAgICAgIHNob3dEZXRhaWxlZEJyZWFrZG93bjogZmFsc2UsXHJcbiAgICAgICAgICAgIGluY2x1ZGVFeHBlZGl0aW9uRm91bmRTaGlwc1Jlc291cmNlVW5pdHM6IHRydWUsXHJcbiAgICAgICAgICAgIGluY2x1ZGVMb3N0U2hpcHNSZXNvdXJjZVVuaXRzOiB0cnVlLFxyXG4gICAgICAgICAgICBpbmNsdWRlTG9zdExvb3RSZXNvdXJjZXM6IHRydWUsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb252ZXJzaW9uUmF0ZXM6IHtcclxuICAgICAgICAgICAgbW9kZTogJ21zdScsXHJcbiAgICAgICAgICAgIG1zdToge1xyXG4gICAgICAgICAgICAgICAgY3J5c3RhbDogMS41LFxyXG4gICAgICAgICAgICAgICAgZGV1dGVyaXVtOiAzLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkc3U6IHtcclxuICAgICAgICAgICAgICAgIG1ldGFsOiAzLFxyXG4gICAgICAgICAgICAgICAgY3J5c3RhbDogMixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNob3dDZWxsc1dpdGhDb252ZXJ0ZWRSZXNvdXJjZVVuaXRzOiB0cnVlLFxyXG4gICAgICAgIGV4cGVkaXRpb25Gb3VuZFNoaXBzUmVzb3VyY2VVbml0czoge1xyXG4gICAgICAgICAgICBmYWN0b3I6IDEsXHJcbiAgICAgICAgICAgIGRldXRlcml1bUZhY3RvcjogMSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4dGVuc2lvbkxhbmd1YWdlOiBsYW5ndWFnZSxcclxuICAgICAgICBkZWZhdWx0Um91dGVzOiB7fSxcclxuICAgICAgICBjb2xvcnM6IHtcclxuICAgICAgICAgICAgY29tYmF0UmVzdWx0czoge1xyXG4gICAgICAgICAgICAgICAgW0NvbWJhdFJlc3VsdFR5cGUud29uXTogJyMwMGMyM2EnLFxyXG4gICAgICAgICAgICAgICAgW0NvbWJhdFJlc3VsdFR5cGUuZHJhd106ICcjYWFhYWFhJyxcclxuICAgICAgICAgICAgICAgIFtDb21iYXRSZXN1bHRUeXBlLmxvc3RdOiAnI2QxMTUxNScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJlc291cmNlczoge1xyXG4gICAgICAgICAgICAgICAgW1Jlc291cmNlVHlwZS5tZXRhbF06ICcjZmY1ZTAwJyxcclxuICAgICAgICAgICAgICAgIFtSZXNvdXJjZVR5cGUuY3J5c3RhbF06ICcjMWE5ZmZmJyxcclxuICAgICAgICAgICAgICAgIFtSZXNvdXJjZVR5cGUuZGV1dGVyaXVtXTogJyMxYmVlOGYnLFxyXG4gICAgICAgICAgICAgICAgdG90YWxDb252ZXJ0ZWQ6ICcjOTk5OTk5JyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2hpcHM6IHtcclxuICAgICAgICAgICAgICAgIFtTaGlwVHlwZS5saWdodEZpZ2h0ZXJdOiAnIzI0NzJmMycsXHJcbiAgICAgICAgICAgICAgICBbU2hpcFR5cGUuaGVhdnlGaWdodGVyXTogJyNjNzI1MjUnLFxyXG4gICAgICAgICAgICAgICAgW1NoaXBUeXBlLmNydWlzZXJdOiAnI2ZiYmMwNCcsXHJcbiAgICAgICAgICAgICAgICBbU2hpcFR5cGUuYmF0dGxlc2hpcF06ICcjOWVjYzAwJyxcclxuICAgICAgICAgICAgICAgIFtTaGlwVHlwZS5ib21iZXJdOiAnIzAwYTk1ZScsXHJcbiAgICAgICAgICAgICAgICBbU2hpcFR5cGUuYmF0dGxlY3J1aXNlcl06ICcjMDc1MjYzJyxcclxuICAgICAgICAgICAgICAgIFtTaGlwVHlwZS5kZXN0cm95ZXJdOiAnI2RlNTIwMCcsXHJcbiAgICAgICAgICAgICAgICBbU2hpcFR5cGUucmVhcGVyXTogJyMxNmE4ZDQnLFxyXG4gICAgICAgICAgICAgICAgW1NoaXBUeXBlLnBhdGhmaW5kZXJdOiAnI2FkMTM1ZScsXHJcbiAgICAgICAgICAgICAgICBbU2hpcFR5cGUuc21hbGxDYXJnb106ICcjODg4ODg4JyxcclxuICAgICAgICAgICAgICAgIFtTaGlwVHlwZS5sYXJnZUNhcmdvXTogJyNmZmZmZmYnLFxyXG4gICAgICAgICAgICAgICAgW1NoaXBUeXBlLmVzcGlvbmFnZVByb2JlXTogJyM0YjE3ZGEnLFxyXG4gICAgICAgICAgICAgICAgW1NoaXBUeXBlLmRlYXRoU3Rhcl06ICcjMjYyNTMwJyxcclxuICAgICAgICAgICAgICAgIFtTaGlwVHlwZS5yZWN5Y2xlcl06ICcjOGFmZjhlJyxcclxuICAgICAgICAgICAgICAgIFtTaGlwVHlwZS5jb2xvbnlTaGlwXTogJyNkN2I1OGUnLFxyXG4gICAgICAgICAgICAgICAgW1NoaXBUeXBlLmNyYXdsZXJdOiAnIzk0YjRmZicsXHJcbiAgICAgICAgICAgICAgICBbU2hpcFR5cGUuc29sYXJTYXRlbGxpdGVdOiAnI2RkOTRmZicsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV4cGVkaXRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBldmVudHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5ub3RoaW5nXTogJyM0MDQwNDAnLFxyXG4gICAgICAgICAgICAgICAgICAgIFtFeHBlZGl0aW9uRXZlbnRUeXBlLnJlc291cmNlc106ICcjMjI0MmUyJyxcclxuICAgICAgICAgICAgICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5mbGVldF06ICcjZGRkZGRkJyxcclxuICAgICAgICAgICAgICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5kZWxheV06ICcjZmY1ZTAwJyxcclxuICAgICAgICAgICAgICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5lYXJseV06ICcjMDBjMjNhJyxcclxuICAgICAgICAgICAgICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5kYXJrTWF0dGVyXTogJyMzM2JjZGInLFxyXG4gICAgICAgICAgICAgICAgICAgIFtFeHBlZGl0aW9uRXZlbnRUeXBlLnBpcmF0ZXNdOiAnI2ZmYjU5MicsXHJcbiAgICAgICAgICAgICAgICAgICAgW0V4cGVkaXRpb25FdmVudFR5cGUuYWxpZW5zXTogJyM5MmZmZGMnLFxyXG4gICAgICAgICAgICAgICAgICAgIFtFeHBlZGl0aW9uRXZlbnRUeXBlLmNvbWJhdF06ICcjZmZiNTkyJyxcclxuICAgICAgICAgICAgICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5pdGVtXTogJyM2ZjIzZTEnLFxyXG4gICAgICAgICAgICAgICAgICAgIFtFeHBlZGl0aW9uRXZlbnRUeXBlLnRyYWRlcl06ICcjZmJiYzA0JyxcclxuICAgICAgICAgICAgICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5sb3N0RmxlZXRdOiAnI2QxMTUxNScsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2l6ZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBbRXhwZWRpdGlvbkV2ZW50U2l6ZS5zbWFsbF06ICcjNDA0MDQwJyxcclxuICAgICAgICAgICAgICAgICAgICBbRXhwZWRpdGlvbkV2ZW50U2l6ZS5tZWRpdW1dOiAnIzNlODVmZScsXHJcbiAgICAgICAgICAgICAgICAgICAgW0V4cGVkaXRpb25FdmVudFNpemUubGFyZ2VdOiAnI2UwMWE3NicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2ZsZWQtZGVhdGgtc3Rhcic6ICcjZGRkZGRkJyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkZXBsZXRpb246IHtcclxuICAgICAgICAgICAgICAgICAgICBbRXhwZWRpdGlvbkRlcGxldGlvbkxldmVsLm5vbmVdOiAnIzAwYzIzYScsXHJcbiAgICAgICAgICAgICAgICAgICAgW0V4cGVkaXRpb25EZXBsZXRpb25MZXZlbC5sb3ddOiAnI2ZiYmMwNCcsXHJcbiAgICAgICAgICAgICAgICAgICAgW0V4cGVkaXRpb25EZXBsZXRpb25MZXZlbC5tZWRpdW1dOiAnI2ZmNWUwMCcsXHJcbiAgICAgICAgICAgICAgICAgICAgW0V4cGVkaXRpb25EZXBsZXRpb25MZXZlbC5oaWdoXTogJyNjNzI1MjUnLFxyXG4gICAgICAgICAgICAgICAgICAgIHVua25vd246ICcjNDA0MDQwJyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxpZmVmb3JtRGlzY292ZXJpZXM6IHtcclxuICAgICAgICAgICAgICAgIGV2ZW50czoge1xyXG4gICAgICAgICAgICAgICAgICAgIFtMaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZS5ub3RoaW5nXTogJyM0MDQwNDAnLFxyXG4gICAgICAgICAgICAgICAgICAgIFtMaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZS5sb3N0U2hpcF06ICcjZDExNTE1JyxcclxuICAgICAgICAgICAgICAgICAgICBbTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUua25vd25MaWZlZm9ybUZvdW5kXTogJyMzM2JjZGInLFxyXG4gICAgICAgICAgICAgICAgICAgIFtMaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZS5uZXdMaWZlZm9ybUZvdW5kXTogJyMwMGMyM2EnLFxyXG4gICAgICAgICAgICAgICAgICAgIFtMaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZS5hcnRpZmFjdHNdOiAnI2ZiYmMwNCcsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYXJ0aWZhY3RGaW5kaW5nU2l6ZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBbTGlmZWZvcm1EaXNjb3ZlcnlFdmVudEFydGlmYWN0RmluZGluZ1NpemUuc21hbGxdOiAnIzQwNDA0MCcsXHJcbiAgICAgICAgICAgICAgICAgICAgW0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRBcnRpZmFjdEZpbmRpbmdTaXplLm1lZGl1bV06ICcjM2U4NWZlJyxcclxuICAgICAgICAgICAgICAgICAgICBbTGlmZWZvcm1EaXNjb3ZlcnlFdmVudEFydGlmYWN0RmluZGluZ1NpemUubGFyZ2VdOiAnI2UwMWE3NicsXHJcbiAgICAgICAgICAgICAgICAgICAgW0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRBcnRpZmFjdEZpbmRpbmdTaXplLnN0b3JhZ2VGdWxsXTogJyNkMTE1MTUnLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGlmZWZvcm1zOiB7XHJcbiAgICAgICAgICAgICAgICBbTGlmZWZvcm1UeXBlLmh1bWFuc106ICcjN2VjMDAwJyxcclxuICAgICAgICAgICAgICAgIFtMaWZlZm9ybVR5cGUucm9ja3RhbF06ICcjZGY2NjQyJyxcclxuICAgICAgICAgICAgICAgIFtMaWZlZm9ybVR5cGUubWVjaGFzXTogJyM0YjkxZTcnLFxyXG4gICAgICAgICAgICAgICAgW0xpZmVmb3JtVHlwZS5rYWVsZXNoXTogJyM5ODYzZTknLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdW5pdmVyc2VIaXN0b3J5OiB7XHJcbiAgICAgICAgICAgIHVwZGF0ZVRpbWVzOiBbXHJcbiAgICAgICAgICAgICAgICAyMCAqIDYwICogNjAgKiAxMDAwLCAvLyAyMDowMFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgdHJhY2tIaXN0b3J5OiBmYWxzZSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbWJhdFRyYWNraW5nOiB7XHJcbiAgICAgICAgICAgIGlnbm9yZUVzcGlvbmFnZUZpZ2h0czogdHJ1ZSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1lc3NhZ2VUcmFja2luZzoge1xyXG4gICAgICAgICAgICBzaG93U2ltcGxpZmllZFJlc3VsdHM6IHRydWUsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZWJyaXNGaWVsZHM6IHtcclxuICAgICAgICAgICAgc2VwYXJhdGVFeHBlZGl0aW9uRGVicmlzRmllbGRzOiBmYWxzZSxcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxuXHJcbiAgICAkaTE4bi5sb2NhbGUgPSBvbGRMYW5nO1xyXG5cclxuICAgIHJldHVybiBkZWZhdWx0U2V0dGluZ3M7XHJcbn0iLCJpbXBvcnQgeyBfdGhyb3cgfSBmcm9tIFwiLi4vdXRpbHMvX3Rocm93XCI7XHJcbmltcG9ydCB7IExhbmd1YWdlS2V5IH0gZnJvbSBcIi4vTGFuZ3VhZ2VLZXlcIjtcclxuXHJcbi8qKiBtYXAgT0dhbWUgc2VydmVyIGxhbmd1YWdlIHRvIGludGVybmFsIGxhbmd1YWdlIGtleSAqL1xyXG5jb25zdCBsYW5ndWFnZU1hcDogUGFydGlhbDxSZWNvcmQ8c3RyaW5nLCBMYW5ndWFnZUtleT4+ID0ge1xyXG4gICAgYXI6IExhbmd1YWdlS2V5Wydlcy1hciddLFxyXG4gICAgYnI6IExhbmd1YWdlS2V5WydwdC1iciddLFxyXG4gICAgY3o6IExhbmd1YWdlS2V5LmNzLFxyXG4gICAgZGU6IExhbmd1YWdlS2V5LmRlLFxyXG4gICAgZGs6IExhbmd1YWdlS2V5LmRhLFxyXG4gICAgZW46IExhbmd1YWdlS2V5LmVuLFxyXG4gICAgZXM6IExhbmd1YWdlS2V5Wydlcy1lcyddLFxyXG4gICAgZnI6IExhbmd1YWdlS2V5LmZyLFxyXG4gICAgLy9UT0RPOiBmaSBmaW5uaXNoXHJcbiAgICBncjogTGFuZ3VhZ2VLZXkuZWwsXHJcbiAgICBocjogTGFuZ3VhZ2VLZXkuaHIsXHJcbiAgICBodTogTGFuZ3VhZ2VLZXkuaHUsXHJcbiAgICBpdDogTGFuZ3VhZ2VLZXkuaXQsXHJcbiAgICAvL1RPRE86IGpwIGphcGFuZXNlXHJcbiAgICBteDogTGFuZ3VhZ2VLZXlbJ2VzLW14J10sXHJcbiAgICBubDogTGFuZ3VhZ2VLZXkubmwsXHJcbiAgICBwbDogTGFuZ3VhZ2VLZXkucGwsXHJcbiAgICBwdDogTGFuZ3VhZ2VLZXlbJ3B0LXB0J10sXHJcbiAgICBybzogTGFuZ3VhZ2VLZXkucm8sXHJcbiAgICBydTogTGFuZ3VhZ2VLZXkucnUsXHJcbiAgICAvL1RPRE86IHNlIHN3ZWRpc2hcclxuICAgIHNpOiBMYW5ndWFnZUtleS5zbCxcclxuICAgIC8vVE9ETzogc2sgc2xvdmFraWFuXHJcbiAgICB0cjogTGFuZ3VhZ2VLZXkudHIsXHJcbiAgICB1czogTGFuZ3VhZ2VLZXkuZW4sXHJcbiAgICB0dzogTGFuZ3VhZ2VLZXlbJ3poLXR3J10sXHJcbiAgICAvL1RPRE8geXUgYm9zbmlhbiAod3RmIHdoeSBpcyBpdCBgeXVgIGZvciB5dWdvc2xhdmlhbj8pXHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGFuZ3VhZ2Uoc2VydmVyTGFuZ3VhZ2U6IHN0cmluZywgdGhyb3dJZlVuc3VwcG9ydGVkOiBib29sZWFuKTogTGFuZ3VhZ2VLZXk7XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRMYW5ndWFnZShzZXJ2ZXJMYW5ndWFnZTogc3RyaW5nKTogTGFuZ3VhZ2VLZXkgfCB1bmRlZmluZWQ7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGFuZ3VhZ2Uoc2VydmVyTGFuZ3VhZ2U6IHN0cmluZywgdGhyb3dJZlVuc3VwcG9ydGVkID0gZmFsc2UpOiBMYW5ndWFnZUtleSB8IHVuZGVmaW5lZCB7XHJcbiAgICBjb25zdCBsYW5nID0gbGFuZ3VhZ2VNYXBbc2VydmVyTGFuZ3VhZ2VdO1xyXG4gICAgaWYgKGxhbmcgPT0gbnVsbCAmJiB0aHJvd0lmVW5zdXBwb3J0ZWQpIHtcclxuICAgICAgICBfdGhyb3coYHVuc3VwcG9ydGVkIGxhbmd1YWdlICcke3NlcnZlckxhbmd1YWdlfSdgKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBsYW5nO1xyXG59IiwiZXhwb3J0IGVudW0gSGlnaHNjb3JlVHlwZSB7XHJcbiAgICB0b3RhbCA9IDAsXHJcbiAgICBlY29ub215ID0gMSxcclxuICAgIHJlc2VhcmNoID0gMixcclxuICAgIG1pbGl0YXJ5QW5kTnVtYmVyT2ZTaGlwcyA9IDMsXHJcbiAgICBtaWxpdGFyeUxvc3QgPSA0LFxyXG4gICAgbWlsaXRhcnlCdWlsdCA9IDUsXHJcbiAgICBtaWxpdGFyeURlc3Ryb3llZCA9IDYsXHJcbiAgICBob25vciA9IDcsXHJcblxyXG4gICAgbGlmZWZvcm0gPSA4LFxyXG4gICAgbGlmZWZvcm1FY29ub215ID0gOSxcclxuICAgIGxpZmVmb3JtVGVjaG5vbG9neSA9IDEwLFxyXG4gICAgbGlmZWZvcm1EaXNjb3ZlcmllcyA9IDExLFxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBIaWdoc2NvcmVUeXBlTmFtZSA9XHJcbiAgICAndG90YWwnIHwgJ2Vjb25vbXknIHwgJ3Jlc2VhcmNoJ1xyXG4gICAgfCAnbWlsaXRhcnknIHwgJ21pbGl0YXJ5QnVpbHQnIHwgJ21pbGl0YXJ5RGVzdHJveWVkJyB8ICdtaWxpdGFyeUxvc3QnXHJcbiAgICB8ICdob25vcicgfCAnbnVtYmVyT2ZTaGlwcydcclxuICAgIHwgJ2xpZmVmb3JtJyB8ICdsaWZlZm9ybUVjb25vbXknIHwgJ2xpZmVmb3JtVGVjaG5vbG9neScgfCAnbGlmZWZvcm1EaXNjb3Zlcmllcyc7XHJcblxyXG5leHBvcnQgY29uc3QgSGlnaHNjb3JlVHlwZU5hbWVzOiBIaWdoc2NvcmVUeXBlTmFtZVtdID0gW1xyXG4gICAgJ3RvdGFsJywgJ2Vjb25vbXknLCAncmVzZWFyY2gnLFxyXG4gICAgJ21pbGl0YXJ5JywgJ21pbGl0YXJ5QnVpbHQnLCAnbWlsaXRhcnlEZXN0cm95ZWQnLCAnbWlsaXRhcnlMb3N0JyxcclxuICAgICdob25vcicsICdudW1iZXJPZlNoaXBzJyxcclxuICAgICdsaWZlZm9ybScsICdsaWZlZm9ybUVjb25vbXknLCAnbGlmZWZvcm1UZWNobm9sb2d5JywgJ2xpZmVmb3JtRGlzY292ZXJpZXMnXHJcbl07IiwiZXhwb3J0IGVudW0gUGxhbmV0VHlwZSB7XHJcbiAgICBwbGFuZXQgPSAxLFxyXG4gICAgbW9vbiA9IDMsXHJcbiAgICBkZWJyaXNGaWVsZCA9IDIsXHJcbn0iLCJpbXBvcnQgeyBDb29yZGluYXRlcyB9IGZyb20gXCIuLi9tb2RlbHMvb2dhbWUvY29tbW9uL0Nvb3JkaW5hdGVzXCI7XHJcbmltcG9ydCB7IFBsYW5ldFR5cGUgfSBmcm9tIFwiLi4vbW9kZWxzL29nYW1lL2NvbW1vbi9QbGFuZXRUeXBlXCI7XHJcbmltcG9ydCB7IHBhcnNlSW50U2FmZSB9IGZyb20gXCIuL3BhcnNlTnVtYmVyc1wiO1xyXG5cclxuY29uc3QgY29vcmRzUmVnZXggPSAvXlxcWz8oPzxnYWxheHk+XFxkKyk6KD88c3lzdGVtPlxcZCspOig/PHBvc2l0aW9uPlxcZCspXFxdPyQvO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ29vcmRpbmF0ZXMoY29vcmRzOiBzdHJpbmcsIHR5cGUgPSBQbGFuZXRUeXBlLnBsYW5ldCk6IENvb3JkaW5hdGVzIHtcclxuICAgIGNvbnN0IG1hdGNoID0gY29vcmRzLm1hdGNoKGNvb3Jkc1JlZ2V4KTtcclxuXHJcbiAgICBpZiAobWF0Y2g/Lmdyb3VwcyA9PSBudWxsKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGNvb3JkaW5hdGVzICcke2Nvb3Jkc30nYCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBnYWxheHk6IHBhcnNlSW50U2FmZShtYXRjaC5ncm91cHMuZ2FsYXh5KSxcclxuICAgICAgICBzeXN0ZW06IHBhcnNlSW50U2FmZShtYXRjaC5ncm91cHMuc3lzdGVtKSxcclxuICAgICAgICBwb3NpdGlvbjogcGFyc2VJbnRTYWZlKG1hdGNoLmdyb3Vwcy5wb3NpdGlvbiksXHJcbiAgICAgICAgdHlwZSxcclxuICAgIH07XHJcbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBhZGREYXlzXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBkYXlzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRheXMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgZGF5cyB0byBiZSBhZGRlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IC0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIGRheXMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gLSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBZGQgMTAgZGF5cyB0byAxIFNlcHRlbWJlciAyMDE0OlxuICogY29uc3QgcmVzdWx0ID0gYWRkRGF5cyhuZXcgRGF0ZSgyMDE0LCA4LCAxKSwgMTApXG4gKiAvLz0+IFRodSBTZXAgMTEgMjAxNCAwMDowMDowMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZERheXMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG5cbiAgaWYgKGlzTmFOKGFtb3VudCkpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxuXG4gIGlmICghYW1vdW50KSB7XG4gICAgLy8gSWYgMCBkYXlzLCBuby1vcCB0byBhdm9pZCBjaGFuZ2luZyB0aW1lcyBpbiB0aGUgaG91ciBiZWZvcmUgZW5kIG9mIERTVFxuICAgIHJldHVybiBkYXRlO1xuICB9XG5cbiAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgYW1vdW50KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHsgYnJvYWRjYXN0TWVzc2FnZSB9IGZyb20gXCJAL3NoYXJlZC9jb21tdW5pY2F0aW9uL2Jyb2FkY2FzdE1lc3NhZ2VcIjtcclxuaW1wb3J0IHsgZ2V0U2VydmVyRGF0YWJhc2UsIGdldFVuaXZlcnNlSGlzdG9yeURhdGFiYXNlIH0gZnJvbSBcIkAvc2hhcmVkL2RiL2FjY2Vzc1wiO1xyXG5pbXBvcnQgeyBPZ2FtZVRyYWNrZXJVbml2ZXJzZUhpc3RvcnlEYlNjaGVtYSB9IGZyb20gXCJAL3NoYXJlZC9kYi9zY2hlbWFcIjtcclxuaW1wb3J0IHsgRGJVbml2ZXJzZUhpc3RvcnlBbGxpYW5jZVN0YXRlLCBEYlVuaXZlcnNlSGlzdG9yeUNvb3JkaW5hdGVzLCBEYlVuaXZlcnNlSGlzdG9yeVBsYW5ldE1vb25TdGF0ZSwgRGJVbml2ZXJzZUhpc3RvcnlQbGF5ZXJTdGF0ZSwgRGJVbml2ZXJzZUhpc3RvcnlQbGF5ZXJTdGF0ZUl0ZW0sIERiVW5pdmVyc2VIaXN0b3J5U2NvcmVUeXBlIH0gZnJvbSBcIkAvc2hhcmVkL2RiL3NjaGVtYS91bml2ZXJzZS1oaXN0b3J5XCI7XHJcbmltcG9ydCB7IE1lc3NhZ2VPZ2FtZU1ldGEgfSBmcm9tIFwiQC9zaGFyZWQvbWVzc2FnZXMvTWVzc2FnZVwiO1xyXG5pbXBvcnQgeyBNZXNzYWdlVHlwZSB9IGZyb20gXCJAL3NoYXJlZC9tZXNzYWdlcy9NZXNzYWdlVHlwZVwiO1xyXG5pbXBvcnQgeyBOb3RpZnlVbml2ZXJzZUhpc3RvcnlVcGRhdGVNZXNzYWdlIH0gZnJvbSBcIkAvc2hhcmVkL21lc3NhZ2VzL3RyYWNraW5nL3VuaXZlcnNlLWhpc3RvcnlcIjtcclxuaW1wb3J0IHsgQ29vcmRpbmF0ZXMgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL29nYW1lL2NvbW1vbi9Db29yZGluYXRlc1wiO1xyXG5pbXBvcnQgeyBIaWdoc2NvcmVUeXBlLCBIaWdoc2NvcmVUeXBlTmFtZXMgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL29nYW1lL2hpZ2hzY29yZVwiO1xyXG5pbXBvcnQgeyBwYXJzZUNvb3JkaW5hdGVzIH0gZnJvbSBcIkAvc2hhcmVkL3V0aWxzL3BhcnNlQ29vcmRpbmF0ZXNcIjtcclxuaW1wb3J0IHsgcGFyc2VJbnRTYWZlIH0gZnJvbSBcIkAvc2hhcmVkL3V0aWxzL3BhcnNlTnVtYmVyc1wiO1xyXG5pbXBvcnQgeyBfbG9nLCBfbG9nRGVidWcgfSBmcm9tIFwiQC9zaGFyZWQvdXRpbHMvX2xvZ1wiO1xyXG5pbXBvcnQgeyBfdGhyb3cgfSBmcm9tIFwiQC9zaGFyZWQvdXRpbHMvX3Rocm93XCI7XHJcbmltcG9ydCB7IHNlcnZpY2VXb3JrZXJVdWlkIH0gZnJvbSBcIkAvc2hhcmVkL3V1aWRcIjtcclxuaW1wb3J0IHsgYWRkRGF5cywgc3RhcnRPZkRheSB9IGZyb20gXCJkYXRlLWZuc1wiO1xyXG5pbXBvcnQgeyBYTUxQYXJzZXIgfSBmcm9tIFwiZmFzdC14bWwtcGFyc2VyXCI7XHJcbmltcG9ydCB7IElEQlBUcmFuc2FjdGlvbiwgU3RvcmVOYW1lcyB9IGZyb20gXCJpZGJcIjtcclxuaW1wb3J0IHsgc2V0dGluZ3NTZXJ2aWNlIH0gZnJvbSBcIi4uL21haW5cIjtcclxuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlXHJcbmRlY2xhcmUgbmFtZXNwYWNlIE9nYW1lQXBpIHtcclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgUmVzcG9uc2Uge1xyXG4gICAgICAgIHRpbWVzdGFtcDogc3RyaW5nO1xyXG4gICAgICAgIHNlcnZlcklkOiBzdHJpbmc7XHJcbiAgICB9XHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIFBsYXllcnNYbWwgZXh0ZW5kcyBSZXNwb25zZSB7XHJcbiAgICAgICAgcGxheWVyczogUGxheWVycztcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgUGxheWVycyB7XHJcbiAgICAgICAgcGxheWVyOiBQbGF5ZXJbXTtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgUGxheWVyIHtcclxuICAgICAgICBpZDogc3RyaW5nO1xyXG4gICAgICAgIG5hbWU6IHN0cmluZztcclxuICAgICAgICBzdGF0dXM/OiBzdHJpbmc7XHJcbiAgICAgICAgYWxsaWFuY2U/OiBzdHJpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBBbGxpYW5jZVhtbCBleHRlbmRzIFJlc3BvbnNlIHtcclxuICAgICAgICBhbGxpYW5jZXM6IEFsbGlhbmNlcztcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgQWxsaWFuY2VzIHtcclxuICAgICAgICBhbGxpYW5jZTogQWxsaWFuY2VbXTtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgQWxsaWFuY2Uge1xyXG4gICAgICAgIGlkOiBzdHJpbmc7XHJcbiAgICAgICAgdGFnOiBzdHJpbmc7XHJcbiAgICAgICAgbmFtZTogc3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgVW5pdmVyc2VYbWwgZXh0ZW5kcyBSZXNwb25zZSB7XHJcbiAgICAgICAgdW5pdmVyc2U6IFVuaXZlcnNlO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBVbml2ZXJzZSB7XHJcbiAgICAgICAgcGxhbmV0OiBQbGFuZXRbXTtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgUGxhbmV0IHtcclxuICAgICAgICBpZDogc3RyaW5nO1xyXG4gICAgICAgIG5hbWU6IHN0cmluZztcclxuICAgICAgICBwbGF5ZXI6IHN0cmluZztcclxuICAgICAgICBjb29yZHM6IHN0cmluZztcclxuICAgICAgICBtb29uPzogTW9vbjtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgTW9vbiB7XHJcbiAgICAgICAgaWQ6IHN0cmluZztcclxuICAgICAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICAgICAgc2l6ZTogc3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgSGlnaHNjb3JlWG1sIGV4dGVuZHMgUmVzcG9uc2Uge1xyXG4gICAgICAgIGhpZ2hzY29yZTogSGlnaHNjb3JlO1xyXG4gICAgfVxyXG4gICAgZXhwb3J0IGludGVyZmFjZSBIaWdoc2NvcmUge1xyXG4gICAgICAgIHBsYXllcjogUGxheWVyU2NvcmVbXTtcclxuICAgIH1cclxuICAgIGV4cG9ydCBpbnRlcmZhY2UgUGxheWVyU2NvcmUge1xyXG4gICAgICAgIGlkOiBzdHJpbmc7XHJcbiAgICAgICAgc2NvcmU6IHN0cmluZztcclxuICAgICAgICBwb3NpdGlvbjogc3RyaW5nO1xyXG4gICAgICAgIHNoaXBzPzogc3RyaW5nO1xyXG4gICAgfVxyXG59XHJcblxyXG5pbnRlcmZhY2UgUGxheWVyIHtcclxuICAgIGlkOiBudW1iZXI7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBzdGF0dXM6IHN0cmluZyB8IG51bGw7XHJcbiAgICBhbGxpYW5jZTogbnVtYmVyIHwgbnVsbDtcclxufVxyXG5cclxuaW50ZXJmYWNlIEFsbGlhbmNlIHtcclxuICAgIGlkOiBudW1iZXI7XHJcbiAgICB0YWc6IHN0cmluZztcclxuICAgIG5hbWU6IHN0cmluZztcclxufVxyXG5cclxuaW50ZXJmYWNlIFNjb3JlUG9zaXRpb24ge1xyXG4gICAgc2NvcmU6IG51bWJlcjtcclxuICAgIHBvc2l0aW9uOiBudW1iZXI7XHJcbn1cclxuXHJcbmludGVyZmFjZSBQbGF5ZXJTY29yZVBvc2l0aW9ucyB7XHJcbiAgICB0b3RhbDogU2NvcmVQb3NpdGlvbjtcclxuICAgIGVjb25vbXk6IFNjb3JlUG9zaXRpb247XHJcbiAgICByZXNlYXJjaDogU2NvcmVQb3NpdGlvbjtcclxuICAgIG1pbGl0YXJ5OiBTY29yZVBvc2l0aW9uO1xyXG4gICAgbWlsaXRhcnlCdWlsdDogU2NvcmVQb3NpdGlvbjtcclxuICAgIG1pbGl0YXJ5RGVzdHJveWVkOiBTY29yZVBvc2l0aW9uO1xyXG4gICAgbWlsaXRhcnlMb3N0OiBTY29yZVBvc2l0aW9uO1xyXG4gICAgaG9ub3I6IFNjb3JlUG9zaXRpb247XHJcbiAgICBudW1iZXJPZlNoaXBzOiBTY29yZVBvc2l0aW9uO1xyXG5cclxuICAgIC8vVE9ETzogcmVtb3ZlID8gd2hlbiBsaWZlZm9ybSBvbiBhbGwgc2VydmVyc1xyXG4gICAgbGlmZWZvcm0/OiBTY29yZVBvc2l0aW9uO1xyXG4gICAgbGlmZWZvcm1FY29ub215PzogU2NvcmVQb3NpdGlvbjtcclxuICAgIGxpZmVmb3JtVGVjaG5vbG9neT86IFNjb3JlUG9zaXRpb247XHJcbiAgICBsaWZlZm9ybURpc2NvdmVyaWVzPzogU2NvcmVQb3NpdGlvbjtcclxufVxyXG5cclxuaW50ZXJmYWNlIFBsYW5ldCB7XHJcbiAgICBpZDogbnVtYmVyO1xyXG4gICAgcGxheWVyOiBudW1iZXI7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBjb29yZGluYXRlczogQ29vcmRpbmF0ZXM7XHJcbiAgICBtb29uPzogTW9vbjtcclxufVxyXG5cclxuaW50ZXJmYWNlIE1vb24ge1xyXG4gICAgaWQ6IG51bWJlcjtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIHNpemU6IG51bWJlcjtcclxuICAgIHBsYW5ldElkOiBudW1iZXI7XHJcbn1cclxuXHJcblxyXG50eXBlIFVuaXZlcnNlSGlzdG9yeURiU3RvcmVOYW1lID0gU3RvcmVOYW1lczxPZ2FtZVRyYWNrZXJVbml2ZXJzZUhpc3RvcnlEYlNjaGVtYT47XHJcbnR5cGUgVW5pdmVyc2VIaXN0b3J5RGJUcmFuc2FjdGlvbiA9IElEQlBUcmFuc2FjdGlvbjxPZ2FtZVRyYWNrZXJVbml2ZXJzZUhpc3RvcnlEYlNjaGVtYSwgU3RvcmVOYW1lczxPZ2FtZVRyYWNrZXJVbml2ZXJzZUhpc3RvcnlEYlNjaGVtYT5bXSwgJ3JlYWR3cml0ZSc+O1xyXG5cclxuZXhwb3J0IGNsYXNzIFVuaXZlcnNlSGlzdG9yeU1vZHVsZSB7XHJcbiAgICBwcml2YXRlIHVwZGF0ZVRpbWVzOiBudW1iZXJbXSA9IFtdO1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGFyc2VyID0gbmV3IFhNTFBhcnNlcih7XHJcbiAgICAgICAgYXR0cmlidXRlTmFtZVByZWZpeDogJycsXHJcbiAgICAgICAgaWdub3JlQXR0cmlidXRlczogZmFsc2UsXHJcbiAgICAgICAgcGFyc2VBdHRyaWJ1dGVWYWx1ZTogZmFsc2UsXHJcbiAgICB9KTtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IG1ldGE6IE1lc3NhZ2VPZ2FtZU1ldGE7XHJcbiAgICBwcml2YXRlIHRpbWVvdXQ6IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcclxuICAgIHByaXZhdGUgaW5VcGRhdGUgPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIGdldCBzZXR0aW5ncygpIHtcclxuICAgICAgICByZXR1cm4gc2V0dGluZ3NTZXJ2aWNlLnNldHRpbmdzLnVuaXZlcnNlSGlzdG9yeTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihtZXRhOiBNZXNzYWdlT2dhbWVNZXRhKSB7XHJcbiAgICAgICAgdGhpcy5tZXRhID0gbWV0YTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgaW5pdCgpIHtcclxuICAgICAgICBhd2FpdCBzZXR0aW5nc1NlcnZpY2UucmVhZHk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5pbml0U2V0dGluZ3MoKTtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmVuYWJsZWQpIHtcclxuICAgICAgICAgICAgX2xvZ0RlYnVnKCd1bml2ZXJzZSBoaXN0b3J5IHRyYWNraW5nIGlzIGRpc2FibGVkJyk7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLmluaXRUcmFja2luZygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgaW5pdFNldHRpbmdzKCkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlVGltZXMgPSBbLi4udGhpcy5zZXR0aW5ncy51cGRhdGVUaW1lc10uc29ydCgoYSwgYikgPT4gYSAtIGIpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgaW5pdFRyYWNraW5nKCkge1xyXG4gICAgICAgIGNvbnN0IGRiID0gYXdhaXQgZ2V0VW5pdmVyc2VIaXN0b3J5RGF0YWJhc2UodGhpcy5tZXRhKTtcclxuICAgICAgICBjb25zdCBsYXN0VXBkYXRlID0gKGF3YWl0IGRiLmdldCgnX2xhc3RVcGRhdGUnLCAwKSkgPz8gMDtcclxuICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIGNvbnN0IG5leHRVcGRhdGVzOiBudW1iZXJbXSA9IFtdO1xyXG4gICAgICAgIGlmIChsYXN0VXBkYXRlID09IDApIHtcclxuICAgICAgICAgICAgbmV4dFVwZGF0ZXMucHVzaChub3cpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCBkYXkgPSBzdGFydE9mRGF5KGxhc3RVcGRhdGUpLmdldFRpbWUoKTtcclxuICAgICAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgICAgICB3aGlsZSAobmV4dFVwZGF0ZXMubGVuZ3RoID09IDAgfHwgbmV4dFVwZGF0ZXNbbmV4dFVwZGF0ZXMubGVuZ3RoIC0gMV0gPCBub3cpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZVRpbWUgPSBkYXkgKyB0aGlzLnVwZGF0ZVRpbWVzW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHVwZGF0ZVRpbWUgPiBsYXN0VXBkYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dFVwZGF0ZXMucHVzaCh1cGRhdGVUaW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA+PSB0aGlzLnVwZGF0ZVRpbWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGRheSA9IGFkZERheXMoZGF5LCAxKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG5leHRVcGRhdGUgPSBuZXh0VXBkYXRlcy5sZW5ndGggPT0gMVxyXG4gICAgICAgICAgICA/IG5leHRVcGRhdGVzWzBdXHJcbiAgICAgICAgICAgIDogbmV4dFVwZGF0ZXMuZmluZCgoXywgaSkgPT4gbmV4dFVwZGF0ZXNbaSArIDFdID49IG5vdykgPz8gX3Rocm93KCdmYWlsZWQgdG8gZmluZCBuZXh0IHVwZGF0ZSB0aW1lIGZvciB1bml2ZXJzZSBoaXN0b3J5Jyk7XHJcbiAgICAgICAgY29uc3QgdGltZUxlZnQgPSBNYXRoLm1heCgwLCBuZXh0VXBkYXRlIC0gbm93KTtcclxuICAgICAgICBfbG9nRGVidWcoYG5leHQgdW5pdmVyc2UgaGlzdG9yeSB0cmFja2luZyBpbiAke3RpbWVMZWZ0fSBtcyAoJHtuZXcgRGF0ZShEYXRlLm5vdygpICsgdGltZUxlZnQpfSkgZm9yIHVuaXZlcnNlICR7dGhpcy5tZXRhLnNlcnZlcklkfSAke3RoaXMubWV0YS5sYW5ndWFnZS50b1VwcGVyQ2FzZSgpfWApO1xyXG5cclxuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcclxuICAgICAgICB0aGlzLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGFzeW5jICgpID0+IGF3YWl0IHRoaXMudHJhY2tVbml2ZXJzZVVwZGF0ZXMoKSwgdGltZUxlZnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgdHJhY2tVbml2ZXJzZVVwZGF0ZXMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5VcGRhdGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5pblVwZGF0ZSA9IHRydWU7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgX2xvZ0RlYnVnKGB0cmFja2luZyB1bml2ZXJzZSBoaXN0b3J5IGZvciB1bml2ZXJzZSAke3RoaXMubWV0YS5zZXJ2ZXJJZH0gJHt0aGlzLm1ldGEubGFuZ3VhZ2UudG9VcHBlckNhc2UoKX1gKTtcclxuICAgICAgICAgICAgY29uc3QgcGxheWVycyA9IGF3YWl0IHRoaXMuZ2V0UGxheWVycygpO1xyXG4gICAgICAgICAgICBjb25zdCBhbGxpYW5jZXMgPSBhd2FpdCB0aGlzLmdldEFsbGlhbmNlcygpO1xyXG4gICAgICAgICAgICBjb25zdCBwbGF5ZXJTY29yZXMgPSBhd2FpdCB0aGlzLmdldEFsbFBsYXllclNjb3JlcygpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcGxhbmV0cyA9IHRoaXMuc2V0dGluZ3MudHJhY2tIaXN0b3J5ID8gYXdhaXQgdGhpcy5nZXRQbGFuZXRzKCkgOiBbXTtcclxuXHJcbiAgICAgICAgICAgIF9sb2dEZWJ1ZygnbG9hZGVkIGN1cnJlbnQgc3RhdGVzLCB1cGRhdGluZyBpbiBkYiAodGhpcyBtYXkgdGFrZSBhIHdoaWxlKScpO1xyXG4gICAgICAgICAgICBjb25zdCBkYiA9IGF3YWl0IGdldFVuaXZlcnNlSGlzdG9yeURhdGFiYXNlKHRoaXMubWV0YSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGFsbFN0b3JlTmFtZXM6IFVuaXZlcnNlSGlzdG9yeURiU3RvcmVOYW1lW10gPSBbXHJcbiAgICAgICAgICAgICAgICAnX2xhc3RVcGRhdGUnLFxyXG5cclxuICAgICAgICAgICAgICAgICdwbGF5ZXJzJyxcclxuICAgICAgICAgICAgICAgICdwbGF5ZXJOYW1lcycsXHJcbiAgICAgICAgICAgICAgICAncGxheWVyQWxsaWFuY2VzJyxcclxuICAgICAgICAgICAgICAgICdwbGF5ZXJTdGF0ZXMnLFxyXG4gICAgICAgICAgICAgICAgJ3BsYXllclNjb3JlcycsXHJcblxyXG4gICAgICAgICAgICAgICAgJ3BsYW5ldHMnLFxyXG4gICAgICAgICAgICAgICAgJ3BsYW5ldE5hbWVzJyxcclxuICAgICAgICAgICAgICAgICdwbGFuZXRTdGF0ZXMnLFxyXG4gICAgICAgICAgICAgICAgJ3BsYW5ldENvb3JkaW5hdGVzJyxcclxuXHJcbiAgICAgICAgICAgICAgICAnbW9vbnMnLFxyXG4gICAgICAgICAgICAgICAgJ21vb25OYW1lcycsXHJcbiAgICAgICAgICAgICAgICAnbW9vblN0YXRlcycsXHJcblxyXG4gICAgICAgICAgICAgICAgJ2FsbGlhbmNlcycsXHJcbiAgICAgICAgICAgICAgICAnYWxsaWFuY2VUYWdzJyxcclxuICAgICAgICAgICAgICAgICdhbGxpYW5jZU5hbWVzJyxcclxuICAgICAgICAgICAgICAgICdhbGxpYW5jZU1lbWJlcnMnLFxyXG4gICAgICAgICAgICAgICAgJ2FsbGlhbmNlU3RhdGVzJyxcclxuICAgICAgICAgICAgICAgICdhbGxpYW5jZVNjb3JlcycsXHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIGNvbnN0IHR4OiBVbml2ZXJzZUhpc3RvcnlEYlRyYW5zYWN0aW9uID0gZGIudHJhbnNhY3Rpb24oYWxsU3RvcmVOYW1lcywgJ3JlYWR3cml0ZScpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZUhpc3RvcnkodHgsIHBsYXllcnMsIGFsbGlhbmNlcywgcGxheWVyU2NvcmVzLCBwbGFuZXRzKTtcclxuICAgICAgICAgICAgYXdhaXQgdHguZG9uZTtcclxuICAgICAgICAgICAgX2xvZ0RlYnVnKCd1cGRhdGVkIHVuaXZlcnNlIGhpc3RvcnknKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbk1lc3NhZ2U6IE5vdGlmeVVuaXZlcnNlSGlzdG9yeVVwZGF0ZU1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICBvZ2FtZU1ldGE6IHRoaXMubWV0YSxcclxuICAgICAgICAgICAgICAgIHNlbmRlclV1aWQ6IHNlcnZpY2VXb3JrZXJVdWlkLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogTWVzc2FnZVR5cGUuTm90aWZ5VW5pdmVyc2VIaXN0b3J5VXBkYXRlLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBhd2FpdCBicm9hZGNhc3RNZXNzYWdlKG5vdGlmaWNhdGlvbk1lc3NhZ2UpO1xyXG5cclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5pbml0VHJhY2tpbmcoKTtcclxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGFzeW5jICgpID0+IGF3YWl0IHRoaXMuaW5pdFRyYWNraW5nKCksIDEwMDAgKiA2MCAqIDUpOyAvLyB0cnkgaW4gNW1pbiBhZ2FpbiBvbiBlcnJvclxyXG4gICAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5VcGRhdGUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyB1cGRhdGVIaXN0b3J5KHR4OiBVbml2ZXJzZUhpc3RvcnlEYlRyYW5zYWN0aW9uLCBwbGF5ZXJzOiBQbGF5ZXJbXSwgYWxsaWFuY2VzOiBBbGxpYW5jZVtdLCBwbGF5ZXJTY29yZXM6IFBhcnRpYWw8UmVjb3JkPG51bWJlciwgUGxheWVyU2NvcmVQb3NpdGlvbnM+PiwgcGxhbmV0czogUGxhbmV0W10pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZVBsYXllcnModHgsIHBsYXllcnMsIG5vdywgcGxheWVyU2NvcmVzKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZUFsbGlhbmNlcyh0eCwgYWxsaWFuY2VzLCBub3csIHBsYXllcnMsIHBsYXllclNjb3Jlcyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnRyYWNrSGlzdG9yeSkge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZVBsYW5ldHModHgsIHBsYW5ldHMsIG5vdyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhd2FpdCB0eC5vYmplY3RTdG9yZSgnX2xhc3RVcGRhdGUnKS5wdXQobm93LCAwKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIHVwZGF0ZUFsbGlhbmNlcyh0eDogVW5pdmVyc2VIaXN0b3J5RGJUcmFuc2FjdGlvbiwgYWxsaWFuY2VzOiBBbGxpYW5jZVtdLCBub3c6IG51bWJlciwgcGxheWVyczogUGxheWVyW10sIHBsYXllclNjb3JlczogUGFydGlhbDxSZWNvcmQ8bnVtYmVyLCBQbGF5ZXJTY29yZVBvc2l0aW9ucz4+KSB7XHJcbiAgICAgICAgX2xvZ0RlYnVnKCd1cGRhdGluZyBhbGxpYW5jZSBoaXN0b3J5Jyk7XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMudXBkYXRlS25vd25BbGxpYW5jZXModHgsIGFsbGlhbmNlcyk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVBbGxpYW5jZVRhZ3ModHgsIGFsbGlhbmNlcywgbm93LCAhdGhpcy5zZXR0aW5ncy50cmFja0hpc3RvcnkpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMudXBkYXRlQWxsaWFuY2VOYW1lcyh0eCwgYWxsaWFuY2VzLCBub3csICF0aGlzLnNldHRpbmdzLnRyYWNrSGlzdG9yeSk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVBbGxpYW5jZVNjb3Jlcyh0eCwgYWxsaWFuY2VzLCBwbGF5ZXJzLCBwbGF5ZXJTY29yZXMsIG5vdyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnRyYWNrSGlzdG9yeSkge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZUFsbGlhbmNlTWVtYmVycyh0eCwgYWxsaWFuY2VzLCBwbGF5ZXJzLCBub3cpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZUFsbGlhbmNlU3RhdGVzKHR4LCBhbGxpYW5jZXMsIG5vdyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgdXBkYXRlS25vd25BbGxpYW5jZXModHg6IFVuaXZlcnNlSGlzdG9yeURiVHJhbnNhY3Rpb24sIGFsbGlhbmNlczogQWxsaWFuY2VbXSkge1xyXG4gICAgICAgIGZvciAoY29uc3QgYWxseSBvZiBhbGxpYW5jZXMpIHtcclxuICAgICAgICAgICAgYXdhaXQgdHgub2JqZWN0U3RvcmUoJ2FsbGlhbmNlcycpLnB1dCh7IGlkOiBhbGx5LmlkIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIHVwZGF0ZUFsbGlhbmNlVGFncyh0eDogVW5pdmVyc2VIaXN0b3J5RGJUcmFuc2FjdGlvbiwgYWxsaWFuY2VzOiBBbGxpYW5jZVtdLCBub3c6IG51bWJlciwgcmVwbGFjZSA9IGZhbHNlKSB7XHJcbiAgICAgICAgY29uc3QgbGFzdFRhZ3M6IFBhcnRpYWw8UmVjb3JkPG51bWJlciwgc3RyaW5nPj4gPSB7fTtcclxuICAgICAgICBjb25zdCBsYXN0VGFnVXBkYXRlczogUGFydGlhbDxSZWNvcmQ8bnVtYmVyLCBudW1iZXI+PiA9IHt9O1xyXG5cclxuICAgICAgICBjb25zdCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdhbGxpYW5jZVRhZ3MnKTtcclxuICAgICAgICBpZiAocmVwbGFjZSkge1xyXG4gICAgICAgICAgICBhd2FpdCBzdG9yZS5jbGVhcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IGN1cnNvciA9IGF3YWl0IHN0b3JlLm9wZW5DdXJzb3IoKTtcclxuICAgICAgICAgICAgd2hpbGUgKGN1cnNvciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkYlZhbHVlID0gY3Vyc29yLnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzTmV3ZXIgPSAobGFzdFRhZ1VwZGF0ZXNbZGJWYWx1ZS5hbGxpYW5jZUlkXSA/PyAtMSkgPCBkYlZhbHVlLmRhdGU7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNOZXdlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RUYWdVcGRhdGVzW2RiVmFsdWUuYWxsaWFuY2VJZF0gPSBkYlZhbHVlLmRhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdFRhZ3NbZGJWYWx1ZS5hbGxpYW5jZUlkXSA9IGRiVmFsdWUudGFnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGN1cnNvciA9IGF3YWl0IGN1cnNvci5jb250aW51ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGFsbHkgb2YgYWxsaWFuY2VzKSB7XHJcbiAgICAgICAgICAgIGlmIChhbGx5LnRhZyA9PSBsYXN0VGFnc1thbGx5LmlkXSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGF3YWl0IHN0b3JlLnB1dCh7XHJcbiAgICAgICAgICAgICAgICBhbGxpYW5jZUlkOiBhbGx5LmlkLFxyXG4gICAgICAgICAgICAgICAgZGF0ZTogbm93LFxyXG4gICAgICAgICAgICAgICAgdGFnOiBhbGx5LnRhZyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgdXBkYXRlQWxsaWFuY2VOYW1lcyh0eDogVW5pdmVyc2VIaXN0b3J5RGJUcmFuc2FjdGlvbiwgYWxsaWFuY2VzOiBBbGxpYW5jZVtdLCBub3c6IG51bWJlciwgcmVwbGFjZSA9IGZhbHNlKSB7XHJcbiAgICAgICAgY29uc3QgbGFzdE5hbWVzOiBQYXJ0aWFsPFJlY29yZDxudW1iZXIsIHN0cmluZz4+ID0ge307XHJcbiAgICAgICAgY29uc3QgbGFzdE5hbWVVcGRhdGVzOiBQYXJ0aWFsPFJlY29yZDxudW1iZXIsIG51bWJlcj4+ID0ge307XHJcblxyXG4gICAgICAgIGNvbnN0IHN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ2FsbGlhbmNlTmFtZXMnKTtcclxuICAgICAgICBpZiAocmVwbGFjZSkge1xyXG4gICAgICAgICAgICBhd2FpdCBzdG9yZS5jbGVhcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IGN1cnNvciA9IGF3YWl0IHN0b3JlLm9wZW5DdXJzb3IoKTtcclxuICAgICAgICAgICAgd2hpbGUgKGN1cnNvciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkYlZhbHVlID0gY3Vyc29yLnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzTmV3ZXIgPSAobGFzdE5hbWVVcGRhdGVzW2RiVmFsdWUuYWxsaWFuY2VJZF0gPz8gLTEpIDwgZGJWYWx1ZS5kYXRlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzTmV3ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsYXN0TmFtZVVwZGF0ZXNbZGJWYWx1ZS5hbGxpYW5jZUlkXSA9IGRiVmFsdWUuZGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICBsYXN0TmFtZXNbZGJWYWx1ZS5hbGxpYW5jZUlkXSA9IGRiVmFsdWUubmFtZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjdXJzb3IgPSBhd2FpdCBjdXJzb3IuY29udGludWUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBhbGx5IG9mIGFsbGlhbmNlcykge1xyXG4gICAgICAgICAgICBpZiAoYWxseS5uYW1lID09IGxhc3ROYW1lc1thbGx5LmlkXSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGF3YWl0IHN0b3JlLnB1dCh7XHJcbiAgICAgICAgICAgICAgICBhbGxpYW5jZUlkOiBhbGx5LmlkLFxyXG4gICAgICAgICAgICAgICAgZGF0ZTogbm93LFxyXG4gICAgICAgICAgICAgICAgbmFtZTogYWxseS5uYW1lLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyB1cGRhdGVBbGxpYW5jZU1lbWJlcnModHg6IFVuaXZlcnNlSGlzdG9yeURiVHJhbnNhY3Rpb24sIGFsbGlhbmNlczogQWxsaWFuY2VbXSwgcGxheWVyczogUGxheWVyW10sIG5vdzogbnVtYmVyKSB7XHJcbiAgICAgICAgY29uc3QgbGFzdE1lbWJlcnM6IFBhcnRpYWw8UmVjb3JkPG51bWJlciwgbnVtYmVyW10+PiA9IHt9O1xyXG4gICAgICAgIGNvbnN0IGxhc3RNZW1iZXJVcGRhdGVzOiBQYXJ0aWFsPFJlY29yZDxudW1iZXIsIG51bWJlcj4+ID0ge307XHJcblxyXG4gICAgICAgIGNvbnN0IHN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ2FsbGlhbmNlTWVtYmVycycpO1xyXG4gICAgICAgIGxldCBjdXJzb3IgPSBhd2FpdCBzdG9yZS5vcGVuQ3Vyc29yKCk7XHJcbiAgICAgICAgd2hpbGUgKGN1cnNvciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRiVmFsdWUgPSBjdXJzb3IudmFsdWU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBpc05ld2VyID0gKGxhc3RNZW1iZXJVcGRhdGVzW2RiVmFsdWUuYWxsaWFuY2VJZF0gPz8gLTEpIDwgZGJWYWx1ZS5kYXRlO1xyXG4gICAgICAgICAgICBpZiAoaXNOZXdlcikge1xyXG4gICAgICAgICAgICAgICAgbGFzdE1lbWJlclVwZGF0ZXNbZGJWYWx1ZS5hbGxpYW5jZUlkXSA9IGRiVmFsdWUuZGF0ZTtcclxuICAgICAgICAgICAgICAgIGxhc3RNZW1iZXJzW2RiVmFsdWUuYWxsaWFuY2VJZF0gPSBkYlZhbHVlLm1lbWJlcnM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGN1cnNvciA9IGF3YWl0IGN1cnNvci5jb250aW51ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBhbGx5IG9mIGFsbGlhbmNlcykge1xyXG4gICAgICAgICAgICBjb25zdCBtZW1iZXJzID0gcGxheWVycy5maWx0ZXIocCA9PiBwLmFsbGlhbmNlID09IGFsbHkuaWQpLm1hcChwID0+IHAuaWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuYXJyYXlzRXF1YWwobWVtYmVycywgbGFzdE1lbWJlcnNbYWxseS5pZF0gPz8gW10pKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYXdhaXQgc3RvcmUucHV0KHtcclxuICAgICAgICAgICAgICAgIGFsbGlhbmNlSWQ6IGFsbHkuaWQsXHJcbiAgICAgICAgICAgICAgICBkYXRlOiBub3csXHJcbiAgICAgICAgICAgICAgICBtZW1iZXJzLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyB1cGRhdGVBbGxpYW5jZVN0YXRlcyh0eDogVW5pdmVyc2VIaXN0b3J5RGJUcmFuc2FjdGlvbiwgYWxsaWFuY2VzOiBBbGxpYW5jZVtdLCBub3c6IG51bWJlcikge1xyXG4gICAgICAgIGNvbnN0IGxhc3RTdGF0ZXM6IFBhcnRpYWw8UmVjb3JkPG51bWJlciwgRGJVbml2ZXJzZUhpc3RvcnlBbGxpYW5jZVN0YXRlPj4gPSB7fTtcclxuICAgICAgICBjb25zdCBsYXN0U3RhdGVVcGRhdGVzOiBQYXJ0aWFsPFJlY29yZDxudW1iZXIsIG51bWJlcj4+ID0ge307XHJcblxyXG4gICAgICAgIGNvbnN0IHN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ2FsbGlhbmNlU3RhdGVzJyk7XHJcbiAgICAgICAgbGV0IGN1cnNvciA9IGF3YWl0IHN0b3JlLm9wZW5DdXJzb3IoKTtcclxuICAgICAgICB3aGlsZSAoY3Vyc29yICE9IG51bGwpIHtcclxuICAgICAgICAgICAgY29uc3QgZGJWYWx1ZSA9IGN1cnNvci52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGlzTmV3ZXIgPSAobGFzdFN0YXRlVXBkYXRlc1tkYlZhbHVlLmFsbGlhbmNlSWRdID8/IC0xKSA8IGRiVmFsdWUuZGF0ZTtcclxuICAgICAgICAgICAgaWYgKGlzTmV3ZXIpIHtcclxuICAgICAgICAgICAgICAgIGxhc3RTdGF0ZVVwZGF0ZXNbZGJWYWx1ZS5hbGxpYW5jZUlkXSA9IGRiVmFsdWUuZGF0ZTtcclxuICAgICAgICAgICAgICAgIGxhc3RTdGF0ZXNbZGJWYWx1ZS5hbGxpYW5jZUlkXSA9IGRiVmFsdWUuc3RhdGU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGN1cnNvciA9IGF3YWl0IGN1cnNvci5jb250aW51ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBhbGx5IG9mIGFsbGlhbmNlcykge1xyXG4gICAgICAgICAgICBpZiAoYWxseS5pZCBpbiBsYXN0U3RhdGVzICYmIGxhc3RTdGF0ZXNbYWxseS5pZF0gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGF3YWl0IHN0b3JlLnB1dCh7XHJcbiAgICAgICAgICAgICAgICBhbGxpYW5jZUlkOiBhbGx5LmlkLFxyXG4gICAgICAgICAgICAgICAgZGF0ZTogbm93LFxyXG4gICAgICAgICAgICAgICAgc3RhdGU6IG51bGwsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgYWxseUlkcyA9IGFsbGlhbmNlcy5tYXAoYSA9PiBhLmlkKTtcclxuICAgICAgICBjb25zdCBkZWxldGVkQWxsaWVzID0gT2JqZWN0LmtleXMobGFzdFN0YXRlcylcclxuICAgICAgICAgICAgLm1hcChpZCA9PiBwYXJzZUludFNhZmUoaWQsIDEwKSlcclxuICAgICAgICAgICAgLmZpbHRlcihpZCA9PiAhYWxseUlkcy5pbmNsdWRlcyhpZCkpO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGFsbHlJZCBvZiBkZWxldGVkQWxsaWVzKSB7XHJcbiAgICAgICAgICAgIGlmIChsYXN0U3RhdGVzW2FsbHlJZF0gPT0gJ2RlbGV0ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYXdhaXQgc3RvcmUucHV0KHtcclxuICAgICAgICAgICAgICAgIGFsbGlhbmNlSWQ6IGFsbHlJZCxcclxuICAgICAgICAgICAgICAgIGRhdGU6IG5vdyxcclxuICAgICAgICAgICAgICAgIHN0YXRlOiAnZGVsZXRlZCcsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIHVwZGF0ZUFsbGlhbmNlU2NvcmVzKHR4OiBVbml2ZXJzZUhpc3RvcnlEYlRyYW5zYWN0aW9uLCBhbGxpYW5jZXM6IEFsbGlhbmNlW10sIHBsYXllcnM6IFBsYXllcltdLCBwbGF5ZXJTY29yZXM6IFBhcnRpYWw8UmVjb3JkPG51bWJlciwgUGxheWVyU2NvcmVQb3NpdGlvbnM+Piwgbm93OiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCBsYXN0U2NvcmVzOiBQYXJ0aWFsPFJlY29yZDxgJHtudW1iZXJ9LiR7RGJVbml2ZXJzZUhpc3RvcnlTY29yZVR5cGV9YCwgU2NvcmVQb3NpdGlvbj4+ID0ge307XHJcbiAgICAgICAgY29uc3QgbGFzdFNjb3JlVXBkYXRlczogUGFydGlhbDxSZWNvcmQ8YCR7bnVtYmVyfS4ke0RiVW5pdmVyc2VIaXN0b3J5U2NvcmVUeXBlfWAsIG51bWJlcj4+ID0ge307XHJcblxyXG4gICAgICAgIGNvbnN0IHN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ2FsbGlhbmNlU2NvcmVzJyk7XHJcbiAgICAgICAgbGV0IGN1cnNvciA9IGF3YWl0IHN0b3JlLm9wZW5DdXJzb3IoKTtcclxuICAgICAgICB3aGlsZSAoY3Vyc29yICE9IG51bGwpIHtcclxuICAgICAgICAgICAgY29uc3QgZGJWYWx1ZSA9IGN1cnNvci52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGtleTogYCR7bnVtYmVyfS4ke0RiVW5pdmVyc2VIaXN0b3J5U2NvcmVUeXBlfWAgPSBgJHtkYlZhbHVlLmFsbGlhbmNlSWR9LiR7ZGJWYWx1ZS50eXBlfWA7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzTmV3ZXIgPSAobGFzdFNjb3JlVXBkYXRlc1trZXldID8/IC0xKSA8IGRiVmFsdWUuZGF0ZTtcclxuICAgICAgICAgICAgaWYgKGlzTmV3ZXIpIHtcclxuICAgICAgICAgICAgICAgIGxhc3RTY29yZVVwZGF0ZXNba2V5XSA9IGRiVmFsdWUuZGF0ZTtcclxuICAgICAgICAgICAgICAgIGxhc3RTY29yZXNba2V5XSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBzY29yZTogZGJWYWx1ZS5zY29yZSxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogZGJWYWx1ZS5wb3NpdGlvbixcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGN1cnNvciA9IGF3YWl0IGN1cnNvci5jb250aW51ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc2NvcmVUeXBlcyA9IEhpZ2hzY29yZVR5cGVOYW1lcztcclxuICAgICAgICBjb25zdCBzY29yZXNCeVR5cGUgPSB7fSBhcyBSZWNvcmQ8RGJVbml2ZXJzZUhpc3RvcnlTY29yZVR5cGUsIFBhcnRpYWw8UmVjb3JkPG51bWJlciwgbnVtYmVyPj4+O1xyXG4gICAgICAgIHNjb3JlVHlwZXMuZm9yRWFjaCh0eXBlID0+IHNjb3Jlc0J5VHlwZVt0eXBlXSA9IHt9KTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBhbGx5IG9mIGFsbGlhbmNlcykge1xyXG4gICAgICAgICAgICBjb25zdCBtZW1iZXJTY29yZXMgPSBwbGF5ZXJzLmZpbHRlcihwID0+IHAuYWxsaWFuY2UgPT0gYWxseS5pZCkubWFwKHAgPT4gcGxheWVyU2NvcmVzW3AuaWRdKTtcclxuXHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc2NvcmVUeXBlIG9mIHNjb3JlVHlwZXMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNjb3Jlc0J5QWxseSA9IHNjb3Jlc0J5VHlwZVtzY29yZVR5cGVdO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHNjb3JlID0gbWVtYmVyU2NvcmVzXHJcbiAgICAgICAgICAgICAgICAgICAgLm1hcChzID0+IHM/LltzY29yZVR5cGVdPy5zY29yZSA/PyAwKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZWR1Y2UoKHRvdGFsLCBzY29yZSkgPT4gdG90YWwgKyBzY29yZSwgMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2NvcmVzQnlBbGx5W2FsbHkuaWRdID0gc2NvcmU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHNvcnRlZFNjb3Jlc0J5VHlwZSA9IHt9IGFzIFJlY29yZDxEYlVuaXZlcnNlSGlzdG9yeVNjb3JlVHlwZSwgbnVtYmVyW10+O1xyXG4gICAgICAgIHNjb3JlVHlwZXMuZm9yRWFjaCh0eXBlID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYWxseVNjb3JlcyA9IHNjb3Jlc0J5VHlwZVt0eXBlXTtcclxuICAgICAgICAgICAgY29uc3Qgc29ydGVkU2NvcmVzID0gWy4uLm5ldyBTZXQ8bnVtYmVyPihcclxuICAgICAgICAgICAgICAgIE9iamVjdC52YWx1ZXMoYWxseVNjb3JlcykuZmlsdGVyKHNjb3JlID0+IHNjb3JlICE9IG51bGwpIGFzIG51bWJlcltdXHJcbiAgICAgICAgICAgICldLnNvcnQoKGEsIGIpID0+IGIgLSBhKTtcclxuXHJcbiAgICAgICAgICAgIHNvcnRlZFNjb3Jlc0J5VHlwZVt0eXBlXSA9IHNvcnRlZFNjb3JlcztcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBhbGx5IG9mIGFsbGlhbmNlcykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHR5cGUgb2Ygc2NvcmVUeXBlcykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHNjb3JlID0gc2NvcmVzQnlUeXBlW3R5cGVdW2FsbHkuaWRdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBzY29yZSA9PSBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgPyAwXHJcbiAgICAgICAgICAgICAgICAgICAgOiBzb3J0ZWRTY29yZXNCeVR5cGVbdHlwZV0uaW5kZXhPZihzY29yZSkgKyAxO1xyXG4gICAgICAgICAgICAgICAgc2NvcmUgPz89IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdEFsbHlTY29yZSA9IGxhc3RTY29yZXNbYCR7YWxseS5pZH0uJHt0eXBlfWBdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxhc3RBbGx5U2NvcmU/LnBvc2l0aW9uID09IHBvc2l0aW9uICYmIGxhc3RBbGx5U2NvcmU/LnNjb3JlID09IHNjb3JlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgYXdhaXQgc3RvcmUucHV0KHtcclxuICAgICAgICAgICAgICAgICAgICBhbGxpYW5jZUlkOiBhbGx5LmlkLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGU6IG5vdyxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIHNjb3JlLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgdXBkYXRlUGxheWVycyh0eDogVW5pdmVyc2VIaXN0b3J5RGJUcmFuc2FjdGlvbiwgcGxheWVyczogUGxheWVyW10sIG5vdzogbnVtYmVyLCBwbGF5ZXJTY29yZXM6IFBhcnRpYWw8UmVjb3JkPG51bWJlciwgUGxheWVyU2NvcmVQb3NpdGlvbnM+Pikge1xyXG4gICAgICAgIF9sb2dEZWJ1ZygndXBkYXRpbmcgcGxheWVyIGhpc3RvcnknKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZUtub3duUGxheWVycyh0eCwgcGxheWVycyk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVQbGF5ZXJTY29yZXModHgsIHBsYXllcnMsIHBsYXllclNjb3Jlcywgbm93KTtcclxuICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZVBsYXllck5hbWVzKHR4LCBwbGF5ZXJzLCBub3csICF0aGlzLnNldHRpbmdzLnRyYWNrSGlzdG9yeSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnRyYWNrSGlzdG9yeSkge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZVBsYXllckFsbGlhbmNlcyh0eCwgcGxheWVycywgbm93KTtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVQbGF5ZXJTdGF0ZXModHgsIHBsYXllcnMsIG5vdyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgdXBkYXRlS25vd25QbGF5ZXJzKHR4OiBVbml2ZXJzZUhpc3RvcnlEYlRyYW5zYWN0aW9uLCBwbGF5ZXJzOiBQbGF5ZXJbXSkge1xyXG4gICAgICAgIGZvciAoY29uc3QgcGxheWVyIG9mIHBsYXllcnMpIHtcclxuICAgICAgICAgICAgYXdhaXQgdHgub2JqZWN0U3RvcmUoJ3BsYXllcnMnKS5wdXQoeyBpZDogcGxheWVyLmlkIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIHVwZGF0ZVBsYXllck5hbWVzKHR4OiBVbml2ZXJzZUhpc3RvcnlEYlRyYW5zYWN0aW9uLCBwbGF5ZXJzOiBQbGF5ZXJbXSwgbm93OiBudW1iZXIsIHJlcGxhY2UgPSBmYWxzZSkge1xyXG4gICAgICAgIGNvbnN0IGxhc3ROYW1lczogUGFydGlhbDxSZWNvcmQ8bnVtYmVyLCBzdHJpbmc+PiA9IHt9O1xyXG4gICAgICAgIGNvbnN0IGxhc3ROYW1lVXBkYXRlczogUGFydGlhbDxSZWNvcmQ8bnVtYmVyLCBudW1iZXI+PiA9IHt9O1xyXG5cclxuICAgICAgICBjb25zdCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdwbGF5ZXJOYW1lcycpO1xyXG4gICAgICAgIGlmIChyZXBsYWNlKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHN0b3JlLmNsZWFyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgY3Vyc29yID0gYXdhaXQgc3RvcmUub3BlbkN1cnNvcigpO1xyXG4gICAgICAgICAgICB3aGlsZSAoY3Vyc29yICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRiVmFsdWUgPSBjdXJzb3IudmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNOZXdlciA9IChsYXN0TmFtZVVwZGF0ZXNbZGJWYWx1ZS5wbGF5ZXJJZF0gPz8gLTEpIDwgZGJWYWx1ZS5kYXRlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzTmV3ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBsYXN0TmFtZVVwZGF0ZXNbZGJWYWx1ZS5wbGF5ZXJJZF0gPSBkYlZhbHVlLmRhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdE5hbWVzW2RiVmFsdWUucGxheWVySWRdID0gZGJWYWx1ZS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGN1cnNvciA9IGF3YWl0IGN1cnNvci5jb250aW51ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IHBsYXllciBvZiBwbGF5ZXJzKSB7XHJcbiAgICAgICAgICAgIGlmIChwbGF5ZXIubmFtZSA9PSBsYXN0TmFtZXNbcGxheWVyLmlkXSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGF3YWl0IHN0b3JlLnB1dCh7XHJcbiAgICAgICAgICAgICAgICBwbGF5ZXJJZDogcGxheWVyLmlkLFxyXG4gICAgICAgICAgICAgICAgZGF0ZTogbm93LFxyXG4gICAgICAgICAgICAgICAgbmFtZTogcGxheWVyLm5hbWUsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIHVwZGF0ZVBsYXllckFsbGlhbmNlcyh0eDogVW5pdmVyc2VIaXN0b3J5RGJUcmFuc2FjdGlvbiwgcGxheWVyczogUGxheWVyW10sIG5vdzogbnVtYmVyKSB7XHJcbiAgICAgICAgY29uc3QgbGFzdEFsbGlhbmNlczogUGFydGlhbDxSZWNvcmQ8bnVtYmVyLCBudW1iZXIgfCBudWxsPj4gPSB7fTtcclxuICAgICAgICBjb25zdCBsYXN0QWxsaWFuY2VVcGRhdGVzOiBQYXJ0aWFsPFJlY29yZDxudW1iZXIsIG51bWJlcj4+ID0ge307XHJcblxyXG4gICAgICAgIGNvbnN0IHN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ3BsYXllckFsbGlhbmNlcycpO1xyXG4gICAgICAgIGxldCBjdXJzb3IgPSBhd2FpdCBzdG9yZS5vcGVuQ3Vyc29yKCk7XHJcbiAgICAgICAgd2hpbGUgKGN1cnNvciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRiVmFsdWUgPSBjdXJzb3IudmFsdWU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBpc05ld2VyID0gKGxhc3RBbGxpYW5jZVVwZGF0ZXNbZGJWYWx1ZS5wbGF5ZXJJZF0gPz8gLTEpIDwgZGJWYWx1ZS5kYXRlO1xyXG4gICAgICAgICAgICBpZiAoaXNOZXdlcikge1xyXG4gICAgICAgICAgICAgICAgbGFzdEFsbGlhbmNlVXBkYXRlc1tkYlZhbHVlLnBsYXllcklkXSA9IGRiVmFsdWUuZGF0ZTtcclxuICAgICAgICAgICAgICAgIGxhc3RBbGxpYW5jZXNbZGJWYWx1ZS5wbGF5ZXJJZF0gPSBkYlZhbHVlLmFsbGlhbmNlSWQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGN1cnNvciA9IGF3YWl0IGN1cnNvci5jb250aW51ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBwbGF5ZXIgb2YgcGxheWVycykge1xyXG4gICAgICAgICAgICBpZiAocGxheWVyLmlkIGluIGxhc3RBbGxpYW5jZXMgJiYgcGxheWVyLmFsbGlhbmNlID09IGxhc3RBbGxpYW5jZXNbcGxheWVyLmlkXSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGF3YWl0IHN0b3JlLnB1dCh7XHJcbiAgICAgICAgICAgICAgICBwbGF5ZXJJZDogcGxheWVyLmlkLFxyXG4gICAgICAgICAgICAgICAgZGF0ZTogbm93LFxyXG4gICAgICAgICAgICAgICAgYWxsaWFuY2VJZDogcGxheWVyLmFsbGlhbmNlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyB1cGRhdGVQbGF5ZXJTdGF0ZXModHg6IFVuaXZlcnNlSGlzdG9yeURiVHJhbnNhY3Rpb24sIHBsYXllcnM6IFBsYXllcltdLCBub3c6IG51bWJlcikge1xyXG4gICAgICAgIGNvbnN0IGxhc3RTdGF0ZXM6IFBhcnRpYWw8UmVjb3JkPG51bWJlciwgRGJVbml2ZXJzZUhpc3RvcnlQbGF5ZXJTdGF0ZT4+ID0ge307XHJcbiAgICAgICAgY29uc3QgbGFzdFN0YXRlVXBkYXRlczogUGFydGlhbDxSZWNvcmQ8bnVtYmVyLCBudW1iZXI+PiA9IHt9O1xyXG5cclxuICAgICAgICBjb25zdCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdwbGF5ZXJTdGF0ZXMnKTtcclxuICAgICAgICBsZXQgY3Vyc29yID0gYXdhaXQgc3RvcmUub3BlbkN1cnNvcigpO1xyXG4gICAgICAgIHdoaWxlIChjdXJzb3IgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zdCBkYlZhbHVlID0gY3Vyc29yLnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgaXNOZXdlciA9IChsYXN0U3RhdGVVcGRhdGVzW2RiVmFsdWUucGxheWVySWRdID8/IC0xKSA8IGRiVmFsdWUuZGF0ZTtcclxuICAgICAgICAgICAgaWYgKGlzTmV3ZXIpIHtcclxuICAgICAgICAgICAgICAgIGxhc3RTdGF0ZVVwZGF0ZXNbZGJWYWx1ZS5wbGF5ZXJJZF0gPSBkYlZhbHVlLmRhdGU7XHJcbiAgICAgICAgICAgICAgICBsYXN0U3RhdGVzW2RiVmFsdWUucGxheWVySWRdID0gZGJWYWx1ZS5zdGF0ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3Vyc29yID0gYXdhaXQgY3Vyc29yLmNvbnRpbnVlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IHBsYXllciBvZiBwbGF5ZXJzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gdGhpcy5tYXBTdGF0ZShwbGF5ZXIuc3RhdHVzKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChwbGF5ZXIuaWQgaW4gbGFzdFN0YXRlcyAmJiB0aGlzLnBsYXllclN0YXRlRXF1YWwoc3RhdGUsIGxhc3RTdGF0ZXNbcGxheWVyLmlkXSEpKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYXdhaXQgc3RvcmUucHV0KHtcclxuICAgICAgICAgICAgICAgIHBsYXllcklkOiBwbGF5ZXIuaWQsXHJcbiAgICAgICAgICAgICAgICBkYXRlOiBub3csXHJcbiAgICAgICAgICAgICAgICBzdGF0ZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgY29uc3QgcGxheWVySWRzID0gcGxheWVycy5tYXAocCA9PiBwLmlkKTtcclxuICAgICAgICBjb25zdCBkZWxldGVkUGxheWVycyA9IE9iamVjdC5rZXlzKGxhc3RTdGF0ZXMpXHJcbiAgICAgICAgICAgIC5tYXAoaWQgPT4gcGFyc2VJbnRTYWZlKGlkLCAxMCkpXHJcbiAgICAgICAgICAgIC5maWx0ZXIoaWQgPT4gIXBsYXllcklkcy5pbmNsdWRlcyhpZCkpO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IHBsYXllcklkIG9mIGRlbGV0ZWRQbGF5ZXJzKSB7XHJcbiAgICAgICAgICAgIGlmIChsYXN0U3RhdGVzW3BsYXllcklkXSA9PSAnZGVsZXRlZCcpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhd2FpdCBzdG9yZS5wdXQoe1xyXG4gICAgICAgICAgICAgICAgcGxheWVySWQsXHJcbiAgICAgICAgICAgICAgICBkYXRlOiBub3csXHJcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ2RlbGV0ZWQnLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyB1cGRhdGVQbGF5ZXJTY29yZXModHg6IFVuaXZlcnNlSGlzdG9yeURiVHJhbnNhY3Rpb24sIHBsYXllcnM6IFBsYXllcltdLCBwbGF5ZXJTY29yZXM6IFBhcnRpYWw8UmVjb3JkPG51bWJlciwgUGxheWVyU2NvcmVQb3NpdGlvbnM+Piwgbm93OiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCBsYXN0U2NvcmVzOiBQYXJ0aWFsPFJlY29yZDxgJHtudW1iZXJ9LiR7RGJVbml2ZXJzZUhpc3RvcnlTY29yZVR5cGV9YCwgU2NvcmVQb3NpdGlvbj4+ID0ge307XHJcbiAgICAgICAgY29uc3QgbGFzdFNjb3JlVXBkYXRlczogUGFydGlhbDxSZWNvcmQ8YCR7bnVtYmVyfS4ke0RiVW5pdmVyc2VIaXN0b3J5U2NvcmVUeXBlfWAsIG51bWJlcj4+ID0ge307XHJcblxyXG4gICAgICAgIGNvbnN0IHN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ3BsYXllclNjb3JlcycpO1xyXG4gICAgICAgIGxldCBjdXJzb3IgPSBhd2FpdCBzdG9yZS5vcGVuQ3Vyc29yKCk7XHJcbiAgICAgICAgd2hpbGUgKGN1cnNvciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRiVmFsdWUgPSBjdXJzb3IudmFsdWU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBrZXk6IGAke251bWJlcn0uJHtEYlVuaXZlcnNlSGlzdG9yeVNjb3JlVHlwZX1gID0gYCR7ZGJWYWx1ZS5wbGF5ZXJJZH0uJHtkYlZhbHVlLnR5cGV9YDtcclxuICAgICAgICAgICAgY29uc3QgaXNOZXdlciA9IChsYXN0U2NvcmVVcGRhdGVzW2tleV0gPz8gLTEpIDwgZGJWYWx1ZS5kYXRlO1xyXG4gICAgICAgICAgICBpZiAoaXNOZXdlcikge1xyXG4gICAgICAgICAgICAgICAgbGFzdFNjb3JlVXBkYXRlc1trZXldID0gZGJWYWx1ZS5kYXRlO1xyXG4gICAgICAgICAgICAgICAgbGFzdFNjb3Jlc1trZXldID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNjb3JlOiBkYlZhbHVlLnNjb3JlLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBkYlZhbHVlLnBvc2l0aW9uLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3Vyc29yID0gYXdhaXQgY3Vyc29yLmNvbnRpbnVlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBzY29yZVR5cGVzID0gSGlnaHNjb3JlVHlwZU5hbWVzO1xyXG4gICAgICAgIGNvbnN0IHNjb3Jlc0J5VHlwZSA9IHt9IGFzIFJlY29yZDxEYlVuaXZlcnNlSGlzdG9yeVNjb3JlVHlwZSwgUGFydGlhbDxSZWNvcmQ8bnVtYmVyLCBudW1iZXI+Pj47XHJcbiAgICAgICAgc2NvcmVUeXBlcy5mb3JFYWNoKHR5cGUgPT4gc2NvcmVzQnlUeXBlW3R5cGVdID0ge30pO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IHBsYXllciBvZiBwbGF5ZXJzKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgdHlwZSBvZiBzY29yZVR5cGVzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IHNjb3JlLCBwb3NpdGlvbiB9ID0gcGxheWVyU2NvcmVzW3BsYXllci5pZF0/Llt0eXBlXSA/PyB7IHNjb3JlOiAwLCBwb3NpdGlvbjogMCB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGtleTogYCR7bnVtYmVyfS4ke0RiVW5pdmVyc2VIaXN0b3J5U2NvcmVUeXBlfWAgPSBgJHtwbGF5ZXIuaWR9LiR7dHlwZX1gO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxhc3RTY29yZXNba2V5XT8ucG9zaXRpb24gPT0gcG9zaXRpb24gJiYgbGFzdFNjb3Jlc1trZXldPy5zY29yZSA9PSBzY29yZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGF3YWl0IHN0b3JlLnB1dCh7XHJcbiAgICAgICAgICAgICAgICAgICAgcGxheWVySWQ6IHBsYXllci5pZCxcclxuICAgICAgICAgICAgICAgICAgICBkYXRlOiBub3csXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbixcclxuICAgICAgICAgICAgICAgICAgICBzY29yZSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcGxheWVyU3RhdGVFcXVhbChhOiBEYlVuaXZlcnNlSGlzdG9yeVBsYXllclN0YXRlLCBiOiBEYlVuaXZlcnNlSGlzdG9yeVBsYXllclN0YXRlKSB7XHJcbiAgICAgICAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwgfHwgYSA9PSAnZGVsZXRlZCcgfHwgYiA9PSAnZGVsZXRlZCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGEgPT0gYjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmFycmF5c0VxdWFsKGEsIGIpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbWFwU3RhdGUoc3RhdHVzOiBzdHJpbmcgfCBudWxsKTogRGJVbml2ZXJzZUhpc3RvcnlQbGF5ZXJTdGF0ZSB7XHJcbiAgICAgICAgaWYgKHN0YXR1cyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc3RhdGVNYXA6IFJlY29yZDxzdHJpbmcsIERiVW5pdmVyc2VIaXN0b3J5UGxheWVyU3RhdGVJdGVtPiA9IHtcclxuICAgICAgICAgICAgYTogJ2FkbWluJyxcclxuICAgICAgICAgICAgYjogJ2Jhbm5lZCcsXHJcbiAgICAgICAgICAgIHY6ICd2YWNhdGlvbicsXHJcbiAgICAgICAgICAgIGk6ICdpbmFjdGl2ZScsXHJcbiAgICAgICAgICAgIEk6ICdpbmFjdGl2ZS1sb25nJyxcclxuICAgICAgICAgICAgbzogJ291dGxhdycsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBzdGF0ZXM6IERiVW5pdmVyc2VIaXN0b3J5UGxheWVyU3RhdGVJdGVtW10gPSBbXTtcclxuICAgICAgICBzdGF0dXMuc3BsaXQoJycpLmZvckVhY2goYyA9PiBzdGF0ZXMucHVzaChzdGF0ZU1hcFtjXSA/PyBfdGhyb3coYHVua25vd24gcGxheWVyIHN0YXRlICcke2N9J2ApKSk7XHJcblxyXG4gICAgICAgIGlmIChzdGF0ZXMubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdudW1iZXIgb2YgcGxheWVyIHN0YXRzIHdhcyB6ZXJvJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc3RhdGVzO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIHVwZGF0ZVBsYW5ldHModHg6IFVuaXZlcnNlSGlzdG9yeURiVHJhbnNhY3Rpb24sIHBsYW5ldHM6IFBsYW5ldFtdLCBub3c6IG51bWJlcikge1xyXG4gICAgICAgIF9sb2dEZWJ1ZygndXBkYXRpbmcgcGxhbmV0IGFuZCBtb29uIGhpc3RvcnknKTtcclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVLbm93blBsYW5ldHModHgsIHBsYW5ldHMpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMudXBkYXRlUGxhbmV0TmFtZXModHgsIHBsYW5ldHMsIG5vdyk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVQbGFuZXRTdGF0ZXModHgsIHBsYW5ldHMsIG5vdyk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVQbGFuZXRDb29yZGluYXRlcyh0eCwgcGxhbmV0cywgbm93KTtcclxuXHJcbiAgICAgICAgY29uc3QgbW9vbnMgPSBwbGFuZXRzLm1hcChwID0+IHAubW9vbikuZmlsdGVyKG0gPT4gbSAhPSBudWxsKSBhcyBNb29uW107XHJcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVLbm93bk1vb25zKHR4LCBtb29ucyk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVNb29uTmFtZXModHgsIG1vb25zLCBub3cpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMudXBkYXRlTW9vblN0YXRlcyh0eCwgbW9vbnMsIG5vdyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyB1cGRhdGVLbm93blBsYW5ldHModHg6IFVuaXZlcnNlSGlzdG9yeURiVHJhbnNhY3Rpb24sIHBsYW5ldHM6IFBsYW5ldFtdKSB7XHJcbiAgICAgICAgY29uc3QgcGxhbmV0U3RvcmUgPSB0eC5vYmplY3RTdG9yZSgncGxhbmV0cycpO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IHBsYW5ldCBvZiBwbGFuZXRzKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHBsYW5ldFN0b3JlLnB1dCh7XHJcbiAgICAgICAgICAgICAgICBpZDogcGxhbmV0LmlkLFxyXG4gICAgICAgICAgICAgICAgcGxheWVySWQ6IHBsYW5ldC5wbGF5ZXIsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIHVwZGF0ZVBsYW5ldE5hbWVzKHR4OiBVbml2ZXJzZUhpc3RvcnlEYlRyYW5zYWN0aW9uLCBwbGFuZXRzOiBQbGFuZXRbXSwgbm93OiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCBsYXN0TmFtZXM6IFBhcnRpYWw8UmVjb3JkPG51bWJlciwgc3RyaW5nPj4gPSB7fTtcclxuICAgICAgICBjb25zdCBsYXN0TmFtZVVwZGF0ZXM6IFBhcnRpYWw8UmVjb3JkPG51bWJlciwgbnVtYmVyPj4gPSB7fTtcclxuXHJcbiAgICAgICAgY29uc3Qgc3RvcmUgPSB0eC5vYmplY3RTdG9yZSgncGxhbmV0TmFtZXMnKTtcclxuICAgICAgICBsZXQgY3Vyc29yID0gYXdhaXQgc3RvcmUub3BlbkN1cnNvcigpO1xyXG4gICAgICAgIHdoaWxlIChjdXJzb3IgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zdCBkYlZhbHVlID0gY3Vyc29yLnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgaXNOZXdlciA9IChsYXN0TmFtZVVwZGF0ZXNbZGJWYWx1ZS5wbGFuZXRJZF0gPz8gLTEpIDwgZGJWYWx1ZS5kYXRlO1xyXG4gICAgICAgICAgICBpZiAoaXNOZXdlcikge1xyXG4gICAgICAgICAgICAgICAgbGFzdE5hbWVVcGRhdGVzW2RiVmFsdWUucGxhbmV0SWRdID0gZGJWYWx1ZS5kYXRlO1xyXG4gICAgICAgICAgICAgICAgbGFzdE5hbWVzW2RiVmFsdWUucGxhbmV0SWRdID0gZGJWYWx1ZS5uYW1lO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjdXJzb3IgPSBhd2FpdCBjdXJzb3IuY29udGludWUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgcGxhbmV0IG9mIHBsYW5ldHMpIHtcclxuICAgICAgICAgICAgaWYgKHBsYW5ldC5uYW1lID09IGxhc3ROYW1lc1twbGFuZXQuaWRdKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYXdhaXQgc3RvcmUucHV0KHtcclxuICAgICAgICAgICAgICAgIHBsYW5ldElkOiBwbGFuZXQuaWQsXHJcbiAgICAgICAgICAgICAgICBkYXRlOiBub3csXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBwbGFuZXQubmFtZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgdXBkYXRlUGxhbmV0U3RhdGVzKHR4OiBVbml2ZXJzZUhpc3RvcnlEYlRyYW5zYWN0aW9uLCBwbGFuZXRzOiBQbGFuZXRbXSwgbm93OiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCBsYXN0U3RhdGVzOiBQYXJ0aWFsPFJlY29yZDxudW1iZXIsIERiVW5pdmVyc2VIaXN0b3J5UGxhbmV0TW9vblN0YXRlPj4gPSB7fTtcclxuICAgICAgICBjb25zdCBsYXN0U3RhdGVVcGRhdGVzOiBQYXJ0aWFsPFJlY29yZDxudW1iZXIsIG51bWJlcj4+ID0ge307XHJcblxyXG4gICAgICAgIGNvbnN0IHN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ3BsYW5ldFN0YXRlcycpO1xyXG4gICAgICAgIGxldCBjdXJzb3IgPSBhd2FpdCBzdG9yZS5vcGVuQ3Vyc29yKCk7XHJcbiAgICAgICAgd2hpbGUgKGN1cnNvciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRiVmFsdWUgPSBjdXJzb3IudmFsdWU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBpc05ld2VyID0gKGxhc3RTdGF0ZVVwZGF0ZXNbZGJWYWx1ZS5wbGFuZXRJZF0gPz8gLTEpIDwgZGJWYWx1ZS5kYXRlO1xyXG4gICAgICAgICAgICBpZiAoaXNOZXdlcikge1xyXG4gICAgICAgICAgICAgICAgbGFzdFN0YXRlVXBkYXRlc1tkYlZhbHVlLnBsYW5ldElkXSA9IGRiVmFsdWUuZGF0ZTtcclxuICAgICAgICAgICAgICAgIGxhc3RTdGF0ZXNbZGJWYWx1ZS5wbGFuZXRJZF0gPSBkYlZhbHVlLnN0YXRlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjdXJzb3IgPSBhd2FpdCBjdXJzb3IuY29udGludWUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgcGxhbmV0IG9mIHBsYW5ldHMpIHtcclxuICAgICAgICAgICAgaWYgKHBsYW5ldC5pZCBpbiBsYXN0U3RhdGVzICYmIGxhc3RTdGF0ZXNbcGxhbmV0LmlkXSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYXdhaXQgc3RvcmUucHV0KHtcclxuICAgICAgICAgICAgICAgIHBsYW5ldElkOiBwbGFuZXQuaWQsXHJcbiAgICAgICAgICAgICAgICBkYXRlOiBub3csXHJcbiAgICAgICAgICAgICAgICBzdGF0ZTogbnVsbCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBwbGFuZXRJZHMgPSBwbGFuZXRzLm1hcChwID0+IHAuaWQpO1xyXG4gICAgICAgIGNvbnN0IGRlbGV0ZWRQbGFuZXRzID0gT2JqZWN0LmtleXMobGFzdFN0YXRlcylcclxuICAgICAgICAgICAgLm1hcChpZCA9PiBwYXJzZUludFNhZmUoaWQsIDEwKSlcclxuICAgICAgICAgICAgLmZpbHRlcihpZCA9PiAhcGxhbmV0SWRzLmluY2x1ZGVzKGlkKSk7XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgcGxhbmV0SWQgb2YgZGVsZXRlZFBsYW5ldHMpIHtcclxuICAgICAgICAgICAgaWYgKGxhc3RTdGF0ZXNbcGxhbmV0SWRdID09ICdkZWxldGVkJykge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGF3YWl0IHN0b3JlLnB1dCh7XHJcbiAgICAgICAgICAgICAgICBwbGFuZXRJZDogcGxhbmV0SWQsXHJcbiAgICAgICAgICAgICAgICBkYXRlOiBub3csXHJcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ2RlbGV0ZWQnLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyB1cGRhdGVQbGFuZXRDb29yZGluYXRlcyh0eDogVW5pdmVyc2VIaXN0b3J5RGJUcmFuc2FjdGlvbiwgcGxhbmV0czogUGxhbmV0W10sIG5vdzogbnVtYmVyKSB7XHJcbiAgICAgICAgY29uc3QgbGFzdENvb3JkaW5hdGVzOiBQYXJ0aWFsPFJlY29yZDxudW1iZXIsIERiVW5pdmVyc2VIaXN0b3J5Q29vcmRpbmF0ZXM+PiA9IHt9O1xyXG4gICAgICAgIGNvbnN0IGxhc3RDb29yZGluYXRlc1VwZGF0ZXM6IFBhcnRpYWw8UmVjb3JkPG51bWJlciwgbnVtYmVyPj4gPSB7fTtcclxuXHJcbiAgICAgICAgY29uc3Qgc3RvcmUgPSB0eC5vYmplY3RTdG9yZSgncGxhbmV0Q29vcmRpbmF0ZXMnKTtcclxuICAgICAgICBsZXQgY3Vyc29yID0gYXdhaXQgc3RvcmUub3BlbkN1cnNvcigpO1xyXG4gICAgICAgIHdoaWxlIChjdXJzb3IgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zdCBkYlZhbHVlID0gY3Vyc29yLnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgaXNOZXdlciA9IChsYXN0Q29vcmRpbmF0ZXNVcGRhdGVzW2RiVmFsdWUucGxhbmV0SWRdID8/IC0xKSA8IGRiVmFsdWUuZGF0ZTtcclxuICAgICAgICAgICAgaWYgKGlzTmV3ZXIpIHtcclxuICAgICAgICAgICAgICAgIGxhc3RDb29yZGluYXRlc1VwZGF0ZXNbZGJWYWx1ZS5wbGFuZXRJZF0gPSBkYlZhbHVlLmRhdGU7XHJcbiAgICAgICAgICAgICAgICBsYXN0Q29vcmRpbmF0ZXNbZGJWYWx1ZS5wbGFuZXRJZF0gPSBkYlZhbHVlLmNvb3JkaW5hdGVzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjdXJzb3IgPSBhd2FpdCBjdXJzb3IuY29udGludWUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgcGxhbmV0IG9mIHBsYW5ldHMpIHtcclxuICAgICAgICAgICAgaWYgKHBsYW5ldC5pZCBpbiBsYXN0Q29vcmRpbmF0ZXMgJiYgdGhpcy5jb29yZGluYXRlc0VxdWFsKHBsYW5ldC5jb29yZGluYXRlcywgbGFzdENvb3JkaW5hdGVzW3BsYW5ldC5pZF0hKSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGF3YWl0IHN0b3JlLnB1dCh7XHJcbiAgICAgICAgICAgICAgICBwbGFuZXRJZDogcGxhbmV0LmlkLFxyXG4gICAgICAgICAgICAgICAgZGF0ZTogbm93LFxyXG4gICAgICAgICAgICAgICAgY29vcmRpbmF0ZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICBnYWxheHk6IHBsYW5ldC5jb29yZGluYXRlcy5nYWxheHksXHJcbiAgICAgICAgICAgICAgICAgICAgc3lzdGVtOiBwbGFuZXQuY29vcmRpbmF0ZXMuc3lzdGVtLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBwbGFuZXQuY29vcmRpbmF0ZXMucG9zaXRpb24sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyB1cGRhdGVLbm93bk1vb25zKHR4OiBVbml2ZXJzZUhpc3RvcnlEYlRyYW5zYWN0aW9uLCBtb29uczogTW9vbltdKSB7XHJcbiAgICAgICAgY29uc3Qgc3RvcmUgPSB0eC5vYmplY3RTdG9yZSgnbW9vbnMnKTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBtb29uIG9mIG1vb25zKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHN0b3JlLnB1dCh7XHJcbiAgICAgICAgICAgICAgICBpZDogbW9vbi5pZCxcclxuICAgICAgICAgICAgICAgIHNpemU6IG1vb24uc2l6ZSxcclxuICAgICAgICAgICAgICAgIHBsYW5ldElkOiBtb29uLnBsYW5ldElkLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyB1cGRhdGVNb29uTmFtZXModHg6IFVuaXZlcnNlSGlzdG9yeURiVHJhbnNhY3Rpb24sIG1vb25zOiBNb29uW10sIG5vdzogbnVtYmVyKSB7XHJcbiAgICAgICAgY29uc3QgbGFzdE5hbWVzOiBQYXJ0aWFsPFJlY29yZDxudW1iZXIsIHN0cmluZz4+ID0ge307XHJcbiAgICAgICAgY29uc3QgbGFzdE5hbWVVcGRhdGVzOiBQYXJ0aWFsPFJlY29yZDxudW1iZXIsIG51bWJlcj4+ID0ge307XHJcblxyXG4gICAgICAgIGNvbnN0IHN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ21vb25OYW1lcycpO1xyXG4gICAgICAgIGxldCBjdXJzb3IgPSBhd2FpdCBzdG9yZS5vcGVuQ3Vyc29yKCk7XHJcbiAgICAgICAgd2hpbGUgKGN1cnNvciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRiVmFsdWUgPSBjdXJzb3IudmFsdWU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBpc05ld2VyID0gKGxhc3ROYW1lVXBkYXRlc1tkYlZhbHVlLm1vb25JZF0gPz8gLTEpIDwgZGJWYWx1ZS5kYXRlO1xyXG4gICAgICAgICAgICBpZiAoaXNOZXdlcikge1xyXG4gICAgICAgICAgICAgICAgbGFzdE5hbWVVcGRhdGVzW2RiVmFsdWUubW9vbklkXSA9IGRiVmFsdWUuZGF0ZTtcclxuICAgICAgICAgICAgICAgIGxhc3ROYW1lc1tkYlZhbHVlLm1vb25JZF0gPSBkYlZhbHVlLm5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGN1cnNvciA9IGF3YWl0IGN1cnNvci5jb250aW51ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBtb29uIG9mIG1vb25zKSB7XHJcbiAgICAgICAgICAgIGlmIChtb29uLm5hbWUgPT0gbGFzdE5hbWVzW21vb24uaWRdKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYXdhaXQgc3RvcmUucHV0KHtcclxuICAgICAgICAgICAgICAgIG1vb25JZDogbW9vbi5pZCxcclxuICAgICAgICAgICAgICAgIGRhdGU6IG5vdyxcclxuICAgICAgICAgICAgICAgIG5hbWU6IG1vb24ubmFtZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgdXBkYXRlTW9vblN0YXRlcyh0eDogVW5pdmVyc2VIaXN0b3J5RGJUcmFuc2FjdGlvbiwgbW9vbnM6IE1vb25bXSwgbm93OiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCBsYXN0U3RhdGVzOiBQYXJ0aWFsPFJlY29yZDxudW1iZXIsIERiVW5pdmVyc2VIaXN0b3J5UGxhbmV0TW9vblN0YXRlPj4gPSB7fTtcclxuICAgICAgICBjb25zdCBsYXN0U3RhdGVVcGRhdGVzOiBQYXJ0aWFsPFJlY29yZDxudW1iZXIsIG51bWJlcj4+ID0ge307XHJcblxyXG4gICAgICAgIGNvbnN0IHN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ21vb25TdGF0ZXMnKTtcclxuICAgICAgICBsZXQgY3Vyc29yID0gYXdhaXQgc3RvcmUub3BlbkN1cnNvcigpO1xyXG4gICAgICAgIHdoaWxlIChjdXJzb3IgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zdCBkYlZhbHVlID0gY3Vyc29yLnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgaXNOZXdlciA9IChsYXN0U3RhdGVVcGRhdGVzW2RiVmFsdWUubW9vbklkXSA/PyAtMSkgPCBkYlZhbHVlLmRhdGU7XHJcbiAgICAgICAgICAgIGlmIChpc05ld2VyKSB7XHJcbiAgICAgICAgICAgICAgICBsYXN0U3RhdGVVcGRhdGVzW2RiVmFsdWUubW9vbklkXSA9IGRiVmFsdWUuZGF0ZTtcclxuICAgICAgICAgICAgICAgIGxhc3RTdGF0ZXNbZGJWYWx1ZS5tb29uSWRdID0gZGJWYWx1ZS5zdGF0ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3Vyc29yID0gYXdhaXQgY3Vyc29yLmNvbnRpbnVlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IG1vb24gb2YgbW9vbnMpIHtcclxuICAgICAgICAgICAgaWYgKG1vb24uaWQgaW4gbGFzdFN0YXRlcyAmJiBsYXN0U3RhdGVzW21vb24uaWRdID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhd2FpdCBzdG9yZS5wdXQoe1xyXG4gICAgICAgICAgICAgICAgbW9vbklkOiBtb29uLmlkLFxyXG4gICAgICAgICAgICAgICAgZGF0ZTogbm93LFxyXG4gICAgICAgICAgICAgICAgc3RhdGU6IG51bGwsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbW9vbklkcyA9IG1vb25zLm1hcChtID0+IG0uaWQpO1xyXG4gICAgICAgIGNvbnN0IGRlbGV0ZWRNb29ucyA9IE9iamVjdC5rZXlzKGxhc3RTdGF0ZXMpXHJcbiAgICAgICAgICAgIC5tYXAoaWQgPT4gcGFyc2VJbnRTYWZlKGlkLCAxMCkpXHJcbiAgICAgICAgICAgIC5maWx0ZXIoaWQgPT4gIW1vb25JZHMuaW5jbHVkZXMoaWQpKTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBtb29uSWQgb2YgZGVsZXRlZE1vb25zKSB7XHJcbiAgICAgICAgICAgIGlmIChsYXN0U3RhdGVzW21vb25JZF0gPT0gJ2RlbGV0ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYXdhaXQgc3RvcmUucHV0KHtcclxuICAgICAgICAgICAgICAgIG1vb25JZCxcclxuICAgICAgICAgICAgICAgIGRhdGU6IG5vdyxcclxuICAgICAgICAgICAgICAgIHN0YXRlOiAnZGVsZXRlZCcsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNvb3JkaW5hdGVzRXF1YWwoYTogRGJVbml2ZXJzZUhpc3RvcnlDb29yZGluYXRlcywgYjogRGJVbml2ZXJzZUhpc3RvcnlDb29yZGluYXRlcykge1xyXG4gICAgICAgIHJldHVybiBhLmdhbGF4eSA9PSBiLmdhbGF4eVxyXG4gICAgICAgICAgICAmJiBhLnN5c3RlbSA9PSBiLnN5c3RlbVxyXG4gICAgICAgICAgICAmJiBhLnBvc2l0aW9uID09IGIucG9zaXRpb247XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhcnJheXNFcXVhbDxUPihhOiBUW10sIGI6IFRbXSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PSBiLmxlbmd0aFxyXG4gICAgICAgICAgICAmJiBhLmV2ZXJ5KGFWYWx1ZSA9PiBiLmluY2x1ZGVzKGFWYWx1ZSkpXHJcbiAgICAgICAgICAgICYmIGIuZXZlcnkoYlZhbHVlID0+IGEuaW5jbHVkZXMoYlZhbHVlKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXQgYXBpVXJsQmFzZSgpIHtcclxuICAgICAgICByZXR1cm4gYGh0dHBzOi8vcyR7dGhpcy5tZXRhLnNlcnZlcklkfS0ke3RoaXMubWV0YS5sYW5ndWFnZX0ub2dhbWUuZ2FtZWZvcmdlLmNvbS9hcGlgO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgZ2V0WG1sPFQgPSBhbnk+KGFwaUZpbGU6IHN0cmluZyk6IFByb21pc2U8VD4ge1xyXG4gICAgICAgIGNvbnN0IHVybCA9IGAke3RoaXMuYXBpVXJsQmFzZX0vJHthcGlGaWxlfWA7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcclxuICAgICAgICAgICAgY2FjaGU6ICduby1jYWNoZScsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgeG1sID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZXIucGFyc2UoeG1sKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGdldFBsYW5ldHMoKTogUHJvbWlzZTxQbGFuZXRbXT4ge1xyXG4gICAgICAgIGNvbnN0IHBsYW5ldHM6IFBsYW5ldFtdID0gW107XHJcblxyXG4gICAgICAgIGNvbnN0IHhtbCA9IGF3YWl0IHRoaXMuZ2V0WG1sPE9nYW1lQXBpLlVuaXZlcnNlWG1sPigndW5pdmVyc2UueG1sJyk7XHJcbiAgICAgICAgeG1sLnVuaXZlcnNlLnBsYW5ldC5mb3JFYWNoKHBsYW5ldCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlkID0gcGFyc2VJbnRTYWZlKHBsYW5ldC5pZCA/PyBfdGhyb3coJ25vIHBsYW5ldCBpZCBmb3VuZCcpLCAxMCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBsYXllciA9IHBhcnNlSW50U2FmZShwbGFuZXQucGxheWVyID8/IF90aHJvdygnbm8gcGxhbmV0IHBsYXllciBpZCBmb3VuZCcpLCAxMCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBwbGFuZXQubmFtZSA/PyBfdGhyb3coJ25vIHBsYW5ldCBuYW1lIGZvdW5kJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvb3JkaW5hdGVzID0gcGFyc2VDb29yZGluYXRlcyhwbGFuZXQuY29vcmRzID8/IF90aHJvdygnbm8gcGxhbmV0IGNvb3JkcyBmb3VuZCcpKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBtb29uOiBNb29uIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBpZiAocGxhbmV0Lm1vb24gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbW9vbklkID0gcGFyc2VJbnRTYWZlKHBsYW5ldC5tb29uLmlkID8/IF90aHJvdygnbm8gbW9vbiBpZCBmb3VuZCcpLCAxMCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzaXplID0gcGFyc2VJbnRTYWZlKHBsYW5ldC5tb29uLnNpemUgPz8gX3Rocm93KCdubyBtb29uIHNpemUgZm91bmQnKSwgMTApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbW9vbk5hbWUgPSBwbGFuZXQubW9vbi5uYW1lID8/IF90aHJvdygnbm8gbW9vbiBuYW1lIGZvdW5kJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgbW9vbiA9IHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogbW9vbklkLFxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IG1vb25OYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemUsXHJcbiAgICAgICAgICAgICAgICAgICAgcGxhbmV0SWQ6IGlkLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcGxhbmV0cy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgICAgICAgcGxheWVyLFxyXG4gICAgICAgICAgICAgICAgbmFtZSxcclxuICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzLFxyXG4gICAgICAgICAgICAgICAgbW9vbixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBwbGFuZXRzO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgZ2V0UGxheWVycygpOiBQcm9taXNlPFBsYXllcltdPiB7XHJcbiAgICAgICAgY29uc3QgcGxheWVyczogUGxheWVyW10gPSBbXTtcclxuXHJcbiAgICAgICAgY29uc3QgeG1sID0gYXdhaXQgdGhpcy5nZXRYbWw8T2dhbWVBcGkuUGxheWVyc1htbD4oJ3BsYXllcnMueG1sJyk7XHJcbiAgICAgICAgeG1sLnBsYXllcnMucGxheWVyLmZvckVhY2gocGxheWVyID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaWQgPSBwYXJzZUludFNhZmUocGxheWVyLmlkID8/IF90aHJvdygnbm8gcGxheWVyIGlkIGZvdW5kJyksIDEwKTtcclxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IHBsYXllci5uYW1lID8/IF90aHJvdygnbm8gcGxheWVyIG5hbWUgZm91bmQnKTtcclxuICAgICAgICAgICAgY29uc3Qgc3RhdHVzID0gcGxheWVyLnN0YXR1cyA/PyBudWxsO1xyXG4gICAgICAgICAgICBjb25zdCBhbGxpYW5jZSA9IHBsYXllci5hbGxpYW5jZSA9PSBudWxsID8gbnVsbCA6IHBhcnNlSW50U2FmZShwbGF5ZXIuYWxsaWFuY2UsIDEwKTtcclxuXHJcbiAgICAgICAgICAgIHBsYXllcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBpZCxcclxuICAgICAgICAgICAgICAgIGFsbGlhbmNlLFxyXG4gICAgICAgICAgICAgICAgbmFtZSxcclxuICAgICAgICAgICAgICAgIHN0YXR1cyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBwbGF5ZXJzO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgZ2V0QWxsaWFuY2VzKCk6IFByb21pc2U8QWxsaWFuY2VbXT4ge1xyXG4gICAgICAgIGNvbnN0IGFsbGlhbmNlczogQWxsaWFuY2VbXSA9IFtdO1xyXG5cclxuICAgICAgICBjb25zdCB4bWwgPSBhd2FpdCB0aGlzLmdldFhtbDxPZ2FtZUFwaS5BbGxpYW5jZVhtbD4oJ2FsbGlhbmNlcy54bWwnKTtcclxuICAgICAgICB4bWwuYWxsaWFuY2VzLmFsbGlhbmNlLmZvckVhY2goYWxsaWFuY2UgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpZCA9IHBhcnNlSW50U2FmZShhbGxpYW5jZS5pZCA/PyBfdGhyb3coJ25vIGFsbGlhbmNlIGlkIGZvdW5kJyksIDEwKTtcclxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGFsbGlhbmNlLm5hbWUgPz8gX3Rocm93KCdubyBhbGxpYW5jZSBuYW1lIGZvdW5kJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhZyA9IGFsbGlhbmNlLnRhZyA/PyBfdGhyb3coJ25vIGFsbGlhbmNlIHRhZyBmb3VuZCcpO1xyXG5cclxuICAgICAgICAgICAgYWxsaWFuY2VzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgaWQsXHJcbiAgICAgICAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgICAgICAgdGFnLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGFsbGlhbmNlcztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGdldEFsbFBsYXllclNjb3JlcygpOiBQcm9taXNlPFBhcnRpYWw8UmVjb3JkPG51bWJlciwgUGxheWVyU2NvcmVQb3NpdGlvbnM+Pj4ge1xyXG4gICAgICAgIGNvbnN0IHNjb3JlczogUGFydGlhbDxSZWNvcmQ8bnVtYmVyLCBQbGF5ZXJTY29yZVBvc2l0aW9ucz4+ID0ge307XHJcblxyXG4gICAgICAgIGNvbnN0IHRvdGFsID0gYXdhaXQgdGhpcy5nZXRQbGF5ZXJTY29yZVBvc2l0aW9ucyhIaWdoc2NvcmVUeXBlLnRvdGFsKTtcclxuICAgICAgICBjb25zdCBlY29ub215ID0gYXdhaXQgdGhpcy5nZXRQbGF5ZXJTY29yZVBvc2l0aW9ucyhIaWdoc2NvcmVUeXBlLmVjb25vbXkpO1xyXG4gICAgICAgIGNvbnN0IHJlc2VhcmNoID0gYXdhaXQgdGhpcy5nZXRQbGF5ZXJTY29yZVBvc2l0aW9ucyhIaWdoc2NvcmVUeXBlLnJlc2VhcmNoKTtcclxuICAgICAgICBjb25zdCBtaWxpdGFyeSA9IGF3YWl0IHRoaXMuZ2V0UGxheWVyTWlsaXRhcnlTY29yZVBvc2l0aW9ucygpO1xyXG4gICAgICAgIGNvbnN0IG1pbGl0YXJ5QnVpbHQgPSBhd2FpdCB0aGlzLmdldFBsYXllclNjb3JlUG9zaXRpb25zKEhpZ2hzY29yZVR5cGUubWlsaXRhcnlCdWlsdCk7XHJcbiAgICAgICAgY29uc3QgbWlsaXRhcnlEZXN0cm95ZWQgPSBhd2FpdCB0aGlzLmdldFBsYXllclNjb3JlUG9zaXRpb25zKEhpZ2hzY29yZVR5cGUubWlsaXRhcnlEZXN0cm95ZWQpO1xyXG4gICAgICAgIGNvbnN0IG1pbGl0YXJ5TG9zdCA9IGF3YWl0IHRoaXMuZ2V0UGxheWVyU2NvcmVQb3NpdGlvbnMoSGlnaHNjb3JlVHlwZS5taWxpdGFyeUxvc3QpO1xyXG4gICAgICAgIGNvbnN0IGhvbm9yID0gYXdhaXQgdGhpcy5nZXRQbGF5ZXJTY29yZVBvc2l0aW9ucyhIaWdoc2NvcmVUeXBlLmhvbm9yKTtcclxuXHJcbiAgICAgICAgbGV0IGxpZmVmb3JtID0gYXdhaXQgdGhpcy5nZXRQbGF5ZXJTY29yZVBvc2l0aW9ucyhIaWdoc2NvcmVUeXBlLmxpZmVmb3JtKTtcclxuICAgICAgICBsZXQgbGlmZWZvcm1FY29ub215ID0gYXdhaXQgdGhpcy5nZXRQbGF5ZXJTY29yZVBvc2l0aW9ucyhIaWdoc2NvcmVUeXBlLmxpZmVmb3JtRWNvbm9teSk7XHJcbiAgICAgICAgbGV0IGxpZmVmb3JtVGVjaG5vbG9neSA9IGF3YWl0IHRoaXMuZ2V0UGxheWVyU2NvcmVQb3NpdGlvbnMoSGlnaHNjb3JlVHlwZS5saWZlZm9ybVRlY2hub2xvZ3kpO1xyXG4gICAgICAgIGxldCBsaWZlZm9ybURpc2NvdmVyaWVzID0gYXdhaXQgdGhpcy5nZXRQbGF5ZXJTY29yZVBvc2l0aW9ucyhIaWdoc2NvcmVUeXBlLmxpZmVmb3JtRGlzY292ZXJpZXMpO1xyXG5cclxuICAgICAgICBPYmplY3Qua2V5cyh0b3RhbClcclxuICAgICAgICAgICAgLm1hcChwbGF5ZXJJZCA9PiBwYXJzZUludFNhZmUocGxheWVySWQsIDEwKSlcclxuICAgICAgICAgICAgLmZvckVhY2gocGxheWVySWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2NvcmVzW3BsYXllcklkXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICB0b3RhbDogdG90YWxbcGxheWVySWRdLFxyXG4gICAgICAgICAgICAgICAgICAgIGVjb25vbXk6IGVjb25vbXlbcGxheWVySWRdLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc2VhcmNoOiByZXNlYXJjaFtwbGF5ZXJJZF0sXHJcbiAgICAgICAgICAgICAgICAgICAgbWlsaXRhcnk6IG1pbGl0YXJ5W3BsYXllcklkXS5wb2ludHMsXHJcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyT2ZTaGlwczogbWlsaXRhcnlbcGxheWVySWRdLm51bWJlck9mU2hpcHMsXHJcbiAgICAgICAgICAgICAgICAgICAgbWlsaXRhcnlCdWlsdDogbWlsaXRhcnlCdWlsdFtwbGF5ZXJJZF0sXHJcbiAgICAgICAgICAgICAgICAgICAgbWlsaXRhcnlEZXN0cm95ZWQ6IG1pbGl0YXJ5RGVzdHJveWVkW3BsYXllcklkXSxcclxuICAgICAgICAgICAgICAgICAgICBtaWxpdGFyeUxvc3Q6IG1pbGl0YXJ5TG9zdFtwbGF5ZXJJZF0sXHJcbiAgICAgICAgICAgICAgICAgICAgaG9ub3I6IGhvbm9yW3BsYXllcklkXSxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGlmZWZvcm06IGxpZmVmb3JtW3BsYXllcklkXSxcclxuICAgICAgICAgICAgICAgICAgICBsaWZlZm9ybUVjb25vbXk6IGxpZmVmb3JtRWNvbm9teVtwbGF5ZXJJZF0sXHJcbiAgICAgICAgICAgICAgICAgICAgbGlmZWZvcm1UZWNobm9sb2d5OiBsaWZlZm9ybVRlY2hub2xvZ3lbcGxheWVySWRdLFxyXG4gICAgICAgICAgICAgICAgICAgIGxpZmVmb3JtRGlzY292ZXJpZXM6IGxpZmVmb3JtRGlzY292ZXJpZXNbcGxheWVySWRdLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBzY29yZXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBnZXRQbGF5ZXJTY29yZVBvc2l0aW9ucyh0eXBlOiBFeGNsdWRlPEhpZ2hzY29yZVR5cGUsIEhpZ2hzY29yZVR5cGUubWlsaXRhcnlBbmROdW1iZXJPZlNoaXBzPik6IFByb21pc2U8UmVjb3JkPG51bWJlciwgU2NvcmVQb3NpdGlvbj4+IHtcclxuICAgICAgICBjb25zdCBzY29yZXM6IFJlY29yZDxudW1iZXIsIFNjb3JlUG9zaXRpb24+ID0ge307XHJcblxyXG4gICAgICAgIGNvbnN0IHhtbCA9IGF3YWl0IHRoaXMuZ2V0WG1sPE9nYW1lQXBpLkhpZ2hzY29yZVhtbD4oYGhpZ2hzY29yZS54bWw/Y2F0ZWdvcnk9MSZ0eXBlPSR7dHlwZX1gKTtcclxuICAgICAgICB4bWwuaGlnaHNjb3JlLnBsYXllci5mb3JFYWNoKHBsYXllciA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlkID0gcGFyc2VJbnRTYWZlKHBsYXllci5pZCA/PyBfdGhyb3coJ25vIHBsYXllciBpZCBmb3VuZCcpLCAxMCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNjb3JlID0gcGFyc2VJbnRTYWZlKHBsYXllci5zY29yZSA/PyBfdGhyb3coJ25vIHBsYXllciBzY29yZSBmb3VuZCcpLCAxMCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gcGFyc2VJbnRTYWZlKHBsYXllci5wb3NpdGlvbiA/PyBfdGhyb3coJ25vIHBsYXllciBwb3NpdGlvbiBmb3VuZCcpLCAxMCk7XHJcblxyXG4gICAgICAgICAgICBzY29yZXNbaWRdID0geyBzY29yZSwgcG9zaXRpb24gfTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gc2NvcmVzO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgZ2V0UGxheWVyTWlsaXRhcnlTY29yZVBvc2l0aW9ucygpOiBQcm9taXNlPFJlY29yZDxudW1iZXIsIHsgcG9pbnRzOiBTY29yZVBvc2l0aW9uLCBudW1iZXJPZlNoaXBzOiBTY29yZVBvc2l0aW9uIH0+PiB7XHJcbiAgICAgICAgY29uc3Qgc2NvcmVzOiBSZWNvcmQ8bnVtYmVyLCB7IHBvaW50czogU2NvcmVQb3NpdGlvbiwgbnVtYmVyT2ZTaGlwczogU2NvcmVQb3NpdGlvbiB9PiA9IHt9O1xyXG5cclxuICAgICAgICBjb25zdCB4bWwgPSBhd2FpdCB0aGlzLmdldFhtbDxPZ2FtZUFwaS5IaWdoc2NvcmVYbWw+KGBoaWdoc2NvcmUueG1sP2NhdGVnb3J5PTEmdHlwZT0ke0hpZ2hzY29yZVR5cGUubWlsaXRhcnlBbmROdW1iZXJPZlNoaXBzfWApO1xyXG4gICAgICAgIGNvbnN0IG1hcHBlZCA9IHhtbC5oaWdoc2NvcmUucGxheWVyLm1hcChwbGF5ZXIgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpZCA9IHBhcnNlSW50U2FmZShwbGF5ZXIuaWQgPz8gX3Rocm93KCdubyBwbGF5ZXIgaWQgZm91bmQnKSwgMTApO1xyXG4gICAgICAgICAgICBjb25zdCBzY29yZSA9IHBhcnNlSW50U2FmZShwbGF5ZXIuc2NvcmUgPz8gX3Rocm93KCdubyBwbGF5ZXIgc2NvcmUgZm91bmQnKSwgMTApO1xyXG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHBhcnNlSW50U2FmZShwbGF5ZXIucG9zaXRpb24gPz8gX3Rocm93KCdubyBwbGF5ZXIgcG9zaXRpb24gZm91bmQnKSwgMTApO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgbnVtYmVyT2ZTaGlwcyA9IHBhcnNlSW50U2FmZShwbGF5ZXIuc2hpcHMgPz8gJzAnLCAxMCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgaWQsXHJcbiAgICAgICAgICAgICAgICBzY29yZSxcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uLFxyXG4gICAgICAgICAgICAgICAgbnVtYmVyT2ZTaGlwcyxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBtYXBwZWQuc29ydCgoYSwgYikgPT4gYi5udW1iZXJPZlNoaXBzIC0gYS5udW1iZXJPZlNoaXBzKTtcclxuXHJcbiAgICAgICAgbWFwcGVkLmZvckVhY2goKHBsYXllciwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgeyBpZCwgc2NvcmUsIHBvc2l0aW9uLCBudW1iZXJPZlNoaXBzIH0gPSBwbGF5ZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IG51bWJlck9mU2hpcHNQb3NpdGlvbiA9IGluZGV4ICsgMTtcclxuXHJcbiAgICAgICAgICAgIHNjb3Jlc1tpZF0gPSB7XHJcbiAgICAgICAgICAgICAgICBwb2ludHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzY29yZSxcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbixcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBudW1iZXJPZlNoaXBzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcmU6IG51bWJlck9mU2hpcHMsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IG51bWJlck9mU2hpcHNQb3NpdGlvbixcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBzY29yZXM7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZEYXlcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgZGF5IGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgc3RhcnQgb2YgYSBkYXlcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYSBkYXkgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdGFydE9mRGF5KG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IFR1ZSBTZXAgMDIgMjAxNCAwMDowMDowMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZEYXkoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSBcIi4uL3NoYXJlZC9tZXNzYWdlcy9NZXNzYWdlXCI7XHJcbmltcG9ydCB7IE1lc3NhZ2VUeXBlIH0gZnJvbSBcIi4uL3NoYXJlZC9tZXNzYWdlcy9NZXNzYWdlVHlwZVwiO1xyXG5pbXBvcnQgeyBfbG9nLCBfbG9nRGVidWcsIF9sb2dFcnJvciwgX2xvZ1dhcm5pbmcgfSBmcm9tIFwiLi4vc2hhcmVkL3V0aWxzL19sb2dcIjtcclxuaW1wb3J0IHsgX3Rocm93IH0gZnJvbSBcIi4uL3NoYXJlZC91dGlscy9fdGhyb3dcIjtcclxuaW1wb3J0IHsgQ29tYmF0UmVwb3J0U2VydmljZSB9IGZyb20gXCIuL2NvbWJhdC1yZXBvcnRzL0NvbWJhdFJlcG9ydFNlcnZpY2VcIjtcclxuaW1wb3J0IHsgRGVicmlzRmllbGRSZXBvcnRTZXJ2aWNlIH0gZnJvbSBcIi4vZGVicmlzLWZpZWxkcy1yZXBvcnRzL0RlYnJpc0ZpZWxkUmVwb3J0U2VydmljZVwiO1xyXG5pbXBvcnQgeyBFbXBpcmVTZXJ2aWNlIH0gZnJvbSBcIi4vZW1waXJlL0VtcGlyZVNlcnZpY2VcIjtcclxuaW1wb3J0IHsgRXhwZWRpdGlvblNlcnZpY2UgfSBmcm9tIFwiLi9leHBlZGl0aW9ucy9FeHBlZGl0aW9uU2VydmljZVwiO1xyXG5pbXBvcnQgeyBMaWZlZm9ybURpc2NvdmVyeVNlcnZpY2UgfSBmcm9tIFwiLi9saWZlZm9ybS1kaXNjb3Zlcmllcy9MaWZlZm9ybURpc2NvdmVyeVNlcnZpY2VcIjtcclxuaW1wb3J0IHsgSW50ZXJuYWxTZXJ2aWNlIH0gZnJvbSBcIi4vSW50ZXJuYWxTZXJ2aWNlXCI7XHJcbmltcG9ydCB7IE1lc3NhZ2VTZXJ2aWNlIH0gZnJvbSBcIi4vTWVzc2FnZVNlcnZpY2VcIjtcclxuaW1wb3J0IHsgU2VydmVyU2V0dGluZ3NTZXJ2aWNlIH0gZnJvbSBcIi4vc2VydmVyLXNldHRpbmdzL1NlcnZlclNldHRpbmdzU2VydmljZVwiO1xyXG5pbXBvcnQgeyBTZXR0aW5nc1NlcnZpY2UgfSBmcm9tIFwiLi9zZXR0aW5ncy9TZXR0aW5nc1NlcnZpY2VcIjtcclxuaW1wb3J0IHsgVW5pdmVyc2VIaXN0b3J5U2VydmljZSB9IGZyb20gXCIuL3VuaXZlcnNlLWhpc3RvcnkvVW5pdmVyc2VIaXN0b3J5U2VydmljZVwiO1xyXG5pbXBvcnQgeyBVbml2ZXJzZXNBbmRBY2NvdW50c1NlcnZpY2UgfSBmcm9tIFwiLi91bml2ZXJzZXMtYW5kLWFjY291bnRzL1VuaXZlcnNlc0FuZEFjY291bnRzU2VydmljZVwiO1xyXG5pbXBvcnQgeyBicm9hZGNhc3RNZXNzYWdlIH0gZnJvbSBcIkAvc2hhcmVkL2NvbW11bmljYXRpb24vYnJvYWRjYXN0TWVzc2FnZVwiO1xyXG5pbXBvcnQgeyBzZXJ2aWNlV29ya2VyVXVpZCB9IGZyb20gXCJAL3NoYXJlZC91dWlkXCI7XHJcblxyXG5leHBvcnQgY29uc3Qgc2V0dGluZ3NTZXJ2aWNlID0gbmV3IFNldHRpbmdzU2VydmljZSgpO1xyXG5cclxuY29uc3Qgc2VydmljZXM6IE1lc3NhZ2VTZXJ2aWNlW10gPSBbXHJcbiAgICBzZXR0aW5nc1NlcnZpY2UsXHJcbiAgICBuZXcgRXhwZWRpdGlvblNlcnZpY2UoKSxcclxuICAgIG5ldyBMaWZlZm9ybURpc2NvdmVyeVNlcnZpY2UoKSxcclxuICAgIG5ldyBDb21iYXRSZXBvcnRTZXJ2aWNlKCksXHJcbiAgICBuZXcgRGVicmlzRmllbGRSZXBvcnRTZXJ2aWNlKCksXHJcbiAgICBuZXcgRW1waXJlU2VydmljZSgpLFxyXG4gICAgbmV3IFVuaXZlcnNlSGlzdG9yeVNlcnZpY2UoKSxcclxuICAgIG5ldyBTZXJ2ZXJTZXR0aW5nc1NlcnZpY2UoKSxcclxuICAgIG5ldyBVbml2ZXJzZXNBbmRBY2NvdW50c1NlcnZpY2UoKSxcclxuXHJcbiAgICBuZXcgSW50ZXJuYWxTZXJ2aWNlKCksXHJcblxyXG4gICAgLy8gcmUtYnJvYWRjYXN0IHNlcnZpY2UgKGZpeCBmb3IgbWlzc2luZyBub3RpZmljYXRpb25zIGFuZCBvdGhlciBtZXNzYWdlcyBpbiBGRilcclxuICAgIHtcclxuICAgICAgICBvbk1lc3NhZ2U6IGFzeW5jIChtZXNzYWdlKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLnNlbmRlclV1aWQgIT0gc2VydmljZVdvcmtlclV1aWQpIHtcclxuICAgICAgICAgICAgICAgIGJyb2FkY2FzdE1lc3NhZ2UobWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuXTtcclxuXHJcbnRyeSB7XHJcbiAgICBjaHJvbWUucnVudGltZS5vbkluc3RhbGxlZC5hZGRMaXN0ZW5lcihhc3luYyAoKSA9PiBhd2FpdCBzaG93TWlncmF0aW9uV2luZG93KCkpO1xyXG4gICAgY2hyb21lLnJ1bnRpbWUub25NZXNzYWdlLmFkZExpc3RlbmVyKGFzeW5jIG1lc3NhZ2UgPT4gYXdhaXQgb25NZXNzYWdlKG1lc3NhZ2UpKTtcclxufSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIF9sb2dFcnJvcihlcnJvcik7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHNob3dNaWdyYXRpb25XaW5kb3coKSB7XHJcbiAgICBjb25zdCBoYXNEYXRhID0gKGF3YWl0IGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldEJ5dGVzSW5Vc2UoKSkgPiAwO1xyXG4gICAgY29uc3QgbWlncmF0ZWQgPSBhd2FpdCBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoJ21pZ3JhdGlvbi12MS10by12MicpO1xyXG4gICAgaWYgKCFoYXNEYXRhIHx8IG1pZ3JhdGVkWydtaWdyYXRpb24tdjEtdG8tdjInXSA9PSB0cnVlKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IGNocm9tZS50YWJzLmNyZWF0ZSh7XHJcbiAgICAgICAgYWN0aXZlOiB0cnVlLFxyXG4gICAgICAgIGluZGV4OiAwLFxyXG4gICAgICAgIHVybDogJy92aWV3cy9taWdyYXRlLmh0bWwnLFxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIG9uTWVzc2FnZShtZXNzYWdlOiBNZXNzYWdlPE1lc3NhZ2VUeXBlLCBhbnk+KSB7XHJcbiAgICBfbG9nRGVidWcoJ2dvdCBtZXNzYWdlJywgbmV3IERhdGUoKSwgbWVzc2FnZSk7XHJcblxyXG4gICAgaWYgKG1lc3NhZ2Uub2dhbWVNZXRhLnBsYXllcklkIDw9IDAgfHwgbWVzc2FnZS5vZ2FtZU1ldGEuc2VydmVySWQgPD0gMCkge1xyXG4gICAgICAgIF9sb2dXYXJuaW5nKCdza2lwcGluZyBtZXNzYWdlIGJlY2F1c2UgcGxheWVyaWQgPD0gMCBvciBzZXJ2ZXJpZCA8PSAwJywgbWVzc2FnZSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAoY29uc3Qgc2VydmljZSBvZiBzZXJ2aWNlcykge1xyXG4gICAgICAgIGF3YWl0IHNlcnZpY2Uub25NZXNzYWdlKG1lc3NhZ2UpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgTWVzc2FnZSwgTWVzc2FnZU9nYW1lTWV0YSB9IGZyb20gJy4uLy4uL3NoYXJlZC9tZXNzYWdlcy9NZXNzYWdlJztcclxuaW1wb3J0IHsgTWVzc2FnZVR5cGUgfSBmcm9tICcuLi8uLi9zaGFyZWQvbWVzc2FnZXMvTWVzc2FnZVR5cGUnO1xyXG5pbXBvcnQgeyBfdGhyb3cgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMvX3Rocm93JztcclxuaW1wb3J0IHsgTWVzc2FnZVNlcnZpY2UgfSBmcm9tICcuLi9NZXNzYWdlU2VydmljZSc7XHJcbmltcG9ydCB7IGJyb2FkY2FzdE1lc3NhZ2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvY29tbXVuaWNhdGlvbi9icm9hZGNhc3RNZXNzYWdlJztcclxuaW1wb3J0IHsgU2V0dGluZ3NNZXNzYWdlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL21lc3NhZ2VzL3NldHRpbmdzJztcclxuaW1wb3J0IHsgc2VydmljZVdvcmtlclV1aWQgfSBmcm9tICdAL3NoYXJlZC91dWlkJztcclxuaW1wb3J0IHsgU2V0dGluZ3MgfSBmcm9tICdAL3NoYXJlZC9tb2RlbHMvc2V0dGluZ3MvU2V0dGluZ3MnO1xyXG5pbXBvcnQgeyBMYW5ndWFnZUtleSB9IGZyb20gJ0Avc2hhcmVkL2kxOG4vTGFuZ3VhZ2VLZXknO1xyXG5pbXBvcnQgeyBsb2FkU2V0dGluZ3MgfSBmcm9tICdAL3NoYXJlZC9tb2RlbHMvc2V0dGluZ3MvbG9hZFNldHRpbmdzJztcclxuaW1wb3J0IHsgZ2V0TGFuZ3VhZ2UgfSBmcm9tICdAL3NoYXJlZC9pMThuL2dldExhbmd1YWdlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTZXR0aW5nc1NlcnZpY2UgaW1wbGVtZW50cyBNZXNzYWdlU2VydmljZSB7XHJcbiAgICBwcml2YXRlIF9zZXR0aW5nczogU2V0dGluZ3MgPSBudWxsITtcclxuXHJcbiAgICBwcml2YXRlIF9yZWFkeSE6IFByb21pc2U8dm9pZD47XHJcbiAgICBwcml2YXRlIF9yZXNvbHZlUmVhZHkhOiAoKSA9PiB2b2lkO1xyXG4gICAgcHVibGljIGdldCByZWFkeSgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmVhZHk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBzZXR0aW5ncygpOiBTZXR0aW5ncyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldHRpbmdzO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuX3JlYWR5ID0gbmV3IFByb21pc2U8dm9pZD4ocmVzb2x2ZSA9PiB0aGlzLl9yZXNvbHZlUmVhZHkgPSByZXNvbHZlKTtcclxuICAgICAgICB2b2lkIHRoaXMuaW5pdFNldHRpbmdzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBpbml0U2V0dGluZ3MoKSB7XHJcbiAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSBhd2FpdCBsb2FkU2V0dGluZ3MoJ19faW50ZXJuYWxfXycgYXMgTGFuZ3VhZ2VLZXkpO1xyXG4gICAgICAgIHRoaXMuX3Jlc29sdmVSZWFkeSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyBvbk1lc3NhZ2UobWVzc2FnZTogTWVzc2FnZTxNZXNzYWdlVHlwZSwgYW55Pik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHN3aXRjaChtZXNzYWdlLnR5cGUpIHsgICAgICAgICAgICBcclxuICAgICAgICAgICAgY2FzZSBNZXNzYWdlVHlwZS5SZXF1ZXN0U2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYnJvYWRjYXN0U2V0dGluZ3MobWVzc2FnZS5vZ2FtZU1ldGEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuTm90aWZ5U2V0dGluZ3NVcGRhdGU6IHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuaW5pdFNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFzeW5jIGJyb2FkY2FzdFNldHRpbmdzKG1ldGE6IE1lc3NhZ2VPZ2FtZU1ldGEsIHV1aWQ/OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBjb25zdCBsYW5nID0gZ2V0TGFuZ3VhZ2UobWV0YS51c2VyTGFuZ3VhZ2UpID8/IExhbmd1YWdlS2V5LmVuO1xyXG4gICAgICAgIGNvbnN0IHNldHRpbmdzID0gYXdhaXQgbG9hZFNldHRpbmdzKGxhbmcpO1xyXG5cclxuICAgICAgICBjb25zdCBzZXR0aW5nc01lc3NhZ2U6IFNldHRpbmdzTWVzc2FnZSA9IHtcclxuICAgICAgICAgICAgb2dhbWVNZXRhOiBtZXRhLFxyXG4gICAgICAgICAgICB0eXBlOiBNZXNzYWdlVHlwZS5TZXR0aW5ncyxcclxuICAgICAgICAgICAgZGF0YTogc2V0dGluZ3MsXHJcbiAgICAgICAgICAgIHNlbmRlclV1aWQ6IHV1aWQgPz8gc2VydmljZVdvcmtlclV1aWQsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBhd2FpdCBicm9hZGNhc3RNZXNzYWdlKHNldHRpbmdzTWVzc2FnZSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBNZXNzYWdlLCBNZXNzYWdlT2dhbWVNZXRhIH0gZnJvbSAnLi4vLi4vc2hhcmVkL21lc3NhZ2VzL01lc3NhZ2UnO1xyXG5pbXBvcnQgeyBNZXNzYWdlVHlwZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9tZXNzYWdlcy9NZXNzYWdlVHlwZSc7XHJcbmltcG9ydCB7IEV4cGVkaXRpb25NZXNzYWdlLCBOZXdFeHBlZGl0aW9uTWVzc2FnZSwgVHJhY2tFeHBlZGl0aW9uTWVzc2FnZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9tZXNzYWdlcy90cmFja2luZy9leHBlZGl0aW9ucyc7XHJcbmltcG9ydCB7IF90aHJvdyB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy9fdGhyb3cnO1xyXG5pbXBvcnQgeyBNZXNzYWdlU2VydmljZSB9IGZyb20gJy4uL01lc3NhZ2VTZXJ2aWNlJztcclxuaW1wb3J0IHsgRXhwZWRpdGlvbk1vZHVsZSB9IGZyb20gJy4vRXhwZWRpdGlvbk1vZHVsZSc7XHJcbmltcG9ydCB7IGJyb2FkY2FzdE1lc3NhZ2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvY29tbXVuaWNhdGlvbi9icm9hZGNhc3RNZXNzYWdlJztcclxuaW1wb3J0IHsgTWVzc2FnZVRyYWNraW5nRXJyb3JNZXNzYWdlIH0gZnJvbSAnQC9zaGFyZWQvbWVzc2FnZXMvdHJhY2tpbmcvbWlzYyc7XHJcbmltcG9ydCB7IHNlcnZpY2VXb3JrZXJVdWlkIH0gZnJvbSAnQC9zaGFyZWQvdXVpZCc7XHJcblxyXG5leHBvcnQgY2xhc3MgRXhwZWRpdGlvblNlcnZpY2UgaW1wbGVtZW50cyBNZXNzYWdlU2VydmljZSB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGV4cGVkaXRpb25Nb2R1bGUgPSBuZXcgRXhwZWRpdGlvbk1vZHVsZSgpO1xyXG5cclxuICAgIHB1YmxpYyBhc3luYyBvbk1lc3NhZ2UobWVzc2FnZTogTWVzc2FnZTxNZXNzYWdlVHlwZSwgYW55Pik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGlmIChtZXNzYWdlLnR5cGUgIT0gTWVzc2FnZVR5cGUuVHJhY2tFeHBlZGl0aW9uKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgbXNnID0gbWVzc2FnZSBhcyBUcmFja0V4cGVkaXRpb25NZXNzYWdlO1xyXG4gICAgICAgIGNvbnN0IHRyeVJlc3VsdCA9IGF3YWl0IHRoaXMuZXhwZWRpdGlvbk1vZHVsZS50cnlUcmFja0V4cGVkaXRpb24obXNnKTtcclxuXHJcbiAgICAgICAgaWYgKCF0cnlSZXN1bHQuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2U6IE1lc3NhZ2VUcmFja2luZ0Vycm9yTWVzc2FnZSA9IHtcclxuICAgICAgICAgICAgICAgIG9nYW1lTWV0YTogbWVzc2FnZS5vZ2FtZU1ldGEsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBNZXNzYWdlVHlwZS5UcmFja2luZ0Vycm9yLFxyXG4gICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBtc2cuZGF0YS5pZCxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZXhwZWRpdGlvbicsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2VuZGVyVXVpZDogc2VydmljZVdvcmtlclV1aWQsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGF3YWl0IGJyb2FkY2FzdE1lc3NhZ2UoZXJyb3JNZXNzYWdlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgeyBleHBlZGl0aW9uLCBpc0FscmVhZHlUcmFja2VkIH0gPSB0cnlSZXN1bHQucmVzdWx0O1xyXG5cclxuICAgICAgICAvLyBicm9hZGNhc3QgXCJuZXcgZXhwZWRpdGlvbiBhdmFpbGFibGVcIlxyXG4gICAgICAgIGlmICghaXNBbHJlYWR5VHJhY2tlZCkge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdFeHBlZGl0aW9uTWVzc2FnZTogTmV3RXhwZWRpdGlvbk1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICBvZ2FtZU1ldGE6IG1lc3NhZ2Uub2dhbWVNZXRhLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogTWVzc2FnZVR5cGUuTmV3RXhwZWRpdGlvbixcclxuICAgICAgICAgICAgICAgIGRhdGE6IGV4cGVkaXRpb24sXHJcbiAgICAgICAgICAgICAgICBzZW5kZXJVdWlkOiBzZXJ2aWNlV29ya2VyVXVpZCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgYXdhaXQgYnJvYWRjYXN0TWVzc2FnZShuZXdFeHBlZGl0aW9uTWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHNlbmQgZGF0YSBvZiB0aGUgc3BlY2lmaWMgZXhwZWRpdGlvblxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBleHBlZGl0aW9uTWVzc2FnZTogRXhwZWRpdGlvbk1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICBvZ2FtZU1ldGE6IG1lc3NhZ2Uub2dhbWVNZXRhLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogTWVzc2FnZVR5cGUuRXhwZWRpdGlvbixcclxuICAgICAgICAgICAgICAgIGRhdGE6IGV4cGVkaXRpb24sXHJcbiAgICAgICAgICAgICAgICBzZW5kZXJVdWlkOiBzZXJ2aWNlV29ya2VyVXVpZCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgYXdhaXQgYnJvYWRjYXN0TWVzc2FnZShleHBlZGl0aW9uTWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgTWVzc2FnZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9tZXNzYWdlcy9NZXNzYWdlJztcclxuaW1wb3J0IHsgTWVzc2FnZVR5cGUgfSBmcm9tICcuLi8uLi9zaGFyZWQvbWVzc2FnZXMvTWVzc2FnZVR5cGUnO1xyXG5pbXBvcnQgeyBfdGhyb3cgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMvX3Rocm93JztcclxuaW1wb3J0IHsgTWVzc2FnZVNlcnZpY2UgfSBmcm9tICcuLi9NZXNzYWdlU2VydmljZSc7XHJcbmltcG9ydCB7IGJyb2FkY2FzdE1lc3NhZ2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvY29tbXVuaWNhdGlvbi9icm9hZGNhc3RNZXNzYWdlJztcclxuaW1wb3J0IHsgTWVzc2FnZVRyYWNraW5nRXJyb3JNZXNzYWdlIH0gZnJvbSAnQC9zaGFyZWQvbWVzc2FnZXMvdHJhY2tpbmcvbWlzYyc7XHJcbmltcG9ydCB7IHNlcnZpY2VXb3JrZXJVdWlkIH0gZnJvbSAnQC9zaGFyZWQvdXVpZCc7XHJcbmltcG9ydCB7IExpZmVmb3JtRGlzY292ZXJ5TWVzc2FnZSwgTmV3TGlmZWZvcm1EaXNjb3ZlcnlNZXNzYWdlLCBUcmFja0xpZmVmb3JtRGlzY292ZXJ5TWVzc2FnZSB9IGZyb20gJ0Avc2hhcmVkL21lc3NhZ2VzL3RyYWNraW5nL2xpZmVmb3JtLWRpc2NvdmVyaWVzJztcclxuaW1wb3J0IHsgTGlmZWZvcm1EaXNjb3ZlcnlNb2R1bGUgfSBmcm9tICcuL0xpZmVmb3JtRGlzY292ZXJ5TW9kdWxlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBMaWZlZm9ybURpc2NvdmVyeVNlcnZpY2UgaW1wbGVtZW50cyBNZXNzYWdlU2VydmljZSB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGxpZmVmb3JtRGlzY292ZXJ5TW9kdWxlID0gbmV3IExpZmVmb3JtRGlzY292ZXJ5TW9kdWxlKCk7XHJcblxyXG4gICAgcHVibGljIGFzeW5jIG9uTWVzc2FnZShtZXNzYWdlOiBNZXNzYWdlPE1lc3NhZ2VUeXBlLCBhbnk+KTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgc3dpdGNoIChtZXNzYWdlLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBNZXNzYWdlVHlwZS5UcmFja0xpZmVmb3JtRGlzY292ZXJ5OiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSBtZXNzYWdlIGFzIFRyYWNrTGlmZWZvcm1EaXNjb3ZlcnlNZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdHJ5UmVzdWx0ID0gYXdhaXQgdGhpcy5saWZlZm9ybURpc2NvdmVyeU1vZHVsZS50cnlUcmFja0V4cGVkaXRpb24obXNnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIXRyeVJlc3VsdC5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlOiBNZXNzYWdlVHJhY2tpbmdFcnJvck1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9nYW1lTWV0YTogbWVzc2FnZS5vZ2FtZU1ldGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IE1lc3NhZ2VUeXBlLlRyYWNraW5nRXJyb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBtc2cuZGF0YS5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdsaWZlZm9ybS1kaXNjb3ZlcnknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5kZXJVdWlkOiBzZXJ2aWNlV29ya2VyVXVpZCxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGJyb2FkY2FzdE1lc3NhZ2UoZXJyb3JNZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBsaWZlZm9ybURpc2NvdmVyeSwgaXNBbHJlYWR5VHJhY2tlZCB9ID0gdHJ5UmVzdWx0LnJlc3VsdDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBicm9hZGNhc3QgXCJuZXcgbGlmZWZvcm0gZGlzY292ZXJ5IGF2YWlsYWJsZVwiXHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzQWxyZWFkeVRyYWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdMaWZlZm9ybURpc2NvdmVyeUV4cGVkaXRpb25NZXNzYWdlOiBOZXdMaWZlZm9ybURpc2NvdmVyeU1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9nYW1lTWV0YTogbWVzc2FnZS5vZ2FtZU1ldGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IE1lc3NhZ2VUeXBlLk5ld0xpZmVmb3JtRGlzY292ZXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBsaWZlZm9ybURpc2NvdmVyeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZGVyVXVpZDogc2VydmljZVdvcmtlclV1aWQsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBicm9hZGNhc3RNZXNzYWdlKG5ld0xpZmVmb3JtRGlzY292ZXJ5RXhwZWRpdGlvbk1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gc2VuZCBkYXRhIG9mIHRoZSBzcGVjaWZpYyBsaWZlZm9ybSBkaXNjb3ZlcnlcclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpZmVmb3JtRGlzY292ZXJ5TWVzc2FnZTogTGlmZWZvcm1EaXNjb3ZlcnlNZXNzYWdlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvZ2FtZU1ldGE6IG1lc3NhZ2Uub2dhbWVNZXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBNZXNzYWdlVHlwZS5MaWZlZm9ybURpc2NvdmVyeSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogbGlmZWZvcm1EaXNjb3ZlcnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRlclV1aWQ6IHNlcnZpY2VXb3JrZXJVdWlkLFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgYnJvYWRjYXN0TWVzc2FnZShsaWZlZm9ybURpc2NvdmVyeU1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgTWVzc2FnZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9tZXNzYWdlcy9NZXNzYWdlJztcclxuaW1wb3J0IHsgTWVzc2FnZVR5cGUgfSBmcm9tICcuLi8uLi9zaGFyZWQvbWVzc2FnZXMvTWVzc2FnZVR5cGUnO1xyXG5pbXBvcnQgeyBfdGhyb3cgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMvX3Rocm93JztcclxuaW1wb3J0IHsgTWVzc2FnZVNlcnZpY2UgfSBmcm9tICcuLi9NZXNzYWdlU2VydmljZSc7XHJcbmltcG9ydCB7IENvbWJhdFJlcG9ydE1vZHVsZSB9IGZyb20gJy4vQ29tYmF0UmVwb3J0TW9kdWxlJztcclxuaW1wb3J0IHsgYnJvYWRjYXN0TWVzc2FnZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9jb21tdW5pY2F0aW9uL2Jyb2FkY2FzdE1lc3NhZ2UnO1xyXG5pbXBvcnQgeyBDb21iYXRSZXBvcnRNZXNzYWdlLCBDb21iYXRSZXBvcnRVbmtub3duTWVzc2FnZSwgTmV3Q29tYmF0UmVwb3J0TWVzc2FnZSwgUmVxdWVzdFNpbmdsZUNvbWJhdFJlcG9ydE1lc3NhZ2UsIFRyYWNrQ29tYmF0UmVwb3J0TWVzc2FnZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9tZXNzYWdlcy90cmFja2luZy9jb21iYXQtcmVwb3J0cyc7XHJcbmltcG9ydCB7IHNlcnZpY2VXb3JrZXJVdWlkIH0gZnJvbSAnQC9zaGFyZWQvdXVpZCc7XHJcbmltcG9ydCB7IE1lc3NhZ2VUcmFja2luZ0Vycm9yTWVzc2FnZSwgV2lsbE5vdEJlVHJhY2tlZE1lc3NhZ2UgfSBmcm9tICdAL3NoYXJlZC9tZXNzYWdlcy90cmFja2luZy9taXNjJztcclxuaW1wb3J0IHsgX2xvZ0RlYnVnIH0gZnJvbSAnQC9zaGFyZWQvdXRpbHMvX2xvZyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQ29tYmF0UmVwb3J0U2VydmljZSBpbXBsZW1lbnRzIE1lc3NhZ2VTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgY29tYmF0UmVwb3J0TW9kdWxlID0gbmV3IENvbWJhdFJlcG9ydE1vZHVsZSgpO1xyXG5cclxuICAgIHB1YmxpYyBhc3luYyBvbk1lc3NhZ2UobWVzc2FnZTogTWVzc2FnZTxNZXNzYWdlVHlwZSwgYW55Pik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIHN3aXRjaCAobWVzc2FnZS50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuUmVxdWVzdFNpbmdsZUNvbWJhdFJlcG9ydDoge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBkYXRhOiBpZCB9ID0gbWVzc2FnZSBhcyBSZXF1ZXN0U2luZ2xlQ29tYmF0UmVwb3J0TWVzc2FnZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRyeVJlc3VsdCA9IGF3YWl0IHRoaXMuY29tYmF0UmVwb3J0TW9kdWxlLnRyeUdldFNpbmdsZVJlcG9ydChtZXNzYWdlIGFzIFJlcXVlc3RTaW5nbGVDb21iYXRSZXBvcnRNZXNzYWdlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyB1bmtub3duIFxyXG4gICAgICAgICAgICAgICAgaWYoIXRyeVJlc3VsdC5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdW5rbm93bk1lc3NhZ2U6IENvbWJhdFJlcG9ydFVua25vd25NZXNzYWdlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvZ2FtZU1ldGE6IG1lc3NhZ2Uub2dhbWVNZXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBNZXNzYWdlVHlwZS5Db21iYXRSZXBvcnRVbmtub3duLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBpZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZGVyVXVpZDogc2VydmljZVdvcmtlclV1aWQsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBicm9hZGNhc3RNZXNzYWdlKHVua25vd25NZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8ga25vd24gYW5kIGlnbm9yZWRcclxuICAgICAgICAgICAgICAgIGlmKHRyeVJlc3VsdC5yZXN1bHQuaWdub3JlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlnbm9yZU1lc3NhZ2U6IFdpbGxOb3RCZVRyYWNrZWRNZXNzYWdlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvZ2FtZU1ldGE6IG1lc3NhZ2Uub2dhbWVNZXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBNZXNzYWdlVHlwZS5XaWxsTm90QmVUcmFja2VkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogdHJ5UmVzdWx0LnJlc3VsdC5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjb21iYXQtcmVwb3J0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZGVyVXVpZDogc2VydmljZVdvcmtlclV1aWQsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBicm9hZGNhc3RNZXNzYWdlKGlnbm9yZU1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBrbm93biBjb21iYXRcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbWJhdFJlcG9ydE1lc3NhZ2U6IENvbWJhdFJlcG9ydE1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2dhbWVNZXRhOiBtZXNzYWdlLm9nYW1lTWV0YSxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBNZXNzYWdlVHlwZS5Db21iYXRSZXBvcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogdHJ5UmVzdWx0LnJlc3VsdC5yZXBvcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgc2VuZGVyVXVpZDogc2VydmljZVdvcmtlclV1aWQsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgYnJvYWRjYXN0TWVzc2FnZShjb21iYXRSZXBvcnRNZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLlRyYWNrQ29tYmF0UmVwb3J0OiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSBtZXNzYWdlIGFzIFRyYWNrQ29tYmF0UmVwb3J0TWVzc2FnZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRyeVJlc3VsdCA9IGF3YWl0IHRoaXMuY29tYmF0UmVwb3J0TW9kdWxlLnRyeVRyYWNrQ29tYmF0UmVwb3J0KG1zZyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRyeVJlc3VsdC5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlOiBNZXNzYWdlVHJhY2tpbmdFcnJvck1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9nYW1lTWV0YTogbWVzc2FnZS5vZ2FtZU1ldGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IE1lc3NhZ2VUeXBlLlRyYWNraW5nRXJyb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBtc2cuZGF0YS5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjb21iYXQtcmVwb3J0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZGVyVXVpZDogc2VydmljZVdvcmtlclV1aWQsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBicm9hZGNhc3RNZXNzYWdlKGVycm9yTWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmKHRyeVJlc3VsdC5yZXN1bHQuaWdub3JlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlnbm9yZU1lc3NhZ2U6IFdpbGxOb3RCZVRyYWNrZWRNZXNzYWdlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvZ2FtZU1ldGE6IG1lc3NhZ2Uub2dhbWVNZXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBNZXNzYWdlVHlwZS5XaWxsTm90QmVUcmFja2VkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogdHJ5UmVzdWx0LnJlc3VsdC5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjb21iYXQtcmVwb3J0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZGVyVXVpZDogc2VydmljZVdvcmtlclV1aWQsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBicm9hZGNhc3RNZXNzYWdlKGlnbm9yZU1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIGJyb2FkY2FzdCBcIm5ldyBjb21iYXQgcmVwb3J0IGF2YWlsYWJsZVwiXHJcbiAgICAgICAgICAgICAgICBpZiAoIXRyeVJlc3VsdC5yZXN1bHQuaXNBbHJlYWR5VHJhY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0NvbWJhdFJlcG9ydE1lc3NhZ2U6IE5ld0NvbWJhdFJlcG9ydE1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9nYW1lTWV0YTogbWVzc2FnZS5vZ2FtZU1ldGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IE1lc3NhZ2VUeXBlLk5ld0NvbWJhdFJlcG9ydCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogdHJ5UmVzdWx0LnJlc3VsdC5yZXBvcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRlclV1aWQ6IHNlcnZpY2VXb3JrZXJVdWlkLFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgYnJvYWRjYXN0TWVzc2FnZShuZXdDb21iYXRSZXBvcnRNZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIHNlbmQgZGF0YSBvZiB0aGUgc3BlY2lmaWMgY29tYmF0IHJlcG9ydFxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tYmF0UmVwb3J0TWVzc2FnZTogQ29tYmF0UmVwb3J0TWVzc2FnZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2dhbWVNZXRhOiBtZXNzYWdlLm9nYW1lTWV0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogTWVzc2FnZVR5cGUuQ29tYmF0UmVwb3J0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB0cnlSZXN1bHQucmVzdWx0LnJlcG9ydCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZGVyVXVpZDogc2VydmljZVdvcmtlclV1aWQsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBicm9hZGNhc3RNZXNzYWdlKGNvbWJhdFJlcG9ydE1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgTWVzc2FnZSwgTWVzc2FnZU9nYW1lTWV0YSB9IGZyb20gJy4uLy4uL3NoYXJlZC9tZXNzYWdlcy9NZXNzYWdlJztcclxuaW1wb3J0IHsgTWVzc2FnZVR5cGUgfSBmcm9tICcuLi8uLi9zaGFyZWQvbWVzc2FnZXMvTWVzc2FnZVR5cGUnO1xyXG5pbXBvcnQgeyBfdGhyb3cgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMvX3Rocm93JztcclxuaW1wb3J0IHsgTWVzc2FnZVNlcnZpY2UgfSBmcm9tICcuLi9NZXNzYWdlU2VydmljZSc7XHJcbmltcG9ydCB7IERlYnJpc0ZpZWxkUmVwb3J0TW9kdWxlIH0gZnJvbSAnLi9EZWJyaXNGaWVsZFJlcG9ydE1vZHVsZSc7XHJcbmltcG9ydCB7IGJyb2FkY2FzdE1lc3NhZ2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvY29tbXVuaWNhdGlvbi9icm9hZGNhc3RNZXNzYWdlJztcclxuaW1wb3J0IHsgRGVicmlzRmllbGRSZXBvcnRNZXNzYWdlLCBOZXdEZWJyaXNGaWVsZFJlcG9ydE1lc3NhZ2UsIFRyYWNrRGVicmlzRmllbGRSZXBvcnRNZXNzYWdlLCBUcmFja01hbnVhbERlYnJpc0ZpZWxkUmVwb3J0TWVzc2FnZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9tZXNzYWdlcy90cmFja2luZy9kZWJyaXMtZmllbGRzJztcclxuaW1wb3J0IHsgTWVzc2FnZVRyYWNraW5nRXJyb3JNZXNzYWdlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL21lc3NhZ2VzL3RyYWNraW5nL21pc2MnO1xyXG5pbXBvcnQgeyBzZXJ2aWNlV29ya2VyVXVpZCB9IGZyb20gJ0Avc2hhcmVkL3V1aWQnO1xyXG5cclxuZXhwb3J0IGNsYXNzIERlYnJpc0ZpZWxkUmVwb3J0U2VydmljZSBpbXBsZW1lbnRzIE1lc3NhZ2VTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZGZNb2R1bGUgPSBuZXcgRGVicmlzRmllbGRSZXBvcnRNb2R1bGUoKTtcclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgb25NZXNzYWdlKG1lc3NhZ2U6IE1lc3NhZ2U8TWVzc2FnZVR5cGUsIGFueT4pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBzd2l0Y2ggKG1lc3NhZ2UudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLlRyYWNrRGVicmlzRmllbGRSZXBvcnQ6IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1zZyA9IG1lc3NhZ2UgYXMgVHJhY2tEZWJyaXNGaWVsZFJlcG9ydE1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0cnlSZXN1bHQgPSBhd2FpdCB0aGlzLmRmTW9kdWxlLnRyeVRyYWNrRGVicmlzRmllbGRSZXBvcnQobXNnKTtcclxuICAgICAgICAgICAgICAgIGlmICghdHJ5UmVzdWx0LnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2U6IE1lc3NhZ2VUcmFja2luZ0Vycm9yTWVzc2FnZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2dhbWVNZXRhOiBtZXNzYWdlLm9nYW1lTWV0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogTWVzc2FnZVR5cGUuVHJhY2tpbmdFcnJvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IG1zZy5kYXRhLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RlYnJpcy1maWVsZC1yZXBvcnQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5kZXJVdWlkOiBzZXJ2aWNlV29ya2VyVXVpZCxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGJyb2FkY2FzdE1lc3NhZ2UoZXJyb3JNZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgeyByZXBvcnQsIGlzQWxyZWFkeVRyYWNrZWQgfSA9IHRyeVJlc3VsdC5yZXN1bHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gYnJvYWRjYXN0IFwibmV3IGRmIHJlcG9ydCBhdmFpbGFibGVcIlxyXG4gICAgICAgICAgICAgICAgaWYgKCFpc0FscmVhZHlUcmFja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3RGZSZXBvcnRNZXNzYWdlOiBOZXdEZWJyaXNGaWVsZFJlcG9ydE1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9nYW1lTWV0YTogbWVzc2FnZS5vZ2FtZU1ldGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IE1lc3NhZ2VUeXBlLk5ld0RlYnJpc0ZpZWxkUmVwb3J0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiByZXBvcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRlclV1aWQ6IHNlcnZpY2VXb3JrZXJVdWlkLFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgYnJvYWRjYXN0TWVzc2FnZShuZXdEZlJlcG9ydE1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gc2VuZCBkYXRhIG9mIHRoZSBzcGVjaWZpYyBleHBlZGl0aW9uXHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkZlJlcG9ydE1lc3NhZ2U6IERlYnJpc0ZpZWxkUmVwb3J0TWVzc2FnZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2dhbWVNZXRhOiBtZXNzYWdlLm9nYW1lTWV0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogTWVzc2FnZVR5cGUuRGVicmlzRmllbGRSZXBvcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHJlcG9ydCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZGVyVXVpZDogc2VydmljZVdvcmtlclV1aWQsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBicm9hZGNhc3RNZXNzYWdlKGRmUmVwb3J0TWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuVHJhY2tNYW51YWxEZWJyaXNGaWVsZFJlcG9ydDoge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbXNnID0gbWVzc2FnZSBhcyBUcmFja01hbnVhbERlYnJpc0ZpZWxkUmVwb3J0TWVzc2FnZTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZGZNb2R1bGUudHJhY2tNYW51YWxEZWJyaXNGaWVsZFJlcG9ydChtc2cpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdEZlJlcG9ydE1lc3NhZ2U6IE5ld0RlYnJpc0ZpZWxkUmVwb3J0TWVzc2FnZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBvZ2FtZU1ldGE6IG1lc3NhZ2Uub2dhbWVNZXRhLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IE1lc3NhZ2VUeXBlLk5ld0RlYnJpc0ZpZWxkUmVwb3J0LFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IG1zZy5kYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlbmRlclV1aWQ6IHNlcnZpY2VXb3JrZXJVdWlkLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IGJyb2FkY2FzdE1lc3NhZ2UobmV3RGZSZXBvcnRNZXNzYWdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCB7IE1lc3NhZ2UsIE1lc3NhZ2VPZ2FtZU1ldGEgfSBmcm9tICcuLi8uLi9zaGFyZWQvbWVzc2FnZXMvTWVzc2FnZSc7XHJcbmltcG9ydCB7IE1lc3NhZ2VUeXBlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL21lc3NhZ2VzL01lc3NhZ2VUeXBlJztcclxuaW1wb3J0IHsgX3Rocm93IH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzL190aHJvdyc7XHJcbmltcG9ydCB7IE1lc3NhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vTWVzc2FnZVNlcnZpY2UnO1xyXG5pbXBvcnQgeyBicm9hZGNhc3RNZXNzYWdlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2NvbW11bmljYXRpb24vYnJvYWRjYXN0TWVzc2FnZSc7XHJcbmltcG9ydCB7IEVtcGlyZU1vZHVsZSB9IGZyb20gJy4vRW1waXJlTW9kdWxlJztcclxuaW1wb3J0IHsgTm90aWZ5RW1waXJlRGF0YVVwZGF0ZU1lc3NhZ2UsIFVwZGF0ZUFjdGl2ZU9mZmljZXJzTWVzc2FnZSwgVXBkYXRlQWxsaWFuY2VDbGFzc01lc3NhZ2UsIFVwZGF0ZUZsZWV0c01lc3NhZ2UsIFVwZGF0ZUxpZmVmb3JtRXhwZXJpZW5jZU1lc3NhZ2UsIFVwZGF0ZU93bmVkUGxhbmV0c01lc3NhZ2UsIFVwZGF0ZVBsYW5ldEFjdGl2ZUl0ZW1zTWVzc2FnZSwgVXBkYXRlUGxhbmV0QWN0aXZlTGlmZWZvcm1CdWlsZGluZ0xldmVsc01lc3NhZ2UsIFVwZGF0ZVBsYW5ldEFjdGl2ZUxpZmVmb3JtVGVjaG5vbG9neUxldmVsc01lc3NhZ2UsIFVwZGF0ZVBsYW5ldEJ1aWxkaW5nTGV2ZWxzTWVzc2FnZSwgVXBkYXRlUGxhbmV0RGVmZW5zZUNvdW50c01lc3NhZ2UsIFVwZGF0ZVBsYW5ldExpZmVmb3JtQnVpbGRpbmdMZXZlbHNNZXNzYWdlLCBVcGRhdGVQbGFuZXRMaWZlZm9ybVRlY2hub2xvZ3lMZXZlbHNNZXNzYWdlLCBVcGRhdGVQbGFuZXRNaXNzaWxlQ291bnRzTWVzc2FnZSwgVXBkYXRlUGxhbmV0UHJvZHVjdGlvblNldHRpbmdzTWVzc2FnZSwgVXBkYXRlUGxhbmV0U2hpcENvdW50c01lc3NhZ2UsIFVwZGF0ZVBsYXllckNsYXNzTWVzc2FnZSwgVXBkYXRlUmVzZWFyY2hMZXZlbHNNZXNzYWdlLCBVcGRhdGVTZWxlY3RlZExpZmVmb3JtTWVzc2FnZSwgfSBmcm9tICcuLi8uLi9zaGFyZWQvbWVzc2FnZXMvdHJhY2tpbmcvZW1waXJlJztcclxuaW1wb3J0IHsgc2VydmljZVdvcmtlclV1aWQgfSBmcm9tICdAL3NoYXJlZC91dWlkJztcclxuXHJcbmV4cG9ydCBjbGFzcyBFbXBpcmVTZXJ2aWNlIGltcGxlbWVudHMgTWVzc2FnZVNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBlbXBpcmVNb2R1bGUgPSBuZXcgRW1waXJlTW9kdWxlKCk7XHJcblxyXG4gICAgcHVibGljIGFzeW5jIG9uTWVzc2FnZShtZXNzYWdlOiBNZXNzYWdlPE1lc3NhZ2VUeXBlLCBhbnk+KTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgc3dpdGNoIChtZXNzYWdlLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBNZXNzYWdlVHlwZS5VcGRhdGVBY3RpdmVPZmZpY2Vyczoge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbXNnID0gbWVzc2FnZSBhcyBVcGRhdGVBY3RpdmVPZmZpY2Vyc01lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmVtcGlyZU1vZHVsZS51cGRhdGVPZmZpY2Vycyhtc2cub2dhbWVNZXRhLCBtc2cuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2FzZSBNZXNzYWdlVHlwZS5VcGRhdGVBbGxpYW5jZUNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSBtZXNzYWdlIGFzIFVwZGF0ZUFsbGlhbmNlQ2xhc3NNZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lbXBpcmVNb2R1bGUudXBkYXRlQWxsaWFuY2UobXNnLm9nYW1lTWV0YSwgbXNnLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuVXBkYXRlUGxhbmV0QWN0aXZlSXRlbXM6IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1zZyA9IG1lc3NhZ2UgYXMgVXBkYXRlUGxhbmV0QWN0aXZlSXRlbXNNZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lbXBpcmVNb2R1bGUudXBkYXRlQWN0aXZlSXRlbXMobXNnLm9nYW1lTWV0YSwgbXNnLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuVXBkYXRlUGxhbmV0QnVpbGRpbmdMZXZlbHM6IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1zZyA9IG1lc3NhZ2UgYXMgVXBkYXRlUGxhbmV0QnVpbGRpbmdMZXZlbHNNZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lbXBpcmVNb2R1bGUudXBkYXRlQnVpbGRpbmdMZXZlbHMobXNnLm9nYW1lTWV0YSwgbXNnLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuVXBkYXRlUGxhbmV0RGF0YToge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbXNnID0gbWVzc2FnZSBhcyBVcGRhdGVPd25lZFBsYW5ldHNNZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lbXBpcmVNb2R1bGUudXBkYXRlQmFzaWNQbGFuZXRzKG1zZy5vZ2FtZU1ldGEsIG1zZy5kYXRhKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLlVwZGF0ZVBsYW5ldERlZmVuc2VDb3VudHM6IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1zZyA9IG1lc3NhZ2UgYXMgVXBkYXRlUGxhbmV0RGVmZW5zZUNvdW50c01lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmVtcGlyZU1vZHVsZS51cGRhdGVQbGFuZXREZWZlbnNlcyhtc2cub2dhbWVNZXRhLCBtc2cuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2FzZSBNZXNzYWdlVHlwZS5VcGRhdGVQbGFuZXRNaXNzaWxlQ291bnRzOiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSBtZXNzYWdlIGFzIFVwZGF0ZVBsYW5ldE1pc3NpbGVDb3VudHNNZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lbXBpcmVNb2R1bGUudXBkYXRlUGxhbmV0TWlzc2lsZXMobXNnLm9nYW1lTWV0YSwgbXNnLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuVXBkYXRlUGxhbmV0U2hpcENvdW50czoge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbXNnID0gbWVzc2FnZSBhcyBVcGRhdGVQbGFuZXRTaGlwQ291bnRzTWVzc2FnZTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZW1waXJlTW9kdWxlLnVwZGF0ZVBsYW5ldFNoaXBzKG1zZy5vZ2FtZU1ldGEsIG1zZy5kYXRhKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLlVwZGF0ZVBsYXllckNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSBtZXNzYWdlIGFzIFVwZGF0ZVBsYXllckNsYXNzTWVzc2FnZTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZW1waXJlTW9kdWxlLnVwZGF0ZVBsYXllckNsYXNzKG1zZy5vZ2FtZU1ldGEsIG1zZy5kYXRhKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLlVwZGF0ZVJlc2VhcmNoTGV2ZWxzOiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSBtZXNzYWdlIGFzIFVwZGF0ZVJlc2VhcmNoTGV2ZWxzTWVzc2FnZTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZW1waXJlTW9kdWxlLnVwZGF0ZVJlc2VhcmNoTGV2ZWxzKG1zZy5vZ2FtZU1ldGEsIG1zZy5kYXRhKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLlVwZGF0ZVBsYW5ldFByb2R1Y3Rpb25TZXR0aW5nczoge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbXNnID0gbWVzc2FnZSBhcyBVcGRhdGVQbGFuZXRQcm9kdWN0aW9uU2V0dGluZ3NNZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lbXBpcmVNb2R1bGUudXBkYXRlUHJvZHVjdGlvblNldHRpbmdzKG1zZy5vZ2FtZU1ldGEsIG1zZy5kYXRhKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgY2FzZSBNZXNzYWdlVHlwZS5VcGRhdGVTZWxlY3RlZExpZmVmb3JtOiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSBtZXNzYWdlIGFzIFVwZGF0ZVNlbGVjdGVkTGlmZWZvcm1NZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lbXBpcmVNb2R1bGUudXBkYXRlU2VsZWN0ZWRMaWZlZm9ybShtc2cub2dhbWVNZXRhLCBtc2cuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2FzZSBNZXNzYWdlVHlwZS5VcGRhdGVMaWZlZm9ybUV4cGVyaWVuY2U6IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1zZyA9IG1lc3NhZ2UgYXMgVXBkYXRlTGlmZWZvcm1FeHBlcmllbmNlTWVzc2FnZTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZW1waXJlTW9kdWxlLnVwZGF0ZUxpZmVmb3JtRXhwZXJpZW5jZShtc2cub2dhbWVNZXRhLCBtc2cuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2FzZSBNZXNzYWdlVHlwZS5VcGRhdGVQbGFuZXRBY3RpdmVMaWZlZm9ybUJ1aWxkaW5nTGV2ZWxzOlxyXG4gICAgICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLlVwZGF0ZVBsYW5ldExpZmVmb3JtQnVpbGRpbmdMZXZlbHM6IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1zZyA9IG1lc3NhZ2UgYXMgVXBkYXRlUGxhbmV0QWN0aXZlTGlmZWZvcm1CdWlsZGluZ0xldmVsc01lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmVtcGlyZU1vZHVsZS51cGRhdGVQbGFuZXRMaWZlZm9ybUJ1aWxkaW5ncyhtc2cub2dhbWVNZXRhLCBtc2cuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2FzZSBNZXNzYWdlVHlwZS5VcGRhdGVQbGFuZXRMaWZlZm9ybVRlY2hub2xvZ3lMZXZlbHM6IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1zZyA9IG1lc3NhZ2UgYXMgVXBkYXRlUGxhbmV0TGlmZWZvcm1UZWNobm9sb2d5TGV2ZWxzTWVzc2FnZTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZW1waXJlTW9kdWxlLnVwZGF0ZVBsYW5ldExpZmVmb3JtVGVjaG5vbG9naWVzKG1zZy5vZ2FtZU1ldGEsIG1zZy5kYXRhKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLlVwZGF0ZVBsYW5ldEFjdGl2ZUxpZmVmb3JtVGVjaG5vbG9neUxldmVsczoge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbXNnID0gbWVzc2FnZSBhcyBVcGRhdGVQbGFuZXRBY3RpdmVMaWZlZm9ybVRlY2hub2xvZ3lMZXZlbHNNZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lbXBpcmVNb2R1bGUudXBkYXRlUGxhbmV0QWN0aXZlTGlmZWZvcm1UZWNobm9sb2dpZXMobXNnLm9nYW1lTWV0YSwgbXNnLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuVXBkYXRlRmxlZXRzOiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSBtZXNzYWdlIGFzIFVwZGF0ZUZsZWV0c01lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmVtcGlyZU1vZHVsZS51cGRhdGVGbGVldHMobXNnLm9nYW1lTWV0YSwgbXNnLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybjsgLy8gc2VuZCBubyB1cGRhdGUgbm90aWZpY2F0aW9uXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLm5vdGlmeUVtcGlyZVVwZGF0ZShtZXNzYWdlLm9nYW1lTWV0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBub3RpZnlFbXBpcmVVcGRhdGUobWV0YTogTWVzc2FnZU9nYW1lTWV0YSkge1xyXG4gICAgICAgIGNvbnN0IG5vdGlmeU1lc3NnZTogTm90aWZ5RW1waXJlRGF0YVVwZGF0ZU1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6IE1lc3NhZ2VUeXBlLk5vdGlmeUVtcGlyZURhdGFVcGRhdGUsXHJcbiAgICAgICAgICAgIG9nYW1lTWV0YTogbWV0YSxcclxuICAgICAgICAgICAgc2VuZGVyVXVpZDogc2VydmljZVdvcmtlclV1aWQsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBhd2FpdCBicm9hZGNhc3RNZXNzYWdlKG5vdGlmeU1lc3NnZSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL21lc3NhZ2VzL01lc3NhZ2UnO1xyXG5pbXBvcnQgeyBNZXNzYWdlVHlwZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9tZXNzYWdlcy9NZXNzYWdlVHlwZSc7XHJcbmltcG9ydCB7IF90aHJvdyB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy9fdGhyb3cnO1xyXG5pbXBvcnQgeyBNZXNzYWdlU2VydmljZSB9IGZyb20gJy4uL01lc3NhZ2VTZXJ2aWNlJztcclxuaW1wb3J0IHsgVW5pdmVyc2VIaXN0b3J5TW9kdWxlIH0gZnJvbSAnLi9Vbml2ZXJzZUhpc3RvcnlNb2R1bGUnO1xyXG5pbXBvcnQgeyBnZXRTdG9yYWdlS2V5UHJlZml4IH0gZnJvbSAnQC9zaGFyZWQvdXRpbHMvZ2V0U3RvcmFnZUtleVByZWZpeCc7XHJcbmltcG9ydCB7IF9sb2dEZWJ1ZyB9IGZyb20gJ0Avc2hhcmVkL3V0aWxzL19sb2cnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFVuaXZlcnNlSGlzdG9yeVNlcnZpY2UgaW1wbGVtZW50cyBNZXNzYWdlU2VydmljZSB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IG1vZHVsZXM6IFJlY29yZDxzdHJpbmcsIFVuaXZlcnNlSGlzdG9yeU1vZHVsZT4gPSB7fTtcclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgb25NZXNzYWdlKG1lc3NhZ2U6IE1lc3NhZ2U8TWVzc2FnZVR5cGUsIGFueT4pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICBjb25zdCBrZXkgPSBnZXRTdG9yYWdlS2V5UHJlZml4KG1lc3NhZ2Uub2dhbWVNZXRhLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIGlmKG1lc3NhZ2UudHlwZSA9PSBNZXNzYWdlVHlwZS5Ob3RpZnlTZXR0aW5nc1VwZGF0ZSkge1xyXG4gICAgICAgICAgICBfbG9nRGVidWcoJ3JlLWluaXQgdW5pdmVyc2UgaGlzdG9yeSB0cmFja2luZyBhZnRlciBzZXR0aW5ncyBjaGFuZ2UnKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvcihjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModGhpcy5tb2R1bGVzKSkge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5tb2R1bGVzW2tleV0uaW5pdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5tb2R1bGVzW2tleV0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBtb2R1bGUgPSB0aGlzLm1vZHVsZXNba2V5XSA9IG5ldyBVbml2ZXJzZUhpc3RvcnlNb2R1bGUobWVzc2FnZS5vZ2FtZU1ldGEpO1xyXG4gICAgICAgIGF3YWl0IG1vZHVsZS5pbml0KCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBNZXNzYWdlLCBNZXNzYWdlT2dhbWVNZXRhIH0gZnJvbSAnLi4vLi4vc2hhcmVkL21lc3NhZ2VzL01lc3NhZ2UnO1xyXG5pbXBvcnQgeyBNZXNzYWdlVHlwZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9tZXNzYWdlcy9NZXNzYWdlVHlwZSc7XHJcbmltcG9ydCB7IF90aHJvdyB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy9fdGhyb3cnO1xyXG5pbXBvcnQgeyBNZXNzYWdlU2VydmljZSB9IGZyb20gJy4uL01lc3NhZ2VTZXJ2aWNlJztcclxuaW1wb3J0IHsgU2VydmVyU2V0dGluZ3NNb2R1bGUgfSBmcm9tICcuL1NlcnZlclNldHRpbmdzTW9kdWxlJztcclxuaW1wb3J0IHsgZ2V0U3RvcmFnZUtleVByZWZpeCB9IGZyb20gJ0Avc2hhcmVkL3V0aWxzL2dldFN0b3JhZ2VLZXlQcmVmaXgnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNlcnZlclNldHRpbmdzU2VydmljZSBpbXBsZW1lbnRzIE1lc3NhZ2VTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgbW9kdWxlczogUmVjb3JkPHN0cmluZywgU2VydmVyU2V0dGluZ3NNb2R1bGU+ID0ge307XHJcblxyXG4gICAgcHVibGljIGFzeW5jIG9uTWVzc2FnZShtZXNzYWdlOiBNZXNzYWdlPE1lc3NhZ2VUeXBlLCBhbnk+KTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgY29uc3QgbW9kdWxlID0gYXdhaXQgdGhpcy5pbml0TW9kdWxlKG1lc3NhZ2Uub2dhbWVNZXRhKTtcclxuXHJcbiAgICAgICAgc3dpdGNoKG1lc3NhZ2UudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLkZvcmNlVXBkYXRlU2VydmVyU2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG1vZHVsZS51cGRhdGUoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYXN5bmMgaW5pdE1vZHVsZShtZXRhOiBNZXNzYWdlT2dhbWVNZXRhKTogUHJvbWlzZTxTZXJ2ZXJTZXR0aW5nc01vZHVsZT4ge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGtleSA9IGdldFN0b3JhZ2VLZXlQcmVmaXgobWV0YSwgZmFsc2UpO1xyXG5cclxuICAgICAgICBsZXQgbW9kdWxlID0gdGhpcy5tb2R1bGVzW2tleV07XHJcbiAgICAgICAgaWYgKG1vZHVsZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtb2R1bGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBtb2R1bGUgPSBuZXcgU2VydmVyU2V0dGluZ3NNb2R1bGUobWV0YSk7XHJcbiAgICAgICAgdGhpcy5tb2R1bGVzW2tleV0gPSBtb2R1bGU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIG1vZHVsZTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IGdldEdsb2JhbERhdGFiYXNlIH0gZnJvbSBcIkAvc2hhcmVkL2RiL2FjY2Vzc1wiO1xyXG5pbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSBcIkAvc2hhcmVkL21lc3NhZ2VzL01lc3NhZ2VcIjtcclxuaW1wb3J0IHsgTWVzc2FnZVR5cGUgfSBmcm9tIFwiQC9zaGFyZWQvbWVzc2FnZXMvTWVzc2FnZVR5cGVcIjtcclxuaW1wb3J0IHsgVXBkYXRlUGxheWVyTmFtZU1lc3NhZ2UsIFVwZGF0ZVVuaXZlcnNlTmFtZU1lc3NhZ2UgfSBmcm9tIFwiQC9zaGFyZWQvbWVzc2FnZXMvdHJhY2tpbmcvZW1waXJlXCI7XHJcbmltcG9ydCB7IE1lc3NhZ2VTZXJ2aWNlIH0gZnJvbSBcIi4uL01lc3NhZ2VTZXJ2aWNlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVW5pdmVyc2VzQW5kQWNjb3VudHNTZXJ2aWNlIGltcGxlbWVudHMgTWVzc2FnZVNlcnZpY2Uge1xyXG4gICAgcHVibGljIGFzeW5jIG9uTWVzc2FnZShtZXNzYWdlOiBNZXNzYWdlPE1lc3NhZ2VUeXBlLCBhbnk+KTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgc3dpdGNoKG1lc3NhZ2UudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLlVwZGF0ZVBsYXllck5hbWU6IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1zZyA9IG1lc3NhZ2UgYXMgVXBkYXRlUGxheWVyTmFtZU1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkYiA9IGF3YWl0IGdldEdsb2JhbERhdGFiYXNlKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKCdhY2NvdW50cycsICdyZWFkd3JpdGUnKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ2FjY291bnRzJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgYWNjID0gYXdhaXQgc3RvcmUuZ2V0KFttZXNzYWdlLm9nYW1lTWV0YS5zZXJ2ZXJJZCwgbWVzc2FnZS5vZ2FtZU1ldGEubGFuZ3VhZ2UsIG1lc3NhZ2Uub2dhbWVNZXRhLnBsYXllcklkXSk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBzdG9yZS5wdXQoe1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBtZXNzYWdlLm9nYW1lTWV0YS5wbGF5ZXJJZCxcclxuICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJJZDogbWVzc2FnZS5vZ2FtZU1ldGEuc2VydmVySWQsXHJcbiAgICAgICAgICAgICAgICAgICAgc2VydmVyTGFuZ3VhZ2U6IG1lc3NhZ2Uub2dhbWVNZXRhLmxhbmd1YWdlLFxyXG4gICAgICAgICAgICAgICAgICAgIC4uLmFjYyxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBtc2cuZGF0YSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuVXBkYXRlVW5pdmVyc2VOYW1lOiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSBtZXNzYWdlIGFzIFVwZGF0ZVVuaXZlcnNlTmFtZU1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkYiA9IGF3YWl0IGdldEdsb2JhbERhdGFiYXNlKCk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBkYi5wdXQoJ3NlcnZlcnMnLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IG1lc3NhZ2Uub2dhbWVNZXRhLnNlcnZlcklkLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlOiBtZXNzYWdlLm9nYW1lTWV0YS5sYW5ndWFnZSxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBtc2cuZGF0YSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbiAgICAgICAgICAgICIsImltcG9ydCB7IGRyb3BEYXRhYmFzZUNvbm5lY3Rpb25zIH0gZnJvbSBcIkAvc2hhcmVkL2RiL2FjY2Vzc1wiO1xyXG5pbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSBcIkAvc2hhcmVkL21lc3NhZ2VzL01lc3NhZ2VcIjtcclxuaW1wb3J0IHsgTWVzc2FnZVR5cGUgfSBmcm9tIFwiQC9zaGFyZWQvbWVzc2FnZXMvTWVzc2FnZVR5cGVcIjtcclxuaW1wb3J0IHsgTWVzc2FnZVNlcnZpY2UgfSBmcm9tIFwiLi9NZXNzYWdlU2VydmljZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEludGVybmFsU2VydmljZSBpbXBsZW1lbnRzIE1lc3NhZ2VTZXJ2aWNlIHtcclxuICAgIGFzeW5jIG9uTWVzc2FnZShtZXNzYWdlOiBNZXNzYWdlPE1lc3NhZ2VUeXBlLCBhbnk+KTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgc3dpdGNoKG1lc3NhZ2UudHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIE1lc3NhZ2VUeXBlLlN0YXlBbGl2ZToge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNhc2UgTWVzc2FnZVR5cGUuRHJvcERhdGFiYXNlQ29ubmVjdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIGRyb3BEYXRhYmFzZUNvbm5lY3Rpb25zKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdLCJuYW1lcyI6WyJ2YWxpZGF0b3IiLCJYTUxQYXJzZXIiLCJYTUxCdWlsZGVyIiwibW9kdWxlIiwiZXhwb3J0cyIsIlhNTFZhbGlkYXRvciIsIm5hbWVSZWdleHAiLCJyZWdleE5hbWUiLCJSZWdFeHAiLCJpc0V4aXN0IiwidiIsImlzRW1wdHlPYmplY3QiLCJvYmoiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwibWVyZ2UiLCJ0YXJnZXQiLCJhIiwiYXJyYXlNb2RlIiwibGVuIiwiaSIsImdldFZhbHVlIiwiaXNOYW1lIiwic3RyaW5nIiwiZXhlYyIsImdldEFsbE1hdGNoZXMiLCJyZWdleCIsIm1hdGNoZXMiLCJtYXRjaCIsImFsbG1hdGNoZXMiLCJzdGFydEluZGV4IiwibGFzdEluZGV4IiwiaW5kZXgiLCJwdXNoIiwidXRpbCIsImRlZmF1bHRPcHRpb25zIiwiYWxsb3dCb29sZWFuQXR0cmlidXRlcyIsInVucGFpcmVkVGFncyIsImlzV2hpdGVTcGFjZSIsImNoYXIiLCJyZWFkUEkiLCJ4bWxEYXRhIiwic3RhcnQiLCJ0YWduYW1lIiwic3Vic3RyIiwiZ2V0RXJyb3JPYmplY3QiLCJnZXRMaW5lTnVtYmVyRm9yUG9zaXRpb24iLCJyZWFkQ29tbWVudEFuZENEQVRBIiwiYW5nbGVCcmFja2V0c0NvdW50IiwicmVhZEF0dHJpYnV0ZVN0ciIsImF0dHJTdHIiLCJzdGFydENoYXIiLCJ0YWdDbG9zZWQiLCJ2YWx1ZSIsInZhbGlkYXRlIiwib3B0aW9ucyIsImFzc2lnbiIsInRhZ3MiLCJ0YWdGb3VuZCIsInJlYWNoZWRSb290IiwiZXJyIiwidGFnU3RhcnRQb3MiLCJjbG9zaW5nVGFnIiwidGFnTmFtZSIsInRyaW0iLCJzdWJzdHJpbmciLCJtc2ciLCJyZXN1bHQiLCJhdHRyU3RyU3RhcnQiLCJpc1ZhbGlkIiwidmFsaWRhdGVBdHRyaWJ1dGVTdHJpbmciLCJjb2RlIiwibGluZSIsIm90ZyIsInBvcCIsIm9wZW5Qb3MiLCJjb2wiLCJpbmRleE9mIiwiYWZ0ZXJBbXAiLCJ2YWxpZGF0ZUFtcGVyc2FuZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJtYXAiLCJ0IiwicmVwbGFjZSIsInZhbGlkQXR0clN0clJlZ3hwIiwiYXR0ck5hbWVzIiwiZ2V0UG9zaXRpb25Gcm9tTWF0Y2giLCJ1bmRlZmluZWQiLCJhdHRyTmFtZSIsInZhbGlkYXRlQXR0ck5hbWUiLCJoYXNPd25Qcm9wZXJ0eSIsInJlIiwidmFsaWRhdGVOdW1iZXJBbXBlcnNhbmQiLCJjb3VudCIsIm1lc3NhZ2UiLCJsaW5lTnVtYmVyIiwibGluZXMiLCJzcGxpdCIsImJ1aWxkRnJvbU9yZGVyZWRKcyIsImF0dHJpYnV0ZU5hbWVQcmVmaXgiLCJhdHRyaWJ1dGVzR3JvdXBOYW1lIiwidGV4dE5vZGVOYW1lIiwiaWdub3JlQXR0cmlidXRlcyIsImNkYXRhUHJvcE5hbWUiLCJmb3JtYXQiLCJpbmRlbnRCeSIsInN1cHByZXNzRW1wdHlOb2RlIiwic3VwcHJlc3NVbnBhaXJlZE5vZGUiLCJzdXBwcmVzc0Jvb2xlYW5BdHRyaWJ1dGVzIiwidGFnVmFsdWVQcm9jZXNzb3IiLCJrZXkiLCJhdHRyaWJ1dGVWYWx1ZVByb2Nlc3NvciIsInByZXNlcnZlT3JkZXIiLCJjb21tZW50UHJvcE5hbWUiLCJlbnRpdGllcyIsInZhbCIsInByb2Nlc3NFbnRpdGllcyIsInN0b3BOb2RlcyIsIkJ1aWxkZXIiLCJ0aGlzIiwiaXNBdHRyaWJ1dGUiLCJhdHRyUHJlZml4TGVuIiwicHJvY2Vzc1RleHRPck9iak5vZGUiLCJpbmRlbnRhdGUiLCJ0YWdFbmRDaGFyIiwibmV3TGluZSIsImJ1aWxkVGV4dE5vZGUiLCJidWlsZEVtcHR5VGV4dE5vZGUiLCJidWlsZE9iak5vZGUiLCJidWlsZEVtcHR5T2JqTm9kZSIsImJ1aWxkVGV4dFZhbE5vZGUiLCJidWlsZE9iamVjdE5vZGUiLCJyZXBsYWNlRW50aXRpZXNWYWx1ZSIsImJ1aWxkQXR0clBhaXJTdHIiLCJvYmplY3QiLCJsZXZlbCIsImoyeCIsInRhZ0VuZEV4cCIsInBpQ2xvc2luZ0NoYXIiLCJ0ZXh0VmFsdWUiLCJlbnRpdHkiLCJyZXBlYXQiLCJuYW1lIiwic3RhcnRzV2l0aCIsInByb3RvdHlwZSIsImJ1aWxkIiwiak9iaiIsIkFycmF5IiwiaXNBcnJheSIsImFycmF5Tm9kZU5hbWUiLCJEYXRlIiwiYXR0ciIsIm5ld3ZhbCIsImFyckxlbiIsImoiLCJpdGVtIiwiS3MiLCJMIiwiYXJyVG9TdHIiLCJhcnIiLCJqUGF0aCIsInhtbFN0ciIsImluZGVudGF0aW9uIiwidGFnT2JqIiwicHJvcE5hbWUiLCJuZXdKUGF0aCIsInRhZ1RleHQiLCJpc1N0b3BOb2RlIiwiYXR0U3RyIiwiYXR0cl90b19zdHIiLCJ0ZW1wSW5kIiwicGlUZXh0Tm9kZU5hbWUiLCJ0YWdTdGFydCIsInRhZ1ZhbHVlIiwiYXR0ck1hcCIsImF0dHJWYWwiLCJsYXN0SW5kZXhPZiIsImpBcnJheSIsImVudGl0eVJlZ2V4IiwicGFyc2VFbnRpdHlFeHAiLCJleHAiLCJyZWd4IiwiRXJyb3IiLCJoYXNCb2R5IiwiY29tbWVudCIsInJlbW92ZU5TUHJlZml4IiwicGFyc2VUYWdWYWx1ZSIsInBhcnNlQXR0cmlidXRlVmFsdWUiLCJ0cmltVmFsdWVzIiwibnVtYmVyUGFyc2VPcHRpb25zIiwiaGV4IiwibGVhZGluZ1plcm9zIiwiYWx3YXlzQ3JlYXRlVGV4dE5vZGUiLCJodG1sRW50aXRpZXMiLCJpZ25vcmVEZWNsYXJhdGlvbiIsImlnbm9yZVBpVGFncyIsImJ1aWxkT3B0aW9ucyIsInhtbE5vZGUiLCJyZWFkRG9jVHlwZSIsInRvTnVtYmVyIiwiYWRkRXh0ZXJuYWxFbnRpdGllcyIsImV4dGVybmFsRW50aXRpZXMiLCJlbnRLZXlzIiwiZW50IiwibGFzdEVudGl0aWVzIiwicGFyc2VUZXh0RGF0YSIsImRvbnRUcmltIiwiaGFzQXR0cmlidXRlcyIsImlzTGVhZk5vZGUiLCJlc2NhcGVFbnRpdGllcyIsInBhcnNlVmFsdWUiLCJyZXNvbHZlTmFtZVNwYWNlIiwicHJlZml4IiwiY2hhckF0IiwiYXR0cnNSZWd4IiwiYnVpbGRBdHRyaWJ1dGVzTWFwIiwiYXR0cnMiLCJvbGRWYWwiLCJhTmFtZSIsIm5ld1ZhbCIsImF0dHJDb2xsZWN0aW9uIiwicGFyc2VYbWwiLCJ4bWxPYmoiLCJjdXJyZW50Tm9kZSIsInRleHREYXRhIiwiY2xvc2VJbmRleCIsImZpbmRDbG9zaW5nSW5kZXgiLCJjb2xvbkluZGV4Iiwic2F2ZVRleHRUb1BhcmVudFRhZyIsInRhZ3NOb2RlU3RhY2siLCJ0YWdEYXRhIiwicmVhZFRhZ0V4cCIsImNoaWxkTm9kZSIsImFkZCIsInRhZ0V4cCIsImF0dHJFeHBQcmVzZW50IiwiYWRkQ2hpbGQiLCJlbmRJbmRleCIsImRvY1R5cGVFbnRpdGllcyIsImxhc3RUYWciLCJpc0l0U3RvcE5vZGUiLCJ0YWdDb250ZW50IiwicmVhZFN0b3BOb2RlRGF0YSIsImNoaWxkIiwiZW50aXR5TmFtZSIsImN1cnJlbnRUYWdOYW1lIiwiYWxsTm9kZXNFeHAiLCJzdG9wTm9kZVBhdGgiLCJzdG9wTm9kZUV4cCIsInN0ciIsImVyck1zZyIsImNsb3NpbmdJbmRleCIsImNsb3NpbmdDaGFyIiwiYXR0ckJvdW5kYXJ5IiwiY2giLCJkYXRhIiwidGFnRXhwV2l0aENsb3NpbmdJbmRleCIsInNlcGFyYXRvckluZGV4Iiwic2VhcmNoIiwic2hvdWxkUGFyc2UiLCJjb25zdHJ1Y3RvciIsIk9yZGVyZWRPYmpQYXJzZXIiLCJwcmV0dGlmeSIsInBhcnNlIiwidmFsaWRhdGlvbk9wdGlvbiIsInRvU3RyaW5nIiwib3JkZXJlZE9ialBhcnNlciIsIm9yZGVyZWRSZXN1bHQiLCJhZGRFbnRpdHkiLCJjb21wcmVzcyIsInRleHQiLCJjb21wcmVzc2VkT2JqIiwicHJvcGVydHkiLCJuZXdKcGF0aCIsImlzTGVhZiIsImlzTGVhZlRhZyIsImFzc2lnbkF0dHJpYnV0ZXMiLCJqcGF0aCIsImF0cnJOYW1lIiwicHJvcENvdW50Iiwibm9kZSIsImhleFJlZ2V4IiwibnVtUmVnZXgiLCJOdW1iZXIiLCJwYXJzZUludCIsIndpbmRvdyIsInBhcnNlRmxvYXQiLCJjb25zaWRlciIsImRlY2ltYWxQb2ludCIsImVOb3RhdGlvbiIsInRyaW1tZWRTdHIiLCJza2lwTGlrZSIsInRlc3QiLCJzaWduIiwibnVtVHJpbW1lZEJ5WmVyb3MiLCJudW1TdHIiLCJudW0iLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZCIsImRlZmluaXRpb24iLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsImUiLCJwcm9wIiwiY2FsbCIsInJlcXVpcmVkQXJncyIsInJlcXVpcmVkIiwiYXJncyIsIlR5cGVFcnJvciIsImlzRGF0ZSIsImFyZ3VtZW50cyIsInRvRGF0ZSIsImFyZ3VtZW50IiwiYXJnU3RyIiwiZ2V0VGltZSIsImNvbnNvbGUiLCJ3YXJuIiwic3RhY2siLCJOYU4iLCJkaXJ0eURhdGUiLCJkYXRlIiwiaXNOYU4iLCJmb3JtYXREaXN0YW5jZUxvY2FsZSIsImxlc3NUaGFuWFNlY29uZHMiLCJvbmUiLCJvdGhlciIsInhTZWNvbmRzIiwiaGFsZkFNaW51dGUiLCJsZXNzVGhhblhNaW51dGVzIiwieE1pbnV0ZXMiLCJhYm91dFhIb3VycyIsInhIb3VycyIsInhEYXlzIiwiYWJvdXRYV2Vla3MiLCJ4V2Vla3MiLCJhYm91dFhNb250aHMiLCJ4TW9udGhzIiwiYWJvdXRYWWVhcnMiLCJ4WWVhcnMiLCJvdmVyWFllYXJzIiwiYWxtb3N0WFllYXJzIiwiYnVpbGRGb3JtYXRMb25nRm4iLCJ3aWR0aCIsIlN0cmluZyIsImRlZmF1bHRXaWR0aCIsImZvcm1hdHMiLCJmdWxsIiwibG9uZyIsIm1lZGl1bSIsInNob3J0IiwidGltZSIsImRhdGVUaW1lIiwiZm9ybWF0UmVsYXRpdmVMb2NhbGUiLCJsYXN0V2VlayIsInllc3RlcmRheSIsInRvZGF5IiwidG9tb3Jyb3ciLCJuZXh0V2VlayIsImJ1aWxkTG9jYWxpemVGbiIsImRpcnR5SW5kZXgiLCJkaXJ0eU9wdGlvbnMiLCJ2YWx1ZXNBcnJheSIsImNvbnRleHQiLCJmb3JtYXR0aW5nVmFsdWVzIiwiZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCIsIl9kZWZhdWx0V2lkdGgiLCJfd2lkdGgiLCJ2YWx1ZXMiLCJhcmd1bWVudENhbGxiYWNrIiwib3JkaW5hbE51bWJlciIsImRpcnR5TnVtYmVyIiwiX29wdGlvbnMiLCJudW1iZXIiLCJyZW0xMDAiLCJlcmEiLCJuYXJyb3ciLCJhYmJyZXZpYXRlZCIsIndpZGUiLCJxdWFydGVyIiwibW9udGgiLCJkYXkiLCJkYXlQZXJpb2QiLCJhbSIsInBtIiwibWlkbmlnaHQiLCJub29uIiwibW9ybmluZyIsImFmdGVybm9vbiIsImV2ZW5pbmciLCJuaWdodCIsImJ1aWxkTWF0Y2hGbiIsIm1hdGNoUGF0dGVybiIsIm1hdGNoUGF0dGVybnMiLCJkZWZhdWx0TWF0Y2hXaWR0aCIsIm1hdGNoUmVzdWx0IiwibWF0Y2hlZFN0cmluZyIsInBhcnNlUGF0dGVybnMiLCJkZWZhdWx0UGFyc2VXaWR0aCIsImZpbmRJbmRleCIsInBhdHRlcm4iLCJmaW5kS2V5IiwidmFsdWVDYWxsYmFjayIsInJlc3QiLCJzbGljZSIsInByZWRpY2F0ZSIsImFycmF5IiwicGFyc2VQYXR0ZXJuIiwicGFyc2VSZXN1bHQiLCJhbnkiLCJmb3JtYXREaXN0YW5jZSIsInRva2VuIiwidG9rZW5WYWx1ZSIsImFkZFN1ZmZpeCIsImNvbXBhcmlzb24iLCJmb3JtYXRMb25nIiwiZm9ybWF0UmVsYXRpdmUiLCJfZGF0ZSIsIl9iYXNlRGF0ZSIsImxvY2FsaXplIiwid2Vla1N0YXJ0c09uIiwiZmlyc3RXZWVrQ29udGFpbnNEYXRlIiwidG9JbnRlZ2VyIiwiTWF0aCIsImNlaWwiLCJmbG9vciIsImFkZE1pbGxpc2Vjb25kcyIsImRpcnR5QW1vdW50IiwidGltZXN0YW1wIiwiYW1vdW50Iiwic3ViTWlsbGlzZWNvbmRzIiwiTUlMTElTRUNPTkRTX0lOX0RBWSIsInN0YXJ0T2ZVVENJU09XZWVrIiwiZ2V0VVRDRGF5IiwiZGlmZiIsInNldFVUQ0RhdGUiLCJnZXRVVENEYXRlIiwic2V0VVRDSG91cnMiLCJnZXRVVENJU09XZWVrWWVhciIsInllYXIiLCJnZXRVVENGdWxsWWVhciIsImZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIiLCJzZXRVVENGdWxsWWVhciIsInN0YXJ0T2ZOZXh0WWVhciIsImZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIiLCJzdGFydE9mVGhpc1llYXIiLCJzdGFydE9mVVRDSVNPV2Vla1llYXIiLCJmb3VydGhPZkphbnVhcnkiLCJNSUxMSVNFQ09ORFNfSU5fV0VFSyIsInN0YXJ0T2ZVVENXZWVrIiwibG9jYWxlIiwibG9jYWxlV2Vla1N0YXJ0c09uIiwiZGVmYXVsdFdlZWtTdGFydHNPbiIsIlJhbmdlRXJyb3IiLCJnZXRVVENXZWVrWWVhciIsImxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsImRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUiLCJmaXJzdFdlZWtPZk5leHRZZWFyIiwiZmlyc3RXZWVrT2ZUaGlzWWVhciIsInN0YXJ0T2ZVVENXZWVrWWVhciIsImZpcnN0V2VlayIsImFkZExlYWRpbmdaZXJvcyIsInRhcmdldExlbmd0aCIsIm91dHB1dCIsImFicyIsInNpZ25lZFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJudW1iZXJPZkRpZ2l0cyIsIm1pbGxpc2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsInBvdyIsImZvcm1hdFRpbWV6b25lU2hvcnQiLCJvZmZzZXQiLCJkaXJ0eURlbGltaXRlciIsImFic09mZnNldCIsImhvdXJzIiwibWludXRlcyIsImRlbGltaXRlciIsImZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyIsImZvcm1hdFRpbWV6b25lIiwiRyIsInkiLCJ1bml0IiwibGlnaHRGb3JtYXR0ZXJzIiwiWSIsInNpZ25lZFdlZWtZZWFyIiwid2Vla1llYXIiLCJSIiwidSIsIlEiLCJxIiwiTSIsInciLCJ3ZWVrIiwicm91bmQiLCJnZXRVVENXZWVrIiwiSSIsImlzb1dlZWsiLCJnZXRVVENJU09XZWVrIiwiRCIsImRheU9mWWVhciIsInNldFVUQ01vbnRoIiwic3RhcnRPZlllYXJUaW1lc3RhbXAiLCJkaWZmZXJlbmNlIiwiZ2V0VVRDRGF5T2ZZZWFyIiwiRSIsImRheU9mV2VlayIsImxvY2FsRGF5T2ZXZWVrIiwiYyIsImlzb0RheU9mV2VlayIsImRheVBlcmlvZEVudW1WYWx1ZSIsInRvTG93ZXJDYXNlIiwiYiIsIkIiLCJoIiwiSCIsIksiLCJrIiwibSIsInMiLCJTIiwiWCIsIl9sb2NhbGl6ZSIsInRpbWV6b25lT2Zmc2V0IiwiX29yaWdpbmFsRGF0ZSIsImdldFRpbWV6b25lT2Zmc2V0IiwieCIsIk8iLCJ6Iiwib3JpZ2luYWxEYXRlIiwiVCIsImRhdGVMb25nRm9ybWF0dGVyIiwidGltZUxvbmdGb3JtYXR0ZXIiLCJwIiwiUCIsImRhdGVUaW1lRm9ybWF0IiwiZGF0ZVBhdHRlcm4iLCJ0aW1lUGF0dGVybiIsImdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMiLCJ1dGNEYXRlIiwiVVRDIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwicHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zIiwicHJvdGVjdGVkV2Vla1llYXJUb2tlbnMiLCJpc1Byb3RlY3RlZERheU9mWWVhclRva2VuIiwiaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuIiwidGhyb3dQcm90ZWN0ZWRFcnJvciIsImlucHV0IiwiY29uY2F0IiwiTWVzc2FnZVR5cGUiLCJDb21iYXRSZXN1bHRUeXBlIiwiUmVzb3VyY2VUeXBlIiwiZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwIiwiZXNjYXBlZFN0cmluZ1JlZ0V4cCIsImRvdWJsZVF1b3RlUmVnRXhwIiwidW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAiLCJkaXJ0eUZvcm1hdFN0ciIsImZvcm1hdFN0ciIsImZvcm1hdHRlck9wdGlvbnMiLCJmaXJzdENoYXJhY3RlciIsImxvbmdGb3JtYXR0ZXIiLCJqb2luIiwiY2xlYW5Fc2NhcGVkU3RyaW5nIiwiZm9ybWF0dGVyIiwidXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zIiwidXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucyIsIl9sb2dFcnJvciIsImVycm9yIiwiX2xvZ1dhcm5pbmciLCJfbG9nRGVidWciLCJkZWJ1ZyIsIm5vdyIsImlkYlByb3h5YWJsZVR5cGVzIiwiY3Vyc29yQWR2YW5jZU1ldGhvZHMiLCJ3b24iLCJkcmF3IiwibG9zdCIsIm1ldGFsIiwiY3J5c3RhbCIsImRldXRlcml1bSIsImN1cnNvclJlcXVlc3RNYXAiLCJXZWFrTWFwIiwidHJhbnNhY3Rpb25Eb25lTWFwIiwidHJhbnNhY3Rpb25TdG9yZU5hbWVzTWFwIiwidHJhbnNmb3JtQ2FjaGUiLCJyZXZlcnNlVHJhbnNmb3JtQ2FjaGUiLCJpZGJQcm94eVRyYXBzIiwicmVjZWl2ZXIiLCJJREJUcmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlTmFtZXMiLCJvYmplY3RTdG9yZSIsInNldCIsImhhcyIsInRyYW5zZm9ybUNhY2hhYmxlVmFsdWUiLCJmdW5jIiwiSURCRGF0YWJhc2UiLCJ0cmFuc2FjdGlvbiIsIklEQkN1cnNvciIsImFkdmFuY2UiLCJjb250aW51ZSIsImNvbnRpbnVlUHJpbWFyeUtleSIsImluY2x1ZGVzIiwiYXBwbHkiLCJ1bndyYXAiLCJzdG9yZU5hbWVzIiwidHgiLCJzb3J0IiwiZG9uZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwidW5saXN0ZW4iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY29tcGxldGUiLCJET01FeGNlcHRpb24iLCJhZGRFdmVudExpc3RlbmVyIiwiY2FjaGVEb25lUHJvbWlzZUZvclRyYW5zYWN0aW9uIiwiSURCT2JqZWN0U3RvcmUiLCJJREJJbmRleCIsInNvbWUiLCJQcm94eSIsIklEQlJlcXVlc3QiLCJyZXF1ZXN0IiwicHJvbWlzZSIsInN1Y2Nlc3MiLCJ0aGVuIiwiY2F0Y2giLCJwcm9taXNpZnlSZXF1ZXN0IiwibmV3VmFsdWUiLCJyZWFkTWV0aG9kcyIsIndyaXRlTWV0aG9kcyIsImNhY2hlZE1ldGhvZHMiLCJNYXAiLCJnZXRNZXRob2QiLCJ0YXJnZXRGdW5jTmFtZSIsInVzZUluZGV4IiwiaXNXcml0ZSIsIm1ldGhvZCIsImFzeW5jIiwic3RvcmVOYW1lIiwic3RvcmUiLCJzaGlmdCIsImFsbCIsImNhbGxiYWNrIiwiX3Rocm93Iiwib2xkVHJhcHMiLCJkYXRhYmFzZXMiLCJnZXREYXRhYmFzZSIsInVwZ3JhZGUiLCJkYlByb21pc2UiLCJ2ZXJzaW9uIiwiYmxvY2tlZCIsImJsb2NraW5nIiwidGVybWluYXRlZCIsImluZGV4ZWREQiIsIm9wZW4iLCJvcGVuUHJvbWlzZSIsImV2ZW50Iiwib2xkVmVyc2lvbiIsIm5ld1ZlcnNpb24iLCJkYiIsIm9wZW5EQiIsImV2IiwiZ2V0UGxheWVyRGF0YWJhc2UiLCJtZXRhIiwic2VydmVySWQiLCJwbGF5ZXJJZCIsImxhbmd1YWdlIiwiZ2V0UGxheWVyRGF0YWJhc2VOYW1lIiwiY3JlYXRlT2JqZWN0U3RvcmUiLCJrZXlQYXRoIiwiZ2V0U2VydmVyRGF0YWJhc2UiLCJnZXRTZXJ2ZXJEYXRhYmFzZU5hbWUiLCJnZXRVbml2ZXJzZUhpc3RvcnlEYXRhYmFzZSIsImdldFVuaXZlcnNlSGlzdG9yeURhdGFiYXNlTmFtZSIsImNyZWF0ZUluZGV4IiwiZ2V0R2xvYmFsRGF0YWJhc2UiLCJDb21iYXRSZXBvcnRNb2R1bGUiLCJjb21iYXRSZXBvcnREYXRhIiwib2dhbWVNZXRhIiwia25vd25SZXBvcnQiLCJpZCIsInJlcG9ydCIsImlzQWxyZWFkeVRyYWNrZWQiLCJpZ25vcmVkIiwic2hvdWxkSWdub3JlRXNwaW9uYWdlQ29tYmF0cyIsInNldHRpbmdzU2VydmljZSIsInNldHRpbmdzIiwiY29tYmF0VHJhY2tpbmciLCJpZ25vcmVFc3Bpb25hZ2VGaWdodHMiLCJvZ2FtZUNvbWJhdFJlcG9ydCIsImlzRXNwaW9uYWdlQ29tYmF0IiwicHV0IiwicGFyc2VDb21iYXRSZXBvcnQiLCJyYXdDb21iYXRSZXBvcnREYXRhIiwibG9vdEZhY3RvciIsImlzRXhwZWRpdGlvbiIsImlzQXR0YWNrZXIiLCJpc0RlZmVuZGVyIiwiaXNPd25lciIsIndpbm5lciIsImxvb3QiLCJkZWJyaXNGaWVsZCIsImRlYnJpcyIsImxvc3RTaGlwcyIsInBsYXllckxvc3NlcyIsImNvb3JkaW5hdGVzIiwiaWdub3JlU3R1cGlkTWVzc2FnZVBvcnRFcnJvcnMiLCJjaHJvbWUiLCJydW50aW1lIiwibGFzdEVycm9yIiwiYnJvYWRjYXN0TWVzc2FnZSIsInNlbmRNZXNzYWdlIiwidGFicyIsInF1ZXJ5IiwidXJsIiwiZm9yRWFjaCIsInRhYiIsInV1aWQiLCJieXRlVG9IZXgiLCJmIiwiUk9UTCIsIm4iLCJ2NSIsImhhc2hmdW5jIiwiZ2VuZXJhdGVVVUlEIiwibmFtZXNwYWNlIiwiYnVmIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJieXRlcyIsImNoYXJDb2RlQXQiLCJzdHJpbmdUb0J5dGVzIiwiVWludDhBcnJheSIsIkROUyIsIlVSTCIsInYzNSIsImwiLCJOIiwiX2kiLCJVaW50MzJBcnJheSIsIl9pMiIsIlciLCJfdCIsIl90MiIsInNlcnZpY2VXb3JrZXJVdWlkIiwiRGVicmlzRmllbGRSZXBvcnRNb2R1bGUiLCJtZXNzYWdlRGF0YSIsInRyeVBhcnNlRGVicmlzRmllbGRSZXBvcnQiLCJyZXNvdXJjZXMiLCJpc0V4cGVkaXRpb25EZWJyaXNGaWVsZCIsImNvb3JkcyIsInN5c3RlbSIsIkJ1aWxkaW5nVHlwZSIsIkJ1aWxkaW5nIiwidHlwZSIsImFsbGlhbmNlRGVwb3QiLCJnZXRDb3N0IiwiZW5lcmd5IiwiUHJvZHVjdGlvbkJ1aWxkaW5nIiwiY3J5c3RhbE1pbmUiLCJnZXRQcm9kdWN0aW9uIiwiZGVwZW5kZW5jaWVzIiwiYm9vc3QiLCJnZXRQcm9kdWN0aW9uQm9vc3QiLCJwbGFuZXQiLCJwb3NpdGlvbiIsInNlcnZlclNldHRpbmdzIiwidHJ1bmMiLCJlY29ub215U3BlZWQiLCJwcm9kdWN0aW9uU2V0dGluZ3MiLCJjcnlzdGFsQm9vc3QiLCJwb3MxIiwicG9zMiIsInBvczMiLCJkZWZhdWx0IiwiZ2V0Q29uc3VtcHRpb24iLCJTdG9yYWdlQnVpbGRpbmciLCJjcnlzdGFsU3RvcmFnZSIsImdldFN0b3JhZ2UiLCJnZXREZW5QZXJjZW50YWdlIiwibWluIiwiZGV1dGVyaXVtU3ludGhlc2l6ZXIiLCJ0ZW1wZXJhdHVyZSIsImRldXRlcml1bVRhbmsiLCJmdXNpb25SZWFjdG9yIiwianVtcEdhdGUiLCJsdW5hckJhc2UiLCJtZXRhbE1pbmUiLCJiYXNlUHJvZHVjdGlvbiIsIm1ldGFsU3RvcmFnZSIsIm1pc3NpbGVTaWxvIiwibmFuaXRlRmFjdG9yeSIsInJlc2VhcmNoTGFiIiwicm9ib3RpY3NGYWN0b3J5Iiwic2Vuc29yUGhhbGFueCIsInNoaXB5YXJkIiwic29sYXJQbGFudCIsInNwYWNlRG9jayIsImdldFdyZWNrZmllbGQiLCJkZWJyaXNGaWVsZFNldHRpbmciLCJ0ZXJyYWZvcm1lciIsIlBsYW5ldEJ1aWxkaW5nVHlwZXMiLCJNb29uQnVpbGRpbmdUeXBlcyIsInBhcnNlSW50U2FmZSIsInJhZGl4IiwicGFyc2VGbG9hdFNhZmUiLCJTaGlwIiwiU2hpcFR5cGUiLCJiYXR0bGVjcnVpc2VyIiwiY29zdCIsImJhc2VIdWxsIiwiYmFzZVNoaWVsZCIsImJhc2VEYW1hZ2UiLCJiYXNlU3BlZWQiLCJiYXNlQ2FyZ29DYXBhY2l0eSIsImZ1ZWxDb25zdW1wdGlvbiIsImJhdHRsZXNoaXAiLCJib21iZXIiLCJjb2xvbnlTaGlwIiwiY3Jhd2xlciIsImNydWlzZXIiLCJkZWF0aFN0YXIiLCJkZXN0cm95ZXIiLCJlc3Bpb25hZ2VQcm9iZSIsImhlYXZ5RmlnaHRlciIsImxhcmdlQ2FyZ28iLCJsaWdodEZpZ2h0ZXIiLCJwYXRoZmluZGVyIiwicmVhcGVyIiwicmVjeWNsZXIiLCJzbWFsbENhcmdvIiwic29sYXJTYXRlbGxpdGUiLCJTaGlwVHlwZXMiLCJSZXNlYXJjaFR5cGUiLCJSZXNlYXJjaCIsIlJlc2VhcmNoVHlwZXMiLCJlc3Bpb25hZ2VUZWNobm9sb2d5IiwiY29tcHV0ZXJUZWNobm9sb2d5Iiwid2VhcG9uc1RlY2hub2xvZ3kiLCJzaGllbGRpbmdUZWNobm9sb2d5IiwiYXJtb3JUZWNobm9sb2d5IiwiZW5lcmd5VGVjaG5vbG9neSIsImh5cGVyc3BhY2VUZWNobm9sb2d5IiwiY29tYnVzdGlvbkRyaXZlIiwiaW1wdWxzZURyaXZlIiwiaHlwZXJzcGFjZURyaXZlIiwibGFzZXJUZWNobm9sb2d5IiwiaW9uVGVjaG5vbG9neSIsInBsYXNtYVRlY2hub2xvZ3kiLCJpbnRlcmdhbGFjdGljUmVzZWFyY2hOZXR3b3JrIiwiYXN0cm9waHlzaWNzIiwiZ3Jhdml0b25UZWNobm9sb2d5IiwiTGlmZWZvcm1UeXBlIiwiVmFsaWRMaWZlZm9ybVR5cGVzIiwiaHVtYW5zIiwicm9ja3RhbCIsIm1lY2hhcyIsImthZWxlc2giLCJMaWZlZm9ybUJ1aWxkaW5nVHlwZSIsIm5vbmUiLCJMaWZlZm9ybUJ1aWxkaW5nVHlwZXMiLCJyZXNpZGVudGlhbFNlY3RvciIsImJpb3NwaGVyZUZhcm0iLCJyZXNlYXJjaENlbnRyZSIsImFjYWRlbXlPZlNjaWVuY2VzIiwibmV1cm9DYWxpYnJhdGlvbkNlbnRyZSIsImhpZ2hFbmVyZ3lTbWVsdGluZyIsImZvb2RTaWxvIiwiZnVzaW9uUG93ZXJlZFByb2R1Y3Rpb24iLCJza3lzY3JhcGVyIiwiYmlvdGVjaExhYiIsIm1ldHJvcG9saXMiLCJwbGFuZXRhcnlTaGllbGQiLCJtZWRpdGF0aW9uRW5jbGF2ZSIsImNyeXN0YWxGYXJtIiwicnVuZVRlY2hub2xvZ2l1bSIsInJ1bmVGb3JnZSIsIm9yaWt0b3JpdW0iLCJtYWdtYUZvcmdlIiwiZGlzcnVwdGlvbkNoYW1iZXIiLCJtZWdhbGl0aCIsImNyeXN0YWxSZWZpbmVyeSIsImRldXRlcml1bVN5bnRoZXNpc2VyIiwibWluZXJhbFJlc2VhcmNoQ2VudHJlIiwiYWR2YW5jZWRSZWN5Y2xpbmdQbGFudCIsImFzc2VtYmx5TGluZSIsImZ1c2lvbkNlbGxGYWN0b3J5Iiwicm9ib3RpY3NSZXNlYXJjaENlbnRyZSIsInVwZGF0ZU5ldHdvcmsiLCJxdWFudHVtQ29tcHV0ZXJDZW50cmUiLCJhdXRvbWF0aXNlZEFzc2VtYmx5Q2VudHJlIiwiaGlnaFBlcmZvcm1hbmNlVHJhbnNmb3JtZXIiLCJtaWNyb2NoaXBBc3NlbWJseUxpbmUiLCJwcm9kdWN0aW9uQXNzZW1ibHlIYWxsIiwiaGlnaFBlcmZvcm1hbmNlU3ludGhlc2lzZXIiLCJjaGlwTWFzc1Byb2R1Y3Rpb24iLCJuYW5vUmVwYWlyQm90cyIsInNhbmN0dWFyeSIsImFudGltYXR0ZXJDb25kZW5zZXIiLCJ2b3J0ZXhDaGFtYmVyIiwiaGFsbHNPZlJlYWxpc2F0aW9uIiwiZm9ydW1PZlRyYW5zY2VuZGVuY2UiLCJhbnRpbWF0dGVyQ29udmVjdG9yIiwiY2xvbmluZ0xhYm9yYXRvcnkiLCJjaHJ5c2FsaXNBY2NlbGVyYXRvciIsImJpb01vZGlmaWVyIiwicHNpb25pY01vZHVsYXRvciIsInNoaXBNYW51ZmFjdHVyaW5nSGFsbCIsInN1cHJhUmVmcmFjdG9yIiwiTGlmZWZvcm1UZWNobm9sb2d5VHlwZSIsIkxpZmVmb3JtVGVjaG5vbG9neVR5cGVzIiwiaW50ZXJnYWxhY3RpY0Vudm95cyIsImhpZ2hQZXJmb3JtYW5jZUV4dHJhY3RvcnMiLCJmdXNpb25Ecml2ZXMiLCJzdGVhbHRoRmllbGRHZW5lcmF0b3IiLCJvcmJpdGFsRGVuIiwicmVzZWFyY2hBSSIsImhpZ2hQZXJmb3JtYW5jZVRlcnJhZm9ybWVyIiwiZW5oYW5jZWRQcm9kdWN0aW9uVGVjaG5vbG9naWVzIiwibGlnaHRGaWdodGVyTWtJSSIsImNydWlzZXJNa0lJIiwiaW1wcm92ZWRMYWJUZWNobm9sb2d5IiwicGxhc21hVGVycmFmb3JtZXIiLCJsb3dUZW1wZXJhdHVyZURyaXZlcyIsImJvbWJlck1rSUkiLCJkZXN0cm95ZXJNa0lJIiwiYmF0dGxlY3J1aXNlck1rSUkiLCJyb2JvdEFzc2lzdGFudHMiLCJzdXBlcmNvbXB1dGVyIiwidm9sY2FuaWNCYXR0ZXJpZXMiLCJhY291c3RpY1NjYW5uaW5nIiwiaGlnaEVuZXJneVB1bXBTeXN0ZW1zIiwiY2FyZ29Ib2xkRXhwYW5zaW9uX0NpdmlsaWFuU2hpcHMiLCJtYWdtYVBvd2VyZWRQcm9kdWN0aW9uIiwiZ2VvdGhlcm1hbFBvd2VyUGxhbnRzIiwiZGVwdGhTb3VuZGluZyIsImlvbkNyeXN0YWxFbmhhbmNlbWVudF9oZWF2eUZpZ2h0ZXIiLCJpbXByb3ZlZFN0ZWxsYXJhdG9yIiwiaGFyZGVuZWREaWFtb25kRHJpbGxIZWFkcyIsInNlaXNtaWNNaW5pbmdUZWNobm9sb2d5IiwibWFnbWFQb3dlcmVkUHVtcFN5c3RlbXMiLCJpb25DcnlzdGFsTW9kdWxlcyIsIm9wdGltaXNlZFNpbG9Db25zdHJ1Y3Rpb25NZXRob2QiLCJkaWFtb25kRW5lcmd5VHJhbnNtaXR0ZXIiLCJvYnNpZGlhblNoaWVsZFJlaW5mb3JjZW1lbnQiLCJydW5lU2hpZWxkcyIsInJvY2t0YWxDb2xsZWN0b3JFbmhhbmNlbWVudCIsImNhdGFseXNlclRlY2hub2xvZ3kiLCJwbGFzbWFEcml2ZSIsImVmZmljaWVuY3lNb2R1bGUiLCJkZXBvdEFJIiwiZ2VuZXJhbE92ZXJoYXVsX2xpZ2h0RmlnaHRlciIsImF1dG9tYXRlZFRyYW5zcG9ydExpbmVzIiwiaW1wcm92ZWREcm9uZUFJIiwiZXhwZXJpbWVudGFsUmVjeWNsaW5nVGVjaG5vbG9neSIsImdlbmVyYWxPdmVyaGF1bF9jcnVpc2VyIiwic2xpbmdzaG90QXV0b3BpbG90IiwiaGlnaFRlbXBlcmF0dXJlU3VwZXJjb25kdWN0b3JzIiwiZ2VuZXJhbE92ZXJoYXVsX2JhdHRsZXNoaXAiLCJhcnRpZmljaWFsU3dhcm1JbnRlbGxpZ2VuY2UiLCJnZW5lcmFsT3ZlcmhhdWxfYmF0dGxlY3J1aXNlciIsImdlbmVyYWxPdmVyaGF1bF9ib21iZXIiLCJnZW5lcmFsT3ZlcmhhdWxfZGVzdHJveWVyIiwiZXhwZXJpbWVudGFsV2VhcG9uc1RlY2hub2xvZ3kiLCJtZWNoYW5HZW5lcmFsRW5oYW5jZW1lbnQiLCJoZWF0UmVjb3ZlcnkiLCJzdWxwaGlkZVByb2Nlc3MiLCJwc2lvbmljTmV0d29yayIsInRlbGVraW5ldGljVHJhY3RvckJlYW0iLCJlbmhhbmNlZFNlbnNvclRlY2hub2xvZ3kiLCJuZXVyb21vZGFsQ29tcHJlc3NvciIsIm5ldXJvSW50ZXJmYWNlIiwiaW50ZXJwbGFuZXRhcnlBbmFseXNpc05ldHdvcmsiLCJvdmVyY2xvY2tpbmdfaGVhdnlGaWdodGVyIiwidGVsZWtpbmV0aWNEcml2ZSIsInNpeHRoU2Vuc2UiLCJwc3ljaG9oYXJtb25pc2VyIiwiZWZmaWNpZW50U3dhcm1JbnRlbGxpZ2VuY2UiLCJvdmVyY2xvY2tpbmdfbGFyZ2VDYXJnbyIsImdyYXZpdGF0aW9uU2Vuc29ycyIsIm92ZXJjbG9ja2luZ19iYXR0bGVzaGlwIiwicHNpb25pY1NoaWVsZE1hdHJpeCIsImthZWxlc2hEaXNjb3ZlcmVyRW5oYW5jZW1lbnQiLCJjcmVhdGVSZWNvcmQiLCJkZWZhdWx0VmFsdWUiLCJFbXBpcmVNb2R1bGUiLCJpc01vb24iLCJwbGFuZXRJZCIsInN0b3JlZExldmVscyIsIm5ld0xldmVscyIsIm9yZGVyIiwicGxhbmV0T3JNb29uIiwicmVtb3ZlS2V5cyIsImdldEFsbEtleXMiLCJmaWx0ZXIiLCJncm91cHMiLCJyZW1vdmVLZXkiLCJkZWxldGUiLCJhbW91bnRzIiwic3RvcmVkQW1vdW50cyIsIm5ld0Ftb3VudHMiLCJyZXNlYXJjaExldmVscyIsInN0b3JlZEV4cCIsIm5ld0V4cCIsInVwZGF0ZVBsYW5ldExpZmVmb3JtVGVjaG5vbG9naWVzIiwiYWN0aXZlVGVjaHMiLCJ0ZWNoIiwiRXhwZWRpdGlvbkZpbmRhYmxlU2hpcFR5cGVzIiwiRXhwZWRpdGlvbkV2ZW50U2l6ZSIsIkV4cGVkaXRpb25FdmVudFR5cGUiLCJFeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWwiLCJPZ2FtZVJhd0V4cGVkaXRpb25SZXN1bHRUeXBlIiwiT2dhbWVSYXdFeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWwiLCJPZ2FtZVJhd0V4cGVkaXRpb25TaXplIiwiTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUiLCJMaWZlZm9ybURpc2NvdmVyeUV2ZW50QXJ0aWZhY3RGaW5kaW5nU2l6ZSIsIk9nYW1lUmF3TGlmZWZvcm1EaXNjb3ZlcnlUeXBlIiwiT2dhbWVSYXdBcnRpZmFjdEZpbmRTaXplIiwiT2dhbWVSYXdMaWZlZm9ybVR5cGUiLCJzbWFsbCIsImxhcmdlIiwibm90aGluZyIsImZsZWV0IiwiZGVsYXkiLCJlYXJseSIsImRhcmtNYXR0ZXIiLCJwaXJhdGVzIiwiYWxpZW5zIiwiY29tYmF0IiwidHJhZGVyIiwibG9zdEZsZWV0IiwibG93IiwiaGlnaCIsIkV4cGVkaXRpb25Nb2R1bGUiLCJleHBlZGl0aW9uRXZlbnREYXRhIiwia25vd25FeHBlZGl0aW9uIiwiZXhwZWRpdGlvbiIsImRlbGF5T3JFYXJseSIsImRlcGxldGlvbiIsInNpemUiLCJuYXZpZ2F0aW9uVHlwZSIsIml0ZW1IYXNoIiwiZm91bmRTaGlwcyIsInNoaXBUeXBlIiwic2hpcHMiLCJyYXdTaXplIiwibG9zdFNoaXAiLCJuZXdMaWZlZm9ybUZvdW5kIiwia25vd25MaWZlZm9ybUZvdW5kIiwiYXJ0aWZhY3RzIiwic3RvcmFnZUZ1bGwiLCJMaWZlZm9ybURpc2NvdmVyeU1vZHVsZSIsImxpZmVmb3JtRGlzY292ZXJ5RXZlbnREYXRhIiwia25vd25MaWZlZm9ybURpc2NvdmVyeSIsImxpZmVmb3JtRGlzY292ZXJ5IiwibGlmZWZvcm1FeHBlcmllbmNlIiwibGlmZWZvcm1Gb3VuZCIsInNoaXBMb3N0IiwiYXJ0aWZhY3RzRm91bmQiLCJhcnRpZmFjdFNpemUiLCJhcnRpZmFjdHNTaXplIiwibWFwcGVkU2l6ZSIsImZ1bGxTdG9yYWdlIiwibGlmZWZvcm1JZCIsImxpZmVmb3JtIiwiZXhwZXJpZW5jZSIsIiRrZXlUeXBlcyIsImZyb21LZXkiLCJ0b0tleSIsImNvbnZlcnNpb24iLCJzZXJ2ZXJEYXRhIiwidG9VcHBlckNhc2UiLCJ0aW1lem9uZSIsImRvbWFpbiIsInNwZWVkIiwic3BlZWRGbGVldFBlYWNlZnVsIiwic3BlZWRGbGVldFdhciIsInNwZWVkRmxlZXRIb2xkaW5nIiwiZ2FsYXhpZXMiLCJzeXN0ZW1zIiwiYWNzIiwiQm9vbGVhbiIsInJhcGlkRmlyZSIsImRlZlRvVEYiLCJkZWJyaXNGYWN0b3IiLCJkZWJyaXNGYWN0b3JEZWYiLCJyZXBhaXJGYWN0b3IiLCJuZXdiaWVQcm90ZWN0aW9uTGltaXQiLCJuZXdiaWVQcm90ZWN0aW9uSGlnaCIsInRvcFNjb3JlIiwiYm9udXNGaWVsZHMiLCJkb251dEdhbGF4eSIsImRvbnV0U3lzdGVtIiwid2ZFbmFibGVkIiwid2ZNaW5pbXVtUmVzc0xvc3QiLCJ3Zk1pbmltdW1Mb3NzUGVyY2VudGFnZSIsIndmQmFzaWNQZXJjZW50YWdlUmVwYWlyYWJsZSIsImdsb2JhbERldXRlcml1bVNhdmVGYWN0b3IiLCJiYXNobGltaXQiLCJwcm9iZUNhcmdvIiwicmVzZWFyY2hEdXJhdGlvbkRpdmlzb3IiLCJkYXJrTWF0dGVyTmV3QWNvdW50IiwiY2FyZ29IeXBlcnNwYWNlVGVjaE11bHRpcGxpZXIiLCJtYXJrZXRwbGFjZUVuYWJsZWQiLCJtYXJrZXRwbGFjZUJhc2ljVHJhZGVSYXRpb01ldGFsIiwibWFya2V0cGxhY2VCYXNpY1RyYWRlUmF0aW9DcnlzdGFsIiwibWFya2V0cGxhY2VCYXNpY1RyYWRlUmF0aW9EZXV0ZXJpdW0iLCJtYXJrZXRwbGFjZVByaWNlUmFuZ2VMb3dlciIsIm1hcmtldHBsYWNlUHJpY2VSYW5nZVVwcGVyIiwibWFya2V0cGxhY2VUYXhOb3JtYWxVc2VyIiwibWFya2V0cGxhY2VUYXhBZG1pcmFsIiwibWFya2V0cGxhY2VUYXhDYW5jZWxPZmZlciIsIm1hcmtldHBsYWNlVGF4Tm90U29sZCIsIm1hcmtldHBsYWNlT2ZmZXJUaW1lb3V0IiwiY2hhcmFjdGVyQ2xhc3Nlc0VuYWJsZWQiLCJtaW5lckJvbnVzUmVzb3VyY2VQcm9kdWN0aW9uIiwibWluZXJCb251c0Zhc3RlclRyYWRpbmdTaGlwcyIsIm1pbmVyQm9udXNJbmNyZWFzZWRDYXJnb0NhcGFjaXR5Rm9yVHJhZGluZ1NoaXBzIiwibWluZXJCb251c0FkZGl0aW9uYWxGbGVldFNsb3RzIiwibWluZXJCb251c0FkZGl0aW9uYWxNYXJrZXRTbG90cyIsIm1pbmVyQm9udXNBZGRpdGlvbmFsQ3Jhd2xlciIsIm1pbmVyQm9udXNNYXhDcmF3bGVyIiwibWluZXJCb251c0VuZXJneSIsIm1pbmVyQm9udXNPdmVybG9hZENyYXdsZXIiLCJyZXNvdXJjZUJ1Z2d5UHJvZHVjdGlvbkJvb3N0IiwicmVzb3VyY2VCdWdneU1heFByb2R1Y3Rpb25Cb29zdCIsInJlc291cmNlQnVnZ3lFbmVyZ3lDb25zdW1wdGlvblBlclVuaXQiLCJ3YXJyaW9yQm9udXNGYXN0ZXJDb21iYXRTaGlwcyIsIndhcnJpb3JCb251c0Zhc3RlclJlY3ljbGVycyIsIndhcnJpb3JCb251c0Z1ZWxDb25zdW1wdGlvbiIsIndhcnJpb3JCb251c1JlY3ljbGVyRnVlbENvbnN1bXB0aW9uIiwid2FycmlvckJvbnVzUmVjeWNsZXJDYXJnb0NhcGFjaXR5Iiwid2FycmlvckJvbnVzQWRkaXRpb25hbEZsZWV0U2xvdHMiLCJ3YXJyaW9yQm9udXNBZGRpdGlvbmFsTW9vbkZpZWxkcyIsIndhcnJpb3JCb251c0ZsZWV0SGFsZlNwZWVkIiwid2FycmlvckJvbnVzQXR0YWNrZXJXcmVja2ZpZWxkIiwiY29tYmF0RGVicmlzRmllbGRMaW1pdCIsImV4cGxvcmVyQm9udXNJbmNyZWFzZWRSZXNlYXJjaFNwZWVkIiwiZXhwbG9yZXJCb251c0luY3JlYXNlZEV4cGVkaXRpb25PdXRjb21lIiwiZXhwbG9yZXJCb251c0xhcmdlclBsYW5ldHMiLCJleHBsb3JlclVuaXRJdGVtc1BlckRheSIsImV4cGxvcmVyQm9udXNQaGFsYW54UmFuZ2UiLCJleHBsb3JlckJvbnVzUGx1bmRlckluYWN0aXZlIiwiZXhwbG9yZXJCb251c0V4cGVkaXRpb25FbmVteVJlZHVjdGlvbiIsImV4cGxvcmVyQm9udXNBZGRpdGlvbmFsRXhwZWRpdGlvblNsb3RzIiwicmVzb3VyY2VQcm9kdWN0aW9uSW5jcmVhc2VDcnlzdGFsRGVmYXVsdCIsInJlc291cmNlUHJvZHVjdGlvbkluY3JlYXNlQ3J5c3RhbFBvczEiLCJyZXNvdXJjZVByb2R1Y3Rpb25JbmNyZWFzZUNyeXN0YWxQb3MyIiwicmVzb3VyY2VQcm9kdWN0aW9uSW5jcmVhc2VDcnlzdGFsUG9zMyIsImV4b2R1c1JhdGlvTWV0YWwiLCJleG9kdXNSYXRpb0NyeXN0YWwiLCJleG9kdXNSYXRpb0RldXRlcml1bSIsImxpZmVmb3JtU2V0dGluZ3MiLCJTZXJ2ZXJTZXR0aW5nc01vZHVsZSIsImludGVydmFsIiwicGFyc2VyIiwiaW5pdCIsImxhc3RVcGRhdGUiLCJ0aW1lTGVmdCIsIm1heCIsInNldFRpbWVvdXQiLCJ1cGRhdGUiLCJ1cGRhdGVTZXJ2ZXJTZXR0aW5ncyIsImdldFhtbCIsInBsYXllclNjb3JlcyIsImhpZ2hzY29yZSIsInBsYXllciIsInNjb3JlIiwibWFwcGluZyIsInNlcnZlckRhdGFWYWx1ZSIsIk5vdGlmeVNlcnZlclNldHRpbmdzVXBkYXRlIiwic2VuZGVyVXVpZCIsImFwaVVybEJhc2UiLCJhcGlGaWxlIiwicmVzcG9uc2UiLCJmZXRjaCIsImNhY2hlIiwieG1sIiwiZ2V0U3RvcmFnZUtleVByZWZpeCIsImluY2x1ZGVQbGF5ZXJJZCIsInNlcnZlclByZWZpeCIsIkxhbmd1YWdlS2V5IiwibWVyZ2VEZWVwIiwiYktleSIsImN1ciIsImNyZWF0ZSIsImVtcHR5T2JqZWN0IiwiZnJlZXplIiwiaXNVbmRlZiIsImlzRGVmIiwiaXNUcnVlIiwiaXNQcmltaXRpdmUiLCJpc0Z1bmN0aW9uIiwiaXNPYmplY3QiLCJfdG9TdHJpbmciLCJpc1BsYWluT2JqZWN0IiwiaXNWYWxpZEFycmF5SW5kZXgiLCJpc0Zpbml0ZSIsImlzUHJvbWlzZSIsIm1ha2VNYXAiLCJleHBlY3RzTG93ZXJDYXNlIiwibGlzdCIsImlzUmVzZXJ2ZWRBdHRyaWJ1dGUiLCJyZW1vdmUkMiIsInNwbGljZSIsImhhc093biIsImNhY2hlZCIsImZuIiwiY2FtZWxpemVSRSIsImNhbWVsaXplIiwiXyIsImNhcGl0YWxpemUiLCJoeXBoZW5hdGVSRSIsImh5cGhlbmF0ZSIsImJpbmQiLCJjdHgiLCJib3VuZEZuIiwiX2xlbmd0aCIsInRvQXJyYXkiLCJyZXQiLCJleHRlbmQiLCJ0byIsIl9mcm9tIiwidG9PYmplY3QiLCJyZXMiLCJub29wIiwibm8iLCJpZGVudGl0eSIsImxvb3NlRXF1YWwiLCJpc09iamVjdEEiLCJpc09iamVjdEIiLCJpc0FycmF5QSIsImlzQXJyYXlCIiwiZXZlcnkiLCJrZXlzQSIsImtleXNCIiwibG9vc2VJbmRleE9mIiwib25jZSIsImNhbGxlZCIsImhhc0NoYW5nZWQiLCJTU1JfQVRUUiIsIkFTU0VUX1RZUEVTIiwiTElGRUNZQ0xFX0hPT0tTIiwiY29uZmlnIiwib3B0aW9uTWVyZ2VTdHJhdGVnaWVzIiwic2lsZW50IiwicHJvZHVjdGlvblRpcCIsImRldnRvb2xzIiwicGVyZm9ybWFuY2UiLCJlcnJvckhhbmRsZXIiLCJ3YXJuSGFuZGxlciIsImlnbm9yZWRFbGVtZW50cyIsImtleUNvZGVzIiwiaXNSZXNlcnZlZFRhZyIsImlzUmVzZXJ2ZWRBdHRyIiwiaXNVbmtub3duRWxlbWVudCIsImdldFRhZ05hbWVzcGFjZSIsInBhcnNlUGxhdGZvcm1UYWdOYW1lIiwibXVzdFVzZVByb3AiLCJfbGlmZWN5Y2xlSG9va3MiLCJpc1Jlc2VydmVkIiwiZGVmIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJiYWlsUkUiLCJzb3VyY2UiLCJoYXNQcm90byIsImluQnJvd3NlciIsIlVBIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaXNJRSIsImlzSUU5IiwiaXNFZGdlIiwiaXNJT1MiLCJfaXNTZXJ2ZXIiLCJpc0ZGIiwibmF0aXZlV2F0Y2giLCJ3YXRjaCIsInN1cHBvcnRzUGFzc2l2ZSIsIm9wdHMiLCJpc1NlcnZlclJlbmRlcmluZyIsImVudiIsIlZVRV9FTlYiLCJfX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaXNOYXRpdmUiLCJDdG9yIiwiX1NldCIsImhhc1N5bWJvbCIsIlN5bWJvbCIsIlJlZmxlY3QiLCJvd25LZXlzIiwiU2V0IiwiY2xlYXIiLCJjdXJyZW50SW5zdGFuY2UiLCJzZXRDdXJyZW50SW5zdGFuY2UiLCJ2bSIsIl9zY29wZSIsIm9mZiIsIm9uIiwiVk5vZGUiLCJ0YWciLCJjaGlsZHJlbiIsImVsbSIsImNvbXBvbmVudE9wdGlvbnMiLCJhc3luY0ZhY3RvcnkiLCJucyIsImZuQ29udGV4dCIsImZuT3B0aW9ucyIsImZuU2NvcGVJZCIsImNvbXBvbmVudEluc3RhbmNlIiwicGFyZW50IiwicmF3IiwiaXNTdGF0aWMiLCJpc1Jvb3RJbnNlcnQiLCJpc0NvbW1lbnQiLCJpc0Nsb25lZCIsImlzT25jZSIsImFzeW5jTWV0YSIsImlzQXN5bmNQbGFjZWhvbGRlciIsImNyZWF0ZUVtcHR5Vk5vZGUiLCJjcmVhdGVUZXh0Vk5vZGUiLCJjbG9uZVZOb2RlIiwidm5vZGUiLCJjbG9uZWQiLCJ1aWQkMiIsIkRlcCIsInN1YnMiLCJhZGRTdWIiLCJzdWIiLCJyZW1vdmVTdWIiLCJkZXBlbmQiLCJpbmZvIiwiYWRkRGVwIiwibm90aWZ5IiwidGFyZ2V0U3RhY2siLCJwdXNoVGFyZ2V0IiwicG9wVGFyZ2V0IiwiYXJyYXlQcm90byIsImFycmF5TWV0aG9kcyIsIm9yaWdpbmFsIiwiaW5zZXJ0ZWQiLCJvYiIsIl9fb2JfXyIsIm9ic2VydmVBcnJheSIsImRlcCIsImFycmF5S2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJOT19JTklJVElBTF9WQUxVRSIsInNob3VsZE9ic2VydmUiLCJ0b2dnbGVPYnNlcnZpbmciLCJtb2NrRGVwIiwiT2JzZXJ2ZXIiLCJzaGFsbG93IiwibW9jayIsInZtQ291bnQiLCJfX3Byb3RvX18iLCJkZWZpbmVSZWFjdGl2ZSIsIm9ic2VydmUiLCJzc3JNb2NrUmVhY3Rpdml0eSIsImlzUmVmIiwiaXNFeHRlbnNpYmxlIiwiX192X3NraXAiLCJjdXN0b21TZXR0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXR0ZXIiLCJzZXR0ZXIiLCJjaGlsZE9iIiwiZGVwZW5kQXJyYXkiLCJpc1JlYWRvbmx5IiwiX2lzVnVlIiwiZGVsIiwic2hhbGxvd1JlYWN0aXZlIiwibWFrZVJlYWN0aXZlIiwiX192X2lzUmVhZG9ubHkiLCJyIiwiX192X2lzUmVmIiwicHJveHlXaXRoUmVmVW53cmFwIiwib2xkVmFsdWUiLCJhY3RpdmVFZmZlY3RTY29wZSIsIldBVENIRVIiLCJFZmZlY3RTY29wZSIsImRldGFjaGVkIiwiYWN0aXZlIiwiZWZmZWN0cyIsImNsZWFudXBzIiwic2NvcGVzIiwicnVuIiwiY3VycmVudEVmZmVjdFNjb3BlIiwic3RvcCIsImZyb21QYXJlbnQiLCJ0ZWFyZG93biIsImxhc3QiLCJwcm92aWRlIiwicHJvdmlkZXMiLCJfcHJvdmlkZWQiLCJwYXJlbnRQcm92aWRlcyIsIiRwYXJlbnQiLCJub3JtYWxpemVFdmVudCIsInBhc3NpdmUiLCJjYXB0dXJlIiwiY3JlYXRlRm5JbnZva2VyIiwiZm5zIiwiaW52b2tlciIsImludm9rZVdpdGhFcnJvckhhbmRsaW5nIiwidXBkYXRlTGlzdGVuZXJzIiwib2xkT24iLCJyZW1vdmUiLCJjcmVhdGVPbmNlSGFuZGxlciIsIm9sZCIsInBhcmFtcyIsIm1lcmdlVk5vZGVIb29rIiwiaG9va0tleSIsImhvb2siLCJvbGRIb29rIiwid3JhcHBlZEhvb2siLCJtZXJnZWQiLCJjaGVja1Byb3AiLCJoYXNoIiwiYWx0S2V5IiwicHJlc2VydmUiLCJub3JtYWxpemVDaGlsZHJlbiIsIm5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4iLCJpc1RleHROb2RlIiwibmVzdGVkSW5kZXgiLCJfaXNWTGlzdCIsInJlbmRlckxpc3QiLCJyZW5kZXIiLCJpdGVyYXRvciIsIm5leHQiLCJyZW5kZXJTbG90IiwiZmFsbGJhY2tSZW5kZXIiLCJwcm9wcyIsImJpbmRPYmplY3QiLCJub2RlcyIsInNjb3BlZFNsb3RGbiIsIiRzY29wZWRTbG90cyIsIiRzbG90cyIsInNsb3QiLCIkY3JlYXRlRWxlbWVudCIsInJlc29sdmVGaWx0ZXIiLCJyZXNvbHZlQXNzZXQiLCIkb3B0aW9ucyIsImlzS2V5Tm90TWF0Y2giLCJleHBlY3QiLCJhY3R1YWwiLCJjaGVja0tleUNvZGVzIiwiZXZlbnRLZXlDb2RlIiwiYnVpbHRJbktleUNvZGUiLCJldmVudEtleU5hbWUiLCJidWlsdEluS2V5TmFtZSIsIm1hcHBlZEtleUNvZGUiLCJiaW5kT2JqZWN0UHJvcHMiLCJhc1Byb3AiLCJpc1N5bmMiLCJfbG9vcF8xIiwiZG9tUHJvcHMiLCJjYW1lbGl6ZWRLZXkiLCJoeXBoZW5hdGVkS2V5IiwiJGV2ZW50IiwicmVuZGVyU3RhdGljIiwiaXNJbkZvciIsIl9zdGF0aWNUcmVlcyIsInRyZWUiLCJtYXJrU3RhdGljIiwic3RhdGljUmVuZGVyRm5zIiwiX3JlbmRlclByb3h5IiwiX2MiLCJtYXJrT25jZSIsIm1hcmtTdGF0aWNOb2RlIiwiYmluZE9iamVjdExpc3RlbmVycyIsImV4aXN0aW5nIiwib3VycyIsInJlc29sdmVTY29wZWRTbG90cyIsImhhc0R5bmFtaWNLZXlzIiwiY29udGVudEhhc2hLZXkiLCIkc3RhYmxlIiwicHJveHkiLCIka2V5IiwiYmluZER5bmFtaWNLZXlzIiwiYmFzZU9iaiIsInByZXBlbmRNb2RpZmllciIsInN5bWJvbCIsImluc3RhbGxSZW5kZXJIZWxwZXJzIiwiX28iLCJfbiIsIl9zIiwiX2wiLCJfcSIsIl9tIiwiX2YiLCJfayIsIl9iIiwiX3YiLCJfZSIsIl91IiwiX2ciLCJfZCIsIl9wIiwicmVzb2x2ZVNsb3RzIiwic2xvdHMiLCJuYW1lXzEiLCJuYW1lXzIiLCJpc1doaXRlc3BhY2UiLCJub3JtYWxpemVTY29wZWRTbG90cyIsIm93bmVyVm0iLCJzY29wZWRTbG90cyIsIm5vcm1hbFNsb3RzIiwicHJldlNjb3BlZFNsb3RzIiwiaGFzTm9ybWFsU2xvdHMiLCJpc1N0YWJsZSIsIl9ub3JtYWxpemVkIiwiJGhhc05vcm1hbCIsImtleV8xIiwibm9ybWFsaXplU2NvcGVkU2xvdCIsImtleV8yIiwicHJveHlOb3JtYWxTbG90Iiwibm9ybWFsaXplZCIsInN5bmNTZXR1cEF0dHJzIiwiZnJvbSIsInByZXYiLCJpbnN0YW5jZSIsImNoYW5nZWQiLCJkZWZpbmVQcm94eUF0dHIiLCIkYXR0cnMiLCJzeW5jU2V0dXBTbG90cyIsImN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSIsImVuc3VyZUN0b3IiLCJjb21wIiwiYmFzZSIsIl9fZXNNb2R1bGUiLCJ0b1N0cmluZ1RhZyIsImdldEZpcnN0Q29tcG9uZW50Q2hpbGQiLCJjcmVhdGVFbGVtZW50JDEiLCJub3JtYWxpemF0aW9uVHlwZSIsImFsd2F5c05vcm1hbGl6ZSIsImlzIiwic2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4iLCIkdm5vZGUiLCJwcmUiLCJjcmVhdGVDb21wb25lbnQiLCJhcHBseU5TIiwic3R5bGUiLCJ0cmF2ZXJzZSIsImNsYXNzIiwicmVnaXN0ZXJEZWVwQmluZGluZ3MiLCJfY3JlYXRlRWxlbWVudCIsImZvcmNlIiwiaGFuZGxlRXJyb3IiLCJob29rcyIsImVycm9yQ2FwdHVyZWQiLCJnbG9iYWxIYW5kbGVFcnJvciIsImhhbmRsZXIiLCJfaGFuZGxlZCIsImxvZ0Vycm9yIiwidGltZXJGdW5jIiwiaXNVc2luZ01pY3JvVGFzayIsImNhbGxiYWNrcyIsInBlbmRpbmciLCJmbHVzaENhbGxiYWNrcyIsImNvcGllcyIsInBfMSIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJzZXRJbW1lZGlhdGUiLCJjb3VudGVyXzEiLCJvYnNlcnZlciIsInRleHROb2RlXzEiLCJkb2N1bWVudCIsImNyZWF0ZVRleHROb2RlIiwiY2hhcmFjdGVyRGF0YSIsIm5leHRUaWNrIiwiY2IiLCJfcmVzb2x2ZSIsImNyZWF0ZUxpZmVDeWNsZSIsImhvb2tOYW1lIiwibWVyZ2VMaWZlY3ljbGVIb29rIiwiaW5qZWN0SG9vayIsInNlZW5PYmplY3RzIiwiX3RyYXZlcnNlIiwic2VlbiIsImlzQSIsImlzRnJvemVuIiwiZGVwSWQiLCJ0YXJnZXQkMSIsInVpZCQxIiwiV2F0Y2hlciIsImV4cE9yRm4iLCJpc1JlbmRlcldhdGNoZXIiLCJzY29wZSIsIl93YXRjaGVyIiwiZGVlcCIsInVzZXIiLCJsYXp5Iiwic3luYyIsImJlZm9yZSIsImRpcnR5IiwiZGVwcyIsIm5ld0RlcHMiLCJkZXBJZHMiLCJuZXdEZXBJZHMiLCJleHByZXNzaW9uIiwicGF0aCIsInNlZ21lbnRzIiwicGFyc2VQYXRoIiwiY2xlYW51cERlcHMiLCJ0bXAiLCJ3YXRjaGVyIiwibm9SZWN1cnNlIiwiZmx1c2hpbmciLCJxdWV1ZSIsIndhaXRpbmciLCJmbHVzaFNjaGVkdWxlclF1ZXVlIiwicXVldWVXYXRjaGVyIiwiZXZhbHVhdGUiLCJfaXNCZWluZ0Rlc3Ryb3llZCIsIm9uU3RvcCIsImFkZCQxIiwiJG9uIiwicmVtb3ZlJDEiLCIkb2ZmIiwiY3JlYXRlT25jZUhhbmRsZXIkMSIsIl90YXJnZXQiLCJvbmNlSGFuZGxlciIsInVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyIsImxpc3RlbmVycyIsIm9sZExpc3RlbmVycyIsImFjdGl2ZUluc3RhbmNlIiwic2V0QWN0aXZlSW5zdGFuY2UiLCJwcmV2QWN0aXZlSW5zdGFuY2UiLCJpc0luSW5hY3RpdmVUcmVlIiwiX2luYWN0aXZlIiwiYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsImRpcmVjdCIsIl9kaXJlY3RJbmFjdGl2ZSIsIiRjaGlsZHJlbiIsImNhbGxIb29rJDEiLCJkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQiLCJzZXRDb250ZXh0IiwiaGFuZGxlcnMiLCJfaGFzSG9va0V2ZW50IiwiJGVtaXQiLCJhY3RpdmF0ZWRDaGlsZHJlbiIsImN1cnJlbnRGbHVzaFRpbWVzdGFtcCIsImdldE5vdyIsInBlcmZvcm1hbmNlXzEiLCJjcmVhdGVFdmVudCIsInRpbWVTdGFtcCIsImFjdGl2YXRlZFF1ZXVlIiwidXBkYXRlZFF1ZXVlIiwiY2FsbEFjdGl2YXRlZEhvb2tzIiwiX2lzTW91bnRlZCIsIl9pc0Rlc3Ryb3llZCIsImNhbGxVcGRhdGVkSG9va3MiLCJlbWl0IiwicmVzb2x2ZUluamVjdCIsImluamVjdCIsInByb3ZpZGVLZXkiLCJwcm92aWRlRGVmYXVsdCIsIkZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IiwiY29udGV4dFZtIiwiX3RoaXMiLCJfb3JpZ2luYWwiLCJpc0NvbXBpbGVkIiwiX2NvbXBpbGVkIiwibmVlZE5vcm1hbGl6YXRpb24iLCJpbmplY3Rpb25zIiwiX3Njb3BlSWQiLCJjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0IiwicmVuZGVyQ29udGV4dCIsImNsb25lIiwibWVyZ2VQcm9wcyIsImdldENvbXBvbmVudE5hbWUiLCJfX25hbWUiLCJfY29tcG9uZW50VGFnIiwiY29tcG9uZW50Vk5vZGVIb29rcyIsImh5ZHJhdGluZyIsImtlZXBBbGl2ZSIsIm1vdW50ZWROb2RlIiwicHJlcGF0Y2giLCJfaXNDb21wb25lbnQiLCJfcGFyZW50Vm5vZGUiLCJpbmxpbmVUZW1wbGF0ZSIsImNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUiLCIkbW91bnQiLCJvbGRWbm9kZSIsInByb3BzRGF0YSIsInBhcmVudFZub2RlIiwicmVuZGVyQ2hpbGRyZW4iLCJuZXdTY29wZWRTbG90cyIsIm9sZFNjb3BlZFNsb3RzIiwiaGFzRHluYW1pY1Njb3BlZFNsb3QiLCJuZWVkc0ZvcmNlVXBkYXRlIiwiX3JlbmRlckNoaWxkcmVuIiwicHJldlZOb2RlIiwiX3Zub2RlIiwiX2F0dHJzUHJveHkiLCIkbGlzdGVuZXJzIiwiX3Byb3BzIiwicHJvcEtleXMiLCJfcHJvcEtleXMiLCJwcm9wT3B0aW9ucyIsInZhbGlkYXRlUHJvcCIsIl9wYXJlbnRMaXN0ZW5lcnMiLCIkZm9yY2VVcGRhdGUiLCJ1cGRhdGVDaGlsZENvbXBvbmVudCIsImluc2VydCIsImRlc3Ryb3kiLCIkZGVzdHJveSIsImhvb2tzVG9NZXJnZSIsImJhc2VDdG9yIiwiX2Jhc2UiLCJjaWQiLCJmYWN0b3J5IiwiZXJyb3JDb21wIiwicmVzb2x2ZWQiLCJvd25lciIsIm93bmVycyIsImxvYWRpbmciLCJsb2FkaW5nQ29tcCIsIm93bmVyc18xIiwic3luY18xIiwidGltZXJMb2FkaW5nXzEiLCJ0aW1lclRpbWVvdXRfMSIsImZvcmNlUmVuZGVyXzEiLCJyZW5kZXJDb21wbGV0ZWQiLCJjbGVhclRpbWVvdXQiLCJyZWplY3RfMSIsInJlYXNvbiIsInJlc18xIiwiY29tcG9uZW50IiwidGltZW91dCIsInJlc29sdmVBc3luY0NvbXBvbmVudCIsImNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIiLCJyZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIiwibW9kZWwiLCJ0cmFuc2Zvcm1Nb2RlbCIsImV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEiLCJmdW5jdGlvbmFsIiwidm5vZGVzIiwiY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudCIsIm5hdGl2ZU9uIiwiYWJzdHJhY3QiLCJ0b01lcmdlIiwiX21lcmdlZCIsIm1lcmdlSG9vayIsImluc3RhbGxDb21wb25lbnRIb29rcyIsImYxIiwiZjIiLCJzdHJhdHMiLCJtZXJnZURhdGEiLCJ0b1ZhbCIsImZyb21WYWwiLCJtZXJnZURhdGFPckZuIiwicGFyZW50VmFsIiwiY2hpbGRWYWwiLCJpbnN0YW5jZURhdGEiLCJkZWZhdWx0RGF0YSIsImRlZHVwZUhvb2tzIiwibWVyZ2VBc3NldHMiLCJwYXJlbnRfMSIsIm1ldGhvZHMiLCJjb21wdXRlZCIsImRlZmF1bHRTdHJhdCIsIm1lcmdlT3B0aW9ucyIsIm5vcm1hbGl6ZVByb3BzIiwibm9ybWFsaXplSW5qZWN0IiwiZGlycyIsImRpcmVjdGl2ZXMiLCJub3JtYWxpemVEaXJlY3RpdmVzJDEiLCJleHRlbmRzIiwibWl4aW5zIiwibWVyZ2VGaWVsZCIsInN0cmF0Iiwid2Fybk1pc3NpbmciLCJhc3NldHMiLCJjYW1lbGl6ZWRJZCIsIlBhc2NhbENhc2VJZCIsImFic2VudCIsImJvb2xlYW5JbmRleCIsImdldFR5cGVJbmRleCIsInN0cmluZ0luZGV4IiwiZ2V0VHlwZSIsImdldFByb3BEZWZhdWx0VmFsdWUiLCJwcmV2U2hvdWxkT2JzZXJ2ZSIsImZ1bmN0aW9uVHlwZUNoZWNrUkUiLCJpc1NhbWVUeXBlIiwiZXhwZWN0ZWRUeXBlcyIsInNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiIsInNvdXJjZUtleSIsImluaXRTdGF0ZSIsInByb3BzT3B0aW9ucyIsImluaXRQcm9wcyQxIiwic2V0dXAiLCJfc2V0dXBDb250ZXh0IiwiaW5pdEF0dHJzUHJveHkiLCJfc2xvdHNQcm94eSIsImluaXRTbG90c1Byb3h5IiwiZXhwb3NlIiwiZXhwb3NlZCIsImNyZWF0ZVNldHVwQ29udGV4dCIsInNldHVwUmVzdWx0IiwiX3NldHVwU3RhdGUiLCJfX3NmYyIsIl9zZXR1cFByb3h5IiwiaW5pdFNldHVwIiwiaW5pdE1ldGhvZHMiLCJfZGF0YSIsImdldERhdGEiLCJpbml0RGF0YSIsIndhdGNoZXJzIiwiX2NvbXB1dGVkV2F0Y2hlcnMiLCJpc1NTUiIsInVzZXJEZWYiLCJjb21wdXRlZFdhdGNoZXJPcHRpb25zIiwiZGVmaW5lQ29tcHV0ZWQiLCJpbml0Q29tcHV0ZWQkMSIsImNyZWF0ZVdhdGNoZXIiLCJpbml0V2F0Y2giLCJzaG91bGRDYWNoZSIsImNyZWF0ZUNvbXB1dGVkR2V0dGVyIiwiY3JlYXRlR2V0dGVySW52b2tlciIsIiR3YXRjaCIsInVpZCIsInN1cGVyIiwic3VwZXJPcHRpb25zIiwibW9kaWZpZWRPcHRpb25zIiwibW9kaWZpZWQiLCJsYXRlc3QiLCJzZWFsZWQiLCJzZWFsZWRPcHRpb25zIiwicmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyIsImV4dGVuZE9wdGlvbnMiLCJjb21wb25lbnRzIiwiX2luaXQiLCJfZ2V0Q29tcG9uZW50TmFtZSIsInBydW5lQ2FjaGUiLCJrZWVwQWxpdmVJbnN0YW5jZSIsImVudHJ5IiwicHJ1bmVDYWNoZUVudHJ5IiwiY3VycmVudCIsIl91aWQiLCJ2bm9kZUNvbXBvbmVudE9wdGlvbnMiLCJpbml0SW50ZXJuYWxDb21wb25lbnQiLCJfc2VsZiIsIiRyb290IiwiJHJlZnMiLCJpbml0TGlmZWN5Y2xlIiwiX2V2ZW50cyIsImluaXRFdmVudHMiLCJwYXJlbnREYXRhIiwiaW5pdFJlbmRlciIsImluaXRJbmplY3Rpb25zIiwicHJvdmlkZU9wdGlvbiIsInByb3ZpZGVkIiwiaW5pdFByb3ZpZGUiLCJlbCIsIlZ1ZSIsImRhdGFEZWYiLCJwcm9wc0RlZiIsIiRzZXQiLCIkZGVsZXRlIiwiaW1tZWRpYXRlIiwic3RhdGVNaXhpbiIsImhvb2tSRSIsIiRvbmNlIiwiaV8xIiwiY2JzIiwiZXZlbnRzTWl4aW4iLCJfdXBkYXRlIiwicHJldkVsIiwiJGVsIiwicHJldlZub2RlIiwicmVzdG9yZUFjdGl2ZUluc3RhbmNlIiwiX19wYXRjaF9fIiwiX192dWVfXyIsImxpZmVjeWNsZU1peGluIiwiJG5leHRUaWNrIiwiX3JlbmRlciIsIl9hIiwicmVuZGVyTWl4aW4iLCJwYXR0ZXJuVHlwZXMiLCJidWlsdEluQ29tcG9uZW50cyIsIktlZXBBbGl2ZSIsImluY2x1ZGUiLCJleGNsdWRlIiwiY2FjaGVWTm9kZSIsInZub2RlVG9DYWNoZSIsImtleVRvQ2FjaGUiLCJjcmVhdGVkIiwiZGVzdHJveWVkIiwibW91bnRlZCIsInVwZGF0ZWQiLCJjb25maWdEZWYiLCJvYnNlcnZhYmxlIiwidXNlIiwicGx1Z2luIiwiaW5zdGFsbGVkUGx1Z2lucyIsIl9pbnN0YWxsZWRQbHVnaW5zIiwidW5zaGlmdCIsImluc3RhbGwiLCJpbml0VXNlIiwibWl4aW4iLCJpbml0TWl4aW4iLCJTdXBlciIsIlN1cGVySWQiLCJjYWNoZWRDdG9ycyIsIl9DdG9yIiwiU3ViIiwiQ29tcCIsImluaXRQcm9wcyIsImluaXRDb21wdXRlZCIsImluaXRFeHRlbmQiLCJpbml0QXNzZXRSZWdpc3RlcnMiLCJpbml0R2xvYmFsQVBJIiwic3NyQ29udGV4dCIsImFjY2VwdFZhbHVlIiwiaXNFbnVtZXJhdGVkQXR0ciIsImlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSIsImlzQm9vbGVhbkF0dHIiLCJ4bGlua05TIiwiaXNYbGluayIsImdldFhsaW5rUHJvcCIsImlzRmFsc3lBdHRyVmFsdWUiLCJtZXJnZUNsYXNzRGF0YSIsInN0YXRpY0NsYXNzIiwic3RyaW5naWZ5Q2xhc3MiLCJzdHJpbmdpZmllZCIsInN0cmluZ2lmeUFycmF5Iiwic3RyaW5naWZ5T2JqZWN0IiwibmFtZXNwYWNlTWFwIiwic3ZnIiwibWF0aCIsImlzSFRNTFRhZyIsImlzU1ZHIiwidW5rbm93bkVsZW1lbnRDYWNoZSIsImlzVGV4dElucHV0VHlwZSIsIm5vZGVPcHMiLCJjcmVhdGVFbGVtZW50IiwibXVsdGlwbGUiLCJzZXRBdHRyaWJ1dGUiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVDb21tZW50IiwiaW5zZXJ0QmVmb3JlIiwicGFyZW50Tm9kZSIsIm5ld05vZGUiLCJyZWZlcmVuY2VOb2RlIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIm5leHRTaWJsaW5nIiwic2V0VGV4dENvbnRlbnQiLCJ0ZXh0Q29udGVudCIsInNldFN0eWxlU2NvcGUiLCJzY29wZUlkIiwicmVmIiwicmVnaXN0ZXJSZWYiLCJpc1JlbW92YWwiLCJyZWZWYWx1ZSIsIiRyZWZzVmFsdWUiLCJpc0ZvciIsInJlZkluRm9yIiwiX2lzU3RyaW5nIiwiX2lzUmVmIiwicmVmcyIsInNldFNldHVwUmVmIiwiZW1wdHlOb2RlIiwic2FtZVZub2RlIiwidHlwZUEiLCJ0eXBlQiIsInNhbWVJbnB1dFR5cGUiLCJjcmVhdGVLZXlUb09sZElkeCIsImJlZ2luSWR4IiwiZW5kSWR4IiwidXBkYXRlRGlyZWN0aXZlcyIsIm9sZERpciIsImRpciIsImlzQ3JlYXRlIiwiaXNEZXN0cm95Iiwib2xkRGlycyIsIm5vcm1hbGl6ZURpcmVjdGl2ZXMiLCJuZXdEaXJzIiwiZGlyc1dpdGhJbnNlcnQiLCJkaXJzV2l0aFBvc3RwYXRjaCIsIm9sZEFyZyIsImFyZyIsImNhbGxIb29rIiwiY29tcG9uZW50VXBkYXRlZCIsImNhbGxJbnNlcnQiLCJlbXB0eU1vZGlmaWVycyIsIm1vZGlmaWVycyIsImdldFJhd0Rpck5hbWUiLCJyYXdOYW1lIiwiYmFzZU1vZHVsZXMiLCJ1cGRhdGVBdHRycyIsImluaGVyaXRBdHRycyIsIm9sZEF0dHJzIiwiX3ZfYXR0cl9wcm94eSIsInNldEF0dHIiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsInJlbW92ZUF0dHJpYnV0ZSIsImlzSW5QcmUiLCJiYXNlU2V0QXR0ciIsImNvbnZlcnRFbnVtZXJhdGVkVmFsdWUiLCJzZXRBdHRyaWJ1dGVOUyIsIl9faWVwaCIsImJsb2NrZXJfMSIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInVwZGF0ZUNsYXNzIiwib2xkRGF0YSIsImNscyIsImR5bmFtaWNDbGFzcyIsImdlbkNsYXNzRm9yVm5vZGUiLCJ0cmFuc2l0aW9uQ2xhc3MiLCJfdHJhbnNpdGlvbkNsYXNzZXMiLCJfcHJldkNsYXNzIiwia2xhc3MiLCJ1c2VNaWNyb3Rhc2tGaXgiLCJhdHRhY2hlZFRpbWVzdGFtcF8xIiwib3JpZ2luYWxfMSIsIl93cmFwcGVyIiwiY3VycmVudFRhcmdldCIsIm93bmVyRG9jdW1lbnQiLCJ1cGRhdGVET01MaXN0ZW5lcnMiLCJldmVudF8xIiwiY2hhbmdlIiwibm9ybWFsaXplRXZlbnRzIiwic3ZnQ29udGFpbmVyIiwiZXZlbnRzIiwidXBkYXRlRE9NUHJvcHMiLCJvbGRQcm9wcyIsImNoaWxkTm9kZXMiLCJfdmFsdWUiLCJzdHJDdXIiLCJzaG91bGRVcGRhdGVWYWx1ZSIsImlubmVySFRNTCIsImZpcnN0Q2hpbGQiLCJjaGVja1ZhbCIsImNvbXBvc2luZyIsIm5vdEluRm9jdXMiLCJhY3RpdmVFbGVtZW50IiwiaXNOb3RJbkZvY3VzQW5kRGlydHkiLCJfdk1vZGlmaWVycyIsImlzRGlydHlXaXRoTW9kaWZpZXJzIiwicGFyc2VTdHlsZVRleHQiLCJjc3NUZXh0IiwicHJvcGVydHlEZWxpbWl0ZXIiLCJub3JtYWxpemVTdHlsZURhdGEiLCJub3JtYWxpemVTdHlsZUJpbmRpbmciLCJzdGF0aWNTdHlsZSIsImJpbmRpbmdTdHlsZSIsImVtcHR5U3R5bGUiLCJjc3NWYXJSRSIsImltcG9ydGFudFJFIiwic2V0UHJvcCIsInNldFByb3BlcnR5Iiwibm9ybWFsaXplZE5hbWUiLCJub3JtYWxpemUiLCJ2ZW5kb3JOYW1lcyIsImNhcE5hbWUiLCJ1cGRhdGVTdHlsZSIsIm9sZFN0YXRpY1N0eWxlIiwib2xkU3R5bGVCaW5kaW5nIiwibm9ybWFsaXplZFN0eWxlIiwib2xkU3R5bGUiLCJuZXdTdHlsZSIsImNoZWNrQ2hpbGQiLCJzdHlsZURhdGEiLCJnZXRTdHlsZSIsIndoaXRlc3BhY2VSRSIsImFkZENsYXNzIiwiY2xhc3NMaXN0IiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQ2xhc3MiLCJ0YXIiLCJyZXNvbHZlVHJhbnNpdGlvbiIsImNzcyIsImF1dG9Dc3NUcmFuc2l0aW9uIiwiZW50ZXJDbGFzcyIsImVudGVyVG9DbGFzcyIsImVudGVyQWN0aXZlQ2xhc3MiLCJsZWF2ZUNsYXNzIiwibGVhdmVUb0NsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImhhc1RyYW5zaXRpb24iLCJUUkFOU0lUSU9OIiwiQU5JTUFUSU9OIiwidHJhbnNpdGlvblByb3AiLCJ0cmFuc2l0aW9uRW5kRXZlbnQiLCJhbmltYXRpb25Qcm9wIiwiYW5pbWF0aW9uRW5kRXZlbnQiLCJvbnRyYW5zaXRpb25lbmQiLCJvbndlYmtpdHRyYW5zaXRpb25lbmQiLCJvbmFuaW1hdGlvbmVuZCIsIm9ud2Via2l0YW5pbWF0aW9uZW5kIiwicmFmIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibmV4dEZyYW1lIiwiYWRkVHJhbnNpdGlvbkNsYXNzIiwidHJhbnNpdGlvbkNsYXNzZXMiLCJyZW1vdmVUcmFuc2l0aW9uQ2xhc3MiLCJ3aGVuVHJhbnNpdGlvbkVuZHMiLCJleHBlY3RlZFR5cGUiLCJnZXRUcmFuc2l0aW9uSW5mbyIsImVuZGVkIiwiZW5kIiwib25FbmQiLCJ0cmFuc2Zvcm1SRSIsInN0eWxlcyIsImdldENvbXB1dGVkU3R5bGUiLCJ0cmFuc2l0aW9uRGVsYXlzIiwidHJhbnNpdGlvbkR1cmF0aW9ucyIsInRyYW5zaXRpb25UaW1lb3V0IiwiZ2V0VGltZW91dCIsImFuaW1hdGlvbkRlbGF5cyIsImFuaW1hdGlvbkR1cmF0aW9ucyIsImFuaW1hdGlvblRpbWVvdXQiLCJoYXNUcmFuc2Zvcm0iLCJkZWxheXMiLCJkdXJhdGlvbnMiLCJ0b01zIiwiZW50ZXIiLCJ0b2dnbGVEaXNwbGF5IiwiX2xlYXZlQ2IiLCJjYW5jZWxsZWQiLCJ0cmFuc2l0aW9uIiwiX2VudGVyQ2IiLCJub2RlVHlwZSIsImFwcGVhckNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYmVmb3JlRW50ZXIiLCJhZnRlckVudGVyIiwiZW50ZXJDYW5jZWxsZWQiLCJiZWZvcmVBcHBlYXIiLCJhcHBlYXIiLCJhZnRlckFwcGVhciIsImFwcGVhckNhbmNlbGxlZCIsImR1cmF0aW9uIiwidHJhbnNpdGlvbk5vZGUiLCJpc0FwcGVhciIsInN0YXJ0Q2xhc3MiLCJhY3RpdmVDbGFzcyIsInRvQ2xhc3MiLCJiZWZvcmVFbnRlckhvb2siLCJlbnRlckhvb2siLCJhZnRlckVudGVySG9vayIsImVudGVyQ2FuY2VsbGVkSG9vayIsImV4cGxpY2l0RW50ZXJEdXJhdGlvbiIsImV4cGVjdHNDU1MiLCJ1c2VyV2FudHNDb250cm9sIiwiZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCIsInNob3ciLCJwZW5kaW5nTm9kZSIsIl9wZW5kaW5nIiwiaXNWYWxpZER1cmF0aW9uIiwibGVhdmUiLCJybSIsImJlZm9yZUxlYXZlIiwiYWZ0ZXJMZWF2ZSIsImxlYXZlQ2FuY2VsbGVkIiwiZGVsYXlMZWF2ZSIsImV4cGxpY2l0TGVhdmVEdXJhdGlvbiIsInBlcmZvcm1MZWF2ZSIsImludm9rZXJGbnMiLCJfZW50ZXIiLCJwYXRjaCIsImJhY2tlbmQiLCJtb2R1bGVzIiwicmVtb3ZlTm9kZSIsImNyZWF0ZUVsbSIsImluc2VydGVkVm5vZGVRdWV1ZSIsInBhcmVudEVsbSIsInJlZkVsbSIsIm5lc3RlZCIsIm93bmVyQXJyYXkiLCJpc1JlYWN0aXZhdGVkIiwiaW5pdENvbXBvbmVudCIsImlubmVyTm9kZSIsImFjdGl2YXRlIiwicmVhY3RpdmF0ZUNvbXBvbmVudCIsInNldFNjb3BlIiwiY3JlYXRlQ2hpbGRyZW4iLCJpbnZva2VDcmVhdGVIb29rcyIsInBlbmRpbmdJbnNlcnQiLCJpc1BhdGNoYWJsZSIsImlfMiIsImFuY2VzdG9yIiwiYWRkVm5vZGVzIiwic3RhcnRJZHgiLCJpbnZva2VEZXN0cm95SG9vayIsInJlbW92ZVZub2RlcyIsInJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2siLCJpXzMiLCJjaGlsZEVsbSIsImNyZWF0ZVJtQ2IiLCJmaW5kSWR4SW5PbGQiLCJvbGRDaCIsImlfNSIsInBhdGNoVm5vZGUiLCJyZW1vdmVPbmx5IiwiaHlkcmF0ZSIsIm5ld0NoIiwib2xkS2V5VG9JZHgiLCJpZHhJbk9sZCIsInZub2RlVG9Nb3ZlIiwib2xkU3RhcnRJZHgiLCJuZXdTdGFydElkeCIsIm9sZEVuZElkeCIsIm9sZFN0YXJ0Vm5vZGUiLCJvbGRFbmRWbm9kZSIsIm5ld0VuZElkeCIsIm5ld1N0YXJ0Vm5vZGUiLCJuZXdFbmRWbm9kZSIsImNhbk1vdmUiLCJ1cGRhdGVDaGlsZHJlbiIsInBvc3RwYXRjaCIsImludm9rZUluc2VydEhvb2siLCJpbml0aWFsIiwiaV82IiwiaXNSZW5kZXJlZE1vZHVsZSIsImluVlByZSIsImhhc0NoaWxkTm9kZXMiLCJjaGlsZHJlbk1hdGNoIiwiaV83IiwiZnVsbEludm9rZSIsImlzSW5pdGlhbFBhdGNoIiwiaXNSZWFsRWxlbWVudCIsImhhc0F0dHJpYnV0ZSIsIm9sZEVsbSIsInBhdGNoYWJsZSIsImlfOCIsImlfOSIsImluc2VydF8xIiwiaV8xMCIsImNyZWF0ZVBhdGNoRnVuY3Rpb24iLCJ2bW9kZWwiLCJ0cmlnZ2VyIiwiZGlyZWN0aXZlIiwiYmluZGluZyIsIl92T3B0aW9ucyIsInNldFNlbGVjdGVkIiwib25Db21wb3NpdGlvblN0YXJ0Iiwib25Db21wb3NpdGlvbkVuZCIsInByZXZPcHRpb25zXzEiLCJjdXJPcHRpb25zXzEiLCJoYXNOb01hdGNoaW5nT3B0aW9uIiwiYWN0dWFsbHlTZXRTZWxlY3RlZCIsImlzTXVsdGlwbGUiLCJzZWxlY3RlZCIsIm9wdGlvbiIsInNlbGVjdGVkSW5kZXgiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwibG9jYXRlTm9kZSIsInBsYXRmb3JtRGlyZWN0aXZlcyIsIm9yaWdpbmFsRGlzcGxheSIsIl9fdk9yaWdpbmFsRGlzcGxheSIsImRpc3BsYXkiLCJ1bmJpbmQiLCJ0cmFuc2l0aW9uUHJvcHMiLCJtb2RlIiwiZ2V0UmVhbENoaWxkIiwiY29tcE9wdGlvbnMiLCJleHRyYWN0VHJhbnNpdGlvbkRhdGEiLCJwbGFjZWhvbGRlciIsInJhd0NoaWxkIiwiaXNOb3RUZXh0Tm9kZSIsImlzVlNob3dEaXJlY3RpdmUiLCJUcmFuc2l0aW9uIiwiaGFzUGFyZW50VHJhbnNpdGlvbiIsIl9sZWF2aW5nIiwib2xkUmF3Q2hpbGQiLCJvbGRDaGlsZCIsImlzU2FtZUNoaWxkIiwiZGVsYXllZExlYXZlXzEiLCJtb3ZlQ2xhc3MiLCJUcmFuc2l0aW9uR3JvdXAiLCJiZWZvcmVNb3VudCIsImtlcHQiLCJwcmV2Q2hpbGRyZW4iLCJyYXdDaGlsZHJlbiIsInRyYW5zaXRpb25EYXRhIiwicmVtb3ZlZCIsInBvcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImhhc01vdmUiLCJjYWxsUGVuZGluZ0NicyIsInJlY29yZFBvc2l0aW9uIiwiYXBwbHlUcmFuc2xhdGlvbiIsIl9yZWZsb3ciLCJib2R5Iiwib2Zmc2V0SGVpZ2h0IiwibW92ZWQiLCJlbF8xIiwidHJhbnNmb3JtIiwiV2Via2l0VHJhbnNmb3JtIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiX21vdmVDYiIsInByb3BlcnR5TmFtZSIsIl9oYXNNb3ZlIiwiY2xvbmVOb2RlIiwibmV3UG9zIiwib2xkUG9zIiwiZHgiLCJsZWZ0IiwiZHkiLCJ0b3AiLCJwbGF0Zm9ybUNvbXBvbmVudHMiLCJfdHlwZW9mIiwiX2RlZmluZVByb3BlcnR5IiwicmVmbGVjdGlvbklzU3VwcG9ydGVkIiwiZGVmaW5lTWV0YWRhdGEiLCJnZXRPd25NZXRhZGF0YUtleXMiLCJjb3B5UmVmbGVjdGlvbk1ldGFkYXRhIiwiZm9yd2FyZE1ldGFkYXRhIiwicHJvcGVydHlLZXkiLCJtZXRhS2V5IiwibWV0YWRhdGEiLCJnZXRPd25NZXRhZGF0YSIsIkhUTUxVbmtub3duRWxlbWVudCIsIkhUTUxFbGVtZW50IiwidXBkYXRlQ29tcG9uZW50IiwicHJlV2F0Y2hlcnMiLCJfcHJlV2F0Y2hlcnMiLCJtb3VudENvbXBvbmVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjb2xsZWN0RGF0YUZyb21Db25zdHJ1Y3RvciIsIkNvbXBvbmVudCIsIm9yaWdpbmFsSW5pdCIsInBsYWluRGF0YSIsIiRpbnRlcm5hbEhvb2tzIiwiY29tcG9uZW50RmFjdG9yeSIsInByb3RvIiwiZGVzY3JpcHRvciIsImRlY29yYXRvcnMiLCJfX2RlY29yYXRvcnNfXyIsInN1cGVyUHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsIkV4dGVuZGVkIiwiZm9yd2FyZFN0YXRpY01lbWJlcnMiLCJzaG91bGRJZ25vcmUiLCJjYWxsZWUiLCJjYWxsZXIiLCJPcmlnaW5hbCIsImV4dGVuZGVkRGVzY3JpcHRvciIsInN1cGVyRGVzY3JpcHRvciIsInJlZ2lzdGVySG9va3MiLCJhcnIyIiwiX2FycmF5V2l0aG91dEhvbGVzIiwiaXRlciIsIl9pdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJnZXRNZXRhZGF0YSIsImRlIiwiRGVmZW5zZVR5cGUiLCJyb2NrZXRMYXVuY2hlciIsImxpZ2h0TGFzZXIiLCJoZWF2eUxhc2VyIiwiZ2F1c3NDYW5ub24iLCJpb25DYW5ub24iLCJwbGFzbWFUdXJyZXQiLCJzbWFsbFNoaWVsZERvbWUiLCJsYXJnZVNoaWVsZERvbWUiLCJkYXRlUmFuZ2VzIiwiY29sb3JzIiwiY29tbW9uIiwiaW1wb3J0RXhwb3J0IiwiZXhwZWRpdGlvbnMiLCJjb21iYXRzIiwiZGVicmlzRmllbGRzIiwicmVzb3VyY2VCYWxhbmNlIiwidW5pdmVyc2VIaXN0b3J5IiwiZGFuZ2VyWm9uZSIsImFjY2Vzc2JpbGl0eSIsImxpbmtBY2NvdW50cyIsIm1pZ3JhdGVPbGREYXRhIiwiZGVmYXVsdE5hbWVzIiwiY3VycmVudFdlZWsiLCJjdXJyZW50TW9udGgiLCJuZXdSYW5nZSIsInNpbmNlIiwiZmlyc3REYXlUZW1wbGF0ZSIsImhlYWRlcnMiLCJsYWJlbCIsInJhbmdlU3RhcnQiLCJyYW5nZUNvbnRhaW5zIiwiZGF5cyIsImRheXNBZ28iLCJ3ZWVrcyIsIndlZWtzQWdvIiwibW9udGhzIiwibW9udGhzQWdvIiwieWVhcnMiLCJ5ZWFyc0FnbyIsImNvbWJhdFJlc3VsdHMiLCJleHBlZGl0aW9uRXZlbnRzIiwiZXhwZWRpdGlvbkV2ZW50U2l6ZXMiLCJleHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWxzIiwibGlmZWZvcm1EaXNjb3ZlcmllcyIsImxpZmVmb3JtcyIsImV4dGVuc2lvbkxhbmd1YWdlIiwiZXh0ZW5zaW9uTGFuZ3VhZ2VGYWxsYmFja0hpbnQiLCJjb252ZXJzaW9uUmF0ZXMiLCJ0aXRsZSIsIm1zdUxvbmciLCJkc3VMb25nIiwiZm9yY2VVcGRhdGUiLCJyZXNvdXJjZVVuaXRGYWN0b3JzT2ZTaGlwRm91bmRPbkV4cGVkaXRpb25zIiwicmVzb3VyY2VVbml0RmFjdG9yc09mTG9zdFNoaXBzIiwiaWdub3JlRXNwaW9uYWdlQ29tYmF0cyIsImRldGFpbGVkUmVzb3VyY2VCYWxhbmNlIiwiaGVhZGVyIiwiY2hlY2tib3hMYWJlbCIsImluY2x1ZGVTaGlwc0ZvdW5kT25FeHBlZGl0aW9ucyIsImluY2x1ZGVTaGlwc0xvc3RJbkNvbWJhdHMiLCJpbmNsdWRlTG9zdExvb3RSZXNvdXJjZXMiLCJzaG93Q29udmVydGVkVW5pdHNJblRhYmxlcyIsImluZm9BbW9ydGl6YXRpb24iLCJyZXNldCIsInNldERlZmF1bHRSb3V0ZSIsInNldERlZmF1bHRTdWJSb3V0ZSIsImRvWW91V2FudFRvQ29udGludWUiLCJkZWxldGVFeHBlZGl0aW9ucyIsImJ1dHRvbiIsImFjY291bnQiLCJjb25maXJtYXRpb25UZXh0IiwiZGVsZXRlQ29tYmF0cyIsImRlbGV0ZURlYnJpc0ZpZWxkUmVwb3J0cyIsImRlbGV0ZUFjY291bnQiLCJkZWxldGVVbml2ZXJzZUhpc3RvcnkiLCJzZXJ2ZXIiLCJkZWxldGVFdmVyeXRoaW5nIiwiY29uZmlybWF0aW9uVGV4dDEiLCJjb25maXJtYXRpb25UZXh0MiIsImV4cG9ydCIsImRlc2NyaXB0aW9uIiwiaW5jbHVkZVVuaXZlcnNlSGlzdG9yeSIsIndhaXQiLCJlcnJvcnMiLCJ1bmV4cGVjdGVkRXJyb3IiLCJpbXBvcnQiLCJpbnZhbGlkRm9ybWF0IiwiaW1wb3J0Q2FsbGJhY2tzIiwiaW1wb3J0aW5nU2V0dGluZ3MiLCJpbXBvcnRpbmdCYXNpY0RhdGEiLCJpbXBvcnRpbmdVbml2ZXJzZUhpc3RvcmllcyIsInNlcnZlckluZGV4Iiwic2VydmVyVG90YWwiLCJlbnRyeUluZGV4IiwiZW50cnlUb3RhbCIsImltcG9ydGluZ0FjY291bnRzIiwiYWNjb3VudEluZGV4IiwidG90YWxBY2NvdW50cyIsInN0ZXBJbmRleCIsInN0ZXBUb3RhbCIsImJhc2VNZXNzYWdlIiwiYWNjb3VudFByb2dyZXNzIiwiYWNjZXNzaWJpbGl0eSIsInNob3dTaW1wbGlmaWVkUmVzdWx0cyIsInNlcGFyYXRlRXhwZWRpdGlvbkRlYnJpc0ZpZWxkcyIsImRlc2NyaXB0aW9uSHRtbCIsImxpbmtBY2NvdW50IiwibGlua2VkQWNjb3VudHMiLCJvZ2FtZSIsImJ1aWxkaW5ncyIsImxpZmVmb3JtQnVpbGRpbmdzIiwibGlmZWZvcm1UZWNobm9sb2dpZXMiLCJwcmVtaXVtIiwicmVzZWFyY2giLCJkZWZlbnNlcyIsImV4dGVuc2lvbiIsImF2ZXJhZ2VQZXJEYXkiLCJjaGFydCIsInRhYmxlIiwic3VtIiwidG90YWwiLCJyZXNvdXJjZVVuaXRzIiwiZHN1IiwibXN1IiwibWFkZVdpdGhMb3ZlMSIsIm1hZGVXaXRoTG92ZTIiLCJ0YWJIZWFkZXJzIiwib3ZlcnZpZXciLCJmb3VuZFJlc291cmNlcyIsImZvdW5kRGFya01hdHRlciIsImZvdW5kSXRlbXMiLCJ0b3BGaW5kcyIsInBvc3NpYmxlRmluZHMiLCJzdWJIZWFkZXJzIiwic2l6ZXMiLCJzaXplc0J5UmVzb3VyY2UiLCJkZXBsZXRpb25MZXZlbHMiLCJ1bmtub3duIiwiZmluZHMiLCJzaGlwc0ZvdW5kIiwic2hpcFVuaXRzIiwic2hpcEFtb3VudCIsInBsYXllckNsYXNzIiwicmVzb3VyY2VGaW5kQm9udXMiLCJzaGlwRmluZEJvbnVzIiwiZGFya01hdHRlckZpbmRCb251cyIsImRpc2NvdmVyZXJCb251cyIsIm1heGltdW1GaW5kcyIsImZpbmRzRGFya01hdHRlciIsImxpc3RPZlBvc3NpYmxlRmluZHMiLCJmaW5kU2l6ZXMiLCJzaGlwTWF4VW5pdHNDb252ZXJ0ZWQiLCJhZ2FpbnN0UGxheWVycyIsIm9uRXhwZWRpdGlvbnMiLCJzaGlwc0xvc3QiLCJkb25hdGUiLCJzdWJIZWFkZXIiLCJjcnlwdG8iLCJrb2ZpIiwiYnV0dG9uVGV4dCIsImFkZERlYnJpc0ZpZWxkTWFudWFsbHkiLCJlbXBpcmUiLCJzdXBwbHlCdWlsZGluZ3MiLCJmYWNpbGl0eUJ1aWxkaW5ncyIsInByb2R1Y3Rpb24iLCJyZXNvdXJjZVByb2R1Y3Rpb24iLCJtaW5lT3ZlcnZpZXciLCJhdmVyYWdlUGVySG91ciIsInRvdGFsUGVySG91ciIsInRvdGFsUGVyRGF5IiwidG90YWxQZXJXZWVrIiwiYWN0aXZlUHJvZHVjdGlvblNldHRpbmdzIiwibWVzc2FnZVByb2R1Y3Rpb24xMDAiLCJtaW5lcyIsImNyYXdsZXJzQXZhaWxhYmxlIiwiY3Jhd2xlcnNUb1JlYWNoTGltaXQiLCJpdGVtcyIsImJyZWFrZG93biIsImJhc2ljSW5jb21lIiwibWluZVByb2R1Y3Rpb24iLCJjb25zdW1wdGlvbiIsImNyYXdsZXJzIiwiZ2VvbG9naXN0IiwiY29tbWFuZFN0YWZmIiwiYWxsaWFuY2VDbGFzcyIsImFwcGx5QW5kQ2xvc2UiLCJhbW9ydGl6YXRpb24iLCJsZXZlbHMiLCJwcm9kdWN0aW9uUGx1cyIsImFtb3J0aXphdGlvblRpbWUiLCJncm91cFNlbGVjdGVkSXRlbXMiLCJzaG93T3JpZ2luYWxJdGVtcyIsImxldmVsc09uUGxhbmV0cyIsInBsYW5ldHMiLCJpbmNsdWRlU2V0dGluZ3MiLCJleHBlZGl0aW9uc1JlcXVpcmVtZW50IiwibGlmZWZvcm1Qcm9kdWN0aW9uQm9udXNCdWlsZGluZ3MiLCJsaWZlZm9ybVRlY2hub2xvZ3lCb29zdEJ1aWxkaW5ncyIsImxpZmVmb3JtUHJvZHVjdGlvbkJvbnVzVGVjaG5vbG9naWVzIiwibGlmZWZvcm1FeHBlZGl0aW9uQm9udXNUZWNobm9sb2dpZXMiLCJhc3Ryb3BoeXNpY3NBbmRDb2xvbnkiLCJhc3Ryb3BoeXNpY3NQZXJmb3JtYW5jZU5vdGUiLCJwbGF5ZXJTZXR0aW5ncyIsIm9wdGltaXplRm9yUmVzb3VyY2VzIiwib2ZmaWNlcnMiLCJjdXJyZW50TGV2ZWxPZiIsImxpZmVmb3JtTGV2ZWxzIiwidW51c2VkUmFpZENvbG9ueVNsb3RzIiwiYXN0cm9waHlzaWNzU2V0dGluZ3MiLCJuZXdDb2xvbnkiLCJwbGFuZXRTZXR0aW5ncyIsImdsb2JhbCIsImRlc2VsZWN0SXRlbXMiLCJpZ25vcmVJbmFjdGl2ZUxpZmVmb3JtVGVjaG5vbG9neVNsb3RzIiwiZGVzZWxlY3RBbGxQbGFuZXRzIiwiaW5jbHVkZUluUmVzdWx0IiwibWF4VGVtcGVyYXR1cmUiLCJhY3RpdmVJdGVtcyIsInBlcmNlbnRhZ2UiLCJmaXhDb3VudCIsIm1heENvdW50IiwicmVsZXZhbnRMaWZlZm9ybUJ1aWxkaW5ncyIsImlnbm9yZUVtcHR5U2xvdHMiLCJleHBlZGl0aW9uU2V0dGluZ3MiLCJhdmVyYWdlV2F2ZXNQZXJEYXkiLCJhdmVyYWdlRXhwZWRpdGlvbnNQZXJEYXkiLCJzaGlwVW5pdEZhY3RvcnMiLCJ0b3BQbGF5ZXJTY29yZSIsImdlbmVyYXRpbmdJdGVtcyIsInNsb3dDYWxjdWxhdGlvbiIsImN0cmxDbGljayIsInNhdmVMb2FkIiwic2F2ZUJ1dHRvbiIsImxvYWRCdXR0b24iLCJsb2FkZWRTYXZlIiwiaGlkZGVuSXRlbXMiLCJhYmFuZG9uZWRQbGFuZXQiLCJnZW5lcmF0ZUl0ZW1zIiwicHJvZ3Jlc3MiLCJkaXNjb3ZlcnlNaXNzaW9ucyIsImRpc2NvdmVyeVJlc3VsdHMiLCJyZXNlYXJjaEJvbnVzZXMiLCJwbGFuZXRCb251c2VzIiwidGVjaG5vbG9naWVzIiwidGllciIsInRvdGFsTGlmZWZvcm1FeHBlcmllbmNlIiwiZGlzY292ZXJ5RGF0ZVVua25vd24iLCJub3REaXNjb3ZlcmVkWWV0IiwiZXZlbnRUeXBlcyIsImFydGlmYWN0RmluZGluZ1NpemVzIiwiYWx3YXlzQXZhaWxhYmxlIiwiZXhwZXJpZW5jZVBvaW50cyIsImRpc2NvdmVyZWRPbiIsIm51bWJlck9mTGlmZWZvcm1EaXNjb3ZlcmllcyIsImdsb2JhbFJlc2VhcmNoQm9udXMiLCJib251cyIsImxpZmVmb3JtQnVpbGRpbmdzQm9vc3QiLCJsaWZlZm9ybUxldmVsQm9vc3QiLCJidWdCb29zdCIsImV4cGVkaXRpb25GaW5kcyIsImZsZWV0TG9zcyIsImV4cGVkaXRpb25TcGVlZCIsImFybW9yIiwic2hpZWxkIiwiZGFtYWdlIiwiY2FyZ28iLCJmdWVsUmV0dXJuIiwiYnVpbGRpbmdDb3N0VGltZSIsInJlc2VhcmNoQ29zdFRpbWUiLCJyZXNlYXJjaGVzIiwibGlmZWZvcm1SZXNlYXJjaGVzIiwicHJvZHVjdGlvbkJvbnVzIiwiZW5lcmd5Q29uc3VtcHRpb24iLCJkZW5DYXBhY2l0eSIsInBoYWxhbnhSYW5nZSIsInBsYXllckNsYXNzZXMiLCJjb2xsZWN0b3IiLCJlbmVyZ3lQcm9kdWN0aW9uQm9udXMiLCJ0cmFuc3BvcnRlclNwZWVkQm9udXMiLCJ0cmFuc3BvcnRlckNhcmdvQm9udXMiLCJjcmF3bGVyUHJvZHVjdGlvbkJvbnVzIiwiZ2VvbG9naXN0Q3Jhd2xlckFtb3VudEJvbnVzIiwiZGlzY292ZXJlciIsInJlc2VhcmNoRHVyYXRpb24iLCJpbmNyZWFzZWRFeHBlZGl0aW9uRmluZHMiLCJsYXJnZXJQbGFuZXRzIiwiYWRkaXRpb25hbEV4cGVkaXRpb25TbG90cyIsInJlZHVjZWRFeHBlZGl0aW9uQ29tYmF0Q2hhbmNlIiwiZ2VuZXJhbCIsImNvbWJhdFNoaXBTcGVlZCIsInJlY3ljbGVyU3BlZWQiLCJpbmNyZWFzZWRDYXJnb1JlY3ljbGVyc1BhdGhmaW5kZXJzIiwiYWRkaXRpb25hbENvbWJhdFJlc2VhcmNoTGV2ZWxzIiwiYWRkaXRpb25hbEZsZWV0U2xvdHMiLCJhZGRpdGlvbmFsTW9vbkZpZWxkcyIsImNsYXNzQm9udXMiLCJiYXNlVmFsdWUiLCJ2YWx1ZVdpdGhCb251c2VzIiwibGlmZWZvcm1SZXNlYXJjaENvc3RUaW1lIiwid3JlY2tmaWVsZCIsIndvcnN0RmluZHMiLCJzd2l0Y2hBY2NvdW50cyIsImFib3V0IiwiZmFxSGVscCIsImZhcSIsImZsZWV0TG9zdE9uRXhwZWRpdGlvbiIsInN5bmNCZXR3ZWVuRGV2aWNlcyIsInByb2R1Y3Rpb25JblJlc291cmNlQmFsYW5jZSIsIndoYXRBcmVBdmVyYWdlcyIsInRpcHMiLCJyaWdodENsaWNrRGVmYXVsdFJvdXRlIiwibnVtYmVyc0tleWJvYXJkTmF2aWdhdGlvbiIsImFtb3J0aXphdGlvblRhYmxlIiwicGFydDEiLCJwYXJ0MiIsImlubGluZVNldHRpbmdzIiwic3dpdGNoQWNjb3VudEh0bWwiLCJtZXNzYWdlRGlzY29yZCIsImRpc2NvcmRTZXJ2ZXIiLCJjdXJyZW50QWNjb3VudCIsIm51bWJlck9mVHJhY2tlZEV4cGVkaXRpb25zIiwibnVtYmVyT2ZUcmFja2VkQ29tYmF0UmVwb3J0cyIsIm51bWJlck9mVHJhY2tlZERlYnJpc0ZpZWxkUmVwb3J0cyIsIm51bWJlck9mVHJhY2tlZExpZmVmb3JtRGlzY292ZXJpZXMiLCJsYXN0VXBkYXRlU2VydmVyU2V0dGluZ3MiLCJudW1iZXJPZlVuaXZlcnNlSGlzdG9yeUVudHJpZXMiLCJudW1iZXJPZlRyYWNrZWRBY2NvdW50cyIsImVzdGltYXRlZFNpemUiLCJtZXNzYWdlcyIsIm5vdEVuYWJsZWRIdG1sIiwiaGlzdG9yeVRyYWNraW5nTm90RW5hYmxlZEh0bWwiLCJ0cmFja2luZ1RpbWVzSHRtbCIsImVuYWJsZUhpZ2hzY29yZVRyYWNraW5nT25seSIsImVuYWJsZUhpc3RvcnlUcmFja2luZyIsInBsYXllcnMiLCJhbGxpYW5jZXMiLCJzdWJ0YWJzIiwiaGlzdG9yeSIsInBsYXllclNlbGVjdGlvbiIsImFsbGlhbmNlU2VsZWN0aW9uIiwiaGlnaHNjb3JlVGFicyIsImVjb25vbXkiLCJtaWxpdGFyeSIsIm1pbGl0YXJ5QnVpbHQiLCJtaWxpdGFyeURlc3Ryb3llZCIsIm1pbGl0YXJ5TG9zdCIsImhvbm9yIiwibnVtYmVyT2ZTaGlwcyIsImxpZmVmb3JtRWNvbm9teSIsImxpZmVmb3JtVGVjaG5vbG9neSIsImhpc3RvcnlUYWJzIiwic3RhdHVzIiwibmlja25hbWVzIiwicGxhbmV0QW5kTW9vbnMiLCJuYW1lcyIsIm1lbWJlcnMiLCJub0FsbGlhbmNlIiwiYWxsaWFuY2UiLCJ1bnRpbCIsInZhY2F0aW9uIiwiaW5hY3RpdmUiLCJpbmFjdGl2ZUxvbmciLCJiYW5uZWQiLCJvdXRsYXciLCJkZWxldGVkIiwiYWRtaW4iLCJsb2FkaW5nVGFraW5nTG9uZyIsIm5vdGlmaWNhdGlvbnMiLCJkZWJyaXNGaWVsZFJlcG9ydFRyYWNraW5nIiwiZXhwZWRpdGlvblRyYWNraW5nIiwiZmxlZXRMb3N0Iiwic3VtbWFyeSIsImxpZmVmb3JtRGlzY292ZXJ5VHJhY2tpbmciLCJtZXNzYWdlVHJhY2tpbmdFcnJvciIsInRvb2xzIiwic2lnbmF0dXJlR2VuZXJhdG9yIiwiZGVicmlzRmllbGRSZXBvcnRzIiwic2NyYXB5YXJkTWVyY2hhbnQiLCJleGNlbEV4cG9ydCIsImNob29zZUJlbG93TWVzc2FnZSIsInJhd0RhdGEiLCJkYWlseU92ZXJ2aWV3IiwiZGFpbHlEZXBsZXRpb24iLCJkYWlseVJlc291cmNlcyIsImRhaWx5UmVzb3VyY2VTaXplcyIsImRhaWx5U2hpcHMiLCJkYWlseVNoaXBTaXplcyIsImRhaWx5RGFya01hdHRlciIsImRhaWx5RGFya01hdHRlclNpemVzIiwiZGFpbHlSZXN1bHRzIiwiZGFpbHlMb290IiwiZGFpbHlMb3N0U2hpcHMiLCJkYWlseUV4cGVyaWVuY2UiLCJnZW5lcmF0ZUJ1dHRvbiIsInNoZWV0cyIsImRhaWx5UmVzb3VyY2VzU2l6ZSIsImRhaWx5U2hpcHNTaXplIiwiZGFpbHlEYXJrTWF0dGVyU2l6ZSIsImV2ZW50VHlwZSIsImV2ZW50U2l6ZSIsImdhbGF4eSIsInRhcmdldFR5cGUiLCJjb21iYXRUeXBlIiwiZXhwZWRpdGlvbkNvbWJhdE9wcG9uZW50IiwibW9vbiIsImV4cGVkaXRpb25Db21iYXQiLCJwbGF5ZXJDb21iYXQiLCJlbiIsInB0X3B0IiwiZnIiLCJJMThuTWVzc2FnZVByb3h5IiwiaTE4biIsInJvb3QiLCJsYW5nIiwiZnVsbFJvb3RLZXkiLCJmaWVsZEtleSIsImxvY2FsUm9vdCIsImZ1bGxLZXkiLCJ0aHJvd09uRGlzYWJsZWQiLCJsYXN0TG9jYWxlIiwiZmFsbGJhY2tMb2NhbGUiLCJmYWxsYmFja0xvY2FsZXMiLCJJMThuIiwiZW5hYmxlZCIsImxvY2FsZVJlZ2lvbiIsIl9wcm94eSIsIiR0IiwiZGF0ZVRpbWVGb3JtYXRzIiwiZnVsbExvY2FsZUlkZW50aWZpZXIiLCIkZCIsImZvcm1hdE5hbWUiLCJkYXRlRm9ybWF0IiwiSW50bCIsIkRhdGVUaW1lRm9ybWF0IiwiJG4iLCJOdW1iZXJGb3JtYXQiLCIkdGltZXNwYW4iLCJ2YWx1ZUluU2Vjb25kcyIsInRvdGFsVGltZSIsIkJpZ0ludCIsInNlY29uZHMiLCJwYWRTdGFydCIsInRpbWVXaXRoRGF5cyIsImRlc2MiLCJkZWNvcmF0ZSIsIiRpMThuIiwiZGF0ZXRpbWUiLCJob3VyMTIiLCJob3VyIiwibWludXRlIiwic2Vjb25kIiwidGltZV9obSIsImxvYWRTZXR0aW5ncyIsIm9sZExhbmciLCJkZWZhdWx0U2V0dGluZ3MiLCJza2lwIiwidGFrZSIsImxvc3RTaGlwc1Jlc291cmNlVW5pdHMiLCJmYWN0b3IiLCJkZXV0ZXJpdW1GYWN0b3IiLCJzaG93RGV0YWlsZWRCcmVha2Rvd24iLCJpbmNsdWRlRXhwZWRpdGlvbkZvdW5kU2hpcHNSZXNvdXJjZVVuaXRzIiwiaW5jbHVkZUxvc3RTaGlwc1Jlc291cmNlVW5pdHMiLCJzaG93Q2VsbHNXaXRoQ29udmVydGVkUmVzb3VyY2VVbml0cyIsImV4cGVkaXRpb25Gb3VuZFNoaXBzUmVzb3VyY2VVbml0cyIsImRlZmF1bHRSb3V0ZXMiLCJ0b3RhbENvbnZlcnRlZCIsInVwZGF0ZVRpbWVzIiwidHJhY2tIaXN0b3J5IiwibWVzc2FnZVRyYWNraW5nIiwiZ2V0RGVmYXVsdFNldHRpbmdzIiwibGFuZ3VhZ2VNYXAiLCJhciIsImJyIiwiY3oiLCJjcyIsImRrIiwiZGEiLCJlcyIsImdyIiwiaHIiLCJodSIsIml0IiwibXgiLCJubCIsInBsIiwicHQiLCJybyIsInJ1Iiwic2kiLCJzbCIsInRyIiwidXMiLCJ0dyIsIkhpZ2hzY29yZVR5cGUiLCJIaWdoc2NvcmVUeXBlTmFtZXMiLCJQbGFuZXRUeXBlIiwiY29vcmRzUmVnZXgiLCJhZGREYXlzIiwic2V0RGF0ZSIsIlVuaXZlcnNlSGlzdG9yeU1vZHVsZSIsImluVXBkYXRlIiwicmVhZHkiLCJpbml0U2V0dGluZ3MiLCJpbml0VHJhY2tpbmciLCJuZXh0VXBkYXRlcyIsInNldEhvdXJzIiwic3RhcnRPZkRheSIsInVwZGF0ZVRpbWUiLCJuZXh0VXBkYXRlIiwiZmluZCIsInRyYWNrVW5pdmVyc2VVcGRhdGVzIiwiZ2V0UGxheWVycyIsImdldEFsbGlhbmNlcyIsImdldEFsbFBsYXllclNjb3JlcyIsImdldFBsYW5ldHMiLCJhbGxTdG9yZU5hbWVzIiwidXBkYXRlSGlzdG9yeSIsIm5vdGlmaWNhdGlvbk1lc3NhZ2UiLCJOb3RpZnlVbml2ZXJzZUhpc3RvcnlVcGRhdGUiLCJ1cGRhdGVQbGF5ZXJzIiwidXBkYXRlQWxsaWFuY2VzIiwidXBkYXRlUGxhbmV0cyIsInVwZGF0ZUtub3duQWxsaWFuY2VzIiwidXBkYXRlQWxsaWFuY2VUYWdzIiwidXBkYXRlQWxsaWFuY2VOYW1lcyIsInVwZGF0ZUFsbGlhbmNlU2NvcmVzIiwidXBkYXRlQWxsaWFuY2VNZW1iZXJzIiwidXBkYXRlQWxsaWFuY2VTdGF0ZXMiLCJhbGx5IiwibGFzdFRhZ3MiLCJsYXN0VGFnVXBkYXRlcyIsImN1cnNvciIsIm9wZW5DdXJzb3IiLCJkYlZhbHVlIiwiYWxsaWFuY2VJZCIsImxhc3ROYW1lcyIsImxhc3ROYW1lVXBkYXRlcyIsImxhc3RNZW1iZXJzIiwibGFzdE1lbWJlclVwZGF0ZXMiLCJhcnJheXNFcXVhbCIsImxhc3RTdGF0ZXMiLCJsYXN0U3RhdGVVcGRhdGVzIiwic3RhdGUiLCJhbGx5SWRzIiwiZGVsZXRlZEFsbGllcyIsImFsbHlJZCIsImxhc3RTY29yZXMiLCJsYXN0U2NvcmVVcGRhdGVzIiwic2NvcmVUeXBlcyIsInNjb3Jlc0J5VHlwZSIsIm1lbWJlclNjb3JlcyIsInNjb3JlVHlwZSIsInNjb3Jlc0J5QWxseSIsInJlZHVjZSIsInNvcnRlZFNjb3Jlc0J5VHlwZSIsImFsbHlTY29yZXMiLCJzb3J0ZWRTY29yZXMiLCJsYXN0QWxseVNjb3JlIiwidXBkYXRlS25vd25QbGF5ZXJzIiwidXBkYXRlUGxheWVyU2NvcmVzIiwidXBkYXRlUGxheWVyTmFtZXMiLCJ1cGRhdGVQbGF5ZXJBbGxpYW5jZXMiLCJ1cGRhdGVQbGF5ZXJTdGF0ZXMiLCJsYXN0QWxsaWFuY2VzIiwibGFzdEFsbGlhbmNlVXBkYXRlcyIsIm1hcFN0YXRlIiwicGxheWVyU3RhdGVFcXVhbCIsInBsYXllcklkcyIsImRlbGV0ZWRQbGF5ZXJzIiwic3RhdGVNYXAiLCJzdGF0ZXMiLCJ1cGRhdGVLbm93blBsYW5ldHMiLCJ1cGRhdGVQbGFuZXROYW1lcyIsInVwZGF0ZVBsYW5ldFN0YXRlcyIsInVwZGF0ZVBsYW5ldENvb3JkaW5hdGVzIiwibW9vbnMiLCJ1cGRhdGVLbm93bk1vb25zIiwidXBkYXRlTW9vbk5hbWVzIiwidXBkYXRlTW9vblN0YXRlcyIsInBsYW5ldFN0b3JlIiwicGxhbmV0SWRzIiwiZGVsZXRlZFBsYW5ldHMiLCJsYXN0Q29vcmRpbmF0ZXMiLCJsYXN0Q29vcmRpbmF0ZXNVcGRhdGVzIiwiY29vcmRpbmF0ZXNFcXVhbCIsIm1vb25JZCIsIm1vb25JZHMiLCJkZWxldGVkTW9vbnMiLCJhVmFsdWUiLCJiVmFsdWUiLCJ1bml2ZXJzZSIsInBhcnNlQ29vcmRpbmF0ZXMiLCJzY29yZXMiLCJnZXRQbGF5ZXJTY29yZVBvc2l0aW9ucyIsImdldFBsYXllck1pbGl0YXJ5U2NvcmVQb3NpdGlvbnMiLCJwb2ludHMiLCJtYXBwZWQiLCJtaWxpdGFyeUFuZE51bWJlck9mU2hpcHMiLCJudW1iZXJPZlNoaXBzUG9zaXRpb24iLCJfc2V0dGluZ3MiLCJfcmVhZHkiLCJfcmVzb2x2ZVJlYWR5IiwiUmVxdWVzdFNldHRpbmdzIiwiYnJvYWRjYXN0U2V0dGluZ3MiLCJOb3RpZnlTZXR0aW5nc1VwZGF0ZSIsInNlcnZlckxhbmd1YWdlIiwidGhyb3dJZlVuc3VwcG9ydGVkIiwiZ2V0TGFuZ3VhZ2UiLCJ1c2VyTGFuZ3VhZ2UiLCJzZXR0aW5nc01lc3NhZ2UiLCJTZXR0aW5ncyIsInNlcnZpY2VzIiwiZXhwZWRpdGlvbk1vZHVsZSIsIlRyYWNrRXhwZWRpdGlvbiIsInRyeVJlc3VsdCIsInRyeVRyYWNrRXhwZWRpdGlvbiIsImVycm9yTWVzc2FnZSIsIlRyYWNraW5nRXJyb3IiLCJleHBlZGl0aW9uTWVzc2FnZSIsIkV4cGVkaXRpb24iLCJuZXdFeHBlZGl0aW9uTWVzc2FnZSIsIk5ld0V4cGVkaXRpb24iLCJsaWZlZm9ybURpc2NvdmVyeU1vZHVsZSIsIlRyYWNrTGlmZWZvcm1EaXNjb3ZlcnkiLCJsaWZlZm9ybURpc2NvdmVyeU1lc3NhZ2UiLCJMaWZlZm9ybURpc2NvdmVyeSIsIm5ld0xpZmVmb3JtRGlzY292ZXJ5RXhwZWRpdGlvbk1lc3NhZ2UiLCJOZXdMaWZlZm9ybURpc2NvdmVyeSIsImNvbWJhdFJlcG9ydE1vZHVsZSIsIlJlcXVlc3RTaW5nbGVDb21iYXRSZXBvcnQiLCJ0cnlHZXRTaW5nbGVSZXBvcnQiLCJ1bmtub3duTWVzc2FnZSIsIkNvbWJhdFJlcG9ydFVua25vd24iLCJpZ25vcmVNZXNzYWdlIiwiV2lsbE5vdEJlVHJhY2tlZCIsImNvbWJhdFJlcG9ydE1lc3NhZ2UiLCJDb21iYXRSZXBvcnQiLCJUcmFja0NvbWJhdFJlcG9ydCIsInRyeVRyYWNrQ29tYmF0UmVwb3J0IiwibmV3Q29tYmF0UmVwb3J0TWVzc2FnZSIsIk5ld0NvbWJhdFJlcG9ydCIsImRmTW9kdWxlIiwiVHJhY2tEZWJyaXNGaWVsZFJlcG9ydCIsInRyeVRyYWNrRGVicmlzRmllbGRSZXBvcnQiLCJkZlJlcG9ydE1lc3NhZ2UiLCJEZWJyaXNGaWVsZFJlcG9ydCIsIm5ld0RmUmVwb3J0TWVzc2FnZSIsIk5ld0RlYnJpc0ZpZWxkUmVwb3J0IiwiVHJhY2tNYW51YWxEZWJyaXNGaWVsZFJlcG9ydCIsInRyYWNrTWFudWFsRGVicmlzRmllbGRSZXBvcnQiLCJlbXBpcmVNb2R1bGUiLCJVcGRhdGVBY3RpdmVPZmZpY2VycyIsInVwZGF0ZU9mZmljZXJzIiwiVXBkYXRlQWxsaWFuY2VDbGFzcyIsInVwZGF0ZUFsbGlhbmNlIiwiVXBkYXRlUGxhbmV0QWN0aXZlSXRlbXMiLCJ1cGRhdGVBY3RpdmVJdGVtcyIsIlVwZGF0ZVBsYW5ldEJ1aWxkaW5nTGV2ZWxzIiwidXBkYXRlQnVpbGRpbmdMZXZlbHMiLCJVcGRhdGVQbGFuZXREYXRhIiwidXBkYXRlQmFzaWNQbGFuZXRzIiwiVXBkYXRlUGxhbmV0RGVmZW5zZUNvdW50cyIsInVwZGF0ZVBsYW5ldERlZmVuc2VzIiwiVXBkYXRlUGxhbmV0TWlzc2lsZUNvdW50cyIsInVwZGF0ZVBsYW5ldE1pc3NpbGVzIiwiVXBkYXRlUGxhbmV0U2hpcENvdW50cyIsInVwZGF0ZVBsYW5ldFNoaXBzIiwiVXBkYXRlUGxheWVyQ2xhc3MiLCJ1cGRhdGVQbGF5ZXJDbGFzcyIsIlVwZGF0ZVJlc2VhcmNoTGV2ZWxzIiwidXBkYXRlUmVzZWFyY2hMZXZlbHMiLCJVcGRhdGVQbGFuZXRQcm9kdWN0aW9uU2V0dGluZ3MiLCJ1cGRhdGVQcm9kdWN0aW9uU2V0dGluZ3MiLCJVcGRhdGVTZWxlY3RlZExpZmVmb3JtIiwidXBkYXRlU2VsZWN0ZWRMaWZlZm9ybSIsIlVwZGF0ZUxpZmVmb3JtRXhwZXJpZW5jZSIsInVwZGF0ZUxpZmVmb3JtRXhwZXJpZW5jZSIsIlVwZGF0ZVBsYW5ldEFjdGl2ZUxpZmVmb3JtQnVpbGRpbmdMZXZlbHMiLCJVcGRhdGVQbGFuZXRMaWZlZm9ybUJ1aWxkaW5nTGV2ZWxzIiwidXBkYXRlUGxhbmV0TGlmZWZvcm1CdWlsZGluZ3MiLCJVcGRhdGVQbGFuZXRMaWZlZm9ybVRlY2hub2xvZ3lMZXZlbHMiLCJVcGRhdGVQbGFuZXRBY3RpdmVMaWZlZm9ybVRlY2hub2xvZ3lMZXZlbHMiLCJ1cGRhdGVQbGFuZXRBY3RpdmVMaWZlZm9ybVRlY2hub2xvZ2llcyIsIlVwZGF0ZUZsZWV0cyIsInVwZGF0ZUZsZWV0cyIsIm5vdGlmeUVtcGlyZVVwZGF0ZSIsIm5vdGlmeU1lc3NnZSIsIk5vdGlmeUVtcGlyZURhdGFVcGRhdGUiLCJpbml0TW9kdWxlIiwiRm9yY2VVcGRhdGVTZXJ2ZXJTZXR0aW5ncyIsIlVwZGF0ZVBsYXllck5hbWUiLCJhY2MiLCJVcGRhdGVVbml2ZXJzZU5hbWUiLCJTdGF5QWxpdmUiLCJEcm9wRGF0YWJhc2VDb25uZWN0aW9ucyIsImRyb3BEYXRhYmFzZUNvbm5lY3Rpb25zIiwib25NZXNzYWdlIiwib25JbnN0YWxsZWQiLCJhZGRMaXN0ZW5lciIsImhhc0RhdGEiLCJzdG9yYWdlIiwibG9jYWwiLCJnZXRCeXRlc0luVXNlIiwibWlncmF0ZWQiLCJzaG93TWlncmF0aW9uV2luZG93Iiwic2VydmljZSJdLCJzb3VyY2VSb290IjoiIn0=