"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[1956],{4051:(e,t,n)=>{n.r(t),n.d(t,{default:()=>k});var s=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("lifeform-bonuses-breakdown",{attrs:{types:e.bonusTypes,technologies:e.techs,planets:e.planets,limits:e.limits}})},o=[],l=n(655),i=n(147),a=n(3418),r=n(4846),u=n(9751),c=n(8395),p=n(1786),g=n(4028),h=n(7385),f=n(7848),m=n(7377);let b=class extends g.w3{bonusTypes=[{key:"range",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.phalanxRange.header}];technologies=r.Qs;get techs(){return this.technologies.map((e=>e.type))}get limits(){const e=(0,f.K)({type:m.f.PhalanxRangeBonus});return{range:t=>null!=e?Math.min(t,e):t}}get planets(){return(0,u.r)(c.p.empire.planetOrder.map((e=>c.p.empire.planets[e])).filter((e=>!e.isMoon)),(e=>e.id),(e=>this.technologies.map((t=>{const n=this.getPlanetBonus(t,e);return{planet:e,technologyType:t.type,bonuses:(0,u.a)(["range"],(e=>({base:n.base,buildings:n.buildings,level:n.level,total:n.total})))}}))))}get experience(){return c.p.lifeformExperience}getPlanetBonus(e,t){const n={base:0,level:0,buildings:0,buildingsBoost:0,total:0};if(t.activeLifeform==a.e5.none||!t.activeLifeformTechnologies.includes(e.type))return n;const s=Math.min((0,p.io)(t)[e.type],(0,f.K)({type:m.f.LifeformResearchBonusBoost})??Number.MAX_SAFE_INTEGER);n.buildingsBoost+=s;const o=e.getPhalanxRangeBonus(t.lifeformTechnologies[e.type]),l=o*(0,i.g1)(this.experience[t.activeLifeform]),r=o*s,u=o+l+r;return n.base+=o,n.level+=l,n.buildings+=r,n.total+=u,n}};b=(0,l.gn)([(0,g.wA)({components:{LifeformBonusesBreakdown:h.Z}})],b);const d=b,y=d;var B=n(1001),v=(0,B.Z)(y,s,o,!1,null,null,null);const k=v.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,