"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[434],{7835:(e,t,i)=>{i.r(t),i.d(t,{default:()=>B});var n=function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("div",[i("select",{directives:[{name:"model",rawName:"v-model.number",value:e.building,expression:"building",modifiers:{number:!0}}],staticStyle:{display:"block","margin-bottom":"4px"},on:{change:function(t){var i=Array.prototype.filter.call(t.target.options,(function(e){return e.selected})).map((function(t){var i="_value"in t?t._value:t.value;return e._n(i)}));e.building=t.target.multiple?i:i[0]}}},e._l(e.Buildings,(function(t){return i("option",{key:t,domProps:{value:t,textContent:e._s(e.$i18n.$t.ogame.buildings[t])}})})),0),i("lifeform-bonuses-breakdown",{attrs:{types:e.bonusTypes,technologies:e.techs,planets:e.planets,limits:e.limits},scopedSlots:e._u([{key:"header",fn:function(){return[i("div",{staticStyle:{display:"flex","flex-direction":"column","align-items":"start"}},[i("span",[i("o-building",{staticClass:"mr-2",attrs:{building:e.building}}),i("span",{domProps:{textContent:e._s(e.$i18n.$t.ogame.buildings[e.building])}})],1)])]},proxy:!0}])})],1)},s=[],o=i(655),l=i(147),r=i(3418),a=i(4846),u=i(9751),c=i(8395),m=i(1786),p=i(4028),g=i(3894),d=i(6864),b=i(1913),f=i(7848),h=i(7377);let y=class extends p.w3{bonusTypes=[{key:"cost",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.buildingCostTime.cost},{key:"time",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.buildingCostTime.time}];technologies=a.zd;get techs(){return this.technologies.filter((e=>e.appliesTo(this.building))).map((e=>e.type))}get limits(){const e=(0,f.K)({type:h.f.TechCostReduction,tech:this.building}),t=(0,f.K)({type:h.f.TechTimeReduction,tech:this.building});return{cost:t=>null!=e?Math.max(t,-e):t,time:e=>null!=t?Math.max(e,-t):e}}building=d.A.allianceDepot;Buildings=b.a7.filter((e=>this.technologies.some((t=>t.appliesTo(e)))));get planets(){return(0,u.r)(c.p.empire.planetOrder.map((e=>c.p.empire.planets[e])).filter((e=>!e.isMoon)),(e=>e.id),(e=>this.technologies.map((t=>{const i=this.getPlanetBonus(t,e);return{planet:e,technologyType:t.type,bonuses:(0,u.a)(["cost","time"],(e=>({base:i.base[e],buildings:i.buildings[e],level:i.level[e],total:i.total[e]})))}}))))}get experience(){return c.p.lifeformExperience}getPlanetBonus(e,t){const i={base:{cost:0,time:0},level:{cost:0,time:0},buildings:{cost:0,time:0},buildingsBoost:0,total:{cost:0,time:0}};if(t.activeLifeform==r.e5.none||!t.activeLifeformTechnologies.includes(e.type)||!e.appliesTo(this.building))return i;const n=Math.min((0,m.io)(t),(0,f.K)({type:h.f.LifeformResearchBonusBoost})??Number.MAX_SAFE_INTEGER);i.buildingsBoost+=n;const s=e.getBuildingCostAndTimeReduction(this.building,t.lifeformTechnologies[e.type]),o={cost:"cost",time:"time"};return Object.entries(o).forEach((e=>{const[o,r]=e,a=-1*s[r],u=a*(0,l.g1)(this.experience[t.activeLifeform]),c=a*n,m=a+u+c;i.base[o]+=a,i.level[o]+=u,i.buildings[o]+=c,i.total[o]+=m})),i}};y=(0,o.gn)([(0,p.wA)({components:{LifeformBonusesBreakdown:g.Z}})],y);const v=y,T=v;var x=i(1001),k=(0,x.Z)(T,n,s,!1,null,null,null);const B=k.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,