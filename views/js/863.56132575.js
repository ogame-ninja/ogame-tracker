"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[863],{937:(e,n,o)=>{o.r(n),o.d(n,{default:()=>w});var t=function(){var e=this,n=e.$createElement,o=e._self._c||n;return o("lifeform-bonuses-breakdown",{attrs:{types:e.bonusTypes,technologies:e.techs,planets:e.planets,limits:e.limits}})},s=[],i=o(655),r=o(147),l=o(3418),u=o(4846),p=o(9751),a=o(8395),c=o(1786),m=o(4028),g=o(7385),f=o(7848),h=o(7377);let y=class extends m.w3{bonusTypes=[{key:"production",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.crawlers.productionBonus},{key:"energyConsumption",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.crawlers.energyConsumption}];technologies=u.s5;get techs(){return this.technologies.map((e=>e.type))}get limits(){const e=(0,f.K)({type:h.f.CrawlerEnergyConsumptionReduction}),n=(0,f.K)({type:h.f.CrawlerBonus});return{energyConsumption:n=>null!=e?Math.max(n,-e):n,production:e=>null!=n?Math.min(e,n):e}}get planets(){return(0,p.r)(a.p.empire.planetOrder.map((e=>a.p.empire.planets[e])).filter((e=>!e.isMoon)),(e=>e.id),(e=>this.technologies.map((n=>{const o=this.getPlanetBonus(n,e);return{planet:e,technologyType:n.type,bonuses:(0,p.a)(["production","energyConsumption"],(e=>({base:o.base[e],buildings:o.buildings[e],level:o.level[e],total:o.total[e]})))}}))))}get experience(){return a.p.lifeformExperience}getPlanetBonus(e,n){const o={base:{production:0,energyConsumption:0},level:{production:0,energyConsumption:0},buildings:{production:0,energyConsumption:0},buildingsBoost:0,total:{production:0,energyConsumption:0}};if(n.activeLifeform==l.e5.none||!n.activeLifeformTechnologies.includes(e.type))return o;const t=Math.min((0,c.io)(n)[e.type],(0,f.K)({type:h.f.LifeformResearchBonusBoost})??Number.MAX_SAFE_INTEGER);o.buildingsBoost+=t;const s={production:e.getCrawlerProductionBonus(n.lifeformTechnologies[e.type]),energyConsumption:-e.getCrawlerConsumptionReduction(n.lifeformTechnologies[e.type]).energy},i={production:"production",energyConsumption:"energyConsumption"};return Object.entries(i).forEach((e=>{const[i,l]=e,u=s[l],p=u*(0,r.g1)(this.experience[n.activeLifeform]),a=u*t,c=u+p+a;o.base[i]+=u,o.level[i]+=p,o.buildings[i]+=a,o.total[i]+=c})),o}};y=(0,i.gn)([(0,m.wA)({components:{LifeformBonusesBreakdown:g.Z}})],y);const d=y,b=d;var C=o(1001),B=(0,C.Z)(b,t,s,!1,null,null,null);const w=B.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,