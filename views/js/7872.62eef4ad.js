"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[7872],{7622:()=>{},4840:(e,t,s)=>{s(7622)},7238:(e,t,s)=>{s.d(t,{Z:()=>n});var a=s(2528);const n=a.Z},2528:(e,t,s)=>{s.d(t,{Z:()=>r});var a=s(655),n=s(4028);let o=class extends n.w3{size};(0,a.gn)([(0,n.fI)({required:!1,type:String,default:"32px"})],o.prototype,"size",void 0),o=(0,a.gn)([(0,n.wA)({})],o);const r=o},8958:(e,t,s)=>{s.d(t,{Z:()=>i});var a=s(1120),n=s(7238),o=(s(4840),s(1001)),r=(0,o.Z)(n.Z,a.s,a.x,!1,null,"058bdb72",null);const i=r.exports},4310:(e,t,s)=>{s.d(t,{Z:()=>h});var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("grid-table",{staticClass:"ranged-stats-table",attrs:{columns:e.columns,items:e.rows,"footer-items":e.footerRows,"cell-class-provider":function(t){return e.getCellClass(t)}},scopedSlots:e._u([e._l(e.columns,(function(t,a){return{key:"cell-"+t.key,fn:function(n){var o=n.value,r=n.item;return[s("span",{key:t.key,staticClass:"ranged-stats-table-cell"},["label"==t.key?[null!=t.slotName&&null!=e.$scopedSlots[t.slotName]?e._t(t.slotName,null,{value:o}):s("span",{key:a,domProps:{textContent:e._s(o)}})]:"subLabel"==t.key?e._l(r.items,(function(a,n){return s("span",{key:n,class:a.labelClass},[null!=t.slotName&&null!=e.$scopedSlots[t.slotName]?e._t(t.slotName,null,{value:a.label}):s("span",{domProps:{textContent:e._s(a.label)}})],2)})):e._l(r.items||[r],(function(a,n){return s("span",{key:n,class:[e.getCellClass(a[t.key]),a.class]},[null!=t.formatter?s("span",{domProps:{textContent:e._s(t.formatter(a[t.key]))}}):s("span",{domProps:{textContent:e._s(a[t.key])}})])}))],2)]}}})),e._l(e.$scopedSlots,(function(t,s){return{key:s,fn:function(t){return[e._t(s,null,null,t)]}}}))],null,!0)})},n=[],o=s(655),r=s(4028),i=s(9858),l=s(6538),p=s(4749),u=s.n(p),d=s(917);let c=class extends r.w3{showPercentage;showAverage;items;footerItems;numberFormatOptions;averageNumberFormatOptions;dataItems;get hasGroupedItems(){return this.items.some((e=>"items"in e))}get dateRanges(){return d.V.settings.dateRanges}get dataItemsByRange(){const e=this.dataItems,t=this.dateRanges.map((()=>[]));return e.forEach((e=>{this.dateRanges.forEach(((s,a)=>{(0,i.m)(e.date,s)&&t[a].push(e)}))})),t}get firstDay(){return this.dataItemsByRange.reduce(((e,t)=>Math.min(e,Math.min(...t.map((e=>e.date))))),Date.now())}get columns(){const e=[{key:"label",label:"",slotName:"label"}];return this.hasGroupedItems&&e.push({key:"subLabel",label:"",slotName:"subLabel"}),e.push(...this.dateRanges.map(((e,t)=>({key:t,label:e.label??this.$i18n.$t.extension.settings.dateRanges.since(this.$i18n.$d(this.firstDay,"date")),formatter:e=>this.$i18n.$n(e,this.numberFormatOptions)})))),this.showAverage&&e.push({key:"average",label:this.$i18n.$t.extension.common.averagePerDay,formatter:e=>this.$i18n.$n(e,this.averageNumberFormatOptions??this.numberFormatOptions)}),this.showPercentage&&e.push({key:"percentage",label:"%",formatter:e=>""!=e?this.$i18n.$n(e,{minimumFractionDigits:3,maximumFractionDigits:3}):e}),e}get rows(){const e=this.dataItemsByRange,t=this.dateRanges.findIndex((e=>"all"==e.type))??(0,l.A)("failed to find range 'all'"),s=e[t].map((e=>u()(e.date).getTime())),a=new Set(s).size,n=Math.max(1,this.items.map((s=>"getValue"in s?s.getValue(e[t]):s.items.reduce(((s,a)=>s+a.getValue(e[t])),0))).reduce(((e,t)=>e+t),0));return this.items.map((s=>this.mapItemToRow(s,e,t,a,n)))}mapItemToRow(e,t,s,a,n){if("getValue"in e){const o={label:e.label,class:e.class,labelClass:e.labelClass,...this.dateRanges.map(((s,a)=>e.getValue(t[a])))},r=o[s];return this.showAverage&&(o.average=r/Math.max(1,a)),this.showPercentage&&(o.percentage=100*r/n),o}return{label:e.label,items:e.items.map((e=>this.mapItemToRow(e,t,s,a,n)))}}get footerRows(){const e=this.dataItemsByRange,t=this.dateRanges.findIndex((e=>"all"==e.type))??(0,l.A)("failed to find range 'all'"),s=e[t].map((e=>u()(e.date).getTime())),a=new Set(s).size;return this.footerItems.map((s=>{const n={label:s.label,...this.dateRanges.map(((t,a)=>"getValue"in s?s.getValue(e[a]):s.items.reduce(((t,s)=>t+s.getValue(e[a])),0))),percentage:""};if(this.showAverage){const e=n[t];n.average=e/Math.max(1,a)}return n}))}getCellClass(e){return 0==e?"fade-value":""}};(0,o.gn)([(0,r.fI)({required:!1,type:Boolean})],c.prototype,"showPercentage",void 0),(0,o.gn)([(0,r.fI)({required:!1,type:Boolean})],c.prototype,"showAverage",void 0),(0,o.gn)([(0,r.fI)({required:!0,type:Array})],c.prototype,"items",void 0),(0,o.gn)([(0,r.fI)({required:!1,type:Array,default:()=>[]})],c.prototype,"footerItems",void 0),(0,o.gn)([(0,r.fI)({required:!1,type:Object,default:void 0})],c.prototype,"numberFormatOptions",void 0),(0,o.gn)([(0,r.fI)({required:!1,type:Object,default:void 0})],c.prototype,"averageNumberFormatOptions",void 0),(0,o.gn)([(0,r.fI)({required:!0,type:Array})],c.prototype,"dataItems",void 0),c=(0,o.gn)([(0,r.wA)({})],c);const m=c,g=m;var y=s(1001),f=(0,y.Z)(g,a,n,!1,null,"1526beca",null);const h=f.exports},3999:(e,t,s)=>{s.r(t),s.d(t,{default:()=>$});var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"table-container"},[s("ranged-stats-table",{attrs:{dataItems:e.expos,items:e.items,footerItems:e.footerItems,"show-percentage":"","show-average":"",averageNumberFormatOptions:e.avgFormat},scopedSlots:e._u([{key:"cell-label",fn:function(t){var a=t.value;return[s("span",{staticClass:"mr-2",domProps:{textContent:e._s(a)}}),s("expedition-event-type-icon",{attrs:{type:e.getExpeditionEventType(a)}})]}}])}),s("floating-menu",{attrs:{left:""},scopedSlots:e._u([{key:"activator",fn:function(){return[s("button",{on:{click:function(t){e.showSettings=!e.showSettings}}},[s("span",{staticClass:"mdi mdi-cog"})])]},proxy:!0}]),model:{value:e.showSettings,callback:function(t){e.showSettings=t},expression:"showSettings"}},[s("date-range-settings")],1)],1)},n=[],o=s(655),r=s(4028),i=s(4310),l=s(5424),p=s(7090),u=s(917),d=s(4329),c=s(1639),m=function(){var e=this,t=e.$createElement,s=e._self._c||t;return e.type==e.ExpeditionEventType.nothing?s("span",{staticClass:"mdi mdi-close",style:{color:e.colors.nothing}}):e.type==e.ExpeditionEventType.resources?s("expedition-event-resources-icon",{attrs:{size:"24px"}}):e.type==e.ExpeditionEventType.fleet?s("o-ship",{attrs:{ship:e.ShipType.battleship,size:"24px"}}):e.type==e.ExpeditionEventType.delay?s("span",{staticClass:"mdi mdi-clock-outline",style:{color:e.colors.delay}}):e.type==e.ExpeditionEventType.early?s("span",{staticClass:"mdi mdi-clock-outline",style:{color:e.colors.early}}):e.type==e.ExpeditionEventType.darkMatter?s("o-resource",{attrs:{resource:"dark-matter",size:"24px"}}):e.type==e.ExpeditionEventType.pirates?s("span",{staticClass:"mdi mdi-pirate",style:{color:e.colors.pirates}}):e.type==e.ExpeditionEventType.aliens?s("span",{staticClass:"mdi mdi-alien",style:{color:e.colors.aliens}}):e.type==e.ExpeditionEventType.combat?s("span",{staticClass:"mdi mdi-sword-cross",style:{color:e.colors.combat}}):e.type==e.ExpeditionEventType.item?s("o-item",{attrs:{item:e.detroidItem,size:"24px"}}):e.type==e.ExpeditionEventType.trader?s("span",{staticClass:"mdi mdi-swap-horizontal-bold",style:{color:e.colors.trader}}):e.type==e.ExpeditionEventType.lostFleet?s("span",{staticClass:"mdi mdi-cross",style:{color:e.colors.lostFleet}}):e._e()},g=[],y=s(2057),f=s(8958);let h=class extends r.w3{type;ExpeditionEventType=l.r;ShipType=y.g;detroidItem=c.t.detroid_bronze;get colors(){return u.V.settings.colors.expeditions.events}};(0,o.gn)([(0,r.fI)({required:!0,type:String,validator:e=>l.A.includes(e)})],h.prototype,"type",void 0),h=(0,o.gn)([(0,r.wA)({components:{ExpeditionEventResourcesIcon:f.Z}})],h);const v=h,b=v;var x=s(1001),w=(0,x.Z)(b,m,g,!1,null,null,null);const E=w.exports;var _=s(9751),I=s(6538);let k=class extends r.w3{showSettings=!1;detroidItem=c.t.detroid_bronze;ShipType=y.g;avgFormat={minimumFractionDigits:1,maximumFractionDigits:1};getExpeditionEventType(e){const t=(0,_.a)(l.A,(e=>this.$i18n.$t.extension.expeditions.expeditionEvents[e]));return Object.entries(t).find((t=>t[1]==e))?.[0]??(0,I.A)("failed to find fitting type")}get colors(){return u.V.settings.colors.expeditions.events}get expos(){return p.m.dailyResultsArray}get items(){return l.A.filter((e=>![l.r.aliens,l.r.pirates].includes(e))).map((e=>({label:this.$i18n.$t.extension.expeditions.expeditionEvents[e],getValue:t=>t.reduce(((t,s)=>t+s.events[e]),0)})))}get footerItems(){return[{label:this.$i18n.$t.extension.common.sum,getValue:e=>l.A.reduce(((t,s)=>t+e.reduce(((e,t)=>e+t.events[s]),0)),0)}]}};k=(0,o.gn)([(0,r.wA)({components:{RangedStatsTable:i.Z,DateRangeSettings:d.Z,ExpeditionEventTypeIcon:E}})],k);const C=k,T=C;var S=(0,x.Z)(T,a,n,!1,null,"1ace79ae",null);const $=S.exports},1120:(e,t,s)=>{s.d(t,{s:()=>a,x:()=>n});var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("span",{staticClass:"tri-resource"},[s("o-resource",{attrs:{resource:"metal",size:e.size}}),s("o-resource",{attrs:{resource:"crystal",size:e.size}}),s("o-resource",{attrs:{resource:"deuterium",size:e.size}})],1)},n=[]},8734:(e,t)=>{function s(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=s,e.exports=t.default},4749:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var a=o(s(1171)),n=o(s(8734));function o(e){return e&&e.__esModule?e:{default:e}}function r(e){(0,n.default)(1,arguments);var t=(0,a.default)(e);return t.setHours(0,0,0,0),t}e.exports=t.default},1171:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=o;var a=n(s(8734));function n(e){return e&&e.__esModule?e:{default:e}}function o(e){(0,a.default)(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"===typeof e||"[object Number]"===t?new Date(e):("string"!==typeof e&&"[object String]"!==t||"undefined"===typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}e.exports=t.default}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cmMvdmlld3MvX3NoYXJlZC9jb21wb25lbnRzL0V4cGVkaXRpb25FdmVudFJlc291cmNlc0ljb24udnVlPzA2MWIiLCJ3ZWJwYWNrOi8vL3NyYy92aWV3cy9fc2hhcmVkL2NvbXBvbmVudHMvRXhwZWRpdGlvbkV2ZW50UmVzb3VyY2VzSWNvbi52dWU/MjUxOCIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvX3NoYXJlZC9jb21wb25lbnRzL0V4cGVkaXRpb25FdmVudFJlc291cmNlc0ljb24udnVlP2JkYjIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3N0YXRzL2NvbXBvbmVudHMvc3RhdHMvUmFuZ2VkU3RhdHNUYWJsZS52dWU/ODFkYyIsIndlYnBhY2s6Ly8vc3JjL3ZpZXdzL3N0YXRzL2NvbXBvbmVudHMvc3RhdHMvUmFuZ2VkU3RhdHNUYWJsZS52dWU/NTc5NyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc3RhdHMvY29tcG9uZW50cy9zdGF0cy9SYW5nZWRTdGF0c1RhYmxlLnZ1ZT9mNzVhIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0cy9jb21wb25lbnRzL3N0YXRzL1JhbmdlZFN0YXRzVGFibGUudnVlPzcwYWMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3N0YXRzL3ZpZXdzL2V4cGVkaXRpb25zL292ZXJ2aWV3L1RhYmxlLnZ1ZT80ZjBkIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0cy9jb21wb25lbnRzL2V4cGVkaXRpb25zL0V4cGVkaXRpb25FdmVudFR5cGVJY29uLnZ1ZT8yMTYzIiwid2VicGFjazovLy9zcmMvdmlld3Mvc3RhdHMvY29tcG9uZW50cy9leHBlZGl0aW9ucy9FeHBlZGl0aW9uRXZlbnRUeXBlSWNvbi52dWU/YzBmNSIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc3RhdHMvY29tcG9uZW50cy9leHBlZGl0aW9ucy9FeHBlZGl0aW9uRXZlbnRUeXBlSWNvbi52dWU/MzFiMiIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc3RhdHMvY29tcG9uZW50cy9leHBlZGl0aW9ucy9FeHBlZGl0aW9uRXZlbnRUeXBlSWNvbi52dWU/MmEwMSIsIndlYnBhY2s6Ly8vc3JjL3ZpZXdzL3N0YXRzL3ZpZXdzL2V4cGVkaXRpb25zL292ZXJ2aWV3L1RhYmxlLnZ1ZT9iNGEwIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0cy92aWV3cy9leHBlZGl0aW9ucy9vdmVydmlldy9UYWJsZS52dWU/N2Y0NCIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc3RhdHMvdmlld3MvZXhwZWRpdGlvbnMvb3ZlcnZpZXcvVGFibGUudnVlP2E4YzMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL19zaGFyZWQvY29tcG9uZW50cy9FeHBlZGl0aW9uRXZlbnRSZXNvdXJjZXNJY29uLnZ1ZT81MjU2Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qcz8yOTViIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydE9mRGF5L2luZGV4LmpzPzkxYTEiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3RvRGF0ZS9pbmRleC5qcz9hZDZkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RocmVhZC1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9FeHBlZGl0aW9uRXZlbnRSZXNvdXJjZXNJY29uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTQwWzBdLnJ1bGVzWzBdLnVzZVswXSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdGhyZWFkLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTQwWzBdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzBdLnJ1bGVzWzBdLnVzZVswXSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0V4cGVkaXRpb25FdmVudFJlc291cmNlc0ljb24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiIiwiPHRlbXBsYXRlPlxyXG4gICAgPHNwYW4gY2xhc3M9XCJ0cmktcmVzb3VyY2VcIj5cclxuICAgICAgICA8by1yZXNvdXJjZSByZXNvdXJjZT1cIm1ldGFsXCIgOnNpemU9XCJzaXplXCIgLz5cclxuICAgICAgICA8by1yZXNvdXJjZSByZXNvdXJjZT1cImNyeXN0YWxcIiA6c2l6ZT1cInNpemVcIiAvPlxyXG4gICAgICAgIDxvLXJlc291cmNlIHJlc291cmNlPVwiZGV1dGVyaXVtXCIgOnNpemU9XCJzaXplXCIgLz5cclxuICAgIDwvc3Bhbj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQgbGFuZz1cInRzXCI+XHJcbiAgICBpbXBvcnQgeyBDb21wb25lbnQsIFByb3AsIFZ1ZSB9IGZyb20gJ3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3InO1xyXG5cclxuICAgIEBDb21wb25lbnQoe30pXHJcbiAgICBleHBvcnQgZGVmYXVsdCBjbGFzcyBFeHBlZGl0aW9uRXZlbnRSZXNvdXJjZXNJY29uIGV4dGVuZHMgVnVlIHtcclxuICAgICAgICBAUHJvcCh7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogU3RyaW5nLCBkZWZhdWx0OiAnMzJweCcgfSlcclxuICAgICAgICBwcml2YXRlIHNpemUhOiBzdHJpbmc7XHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XHJcbiAgICAudHJpLXJlc291cmNlIHtcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuXHJcbiAgICAgICAgPiAuby1yZXNvdXJjZTpub3QoOmxhc3Qtb2YtdHlwZSkge1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICAgIHRvcDogMDtcclxuICAgICAgICAgICAgbGVmdDogMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgID4gLm8tcmVzb3VyY2VbcmVzb3VyY2U9XCJtZXRhbFwiXSB7XHJcbiAgICAgICAgICAgIGNsaXAtcGF0aDogcG9seWdvbigwIDAsIDEwMCUgMCwgMTAwJSAyNSUsIDUwJSA2MCUsIDAgMjUlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgID4gLm8tcmVzb3VyY2VbcmVzb3VyY2U9XCJjcnlzdGFsXCJdIHtcclxuICAgICAgICAgICAgY2xpcC1wYXRoOiBwb2x5Z29uKDAgMjUlLCA1MCUgNjAlLCA1MCUgMTAwJSwgMCAxMDAlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgID4gLm8tcmVzb3VyY2VbcmVzb3VyY2U9XCJkZXV0ZXJpdW1cIl0ge1xyXG4gICAgICAgICAgICBjbGlwLXBhdGg6IHBvbHlnb24oMTAwJSAyNSUsIDEwMCUgMTAwJSwgNTAlIDEwMCUsIDUwJSA2MCUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuPC9zdHlsZT4iLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0V4cGVkaXRpb25FdmVudFJlc291cmNlc0ljb24udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTA1OGJkYjcyJnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0V4cGVkaXRpb25FdmVudFJlc291cmNlc0ljb24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9FeHBlZGl0aW9uRXZlbnRSZXNvdXJjZXNJY29uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9FeHBlZGl0aW9uRXZlbnRSZXNvdXJjZXNJY29uLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTA1OGJkYjcyJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiMDU4YmRiNzJcIixcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZ3JpZC10YWJsZScse3N0YXRpY0NsYXNzOlwicmFuZ2VkLXN0YXRzLXRhYmxlXCIsYXR0cnM6e1wiY29sdW1uc1wiOl92bS5jb2x1bW5zLFwiaXRlbXNcIjpfdm0ucm93cyxcImZvb3Rlci1pdGVtc1wiOl92bS5mb290ZXJSb3dzLFwiY2VsbC1jbGFzcy1wcm92aWRlclwiOmZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gX3ZtLmdldENlbGxDbGFzcyh2YWx1ZSk7IH19LHNjb3BlZFNsb3RzOl92bS5fdShbX3ZtLl9sKChfdm0uY29sdW1ucyksZnVuY3Rpb24oY29sdW1uLGkpe3JldHVybiB7a2V5OihcImNlbGwtXCIgKyAoY29sdW1uLmtleSkpLGZuOmZ1bmN0aW9uKHJlZil7XG52YXIgdmFsdWUgPSByZWYudmFsdWU7XG52YXIgaXRlbSA9IHJlZi5pdGVtO1xucmV0dXJuIFtfYygnc3Bhbicse2tleTpjb2x1bW4ua2V5LHN0YXRpY0NsYXNzOlwicmFuZ2VkLXN0YXRzLXRhYmxlLWNlbGxcIn0sWyhjb2x1bW4ua2V5ID09ICdsYWJlbCcpP1soY29sdW1uLnNsb3ROYW1lICE9IG51bGwgJiYgX3ZtLiRzY29wZWRTbG90c1tjb2x1bW4uc2xvdE5hbWVdICE9IG51bGwpP192bS5fdChjb2x1bW4uc2xvdE5hbWUsbnVsbCx7XCJ2YWx1ZVwiOnZhbHVlfSk6X2MoJ3NwYW4nLHtrZXk6aSxkb21Qcm9wczp7XCJ0ZXh0Q29udGVudFwiOl92bS5fcyh2YWx1ZSl9fSldOihjb2x1bW4ua2V5ID09ICdzdWJMYWJlbCcpP192bS5fbCgoaXRlbS5pdGVtcyksZnVuY3Rpb24oaXRlbSxpKXtyZXR1cm4gX2MoJ3NwYW4nLHtrZXk6aSxjbGFzczppdGVtLmxhYmVsQ2xhc3N9LFsoY29sdW1uLnNsb3ROYW1lICE9IG51bGwgJiYgX3ZtLiRzY29wZWRTbG90c1tjb2x1bW4uc2xvdE5hbWVdICE9IG51bGwpP192bS5fdChjb2x1bW4uc2xvdE5hbWUsbnVsbCx7XCJ2YWx1ZVwiOml0ZW0ubGFiZWx9KTpfYygnc3Bhbicse2RvbVByb3BzOntcInRleHRDb250ZW50XCI6X3ZtLl9zKGl0ZW0ubGFiZWwpfX0pXSwyKX0pOl92bS5fbCgoaXRlbS5pdGVtcyB8fCBbaXRlbV0pLGZ1bmN0aW9uKGl0ZW0saSl7cmV0dXJuIF9jKCdzcGFuJyx7a2V5OmksY2xhc3M6W192bS5nZXRDZWxsQ2xhc3MoaXRlbVtjb2x1bW4ua2V5XSksIGl0ZW0uY2xhc3NdfSxbKGNvbHVtbi5mb3JtYXR0ZXIgIT0gbnVsbCk/X2MoJ3NwYW4nLHtkb21Qcm9wczp7XCJ0ZXh0Q29udGVudFwiOl92bS5fcyhjb2x1bW4uZm9ybWF0dGVyKGl0ZW1bY29sdW1uLmtleV0pKX19KTpfYygnc3Bhbicse2RvbVByb3BzOntcInRleHRDb250ZW50XCI6X3ZtLl9zKGl0ZW1bY29sdW1uLmtleV0pfX0pXSl9KV0sMildfX19KSxfdm0uX2woKF92bS4kc2NvcGVkU2xvdHMpLGZ1bmN0aW9uKGluZGV4LG5hbWUpe3JldHVybiB7a2V5Om5hbWUsZm46ZnVuY3Rpb24oZGF0YSl7cmV0dXJuIFtfdm0uX3QobmFtZSxudWxsLG51bGwsZGF0YSldfX19KV0sbnVsbCx0cnVlKX0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XHJcbiAgICA8Z3JpZC10YWJsZSA6Y29sdW1ucz1cImNvbHVtbnNcIiA6aXRlbXM9XCJyb3dzXCIgOmZvb3Rlci1pdGVtcz1cImZvb3RlclJvd3NcIiA6Y2VsbC1jbGFzcy1wcm92aWRlcj1cIih2YWx1ZSkgPT4gZ2V0Q2VsbENsYXNzKHZhbHVlKVwiIGNsYXNzPVwicmFuZ2VkLXN0YXRzLXRhYmxlXCI+XHJcbiAgICAgICAgPCEtLSBvaCBnb2QgdGhpcyBpcyB1Z2x5IC0tPlxyXG4gICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIihjb2x1bW4sIGkpIGluIGNvbHVtbnNcIiB2LXNsb3Q6W2BjZWxsLSR7Y29sdW1uLmtleX1gXT1cInsgdmFsdWUsIGl0ZW0gfVwiPlxyXG4gICAgICAgICAgICA8c3BhbiA6a2V5PVwiY29sdW1uLmtleVwiIGNsYXNzPVwicmFuZ2VkLXN0YXRzLXRhYmxlLWNlbGxcIj5cclxuICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwiY29sdW1uLmtleSA9PSAnbGFiZWwnXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNsb3Qgdi1pZj1cImNvbHVtbi5zbG90TmFtZSAhPSBudWxsICYmICRzY29wZWRTbG90c1tjb2x1bW4uc2xvdE5hbWVdICE9IG51bGxcIiA6bmFtZT1cImNvbHVtbi5zbG90TmFtZVwiIDp2YWx1ZT1cInZhbHVlXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWVsc2UgOmtleT1cImlcIiB2LXRleHQ9XCJ2YWx1ZVwiIC8+XHJcbiAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxyXG4gICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZWxzZS1pZj1cImNvbHVtbi5rZXkgPT0gJ3N1YkxhYmVsJ1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtZm9yPVwiKGl0ZW0sIGkpIGluIGl0ZW0uaXRlbXNcIiA6a2V5PVwiaVwiIDpjbGFzcz1cIml0ZW0ubGFiZWxDbGFzc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c2xvdCB2LWlmPVwiY29sdW1uLnNsb3ROYW1lICE9IG51bGwgJiYgJHNjb3BlZFNsb3RzW2NvbHVtbi5zbG90TmFtZV0gIT0gbnVsbFwiIDpuYW1lPVwiY29sdW1uLnNsb3ROYW1lXCIgOnZhbHVlPVwiaXRlbS5sYWJlbFwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtZWxzZSB2LXRleHQ9XCJpdGVtLmxhYmVsXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxyXG4gICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZWxzZT5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWZvcj1cIihpdGVtLCBpKSBpbiBpdGVtLml0ZW1zIHx8IFtpdGVtXVwiIDprZXk9XCJpXCIgOmNsYXNzPVwiW2dldENlbGxDbGFzcyhpdGVtW2NvbHVtbi5rZXldKSwgaXRlbS5jbGFzc11cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1pZj1cImNvbHVtbi5mb3JtYXR0ZXIgIT0gbnVsbFwiIHYtdGV4dD1cImNvbHVtbi5mb3JtYXR0ZXIoaXRlbVtjb2x1bW4ua2V5XSlcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWVsc2Ugdi10ZXh0PVwiaXRlbVtjb2x1bW4ua2V5XVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgIDwvdGVtcGxhdGU+XHJcblxyXG4gICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIihpbmRleCwgbmFtZSkgaW4gJHNjb3BlZFNsb3RzXCIgdi1zbG90OltuYW1lXT1cImRhdGFcIj5cclxuICAgICAgICAgICAgPHNsb3QgOm5hbWU9XCJuYW1lXCIgdi1iaW5kPVwiZGF0YVwiIC8+XHJcbiAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgIDwvZ3JpZC10YWJsZT5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQgbGFuZz1cInRzXCI+XHJcbiAgICBpbXBvcnQgeyBQcm9wVHlwZSB9IGZyb20gJ3Z1ZSc7XHJcbiAgICBpbXBvcnQgeyBQcm9wIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7XHJcbiAgICBpbXBvcnQgeyBDb21wb25lbnQsIFZ1ZSB9IGZyb20gJ3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3InO1xyXG4gICAgaW1wb3J0IHsgR3JpZFRhYmxlQ29sdW1uIH0gZnJvbSAnQHN0YXRzL2NvbXBvbmVudHMvY29tbW9uL0dyaWRUYWJsZS52dWUnO1xyXG4gICAgaW1wb3J0IHsgaXNJblJhbmdlIH0gZnJvbSAnQHN0YXRzL3V0aWxzL2RhdGVSYW5nZXMnO1xyXG4gICAgaW1wb3J0IHsgX3Rocm93IH0gZnJvbSAnQC9zaGFyZWQvdXRpbHMvX3Rocm93JztcclxuICAgIGltcG9ydCBzdGFydE9mRGF5IGZyb20gJ2RhdGUtZm5zL3N0YXJ0T2ZEYXkvaW5kZXgnO1xyXG4gICAgaW1wb3J0IHsgU2V0dGluZ3NEYXRhTW9kdWxlIH0gZnJvbSAnLi4vLi4vZGF0YS9TZXR0aW5nc0RhdGFNb2R1bGUnO1xyXG5cclxuICAgIGludGVyZmFjZSBSYW5nZVN0YXRzVGFibGVJdGVtV2l0aERhdGUge1xyXG4gICAgICAgIGRhdGU6IG51bWJlcjtcclxuICAgIH1cclxuXHJcbiAgICBpbnRlcmZhY2UgU2luZ2xlUmFuZ2VkU3RhdHNUYWJsZUl0ZW08VCBleHRlbmRzIFJhbmdlU3RhdHNUYWJsZUl0ZW1XaXRoRGF0ZT4ge1xyXG4gICAgICAgIGxhYmVsOiBzdHJpbmc7XHJcbiAgICAgICAgZ2V0VmFsdWU6IChpdGVtczogVFtdKSA9PiBudW1iZXI7XHJcbiAgICAgICAgY2xhc3M/OiBzdHJpbmc7XHJcbiAgICAgICAgbGFiZWxDbGFzcz86IHN0cmluZztcclxuICAgIH1cclxuXHJcbiAgICBpbnRlcmZhY2UgR3JvdXBlZFJhbmdlZFN0YXRzVGFibGVJdGVtPFQgZXh0ZW5kcyBSYW5nZVN0YXRzVGFibGVJdGVtV2l0aERhdGU+IHtcclxuICAgICAgICBsYWJlbDogc3RyaW5nO1xyXG4gICAgICAgIGl0ZW1zOiBTaW5nbGVSYW5nZWRTdGF0c1RhYmxlSXRlbTxUPltdO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCB0eXBlIFJhbmdlZFN0YXRzVGFibGVJdGVtPFQgZXh0ZW5kcyBSYW5nZVN0YXRzVGFibGVJdGVtV2l0aERhdGU+ID0gU2luZ2xlUmFuZ2VkU3RhdHNUYWJsZUl0ZW08VD4gfCBHcm91cGVkUmFuZ2VkU3RhdHNUYWJsZUl0ZW08VD47XHJcblxyXG4gICAgaW50ZXJmYWNlIFNpbXBsZVJhbmdlZFN0YXRzVGFibGVSb3cge1xyXG4gICAgICAgIGxhYmVsOiBzdHJpbmc7XHJcbiAgICAgICAgcGVyY2VudGFnZT86IG51bWJlciB8ICcnO1xyXG4gICAgICAgIGF2ZXJhZ2U/OiBudW1iZXI7XHJcblxyXG4gICAgICAgIFtpbmRleDogbnVtYmVyXTogbnVtYmVyO1xyXG4gICAgfVxyXG5cclxuICAgIGludGVyZmFjZSBHcm91cGVkUmFuZ2VkU3RhdHNUYWJsZVJvdyB7XHJcbiAgICAgICAgbGFiZWw6IHN0cmluZztcclxuICAgICAgICBpdGVtczogU2ltcGxlUmFuZ2VkU3RhdHNUYWJsZVJvd1tdO1xyXG4gICAgfVxyXG5cclxuICAgIHR5cGUgUmFuZ2VkU3RhdHNUYWJsZVJvdyA9IFNpbXBsZVJhbmdlZFN0YXRzVGFibGVSb3cgfCBHcm91cGVkUmFuZ2VkU3RhdHNUYWJsZVJvdztcclxuXHJcbiAgICBpbnRlcmZhY2UgUmFuZ2VTdGF0c1RhYmxlQ29sdW1uIGV4dGVuZHMgR3JpZFRhYmxlQ29sdW1uPGtleW9mIFNpbXBsZVJhbmdlZFN0YXRzVGFibGVSb3cgfCAnc3ViTGFiZWwnIHwgbnVtYmVyPiB7XHJcbiAgICAgICAgc2xvdE5hbWU/OiBzdHJpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgQENvbXBvbmVudCh7fSlcclxuICAgIGV4cG9ydCBkZWZhdWx0IGNsYXNzIFJhbmdlZFN0YXRzVGFibGU8VCBleHRlbmRzIFJhbmdlU3RhdHNUYWJsZUl0ZW1XaXRoRGF0ZT4gZXh0ZW5kcyBWdWUge1xyXG5cclxuICAgICAgICBAUHJvcCh7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogQm9vbGVhbiB9KVxyXG4gICAgICAgIHByaXZhdGUgc2hvd1BlcmNlbnRhZ2UhOiBib29sZWFuO1xyXG5cclxuICAgICAgICBAUHJvcCh7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogQm9vbGVhbiB9KVxyXG4gICAgICAgIHByaXZhdGUgc2hvd0F2ZXJhZ2UhOiBib29sZWFuO1xyXG5cclxuICAgICAgICBAUHJvcCh7IHJlcXVpcmVkOiB0cnVlLCB0eXBlOiBBcnJheSBhcyBQcm9wVHlwZTxSYW5nZWRTdGF0c1RhYmxlSXRlbTxUPltdPiB9KVxyXG4gICAgICAgIHByaXZhdGUgaXRlbXMhOiBSYW5nZWRTdGF0c1RhYmxlSXRlbTxUPltdO1xyXG5cclxuICAgICAgICBAUHJvcCh7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogQXJyYXkgYXMgUHJvcFR5cGU8UmFuZ2VkU3RhdHNUYWJsZUl0ZW08VD5bXT4sIGRlZmF1bHQ6ICgpID0+IFtdIH0pXHJcbiAgICAgICAgcHJpdmF0ZSBmb290ZXJJdGVtcyE6IFJhbmdlZFN0YXRzVGFibGVJdGVtPFQ+W107XHJcblxyXG4gICAgICAgIEBQcm9wKHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiBPYmplY3QgYXMgUHJvcFR5cGU8SW50bC5OdW1iZXJGb3JtYXRPcHRpb25zPiwgZGVmYXVsdDogdW5kZWZpbmVkIH0pXHJcbiAgICAgICAgcHJpdmF0ZSBudW1iZXJGb3JtYXRPcHRpb25zOiBJbnRsLk51bWJlckZvcm1hdE9wdGlvbnMgfCB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIEBQcm9wKHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiBPYmplY3QgYXMgUHJvcFR5cGU8SW50bC5OdW1iZXJGb3JtYXRPcHRpb25zPiwgZGVmYXVsdDogdW5kZWZpbmVkIH0pXHJcbiAgICAgICAgcHJpdmF0ZSBhdmVyYWdlTnVtYmVyRm9ybWF0T3B0aW9uczogSW50bC5OdW1iZXJGb3JtYXRPcHRpb25zIHwgdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICBAUHJvcCh7IHJlcXVpcmVkOiB0cnVlLCB0eXBlOiBBcnJheSBhcyBQcm9wVHlwZTxUW10+IH0pXHJcbiAgICAgICAgcHJpdmF0ZSBkYXRhSXRlbXMhOiBUW107XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0IGhhc0dyb3VwZWRJdGVtcygpOiBib29sZWFuIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMuc29tZShpdGVtID0+ICdpdGVtcycgaW4gaXRlbSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGdldCBkYXRlUmFuZ2VzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gU2V0dGluZ3NEYXRhTW9kdWxlLnNldHRpbmdzLmRhdGVSYW5nZXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGdldCBkYXRhSXRlbXNCeVJhbmdlKCk6IFRbXVtdIHtcclxuICAgICAgICAgICAgY29uc3QgZGF0YUl0ZW1zID0gdGhpcy5kYXRhSXRlbXM7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGFJdGVtc0J5UmFuZ2U6IFRbXVtdID0gdGhpcy5kYXRlUmFuZ2VzLm1hcCgoKSA9PiBbXSk7XHJcblxyXG4gICAgICAgICAgICBkYXRhSXRlbXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0ZVJhbmdlcy5mb3JFYWNoKChyYW5nZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0luUmFuZ2UoaXRlbS5kYXRlLCByYW5nZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUl0ZW1zQnlSYW5nZVtpXS5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBkYXRhSXRlbXNCeVJhbmdlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBnZXQgZmlyc3REYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGFJdGVtc0J5UmFuZ2UucmVkdWNlKChhY2MsIGN1cikgPT4gTWF0aC5taW4oXHJcbiAgICAgICAgICAgICAgICBhY2MsXHJcbiAgICAgICAgICAgICAgICBNYXRoLm1pbiguLi5jdXIubWFwKHQgPT4gdC5kYXRlKSksXHJcbiAgICAgICAgICAgICksIERhdGUubm93KCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBnZXQgY29sdW1ucygpOiBSYW5nZVN0YXRzVGFibGVDb2x1bW5bXSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbHVtbnM6IFJhbmdlU3RhdHNUYWJsZUNvbHVtbltdID0gW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ2xhYmVsJyxcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgc2xvdE5hbWU6ICdsYWJlbCcsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc0dyb3VwZWRJdGVtcykge1xyXG4gICAgICAgICAgICAgICAgY29sdW1ucy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICBrZXk6ICdzdWJMYWJlbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIHNsb3ROYW1lOiAnc3ViTGFiZWwnLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbHVtbnMucHVzaCguLi50aGlzLmRhdGVSYW5nZXMubWFwKChyYW5nZSwgaSkgPT4gKHtcclxuICAgICAgICAgICAgICAgIGtleTogaSxcclxuICAgICAgICAgICAgICAgIGxhYmVsOiByYW5nZS5sYWJlbCA/PyB0aGlzLiRpMThuLiR0LmV4dGVuc2lvbi5zZXR0aW5ncy5kYXRlUmFuZ2VzLnNpbmNlKHRoaXMuJGkxOG4uJGQodGhpcy5maXJzdERheSwgJ2RhdGUnKSksXHJcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6ICh2YWx1ZTogbnVtYmVyKSA9PiB0aGlzLiRpMThuLiRuKHZhbHVlLCB0aGlzLm51bWJlckZvcm1hdE9wdGlvbnMpLFxyXG4gICAgICAgICAgICB9KSkpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2hvd0F2ZXJhZ2UpIHtcclxuICAgICAgICAgICAgICAgIGNvbHVtbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnYXZlcmFnZScsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHRoaXMuJGkxOG4uJHQuZXh0ZW5zaW9uLmNvbW1vbi5hdmVyYWdlUGVyRGF5LFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogKHZhbHVlOiBudW1iZXIpID0+IHRoaXMuJGkxOG4uJG4odmFsdWUsIHRoaXMuYXZlcmFnZU51bWJlckZvcm1hdE9wdGlvbnMgPz8gdGhpcy5udW1iZXJGb3JtYXRPcHRpb25zKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNob3dQZXJjZW50YWdlKSB7XHJcbiAgICAgICAgICAgICAgICBjb2x1bW5zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ3BlcmNlbnRhZ2UnLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnJScsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiAodmFsdWU6IG51bWJlciB8ICcnKSA9PiB2YWx1ZSAhPSAnJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuJGkxOG4uJG4odmFsdWUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogMyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heGltdW1GcmFjdGlvbkRpZ2l0czogMyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBjb2x1bW5zO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBnZXQgcm93cygpOiAoUmFuZ2VkU3RhdHNUYWJsZVJvdyAmIHsgY2xhc3M/OiBzdHJpbmcgfSlbXSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGFJdGVtc0J5UmFuZ2UgPSB0aGlzLmRhdGFJdGVtc0J5UmFuZ2U7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBhbGxSYW5nZUluZGV4ID0gdGhpcy5kYXRlUmFuZ2VzLmZpbmRJbmRleChyYW5nZSA9PiByYW5nZS50eXBlID09ICdhbGwnKVxyXG4gICAgICAgICAgICAgICAgPz8gX3Rocm93KGBmYWlsZWQgdG8gZmluZCByYW5nZSAnYWxsJ2ApO1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhSXRlbURheXMgPSBkYXRhSXRlbXNCeVJhbmdlW2FsbFJhbmdlSW5kZXhdLm1hcChleHBvID0+IHN0YXJ0T2ZEYXkoZXhwby5kYXRlKS5nZXRUaW1lKCkpO1xyXG4gICAgICAgICAgICBjb25zdCBkYXlzV2l0aERhdGFJdGVtcyA9IG5ldyBTZXQoZGF0YUl0ZW1EYXlzKS5zaXplO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdG90YWxWYWx1ZSA9IE1hdGgubWF4KDEsIHRoaXMuaXRlbXNcclxuICAgICAgICAgICAgICAgIC5tYXAoaXRlbSA9PiAnZ2V0VmFsdWUnIGluIGl0ZW1cclxuICAgICAgICAgICAgICAgICAgICA/IGl0ZW0uZ2V0VmFsdWUoZGF0YUl0ZW1zQnlSYW5nZVthbGxSYW5nZUluZGV4XSlcclxuICAgICAgICAgICAgICAgICAgICA6IGl0ZW0uaXRlbXMucmVkdWNlKChhY2MsIGkpID0+IGFjYyArIGkuZ2V0VmFsdWUoZGF0YUl0ZW1zQnlSYW5nZVthbGxSYW5nZUluZGV4XSksIDApXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAucmVkdWNlKChhY2MsIGN1cikgPT4gYWNjICsgY3VyLCAwKVxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMubWFwKGl0ZW0gPT4gdGhpcy5tYXBJdGVtVG9Sb3coaXRlbSwgZGF0YUl0ZW1zQnlSYW5nZSwgYWxsUmFuZ2VJbmRleCwgZGF5c1dpdGhEYXRhSXRlbXMsIHRvdGFsVmFsdWUpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgbWFwSXRlbVRvUm93KGl0ZW06IFJhbmdlZFN0YXRzVGFibGVJdGVtPFQ+LCBkYXRhSXRlbXNCeVJhbmdlOiBUW11bXSwgYWxsUmFuZ2VJbmRleDogbnVtYmVyLCBkYXlzV2l0aERhdGFJdGVtczogbnVtYmVyLCB0b3RhbFZhbHVlOiBudW1iZXIpOiAoUmFuZ2VkU3RhdHNUYWJsZVJvdyAmIHsgY2xhc3M/OiBzdHJpbmc7IGxhYmVsQ2xhc3M/OiBzdHJpbmcgfSkge1xyXG4gICAgICAgICAgICBpZiAoJ2dldFZhbHVlJyBpbiBpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByb3c6IFNpbXBsZVJhbmdlZFN0YXRzVGFibGVSb3cgJiB7IGNsYXNzPzogc3RyaW5nOyBsYWJlbENsYXNzPzogc3RyaW5nIH0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGl0ZW0ubGFiZWwsXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M6IGl0ZW0uY2xhc3MsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxDbGFzczogaXRlbS5sYWJlbENsYXNzLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAuLi50aGlzLmRhdGVSYW5nZXMubWFwKChfLCByYW5nZUluZGV4KSA9PiBpdGVtLmdldFZhbHVlKGRhdGFJdGVtc0J5UmFuZ2VbcmFuZ2VJbmRleF0pKSxcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgYWxsUmFuZ2VWYWx1ZSA9IHJvd1thbGxSYW5nZUluZGV4XTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zaG93QXZlcmFnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvdy5hdmVyYWdlID0gYWxsUmFuZ2VWYWx1ZSAvIE1hdGgubWF4KDEsIGRheXNXaXRoRGF0YUl0ZW1zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zaG93UGVyY2VudGFnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvdy5wZXJjZW50YWdlID0gMTAwICogYWxsUmFuZ2VWYWx1ZSAvIHRvdGFsVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcm93O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IGl0ZW0ubGFiZWwsXHJcbiAgICAgICAgICAgICAgICBpdGVtczogaXRlbS5pdGVtcy5tYXAoc3ViaXRlbSA9PiB0aGlzLm1hcEl0ZW1Ub1JvdyhzdWJpdGVtLCBkYXRhSXRlbXNCeVJhbmdlLCBhbGxSYW5nZUluZGV4LCBkYXlzV2l0aERhdGFJdGVtcywgdG90YWxWYWx1ZSkgYXMgU2ltcGxlUmFuZ2VkU3RhdHNUYWJsZVJvdyAmIHsgY2xhc3M/OiBzdHJpbmc7IGxhYmVsQ2xhc3M/OiBzdHJpbmcgfSksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGdldCBmb290ZXJSb3dzKCk6IFJhbmdlZFN0YXRzVGFibGVSb3dbXSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGFJdGVtc0J5UmFuZ2UgPSB0aGlzLmRhdGFJdGVtc0J5UmFuZ2U7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBhbGxSYW5nZUluZGV4ID0gdGhpcy5kYXRlUmFuZ2VzLmZpbmRJbmRleChyYW5nZSA9PiByYW5nZS50eXBlID09ICdhbGwnKVxyXG4gICAgICAgICAgICAgICAgPz8gX3Rocm93KGBmYWlsZWQgdG8gZmluZCByYW5nZSAnYWxsJ2ApO1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhSXRlbURheXMgPSBkYXRhSXRlbXNCeVJhbmdlW2FsbFJhbmdlSW5kZXhdLm1hcChleHBvID0+IHN0YXJ0T2ZEYXkoZXhwby5kYXRlKS5nZXRUaW1lKCkpO1xyXG4gICAgICAgICAgICBjb25zdCBkYXlzV2l0aERhdGFJdGVtcyA9IG5ldyBTZXQoZGF0YUl0ZW1EYXlzKS5zaXplO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9vdGVySXRlbXMubWFwKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgcm93OiBSYW5nZWRTdGF0c1RhYmxlUm93ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBpdGVtLmxhYmVsLFxyXG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuZGF0ZVJhbmdlcy5tYXAoKF8sIHJhbmdlSW5kZXgpID0+ICdnZXRWYWx1ZScgaW4gaXRlbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGl0ZW0uZ2V0VmFsdWUoZGF0YUl0ZW1zQnlSYW5nZVtyYW5nZUluZGV4XSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBpdGVtLml0ZW1zLnJlZHVjZSgoYWNjLCBpKSA9PiBhY2MgKyBpLmdldFZhbHVlKGRhdGFJdGVtc0J5UmFuZ2VbcmFuZ2VJbmRleF0pLCAwKVxyXG4gICAgICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICAgICAgcGVyY2VudGFnZTogJycsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNob3dBdmVyYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWxsUmFuZ2VWYWx1ZSA9IHJvd1thbGxSYW5nZUluZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICByb3cuYXZlcmFnZSA9IGFsbFJhbmdlVmFsdWUgLyBNYXRoLm1heCgxLCBkYXlzV2l0aERhdGFJdGVtcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJvdztcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGdldENlbGxDbGFzcyh2YWx1ZTogYW55KTogc3RyaW5nIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlID09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnZmFkZS12YWx1ZSc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XHJcbiAgICAuZ3JpZC10YWJsZSB7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XHJcblxyXG4gICAgICAgICY6OnYtZGVlcCAuZmFkZS12YWx1ZSB7XHJcbiAgICAgICAgICAgIGNvbG9yOiByZ2JhKHdoaXRlLCAwLjEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAucmFuZ2VkLXN0YXRzLXRhYmxlLWNlbGwge1xyXG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICB9XHJcbjwvc3R5bGU+IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTQwWzBdLnJ1bGVzWzBdLnVzZVswXSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdGhyZWFkLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTQwWzBdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzBdLnJ1bGVzWzBdLnVzZVswXSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1JhbmdlZFN0YXRzVGFibGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vUmFuZ2VkU3RhdHNUYWJsZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL1JhbmdlZFN0YXRzVGFibGUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTE1MjZiZWNhJnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL1JhbmdlZFN0YXRzVGFibGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9SYW5nZWRTdGF0c1RhYmxlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9SYW5nZWRTdGF0c1RhYmxlLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTE1MjZiZWNhJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiMTUyNmJlY2FcIixcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJ0YWJsZS1jb250YWluZXJcIn0sW19jKCdyYW5nZWQtc3RhdHMtdGFibGUnLHthdHRyczp7XCJkYXRhSXRlbXNcIjpfdm0uZXhwb3MsXCJpdGVtc1wiOl92bS5pdGVtcyxcImZvb3Rlckl0ZW1zXCI6X3ZtLmZvb3Rlckl0ZW1zLFwic2hvdy1wZXJjZW50YWdlXCI6XCJcIixcInNob3ctYXZlcmFnZVwiOlwiXCIsXCJhdmVyYWdlTnVtYmVyRm9ybWF0T3B0aW9uc1wiOl92bS5hdmdGb3JtYXR9LHNjb3BlZFNsb3RzOl92bS5fdShbe2tleTpcImNlbGwtbGFiZWxcIixmbjpmdW5jdGlvbihyZWYpe1xudmFyIHZhbHVlID0gcmVmLnZhbHVlO1xucmV0dXJuIFtfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwibXItMlwiLGRvbVByb3BzOntcInRleHRDb250ZW50XCI6X3ZtLl9zKHZhbHVlKX19KSxfYygnZXhwZWRpdGlvbi1ldmVudC10eXBlLWljb24nLHthdHRyczp7XCJ0eXBlXCI6X3ZtLmdldEV4cGVkaXRpb25FdmVudFR5cGUodmFsdWUpfX0pXX19XSl9KSxfYygnZmxvYXRpbmctbWVudScse2F0dHJzOntcImxlZnRcIjpcIlwifSxzY29wZWRTbG90czpfdm0uX3UoW3trZXk6XCJhY3RpdmF0b3JcIixmbjpmdW5jdGlvbigpe3JldHVybiBbX2MoJ2J1dHRvbicse29uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uc2hvd1NldHRpbmdzID0gIV92bS5zaG93U2V0dGluZ3N9fX0sW19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJtZGkgbWRpLWNvZ1wifSldKV19LHByb3h5OnRydWV9XSksbW9kZWw6e3ZhbHVlOihfdm0uc2hvd1NldHRpbmdzKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLnNob3dTZXR0aW5ncz0kJHZ9LGV4cHJlc3Npb246XCJzaG93U2V0dGluZ3NcIn19LFtfYygnZGF0ZS1yYW5nZS1zZXR0aW5ncycpXSwxKV0sMSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIChfdm0udHlwZSA9PSBfdm0uRXhwZWRpdGlvbkV2ZW50VHlwZS5ub3RoaW5nKT9fYygnc3Bhbicse3N0YXRpY0NsYXNzOlwibWRpIG1kaS1jbG9zZVwiLHN0eWxlOih7IGNvbG9yOiBfdm0uY29sb3JzLm5vdGhpbmcgfSl9KTooX3ZtLnR5cGUgPT0gX3ZtLkV4cGVkaXRpb25FdmVudFR5cGUucmVzb3VyY2VzKT9fYygnZXhwZWRpdGlvbi1ldmVudC1yZXNvdXJjZXMtaWNvbicse2F0dHJzOntcInNpemVcIjpcIjI0cHhcIn19KTooX3ZtLnR5cGUgPT0gX3ZtLkV4cGVkaXRpb25FdmVudFR5cGUuZmxlZXQpP19jKCdvLXNoaXAnLHthdHRyczp7XCJzaGlwXCI6X3ZtLlNoaXBUeXBlLmJhdHRsZXNoaXAsXCJzaXplXCI6XCIyNHB4XCJ9fSk6KF92bS50eXBlID09IF92bS5FeHBlZGl0aW9uRXZlbnRUeXBlLmRlbGF5KT9fYygnc3Bhbicse3N0YXRpY0NsYXNzOlwibWRpIG1kaS1jbG9jay1vdXRsaW5lXCIsc3R5bGU6KHsgY29sb3I6IF92bS5jb2xvcnMuZGVsYXkgfSl9KTooX3ZtLnR5cGUgPT0gX3ZtLkV4cGVkaXRpb25FdmVudFR5cGUuZWFybHkpP19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJtZGkgbWRpLWNsb2NrLW91dGxpbmVcIixzdHlsZTooeyBjb2xvcjogX3ZtLmNvbG9ycy5lYXJseSB9KX0pOihfdm0udHlwZSA9PSBfdm0uRXhwZWRpdGlvbkV2ZW50VHlwZS5kYXJrTWF0dGVyKT9fYygnby1yZXNvdXJjZScse2F0dHJzOntcInJlc291cmNlXCI6XCJkYXJrLW1hdHRlclwiLFwic2l6ZVwiOlwiMjRweFwifX0pOihfdm0udHlwZSA9PSBfdm0uRXhwZWRpdGlvbkV2ZW50VHlwZS5waXJhdGVzKT9fYygnc3Bhbicse3N0YXRpY0NsYXNzOlwibWRpIG1kaS1waXJhdGVcIixzdHlsZTooeyBjb2xvcjogX3ZtLmNvbG9ycy5waXJhdGVzIH0pfSk6KF92bS50eXBlID09IF92bS5FeHBlZGl0aW9uRXZlbnRUeXBlLmFsaWVucyk/X2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcIm1kaSBtZGktYWxpZW5cIixzdHlsZTooeyBjb2xvcjogX3ZtLmNvbG9ycy5hbGllbnMgfSl9KTooX3ZtLnR5cGUgPT0gX3ZtLkV4cGVkaXRpb25FdmVudFR5cGUuY29tYmF0KT9fYygnc3Bhbicse3N0YXRpY0NsYXNzOlwibWRpIG1kaS1zd29yZC1jcm9zc1wiLHN0eWxlOih7IGNvbG9yOiBfdm0uY29sb3JzLmNvbWJhdCB9KX0pOihfdm0udHlwZSA9PSBfdm0uRXhwZWRpdGlvbkV2ZW50VHlwZS5pdGVtKT9fYygnby1pdGVtJyx7YXR0cnM6e1wiaXRlbVwiOl92bS5kZXRyb2lkSXRlbSxcInNpemVcIjpcIjI0cHhcIn19KTooX3ZtLnR5cGUgPT0gX3ZtLkV4cGVkaXRpb25FdmVudFR5cGUudHJhZGVyKT9fYygnc3Bhbicse3N0YXRpY0NsYXNzOlwibWRpIG1kaS1zd2FwLWhvcml6b250YWwtYm9sZFwiLHN0eWxlOih7IGNvbG9yOiBfdm0uY29sb3JzLnRyYWRlciB9KX0pOihfdm0udHlwZSA9PSBfdm0uRXhwZWRpdGlvbkV2ZW50VHlwZS5sb3N0RmxlZXQpP19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJtZGkgbWRpLWNyb3NzXCIsc3R5bGU6KHsgY29sb3I6IF92bS5jb2xvcnMubG9zdEZsZWV0IH0pfSk6X3ZtLl9lKCl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cclxuICAgIDxzcGFuIHYtaWY9XCJ0eXBlID09IEV4cGVkaXRpb25FdmVudFR5cGUubm90aGluZ1wiIGNsYXNzPVwibWRpIG1kaS1jbG9zZVwiIDpzdHlsZT1cInsgY29sb3I6IGNvbG9ycy5ub3RoaW5nIH1cIiAvPlxyXG4gICAgPGV4cGVkaXRpb24tZXZlbnQtcmVzb3VyY2VzLWljb24gdi1lbHNlLWlmPVwidHlwZSA9PSBFeHBlZGl0aW9uRXZlbnRUeXBlLnJlc291cmNlc1wiIHNpemU9XCIyNHB4XCIgLz5cclxuICAgIDxvLXNoaXAgdi1lbHNlLWlmPVwidHlwZSA9PSBFeHBlZGl0aW9uRXZlbnRUeXBlLmZsZWV0XCIgOnNoaXA9XCJTaGlwVHlwZS5iYXR0bGVzaGlwXCIgc2l6ZT1cIjI0cHhcIiAvPlxyXG4gICAgPHNwYW4gdi1lbHNlLWlmPVwidHlwZSA9PSBFeHBlZGl0aW9uRXZlbnRUeXBlLmRlbGF5XCIgY2xhc3M9XCJtZGkgbWRpLWNsb2NrLW91dGxpbmVcIiA6c3R5bGU9XCJ7IGNvbG9yOiBjb2xvcnMuZGVsYXkgfVwiIC8+XHJcbiAgICA8c3BhbiB2LWVsc2UtaWY9XCJ0eXBlID09IEV4cGVkaXRpb25FdmVudFR5cGUuZWFybHlcIiBjbGFzcz1cIm1kaSBtZGktY2xvY2stb3V0bGluZVwiIDpzdHlsZT1cInsgY29sb3I6IGNvbG9ycy5lYXJseSB9XCIgLz5cclxuICAgIDxvLXJlc291cmNlIHYtZWxzZS1pZj1cInR5cGUgPT0gRXhwZWRpdGlvbkV2ZW50VHlwZS5kYXJrTWF0dGVyXCIgcmVzb3VyY2U9XCJkYXJrLW1hdHRlclwiIHNpemU9XCIyNHB4XCIgLz5cclxuICAgIDxzcGFuIHYtZWxzZS1pZj1cInR5cGUgPT0gRXhwZWRpdGlvbkV2ZW50VHlwZS5waXJhdGVzXCIgY2xhc3M9XCJtZGkgbWRpLXBpcmF0ZVwiIDpzdHlsZT1cInsgY29sb3I6IGNvbG9ycy5waXJhdGVzIH1cIiAvPlxyXG4gICAgPHNwYW4gdi1lbHNlLWlmPVwidHlwZSA9PSBFeHBlZGl0aW9uRXZlbnRUeXBlLmFsaWVuc1wiIGNsYXNzPVwibWRpIG1kaS1hbGllblwiIDpzdHlsZT1cInsgY29sb3I6IGNvbG9ycy5hbGllbnMgfVwiIC8+XHJcbiAgICA8c3BhbiB2LWVsc2UtaWY9XCJ0eXBlID09IEV4cGVkaXRpb25FdmVudFR5cGUuY29tYmF0XCIgY2xhc3M9XCJtZGkgbWRpLXN3b3JkLWNyb3NzXCIgOnN0eWxlPVwieyBjb2xvcjogY29sb3JzLmNvbWJhdCB9XCIgLz5cclxuICAgIDxvLWl0ZW0gdi1lbHNlLWlmPVwidHlwZSA9PSBFeHBlZGl0aW9uRXZlbnRUeXBlLml0ZW1cIiA6aXRlbT1cImRldHJvaWRJdGVtXCIgc2l6ZT1cIjI0cHhcIiAvPlxyXG4gICAgPHNwYW4gdi1lbHNlLWlmPVwidHlwZSA9PSBFeHBlZGl0aW9uRXZlbnRUeXBlLnRyYWRlclwiIGNsYXNzPVwibWRpIG1kaS1zd2FwLWhvcml6b250YWwtYm9sZFwiIDpzdHlsZT1cInsgY29sb3I6IGNvbG9ycy50cmFkZXIgfVwiIC8+XHJcbiAgICA8c3BhbiB2LWVsc2UtaWY9XCJ0eXBlID09IEV4cGVkaXRpb25FdmVudFR5cGUubG9zdEZsZWV0XCIgY2xhc3M9XCJtZGkgbWRpLWNyb3NzXCIgOnN0eWxlPVwieyBjb2xvcjogY29sb3JzLmxvc3RGbGVldCB9XCIgLz5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQgbGFuZz1cInRzXCI+XHJcbiAgICBpbXBvcnQgeyBQcm9wVHlwZSB9IGZyb20gJ3Z1ZSc7XHJcbiAgICBpbXBvcnQgeyBFeHBlZGl0aW9uRXZlbnRUeXBlLCBFeHBlZGl0aW9uRXZlbnRUeXBlcyB9IGZyb20gJ0Avc2hhcmVkL21vZGVscy9leHBlZGl0aW9ucy9FeHBlZGl0aW9uRXZlbnRUeXBlJztcclxuICAgIGltcG9ydCB7IENvbXBvbmVudCwgUHJvcCwgVnVlIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7XHJcbiAgICBpbXBvcnQgeyBTZXR0aW5nc0RhdGFNb2R1bGUgfSBmcm9tICcuLi8uLi9kYXRhL1NldHRpbmdzRGF0YU1vZHVsZSc7XHJcbiAgICBpbXBvcnQgeyBTaGlwVHlwZSB9IGZyb20gJ0Avc2hhcmVkL21vZGVscy9vZ2FtZS9zaGlwcy9TaGlwVHlwZSc7XHJcbiAgICBpbXBvcnQgeyBJdGVtSGFzaCB9IGZyb20gJ0Avc2hhcmVkL21vZGVscy9vZ2FtZS9pdGVtcy9JdGVtSGFzaCc7XHJcbiAgICBpbXBvcnQgRXhwZWRpdGlvbkV2ZW50UmVzb3VyY2VzSWNvbiBmcm9tICdAL3ZpZXdzL19zaGFyZWQvY29tcG9uZW50cy9FeHBlZGl0aW9uRXZlbnRSZXNvdXJjZXNJY29uLnZ1ZSc7XHJcblxyXG4gICAgQENvbXBvbmVudCh7XHJcbiAgICAgICAgY29tcG9uZW50czoge1xyXG4gICAgICAgICAgICBFeHBlZGl0aW9uRXZlbnRSZXNvdXJjZXNJY29uLFxyXG4gICAgICAgIH0sXHJcbiAgICB9KVxyXG4gICAgZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXhwZWRpdGlvbkV2ZW50VHlwZUljb24gZXh0ZW5kcyBWdWUge1xyXG4gICAgICAgIEBQcm9wKHtcclxuICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXHJcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyBhcyBQcm9wVHlwZTxFeHBlZGl0aW9uRXZlbnRUeXBlPixcclxuICAgICAgICAgICAgdmFsaWRhdG9yOiAodmFsdWU6IEV4cGVkaXRpb25FdmVudFR5cGUpID0+IEV4cGVkaXRpb25FdmVudFR5cGVzLmluY2x1ZGVzKHZhbHVlKVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgcHJpdmF0ZSB0eXBlITogRXhwZWRpdGlvbkV2ZW50VHlwZTtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBFeHBlZGl0aW9uRXZlbnRUeXBlID0gRXhwZWRpdGlvbkV2ZW50VHlwZTtcclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IFNoaXBUeXBlID0gU2hpcFR5cGU7XHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBkZXRyb2lkSXRlbSA9IEl0ZW1IYXNoLmRldHJvaWRfYnJvbnplO1xyXG5cclxuICAgICAgICBwcml2YXRlIGdldCBjb2xvcnMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBTZXR0aW5nc0RhdGFNb2R1bGUuc2V0dGluZ3MuY29sb3JzLmV4cGVkaXRpb25zLmV2ZW50cztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc2NyaXB0PiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RocmVhZC1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9FeHBlZGl0aW9uRXZlbnRUeXBlSWNvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RocmVhZC1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9FeHBlZGl0aW9uRXZlbnRUeXBlSWNvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0V4cGVkaXRpb25FdmVudFR5cGVJY29uLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wMjVjYmY5YSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9FeHBlZGl0aW9uRXZlbnRUeXBlSWNvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0V4cGVkaXRpb25FdmVudFR5cGVJY29uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBjbGFzcz1cInRhYmxlLWNvbnRhaW5lclwiPlxyXG4gICAgICAgIDxyYW5nZWQtc3RhdHMtdGFibGUgOmRhdGFJdGVtcz1cImV4cG9zXCIgOml0ZW1zPVwiaXRlbXNcIiA6Zm9vdGVySXRlbXM9XCJmb290ZXJJdGVtc1wiIHNob3ctcGVyY2VudGFnZSBzaG93LWF2ZXJhZ2UgOmF2ZXJhZ2VOdW1iZXJGb3JtYXRPcHRpb25zPVwiYXZnRm9ybWF0XCI+XHJcbiAgICAgICAgICAgIDx0ZW1wbGF0ZSAjY2VsbC1sYWJlbD1cInsgdmFsdWUgfVwiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gdi10ZXh0PVwidmFsdWVcIiBjbGFzcz1cIm1yLTJcIiAvPlxyXG5cclxuICAgICAgICAgICAgICAgIDxleHBlZGl0aW9uLWV2ZW50LXR5cGUtaWNvbiA6dHlwZT1cImdldEV4cGVkaXRpb25FdmVudFR5cGUodmFsdWUpXCIgLz5cclxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgICAgICA8L3JhbmdlZC1zdGF0cy10YWJsZT5cclxuXHJcbiAgICAgICAgPGZsb2F0aW5nLW1lbnUgdi1tb2RlbD1cInNob3dTZXR0aW5nc1wiIGxlZnQ+XHJcbiAgICAgICAgICAgIDx0ZW1wbGF0ZSAjYWN0aXZhdG9yPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBAY2xpY2s9XCJzaG93U2V0dGluZ3MgPSAhc2hvd1NldHRpbmdzXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJtZGkgbWRpLWNvZ1wiIC8+XHJcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cclxuXHJcbiAgICAgICAgICAgIDxkYXRlLXJhbmdlLXNldHRpbmdzIC8+XHJcbiAgICAgICAgPC9mbG9hdGluZy1tZW51PlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxyXG4gICAgaW1wb3J0IHsgQ29tcG9uZW50LCBWdWUgfSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJztcclxuICAgIGltcG9ydCBSYW5nZWRTdGF0c1RhYmxlLCB7IFJhbmdlZFN0YXRzVGFibGVJdGVtIH0gZnJvbSAnQHN0YXRzL2NvbXBvbmVudHMvc3RhdHMvUmFuZ2VkU3RhdHNUYWJsZS52dWUnO1xyXG4gICAgaW1wb3J0IHsgRXhwZWRpdGlvbkV2ZW50VHlwZSwgRXhwZWRpdGlvbkV2ZW50VHlwZXMgfSBmcm9tICdAL3NoYXJlZC9tb2RlbHMvZXhwZWRpdGlvbnMvRXhwZWRpdGlvbkV2ZW50VHlwZSc7XHJcbiAgICBpbXBvcnQgeyBEYWlseUV4cGVkaXRpb25SZXN1bHQsIEV4cGVkaXRpb25EYXRhTW9kdWxlIH0gZnJvbSAnQC92aWV3cy9zdGF0cy9kYXRhL0V4cGVkaXRpb25EYXRhTW9kdWxlJztcclxuICAgIGltcG9ydCB7IFNldHRpbmdzRGF0YU1vZHVsZSB9IGZyb20gJ0Avdmlld3Mvc3RhdHMvZGF0YS9TZXR0aW5nc0RhdGFNb2R1bGUnO1xyXG4gICAgaW1wb3J0IERhdGVSYW5nZVNldHRpbmdzIGZyb20gJ0BzdGF0cy9jb21wb25lbnRzL3NldHRpbmdzL0RhdGVSYW5nZVNldHRpbmdzLnZ1ZSc7XHJcbiAgICBpbXBvcnQgeyBJdGVtSGFzaCB9IGZyb20gJ0Avc2hhcmVkL21vZGVscy9vZ2FtZS9pdGVtcy9JdGVtSGFzaCc7XHJcbiAgICBpbXBvcnQgRXhwZWRpdGlvbkV2ZW50VHlwZUljb24gZnJvbSAnQHN0YXRzL2NvbXBvbmVudHMvZXhwZWRpdGlvbnMvRXhwZWRpdGlvbkV2ZW50VHlwZUljb24udnVlJztcclxuICAgIGltcG9ydCB7IFNoaXBUeXBlIH0gZnJvbSAnQC9zaGFyZWQvbW9kZWxzL29nYW1lL3NoaXBzL1NoaXBUeXBlJztcclxuICAgIGltcG9ydCB7IGNyZWF0ZVJlY29yZCB9IGZyb20gJ0Avc2hhcmVkL3V0aWxzL2NyZWF0ZVJlY29yZCc7XHJcbiAgICBpbXBvcnQgeyBfdGhyb3cgfSBmcm9tICdAL3NoYXJlZC91dGlscy9fdGhyb3cnO1xyXG5cclxuICAgIEBDb21wb25lbnQoe1xyXG4gICAgICAgIGNvbXBvbmVudHM6IHtcclxuICAgICAgICAgICAgUmFuZ2VkU3RhdHNUYWJsZSxcclxuICAgICAgICAgICAgRGF0ZVJhbmdlU2V0dGluZ3MsXHJcbiAgICAgICAgICAgIEV4cGVkaXRpb25FdmVudFR5cGVJY29uLFxyXG4gICAgICAgIH0sXHJcbiAgICB9KVxyXG4gICAgZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFibGUgZXh0ZW5kcyBWdWUge1xyXG4gICAgICAgIHByaXZhdGUgc2hvd1NldHRpbmdzID0gZmFsc2U7XHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBkZXRyb2lkSXRlbSA9IEl0ZW1IYXNoLmRldHJvaWRfYnJvbnplO1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgU2hpcFR5cGUgPSBTaGlwVHlwZTtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBhdmdGb3JtYXQ6IEludGwuTnVtYmVyRm9ybWF0T3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgbWluaW11bUZyYWN0aW9uRGlnaXRzOiAxLFxyXG4gICAgICAgICAgICBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IDEsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBnZXRFeHBlZGl0aW9uRXZlbnRUeXBlKHRleHQ6IHN0cmluZyk6IEV4cGVkaXRpb25FdmVudFR5cGUge1xyXG4gICAgICAgICAgICBjb25zdCByZXZlcnNlTWFwID0gY3JlYXRlUmVjb3JkKEV4cGVkaXRpb25FdmVudFR5cGVzLCB0eXBlID0+IHRoaXMuJGkxOG4uJHQuZXh0ZW5zaW9uLmV4cGVkaXRpb25zLmV4cGVkaXRpb25FdmVudHNbdHlwZV0pO1xyXG4gICAgICAgICAgICByZXR1cm4gKE9iamVjdC5lbnRyaWVzKHJldmVyc2VNYXApIGFzIFtFeHBlZGl0aW9uRXZlbnRUeXBlLCBzdHJpbmddW10pXHJcbiAgICAgICAgICAgICAgICAuZmluZChlID0+IGVbMV0gPT0gdGV4dCk/LlswXVxyXG4gICAgICAgICAgICAgICAgPz8gX3Rocm93KCdmYWlsZWQgdG8gZmluZCBmaXR0aW5nIHR5cGUnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0IGNvbG9ycygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFNldHRpbmdzRGF0YU1vZHVsZS5zZXR0aW5ncy5jb2xvcnMuZXhwZWRpdGlvbnMuZXZlbnRzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBnZXQgZXhwb3MoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBFeHBlZGl0aW9uRGF0YU1vZHVsZS5kYWlseVJlc3VsdHNBcnJheTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0IGl0ZW1zKCk6IFJhbmdlZFN0YXRzVGFibGVJdGVtPERhaWx5RXhwZWRpdGlvblJlc3VsdD5bXSB7XHJcbiAgICAgICAgICAgIHJldHVybiBFeHBlZGl0aW9uRXZlbnRUeXBlc1xyXG4gICAgICAgICAgICAgICAgLmZpbHRlcih0eXBlID0+ICFbRXhwZWRpdGlvbkV2ZW50VHlwZS5hbGllbnMsIEV4cGVkaXRpb25FdmVudFR5cGUucGlyYXRlc10uaW5jbHVkZXModHlwZSkpXHJcbiAgICAgICAgICAgICAgICAubWFwKHR5cGUgPT4gKHtcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogdGhpcy4kaTE4bi4kdC5leHRlbnNpb24uZXhwZWRpdGlvbnMuZXhwZWRpdGlvbkV2ZW50c1t0eXBlXSxcclxuICAgICAgICAgICAgICAgICAgICBnZXRWYWx1ZTogZXhwb3MgPT4gZXhwb3MucmVkdWNlKChhY2MsIGV4cG8pID0+IGFjYyArIGV4cG8uZXZlbnRzW3R5cGVdLCAwKSxcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0IGZvb3Rlckl0ZW1zKCk6IFJhbmdlZFN0YXRzVGFibGVJdGVtPERhaWx5RXhwZWRpdGlvblJlc3VsdD5bXSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbe1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IHRoaXMuJGkxOG4uJHQuZXh0ZW5zaW9uLmNvbW1vbi5zdW0sXHJcbiAgICAgICAgICAgICAgICBnZXRWYWx1ZTogZXhwb3MgPT4gRXhwZWRpdGlvbkV2ZW50VHlwZXMucmVkdWNlKFxyXG4gICAgICAgICAgICAgICAgICAgIChhY2MsIHR5cGUpID0+IGFjYyArIGV4cG9zLnJlZHVjZSgoYWNjLCBleHBvKSA9PiBhY2MgKyBleHBvLmV2ZW50c1t0eXBlXSwgMCksXHJcbiAgICAgICAgICAgICAgICAgICAgMFxyXG4gICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgfV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG48L3NjcmlwdD5cclxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPlxyXG4gICAgLnJhbmdlZC1zdGF0cy10YWJsZSAubWRpIHtcclxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTMwJSkgc2NhbGUoMS42KTtcclxuICAgICAgICB3aWR0aDogMjRweDtcclxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICB9XHJcblxyXG4gICAgLnRhYmxlLWNvbnRhaW5lciB7XHJcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcclxuICAgICAgICBjb2x1bW4tZ2FwOiA0cHg7XHJcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgYXV0bztcclxuICAgICAgICBhbGlnbi1pdGVtczogc3RhcnQ7XHJcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgfVxyXG48L3N0eWxlPiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RocmVhZC1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9UYWJsZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RocmVhZC1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9UYWJsZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL1RhYmxlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xYWNlNzlhZSZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9UYWJsZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL1RhYmxlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9UYWJsZS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0xYWNlNzlhZSZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjFhY2U3OWFlXCIsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcInRyaS1yZXNvdXJjZVwifSxbX2MoJ28tcmVzb3VyY2UnLHthdHRyczp7XCJyZXNvdXJjZVwiOlwibWV0YWxcIixcInNpemVcIjpfdm0uc2l6ZX19KSxfYygnby1yZXNvdXJjZScse2F0dHJzOntcInJlc291cmNlXCI6XCJjcnlzdGFsXCIsXCJzaXplXCI6X3ZtLnNpemV9fSksX2MoJ28tcmVzb3VyY2UnLHthdHRyczp7XCJyZXNvdXJjZVwiOlwiZGV1dGVyaXVtXCIsXCJzaXplXCI6X3ZtLnNpemV9fSldLDEpfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJlcXVpcmVkQXJncztcblxuZnVuY3Rpb24gcmVxdWlyZWRBcmdzKHJlcXVpcmVkLCBhcmdzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA8IHJlcXVpcmVkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihyZXF1aXJlZCArICcgYXJndW1lbnQnICsgKHJlcXVpcmVkID4gMSA/ICdzJyA6ICcnKSArICcgcmVxdWlyZWQsIGJ1dCBvbmx5ICcgKyBhcmdzLmxlbmd0aCArICcgcHJlc2VudCcpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gc3RhcnRPZkRheTtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3RvRGF0ZS9pbmRleC5qc1wiKSk7XG5cbnZhciBfaW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZEYXlcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgZGF5IGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgc3RhcnQgb2YgYSBkYXlcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYSBkYXkgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdGFydE9mRGF5KG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IFR1ZSBTZXAgMDIgMjAxNCAwMDowMDowMFxuICovXG5mdW5jdGlvbiBzdGFydE9mRGF5KGRpcnR5RGF0ZSkge1xuICAoMCwgX2luZGV4Mi5kZWZhdWx0KSgxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9ICgwLCBfaW5kZXguZGVmYXVsdCkoZGlydHlEYXRlKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdG9EYXRlO1xuXG52YXIgX2luZGV4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEBuYW1lIHRvRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYW4gaW5zdGFuY2Ugb2YgRGF0ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgaXRzIGNsb25lLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhIG51bWJlciwgaXQgaXMgdHJlYXRlZCBhcyBhIHRpbWVzdGFtcC5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgbm9uZSBvZiB0aGUgYWJvdmUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIEludmFsaWQgRGF0ZS5cbiAqXG4gKiAqKk5vdGUqKjogKmFsbCogRGF0ZSBhcmd1bWVudHMgcGFzc2VkIHRvIGFueSAqZGF0ZS1mbnMqIGZ1bmN0aW9uIGlzIHByb2Nlc3NlZCBieSBgdG9EYXRlYC5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBhcmd1bWVudCAtIHRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDbG9uZSB0aGUgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZShuZXcgRGF0ZSgyMDE0LCAxLCAxMSwgMTEsIDMwLCAzMCkpXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IHRoZSB0aW1lc3RhbXAgdG8gZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IHRvRGF0ZSgxMzkyMDk4NDMwMDAwKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqL1xuZnVuY3Rpb24gdG9EYXRlKGFyZ3VtZW50KSB7XG4gICgwLCBfaW5kZXguZGVmYXVsdCkoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGFyZ1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCk7IC8vIENsb25lIHRoZSBkYXRlXG5cbiAgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fCB0eXBlb2YgYXJndW1lbnQgPT09ICdvYmplY3QnICYmIGFyZ1N0ciA9PT0gJ1tvYmplY3QgRGF0ZV0nKSB7XG4gICAgLy8gUHJldmVudCB0aGUgZGF0ZSB0byBsb3NlIHRoZSBtaWxsaXNlY29uZHMgd2hlbiBwYXNzZWQgdG8gbmV3IERhdGUoKSBpbiBJRTEwXG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50LmdldFRpbWUoKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnbnVtYmVyJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IE51bWJlcl0nKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoKHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N0cmluZycgfHwgYXJnU3RyID09PSAnW29iamVjdCBTdHJpbmddJykgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFwiU3RhcnRpbmcgd2l0aCB2Mi4wLjAtYmV0YS4xIGRhdGUtZm5zIGRvZXNuJ3QgYWNjZXB0IHN0cmluZ3MgYXMgZGF0ZSBhcmd1bWVudHMuIFBsZWFzZSB1c2UgYHBhcnNlSVNPYCB0byBwYXJzZSBzdHJpbmdzLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2ZqdWxlXCIpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuXG4gICAgICBjb25zb2xlLndhcm4obmV3IEVycm9yKCkuc3RhY2spO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0OyJdLCJuYW1lcyI6WyJjb21wb25lbnQiLCJyZW5kZXIiLCJfdm0iLCJ0aGlzIiwiX2giLCIkY3JlYXRlRWxlbWVudCIsIl9jIiwiX3NlbGYiLCJzdGF0aWNDbGFzcyIsImF0dHJzIiwiY29sdW1ucyIsInJvd3MiLCJmb290ZXJSb3dzIiwidmFsdWUiLCJnZXRDZWxsQ2xhc3MiLCJzY29wZWRTbG90cyIsIl91IiwiX2wiLCJjb2x1bW4iLCJpIiwia2V5IiwiZm4iLCJyZWYiLCJpdGVtIiwic2xvdE5hbWUiLCIkc2NvcGVkU2xvdHMiLCJfdCIsImRvbVByb3BzIiwiX3MiLCJjbGFzcyIsImxhYmVsQ2xhc3MiLCJsYWJlbCIsIml0ZW1zIiwiZm9ybWF0dGVyIiwiaW5kZXgiLCJuYW1lIiwiZGF0YSIsInN0YXRpY1JlbmRlckZucyIsImV4cG9zIiwiZm9vdGVySXRlbXMiLCJhdmdGb3JtYXQiLCJnZXRFeHBlZGl0aW9uRXZlbnRUeXBlIiwib24iLCIkZXZlbnQiLCJzaG93U2V0dGluZ3MiLCJwcm94eSIsIm1vZGVsIiwiY2FsbGJhY2siLCIkJHYiLCJleHByZXNzaW9uIiwidHlwZSIsIkV4cGVkaXRpb25FdmVudFR5cGUiLCJub3RoaW5nIiwic3R5bGUiLCJjb2xvciIsImNvbG9ycyIsInJlc291cmNlcyIsImZsZWV0IiwiU2hpcFR5cGUiLCJiYXR0bGVzaGlwIiwiZGVsYXkiLCJlYXJseSIsImRhcmtNYXR0ZXIiLCJwaXJhdGVzIiwiYWxpZW5zIiwiY29tYmF0IiwiZGV0cm9pZEl0ZW0iLCJ0cmFkZXIiLCJsb3N0RmxlZXQiLCJfZSIsInNpemUiLCJyZXF1aXJlZEFyZ3MiLCJyZXF1aXJlZCIsImFyZ3MiLCJsZW5ndGgiLCJUeXBlRXJyb3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZhdWx0Iiwic3RhcnRPZkRheSIsIl9pbmRleCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfaW5kZXgyIiwib2JqIiwiX19lc01vZHVsZSIsImRpcnR5RGF0ZSIsImFyZ3VtZW50cyIsImRhdGUiLCJzZXRIb3VycyIsInRvRGF0ZSIsImFyZ3VtZW50IiwiYXJnU3RyIiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiRGF0ZSIsImdldFRpbWUiLCJjb25zb2xlIiwid2FybiIsIkVycm9yIiwic3RhY2siLCJOYU4iXSwic291cmNlUm9vdCI6IiJ9