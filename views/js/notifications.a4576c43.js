(()=>{"use strict";var t={4384:(t,e,i)=>{i.d(e,{DI:()=>c});var n=i(6531),o=i(2927);const s={};async function r(t,e){let i=s[t];if(null==i){s[t]=i=(0,n.X3)(t,o.J,{upgrade:e});const r=await i;r.addEventListener("close",(e=>delete s[t]))}return await i}const a="ogame-tracker";async function c(){return await r(a,((t,e,i,n)=>{e<1&&(t.createObjectStore("settings"),t.createObjectStore("accounts",{keyPath:["serverId","serverLanguage","id"]}),t.createObjectStore("servers",{keyPath:["id","language"]})),e<2&&n.objectStore("accounts").createIndex("server",["serverId","serverLanguage"])}))}},6882:(t,e,i)=>{i.d(e,{gW:()=>o});var n=i(874);function o(...t){console.debug("[OGame Tracker]",(0,n.Z)(Date.now(),"yyyy-MM-dd HH-mm-ss.SSS"),...t)}},1365:(t,e,i)=>{var n=i(144),o=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{class:{"has-notifications":t.hasNotifications},attrs:{id:"app"}},t._l(t.notificationOrder,(function(e){return i(t.componentNames[t.notifications[e].type],{key:e,tag:"component",attrs:{notification:t.notifications[e]},on:{remove:function(i){return t.removeNotification(e)}}})})),1)},s=[],r=i(655);const a="ogame-tracker/notification-window-resize";var c,l=i(1936);(function(t){t["ExpeditionTracking"]="message-tracking/expeditions",t["ExpeditionTrackingLostFleet"]="message-tracking/expeditions/lost-fleet",t["MessageTrackingError"]="message-tracking/error",t["CombatTracking"]="message-tracking/combats",t["DebrisFieldReportTracking"]="message-tracking/debris-field-reports",t["LifeformDiscoveryTracking"]="message-tracking/lifeform-discoveries"})(c||(c={}));var u=i(3654),m=i(7545),d=i(6538),f=i(4028),p=i(2045),g=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("notification",{attrs:{type:"error",title:t.title,message:t.message,saturate:.6},on:{remove:function(e){return t.$emit("remove")}}})},h=[],v=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"notification",class:[t.type,{"notification--right":t.isNew,"notification--remove":t.remove}],style:"--saturate: "+t.saturate+"; --self-height: "+t.height,on:{click:function(e){return t.animateRemove()},mouseenter:function(e){return t.pauseTimer()},mouseleave:function(e){return t.resumeTimer()}}},[i("div",{staticClass:"title"},[null!=t.title?i("span",{domProps:{textContent:t._s(t.title)}}):t._t("title")],2),i("div",{staticClass:"message"},[null!=t.message?i("span",{domProps:{textContent:t._s(t.message)}}):t._t("message")],2),0!=t.timeout?i("div",{staticClass:"timer",class:{"timer-running":null!=t.timeoutId,"timer-paused":null==t.timeoutId,"hide-timer":t.remove},style:"--time-ms: "+t.timeout+"; --time-left-ms: "+t.timeLeft}):t._e()])},$=[],y=i(329);let x=class extends f.w3{type;title;message;saturate;timeout;isNew=!0;remove=!1;height=0;timeLeft=0;timeoutStart=0;timeoutId=null;timeoutRemoveBuffer=100;async mounted(){await(0,y.g)(0),this.height=this.$el.clientHeight,this.isNew=!1,null!=this.timeout&&(this.timeLeft=this.timeout,await(0,y.g)(100),window.addEventListener("ogame-tracker.pause-notifications",(()=>this.pauseRemove())),window.addEventListener("ogame-tracker.resume-notifications",(()=>this.playRemove())),this.playRemove())}pauseRemove(){this.timeLeft<=0||(clearTimeout(this.timeoutId??void 0),this.timeoutId=null,this.timeLeft=Math.max(0,this.timeLeft-(Date.now()-this.timeoutStart)))}playRemove(){this.timeLeft<=0||(this.timeoutStart=Date.now(),this.timeoutId=setTimeout((async()=>{await this.animateRemove()}),this.timeLeft+this.timeoutRemoveBuffer))}async animateRemove(){this.remove=!0,await(0,y.g)(200),this.$emit("remove")}pauseTimer(){window.dispatchEvent(new Event("ogame-tracker.pause-notifications"))}resumeTimer(){window.dispatchEvent(new Event("ogame-tracker.resume-notifications"))}};(0,r.gn)([(0,f.fI)({required:!0,type:String})],x.prototype,"type",void 0),(0,r.gn)([(0,f.fI)({required:!1,type:String,default:null})],x.prototype,"title",void 0),(0,r.gn)([(0,f.fI)({required:!1,type:String,default:null})],x.prototype,"message",void 0),(0,r.gn)([(0,f.fI)({required:!1,type:Number,default:0})],x.prototype,"saturate",void 0),(0,r.gn)([(0,f.fI)({required:!1,type:Number,default:null})],x.prototype,"timeout",void 0),x=(0,r.gn)([(0,f.wA)({})],x);const _=x,C=_;var k=i(1001),w=(0,k.Z)(C,v,$,!1,null,"0f75a872",null);const P=w.exports;let T=class extends f.w3{notification;get title(){return this.$i18n.$t.extension.notifications.messageTrackingError.title(this.$i18n.$n(this.notification.count))}get message(){return this.$i18n.$t.extension.notifications.messageTrackingError.message(this.$i18n.$n(this.notification.count))}};(0,r.gn)([(0,f.fI)({required:!0,type:Object})],T.prototype,"notification",void 0),T=(0,r.gn)([(0,f.wA)({components:{Notification:P}})],T);const b=T,S=b;var R=(0,k.Z)(S,g,h,!1,null,null,null);const O=R.exports;var E=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("notification",{attrs:{type:"info",title:t.title,timeout:1e4},on:{remove:function(e){return t.$emit("remove")}},scopedSlots:t._u([{key:"message",fn:function(){return[t.hasSummary?[i("h4",{domProps:{textContent:t._s(t.$i18n.$t.extension.notifications.expeditionTracking.result.summary)}}),t.showSimplified?[t.foundResources?i("div",{staticClass:"result-grid resources-grid"},[t.notification.resources.metal>0?[i("o-resource",{staticClass:"icon",attrs:{resource:"metal"}}),i("span",{domProps:{textContent:t._s(t.$i18n.$n(t.notification.resources.metal))}})]:t._e(),t.notification.resources.crystal>0?[i("o-resource",{staticClass:"icon",attrs:{resource:"crystal"}}),i("span",{domProps:{textContent:t._s(t.$i18n.$n(t.notification.resources.crystal))}})]:t._e(),t.notification.resources.deuterium>0?[i("o-resource",{staticClass:"icon",attrs:{resource:"deuterium"}}),i("span",{domProps:{textContent:t._s(t.$i18n.$n(t.notification.resources.deuterium))}})]:t._e(),i("span",{staticClass:"mdi mdi-sigma icon"}),i("span",{domProps:{textContent:t._s(t.$i18n.$n(t.resourceSum))}})],2):t._e(),t.notification.darkMatter>0?i("div",{staticClass:"result-grid"},[i("o-resource",{staticClass:"icon",attrs:{resource:"dark-matter"}}),i("span",{domProps:{textContent:t._s(t.$i18n.$n(t.notification.darkMatter))}})],1):t._e(),t.notification.items.length>0?i("div",{staticClass:"result-flex"},t._l(t.notification.items,(function(t,e){return i("o-item",{key:e,attrs:{item:t}})})),1):t._e(),t.foundShips?i("div",{staticClass:"result-grid"},[t._l(t.ships,(function(e){return[t.notification.ships[e]>0?[i("o-ship",{key:"ship-icon-"+e,staticClass:"icon",attrs:{ship:e}}),i("span",{key:"ship-count-"+e,domProps:{textContent:t._s(t.$i18n.$n(t.notification.ships[e]))}})]:t._e()]}))],2):t._e()]:[t.foundResources?i("div",{staticClass:"text-grid"},[t.notification.resources.metal>0?[i("span",{domProps:{textContent:t._s(t.$i18n.$t.extension.resources[t.ResourceType.metal])}}),i("span",{domProps:{textContent:t._s(t.$i18n.$n(t.notification.resources.metal))}})]:t._e(),t.notification.resources.crystal>0?[i("span",{domProps:{textContent:t._s(t.$i18n.$t.extension.resources[t.ResourceType.crystal])}}),i("span",{domProps:{textContent:t._s(t.$i18n.$n(t.notification.resources.crystal))}})]:t._e(),t.notification.resources.deuterium>0?[i("span",{domProps:{textContent:t._s(t.$i18n.$t.extension.resources[t.ResourceType.deuterium])}}),i("span",{domProps:{textContent:t._s(t.$i18n.$n(t.notification.resources.deuterium))}})]:t._e(),i("span",{domProps:{textContent:t._s(t.$i18n.$t.extension.common.sum)}}),i("span",{domProps:{textContent:t._s(t.$i18n.$n(t.resourceSum))}})],2):t._e(),t.notification.darkMatter>0?i("div",{staticClass:"text-grid"},[i("span",{domProps:{textContent:t._s(t.$i18n.$t.ogame.premium.darkMatter)}}),i("span",{domProps:{textContent:t._s(t.$i18n.$n(t.notification.darkMatter))}})]):t._e(),t.notification.darkMatter>0&&t.notification.items.length>0?i("hr"):t._e(),t.notification.items.length>0?i("div",{staticClass:"result-flex"},[i("span",{domProps:{textContent:t._s(t.notification.items.length+" Items")}})]):t._e(),t.notification.items.length>0&&t.foundShips?i("hr"):t._e(),t.foundShips?i("div",{staticClass:"text-grid"},[t._l(t.ships,(function(e){return[t.notification.ships[e]>0?[i("span",{key:"ship-name-"+e,domProps:{textContent:t._s(t.$i18n.$t.ogame.ships[e])}}),i("span",{key:"ship-count-"+e,domProps:{textContent:t._s(t.$i18n.$n(t.notification.ships[e]))}})]:t._e()]}))],2):t._e()],i("hr")]:t._e(),i("h4",{domProps:{textContent:t._s(t.$i18n.$t.extension.notifications.expeditionTracking.result.events)}}),t.showSimplified?i("div",{staticClass:"result-grid"},[t._l(t.expeditionEvents,(function(e){return[t.notification.events[e]>0?["nothing"==e?i("span",{key:"event-icon-"+e,staticClass:"mdi mdi-close icon",style:{color:t.eventColors.nothing}}):"resources"==e?i("expedition-event-resources-icon",{key:"event-icon-"+e,staticClass:"icon",attrs:{size:"24px"}}):"fleet"==e?i("o-ship",{key:"event-icon-"+e,staticClass:"icon",attrs:{ship:t.ShipType.battleship,size:"24px"}}):"delay"==e?i("span",{key:"event-icon-"+e,staticClass:"mdi mdi-clock-outline icon",style:{color:t.eventColors.delay}}):"early"==e?i("span",{key:"event-icon-"+e,staticClass:"mdi mdi-clock-outline icon",style:{color:t.eventColors.early}}):"darkMatter"==e?i("o-resource",{key:"event-icon-"+e,staticClass:"icon",attrs:{resource:"dark-matter",size:"24px"}}):"pirates"==e?i("span",{key:"event-icon-"+e,staticClass:"mdi mdi-pirate icon",style:{color:t.eventColors.pirates}}):"aliens"==e?i("span",{key:"event-icon-"+e,staticClass:"mdi mdi-alien icon",style:{color:t.eventColors.aliens}}):"item"==e?i("o-item",{key:"event-icon-"+e,staticClass:"icon",attrs:{item:t.detroidItem,size:"24px"}}):"trader"==e?i("span",{key:"event-icon-"+e,staticClass:"mdi mdi-swap-horizontal-bold icon",style:{color:t.eventColors.trader}}):"lostFleet"==e?i("span",{key:"event-icon-"+e,staticClass:"mdi mdi-cross icon",style:{color:t.eventColors.lostFleet}}):t._e(),i("span",{key:"event-count-"+e,domProps:{textContent:t._s(t.$i18n.$n(t.notification.events[e]))}})]:t._e()]}))],2):i("div",{staticClass:"text-grid events"},[t._l(t.expeditionEvents,(function(e){return[t.notification.events[e]>0?[i("span",{key:"event-name-"+e,domProps:{textContent:t._s(t.$i18n.$t.extension.expeditions.expeditionEvents[e])}}),i("span",{key:"event-count-"+e,domProps:{textContent:t._s(t.$i18n.$n(t.notification.events[e]))}})]:t._e()]}))],2),t.hasDepletion?[i("hr"),i("h4",{domProps:{textContent:t._s(t.$i18n.$t.extension.expeditions.depletion)}}),t.showSimplified?i("div",{staticClass:"result-grid"},[t._l(t.DepletionLevels,(function(e){return[t.notification.depletion[e]>0?[i("span",{key:"icon-"+e,staticClass:"icon mdi",class:{unknown:"mdi-help",none:"mdi-signal-cellular-outline",low:"mdi-signal-cellular-1",medium:"mdi-signal-cellular-2",high:"mdi-signal-cellular-3"}[e],style:{color:t.depletionColors[e]}}),i("span",{key:"amount-"+e,domProps:{textContent:t._s(t.$i18n.$n(t.notification.depletion[e]))}})]:t._e()]}))],2):i("div",{staticClass:"text-grid events"},[t._l(t.DepletionLevels,(function(e){return[t.notification.depletion[e]>0?[i("span",{key:"depletion-name-"+e,domProps:{textContent:t._s(t.$i18n.$t.extension.expeditions.depletionLevels[e])}}),i("span",{key:"depletion-count-"+e,domProps:{textContent:t._s(t.$i18n.$n(t.notification.depletion[e]))}})]:t._e()]}))],2)]:t._e()]},proxy:!0}])})},L=[],I=i(5424),j=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("span",{staticClass:"tri-resource"},[i("o-resource",{attrs:{resource:"metal",size:t.size}}),i("o-resource",{attrs:{resource:"crystal",size:t.size}}),i("o-resource",{attrs:{resource:"deuterium",size:t.size}})],1)},N=[];let M=class extends f.w3{size};(0,r.gn)([(0,f.fI)({required:!1,type:String,default:"32px"})],M.prototype,"size",void 0),M=(0,r.gn)([(0,f.wA)({})],M);const z=M,F=z;var D=(0,k.Z)(F,j,N,!1,null,"058bdb72",null);const Z=D.exports;var q=i(917),A=i(1639),V=i(2057),H=i(7331),W=i(1745),B=i(248);let G=class extends f.w3{notification;detroidItem=A.t.detroid_bronze;expeditionEvents=[I.r.lostFleet,I.r.resources,I.r.darkMatter,I.r.fleet,I.r.delay,I.r.early,I.r.pirates,I.r.aliens,I.r.item,I.r.trader,I.r.nothing];ShipType=V.g;ResourceType=H._;DepletionLevels=[...W.R,"unknown"];ships=[...B.GI].sort(((t,e)=>t-e));get showSimplified(){return q.V.settings.messageTracking.showSimplifiedResults}get hasSummary(){return this.foundResources||this.notification.darkMatter>0||this.foundShips}get title(){return this.$i18n.$t.extension.notifications.expeditionTracking.result.title(this.$i18n.$n(this.count))}get hasDepletion(){return Object.values(this.notification.depletion).some((t=>t>0))}get foundResources(){return Object.values(this.notification.resources).some((t=>t>0))}get foundShips(){return Object.values(this.notification.ships).some((t=>t>0))}get count(){return Object.values(this.notification.events).reduce(((t,e)=>t+e),0)}get eventColors(){return q.V.settings.colors.expeditions.events}get depletionColors(){return q.V.settings.colors.expeditions.depletion}get resourceSum(){return this.notification.resources.metal+this.notification.resources.crystal+this.notification.resources.deuterium}};(0,r.gn)([(0,f.fI)({required:!0,type:Object})],G.prototype,"notification",void 0),G=(0,r.gn)([(0,f.wA)({components:{Notification:P,ExpeditionEventResourcesIcon:Z}})],G);const X=G,Y=X;var J=(0,k.Z)(Y,E,L,!1,null,"6d676653",null);const U=J.exports;var K=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("notification",{attrs:{type:"warning",title:t.title,message:t.message,saturate:.6},on:{remove:function(e){return t.$emit("remove")}}})},Q=[];let tt=class extends f.w3{notification;get title(){return this.$i18n.$t.extension.notifications.expeditionTracking.fleetLost.title(this.$i18n.$n(this.notification.count))}get message(){return this.$i18n.$t.extension.notifications.expeditionTracking.fleetLost.message(this.$i18n.$n(this.notification.count))}};(0,r.gn)([(0,f.fI)({required:!0,type:Object})],tt.prototype,"notification",void 0),tt=(0,r.gn)([(0,f.wA)({components:{Notification:P}})],tt);const et=tt,it=et;var nt=(0,k.Z)(it,K,Q,!1,null,null,null);const ot=nt.exports;var st=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("notification",{attrs:{type:"info",title:t.title,timeout:1e4},on:{remove:function(e){return t.$emit("remove")}},scopedSlots:t._u([{key:"message",fn:function(){return[t.notification.count>0?i("div",{domProps:{textContent:t._s(t.message)}}):t._e(),t.hasLoot?[i("hr"),t.showSimplified?i("div",{staticClass:"resources-grid"},[i("o-resource",{attrs:{resource:"metal"}}),i("span",{class:{"negative-loot":t.notification.resources.metal<0,fade:0==t.notification.resources.metal},domProps:{textContent:t._s(t.$i18n.$n(t.notification.resources.metal))}}),i("o-resource",{attrs:{resource:"crystal"}}),i("span",{class:{"negative-loot":t.notification.resources.crystal<0,fade:0==t.notification.resources.crystal},domProps:{textContent:t._s(t.$i18n.$n(t.notification.resources.crystal))}}),i("o-resource",{attrs:{resource:"deuterium"}}),i("span",{class:{"negative-loot":t.notification.resources.deuterium<0,fade:0==t.notification.resources.deuterium},domProps:{textContent:t._s(t.$i18n.$n(t.notification.resources.deuterium))}}),i("span",{staticClass:"mdi mdi-sigma"}),i("span",{class:{"negative-loot":t.sum<0,fade:0==t.sum},domProps:{textContent:t._s(t.$i18n.$n(t.sum))}})],1):i("div",{staticClass:"text-grid"},[i("span",{domProps:{textContent:t._s(t.$i18n.$t.extension.resources[t.ResourceType.metal])}}),i("span",{class:{"negative-loot":t.notification.resources.metal<0,fade:0==t.notification.resources.metal},domProps:{textContent:t._s(t.$i18n.$n(t.notification.resources.metal))}}),i("span",{domProps:{textContent:t._s(t.$i18n.$t.extension.resources[t.ResourceType.crystal])}}),i("span",{class:{"negative-loot":t.notification.resources.crystal<0,fade:0==t.notification.resources.crystal},domProps:{textContent:t._s(t.$i18n.$n(t.notification.resources.crystal))}}),i("span",{domProps:{textContent:t._s(t.$i18n.$t.extension.resources[t.ResourceType.deuterium])}}),i("span",{class:{"negative-loot":t.notification.resources.deuterium<0,fade:0==t.notification.resources.deuterium},domProps:{textContent:t._s(t.$i18n.$n(t.notification.resources.deuterium))}}),i("span",{domProps:{textContent:t._s(t.$i18n.$t.extension.common.sum)}}),i("span",{class:{"negative-loot":t.sum<0,fade:0==t.sum},domProps:{textContent:t._s(t.$i18n.$n(t.sum))}})])]:t._e()]},proxy:!0}])})},rt=[];let at=class extends f.w3{notification;ResourceType=H._;get showSimplified(){return q.V.settings.messageTracking.showSimplifiedResults}get title(){return this.$i18n.$t.extension.notifications.combatTracking.title(this.$i18n.$n(this.notification.count))}get message(){return this.$i18n.$t.extension.notifications.combatTracking.message(this.$i18n.$n(this.notification.count))}get hasLoot(){return Object.values(this.notification.resources).reduce(((t,e)=>t+e),0)>0}get sum(){return this.notification.resources.metal+this.notification.resources.crystal+this.notification.resources.deuterium}};(0,r.gn)([(0,f.fI)({required:!0,type:Object})],at.prototype,"notification",void 0),at=(0,r.gn)([(0,f.wA)({components:{Notification:P}})],at);const ct=at,lt=ct;var ut=(0,k.Z)(lt,st,rt,!1,null,"014b1a8a",null);const mt=ut.exports;var dt=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("notification",{attrs:{type:"info",title:t.title,timeout:1e4},on:{remove:function(e){return t.$emit("remove")}},scopedSlots:t._u([{key:"message",fn:function(){return[i("div",{domProps:{textContent:t._s(t.message)}}),t.hasResources?[i("hr"),t.showSimplified?i("div",{staticClass:"resources-grid"},[t._l(t.ResourceTypes,(function(e){return[t.notification.resources[e]>0?[i("o-resource",{attrs:{resource:e}}),i("span",{domProps:{textContent:t._s(t.$i18n.$n(t.notification.resources[e]))}})]:t._e()]})),i("span",{staticClass:"mdi mdi-sigma"}),i("span",{domProps:{textContent:t._s(t.$i18n.$n(t.sum))}})],2):i("div",{staticClass:"text-grid"},[t._l(t.ResourceTypes,(function(e){return[t.notification.resources[e]>0?[i("span",{domProps:{textContent:t._s(t.$i18n.$t.extension.resources[e])}}),i("span",{domProps:{textContent:t._s(t.$i18n.$n(t.notification.resources[e]))}})]:t._e()]})),i("span",{domProps:{textContent:t._s(t.$i18n.$t.extension.common.sum)}}),i("span",{domProps:{textContent:t._s(t.$i18n.$n(t.sum))}})],2)]:t._e()]},proxy:!0}])})},ft=[];let pt=class extends f.w3{notification;ResourceType=H._;ResourceTypes=H.P;get showSimplified(){return q.V.settings.messageTracking.showSimplifiedResults}get title(){return this.$i18n.$t.extension.notifications.debrisFieldReportTracking.title(this.$i18n.$n(this.notification.count))}get message(){return this.$i18n.$t.extension.notifications.debrisFieldReportTracking.message(this.$i18n.$n(this.notification.count))}get sum(){return this.notification.resources.metal+this.notification.resources.crystal}get hasResources(){return this.notification.resources.metal>0||this.notification.resources.crystal>0||this.notification.resources.deuterium>0}};(0,r.gn)([(0,f.fI)({required:!0,type:Object})],pt.prototype,"notification",void 0),pt=(0,r.gn)([(0,f.wA)({components:{Notification:P}})],pt);const gt=pt,ht=gt;var vt=(0,k.Z)(ht,dt,ft,!1,null,"044943c4",null);const $t=vt.exports;var yt=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("notification",{attrs:{type:"info",title:t.title,timeout:1e4},on:{remove:function(e){return t.$emit("remove")}},scopedSlots:t._u([{key:"message",fn:function(){return[i("div",{domProps:{textContent:t._s(t.message)}}),t.notification.newLifeforms.length>0?[i("hr"),i("div",{staticClass:"result-grid"},[t._l(t.notification.newLifeforms,(function(e){return[i("o-lifeform",{key:"icon-"+e,staticClass:"icon",attrs:{lifeform:e}}),i("span",{key:"name-"+e,domProps:{textContent:t._s(t.$i18n.$t.ogame.lifeforms[e])}})]}))],2)]:t._e(),t.foundExperience?[i("hr"),i("div",{staticClass:"result-grid xp-grid"},[t._l(t.LifeformTypes,(function(e){return[t.notification.lifeformExperience[e]>0?[i("o-lifeform",{key:"icon-"+e,staticClass:"icon",attrs:{lifeform:e}}),i("div",{key:"amount-"+e,staticClass:"xp-column"},[i("span",{domProps:{textContent:t._s(t.$i18n.$t.ogame.lifeforms[e])}}),i("span",{domProps:{textContent:t._s("+"+t.$i18n.$n(t.notification.lifeformExperience[e])+" XP")}})])]:t._e()]}))],2)]:t._e(),t.foundArtifacts?[i("hr"),i("div",{staticClass:"result-grid artifact-grid"},[i("span",{staticClass:"mdi mdi-pyramid",style:{color:t.colors.artifacts}}),i("span",{domProps:{textContent:t._s(t.$i18n.$n(t.notification.artifacts))}})])]:t._e(),i("hr"),t.showSimplified?i("div",{staticClass:"result-grid"},[t.notification.events.lostShip>0?[i("span",{staticClass:"mdi mdi-skull-crossbones-outline",style:{color:t.colors.lostShip}}),i("span",{domProps:{textContent:t._s(t.$i18n.$n(t.notification.events.lostShip))}})]:t._e(),t.lifeformFindingCount>0?[i("span",{staticClass:"mdi mdi-star-shooting",style:{color:t.colors.knownLifeformFound}}),i("span",{domProps:{textContent:t._s(t.$i18n.$n(t.lifeformFindingCount))}})]:t._e(),t.notification.events.artifacts>0?[i("span",{staticClass:"mdi mdi-pyramid",style:{color:t.colors.artifacts}}),i("span",{domProps:{textContent:t._s(t.$i18n.$n(t.notification.events.artifacts))}})]:t._e(),t.notification.events.nothing>0?[i("span",{staticClass:"mdi mdi-close",style:{color:t.colors.nothing}}),i("span",{domProps:{textContent:t._s(t.$i18n.$n(t.notification.events.nothing))}})]:t._e()],2):i("div",{staticClass:"text-grid"},[t.notification.events.lostShip>0?[i("span",{domProps:{textContent:t._s(t.$i18n.$t.extension.empire.lifeforms.eventTypes.lostShip)}}),i("span",{domProps:{textContent:t._s(t.$i18n.$n(t.notification.events.lostShip))}})]:t._e(),t.lifeformFindingCount>0?[i("span",{domProps:{textContent:t._s(t.$i18n.$t.extension.empire.lifeforms.lifeformFound)}}),i("span",{domProps:{textContent:t._s(t.$i18n.$n(t.lifeformFindingCount))}})]:t._e(),t.notification.events.artifacts>0?[i("span",{domProps:{textContent:t._s(t.$i18n.$t.extension.empire.lifeforms.artifacts)}}),i("span",{domProps:{textContent:t._s(t.$i18n.$n(t.notification.events.artifacts))}})]:t._e(),t.notification.events.nothing>0?[i("span",{domProps:{textContent:t._s(t.$i18n.$t.extension.empire.lifeforms.eventTypes.nothing)}}),i("span",{domProps:{textContent:t._s(t.$i18n.$n(t.notification.events.nothing))}})]:t._e()],2)]},proxy:!0}])})},xt=[],_t=i(3418);let Ct=class extends f.w3{notification;get showSimplified(){return q.V.settings.messageTracking.showSimplifiedResults}get colors(){return q.V.settings.colors.lifeformDiscoveries.events}LifeformTypes=_t.p3;get count(){return Object.values(this.notification.events).reduce(((t,e)=>t+e),0)}get lifeformFindingCount(){return this.notification.events.newLifeformFound+this.notification.events.knownLifeformFound}get foundExperience(){return Object.values(this.notification.lifeformExperience).some((t=>t>0))}get foundArtifacts(){return this.notification.artifacts>0}get title(){return this.$i18n.$t.extension.notifications.lifeformDiscoveryTracking.title(this.$i18n.$n(this.count))}get message(){return this.$i18n.$t.extension.notifications.lifeformDiscoveryTracking.message(this.$i18n.$n(this.count))}};(0,r.gn)([(0,f.fI)({required:!0,type:Object})],Ct.prototype,"notification",void 0),Ct=(0,r.gn)([(0,f.wA)({components:{Notification:P}})],Ct);const kt=Ct,wt=kt;var Pt=(0,k.Z)(wt,yt,xt,!1,null,"3a4e8356",null);const Tt=Pt.exports;let bt=class extends f.w3{componentNames={[c.MessageTrackingError]:"message-tracking-error-notification",[c.ExpeditionTracking]:"expedition-tracking-notification",[c.ExpeditionTrackingLostFleet]:"expedition-tracking-lost-fleet-notification",[c.CombatTracking]:"combat-tracking-notification",[c.DebrisFieldReportTracking]:"debris-field-report-tracking-notification",[c.LifeformDiscoveryTracking]:"lifeform-discovery-tracking-notification"};notifications={};notificationOrder=[];ogameMeta={language:"",community:"",serverId:0,playerId:0};resizeObserver=new ResizeObserver((()=>this.onResize()));onResize(){window.parent.postMessage({type:a,width:this.$el.clientWidth,height:this.$el.clientHeight},"*")}get hasNotifications(){return this.notificationOrder.length>0}async mounted(){document.querySelector("#splashscreen")?.remove();const t=new URLSearchParams(location.search);this.ogameMeta={language:t.get("language")??(0,d.A)("expected language query parameter"),serverId:(0,m.Y)(t.get("server")??(0,d.A)("expected server query parameter"),10),playerId:(0,m.Y)(t.get("player")??(0,d.A)("expected player query parameter"),10)},chrome.runtime.onMessage.addListener((async t=>await this.onMessage(t))),await this.$nextTick(),this.resizeObserver.observe(this.$el)}destroyed(){this.resizeObserver.disconnect()}async onMessage(t){if(t.type!=l.C.Notification)return;if(!(0,u.i)(t.ogameMeta,this.ogameMeta))return;const e=t,i=e.data.messageId??(0,p.Z)();i in this.notifications||this.notificationOrder.push(i),this.$set(this.notifications,i,e.data)}removeNotification(t){this.notificationOrder=this.notificationOrder.filter((e=>e!=t)),delete this.notifications[t]}};bt=(0,r.gn)([(0,f.wA)({components:{MessageTrackingErrorNotification:O,ExpeditionTrackingNotification:U,ExpeditionTrackingLostFleetNotification:ot,CombatTrackingNotification:mt,DebrisFieldReportTrackingNotification:$t,LifeformDiscoveryTrackingNotification:Tt}})],bt);const St=bt,Rt=St;var Ot=(0,k.Z)(Rt,o,s,!1,null,"49032979",null);const Et=Ot.exports;var Lt=i(1821);n.ZP.prototype.$forceCompute=function(t){this._computedWatchers[t]?.run()},Object.defineProperty(n.ZP.prototype,"$lang",{get:()=>q.V.settings.extensionLanguage}),Object.defineProperty(n.ZP.prototype,"$i18n",{get:()=>Lt.j});i(5524);var It=i(5599);function jt(){(new n.ZP).$watch((()=>q.V.settings.extensionLanguage),(t=>Lt.j.locale=t),{immediate:!0}),(new n.ZP).$watch((()=>q.V.settings.extensionLanguageRegion),(t=>Lt.j.localeRegion=t??null),{immediate:!0})}async function Nt(){(0,It.d)(),await q.V.ready,jt(),n.ZP.config.productionTip=!1,new n.ZP({render:t=>t(Et)}).$mount("#app")}Nt()}},e={};function i(n){var o=e[n];if(void 0!==o)return o.exports;var s=e[n]={exports:{}};return t[n].call(s.exports,s,s.exports,i),s.exports}i.m=t,(()=>{var t=[];i.O=(e,n,o,s)=>{if(!n){var r=1/0;for(u=0;u<t.length;u++){for(var[n,o,s]=t[u],a=!0,c=0;c<n.length;c++)(!1&s||r>=s)&&Object.keys(i.O).every((t=>i.O[t](n[c])))?n.splice(c--,1):(a=!1,s<r&&(r=s));if(a){t.splice(u--,1);var l=o();void 0!==l&&(e=l)}}return e}s=s||0;for(var u=t.length;u>0&&t[u-1][2]>s;u--)t[u]=t[u-1];t[u]=[n,o,s]}})(),(()=>{i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})}})(),(()=>{i.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"===typeof window)return window}}()})(),(()=>{i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e)})(),(()=>{i.j=1909})(),(()=>{var t={1909:0};i.O.j=e=>0===t[e];var e=(e,n)=>{var o,s,[r,a,c]=n,l=0;if(r.some((e=>0!==t[e]))){for(o in a)i.o(a,o)&&(i.m[o]=a[o]);if(c)var u=c(i)}for(e&&e(n);l<r.length;l++)s=r[l],i.o(t,s)&&t[s]&&t[s][0](),t[s]=0;return i.O(u)},n=globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[];n.forEach(e.bind(null,0)),n.push=e.bind(null,n.push.bind(n))})();var n=i.O(void 0,[4998,3064],(()=>i(1365)));n=i.O(n)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,