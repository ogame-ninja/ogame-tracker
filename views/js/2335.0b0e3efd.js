"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[2335],{5872:(e,t,n)=>{n.r(t),n.d(t,{default:()=>v});var s=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("lifeform-bonuses-breakdown",{attrs:{types:e.bonusTypes,technologies:e.techs,planets:e.planets,limits:e.limits}})},i=[],o=n(655),l=n(147),a=n(3418),r=n(4846),c=n(9751),p=n(8395),u=n(1786),g=n(4028),f=n(7385),h=n(7848),m=n(7377);let b=class extends g.w3{bonusTypes=[{key:"capacity",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.denCapacity.header}];technologies=r.kH;get techs(){return this.technologies.map((e=>e.type))}get planets(){return(0,c.r)(p.p.empire.planetOrder.map((e=>p.p.empire.planets[e])).filter((e=>!e.isMoon)),(e=>e.id),(e=>this.technologies.map((t=>{const n=this.getPlanetBonus(t,e);return{planet:e,technologyType:t.type,bonuses:(0,c.a)(["capacity"],(e=>({base:n.base,buildings:n.buildings,level:n.level,total:n.total})))}}))))}get limits(){const e=(0,h.K)({type:m.f.DenCapacityBonus});return{capacity:t=>null!=e?Math.min(t,e):t}}get experience(){return p.p.lifeformExperience}getPlanetBonus(e,t){const n={base:0,level:0,buildings:0,buildingsBoost:0,total:0};if(t.activeLifeform==a.e5.none||!t.activeLifeformTechnologies.includes(e.type))return n;const s=Math.min((0,u.io)(t)[e.type],(0,h.K)({type:m.f.LifeformResearchBonusBoost})??Number.MAX_SAFE_INTEGER);n.buildingsBoost+=s;const i=e.getDenCapacityBonus(t.lifeformTechnologies[e.type]),o=i*(0,l.g1)(this.experience[t.activeLifeform]),r=i*s,c=i+o+r;return n.base+=i,n.level+=o,n.buildings+=r,n.total+=c,n}};b=(0,o.gn)([(0,g.wA)({components:{LifeformBonusesBreakdown:f.Z}})],b);const y=b,d=y;var B=n(1001),k=(0,B.Z)(d,s,i,!1,null,null,null);const v=k.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,