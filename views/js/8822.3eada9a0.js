"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[8822],{8822:(t,e,i)=>{i.r(e),i.d(e,{default:()=>v});var n=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"generator"},[i("div",[i("canvas",{ref:"canvas",attrs:{width:"600",height:"300"}})]),i("div",{staticClass:"generator-settings"},[i("div",{staticClass:"background-previews"},t._l(t.backgrounds,(function(e){return i("div",{key:e,staticClass:"background-preview",class:{"background-preview--active":e==t.selectedBackground},style:{"background-image":"url("+t.getBackgroundImgUrl(e)+")"},on:{click:function(i){return t.setBackgroundImage(e)}}})})),0)])])},s=[],a=i(655),r=i(7331),o=i(6538),h=i(4028),c=i(4992),d=i(5359),l=i(8395),g=i(7090),u=i(6903),m=i(7076),x=i(9828),$=i(4985);let w=class extends h.w3{canvas;backgrounds=["alliance","cruiser","defenses","exodus","facilities","fleet","heavy-fighter","heavy-fighter2","intergalactic-research-network","lf-artifacts","light-fighter","light-fighter2","new-universe","recycler","rewards","shipyard","space","space-dock","supplies"];backgroundImages={};resourceImages={};selectedBackground="exodus";width=600;height=300;productionBreakdowns=null;async mounted(){await l.p.ready,await m.s.ready,this.productionBreakdowns=(0,$.c)(l.p.empire,l.p.lifeformExperience),await this.initImages(),this.draw()}async initImages(){const t=[];this.backgrounds.forEach((e=>{t.push(new Promise((t=>{const i=new Image;i.addEventListener("load",(()=>{this.backgroundImages[e]=i,t()})),i.src=this.getBackgroundImgUrl(e)})))})),r.P.forEach((e=>{t.push(new Promise((t=>{const i=new Image;i.addEventListener("load",(()=>{this.resourceImages[e]=i,t()})),i.src=this.getResourceImgUrl(e)})))})),await Promise.all(t)}getBackgroundImgUrl(t){return`/img/ogame/misc/tools/signature-generator/${t}.png`}getResourceImgUrl(t){return`/img/ogame/resources/${t}.upscaled.png`}setBackgroundImage(t){this.selectedBackground=t,this.draw()}ctx=null;textColor="white";font='"Segoe UI",Tahoma,Verdana,Arial,sans-serif';shadows=[{opacity:.8,width:2,blur:4},{opacity:.7,width:2,blur:8},{opacity:.7,width:1,blur:16},{opacity:.7,width:1,blur:24},{opacity:.8,width:1,blur:48}];draw(){const t=document.createElement("canvas");t.height=this.canvas.height,t.width=this.canvas.width;const e=t.getContext("2d")??(0,o.A)("no 2d context found"),i=document.createElement("canvas");i.height=this.canvas.height,i.width=this.canvas.width;const n=i.getContext("2d")??(0,o.A)("no 2d context found"),s=(this.ctx??=this.canvas.getContext("2d"))??(0,o.A)("no 2d context found"),a={maximumFractionDigits:0},r=25,h=12,l=30,m=(this.width-2*h)/4,$=()=>{s.drawImage(this.backgroundImages[this.selectedBackground],0,0,this.width,this.height),s.fillStyle="rgba(0, 0, 0, 0.1)",s.fillRect(0,0,this.width,this.height)},w=t=>{let{x:i,y:s,text:a,maxWidth:r,alignRight:o,baseline:h,fontSize:c}=t;if(n.font=e.font=`${c??16}px ${this.font}`,n.textBaseline=e.textBaseline=h??"bottom",o&&null!=r){const t=n.measureText(a);i=Math.max(i,i+r-t.width)}for(const n of this.shadows)e.shadowColor=`rgba(0, 0, 0, ${n.opacity})`,e.shadowBlur=n.blur,e.lineWidth=n.width,e.strokeText(a,i,s,r);n.fillStyle=this.textColor,n.fillText(a,i,s,r)},f=()=>{w({text:"OGame Tracker by Wonkydonky",x:h,y:this.height-h})},p=t=>{const e=2;w({text:this.$i18n.$t.extension.tools.signatureGenerator.production,x:h,y:h+l/2+e+t,baseline:"middle",maxWidth:m,alignRight:!0});const i=[this.$i18n.$t.extension.tools.signatureGenerator.averagePerHour,this.$i18n.$t.extension.tools.signatureGenerator.totalPerHour,this.$i18n.$t.extension.tools.signatureGenerator.totalPerDay,this.$i18n.$t.extension.tools.signatureGenerator.totalPerWeek];i.forEach(((e,i)=>w({text:e,x:h,y:h+l+(i+1)*r+t,maxWidth:m,alignRight:!0})));const n=h+m;w({text:this.$i18n.$t.extension.resources.metal,x:n,y:h+l/2+e+t,baseline:"middle",maxWidth:m-l-5,alignRight:!0}),s.drawImage(this.resourceImages.metal,n+m-l,h+t,l,l);const o=this.productionBreakdowns.metal.getTotal(),c=[this.$i18n.$n(this.productionBreakdowns.metal.getAverage(),a),this.$i18n.$n(o,a),this.$i18n.$n(24*o,a),this.$i18n.$n(24*o*7,a)];c.forEach(((e,i)=>w({text:e,x:n,y:h+l+(i+1)*r+t,maxWidth:m,alignRight:!0})));const d=h+2*m;w({text:this.$i18n.$t.extension.resources.crystal,x:d,y:h+l/2+e+t,baseline:"middle",maxWidth:m-l-5,alignRight:!0}),s.drawImage(this.resourceImages.crystal,d+m-l,h+t,l,l);const g=this.productionBreakdowns.crystal.getTotal(),u=[this.$i18n.$n(this.productionBreakdowns.crystal.getAverage(),a),this.$i18n.$n(g,a),this.$i18n.$n(24*g,a),this.$i18n.$n(24*g*7,a)];u.forEach(((e,i)=>w({text:e,x:d,y:h+l+(i+1)*r+t,maxWidth:m,alignRight:!0})));const x=h+3*m;w({text:this.$i18n.$t.extension.resources.deuterium,x,y:h+l/2+e+t,baseline:"middle",maxWidth:m-l-5,alignRight:!0}),s.drawImage(this.resourceImages.deuterium,x+m-l,h+t,l,l);const $=this.productionBreakdowns.deuterium.getTotal(!0),f=[this.$i18n.$n(this.productionBreakdowns.deuterium.getAverage(!0),a),this.$i18n.$n($,a),this.$i18n.$n(24*$,a),this.$i18n.$n(24*$*7,a)];f.forEach(((e,i)=>w({text:e,x,y:h+l+(i+1)*r+t,maxWidth:m,alignRight:!0})))},y=t=>{s.fillStyle="rgba(255,255,255,0.5)",s.fillRect(h,160+t,this.width-2*h,1)},k=t=>{const e=190,i=[this.$i18n.$t.extension.tools.signatureGenerator.expeditions,this.$i18n.$t.extension.tools.signatureGenerator.lifeformDiscoveries,this.$i18n.$t.extension.tools.signatureGenerator.combats,this.$i18n.$t.extension.tools.signatureGenerator.debrisFieldReports];i.forEach(((i,n)=>w({text:i,x:h+n*m,y:e+t,maxWidth:m,alignRight:!0})));const n=[this.$i18n.$n(g.m.count),this.$i18n.$n(u.F.count),this.$i18n.$n(c.t.count),this.$i18n.$n(d.J.count)];n.forEach(((i,n)=>w({text:i,x:h+n*m,y:e+r+t,maxWidth:m,alignRight:!0})))},v=()=>{const t=x.z.currentAccount,e=x.z.currentServer,i=`${t.name} - ${e.language.toUpperCase()} ${e.name}`;w({text:i,x:h,y:h,maxWidth:this.width/2-h,baseline:"top"})},b=()=>{const t=new Intl.DateTimeFormat(this.$i18n.fullLocaleIdentifier,{year:"numeric",month:"2-digit",day:"2-digit"});w({text:t.format(Date.now()),x:this.width/2,maxWidth:this.width/2-h,y:h,alignRight:!0,baseline:"top"})};$(),f(),v(),b(),p(32),y(32),k(32),s.drawImage(t,0,0),s.drawImage(i,0,0)}};(0,a.gn)([(0,h.Rl)("canvas")],w.prototype,"canvas",void 0),w=(0,a.gn)([(0,h.wA)({})],w);const f=w,p=f;var y=i(1001),k=(0,y.Z)(p,n,s,!1,null,"0932e619",null);const v=k.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,