"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[3019],{7791:(e,s,t)=>{t.r(s),t.d(s,{default:()=>k});var n=function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("lifeform-bonuses-breakdown",{attrs:{types:e.bonusTypes,technologies:e.techs,planets:e.planets,limits:e.limits}})},o=[],i=t(655),l=t(147),r=t(3418),a=t(4846),p=t(9751),c=t(8395),u=t(1786),f=t(4028),m=t(3894),h=t(5794),g=t(7848),b=t(7377);let d=class extends f.w3{bonusTypes=[{key:"speed",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.discoveryMissions.header}];technologies=a.YO.filter((e=>e.appliesTo(h.q.searchForLifeforms)));get techs(){return this.technologies.map((e=>e.type))}get planets(){return(0,p.r)(c.p.empire.planetOrder.map((e=>c.p.empire.planets[e])).filter((e=>!e.isMoon)),(e=>e.id),(e=>this.technologies.map((s=>{const t=this.getPlanetBonus(s,e);return{planet:e,technologyType:s.type,bonuses:(0,p.a)(["speed"],(e=>({base:t.base,buildings:t.buildings,level:t.level,total:t.total})))}}))))}get experience(){return c.p.lifeformExperience}get limits(){const e=(0,g.K)({type:b.f.FleetSpeedBonus,missionType:h.q.searchForLifeforms});return{speed:s=>null!=e?Math.min(s,e):s}}getPlanetBonus(e,s){const t={base:0,level:0,buildings:0,buildingsBoost:0,total:0};if(s.activeLifeform==r.e5.none||!s.activeLifeformTechnologies.includes(e.type))return t;const n=Math.min((0,u.io)(s),(0,g.K)({type:b.f.LifeformResearchBonusBoost})??Number.MAX_SAFE_INTEGER);t.buildingsBoost+=n;const o=e.getFleetSpeedBonus(h.q.searchForLifeforms,s.lifeformTechnologies[e.type]),i=o*(0,l.g1)(this.experience[s.activeLifeform]),a=o*n,p=o+i+a;return t.base+=o,t.level+=i,t.buildings+=a,t.total+=p,t}};d=(0,i.gn)([(0,f.wA)({components:{LifeformBonusesBreakdown:m.Z}})],d);const y=d,v=y;var B=t(1001),T=(0,B.Z)(v,n,o,!1,null,null,null);const k=T.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,