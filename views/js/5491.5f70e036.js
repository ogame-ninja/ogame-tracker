"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[5491],{4263:(e,t,s)=>{var i;s.d(t,{O:()=>a}),function(e){e[e["total"]=0]="total",e[e["economy"]=1]="economy",e[e["research"]=2]="research",e[e["militaryAndNumberOfShips"]=3]="militaryAndNumberOfShips",e[e["militaryLost"]=4]="militaryLost",e[e["militaryBuilt"]=5]="militaryBuilt",e[e["militaryDestroyed"]=6]="militaryDestroyed",e[e["honor"]=7]="honor",e[e["lifeform"]=8]="lifeform",e[e["lifeformEconomy"]=9]="lifeformEconomy",e[e["lifeformTechnology"]=10]="lifeformTechnology",e[e["lifeformDiscoveries"]=11]="lifeformDiscoveries"}(i||(i={}));const a=["total","economy","research","military","militaryBuilt","militaryDestroyed","militaryLost","honor","numberOfShips","lifeform","lifeformEconomy","lifeformTechnology","lifeformDiscoveries"]},5593:(e,t,s)=>{s.d(t,{D:()=>m});var i=s(655),a=s(3768),r=s(4384),o=s(1936);function l(e,t){const s={...e};return Object.keys(t).forEach((e=>{const i=t[e];if(e in s){const t=s[e];if("object"===typeof t&&!(t instanceof Array))return void(s[e]=l(t,i))}s[e]=i})),s}const n={universeHistory:{alliances:{highscore:[]},players:{highscore:[]}}};async function y(e){const t=await(0,r._N)(e),s=l(n,await t.get("universeSpecificSettings",0)??{});return s}var c=s(3654),h=s(4028),d=s(8717);let u=class extends h.w3{settings=null;_ready;_resolveReady;updateSettings(e){console.debug("updating universe specific settings",e),this.settings=e,(async()=>{const t=await(0,r._N)(d.l);await t.put("universeSpecificSettings",e,0);const s={ogameMeta:d.l,senderUuid:d.g,type:o.C.NotifyUniverseSpecificSettingsUpdate};await(0,a.p)(s)})()}get ready(){return this._ready}async created(){this._ready=new Promise((e=>this._resolveReady=e)),this.initCommunication(),await this.loadData()}initCommunication(){chrome.runtime.onMessage.addListener((async e=>await this.onMessage(e)))}async loadData(){this.settings=await y(d.l),this._resolveReady()}async onMessage(e){const{type:t,ogameMeta:s}=e;if((0,c.i)(s,d.l)&&e.senderUuid!=d.g)switch(t){case o.C.NotifyUniverseSpecificSettingsUpdate:await this.loadData();break}}};u=(0,i.gn)([h.wA],u);const m=new u},5491:(e,t,s)=>{s.r(t),s.d(t,{default:()=>k});var i=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"highscores"},[e.dataModuleLoading?s("loading-spinner"):[s("grid-table",{staticClass:"player-selection-table",attrs:{columns:e.tableColumns,items:e.tableItems},scopedSlots:e._u([{key:"cell-player",fn:function(t){var i=t.value;return[null==i?[s("input",{directives:[{name:"model",rawName:"v-model",value:e.selectedPlayerName,expression:"selectedPlayerName"}],staticStyle:{width:"100%"},attrs:{type:"text",placeholder:e.$i18n.$t.extension.universeHistory.playerSelection.search,list:"player-list"},domProps:{value:e.selectedPlayerName},on:{change:function(t){return e.onPlayerSelected(t.target.value)},input:function(t){t.target.composing||(e.selectedPlayerName=t.target.value)}}}),s("datalist",{attrs:{id:"player-list"}},e._l(e.playerNames,(function(t,i){return s("option",{key:i},[e._v(" "+e._s(t)+" ")])})),0)]:s("div",{staticClass:"list-item"},[s("span",{staticClass:"mdi mdi-delete",on:{click:function(t){return e.removePlayer(i.id)}}}),s("span",{domProps:{textContent:e._s(i.name)}})])]}}])}),s("tabs",{attrs:{tabs:e.tabs}},[e._l(e.keys,(function(t){return[s("template",{slot:"tab-content-"+t},[e.playerScoresLoading?s("span",{key:"score-"+t+"-loading",staticClass:"loading"}):e.playerIds.length>0?s("scrollable-chart",{key:"score-"+t,attrs:{datasets:e.scoreDatasets[t],"continue-last-value":"","show-x-values-in-grid":"","tick-interval":864e5,ticks:30,"tick-list":e.days,"min-tick":e.firstDay,"max-tick":e.nextDay,"x-label-formatter":function(t){return e.$i18n.$d(t,"date")},"x-label-tooltip-formatter":function(t){return e.$i18n.$d(t,"datetime")}}}):e._e()],1)]}))],2)]],2)},a=[],r=s(655),o=s(4263),l=s(9751),n=s(7545),y=s(6538),c=s(8717),h=s(7076),d=s(5038),u=s(5593),m=s(7349),p=s(9119),f=s(4028);let g=class extends f.w3{colors=["#F48FB1","#673AB7","#E53935","#3F51B5","#006064","#546E7A","#EF9A9A","#64B5F6","#FFE082","#E91E63","#BA68C8","#BF360C","#039BE5","#8E24AA","#9CCC65","#A1887F","#0097A7","#FFAB91","#009688","#43A047","#1A237E","#558B2F","#311B92","#880E4F","#01579B","#AFB42B","#1E88E5","#827717","#FFF176","#BDBDBD","#FFC107","#FFA726","#FF5722","#795548","#004D40","#81C784","#90A4AE","#757575","#FDD835"];leftX=0;rightX=1;dataModuleLoading=!0;playerScoresLoading=!0;selectedPlayerName="";scoreDatasets={};firstDay=0;keys=o.O;get tabs(){const e=[{key:"total",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.total},{key:"economy",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.economy},{key:"research",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.research},{key:"military",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.military},{key:"militaryBuilt",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.militaryBuilt},{key:"militaryDestroyed",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.militaryDestroyed},{key:"militaryLost",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.militaryLost},{key:"honor",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.honor},{key:"numberOfShips",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.numberOfShips}];return h.s.serverSettings.lifeforms.enabled&&e.push({key:"lifeform",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.lifeform},{key:"lifeformEconomy",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.lifeformEconomy},{key:"lifeformTechnology",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.lifeformTechnology},{key:"lifeformDiscoveries",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.lifeformDiscoveries}),e}get tableColumns(){return[{key:"player",label:this.$i18n.$t.extension.universeHistory.playerSelection.header,headerClass:"player-selection-table-cell",class:"player-selection-table-cell"}]}get tableItems(){return[{player:null},...this.selectedPlayers.map((e=>({player:e})))]}get playerIds(){return(this.$route.query.players??"").split(",").filter((e=>e.length>0)).map((e=>(0,n.Y)(e,10))).filter((e=>this.players.some((t=>t.id==e))))}async mounted(){await u.D.ready,await this.redirectToDefault(),this.dataModuleLoading=!0,await d.z.ready,this.dataModuleLoading=!1,await this.loadPlayerScores()}async redirectToDefault(){if(0!=this.playerIds.length)return;let e=u.D.settings.universeHistory.players.highscore;0==e.length&&(e=[c.l.playerId]),await this.updatePlayerIdRoute(e)}async loadPlayerScores(){this.playerScoresLoading=!0,this.scoreDatasets={};const e={};this.playerIds.forEach((t=>e[t]={})),this.keys.forEach((t=>{this.scoreDatasets[t]=[],this.playerIds.forEach(((s,i)=>e[s][t]={key:`${s}-${t}`,values:[],color:this.colors[i%this.colors.length],label:this.players.find((e=>e.id==s))?.name??(0,y.A)(`no player with id '${s}' found`),filled:!1,stack:!1,hidePoints:!1}))}));let t=Number.MAX_SAFE_INTEGER;const s=await d.z.getPlayerScoreHistory(this.playerIds),i=o.O,a=(0,l.a)(this.playerIds,(()=>(0,l.a)(i,null)));s.forEach(((s,r)=>{t=Math.min(t,s.date),a[s.playerId][s.type]!=s.score&&i.includes(s.type)&&(e[s.playerId][s.type].values.push({x:s.date,y:s.score}),a[s.playerId][s.type]=s.score)})),this.keys.forEach((t=>{this.playerIds.forEach((s=>{this.scoreDatasets[t].push(e[s][t])}))})),this.firstDay=(0,p.Z)(t).getTime(),this.playerScoresLoading=!1}get nextDay(){return(0,m.Z)((0,p.Z)(Date.now()),1).getTime()}get days(){const e=[],t=this.nextDay;for(let s=this.firstDay;s<=t;s=(0,m.Z)(s,1).getTime())e.push(s);return e}get players(){return d.z.players}get playerNames(){return this.players.map((e=>e.name)).sort()}get selectedPlayers(){return this.playerIds.map((e=>this.players.find((t=>t.id==e))))}async onPlayerSelected(e){const t=this.players.find((t=>t.name.toLowerCase()==e.toLowerCase()));if(null==t)return;await this.$nextTick(),this.selectedPlayerName="";const s=this.$route.query.players?.split(",")??[];await this.updatePlayerIdRoute([...s.filter((e=>e!=t.id.toString())),t.id]),await this.loadPlayerScores()}async removePlayer(e){await this.updatePlayerIdRoute(this.playerIds.filter((t=>t!=e))),await this.loadPlayerScores()}updateSettings(e){const t=u.D.settings;u.D.updateSettings({...t,universeHistory:{...t.universeHistory,players:{...t.universeHistory.players,highscore:e}}})}async updatePlayerIdRoute(e){this.updateSettings(e.map((e=>"string"===typeof e?(0,n.Y)(e,10):e))),await this.$router.replace({query:{players:e.join(",")}}),await this.redirectToDefault()}};g=(0,r.gn)([(0,f.wA)({})],g);const b=g,v=b;var D=s(1001),$=(0,D.Z)(v,i,a,!1,null,"b1b6ec5e",null);const k=$.exports},7349:(e,t,s)=>{s.d(t,{Z:()=>o});var i=s(3946),a=s(9013),r=s(3882);function o(e,t){(0,r.Z)(2,arguments);var s=(0,a.Z)(e),o=(0,i.Z)(t);return isNaN(o)?new Date(NaN):o?(s.setDate(s.getDate()+o),s):s}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,