"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[9381],{9027:(e,t,a)=>{a.d(t,{Z:()=>d});var s=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"fake-table"},[a("div",{staticClass:"fake-table-header"},[a("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.combats.ignoreEspionageCombats.title)}})]),a("div",{staticClass:"fake-table-body"},[a("checkbox",{attrs:{value:e.ignoreEspionageCombats,label:e.$i18n.$t.extension.settings.combats.ignoreEspionageCombats.label},on:{input:function(t){return e.setIgnoreEspionageCombats(t)}}})],1)])},n=[],o=a(655),r=a(4028),i=a(917);let l=class extends r.w3{get ignoreEspionageCombats(){return i.V.settings.combatTracking.ignoreEspionageFights}setIgnoreEspionageCombats(e){i.V.updateSettings({...i.V.settings,combatTracking:{ignoreEspionageFights:e}})}};l=(0,o.gn)([(0,r.wA)({})],l);const u=l,m=u;var g=a(1001),c=(0,g.Z)(m,s,n,!1,null,"3b222f56",null);const d=c.exports},4310:(e,t,a)=>{a.d(t,{Z:()=>h});var s=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("grid-table",{staticClass:"ranged-stats-table",attrs:{columns:e.columns,items:e.rows,"footer-items":e.footerRows,"cell-class-provider":function(t){return e.getCellClass(t)}},scopedSlots:e._u([e._l(e.columns,(function(t,s){return{key:"cell-"+t.key,fn:function(n){var o=n.value,r=n.item;return[a("span",{key:t.key,staticClass:"ranged-stats-table-cell"},["label"==t.key?[null!=t.slotName&&null!=e.$scopedSlots[t.slotName]?e._t(t.slotName,null,{value:o}):a("span",{key:s,domProps:{textContent:e._s(o)}})]:"subLabel"==t.key?e._l(r.items,(function(s,n){return a("span",{key:n,class:s.labelClass},[null!=t.slotName&&null!=e.$scopedSlots[t.slotName]?e._t(t.slotName,null,{value:s.label}):a("span",{domProps:{textContent:e._s(s.label)}})],2)})):e._l(r.items||[r],(function(s,n){return a("span",{key:n,class:[e.getCellClass(s[t.key]),s.class]},[null!=t.formatter?a("span",{domProps:{textContent:e._s(t.formatter(s[t.key]))}}):a("span",{domProps:{textContent:e._s(s[t.key])}})])}))],2)]}}})),e._l(e.$scopedSlots,(function(t,a){return{key:a,fn:function(t){return[e._t(a,null,null,t)]}}}))],null,!0)})},n=[],o=a(655),r=a(4028),i=a(9858),l=a(6538),u=a(4749),m=a.n(u),g=a(917);let c=class extends r.w3{showPercentage;showAverage;items;footerItems;numberFormatOptions;averageNumberFormatOptions;dataItems;get hasGroupedItems(){return this.items.some((e=>"items"in e))}get dateRanges(){return g.V.settings.dateRanges}get dataItemsByRange(){const e=this.dataItems,t=this.dateRanges.map((()=>[]));return e.forEach((e=>{this.dateRanges.forEach(((a,s)=>{(0,i.m)(e.date,a)&&t[s].push(e)}))})),t}get firstDay(){return this.dataItemsByRange.reduce(((e,t)=>Math.min(e,Math.min(...t.map((e=>e.date))))),Date.now())}get columns(){const e=[{key:"label",label:"",slotName:"label"}];return this.hasGroupedItems&&e.push({key:"subLabel",label:"",slotName:"subLabel"}),e.push(...this.dateRanges.map(((e,t)=>({key:t,label:e.label??this.$i18n.$t.extension.settings.dateRanges.since(this.$i18n.$d(this.firstDay,"date")),formatter:e=>this.$i18n.$n(e,this.numberFormatOptions)})))),this.showAverage&&e.push({key:"average",label:this.$i18n.$t.extension.common.averagePerDay,formatter:e=>this.$i18n.$n(e,this.averageNumberFormatOptions??this.numberFormatOptions)}),this.showPercentage&&e.push({key:"percentage",label:"%",formatter:e=>""!=e?this.$i18n.$n(e,{minimumFractionDigits:3,maximumFractionDigits:3}):e}),e}get rows(){const e=this.dataItemsByRange,t=this.dateRanges.findIndex((e=>"all"==e.type))??(0,l.A)("failed to find range 'all'"),a=e[t].map((e=>m()(e.date).getTime())),s=new Set(a).size,n=Math.max(1,this.items.map((a=>"getValue"in a?a.getValue(e[t]):a.items.reduce(((a,s)=>a+s.getValue(e[t])),0))).reduce(((e,t)=>e+t),0));return this.items.map((a=>this.mapItemToRow(a,e,t,s,n)))}mapItemToRow(e,t,a,s,n){if("getValue"in e){const o={label:e.label,class:e.class,labelClass:e.labelClass,...this.dateRanges.map(((a,s)=>e.getValue(t[s])))},r=o[a];return this.showAverage&&(o.average=r/Math.max(1,s)),this.showPercentage&&(o.percentage=100*r/n),o}return{label:e.label,items:e.items.map((e=>this.mapItemToRow(e,t,a,s,n)))}}get footerRows(){const e=this.dataItemsByRange,t=this.dateRanges.findIndex((e=>"all"==e.type))??(0,l.A)("failed to find range 'all'"),a=e[t].map((e=>m()(e.date).getTime())),s=new Set(a).size;return this.footerItems.map((a=>{const n={label:a.label,...this.dateRanges.map(((t,s)=>"getValue"in a?a.getValue(e[s]):a.items.reduce(((t,a)=>t+a.getValue(e[s])),0))),percentage:""};if(this.showAverage){const e=n[t];n.average=e/Math.max(1,s)}return n}))}getCellClass(e){return 0==e?"fade-value":""}};(0,o.gn)([(0,r.fI)({required:!1,type:Boolean})],c.prototype,"showPercentage",void 0),(0,o.gn)([(0,r.fI)({required:!1,type:Boolean})],c.prototype,"showAverage",void 0),(0,o.gn)([(0,r.fI)({required:!0,type:Array})],c.prototype,"items",void 0),(0,o.gn)([(0,r.fI)({required:!1,type:Array,default:()=>[]})],c.prototype,"footerItems",void 0),(0,o.gn)([(0,r.fI)({required:!1,type:Object,default:void 0})],c.prototype,"numberFormatOptions",void 0),(0,o.gn)([(0,r.fI)({required:!1,type:Object,default:void 0})],c.prototype,"averageNumberFormatOptions",void 0),(0,o.gn)([(0,r.fI)({required:!0,type:Array})],c.prototype,"dataItems",void 0),c=(0,o.gn)([(0,r.wA)({})],c);const d=c,p=d;var b=a(1001),f=(0,b.Z)(p,s,n,!1,null,"1526beca",null);const h=f.exports},157:(e,t,a)=>{a.r(t),a.d(t,{default:()=>h});var s=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"table-container"},[a("ranged-stats-table",{attrs:{dataItems:e.combats,items:e.items,footerItems:e.footerItems,"show-average":"",averageNumberFormatOptions:e.avgNumberFormat}}),a("floating-menu",{attrs:{left:""},scopedSlots:e._u([{key:"activator",fn:function(){return[a("button",{on:{click:function(t){e.showSettings=!e.showSettings}}},[a("span",{staticClass:"mdi mdi-cog"})])]},proxy:!0}]),model:{value:e.showSettings,callback:function(t){e.showSettings=t},expression:"showSettings"}},[a("combat-tracking-ignore-espionage-combats-settings"),a("hr"),a("date-range-settings")],1)],1)},n=[],o=a(655),r=a(4028),i=a(4310),l=a(4992),u=a(3347),m=a(4329),g=a(9027);let c=class extends r.w3{showSettings=!1;avgNumberFormat={minimumFractionDigits:1,maximumFractionDigits:1};get combats(){return l.t.dailyResultsArray}get items(){return u.F.map((e=>({label:this.$i18n.$t.extension.combats.combatResults[e],getValue:t=>t.reduce(((t,a)=>t+a.results.onExpeditions[e]),0)})))}get footerItems(){return[{label:this.$i18n.$t.extension.common.resourceUnits,getValue:e=>u.F.reduce(((t,a)=>t+e.reduce(((e,t)=>e+t.results.onExpeditions[a]),0)),0)}]}};c=(0,o.gn)([(0,r.wA)({components:{RangedStatsTable:i.Z,DateRangeSettings:m.Z,CombatTrackingIgnoreEspionageCombatsSettings:g.Z}})],c);const d=c,p=d;var b=a(1001),f=(0,b.Z)(p,s,n,!1,null,"173ddb12",null);const h=f.exports},8734:(e,t)=>{function a(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a,e.exports=t.default},4749:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var s=o(a(1171)),n=o(a(8734));function o(e){return e&&e.__esModule?e:{default:e}}function r(e){(0,n.default)(1,arguments);var t=(0,s.default)(e);return t.setHours(0,0,0,0),t}e.exports=t.default},1171:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=o;var s=n(a(8734));function n(e){return e&&e.__esModule?e:{default:e}}function o(e){(0,s.default)(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"===typeof e||"[object Number]"===t?new Date(e):("string"!==typeof e&&"[object String]"!==t||"undefined"===typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}e.exports=t.default}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,