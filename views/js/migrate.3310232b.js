(()=>{"use strict";var e={4384:(e,t,r)=>{r.d(t,{_N:()=>d,DI:()=>u});var a=r(6531),o=r(6538),n=r(2927);const i={};async function s(e,t){let r=i[e];if(null==r){i[e]=r=(0,a.X3)(e,n.J,{upgrade:t});const o=await r;o.addEventListener("close",(t=>delete i[e]))}return await r}function c(e){return e.serverId<=0&&(0,o.A)("Server ID is 0 or less"),e.playerId<=0&&(0,o.A)("Player ID is 0 or less"),`s${e.serverId}-${e.language}-${e.playerId}`}async function d(e){const t=c(e);return await s(t,((e,t,r,a)=>{t<1&&(e.createObjectStore("combatReports",{keyPath:"id"}),e.createObjectStore("debrisFieldReports",{keyPath:"id"}),e.createObjectStore("expeditions",{keyPath:"id"}),e.createObjectStore("empire")),t<3&&e.createObjectStore("universeSpecificSettings"),t<7&&e.createObjectStore("lifeformDiscoveries",{keyPath:"id"}),t<8&&e.createObjectStore("combatReports.ignored")}))}const l="ogame-tracker";async function u(){return await s(l,((e,t,r,a)=>{t<1&&(e.createObjectStore("settings"),e.createObjectStore("accounts",{keyPath:["serverId","serverLanguage","id"]}),e.createObjectStore("servers",{keyPath:["id","language"]})),t<2&&a.objectStore("accounts").createIndex("server",["serverId","serverLanguage"])}))}},6403:(e,t,r)=>{var a=r(144),o=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{attrs:{id:"app"}},[r("h3",[e._v("(DE) Daten-Migration")]),e._m(0),r("hr"),r("h3",[e._v("(EN) Data migration")]),e._m(1),r("hr"),r("h3",[e._v("(PT) Migração de dados")]),e._m(2),r("br"),r("button",{attrs:{disabled:e.isImporting},domProps:{textContent:e._s("Daten migrieren/Migrate data/Migrar dados")},on:{click:function(t){return e.migrateData()}}}),e.isImporting?[r("br"),r("loading-spinner")]:e._e()],2)},n=[function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",[e._v(" Willkommen zur neuen Version vom OGame Tracker!"),r("br"),e._v(" Einiges hat sich im Hintergrund geändert, weshalb du deine bestehenden Daten migrieren musst."),r("br"),e._v(" Die Migration der Daten ist jedoch einmalig und deine Altdaten werden nicht entfernt, sollte bei der Migration ein Fehler auftreten."),r("br"),r("br"),e._v(" Bitte beginne die Migration der Daten, indem du den Button unter dieser Nachricht klickst."),r("br"),e._v(" Ist die Migration abgeschlossen, sollte sich dieses Fenster von selbst schließen. ")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",[e._v(" Welcome to the new OGame Tracker version!"),r("br"),e._v(" A lot changed in the background which is why you have to migrate already tracked data."),r("br"),e._v(" However, you only have to do this once and your existing data will be not be deleted in case an error occurs."),r("br"),r("br"),e._v(" Please start the migration by clicking the button below."),r("br"),e._v(" When the migration is done this window should close by itself. ")])},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",[e._v(" Bem vindo à nova versão do OGame Tracker!"),r("br"),e._v(" Muitas coisas mudaram no background e essa é a razão para teres que fazer a migração dos dados já monitorizados."),r("br"),e._v(" No entanto, tu apenas terás que fazer isto uma única vez e os dados existentes não serão apagados no caso de algum erro ocorrer."),r("br"),r("br"),e._v(" Para começar a migração dos dados basta clicares no botão abaixo."),r("br"),e._v(" Quando a migração terminar esta janela/tab irá fechar-se automaticamente. ")])}],i=r(655),s=r(4384),c=r(329),d=r(4028);let l=class extends d.w3{fileInput;file=null;isImporting=!1;onFileChanged(){this.file=this.fileInput.files?.[0]??null}async mounted(){this.fadeSplashscreen()}async migrateData(){this.isImporting=!0,await(0,c.g)(250);try{const e=await this.getV1Data();for(const t of e.accounts)await this.importAccount(t)}catch(e){alert("Migration failed with the following error, please contact the developer:\n"+e)}await chrome.storage.local.set({"migration-v1-to-v2":!0}),window.close()}fadeSplashscreen(){const e=document.querySelector("#splashscreen");e?.classList.add("fade"),setTimeout((()=>e?.remove()),500)}async importAccount(e){console.log("importing from account",{language:e.language,serverId:e.serverId,playerId:e.playerId});const t=await(0,s.DI)();await t.put("accounts",{serverId:e.serverId,serverLanguage:e.language,id:e.playerId,name:e.playerName}),await t.put("servers",{id:e.serverId,language:e.language,name:e.universeName});const r=await(0,s._N)(e),a=r.transaction(["expeditions","combatReports","debrisFieldReports"],"readwrite"),o=a.objectStore("expeditions");for(const s of Object.values(e.data.expeditions))await o.put(s);const n=a.objectStore("combatReports");for(const s of Object.values(e.data.combatReports))await n.put(s);const i=a.objectStore("debrisFieldReports");for(const s of Object.values(e.data.debrisFieldReports))await i.put(s);await a.done,console.log("imported account",{language:e.language,serverId:e.serverId,playerId:e.playerId})}async getV1Data(){const e=await chrome.storage.local.get(),t=Object.keys(e).filter((t=>t.endsWith("-version")&&"1.1"==e[t])).map((e=>e.replace(/-version$/,""))),r={type:"v1-to-v2-export",accounts:[]};return t.forEach((t=>{const{serverId:a,language:o,playerId:n}=t.match(/s(?<serverId>\d+)-(?<language>\w+)-(?<playerId>\d+)$/).groups,i={language:o,serverId:parseInt(a),playerId:parseInt(n),universeName:`${o.toUpperCase()} ${a}`,playerName:n,data:{expeditions:e[`${t}-expoEvents`]??{},combatReports:e[`${t}-battleReports`]??{},debrisFieldReports:e[`${t}-debrisFieldReports`]??{}}},s=e[`${t}-local-player`];null!=s&&(i.playerName=s.name??i.playerName,i.universeName=s.universeName??i.universeName),r.accounts.push(i)})),r}};(0,i.gn)([(0,d.Rl)("file-input")],l.prototype,"fileInput",void 0),l=(0,i.gn)([(0,d.wA)({components:{}})],l);const u=l,p=u;var g=r(1001),v=(0,g.Z)(p,o,n,!1,null,"3089e416",null);const m=v.exports;var b=r(1821);a.ZP.prototype.$forceCompute=function(e){this._computedWatchers[e]?.run()},Object.defineProperty(a.ZP.prototype,"$lang",{get:()=>navigator.language}),Object.defineProperty(a.ZP.prototype,"$i18n",{get:()=>b.j});r(7402),r(5524);var h=r(5599);(0,h.d)(),a.ZP.config.productionTip=!1,new a.ZP({render:e=>e(m)}).$mount("#app")}},t={};function r(a){var o=t[a];if(void 0!==o)return o.exports;var n=t[a]={exports:{}};return e[a].call(n.exports,n,n.exports,r),n.exports}r.m=e,(()=>{var e=[];r.O=(t,a,o,n)=>{if(!a){var i=1/0;for(l=0;l<e.length;l++){for(var[a,o,n]=e[l],s=!0,c=0;c<a.length;c++)(!1&n||i>=n)&&Object.keys(r.O).every((e=>r.O[e](a[c])))?a.splice(c--,1):(s=!1,n<i&&(i=n));if(s){e.splice(l--,1);var d=o();void 0!==d&&(t=d)}}return t}n=n||0;for(var l=e.length;l>0&&e[l-1][2]>n;l--)e[l]=e[l-1];e[l]=[a,o,n]}})(),(()=>{r.d=(e,t)=>{for(var a in t)r.o(t,a)&&!r.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})}})(),(()=>{r.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()})(),(()=>{r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)})(),(()=>{r.j=5061})(),(()=>{var e={5061:0};r.O.j=t=>0===e[t];var t=(t,a)=>{var o,n,[i,s,c]=a,d=0;if(i.some((t=>0!==e[t]))){for(o in s)r.o(s,o)&&(r.m[o]=s[o]);if(c)var l=c(r)}for(t&&t(a);d<i.length;d++)n=i[d],r.o(e,n)&&e[n]&&e[n][0](),e[n]=0;return r.O(l)},a=globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[];a.forEach(t.bind(null,0)),a.push=t.bind(null,a.push.bind(a))})();var a=r.O(void 0,[4998,3064],(()=>r(6403)));a=r.O(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,