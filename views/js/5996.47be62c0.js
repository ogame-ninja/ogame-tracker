"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[5996],{5483:(e,t,n)=>{n.d(t,{c:()=>l});var o=n(9751),i=n(147),s=n(3418),r=n(6119),c=n(9681);function l(e){const t=Object.values(e.planets).filter((e=>!e.isMoon)),n=(0,o.a)(t.map((e=>e.id)),(()=>(0,o.a)(c.Vs,0))),l=(0,o.a)(s.p3,(t=>(0,i.g1)(e.lifeformExperience[t])));for(const o of t){if(o.activeLifeform==s.e5.none)continue;const e=l[o.activeLifeform],t=r.cQ[o.activeLifeform];for(const i of c.Vs){const s=t.reduce(((e,t)=>{const n=o.lifeformBuildings[t.type],s=t.getLifeformTechnologyBonus(i,n);return e+s}),0),r=e+s;n[o.id][i]=r}}return n}},147:(e,t,n)=>{n.d(t,{g1:()=>i,g4:()=>s,_Z:()=>r});const o=.001;function i(e){const t=s(e);return t*o}function s(e){for(let t=0;;t++){const n=r(t+1);if(n>e)return t}}function r(e){return 900*e*(e+1)/2}},205:(e,t,n)=>{n.r(t),n.d(t,{default:()=>k});var o=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("lifeform-planet-bonuses-component",{attrs:{technologyBonuses:e.technologyBonuses,types:e.bonusTypes,buildings:e.buildings,planets:e.planets,limits:e.limits,"research-bonus-breakdown-route-name":"lifeforms/bonus-breakdown/research-cost-time"}})},i=[],s=n(655),r=n(4028),c=n(2593),l=n(7848),a=n(7377),u=n(2816),f=n(6119),m=n(9751),p=n(8395),h=n(4846),g=n(5483),d=n(9681);let b=class extends r.w3{get bonusTypes(){return[{key:"cost",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.buildingCostTime.cost},{key:"time",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.buildingCostTime.time}]}buildings=f.ax.map((e=>e.type));get limits(){const e=d.Nw.intergalacticEnvoys,t=(0,l.K)({type:a.f.TechCostReduction,tech:e}),n=(0,l.K)({type:a.f.TechTimeReduction,tech:e});return{cost:e=>null!=t?Math.max(e,-t):e,time:e=>null!=n?Math.max(e,-n):e}}techs=h.LN;get technologyBonuses(){const e=d.Nw.intergalacticEnvoys,t=["cost","time"],n=(0,m.a)(t,(()=>0)),o=(0,g.c)(p.p.empire);return this.empirePlanets.forEach((i=>{this.techs.filter((e=>i.activeLifeformTechnologies.includes(e.type))).forEach((s=>t.forEach((t=>{const r=s.getResearchCostAndTimeReduction(e,i.lifeformTechnologies[s.type])[t],c=o[i.id][s.type];n[t]+=-1*r*(1+c)}))))})),n}get empirePlanets(){return p.p.empire.planetOrder.map((e=>p.p.empire.planets[e])).filter((e=>!e.isMoon))}get planets(){return(0,m.r)(this.empirePlanets,(e=>e.id),(e=>{const t=u.IU[e.activeLifeform].filter((e=>this.buildings.includes(e))),n=(0,m.a)(["cost","time"],(n=>(0,m.a)(t,(t=>-1*f.ry[t].getLifeformTechnologyResearchCostAndTimeReduction(e.lifeformBuildings[t])[n]))));return{planet:e,bonusByBuilding:n}}))}};b=(0,s.gn)([(0,r.wA)({components:{LifeformPlanetBonusesComponent:c.Z}})],b);const y=b,T=y;var v=n(1001),B=(0,v.Z)(T,o,i,!1,null,null,null);const k=B.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,