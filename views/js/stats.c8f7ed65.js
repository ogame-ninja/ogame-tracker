(()=>{"use strict";var e={4384:(e,t,a)=>{a.d(t,{_N:()=>c,vY:()=>u,gn:()=>p,DI:()=>f});var n=a(6531),o=a(6538),i=a(2927);const s={};async function r(e,t){let a=s[e];if(null==a){s[e]=a=(0,n.X3)(e,i.J,{upgrade:t});const o=await a;o.addEventListener("close",(t=>delete s[e]))}return await a}function l(e){return e.serverId<=0&&(0,o.A)("Server ID is 0 or less"),e.playerId<=0&&(0,o.A)("Player ID is 0 or less"),`s${e.serverId}-${e.language}-${e.playerId}`}async function c(e){const t=l(e);return await r(t,((e,t,a,n)=>{t<1&&(e.createObjectStore("combatReports",{keyPath:"id"}),e.createObjectStore("debrisFieldReports",{keyPath:"id"}),e.createObjectStore("expeditions",{keyPath:"id"}),e.createObjectStore("empire")),t<3&&e.createObjectStore("universeSpecificSettings"),t<7&&e.createObjectStore("lifeformDiscoveries",{keyPath:"id"}),t<8&&e.createObjectStore("combatReports.ignored")}))}function d(e){return e.serverId<=0&&(0,o.A)("Server ID is 0 or less"),`s${e.serverId}-${e.language}`}async function u(e){const t=d(e);return await r(t,((e,t,a,n)=>{t<1&&e.createObjectStore("serverSettings")}))}function m(e){return e.serverId<=0&&(0,o.A)("Server ID is 0 or less"),`s${e.serverId}-${e.language}.universeHistory`}async function p(e){const t=m(e);return await r(t,((e,t,a,n)=>{t<1&&(e.createObjectStore("_lastUpdate"),e.createObjectStore("alliances",{keyPath:"id"}),e.createObjectStore("allianceTags",{keyPath:["allianceId","date"]}).createIndex("allianceId","allianceId"),e.createObjectStore("allianceNames",{keyPath:["allianceId","date"]}).createIndex("allianceId","allianceId"),e.createObjectStore("allianceMembers",{keyPath:["allianceId","date"]}).createIndex("allianceId","allianceId"),e.createObjectStore("allianceStates",{keyPath:["allianceId","date"]}).createIndex("allianceId","allianceId"),e.createObjectStore("allianceScores",{keyPath:["allianceId","date","type"]}).createIndex("allianceId","allianceId"),e.createObjectStore("players",{keyPath:"id"}),e.createObjectStore("playerNames",{keyPath:["playerId","date"]}).createIndex("playerId","playerId"),e.createObjectStore("playerStates",{keyPath:["playerId","date"]}).createIndex("playerId","playerId"),e.createObjectStore("playerAlliances",{keyPath:["playerId","date"]}).createIndex("playerId","playerId"),e.createObjectStore("playerScores",{keyPath:["playerId","date","type"]}).createIndex("playerId","playerId"),e.createObjectStore("planets",{keyPath:"id"}).createIndex("playerId","playerId"),e.createObjectStore("planetNames",{keyPath:["planetId","date"]}).createIndex("planetId","planetId"),e.createObjectStore("planetStates",{keyPath:["planetId","date"]}).createIndex("planetId","planetId"),e.createObjectStore("planetCoordinates",{keyPath:["planetId","date"]}).createIndex("planetId","planetId"),e.createObjectStore("moons",{keyPath:"id"}).createIndex("planetId","planetId"),e.createObjectStore("moonNames",{keyPath:["moonId","date"]}).createIndex("moonId","moonId"),e.createObjectStore("moonStates",{keyPath:["moonId","date"]}).createIndex("moonId","moonId"))}))}const h="ogame-tracker";async function f(){return await r(h,((e,t,a,n)=>{t<1&&(e.createObjectStore("settings"),e.createObjectStore("accounts",{keyPath:["serverId","serverLanguage","id"]}),e.createObjectStore("servers",{keyPath:["id","language"]})),t<2&&n.objectStore("accounts").createIndex("server",["serverId","serverLanguage"])}))}},9563:(e,t,a)=>{a.d(t,{x:()=>o});var n=a(2057);const o=[n.g.lightFighter,n.g.heavyFighter,n.g.cruiser,n.g.battleship,n.g.bomber,n.g.battlecruiser,n.g.destroyer,n.g.reaper,n.g.pathfinder,n.g.smallCargo,n.g.largeCargo,n.g.espionageProbe]},5128:(e,t,a)=>{function n(...e){const t={metal:0,crystal:0,deuterium:0,energy:0};return e.forEach((e=>{t.metal+=e.metal,t.crystal+=e.crystal,t.deuterium+=e.deuterium,t.energy+=e.energy})),t}function o(e,t){return{metal:e.metal-t.metal,crystal:e.crystal-t.crystal,deuterium:e.deuterium-t.deuterium,energy:e.energy-t.energy}}function i(e,t){return{metal:e.metal*t,crystal:e.crystal*t,deuterium:e.deuterium*t,energy:e.energy*t}}function s(e,t){const a=i(e,t);return{metal:Math.round(a.metal),crystal:Math.round(a.crystal),deuterium:Math.round(a.deuterium),energy:Math.round(a.energy)}}function r(e,t){return{metal:e.metal*t.metal,crystal:e.crystal*t.crystal,deuterium:e.deuterium*t.deuterium,energy:e.energy*t.energy}}a.d(t,{aV:()=>n,mw:()=>o,fB:()=>i,Uj:()=>s,G0:()=>r})},6882:(e,t,a)=>{a.d(t,{Yr:()=>o,gW:()=>i});var n=a(874);function o(...e){console.error("[OGame Tracker]",...e)}function i(...e){console.debug("[OGame Tracker]",(0,n.Z)(Date.now(),"yyyy-MM-dd HH-mm-ss.SSS"),...e)}},9751:(e,t,a)=>{function n(e,t){const a={};return e.forEach((e=>a[e]=t instanceof Function?t(e):t)),a}function o(e,t,a){const n={};return e.forEach((e=>{const o=t(e);n[o]=a instanceof Function?a(e):a})),n}a.d(t,{a:()=>n,r:()=>o})},8540:(e,t,a)=>{a.d(t,{m:()=>n});const n={discordInviteLink:"https://discord.gg/MZE9FrCwRj",kofiLink:"https://ko-fi.com/ogametracker"}},4992:(e,t,a)=>{a.d(t,{t:()=>b});var n=a(655),o=a(1936),i=a(8717),s=a(4028),r=a(9119),l=a(3654),c=a(4384),d=a(3347),u=a(7331),m=a(9751),p=a(248),h=a(5128),f=a(9828);let y=class extends s.w3{dailyResults={};internal_firstDate=null;internal_count=0;_ready;_resolveReady;get ready(){return this._ready}get count(){return this.internal_count}get dailyResultsArray(){return Object.values(this.dailyResults)}async created(){this._ready=new Promise((e=>this._resolveReady=e)),this.initCommunication(),await this.loadData()}async loadData(){await this.$nextTick(),await f.z.ready;const e=f.z.currentAccount.linkedAccounts??[],t=e.map((e=>({playerId:e.id,language:e.serverLanguage,serverId:e.serverId,userLanguage:"doesnt-matter"}))),a=[i.l,...t];let n=null;for(const o of a){const e=await(0,c._N)(o),t=await e.getAll("combatReports");t.forEach((e=>{this.addCombatReportToDailyResult(e),n=Math.min(n??Number.MAX_SAFE_INTEGER,e.date)})),this.internal_firstDate=n}this._resolveReady()}addTimeout=void 0;addCombatReports=[];addCombatReportToDailyResult_delayed(e){this.addCombatReports.push(e),clearTimeout(this.addTimeout),this.addTimeout=setTimeout((()=>{const e=this.addCombatReports;this.addCombatReports=[],e.forEach((e=>this.addCombatReportToDailyResult(e)))}),500)}addCombatReportToDailyResult(e){this.internal_count++;const t=(0,r.Z)(e.date).getTime();let a=this.dailyResults[t];null==a&&(a=this.getNewDailyResult(t),this.$set(this.dailyResults,t,a)),e.isExpedition?a.results.onExpeditions[e.result]++:a.results.againstPlayers[e.result]++;const n=e.isExpedition?a.lostShips.onExpeditions:a.lostShips.againstPlayers;for(const o of p.GI){n.ships[o]+=e.lostShips[o];const t=p.lp[o],a=(0,h.fB)(t.cost,e.lostShips[o]);u.P.forEach((e=>n.resourceUnits[e]+=a[e]))}for(const o of u.P){const t=e.loot[o];a.loot.total[o]+=t,t<0?a.loot.lost[o]+=t:a.loot.gained[o]+=t}}getNewDailyResult(e){return{date:e,loot:{lost:(0,m.a)(u.P,0),gained:(0,m.a)(u.P,0),total:(0,m.a)(u.P,0)},lostShips:{onExpeditions:{ships:(0,m.a)(p.GI,0),resourceUnits:(0,m.a)(u.P,0)},againstPlayers:{ships:(0,m.a)(p.GI,0),resourceUnits:(0,m.a)(u.P,0)}},results:{onExpeditions:(0,m.a)(d.F,0),againstPlayers:(0,m.a)(d.F,0)}}}initCommunication(){chrome.runtime.onMessage.addListener((e=>this.onMessage(e)))}onMessage(e){const{type:t,ogameMeta:a}=e;if((0,l.i)(a,i.l))switch(t){case o.C.NewCombatReport:{const{data:t}=e;this.addCombatReportToDailyResult_delayed(t);break}}}get firstDay(){return(0,r.Z)(this.internal_firstDate??Date.now()).getTime()}async clear(){const e=await(0,c._N)(i.l);await e.clear("combatReports")}};y=(0,n.gn)([s.wA],y);const b=new y},5359:(e,t,a)=>{a.d(t,{J:()=>m});var n=a(655),o=a(1936),i=a(8717),s=a(4028),r=a(9119),l=a(3654),c=a(4384),d=a(9828);let u=class extends s.w3{dailyResults={};internal_firstDate=null;internal_count=0;internal_minId=0;_ready;_resolveReady;get ready(){return this._ready}get minId(){return this.internal_minId}get count(){return this.internal_count}get dailyResultsArray(){return Object.values(this.dailyResults)}async created(){this._ready=new Promise((e=>this._resolveReady=e)),this.initCommunication(),await this.loadData()}async loadData(){await this.$nextTick(),await d.z.ready;const e=d.z.currentAccount.linkedAccounts??[],t=e.map((e=>({playerId:e.id,language:e.serverLanguage,serverId:e.serverId,userLanguage:"doesnt-matter"}))),a=[i.l,...t];let n=null;for(const o of a){const e=await(0,c._N)(o),t=await e.getAll("debrisFieldReports");t.forEach((e=>{this.addDebrisFieldReportToDailyResult(e),n=Math.min(n??Number.MAX_SAFE_INTEGER,e.date)})),this.internal_firstDate=n}this._resolveReady()}addTimeout=void 0;addReports=[];addDebrisFieldReportToDailyResult_delayed(e){this.addReports.push(e),clearTimeout(this.addTimeout),this.addTimeout=setTimeout((()=>{const e=this.addReports;this.addReports=[],e.forEach((e=>this.addDebrisFieldReportToDailyResult(e)))}),500)}addDebrisFieldReportToDailyResult(e){this.internal_count++;const t=(0,r.Z)(e.date).getTime();let a=this.dailyResults[t];null==a&&(a=this.getNewDailyResult(t),this.$set(this.dailyResults,t,a)),a.total.metal+=e.metal,a.total.crystal+=e.crystal,a.total.deuterium+=e.deuterium??0,e.isExpeditionDebrisField?(a.expedition.metal+=e.metal,a.expedition.crystal+=e.crystal,a.expedition.deuterium+=e.deuterium??0):(a.normal.metal+=e.metal,a.normal.crystal+=e.crystal,a.normal.deuterium+=e.deuterium??0),this.internal_minId=Math.min(this.internal_minId,e.id)}getNewDailyResult(e){return{date:e,total:{metal:0,crystal:0,deuterium:0},normal:{metal:0,crystal:0,deuterium:0},expedition:{metal:0,crystal:0,deuterium:0}}}initCommunication(){chrome.runtime.onMessage.addListener((e=>this.onMessage(e)))}onMessage(e){const{type:t,ogameMeta:a}=e;if((0,l.i)(a,i.l))switch(t){case o.C.NewDebrisFieldReport:{const{data:t}=e;this.addDebrisFieldReportToDailyResult_delayed(t);break}}}get firstDay(){return(0,r.Z)(this.internal_firstDate??Date.now()).getTime()}async clear(){const e=await(0,c._N)(i.l);await e.clear("debrisFieldReports")}};u=(0,n.gn)([s.wA],u);const m=new u},8395:(e,t,a)=>{a.d(t,{p:()=>$});var n=a(655),o=a(1936),i=a(8717),s=a(4028),r=a(3654),l=a(4384),c=a(9867),d=a(602),u=a(1731),m=a(6538),p=a(6864),h=a(1913),f=a(2057),y=a(248),b=a(2382),g=a(1628),v=a(8043),w=a(329),x=a(9751),k=a(2816),I=a(9681),C=a(3418),S=a(6903);class R{}class _ extends R{get cost(){return{metal:8e3,crystal:0,deuterium:2e3,energy:0}}get baseHull(){return 8e3}get baseShield(){return 1}get baseDamage(){return 1}}const N=new _;class P extends R{get cost(){return{metal:12500,crystal:2500,deuterium:1e4,energy:0}}get baseHull(){return 12e3}get baseShield(){return 1}get baseDamage(){return 12e3}}const A=new P;var D;(function(e){e[e["antiBallisticMissile"]=502]="antiBallisticMissile",e[e["interplanetaryMissile"]=503]="interplanetaryMissile"})(D||(D={}));const z=[D.antiBallisticMissile,D.interplanetaryMissile];D.antiBallisticMissile,D.interplanetaryMissile;let T=class extends s.w3{empire=null;_ready;_resolveReady;loading=0;lock=new v.Lock;get ready(){return this._ready}get lifeformExperience(){const e=S.F.lifeforms;return(0,x.a)(C.p3,(t=>Math.max(this.empire.lifeformExperience[t],e[t].gainedExperience)))}async created(){this._ready=new Promise((e=>this._resolveReady=e)),this.initCommunication(),await this.loadData()}initCommunication(){chrome.runtime.onMessage.addListener((async e=>await this.onMessage(e)))}async loadData(){if(this.loading++,this.loading>1)return;await this.lock.acquire(),await(0,w.g)(200);const e=await(0,l._N)(i.l),t=e.transaction("empire","readonly"),a=t.objectStore("empire"),n=await a.get("allianceClass")??c.Ck.none,o=await a.get("playerClass")??d.D0.none,s=await a.get("officers")??{admiral:!1,commander:!1,engineer:!1,geologist:!1,technocrat:!1},r=await a.get("research")??(0,x.a)(u.N,0),v=await a.get("planetOrder")??[],S=await a.get("lifeformExperience")??(0,x.a)(C.p3,0),R={},_=await a.getAllKeys();for(const i of v){const e=_.includes(`moon.${i}`);if(!e&&!_.includes(`planet.${i}`))throw new Error("something went wrong here, id for planet found but no planet data known");if(e){const e=await a.get(`moon.${i}`)??(0,m.A)("no basic moon data found"),t=await a.get(`moon.${i}.buildings`)??(0,x.a)(h.RP,0),n=await a.get(`moon.${i}.ships`)??(0,x.a)(y.GI,0),o=await a.get(`moon.${i}.defenses`)??{...(0,x.a)(g.Q,0),[b.r.smallShieldDome]:!1,[b.r.largeShieldDome]:!1},s=await a.get(`moon.${i}.activeItems`)??{},r={isMoon:!0,...e,buildings:t,ships:n,defense:o,activeItems:s};R[i]=r}else{const e=await a.get(`planet.${i}`)??(0,m.A)("no basic planet data found"),t=await a.get(`planet.${i}.buildings`)??(0,x.a)(h.Ne,0),n=await a.get(`planet.${i}.ships`)??(0,x.a)(y.GI,0),s=await a.get(`planet.${i}.defenses`)??{...(0,x.a)(g.Q,0),[b.r.smallShieldDome]:!1,[b.r.largeShieldDome]:!1},r=await a.get(`planet.${i}.missiles`)??(0,x.a)(z,0),l=await a.get(`planet.${i}.activeItems`)??{},c=await a.get(`planet.${i}.productionSettings`)??{[p.A.metalMine]:100,[p.A.crystalMine]:100,[p.A.deuteriumSynthesizer]:100,[p.A.solarPlant]:100,[p.A.fusionReactor]:100,[f.g.solarSatellite]:100,[f.g.crawler]:o==d.D0.collector?150:100},u=await a.get(`planet.${i}.lifeform`)??C.e5.none,v=await a.get(`planet.${i}.lifeformBuildings`)??(0,x.a)(k.YS,0),w=await a.get(`planet.${i}.lifeformTechnologies`)??(0,x.a)(I.Vs,0),S=await a.get(`planet.${i}.activeLifeformTechnologies`)??[],_={isMoon:!1,...e,buildings:t,ships:n,defense:s,missiles:r,activeItems:l,productionSettings:c,activeLifeform:u,lifeformBuildings:v,lifeformTechnologies:w,activeLifeformTechnologies:S};R[i]=_}}const N=await a.get("fleets")??[];this.empire={allianceClass:n,playerClass:o,officers:s,research:r,planetOrder:v,planets:R,lifeformExperience:S,fleets:N},this._resolveReady(),this.loading=0,this.lock.release()}async onMessage(e){const{type:t,ogameMeta:a}=e;if((0,r.i)(a,i.l))switch(t){case o.C.NotifyEmpireDataUpdate:await this.loadData();break}}async clear(){const e=await(0,l._N)(i.l);await e.clear("empire")}};T=(0,n.gn)([s.wA],T);const $=new T},7090:(e,t,a)=>{a.d(t,{m:()=>w});var n=a(655),o=a(9563),i=a(1936),s=a(8717),r=a(4028),l=a(9119),c=a(3654),d=a(4384),u=a(7331),m=a(5424),p=a(776),h=a(248),f=a(5128),y=a(9751),b=a(1745),g=a(9828);let v=class extends r.w3{dailyResults={};internal_firstDate=null;internal_count=0;_ready;_resolveReady;get ready(){return this._ready}get count(){return this.internal_count}get dailyResultsArray(){return Object.values(this.dailyResults)}async created(){this._ready=new Promise((async e=>this._resolveReady=e)),this.initCommunication(),await this.loadData()}async loadData(){await this.$nextTick();const e=await this.getRawData();let t=null;e.forEach((e=>{this.addExpeditionToDailyResult(e),t=Math.min(t??Number.MAX_SAFE_INTEGER,e.date)})),this.internal_firstDate=t,this._resolveReady()}async getRawData(){await g.z.ready;const e=g.z.currentAccount.linkedAccounts??[],t=e.map((e=>({playerId:e.id,language:e.serverLanguage,serverId:e.serverId,userLanguage:"doesnt-matter"}))),a=[s.l,...t],n=[];for(const o of a){const e=await(0,d._N)(o),t=await e.getAll("expeditions");n.push(...t)}return n}addTimeout=void 0;addExpos=[];addExpeditionToDailyResult_delayed(e){this.addExpos.push(e),clearTimeout(this.addTimeout),this.addTimeout=setTimeout((()=>{const e=this.addExpos;this.addExpos=[],e.forEach((e=>this.addExpeditionToDailyResult(e)))}),500)}addExpeditionToDailyResult(e){this.internal_count++;const t=(0,l.Z)(e.date).getTime();let a=this.dailyResults[t];null==a&&(a=this.getNewDailyResult(t),this.$set(this.dailyResults,t,a));const n={[m.r.aliens]:m.r.combat,[m.r.pirates]:m.r.combat}[e.type]??e.type;switch(a.events[n]++,a.depletion[e.depletion??"unknown"]++,e.type){case m.r.resources:{const t=u.P.find((t=>e.resources[t]>0));a.eventSizes.resources[e.size]++;for(const n of u.P)a.findings.resources[n]+=e.resources[n];null!=t&&(a.eventSizes.resourceCount[t][e.size]++,a.findings.resourceCount[t]++);break}case m.r.darkMatter:a.eventSizes.darkMatter[e.size]++,a.findings.darkMatter+=e.darkMatter;break;case m.r.item:a.findings.items.push(e.itemHash);break;case m.r.fleet:a.eventSizes.fleet[e.size]++;for(const t of o.x){const n=e.fleet[t]??0;a.findings.fleet[t]+=n;const o=h.lp[t],i=(0,f.fB)(o.cost,n);for(const e of u.P)a.findings.fleetResourceUnits[e]+=i[e]}break}}getNewDailyResult(e){return{date:e,events:(0,y.a)(m.A,0),eventSizes:{resources:(0,y.a)(p.Fg,0),resourceCount:(0,y.a)(u.P,(()=>(0,y.a)(p.Fg,0))),fleet:(0,y.a)(p.Fg,0),darkMatter:(0,y.a)(p.Fg,0)},findings:{darkMatter:0,items:[],fleet:(0,y.a)(o.x,0),fleetResourceUnits:(0,y.a)(u.P,0),resources:(0,y.a)(u.P,0),resourceCount:(0,y.a)(u.P,0)},depletion:{...(0,y.a)(b.R,0),unknown:0}}}initCommunication(){chrome.runtime.onMessage.addListener((e=>this.onMessage(e)))}onMessage(e){const{type:t,ogameMeta:a}=e;if((0,c.i)(a,s.l))switch(t){case i.C.NewExpedition:{const{data:t}=e;this.addExpeditionToDailyResult_delayed(t);break}}}get firstDay(){return(0,l.Z)(this.internal_firstDate??Date.now()).getTime()}async clear(){const e=await(0,d._N)(s.l);await e.clear("expeditions")}};v=(0,n.gn)([r.wA],v);const w=new v},6903:(e,t,a)=>{a.d(t,{F:()=>y});var n=a(655),o=a(1936),i=a(8717),s=a(4028),r=a(9119),l=a(3654),c=a(4384),d=a(9751),u=a(6105),m=a(3418),p=a(612),h=a(9828);let f=class extends s.w3{dailyResults={};lifeforms=(0,d.a)(m.p3,(e=>({discoveriesCount:0,gainedExperience:0})));internal_firstDate=null;internal_count=0;_ready;_resolveReady;get ready(){return this._ready}get count(){return this.internal_count}get dailyResultsArray(){return Object.values(this.dailyResults)}async created(){this._ready=new Promise((e=>this._resolveReady=e)),this.initCommunication(),await this.loadData()}getAccounts(){const e=h.z.currentAccount.linkedAccounts??[],t=e.map((e=>({playerId:e.id,language:e.serverLanguage,serverId:e.serverId,userLanguage:"doesnt-matter"}))),a=[i.l,...t];return a}async loadData(){await this.$nextTick(),await h.z.ready;const e=this.getAccounts();let t=null;for(const a of e){const e=await(0,c._N)(a),n=await e.getAll("lifeformDiscoveries");n.forEach((e=>{this.addLifeformDiscovery(e),t=Math.min(t??Number.MAX_SAFE_INTEGER,e.date)})),this.internal_firstDate=t}this._resolveReady()}async getRawData(){const e=[],t=this.getAccounts();for(const a of t){const t=await(0,c._N)(a),n=await t.getAll("lifeformDiscoveries");e.push(...n)}return e}addLifeformDiscovery(e){this.addLifeformDiscoveryToDailyResult(e),this.addLifeformDiscoveryToLifeformInfos(e)}addTimeout=void 0;addDiscoveries=[];addLifeformDiscovery_delayed(e){this.addDiscoveries.push(e),clearTimeout(this.addTimeout),this.addTimeout=setTimeout((()=>{const e=this.addDiscoveries;this.addDiscoveries=[],e.forEach((e=>this.addLifeformDiscovery(e)))}),500)}addLifeformDiscoveryToLifeformInfos(e){e.type==u.y.newLifeformFound?(this.lifeforms[e.lifeform].discoveredDate=e.date,this.lifeforms[e.lifeform].discoveriesCount++):e.type==u.y.knownLifeformFound&&(this.lifeforms[e.lifeform].discoveriesCount++,this.lifeforms[e.lifeform].gainedExperience+=e.experience)}addLifeformDiscoveryToDailyResult(e){this.internal_count++;const t=(0,r.Z)(e.date).getTime();let a=this.dailyResults[t];switch(null==a&&(a=this.getNewDailyResult(t),this.$set(this.dailyResults,t,a)),a.events[e.type]++,e.type){case u.y.knownLifeformFound:a.lifeformExperience[e.lifeform]+=e.experience;break;case u.y.newLifeformFound:a.foundLifeforms.push(e.lifeform);break;case u.y.artifacts:a.artifacts+=e.artifacts,a.artifactSizes[e.size]++;break}}getNewDailyResult(e){return{date:e,events:(0,d.a)(u.I,0),foundLifeforms:[],lifeformExperience:(0,d.a)(m.p3,0),artifacts:0,artifactSizes:(0,d.a)(p.b,0)}}initCommunication(){chrome.runtime.onMessage.addListener((e=>this.onMessage(e)))}onMessage(e){const{type:t,ogameMeta:a}=e;if((0,l.i)(a,i.l))switch(t){case o.C.NewLifeformDiscovery:{const{data:t}=e;this.addLifeformDiscovery_delayed(t);break}}}get firstDay(){return(0,r.Z)(this.internal_firstDate??Date.now()).getTime()}async clear(){const e=await(0,c._N)(i.l);await e.clear("lifeformDiscoveries")}};f=(0,n.gn)([s.wA],f);const y=new f},7076:(e,t,a)=>{a.d(t,{s:()=>d});var n=a(655),o=a(1936),i=a(8717),s=a(4028),r=a(3654),l=a(4384);let c=class extends s.w3{serverSettings=this.mapServerSettings();_ready;_resolveReady;get lastUpdate(){const e=this.serverSettings?.lastUpdate;return null==e?null:new Date(e)}get ready(){return this._ready}async created(){this._ready=new Promise((e=>this._resolveReady=e)),this.initCommunication(),await this.loadData()}initCommunication(){chrome.runtime.onMessage.addListener((async e=>await this.onMessage(e)))}mapServerSettings(e){return{lastUpdate:e?._lastUpdate??0,version:e?.version??"10.1.28",topScore:e?.topScore??0,speed:{economy:e?.speed??1,research:e?.researchDurationDivisor??1,fleet:{peaceful:e?.speedFleetPeaceful??1,war:e?.speedFleetWar??1,holding:e?.speedFleetHolding??1}},universe:{galaxies:{count:e?.galaxies??5,isDonut:e?.donutGalaxy??!0},systems:{count:e?.systems??499,isDonut:e?.donutSystem??!0}},darkMatterBonus:e?.darkMatterNewAcount??0,planetBonusFields:e?.bonusFields??0,combats:{debrisFieldFactors:{defense:e?.debrisFactorDef??0,ships:e?.debrisFactor??0},defenseRepairFactor:e?.repairFactor??.7,isAllianceCombatSystemEnabled:e?.acs??!0,isRapidfireEnabled:e?.rapidFire??!0,wreckfields:{isEnabled:e?.wfEnabled??!0,minLostPercentage:e?.wfMinimumLossPercentage??5,minLostResources:e?.wfMinimumRessLost??15e4,repairableBasePercentage:e?.wfBasicPercentageRepairable??45}},fleet:{deuteriumConsumptionFactor:e?.globalDeuteriumSaveFactor??1,hyperspaceCargoPercentageFactor:e?.cargoHyperspaceTechMultiplier??5,espionageProbeCargo:e?.probeCargo??0},marketplace:{isEnabled:e?.marketplaceEnabled??!1,offerTimeoutInDays:e?.marketplaceOfferTimeout??3,priceRanges:{upper:e?.marketplacePriceRangeUpper??.2,lower:e?.marketplacePriceRangeLower??.2},taxes:{default:e?.marketplaceTaxNormalUser??.2,admiral:e?.marketplaceTaxAdmiral??.1,canceledOffers:e?.marketplaceTaxCancelOffer??.2,unsoldOffers:e?.marketplaceTaxNotSold??.2},tradeRatios:{metal:e?.marketplaceBasicTradeRatioMetal??2.5,crystal:e?.marketplaceBasicTradeRatioCrystal??1.5,deuterium:e?.marketplaceBasicTradeRatioDeuterium??1}},resourceProduction:{productionFactorBonus:{crystal:{default:e?.resourceProductionIncreaseCrystalDefault??0,pos1:e?.resourceProductionIncreaseCrystalPos1??.4,pos2:e?.resourceProductionIncreaseCrystalPos2??.3,pos3:e?.resourceProductionIncreaseCrystalPos3??.2}}},playerClasses:{areEnabled:1==e?.characterClassesEnabled,crawlers:{energyComsumptionPerUnit:e?.resourceBuggyEnergyConsumptionPerUnit??50,maxProductionFactor:e?.resourceBuggyMaxProductionBoost??.5,productionBoostFactorPerUnit:e?.resourceBuggyProductionBoost??2e-4},reapers:{combatDebrisFieldMiningFactor:e?.combatDebrisFieldLimit??.25},collector:{bonusFleetSlots:e?.minerBonusAdditionalFleetSlots??0,bonusMarketplaceSlots:e?.minerBonusAdditionalMarketSlots??2,energyProductionFactorBonus:e?.minerBonusEnergy??.1,productionFactorBonus:e?.minerBonusResourceProduction??.25,tradingShips:{speedFactorBonus:e?.minerBonusFasterTradingShips??1,cargoCapacityFactorBonus:e?.minerBonusIncreasedCargoCapacityForTradingShips??.25},crawlers:{geologistActiveCrawlerFactorBonus:e?.minerBonusMaxCrawler??.1,isOverloadEnabled:e?.minerBonusOverloadCrawler??!0,productionFactorBonus:e?.minerBonusAdditionalCrawler??.5}},discoverer:{bonusExpeditionSlots:e?.explorerBonusAdditionalExpeditionSlots??2,researchSpeedFactor:e?.explorerBonusIncreasedResearchSpeed??.25,phalanxRangeFactorBonus:e?.explorerBonusPhalanxRange??.2,planetSizeFactorBonus:e?.explorerBonusLargerPlanets??.1,hasBonusPlunderForInactivePlayers:e?.explorerBonusPlunderInactive??!0,expeditions:{outcomeFactorBonus:e?.explorerBonusIncreasedExpeditionOutcome??.5,enemyFactorReduction:e?.explorerBonusExpeditionEnemyReduction??.5,maxItemsPerDay:e?.explorerUnitItemsPerDay??1}},general:{bonusFleetSlots:e?.warriorBonusAdditionalFleetSlots??2,bonusMoonFields:e?.warriorBonusAdditionalMoonFields??5,hasMorePreciseFleetSpeed:e?.warriorBonusFleetHalfSpeed??!0,hasAttackerWreckfield:e?.warriorBonusAttackerWreckfield??!0,combatShipSpeedFactorBonus:e?.warriorBonusFasterCombatShips??1,deuteriumConsumptionFactorReduction:e?.warriorBonusFuelConsumption??.25,recyclers:{cargoCapacityFactorBonus:e?.warriorBonusRecyclerCargoCapacity??.2,deuteriumConsumptionFactorReduction:e?.warriorBonusRecyclerFuelConsumption??0,speedFactorBonus:e?.warriorBonusFasterRecyclers??1}}},lifeforms:{enabled:e?.lifeformsEnabled??!1}}}async loadData(){const e=await(0,l.vY)(i.l),t=e.transaction("serverSettings","readonly"),a=t.objectStore("serverSettings");let n={};const o=await a.getAllKeys();for(const i of o){const e=await a.get(i);n={...n,[i]:e}}this.serverSettings=this.mapServerSettings(n),this._resolveReady()}async onMessage(e){const{type:t,ogameMeta:a}=e;if((0,r.i)(a,i.l,!1))switch(t){case o.C.NotifyServerSettingsUpdate:await this.loadData();break}}async clear(){const e=await(0,l.vY)(i.l);await e.clear("serverSettings")}};c=(0,n.gn)([s.wA],c);const d=new c},5038:(e,t,a)=>{a.d(t,{z:()=>c});var n=a(655),o=a(4384),i=a(7545),s=a(4028),r=a(8717);let l=class extends s.w3{_ready;_resolveReady;get ready(){return this._ready}players=[];alliances=[];async created(){this._ready=new Promise((e=>this._resolveReady=e)),await this.loadPlayers(),await this.loadAlliances(),this._resolveReady()}async loadPlayers(){const e=await(0,o.gn)(r.l),t=e.transaction("playerNames","readonly"),a=t.objectStore("playerNames"),n={},s={};let l=await a.openCursor();while(null!=l){const{playerId:e,name:t,date:a}=l.value;e in s&&s[e]>=a?l=await l.continue():(n[e]=t,s[e]=a,l=await l.continue())}const c=Object.keys(n).map((e=>(0,i.Y)(e,10))).map((e=>({id:e,name:n[e]})));this.players.push(...c)}async loadAlliances(){const e=await(0,o.gn)(r.l),t=e.transaction(["allianceNames","allianceTags"],"readonly"),a=t.objectStore("allianceNames"),n={},s={};let l=await a.openCursor();while(null!=l){const{allianceId:e,name:t,date:a}=l.value;e in s&&s[e]>=a?l=await l.continue():(n[e]=t,s[e]=a,l=await l.continue())}const c=t.objectStore("allianceTags"),d={},u={};let m=await c.openCursor();while(null!=m){const{allianceId:e,tag:t,date:a}=m.value;e in u&&u[e]>=a?m=await m.continue():(d[e]=t,u[e]=a,m=await m.continue())}const p=Object.keys(n).map((e=>(0,i.Y)(e,10))).map((e=>({id:e,name:n[e],tag:d[e]})));this.alliances.push(...p)}async getPlayerScoreHistory(e){const t=[],a=await(0,o.gn)(r.l),n=a.transaction("playerScores","readonly"),i=n.objectStore("playerScores"),s=i.index("playerId");for(const o of e){let e=await s.openCursor(o);while(null!=e)t.push(e.value),e=await e.continue()}return t.sort(((e,t)=>e.date-t.date))}async getPlayerAllianceHistory(e){const t=[],a=await(0,o.gn)(r.l),n=a.transaction("playerAlliances","readonly"),i=n.objectStore("playerAlliances"),s=i.index("playerId");let l=await s.openCursor(e);while(null!=l)t.push(l.value),l=await l.continue();return t.sort(((e,t)=>e.date-t.date))}async getPlayerNameHistory(e){const t=[],a=await(0,o.gn)(r.l),n=a.transaction("playerNames","readonly"),i=n.objectStore("playerNames"),s=i.index("playerId");let l=await s.openCursor(e);while(null!=l)t.push(l.value),l=await l.continue();return t.sort(((e,t)=>e.date-t.date))}async getPlayerStateHistory(e){const t=[],a=await(0,o.gn)(r.l),n=a.transaction("playerStates","readonly"),i=n.objectStore("playerStates"),s=i.index("playerId");let l=await s.openCursor(e);while(null!=l)t.push(l.value),l=await l.continue();return t.sort(((e,t)=>e.date-t.date))}async getNumberOfTotalEntries(){const e=await(0,o.gn)(r.l),t=await e.count("allianceMembers")+await e.count("allianceNames")+await e.count("allianceScores")+await e.count("allianceStates")+await e.count("allianceTags")+await e.count("alliances")+await e.count("moonNames")+await e.count("moonStates")+await e.count("moons")+await e.count("planetCoordinates")+await e.count("planetNames")+await e.count("planetStates")+await e.count("planets")+await e.count("playerAlliances")+await e.count("playerNames")+await e.count("playerScores")+await e.count("playerStates")+await e.count("players");return t}async getAllianceScoreHistory(e){const t=[],a=await(0,o.gn)(r.l),n=a.transaction("allianceScores","readonly"),i=n.objectStore("allianceScores"),s=i.index("allianceId");for(const o of e){let e=await s.openCursor(o);while(null!=e)t.push(e.value),e=await e.continue()}return t.sort(((e,t)=>e.date-t.date))}async deleteCurrentServer(){const e=await(0,o.gn)(r.l),t=["_lastUpdate","allianceMembers","allianceNames","allianceScores","allianceStates","allianceTags","alliances","moonNames","moonStates","moons","planetCoordinates","planetNames","planetStates","planets","playerAlliances","playerNames","playerScores","playerStates","players"],a=e.transaction(t,"readwrite");for(const n of t){const e=a.objectStore(n);await e.clear()}}async getPlayerPlanetsAndMoonsHistory(e){const t=await(0,o.gn)(r.l),a=["planetCoordinates","planetNames","planetStates","planets","moonNames","moonStates","moons"],n=t.transaction(a,"readonly"),i=[],s=n.objectStore("planets"),l=await s.index("playerId").getAll(e);for(const o of l){const e=await n.objectStore("planetCoordinates").index("planetId").getAll(o.id),t=await n.objectStore("planetNames").index("planetId").getAll(o.id),a=await n.objectStore("planetStates").index("planetId").getAll(o.id),s={id:o.id,playerId:o.playerId,coordinates:e,names:t,states:a,moons:[]},r=await n.objectStore("moons").index("planetId").getAll(o.id);for(const o of r){const e=await n.objectStore("moonNames").index("moonId").getAll(o.id),t=await n.objectStore("moonStates").index("moonId").getAll(o.id),a={id:o.id,size:o.size,names:e,states:t};s.moons.push(a)}i.push(s)}return i}async getAllianceTagHistory(e){const t=[],a=await(0,o.gn)(r.l),n=a.transaction("allianceTags","readonly"),i=n.objectStore("allianceTags"),s=i.index("allianceId");let l=await s.openCursor(e);while(null!=l)t.push(l.value),l=await l.continue();return t.sort(((e,t)=>e.date-t.date))}async getAllianceNameHistory(e){const t=[],a=await(0,o.gn)(r.l),n=a.transaction("allianceNames","readonly"),i=n.objectStore("allianceNames"),s=i.index("allianceId");let l=await s.openCursor(e);while(null!=l)t.push(l.value),l=await l.continue();return t.sort(((e,t)=>e.date-t.date))}async getAllianceMemberHistory(e){const t=[],a=await(0,o.gn)(r.l),n=a.transaction("allianceMembers","readonly"),i=n.objectStore("allianceMembers"),s=i.index("allianceId");let l=await s.openCursor(e);while(null!=l)t.push(l.value),l=await l.continue();return t.sort(((e,t)=>e.date-t.date))}async getLatestPlayerNamesById(){const e={},t=await(0,o.gn)(r.l),a=t.transaction(["playerNames","players"],"readonly"),n=a.objectStore("players"),i=await n.getAll(),s=a.objectStore("playerNames"),l=s.index("playerId");for(const o of i){const t=await l.openCursor(o.id,"prev");if(null==t){e[o.id]=o.id.toString(),console.warn(`failed to open cursor for player ${o.id}`);continue}const{playerId:a,name:n}=t.value;e[a]=n}return e}};l=(0,n.gn)([s.wA],l);const c=new l},9828:(e,t,a)=>{a.d(t,{z:()=>b});var n=a(655),o=a(4028),i=a(4384),s=a(8717),r=a(4992),l=a(6531),c=a(2809),d=a(1936),u=a(5038),m=a(7090),p=a(5359),h=a(8395),f=a(7076);let y=class extends o.w3{_ready;_resolveReady;accounts=[];servers=[];async created(){this._ready=new Promise((e=>this._resolveReady=e)),await this.loadData()}get ready(){return this._ready}get currentAccount(){const e=(e,t)=>e.serverId==t.serverId&&e.serverLanguage==t.language&&e.id==t.playerId,t=this.accounts.find((t=>e(t,s.l)));return null==t?{serverId:s.l.serverId,serverLanguage:s.l.language,id:s.l.playerId,name:s.l.playerId.toString()}:(t.linkedAccounts=(t.linkedAccounts??[]).filter((t=>!e(t,s.l))),t)}get currentServer(){const e=this.servers.find((e=>e.id==s.l.serverId&&e.language==s.l.language));return e??{id:s.l.serverId,language:s.l.language,name:s.l.serverId.toString()}}async loadData(){const e=await(0,i.DI)(),t=e.transaction(["accounts","servers"],"readonly");this.accounts=await t.objectStore("accounts").getAll(),this.servers=await t.objectStore("servers").getAll(),await t.done,this._resolveReady()}async deleteCurrentAccount(){await r.t.clear(),await m.m.clear(),await p.J.clear(),await h.p.clear();const e=await(0,i.DI)();await e.delete("accounts",[s.l.serverId,s.l.language,s.l.playerId]);const t=await e.countFromIndex("accounts","server",[s.l.serverId,s.l.language]);t>0||(await f.s.clear(),await u.z.deleteCurrentServer(),await e.delete("servers",[s.l.serverId,s.l.language]))}async linkAccount(e){const t=this.currentAccount;console.debug("linking account ",e,"with",t),null==t.linkedAccounts&&o.w3.set(t,"linkedAccounts",[]);const a=t.linkedAccounts.some((t=>t.id==e.id&&t.serverId==e.serverId&&t.serverLanguage==e.serverLanguage));if(a)return;t.linkedAccounts.push(e);const n=await(0,i.DI)(),s=n.transaction(["accounts"],"readwrite");await s.objectStore("accounts").put(t),await s.done,console.debug("successfully linked account ",e,"with",t)}async unlinkAccount(e){const t=this.currentAccount;null==t.linkedAccounts&&o.w3.set(t,"linkedAccounts",[]);const a=t.linkedAccounts.findIndex((t=>t.id==e.id&&t.serverId==e.serverId&&t.serverLanguage==e.serverLanguage));a>=0&&t.linkedAccounts.splice(a,1);const n=await(0,i.DI)(),s=n.transaction(["accounts"],"readwrite");await s.objectStore("accounts").put(t),await s.done}sendDropConnectionsMessage(){const e={ogameMeta:s.l,type:d.C.DropDatabaseConnections,senderUuid:s.g};(0,c.b)(e)}async deleteEverything(){this.sendDropConnectionsMessage();const e=await indexedDB.databases();for(const t of e)null!=t.name&&await(0,l.Lj)(t.name)}};y=(0,n.gn)([o.wA],y);const b=new y},1486:(e,t,a)=>{a(7402),a(5524);var n=a(144),o=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("span",{staticClass:"checkbox",class:{disabled:e.disabled},on:{click:function(t){return e.onClick(t)}}},[a("span",{staticClass:"checkmark"},[a("span",{staticClass:"mdi",class:e.checked?"mdi-checkbox-blank":"mdi-checkbox-blank-outline",style:{color:e.color}}),e.checked?a("span",{staticClass:"check-icon mdi mdi-check",style:{color:e.checkColor}}):e._e()]),null!=e.$slots.label?a("span",[e._t("label")],2):null!=e.label?a("span",{domProps:{textContent:e._s(e.label)}}):e._e()])},i=[],s=a(655),r=a(4028);let l=class extends r.w3{checked;disabled;color;checkColor;label;onClick(e){this.checked=!this.checked,this.$emit("input-extended",{value:this.checked,shift:e.shiftKey,ctrl:e.ctrlKey,alt:e.altKey})}};(0,s.gn)([(0,r.Ey)({required:!0,type:Boolean})],l.prototype,"checked",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:Boolean})],l.prototype,"disabled",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:String,default:()=>null})],l.prototype,"color",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:String,default:()=>null})],l.prototype,"checkColor",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:String,default:()=>null})],l.prototype,"label",void 0),l=(0,s.gn)([(0,r.wA)({})],l);const c=l,d=c;var u=a(1001),m=(0,u.Z)(d,o,i,!1,null,"e4c46e76",null);const p=m.exports;var h=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("button",{staticClass:"checkbox-button",style:{"--color":e.getRGBString(e.checked?e.color:e.uncheckedColor)},on:{click:function(t){e.checked=!e.checked}}},[null!=e.$scopedSlots.default?e._t("default"):a("span",{domProps:{textContent:e._s(e.label)}})],2)},f=[],y=a(7048);let b=class extends r.w3{checked;color;uncheckedColor;label;getRGBString=y.U};(0,s.gn)([(0,r.Ey)({required:!0,type:Boolean})],b.prototype,"checked",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:String,default:()=>null})],b.prototype,"color",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:String,default:()=>"#666666"})],b.prototype,"uncheckedColor",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:String,default:()=>null})],b.prototype,"label",void 0),b=(0,s.gn)([(0,r.wA)({})],b);const g=b,v=g;var w=(0,u.Z)(v,h,f,!1,null,null,null);const x=w.exports;var k=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"dialog-wrapper"},[a("div",{staticClass:"dialog"},[a("div",{staticClass:"dialog-header",class:{"dialog-header--close":e.showClose}},[null!=e.$scopedSlots.header?a("div",[e._t("header")],2):a("span",{domProps:{textContent:e._s(e.header)}}),e.showClose?a("span",{staticClass:"close-dialog mdi mdi-close",on:{click:function(t){return e.$emit("close")}}}):e._e()]),a("div",{staticClass:"dialog-body"},[e._t("default")],2)])])},I=[];let C=class extends r.w3{showClose;header};(0,s.gn)([(0,r.fI)({required:!1,type:Boolean})],C.prototype,"showClose",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:String})],C.prototype,"header",void 0),C=(0,s.gn)([(0,r.wA)({})],C);const S=C,R=S;var _=(0,u.Z)(R,k,I,!1,null,"8a47fe52",null);const N=_.exports;var P=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("span",{staticClass:"floating-menu-wrapper",class:{"floating-menu-wrapper--active":e.show}},[e._t("activator"),a("div",{directives:[{name:"show",rawName:"v-show",value:e.show,expression:"show"}],staticClass:"floating-menu",class:{"floating-menu--left":e.left}},[e._t("default")],2)],2)},A=[];let D=class extends r.w3{show;left;mounted(){window.addEventListener("click",this.onMouseEvent),window.addEventListener("contextmenu",this.onMouseEvent),window.addEventListener("mouseup",this.onMouseEvent)}onMouseEvent(e){const t=e.composedPath();t.includes(this.$el)||(this.show=!1)}};(0,s.gn)([(0,r.Ey)({required:!0,type:Boolean})],D.prototype,"show",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:Boolean})],D.prototype,"left",void 0),D=(0,s.gn)([(0,r.wA)({})],D);const z=D,T=z;var $=(0,u.Z)(T,P,A,!1,null,"36371cbf",null);const E=$.exports;var L=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{ref:"element",staticClass:"grid-table",class:{"grid-table--sticky-header":null!=e.sticky,"grid-table--sticky-footer":e.stickyFooter,"grid-table--inline":e.inline,"grid-table--has-row-borders":e.rowBorders},style:{"grid-template-columns":e.gridColumns,"--grid-table--sticky-height":e.sticky},attrs:{role:"grid"},on:{scroll:function(t){return e.onScroll(t)}}},[e.noHeader?e._e():a("div",{staticClass:"grid-table-head",attrs:{role:"row"}},e._l(e.columns,(function(t,n){return a("div",{key:t.key,staticClass:"grid-table-cell",class:[t.headerClass,{first:0==n,last:n==e.columns.length-1}],style:t.style,attrs:{role:"columnheader"}},[e.getMatchingSlotNames("header-"+t.key).length>0?[e._l(e.getMatchingSlotNames("header-"+t.key),(function(a){return e._t(a.name,null,{match:a.match,label:t.label})}))]:a("span",{domProps:{textContent:e._s(t.label)}})],2)})),0),a("div",{staticClass:"grid-table-body",attrs:{role:"rowgroup"}},e._l(e.items,(function(t,n){return a("div",{directives:[{name:"show",rawName:"v-show",value:!e.hideRow(t),expression:"!hideRow(item)"}],key:n,staticClass:"grid-table-row",attrs:{role:"row"}},e._l(e.columns,(function(o){return a("div",{key:o.key,staticClass:"grid-table-cell",class:[e.cellClassProvider(t[o.key],t),o.class,{first:0==e.footerItems.length&&0==n,last:0==e.footerItems.length&&n==e.columns.length-1}],style:o.style,attrs:{role:"gridcell"}},[e.getMatchingSlotNames("cell-"+o.key).length>0?[e._l(e.getMatchingSlotNames("cell-"+o.key),(function(a){return e._t(a.name,null,{match:a.match,value:t[o.key],item:t,index:n})}))]:null!=o.formatter?a("span",{domProps:{textContent:e._s(o.formatter(t[o.key]))}}):a("span",{domProps:{textContent:e._s(t[o.key])}})],2)})),0)})),0),a("div",{staticClass:"grid-table-foot",attrs:{role:"rowgroup"}},e._l(e.footerItems,(function(t,n){return a("div",{key:n,staticClass:"grid-table-row",attrs:{role:"row"}},e._l(e.columns,(function(o,i){return a("div",{key:o.key,staticClass:"grid-table-cell",class:[o.footerClass,{first:0==i,last:i==e.columns.length-1}],style:o.style,attrs:{role:"gridcell"}},[e.getMatchingSlotNames("footer-"+o.key).length>0?[e._l(e.getMatchingSlotNames("footer-"+o.key),(function(a){return e._t(a.name,null,{match:a.match,value:t[o.key],item:t,index:n})}))]:null!=o.formatter?a("span",{domProps:{textContent:e._s(o.formatter(t[o.key]))}}):a("span",{domProps:{textContent:e._s(t[o.key])}})],2)})),0)})),0)])},M=[];let F=class extends r.w3{columns;items;noHeader;inline;footerItems;cellClassProvider;sticky;stickyFooter;hideRow;rowBorders;get gridColumns(){return this.columns.map((e=>e.size??"auto")).join(" ")}tableElement;onScroll(e){const t=this.tableElement,a={x:{max:t.scrollWidth-t.clientWidth,current:t.scrollLeft},y:{max:t.scrollHeight-t.clientHeight,current:t.scrollTop}};this.$emit("scroll",a)}getMatchingSlotNames(e){return Object.keys(this.$scopedSlots).map((t=>({name:t,match:e.match(`^${t}$`)}))).filter((e=>null!=e.match))}};(0,s.gn)([(0,r.fI)({required:!0,type:Array})],F.prototype,"columns",void 0),(0,s.gn)([(0,r.fI)({required:!0,type:Array})],F.prototype,"items",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:Boolean})],F.prototype,"noHeader",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:Boolean})],F.prototype,"inline",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:Array,default:()=>[]})],F.prototype,"footerItems",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:Function,default:()=>""})],F.prototype,"cellClassProvider",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:String,default:null})],F.prototype,"sticky",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:Boolean,default:!1})],F.prototype,"stickyFooter",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:Function,default:()=>!1})],F.prototype,"hideRow",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:Boolean})],F.prototype,"rowBorders",void 0),(0,s.gn)([(0,r.Rl)("element")],F.prototype,"tableElement",void 0),F=(0,s.gn)([(0,r.wA)({})],F);const B=F,j=B;var X=(0,u.Z)(j,L,M,!1,null,"a35a6de6",null);const V=X.exports;var O=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"nav-list",style:{overflow:e.showsAnyMenu?"visible":null}},e._l(e.items,(function(t,n){return a("floating-menu",{key:n,staticClass:"nav-list_floating-menu",attrs:{value:null!=e.rootRouteName&&1==e.showMenu[n]},on:{input:function(t){return e.$set(e.showMenu,n,t)}},scopedSlots:e._u([{key:"activator",fn:function(){return[a(null!=t.to?"router-link":"a",e._b({ref:"links",refInFor:!0,tag:"component",staticClass:"nav-list-item",class:t.class,attrs:{target:t.target,"active-class":"nav-list-item-active"}},"component",null!=t.href?{href:t.href}:{to:t.to},!1),[a("span",{domProps:{textContent:e._s(t.label)}}),e.isDefaultRoute(t.to)?a("span",{staticClass:"nav-list-item-home-icon mdi mdi-home"}):e._e()])]},proxy:!0}],null,!0)},[null!=e.rootRouteName?a("set-default-route-button",{attrs:{label:e.$i18n.$t.extension.settings.setDefaultSubRoute,rootRouteName:e.rootRouteName,routeName:t.to.name},on:{click:function(t){return e.$set(e.showMenu,n,!1)}}}):e._e()],1)})),1)},q=[],Z=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("button",{staticClass:"default-route-button",on:{click:function(t){return e.setDefaultRoute(t)}}},[a("span",{staticClass:"mdi mdi-home"}),a("span",{domProps:{textContent:e._s(e.label)}})])},G=[],U=a(6538),H=a(917);let W=class extends r.w3{label;routeName;rootRouteName;setDefaultRoute(e){H.V.updateSettings({...H.V.settings,defaultRoutes:{...H.V.settings.defaultRoutes,[this.rootRouteName]:this.routeName}});const t=this.$router.getRoutes().find((e=>e.name==this.rootRouteName))??(0,U.A)(`could not find route with name '${this.rootRouteName}'`);t.redirect={name:this.routeName},this.$emit("click",e)}};(0,s.gn)([(0,r.fI)({required:!0,type:String})],W.prototype,"label",void 0),(0,s.gn)([(0,r.fI)({required:!0,type:String})],W.prototype,"routeName",void 0),(0,s.gn)([(0,r.fI)({required:!0,type:String})],W.prototype,"rootRouteName",void 0),W=(0,s.gn)([(0,r.wA)({})],W);const K=W,Y=K;var J=(0,u.Z)(Y,Z,G,!1,null,"d04b062e",null);const Q=J.exports;let ee=class extends r.w3{items;rootRouteName;showMenu={};get showsAnyMenu(){return Object.values(this.showMenu).some((e=>e))}get defaultRouteName(){const e=this.$router.getRoutes(),t=e.find((e=>e.name==this.rootRouteName));if(t?.redirect instanceof Object)return t.redirect.name;throw new Error("route without default route!")}async mounted(){await this.$nextTick(),this.$refs.links.forEach(((e,t)=>{const a=e instanceof HTMLElement?e:e.$el;a.addEventListener("contextmenu",(e=>{e.preventDefault(),Object.keys(this.showMenu).forEach((e=>this.showMenu[parseInt(e)]=!1)),this.$set(this.showMenu,t,!0)}))}))}isDefaultRoute(e){if(null==this.rootRouteName)return!1;const t=H.V.settings.defaultRoutes[this.rootRouteName]??this.defaultRouteName;return t==e.name}};(0,s.gn)([(0,r.fI)({required:!0,type:Array})],ee.prototype,"items",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:String,default:()=>null})],ee.prototype,"rootRouteName",void 0),ee=(0,s.gn)([(0,r.wA)({components:{SetDefaultRouteButton:Q}})],ee);const te=ee,ae=te;var ne=(0,u.Z)(ae,O,q,!1,null,"6e521744",null);const oe=ne.exports;var ie=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"page"},[a("list-nav",{attrs:{items:e.navItems,"root-route-name":e.rootRouteName}}),a("div",{staticClass:"page-content"},[a("router-view")],1)],1)},se=[];let re=class extends r.w3{navItems;rootRouteName};(0,s.gn)([(0,r.fI)({required:!0,type:Array})],re.prototype,"navItems",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:String,default:()=>null})],re.prototype,"rootRouteName",void 0),re=(0,s.gn)([(0,r.wA)({})],re);const le=re,ce=le;var de=(0,u.Z)(ce,ie,se,!1,null,"39249af8",null);const ue=de.exports;var me=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"scrollable-chart",style:"--chart-x-translation: "+-e.leftX*e.width+"px"},[a("div",{staticClass:"chart-container",class:{"no-legend":e.noLegend}},[e.isReady?a("div",{staticClass:"chart-content"},[a("div",{ref:"svg-container",staticClass:"svg-container",on:{mouseleave:function(t){e.activeXNormalized=null}}},[e.internalDatasets.length>0?a("scrollable-chart-svg",{attrs:{width:e.width,height:e.height,activeXNormalized:e.activeXNormalized,xValuesNormalized:e.xValuesNormalized,xAxisTicksNormalized:e.xAxisTicksNormalized,maxXNormalized:e.maxXNormalized,yGridLines:e.yGridLines,reversedDatasets:e.reversedDatasets,showXValuesInGrid:e.showXValuesInGrid},on:{"update:activeXNormalized":function(t){e.activeXNormalized=t},"update:active-x-normalized":function(t){e.activeXNormalized=t}}}):e._e(),null!=e.activeXNormalized?a("div",{staticClass:"chart-tooltip",style:{"--x":e.activeXNormalized-e.leftX}},[a("div",{staticClass:"chart-tooltip-header",domProps:{textContent:e._s(e.xValueTooltipFormatter(e.activeX))}}),e._l(e.internalDatasets,(function(t){return a("div",{directives:[{name:"show",rawName:"v-show",value:t.visible,expression:"dataset.visible"}],key:"tooltip-"+t.key,staticClass:"chart-tooltip-item",class:{zero:0==e.getLastValue(t,e.activeXNormalized)}},[a("span",{staticClass:"chart-tooltip-item-color",style:{color:t.color}}),a("span",{staticClass:"chart-tooltip-item-value",domProps:{textContent:e._s(e.tooltipValueFormatter(e.getLastValue(t,e.activeXNormalized)))}}),a("span",{staticClass:"chart-tooltip-item-label",domProps:{textContent:e._s(t.label)}})])})),e.hasTooltipFooter?a("div",{staticClass:"chart-tooltip-footer"},[null!=e.tooltipFooterProvider?e._l(e.footerTexts,(function(t,n){return a("div",{key:"footer-texts-"+n,domProps:{textContent:e._s(t)}})})):e._t("tooltip-footer",null,{datasets:e.footerSlotDatasets})],2):e._e()],2):e._e()],1),a("div",{staticClass:"chart-y-axis"},e._l(e.yGridLines,(function(t,n){return a("div",{key:"y-grid-label-"+n,staticClass:"y-axis-label",style:{bottom:100*t.fraction+"%"},domProps:{textContent:e._s(e.$i18n.$n(n))}})})),0),a("scrollable-chart-x-axis-labels",{attrs:{width:e.width,maxXNormalized:e.maxXNormalized,xAxisTicks:e.xAxisTicks,xAxisTicksNormalized:e.xAxisTicksNormalized,xLabelFormatter:e.xLabelFormatter}})],1):e._e(),e.noLegend?e._e():a("div",{staticClass:"chart-legend"},e._l(e.internalDatasets,(function(t){return a("div",{key:"legend-item-"+t.key,staticClass:"legend-item",class:{"legend-item-hidden":!t.visible},on:{click:function(a){return e.toggleVisibility(t)}}},[a("div",{staticClass:"legend-item-color",style:{color:t.color}}),a("div",{staticClass:"legend-item-label",domProps:{textContent:e._s(t.label)}})])})),0),a("div",{ref:"scrollbar-container",staticClass:"scrollbar-container",on:{scroll:function(t){return e.updateTickOffset()}}},[a("div",{style:{width:100*(e.xRange.max-e.xRange.min)/(e.tickInterval*e.visibleTickCount)+"%"}})])])])},pe=[],he=a(1821),fe=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("svg",[a("g",{staticClass:"translation-group"},[a("g",{staticClass:"grid-lines"},[e._l(e.xValuesNormalized,(function(t){return a("line",{directives:[{name:"show",rawName:"v-show",value:e.showXValuesInGrid||t==e.activeXNormalizedSync,expression:"showXValuesInGrid || x == activeXNormalizedSync"}],key:"x-tick-grid-"+t,staticClass:"x-tick-grid-line",class:{"x-tick-grid-line-active":t==e.activeXNormalizedSync},attrs:{x1:t*e.width,y1:0,x2:t*e.width,y2:e.height+10}})})),e._l(e.xAxisTicksNormalized,(function(t){return a("line",{key:"x-tick-line-"+t,staticClass:"x-grid-line",class:{"x-grid-line-active":t==e.activeXNormalizedSync},attrs:{x1:t*e.width,y1:0,x2:t*e.width,y2:e.height+10}})})),e._l(e.yGridLines,(function(t,n){return a("line",{key:"y-tick-line-"+n,staticClass:"y-grid-line",class:{"y-grid-line--first":0==n},attrs:{x1:-10,y1:t.svg,x2:e.width*e.maxXNormalized,y2:t.svg}})}))],2),a("g",{staticClass:"background-paths"},e._l(e.reversedDatasets,(function(e){return a("path",{directives:[{name:"show",rawName:"v-show",value:e.visible&&e.filled,expression:"dataset.visible && dataset.filled"}],key:"background-"+e.key,staticClass:"dataset-background",style:{fill:e.color},attrs:{d:e.paths.background}})})),0),a("g",{staticClass:"line-paths"},[e._l(e.reversedDatasets,(function(e){return a("path",{directives:[{name:"show",rawName:"v-show",value:e.visible,expression:"dataset.visible"}],key:"line-"+e.key,staticClass:"dataset-line",class:{"dataset-line--dashed":e.dashed},style:{stroke:e.color},attrs:{d:e.paths.line}})})),e._l(e.reversedDatasets,(function(e){return a("path",{directives:[{name:"show",rawName:"v-show",value:e.visible,expression:"dataset.visible"}],key:"line-average-"+e.key,staticClass:"dataset-line dataset-line--dashed",style:{stroke:e.color},attrs:{d:e.paths.averageLine}})}))],2),a("g",{staticClass:"points"},e._l(e.xValuesNormalized,(function(t,n){return a("g",{key:"point-group-"+t,staticClass:"dataset-point-group",on:{mouseenter:function(a){e.activeXNormalizedSync=t}}},[e._l(e.reversedDatasets,(function(n){return[null!=n.normalizedValuesByNormalizedX[t]&&0!=n.valuesByNormalizedX[t]?a("circle",{directives:[{name:"show",rawName:"v-show",value:n.visible&&!n.hidePoints,expression:"dataset.visible && !dataset.hidePoints"}],key:"point-"+n.key+"-"+t,staticClass:"dataset-point",style:{fill:n.color},attrs:{cx:t*e.width,cy:e.height*(1-n.normalizedValuesByNormalizedX[t])}}):e._e()]})),a("rect",{staticClass:"dataset-point-group-rect",attrs:{x:e.width*(t+(e.xValuesNormalized[n-1]||0))/2,y:"0",width:e.width*e.getRectWidth(n),height:e.height}})],2)})),0)])])},ye=[];let be=class extends r.w3{showXValuesInGrid;width;height;activeXNormalizedSync;maxXNormalized;xValuesNormalized;xAxisTicksNormalized;yGridLines;reversedDatasets;getRectWidth(e){const t=this.xValuesNormalized,a=t[e-1]??0,n=t[e],o=t[e+1]??this.maxXNormalized,i=(n-a)/2+(o-n)/2;return i}};(0,s.gn)([(0,r.fI)({required:!0,type:Boolean})],be.prototype,"showXValuesInGrid",void 0),(0,s.gn)([(0,r.fI)({required:!0,type:Number})],be.prototype,"width",void 0),(0,s.gn)([(0,r.fI)({required:!0,type:Number})],be.prototype,"height",void 0),(0,s.gn)([(0,r.vZ)("activeXNormalized",{required:!1,type:Number,default:()=>null})],be.prototype,"activeXNormalizedSync",void 0),(0,s.gn)([(0,r.fI)({required:!0,type:Number})],be.prototype,"maxXNormalized",void 0),(0,s.gn)([(0,r.fI)({required:!0,type:Array})],be.prototype,"xValuesNormalized",void 0),(0,s.gn)([(0,r.fI)({required:!0,type:Array})],be.prototype,"xAxisTicksNormalized",void 0),(0,s.gn)([(0,r.fI)({required:!0,type:Object})],be.prototype,"yGridLines",void 0),(0,s.gn)([(0,r.fI)({required:!0,type:Array})],be.prototype,"reversedDatasets",void 0),be=(0,s.gn)([(0,r.wA)({})],be);const ge=be,ve=ge;var we=(0,u.Z)(ve,fe,ye,!1,null,"adc96e86",null);const xe=we.exports;var ke=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"chart-x-axis"},[a("div",{staticClass:"x-axis-labels",style:{width:e.maxXNormalized*e.width+"px"}},e._l(e.xAxisTicks,(function(t,n){return a("div",{key:"x-grid-label-"+t,staticClass:"x-axis-label",style:{left:e.xAxisTicksNormalized[n]*e.width+"px"},domProps:{textContent:e._s(e.xLabelFormatter(t))}})})),0)])},Ie=[];let Ce=class extends r.w3{width;maxXNormalized;xAxisTicks;xAxisTicksNormalized;xLabelFormatter};(0,s.gn)([(0,r.fI)({required:!0,type:Number})],Ce.prototype,"width",void 0),(0,s.gn)([(0,r.fI)({required:!0,type:Number})],Ce.prototype,"maxXNormalized",void 0),(0,s.gn)([(0,r.fI)({required:!0,type:Array})],Ce.prototype,"xAxisTicks",void 0),(0,s.gn)([(0,r.fI)({required:!0,type:Array})],Ce.prototype,"xAxisTicksNormalized",void 0),(0,s.gn)([(0,r.fI)({required:!0,type:Function,default:e=>he.j.$n(e)})],Ce.prototype,"xLabelFormatter",void 0),Ce=(0,s.gn)([(0,r.wA)({})],Ce);const Se=Ce,Re=Se;var _e=(0,u.Z)(Re,ke,Ie,!1,null,"7b493bf2",null);const Ne=_e.exports;function Pe(e,t,a){for(let n=Math.min(t,e.length-1);n>=0;n--){const t=e[n];if(a(t))return t}return null}let Ae=class extends r.w3{svgContainer;scrollbarContainer;datasets;noLegend;showXValuesInGrid;continueLastValue;showZeroY;tickInterval;ticks;minTick;maxTick;tickList;xLabelFormatter;tooltipValueFormatter;tooltipFooterProvider;hideTooltipFooter;xLabelTooltipFormatter;internalDatasets=[];xRange={min:0,max:0};yRange={min:0,max:0};leftX=0;activeXNormalized=null;yGridRange={min:0,max:0};yGridLines={};isReady=!1;resizeObserver=new ResizeObserver((()=>this.onResize()));get hasTooltipFooter(){return!this.hideTooltipFooter&&(null!=this.tooltipFooterProvider||this.footerSlotDatasets.length>0&&null!=this.$scopedSlots["tooltip-footer"])}getLastValue(e,t){const a=this.xValuesNormalized,n=a.indexOf(t);for(let o=n;o>=0;o--){const t=e.originalValuesByNormalizedX[a[o]];if(null!=t)return t}return 0}get xValueTooltipFormatter(){return this.xLabelTooltipFormatter??this.xLabelFormatter}get activeX(){return null==this.activeXNormalized?null:this.xValuesByXNormalized[this.activeXNormalized]}get footerTexts(){const e=this.activeXNormalized;if(null==this.tooltipFooterProvider||null==e)return[];const t=this.internalDatasets.reduce(((t,a)=>{const n=a.originalValuesByNormalizedX[e];return null!=n&&(t[a.key]=n),t}),{}),a=this.tooltipFooterProvider(t);return a instanceof Array?a:[a]}get footerSlotDatasets(){return this.internalDatasets.map((e=>({key:e.key,label:e.label,visible:e.visible,color:e.color,value:e.originalValuesByNormalizedX[this.activeXNormalized??this.minTick??0]})))}async onDatasetsChanged(e,t){const a=this.datasets.map(((e,t)=>({...e,originalValuesByX:{},originalValuesByNormalizedX:{},valuesByX:{},valuesByNormalizedX:{},internalValues:[],normalizedValues:[],normalizedValuesByNormalizedX:{},normalizedAverage:null,paths:{line:"",averageLine:"",background:""},visible:!0})));this.internalDatasets=a,0!=this.internalDatasets.length&&(this.updateValues(),this.updateXAndYRange(),this.updateYGridLines(),this.updateNormalizedValues(),this.updatePaths())}get xAxisTicks(){if(null!=this.tickList)return this.tickList;const{min:e,max:t}=this.xRange,a=[];for(let n=e;n<=t;n+=this.tickInterval)a.push(n);return a}get xAxisTicksNormalized(){const{min:e}=this.xRange;return this.xAxisTicks.map((t=>(t-e)/(this.tickInterval*this.visibleTickCount)))}get xValues(){const e=new Set(this.internalDatasets.flatMap((e=>e.internalValues.map((e=>e.x)))));return[...e].sort(((e,t)=>e-t))}get xValuesNormalized(){return this.xValues.map((e=>(e-this.xRange.min)/(this.tickInterval*this.visibleTickCount)))}get xValuesByXNormalized(){const e={},t=this.xValues,a=this.xValuesNormalized;for(let n=0;n<t.length;n++)e[a[n]]=t[n];return e}get width(){return this.svgContainer?.clientWidth??0}get height(){return this.svgContainer?.clientHeight??0}updateYGridLines(){const e=this.yRange.max,t=this.yRange.min;if(t==e)return;const a=this.internalConfig.grid.y;let n=0,o={positive:0,negative:0};e:for(let l=1;;l*=a.stepFactor)for(let i of a.stepBases){let s=i*l;const r=Math.ceil(e/s),c=Math.ceil(-t/s),d=r+c;if(d>=a.minLines&&d<=a.maxLines){n=s,o={positive:r,negative:c};break e}}const i=this.height,s={},r=o.positive+o.negative;for(let l=0;l<=r;l++){const e=l-o.negative,t=n*e;s[t]={svg:i-i*l/r,fraction:l/r}}this.yGridLines=s,this.yGridRange={min:-o.negative*n,max:o.positive*n},this.yRange={min:Math.min(this.yRange.min,this.yGridRange.min),max:Math.max(this.yRange.max,this.yGridRange.max)}}updateXAndYRange(){const e={min:this.minTick??Number.MAX_SAFE_INTEGER,max:this.maxTick??Number.MIN_SAFE_INTEGER},t={min:this.showZeroY?0:Number.MAX_SAFE_INTEGER,max:Number.MIN_SAFE_INTEGER};this.internalDatasets.forEach((a=>{a.internalValues.forEach((a=>{e.min=Math.min(a.x,e.min),e.max=Math.max(a.x,e.max),t.min=Math.min(a.y,t.min),t.max=Math.max(a.y,t.max)}))})),this.xRange=e,this.yRange=t,this.yRange.max-this.yRange.min<this.internalConfig.grid.y.minLines&&(this.yRange.max=this.yRange.min+this.internalConfig.grid.y.minLines)}get reversedDatasets(){return[...this.internalDatasets].reverse()}get visibleTickCount(){return Math.min(this.ticks,Math.ceil((this.xRange.max-this.xRange.min)/this.tickInterval))}get maxXNormalized(){return(this.xRange.max-this.xRange.min)/(this.tickInterval*this.visibleTickCount)}updateValues(){this.internalDatasets.forEach((e=>{e.values.forEach((t=>e.valuesByX[t.x]=t.y))})),this.internalDatasets.forEach(((e,t,a)=>{const n=Pe(a,t-1,(e=>e.visible&&e.stack));e.values.forEach((t=>e.originalValuesByX[t.x]=t.y));const o=e.values.map(((t,a)=>{let{x:o,y:i}=t;return e.stack&&(i+=n?.valuesByX[o]??0),{x:o,y:i}}));e.internalValues=o,e.valuesByX=o.reduce(((e,t)=>(e[t.x]=t.y,e)),e.valuesByX)}))}updateNormalizedValues(){this.internalDatasets.forEach(((e,t,a)=>{const n=e.internalValues.map(((e,t)=>{let{x:a,y:n}=e;return a=(a-this.xRange.min)/(this.tickInterval*this.visibleTickCount),n=(n-this.yRange.min)/(this.yRange.max-this.yRange.min),{xNormalized:a,yNormalized:n,y:e.y}}));e.normalizedValues=n.map((e=>({x:e.xNormalized,y:e.yNormalized}))),null!=e.average&&(e.normalizedAverage=(e.average-this.yRange.min)/(this.yRange.max-this.yRange.min)),e.valuesByNormalizedX={},e.normalizedValuesByNormalizedX={},n.forEach((t=>{e.valuesByNormalizedX[t.xNormalized]=t.y,e.normalizedValuesByNormalizedX[t.xNormalized]=t.yNormalized})),Object.keys(e.originalValuesByX).map((e=>parseFloat(e))).forEach((t=>{const a=(t-this.xRange.min)/(this.tickInterval*this.visibleTickCount),n=e.originalValuesByX[t];e.originalValuesByNormalizedX[a]=n}))}))}toggleVisibility(e){e.visible=!e.visible,e.stack&&(this.updateValues(),this.updateNormalizedValues(),this.updatePaths())}onResize(){this.$forceCompute("width"),this.$forceCompute("height"),this.updateYGridLines(),this.updatePaths(),this.scrollbarContainer.scrollLeft=this.scrolledFraction*(this.scrollbarContainer.scrollWidth-this.scrollbarContainer.clientWidth)}updatePaths(){const e=this.width,t=-this.yRange.min/(this.yRange.max-this.yRange.min),a=this.computeSvgPathSegments([{x:0,y:t}],[{x:0,y:t}],!1)[0][0].y;this.internalDatasets=this.internalDatasets.map((n=>{const o=this.computeSvgPathSegments(n.normalizedValues,n.internalValues);if(this.continueLastValue&&n.normalizedValues[n.normalizedValues.length-1].x<this.maxXNormalized){const t=o[o.length-1];t.push({x:this.maxXNormalized*e,y:t[t.length-1].y})}const i=this.getSvgPath(o),s=`M 0 ${a} L${i.substring(1)} L ${e*this.maxXNormalized} ${a}`;let r="";if(null!=n.normalizedAverage){const a=this.computeSvgPathSegments([{x:0,y:n.normalizedAverage}],[{x:0,y:t}],!1)[0][0].y;r=`M 0 ${a} L ${e*this.maxXNormalized} ${a}`}const l={...n,paths:{line:i,averageLine:r,background:s}};return l}))}async mounted(){this.isReady=!0,await this.$nextTick(),this.resizeObserver.observe(this.svgContainer??(0,U.A)("svgContainer is null")),this.scrollbarContainer.scrollLeft=this.scrollbarContainer.scrollWidth-this.scrollbarContainer.clientWidth}destroyed(){this.resizeObserver.disconnect()}getSvgPath(e){const t=e.map((e=>e.map(((e,t)=>`${0==t?"M":"L"} ${e.x} ${e.y}`)).join(" ")));return t.join(" ")}computeSvgPathSegments(e,t,a=!0){const n=this.width,o=this.height,i=[];let s=[];for(let r=0;r<e.length;r++){const n=e[r],o=t[r],l=t[r+1],c=t[r-1];0==o.y&&a&&(0!=c?.y&&0!=(l?.y??0)||s.length>0&&(s.push(n),i.push(s),s=[])),0==o.y&&0==(l?.y??0)&&a||s.push(n)}return s.length&&i.push(s),i.map((e=>e.map((e=>{const t=n*e.x,a=o*(1-e.y);return{x:t,y:a}}))))}internalConfig={grid:{y:{minLines:5,maxLines:10,stepBases:[1,2,5],stepFactor:10}}};scrolledFraction=1;updateTickOffset(){if(null==this.scrollbarContainer)throw new Error("scrollbar container is null");this.scrolledFraction=this.scrollbarContainer.scrollLeft/(this.scrollbarContainer.scrollWidth-this.scrollbarContainer.clientWidth),this.leftX=(this.maxXNormalized-1)*this.scrolledFraction}};(0,s.gn)([(0,r.Rl)("svg-container")],Ae.prototype,"svgContainer",void 0),(0,s.gn)([(0,r.Rl)("scrollbar-container")],Ae.prototype,"scrollbarContainer",void 0),(0,s.gn)([(0,r.fI)({required:!0,type:Array})],Ae.prototype,"datasets",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:Boolean})],Ae.prototype,"noLegend",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:Boolean})],Ae.prototype,"showXValuesInGrid",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:Boolean})],Ae.prototype,"continueLastValue",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:Boolean,default:()=>!0})],Ae.prototype,"showZeroY",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:Number,default:()=>1})],Ae.prototype,"tickInterval",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:Number,default:()=>30})],Ae.prototype,"ticks",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:Number,default:()=>null})],Ae.prototype,"minTick",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:Number,default:()=>null})],Ae.prototype,"maxTick",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:Array,default:()=>null})],Ae.prototype,"tickList",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:Function,default:e=>he.j.$n(e)})],Ae.prototype,"xLabelFormatter",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:Function,default:e=>he.j.$n(e)})],Ae.prototype,"tooltipValueFormatter",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:Function,default:null})],Ae.prototype,"tooltipFooterProvider",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:Boolean,default:()=>!1})],Ae.prototype,"hideTooltipFooter",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:Function,default:null})],Ae.prototype,"xLabelTooltipFormatter",void 0),(0,s.gn)([(0,r.RL)("datasets",{immediate:!0})],Ae.prototype,"onDatasetsChanged",null),Ae=(0,s.gn)([(0,r.wA)({components:{ScrollableChartSvg:xe,ScrollableChartXAxisLabels:Ne}})],Ae);const De=Ae,ze=De;var Te=(0,u.Z)(ze,me,pe,!1,null,"3f57defe",null);const $e=Te.exports;var Ee=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"tab-view"},[a("header",{style:{"--tab-count":e.tabs.length}},e._l(e.tabs,(function(t,n){return a("floating-menu",{key:n,staticClass:"tab_floating-menu",attrs:{value:null!=e.rootRouteName&&1==e.showMenu[n]},on:{input:function(t){return e.$set(e.showMenu,n,t)}},scopedSlots:e._u([{key:"activator",fn:function(){return[a("router-link",{ref:"tabs",refInFor:!0,staticClass:"tab",attrs:{to:t.to,"active-class":"tab--active"}},[a("span",{staticClass:"tab-content"},[null!=t.label?a("span",{domProps:{textContent:e._s(t.label)}}):e._e(),e.isDefaultRoute(t.to)?a("span",{staticClass:"tab-item-home-icon mdi mdi-home"}):e._e()])])]},proxy:!0}],null,!0)},[null!=e.rootRouteName?a("set-default-route-button",{attrs:{label:e.$i18n.$t.extension.settings.setDefaultSubRoute,rootRouteName:e.rootRouteName,routeName:t.to.name},on:{click:function(t){return e.$set(e.showMenu,n,!1)}}}):e._e()],1)})),1),a("main",[a("keep-alive",[a("router-view")],1)],1)])},Le=[];let Me=class extends r.w3{showMenu={};tabs;rootRouteName;get defaultRouteName(){const e=this.$router.getRoutes(),t=e.find((e=>e.name==this.rootRouteName));if(t?.redirect instanceof Object)return t.redirect.name;throw new Error("route without default route!")}isDefaultRoute(e){if(null==this.rootRouteName)return!1;const t=H.V.settings.defaultRoutes[this.rootRouteName]??this.defaultRouteName;return t==e.name}async mounted(){await this.$nextTick(),this.$refs.tabs.forEach(((e,t)=>{const a=e.$el;a.addEventListener("contextmenu",(e=>{e.preventDefault(),Object.keys(this.showMenu).forEach((e=>this.showMenu[parseInt(e)]=!1)),this.$set(this.showMenu,t,!0)}))}))}};(0,s.gn)([(0,r.fI)({required:!0,type:Array,validator:e=>e.length>0})],Me.prototype,"tabs",void 0),(0,s.gn)([(0,r.fI)({required:!1,type:String,default:()=>null})],Me.prototype,"rootRouteName",void 0),Me=(0,s.gn)([(0,r.wA)({components:{SetDefaultRouteButton:Q}})],Me);const Fe=Me,Be=Fe;var je=(0,u.Z)(Be,Ee,Le,!1,null,"20ab21ba",null);const Xe=je.exports;var Ve=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"tabs"},[a("header",{style:{"--tab-count":e.tabs.length}},e._l(e.tabs,(function(t,n){return a("div",{key:n,staticClass:"tab",class:{"tab--active":t==e.activeTab},on:{click:function(a){return e.setActiveTab(t)}}},[a("span",{staticClass:"tab-content"},[a("span",{domProps:{textContent:e._s(t.label)}})])])})),0),a("main",[e._t("tab-content-"+e.activeTab.key)],2)])},Oe=[];let qe=class extends r.w3{tabs;activeTab=null;onTabsChanged(){this.tabs.includes(this.activeTab)||this.setActiveTab(this.tabs[0])}setActiveTab(e){this.activeTab=e,this.$emit("tab-selected",e)}};(0,s.gn)([(0,r.fI)({required:!0,type:Array,validator:e=>e.length>0})],qe.prototype,"tabs",void 0),(0,s.gn)([(0,r.RL)("tabs",{immediate:!0})],qe.prototype,"onTabsChanged",null),qe=(0,s.gn)([(0,r.wA)({})],qe);const Ze=qe,Ge=Ze;var Ue=(0,u.Z)(Ge,Ve,Oe,!1,null,"163e0b40",null);const He=Ue.exports;n.ZP.component("checkbox",p),n.ZP.component("checkbox-button",x),n.ZP.component("custom-dialog",N),n.ZP.component("floating-menu",E),n.ZP.component("grid-table",V),n.ZP.component("list-nav",oe),n.ZP.component("page",ue),n.ZP.component("scrollable-chart",$e),n.ZP.component("tab-view",Xe),n.ZP.component("tabs",He);var We=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{class:e.activeTab?e.activeTab.appClass:"",style:{"--color":e.getColorVariable(e.activeColor)},attrs:{id:"app"}},[a("nav",[e._l(e.tabs,(function(t){return a("floating-menu",{key:t.key,staticClass:"tab_floating-menu",style:t.noNavItem?t.style:null,attrs:{value:e.tabWithMenu==t},on:{input:function(t){e.tabWithMenu=null}},scopedSlots:e._u([{key:"activator",fn:function(){return[a(null!=t.to?"router-link":null!=t.href?"a":"div",e._b({ref:"tab-"+t.key,refInFor:!0,tag:"component",class:[{"nav-item":1!=t.noNavItem,"icon-only":null==t.label&&null!=t.icon},t.class],style:[{"--color":e.getColorVariable(e.getColor(t))},t.noNavItem?null:t.style],attrs:{target:null!=t.href?"_blank":null,"active-class":null!=t.to?"nav-item-active":null},on:{click:function(a){return!a.type.indexOf("key")&&e._k(a.keyCode,"left",37,a.key,["Left","ArrowLeft"])||"button"in a&&0!==a.button?null:function(){return null!=t.customAction?t.customAction():null}.apply(null,arguments)}}},"component",null!=t.href?{href:t.href}:{to:t.to},!1),[null!=t.icon?a("span",{staticClass:"nav-item-icon",class:t.icon}):e._e(),null!=t.label?a("span",{staticClass:"nav-item-label"},[a("span",{domProps:{textContent:e._s(t.label)}}),null!=t.keyboardKey&&null!=t.keyboardIcon?a("span",{staticClass:"nav-item-keyboard-shortcut-icon",class:t.keyboardIcon}):e._e()]):e._e(),e.isDefaultRoute(t.to)?a("span",{staticClass:"nav-item-home-icon mdi mdi-home"}):e._e()])]},proxy:!0}],null,!0)},[t.canBeDefault?a("set-default-route-button",{attrs:{label:e.$i18n.$t.extension.settings.setDefaultRoute,rootRouteName:"",routeName:t.to.name}}):e._e()],1)})),e.isIframeMode?[a("div",{staticStyle:{width:"24px"}}),a("div",{staticClass:"nav-item icon-only",staticStyle:{"--color":"none"}},[a("span",{staticClass:"mdi mdi-close close-overlay",on:{click:function(t){return e.closeOverlay()}}})])]:e._e()],2),a("main",[a("router-view")],1),a("footer",[a("router-link",{staticClass:"made-with-love",attrs:{to:{name:"donate"}}},[a("span",{staticClass:"mr-1",domProps:{textContent:e._s(e.$i18n.$t.extension.common.madeWithLove1)}}),a("span",{staticClass:"mdi mdi-heart",staticStyle:{color:"#ff1f1f"}}),a("span",{staticClass:"ml-1",domProps:{textContent:e._s(e.$i18n.$t.extension.common.madeWithLove2)}})]),a("span",{domProps:{textContent:e._s(e.accountAndServer)}})],1),e.showAccountSwitchDialog?a("switch-account-dialog",{attrs:{color:e.colors.switchAccount},on:{close:function(t){e.showAccountSwitchDialog=!1}}}):e._e()],1)},Ke=[],Ye=a(9828),Je=a(329),Qe=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("custom-dialog",{style:"--color: "+e.getColorVariable(e.color)+";",attrs:{"show-close":""},on:{close:function(t){return e.$emit("close")}}},[e.knownAccountsLoaded?a("div",[a("div",{domProps:{textContent:e._s(e.$i18n.$t.extension.switchAccounts.title)}}),a("select",{directives:[{name:"model",rawName:"v-model",value:e.selectedAccountKey,expression:"selectedAccountKey"}],on:{change:[function(t){var a=Array.prototype.filter.call(t.target.options,(function(e){return e.selected})).map((function(e){var t="_value"in e?e._value:e.value;return t}));e.selectedAccountKey=t.target.multiple?a:a[0]},function(t){return e.gotoAccount()}]}},e._l(e.knownAccountGroups,(function(t){return a("optgroup",{key:t.serverName,attrs:{label:t.serverName}},e._l(t.accounts,(function(t){return a("option",{key:t.key,domProps:{value:t.key,textContent:e._s(t.name)}})})),0)})),0)]):a("loading-spinner")],1)},et=[];let tt=class extends r.w3{color;knownAccountGroups=[];knownAccountsLoaded=!1;selectedAccountKey=null;getColorVariable(e){return(0,y.U)(e)}async mounted(){await this.loadKnownAccounts(),this.knownAccountsLoaded=!0}mapAccount(e){const t=Ye.z.servers.find((t=>t.id==e.serverId&&t.language==e.serverLanguage));let a=`${e.serverLanguage.toUpperCase()} ${e.serverId}`;if(null!=t){let e=t.name,n=`${t.language.toUpperCase()} `;a=e.startsWith(n)?e:n+e}return{key:`${e.serverLanguage}-${e.serverId}-${e.id}`,id:e.id,universeId:e.serverId,universeLanguage:e.serverLanguage,name:e.name,universeName:a}}async loadKnownAccounts(){const e=Ye.z.accounts.map((e=>this.mapAccount(e))).sort(((e,t)=>{const a=e.universeLanguage.localeCompare(t.universeLanguage);if(0!=a)return a;if(null!=e.universeName&&null==t.universeName)return-1;if(null==e.universeName&&null!=t.universeName)return 1;const n=e.universeId-t.universeId;return 0!=n?n:null!=e.name&&null==t.name?-1:null==e.name&&null!=t.name?1:e.id-t.id})),t={};e.forEach((e=>{const a=`${e.universeLanguage}-${e.universeId}`;(t[a]??=[]).push(e)}));const a=Object.keys(t).sort().map((e=>({serverName:t[e][0].universeName,accounts:t[e]})));this.knownAccountGroups=a}async gotoAccount(){const e=this.knownAccountGroups.flatMap((e=>e.accounts)),t=e.find((e=>e.key==this.selectedAccountKey));if(null==t)return;const a=`/views/stats.html?player=${t.id}&language=${t.universeLanguage}&server=${t.universeId}`;window.open(a,"_blank","noopener,noreferrer"),this.$emit("close"),await this.$nextTick(),this.selectedAccountKey=null}};(0,s.gn)([(0,r.fI)({required:!0,type:String})],tt.prototype,"color",void 0),tt=(0,s.gn)([(0,r.wA)({})],tt);const at=tt,nt=at;var ot=(0,u.Z)(nt,Qe,et,!1,null,"4ce9a792",null);const it=ot.exports;var st=a(8540);const rt="ogame-tracker/close-dialog";let lt=class extends r.w3{colors={switchAccount:"#666666",discord:"#5865f2"};showAccountSwitchDialog=!1;accountAndServer="";get isIframeMode(){const e=new URLSearchParams(location.search);return null!=e.get("iframe")}get activeTab(){return this.tabs.find((e=>null!=e.to&&this.$route.matched.some((t=>t.name==e.to?.name))))??null}tabWithMenu=null;setTabWithMenu(e){this.tabWithMenu=e}isDefaultRoute(e){if(null==e)return!1;const t=H.V.settings.defaultRoutes[""]??"expeditions";return t==e.name}get tabs(){const e=[{key:"expeditions",to:{name:"expeditions"},icon:"ogti ogti-expedition",label:this.$i18n.$t.extension.expeditions.header,keyboardKey:"1",keyboardIcon:"mdi mdi-numeric-1",canBeDefault:!0},{key:"combats",to:{name:"combats"},icon:"ogti ogti-attack",label:this.$i18n.$t.extension.combats.header,keyboardKey:"2",keyboardIcon:"mdi mdi-numeric-2",canBeDefault:!0},{key:"debris-fields",to:{name:"debris-fields"},icon:"ogti ogti-debris-field",label:this.$i18n.$t.extension.debrisFields.header,keyboardKey:"3",keyboardIcon:"mdi mdi-numeric-3",canBeDefault:!0},{key:"resource-balance",to:{name:"resource-balance"},icon:"ogti ogti-economy",label:this.$i18n.$t.extension.resourceBalance.header,keyboardKey:"4",keyboardIcon:"mdi mdi-numeric-4",canBeDefault:!0},{key:"empire",to:{name:"empire"},icon:"ogti ogti-planet-moon",label:this.$i18n.$t.extension.empire.header,keyboardKey:"5",keyboardIcon:"mdi mdi-numeric-5",canBeDefault:!0},{key:"lifeforms",to:{name:"lifeforms"},icon:"ogti ogti-dna",label:this.$i18n.$t.extension.empire.lifeforms.header,keyboardKey:"6",keyboardIcon:"mdi mdi-numeric-6",canBeDefault:!0},{key:"universe-history",to:{name:"universe-history"},icon:"mdi mdi-update",label:this.$i18n.$t.extension.universeHistory.header,keyboardKey:"7",keyboardIcon:"mdi mdi-numeric-7",canBeDefault:!0},{key:"space",style:{"flex-grow":1},noNavItem:!0},{key:"settings",to:{name:"settings"},icon:"mdi mdi-cog"},{key:"tools",to:{name:"tools"},icon:"mdi mdi-hammer-wrench"},{key:"excel-export",to:{name:"excel-export"},icon:"mdi mdi-microsoft-excel"},{key:"donate",to:{name:"donate"},icon:"mdi mdi-coffee",label:this.$i18n.$t.extension.donate.header,class:"donate",appClass:"donate-page"},{key:"discord",href:st.m.discordInviteLink,icon:"ogti ogti-discord",color:this.colors.discord},{key:"about",to:{name:"about"},icon:"mdi mdi-help-box"},{key:"switch-account",customAction:()=>this.showAccountSwitchDialog=!0,icon:"mdi mdi-account-multiple",color:this.colors.switchAccount}];return e}get activeColor(){const e=this.$route.matched;return e.map((e=>e.meta?.color)).find((e=>null!=e))??null}getColor(e){if(null!=e.color)return e.color;const t=this.$router.getRoutes(),a=t.find((t=>t.name==e.to?.name));return a?.meta?.color??null}getColorVariable(e){return(0,y.U)(e)}closeOverlay(){window.parent.postMessage(rt,"*")}async mounted(){window.addEventListener("keypress",(e=>{if(e.composedPath().some((e=>e instanceof HTMLInputElement)))return;const t=this.tabs.find((t=>t.keyboardKey==e.key)),a=t?.to;null==a||this.$route.matched.some((e=>e.name==a.name))||this.$router.push(a)})),await document.fonts.ready,await(0,Je.g)(100),await this.setWindowTitleAndFooter(),await this.$nextTick(),this.onRefsChanged(),window.focus();const e=document.querySelector("#splashscreen");e?.classList.add("fade"),setTimeout((()=>e?.remove()),500)}onRefsChanged(){const e=Object.keys(this.$refs).filter((e=>e.startsWith("tab-")));e.forEach((e=>{const t=e.substring("tab-".length),a=this.tabs.find((e=>e.key==t))??(0,U.A)(`tab with key '${t}' not found`);if(!a.canBeDefault)return;const n=this.$refs[e][0];n.$el.addEventListener("contextmenu",(e=>{e.preventDefault(),e.stopPropagation(),this.setTabWithMenu(a)}))}))}async setWindowTitleAndFooter(){await Ye.z.ready;const e=Ye.z.currentAccount,t=Ye.z.currentServer,a=`${e.name} - ${t.language.toUpperCase()} ${t.name}`;document.title=a,this.accountAndServer=a}};lt=(0,s.gn)([(0,r.wA)({components:{SetDefaultRouteButton:Q,SwitchAccountDialog:it}})],lt);const ct=lt,dt=ct;var ut=(0,u.Z)(dt,We,Ke,!1,null,"5b0c2298",null);const mt=ut.exports;var pt=a(8345);const ht=[{redirect:{name:"expeditions"},path:"/",name:"",component:()=>a.e(1300).then(a.bind(a,1300)),children:[{meta:{color:"#ffca00"},path:"donate",name:"donate",component:()=>a.e(7689).then(a.bind(a,7689))},{meta:{color:"#21a366"},path:"excel-export",name:"excel-export",component:()=>a.e(6017).then(a.bind(a,6017))},{redirect:{name:"about/info"},meta:{color:"#8c8ce0"},path:"about",name:"about",component:()=>a.e(6056).then(a.bind(a,6056)),children:[{path:"help",name:"about/help",component:()=>a.e(9478).then(a.bind(a,9478))},{path:"info",name:"about/info",component:()=>a.e(2800).then(a.bind(a,2800))}]},{redirect:{name:"combats/overview"},meta:{color:"#c51b00"},path:"combats",name:"combats",component:()=>a.e(3678).then(a.bind(a,3678)),children:[{redirect:{name:"combats/lost-ships/against-players"},path:"lost-ships",name:"combats/lost-ships",component:()=>a.e(6505).then(a.bind(a,6505)),children:[{redirect:{name:"combats/lost-ships/against-players/amount"},path:"against-players",name:"combats/lost-ships/against-players",component:()=>a.e(7685).then(a.bind(a,7685)),children:[{redirect:{name:"combats/lost-ships/against-players/amount/chart"},path:"amount",name:"combats/lost-ships/against-players/amount",component:()=>a.e(5234).then(a.bind(a,5234)),children:[{path:"chart",name:"combats/lost-ships/against-players/amount/chart",component:()=>a.e(3793).then(a.bind(a,3793))},{path:"table",name:"combats/lost-ships/against-players/amount/table",component:()=>Promise.all([a.e(4329),a.e(1638)]).then(a.bind(a,4748))}]},{redirect:{name:"combats/lost-ships/against-players/resources/chart"},path:"resources",name:"combats/lost-ships/against-players/resources",component:()=>a.e(8724).then(a.bind(a,8724)),children:[{path:"chart",name:"combats/lost-ships/against-players/resources/chart",component:()=>a.e(4724).then(a.bind(a,4724))},{path:"table",name:"combats/lost-ships/against-players/resources/table",component:()=>Promise.all([a.e(4329),a.e(547)]).then(a.bind(a,1591))}]}]},{redirect:{name:"combats/lost-ships/on-expeditions/amount"},path:"on-expeditions",name:"combats/lost-ships/on-expeditions",component:()=>a.e(1882).then(a.bind(a,1882)),children:[{redirect:{name:"combats/lost-ships/on-expeditions/amount/chart"},path:"amount",name:"combats/lost-ships/on-expeditions/amount",component:()=>a.e(7361).then(a.bind(a,7361)),children:[{path:"chart",name:"combats/lost-ships/on-expeditions/amount/chart",component:()=>a.e(7674).then(a.bind(a,7674))},{path:"table",name:"combats/lost-ships/on-expeditions/amount/table",component:()=>Promise.all([a.e(4329),a.e(3288)]).then(a.bind(a,3129))}]},{redirect:{name:"combats/lost-ships/on-expeditions/resources/chart"},path:"resources",name:"combats/lost-ships/on-expeditions/resources",component:()=>a.e(2870).then(a.bind(a,2870)),children:[{path:"chart",name:"combats/lost-ships/on-expeditions/resources/chart",component:()=>a.e(1112).then(a.bind(a,1112))},{path:"table",name:"combats/lost-ships/on-expeditions/resources/table",component:()=>Promise.all([a.e(4329),a.e(3698)]).then(a.bind(a,4230))}]}]}]},{redirect:{name:"combats/overview/against-players"},path:"overview",name:"combats/overview",component:()=>a.e(4039).then(a.bind(a,4039)),children:[{redirect:{name:"combats/overview/against-players/chart"},path:"against-players",name:"combats/overview/against-players",component:()=>a.e(8034).then(a.bind(a,8034)),children:[{path:"chart",name:"combats/overview/against-players/chart",component:()=>a.e(7750).then(a.bind(a,7750))},{path:"table",name:"combats/overview/against-players/table",component:()=>Promise.all([a.e(4329),a.e(1922)]).then(a.bind(a,8810))}]},{redirect:{name:"combats/overview/on-expeditions/chart"},path:"on-expeditions",name:"combats/overview/on-expeditions",component:()=>a.e(3188).then(a.bind(a,3188)),children:[{path:"chart",name:"combats/overview/on-expeditions/chart",component:()=>a.e(9290).then(a.bind(a,9290))},{path:"table",name:"combats/overview/on-expeditions/table",component:()=>Promise.all([a.e(4329),a.e(9381)]).then(a.bind(a,157))}]}]},{redirect:{name:"combats/resources/chart"},path:"resources",name:"combats/resources",component:()=>a.e(4857).then(a.bind(a,4857)),children:[{path:"chart",name:"combats/resources/chart",component:()=>a.e(5868).then(a.bind(a,5868))},{path:"table",name:"combats/resources/table",component:()=>Promise.all([a.e(4329),a.e(2449)]).then(a.bind(a,7782))}]}]},{meta:{color:"#00a031"},redirect:{name:"debris-fields/table"},path:"debris-fields",name:"debris-fields",component:()=>a.e(8174).then(a.bind(a,8174)),children:[{path:"chart",name:"debris-fields/chart",component:()=>a.e(910).then(a.bind(a,910))},{path:"table",name:"debris-fields/table",component:()=>Promise.all([a.e(4329),a.e(1051)]).then(a.bind(a,5972))}]},{redirect:{name:"empire/overview"},meta:{color:"#5000d0"},path:"empire",name:"empire",component:()=>a.e(6314).then(a.bind(a,6314)),children:[{path:"amortization",name:"empire/amortization",component:()=>Promise.all([a.e(6119),a.e(4846),a.e(2297),a.e(7156)]).then(a.bind(a,3119))},{path:"overview",name:"empire/overview",component:()=>a.e(5710).then(a.bind(a,5710))},{path:"point-distribution",name:"empire/point-distribution",component:()=>Promise.all([a.e(6119),a.e(4846),a.e(6439)]).then(a.bind(a,6439))},{redirect:{name:"empire/production/resources"},path:"production",name:"empire/production",component:()=>a.e(9600).then(a.bind(a,9600)),children:[{path:"mines",name:"empire/production/mines",component:()=>Promise.all([a.e(6119),a.e(4846),a.e(4985),a.e(4197)]).then(a.bind(a,4197))},{path:"resources",name:"empire/production/resources",component:()=>Promise.all([a.e(6119),a.e(4846),a.e(4985),a.e(2297),a.e(8740)]).then(a.bind(a,5617))}]}]},{meta:{color:"#cb9913"},path:"espionage",name:"espionage",component:()=>a.e(8807).then(a.bind(a,8807))},{meta:{color:"#0066ff"},redirect:{name:"expeditions/overview"},path:"expeditions",name:"expeditions",component:()=>a.e(3820).then(a.bind(a,3820)),children:[{redirect:{name:"expeditions/dark-matter/amount"},path:"dark-matter",name:"expeditions/dark-matter",component:()=>a.e(5235).then(a.bind(a,5235)),children:[{redirect:{name:"expeditions/dark-matter/amount/chart"},path:"amount",name:"expeditions/dark-matter/amount",component:()=>a.e(9955).then(a.bind(a,9955)),children:[{path:"chart",name:"expeditions/dark-matter/amount/chart",component:()=>a.e(8604).then(a.bind(a,8604))},{path:"table",name:"expeditions/dark-matter/amount/table",component:()=>Promise.all([a.e(4329),a.e(7005)]).then(a.bind(a,1164))}]},{redirect:{name:"expeditions/dark-matter/sizes/chart"},path:"sizes",name:"expeditions/dark-matter/sizes",component:()=>a.e(9996).then(a.bind(a,9996)),children:[{path:"chart",name:"expeditions/dark-matter/sizes/chart",component:()=>a.e(8360).then(a.bind(a,8360))},{path:"table",name:"expeditions/dark-matter/sizes/table",component:()=>Promise.all([a.e(4329),a.e(3685)]).then(a.bind(a,8069))}]}]},{redirect:{name:"expeditions/depletion/chart"},path:"depletion",name:"expeditions/depletion",component:()=>a.e(9419).then(a.bind(a,9419)),children:[{path:"chart",name:"expeditions/depletion/chart",component:()=>a.e(6528).then(a.bind(a,6528))},{path:"table",name:"expeditions/depletion/table",component:()=>Promise.all([a.e(4329),a.e(8038)]).then(a.bind(a,1233))}]},{redirect:{name:"expeditions/info/largest-finds"},path:"info",name:"expeditions/info",component:()=>a.e(2338).then(a.bind(a,2338)),children:[{path:"largest-finds",name:"expeditions/info/largest-finds",component:()=>a.e(4346).then(a.bind(a,4346))},{path:"possible-finds",name:"expeditions/info/possible-finds",component:()=>Promise.all([a.e(6119),a.e(4846),a.e(7558)]).then(a.bind(a,7558))}]},{path:"items",name:"expeditions/items",component:()=>a.e(628).then(a.bind(a,628))},{redirect:{name:"expeditions/overview/chart"},path:"overview",name:"expeditions/overview",component:()=>a.e(9418).then(a.bind(a,9418)),children:[{path:"chart",name:"expeditions/overview/chart",component:()=>a.e(958).then(a.bind(a,958))},{path:"table",name:"expeditions/overview/table",component:()=>Promise.all([a.e(4329),a.e(7872)]).then(a.bind(a,3999))}]},{redirect:{name:"expeditions/resources/amount"},path:"resources",name:"expeditions/resources",component:()=>a.e(3035).then(a.bind(a,3035)),children:[{redirect:{name:"expeditions/resources/amount/chart"},path:"amount",name:"expeditions/resources/amount",component:()=>a.e(8005).then(a.bind(a,8005)),children:[{path:"chart",name:"expeditions/resources/amount/chart",component:()=>a.e(4290).then(a.bind(a,4290))},{path:"table",name:"expeditions/resources/amount/table",component:()=>Promise.all([a.e(4329),a.e(5613)]).then(a.bind(a,6))}]},{redirect:{name:"expeditions/resources/count/chart"},path:"count",name:"expeditions/resources/count",component:()=>a.e(590).then(a.bind(a,590)),children:[{path:"chart",name:"expeditions/resources/count/chart",component:()=>a.e(2685).then(a.bind(a,2685))},{path:"table",name:"expeditions/resources/count/table",component:()=>Promise.all([a.e(4329),a.e(2310)]).then(a.bind(a,9750))}]},{redirect:{name:"expeditions/resources/size-breakdown/metal"},path:"size-breakdown",name:"expeditions/resources/size-breakdown",component:()=>a.e(8641).then(a.bind(a,8641)),children:[{redirect:{name:"expeditions/resources/size-breakdown/crystal/chart"},path:"crystal",name:"expeditions/resources/size-breakdown/crystal",component:()=>a.e(5031).then(a.bind(a,5031)),children:[{path:"chart",name:"expeditions/resources/size-breakdown/crystal/chart",component:()=>Promise.all([a.e(2519),a.e(9945)]).then(a.bind(a,7941))},{path:"table",name:"expeditions/resources/size-breakdown/crystal/table",component:()=>Promise.all([a.e(4329),a.e(4387)]).then(a.bind(a,9159))}]},{redirect:{name:"expeditions/resources/size-breakdown/deuterium/chart"},path:"deuterium",name:"expeditions/resources/size-breakdown/deuterium",component:()=>a.e(3389).then(a.bind(a,3389)),children:[{path:"chart",name:"expeditions/resources/size-breakdown/deuterium/chart",component:()=>Promise.all([a.e(2519),a.e(3665)]).then(a.bind(a,9220))},{path:"table",name:"expeditions/resources/size-breakdown/deuterium/table",component:()=>Promise.all([a.e(4329),a.e(7889)]).then(a.bind(a,4738))}]},{redirect:{name:"expeditions/resources/size-breakdown/metal/chart"},path:"metal",name:"expeditions/resources/size-breakdown/metal",component:()=>a.e(8307).then(a.bind(a,8307)),children:[{path:"chart",name:"expeditions/resources/size-breakdown/metal/chart",component:()=>Promise.all([a.e(2519),a.e(7649)]).then(a.bind(a,7586))},{path:"table",name:"expeditions/resources/size-breakdown/metal/table",component:()=>Promise.all([a.e(4329),a.e(8568)]).then(a.bind(a,1239))}]}]},{redirect:{name:"expeditions/resources/sizes/chart"},path:"sizes",name:"expeditions/resources/sizes",component:()=>a.e(3764).then(a.bind(a,3764)),children:[{path:"chart",name:"expeditions/resources/sizes/chart",component:()=>a.e(4580).then(a.bind(a,4580))},{path:"table",name:"expeditions/resources/sizes/table",component:()=>Promise.all([a.e(4329),a.e(2643)]).then(a.bind(a,5938))}]}]},{redirect:{name:"expeditions/ships/amount"},path:"ships",name:"expeditions/ships",component:()=>a.e(3741).then(a.bind(a,3741)),children:[{redirect:{name:"expeditions/ships/amount/chart"},path:"amount",name:"expeditions/ships/amount",component:()=>a.e(5921).then(a.bind(a,5921)),children:[{path:"chart",name:"expeditions/ships/amount/chart",component:()=>a.e(2326).then(a.bind(a,2326))},{path:"table",name:"expeditions/ships/amount/table",component:()=>Promise.all([a.e(4329),a.e(6546)]).then(a.bind(a,8831))}]},{redirect:{name:"expeditions/ships/resources/chart"},path:"resources",name:"expeditions/ships/resources",component:()=>a.e(1142).then(a.bind(a,1142)),children:[{path:"chart",name:"expeditions/ships/resources/chart",component:()=>a.e(6600).then(a.bind(a,6600))},{path:"table",name:"expeditions/ships/resources/table",component:()=>Promise.all([a.e(4329),a.e(6195)]).then(a.bind(a,3939))}]},{redirect:{name:"expeditions/ships/sizes/chart"},path:"sizes",name:"expeditions/ships/sizes",component:()=>a.e(655).then(a.bind(a,5832)),children:[{path:"chart",name:"expeditions/ships/sizes/chart",component:()=>a.e(179).then(a.bind(a,179))},{path:"table",name:"expeditions/ships/sizes/table",component:()=>Promise.all([a.e(4329),a.e(8832)]).then(a.bind(a,4589))}]}]}]},{redirect:{name:"lifeforms/overview"},meta:{color:"#701ebb"},path:"lifeforms",name:"lifeforms",component:()=>a.e(2380).then(a.bind(a,2380)),children:[{path:"overview",name:"lifeforms/overview",component:()=>a.e(3817).then(a.bind(a,3817))},{path:"progress",name:"lifeforms/progress",component:()=>a.e(7018).then(a.bind(a,7018))},{redirect:{name:"lifeforms/bonus-breakdown/resource-production"},path:"bonus-breakdown",name:"lifeforms/bonus-breakdown",component:()=>a.e(7022).then(a.bind(a,7022)),children:[{path:"building-cost-time",name:"lifeforms/bonus-breakdown/building-cost-time",component:()=>Promise.all([a.e(6119),a.e(4846),a.e(7356),a.e(2367)]).then(a.bind(a,6055))},{path:"crawlers",name:"lifeforms/bonus-breakdown/crawlers",component:()=>Promise.all([a.e(6119),a.e(4846),a.e(7356),a.e(863)]).then(a.bind(a,937))},{path:"defenses",name:"lifeforms/bonus-breakdown/defenses",component:()=>Promise.all([a.e(6119),a.e(4846),a.e(7356),a.e(9004)]).then(a.bind(a,9757))},{path:"den-capacity",name:"lifeforms/bonus-breakdown/den-capacity",component:()=>Promise.all([a.e(6119),a.e(4846),a.e(7356),a.e(2335)]).then(a.bind(a,5872))},{path:"discovery-missions",name:"lifeforms/bonus-breakdown/discovery-missions",component:()=>Promise.all([a.e(6119),a.e(4846),a.e(7356),a.e(5475)]).then(a.bind(a,5139))},{path:"expedition-finds",name:"lifeforms/bonus-breakdown/expedition-finds",component:()=>Promise.all([a.e(6119),a.e(4846),a.e(7356),a.e(6890)]).then(a.bind(a,5499))},{path:"expedition-fleet-speed",name:"lifeforms/bonus-breakdown/expedition-fleet-speed",component:()=>Promise.all([a.e(6119),a.e(4846),a.e(7356),a.e(6843)]).then(a.bind(a,6340))},{path:"fleet-fuel-return",name:"lifeforms/bonus-breakdown/fleet-fuel-return",component:()=>Promise.all([a.e(6119),a.e(4846),a.e(7356),a.e(6066)]).then(a.bind(a,7611))},{path:"fuel-consumption",name:"lifeforms/bonus-breakdown/fuel-consumption",component:()=>Promise.all([a.e(6119),a.e(4846),a.e(7356),a.e(2309)]).then(a.bind(a,7404))},{path:"phalanx-range",name:"lifeforms/bonus-breakdown/phalanx-range",component:()=>Promise.all([a.e(6119),a.e(4846),a.e(7356),a.e(1956)]).then(a.bind(a,4051))},{path:"player-class",name:"lifeforms/bonus-breakdown/player-class",component:()=>Promise.all([a.e(6119),a.e(4846),a.e(7356),a.e(604)]).then(a.bind(a,7757))},{path:"research-cost-time",name:"lifeforms/bonus-breakdown/research-cost-time",component:()=>Promise.all([a.e(6119),a.e(4846),a.e(7356),a.e(4045)]).then(a.bind(a,5397))},{path:"resource-production",name:"lifeforms/bonus-breakdown/resource-production",component:()=>Promise.all([a.e(6119),a.e(4846),a.e(7356),a.e(7306)]).then(a.bind(a,2729))},{path:"ships",name:"lifeforms/bonus-breakdown/ships",component:()=>Promise.all([a.e(6119),a.e(4846),a.e(7356),a.e(6939)]).then(a.bind(a,8390))}]},{redirect:{name:"lifeforms/discoveries/overview"},path:"discoveries",name:"lifeforms/discoveries",component:()=>a.e(4758).then(a.bind(a,4758)),children:[{path:"largest-finds",name:"lifeforms/discoveries/largest-finds",component:()=>a.e(1161).then(a.bind(a,1161))},{redirect:{name:"lifeforms/discoveries/artifacts/amount"},path:"artifacts",name:"lifeforms/discoveries/artifacts",component:()=>a.e(1780).then(a.bind(a,1780)),children:[{redirect:{name:"lifeforms/discoveries/artifacts/amount/chart"},path:"amount",name:"lifeforms/discoveries/artifacts/amount",component:()=>a.e(1563).then(a.bind(a,1563)),children:[{path:"chart",name:"lifeforms/discoveries/artifacts/amount/chart",component:()=>a.e(7829).then(a.bind(a,7829))},{path:"table",name:"lifeforms/discoveries/artifacts/amount/table",component:()=>Promise.all([a.e(4329),a.e(4719)]).then(a.bind(a,6605))}]},{redirect:{name:"lifeforms/discoveries/artifacts/sizes/chart"},path:"sizes",name:"lifeforms/discoveries/artifacts/sizes",component:()=>a.e(818).then(a.bind(a,818)),children:[{path:"chart",name:"lifeforms/discoveries/artifacts/sizes/chart",component:()=>a.e(344).then(a.bind(a,344))},{path:"table",name:"lifeforms/discoveries/artifacts/sizes/table",component:()=>Promise.all([a.e(4329),a.e(7099)]).then(a.bind(a,3544))}]}]},{redirect:{name:"lifeforms/discoveries/experience/chart"},path:"experience",name:"lifeforms/discoveries/experience",component:()=>a.e(343).then(a.bind(a,343)),children:[{path:"chart",name:"lifeforms/discoveries/experience/chart",component:()=>a.e(4946).then(a.bind(a,4946))},{path:"table",name:"lifeforms/discoveries/experience/table",component:()=>Promise.all([a.e(4329),a.e(6589)]).then(a.bind(a,5906))}]},{redirect:{name:"lifeforms/discoveries/overview/chart"},path:"overview",name:"lifeforms/discoveries/overview",component:()=>a.e(2129).then(a.bind(a,2129)),children:[{path:"chart",name:"lifeforms/discoveries/overview/chart",component:()=>a.e(7369).then(a.bind(a,7369))},{path:"table",name:"lifeforms/discoveries/overview/table",component:()=>Promise.all([a.e(4329),a.e(6248)]).then(a.bind(a,5850))}]}]},{redirect:{name:"lifeforms/planet-bonuses/resource-production"},path:"planet-bonuses",name:"lifeforms/planet-bonuses",component:()=>a.e(4468).then(a.bind(a,4468)),children:[{path:"lifeform-research-cost-time",name:"lifeforms/planet-bonuses/lifeform-research-cost-time",component:()=>Promise.all([a.e(6119),a.e(4846),a.e(8380),a.e(5996)]).then(a.bind(a,205))},{path:"resource-production",name:"lifeforms/planet-bonuses/resource-production",component:()=>Promise.all([a.e(6119),a.e(4846),a.e(8380),a.e(9455)]).then(a.bind(a,2366))},{path:"wreckfield",name:"lifeforms/planet-bonuses/wreckfield",component:()=>Promise.all([a.e(6119),a.e(8380),a.e(8362)]).then(a.bind(a,6876))}]}]},{redirect:{name:"resource-balance/chart"},meta:{color:"#a9460c"},path:"resource-balance",name:"resource-balance",component:()=>a.e(2516).then(a.bind(a,2516)),children:[{path:"chart",name:"resource-balance/chart",component:()=>a.e(8875).then(a.bind(a,8875))},{path:"table",name:"resource-balance/table",component:()=>Promise.all([a.e(4329),a.e(2997)]).then(a.bind(a,5960))}]},{redirect:{name:"settings/common"},meta:{color:"#888888"},path:"settings",name:"settings",component:()=>a.e(1838).then(a.bind(a,1838)),children:[{path:"accessibility",name:"settings/accessibility",component:()=>a.e(6177).then(a.bind(a,6177))},{path:"colors",name:"settings/colors",component:()=>a.e(4853).then(a.bind(a,4853))},{path:"combats",name:"settings/combats",component:()=>a.e(5178).then(a.bind(a,5178))},{path:"common",name:"settings/common",component:()=>a.e(6893).then(a.bind(a,6893))},{path:"danger-zone",name:"settings/danger-zone",component:()=>a.e(3187).then(a.bind(a,3187))},{path:"date-ranges",name:"settings/date-ranges",component:()=>Promise.all([a.e(4329),a.e(9652)]).then(a.bind(a,2866))},{path:"debris-fields",name:"settings/debris-fields",component:()=>a.e(5712).then(a.bind(a,5712))},{path:"expeditions",name:"settings/expeditions",component:()=>a.e(8124).then(a.bind(a,8124))},{path:"import-export",name:"settings/import-export",component:()=>a.e(3422).then(a.bind(a,3422))},{path:"linked-accounts",name:"settings/linked-accounts",component:()=>a.e(450).then(a.bind(a,450))},{path:"resource-balance",name:"settings/resource-balance",component:()=>a.e(359).then(a.bind(a,359))},{path:"universe-history",name:"settings/universe-history",component:()=>a.e(970).then(a.bind(a,970))}]},{redirect:{name:"tools/signature-generator"},meta:{color:"#008c85"},path:"tools",name:"tools",component:()=>a.e(9144).then(a.bind(a,9144)),children:[{path:"construction-queue",name:"tools/construction-queue",component:()=>a.e(6819).then(a.bind(a,6819))},{path:"cost-calculator",name:"tools/cost-calculator",component:()=>a.e(9694).then(a.bind(a,9694))},{path:"expedition-calculator",name:"tools/expedition-calculator",component:()=>a.e(7572).then(a.bind(a,7572))},{path:"resource-conversion",name:"tools/resource-conversion",component:()=>a.e(309).then(a.bind(a,309))},{path:"scrapyard-merchant",name:"tools/scrapyard-merchant",component:()=>a.e(4325).then(a.bind(a,4325))},{path:"signature-generator",name:"tools/signature-generator",component:()=>Promise.all([a.e(6119),a.e(4846),a.e(4985),a.e(8822)]).then(a.bind(a,8822))}]},{redirect:{name:"universe-history/players"},meta:{color:"#8b0436"},path:"universe-history",name:"universe-history",component:()=>a.e(2735).then(a.bind(a,2735)),children:[{redirect:{name:"universe-history/alliances/highscore"},path:"alliances",name:"universe-history/alliances",component:()=>a.e(8217).then(a.bind(a,6890)),children:[{path:"highscore",name:"universe-history/alliances/highscore",component:()=>a.e(8422).then(a.bind(a,8422))},{path:"history",name:"universe-history/alliances/history",component:()=>Promise.all([a.e(9775),a.e(9438)]).then(a.bind(a,6223))}]},{redirect:{name:"universe-history/players/highscore"},path:"players",name:"universe-history/players",component:()=>a.e(3978).then(a.bind(a,5659)),children:[{path:"highscore",name:"universe-history/players/highscore",component:()=>a.e(5491).then(a.bind(a,5491))},{path:"history",name:"universe-history/players/history",component:()=>Promise.all([a.e(9775),a.e(6068)]).then(a.bind(a,8878))}]}]}]}],ft=ht;n.ZP.use(pt.Z);const yt=new pt.Z({routes:ft});var bt=a(5904);n.ZP.prototype.$forceCompute=function(e){this._computedWatchers[e]?.run()},Object.defineProperty(n.ZP.prototype,"$lang",{get:()=>H.V.settings.extensionLanguage}),Object.defineProperty(n.ZP.prototype,"$i18n",{get:()=>he.j}),bt.ZP.registerHooks(["beforeRouteEnter","beforeRouteLeave","beforeRouteUpdate"]);var gt=a(5599);async function vt(){(0,gt.d)(),await xt(),wt(),kt()}function wt(){(new n.ZP).$watch((()=>H.V.settings.extensionLanguage),(e=>he.j.locale=e),{immediate:!0}),(new n.ZP).$watch((()=>H.V.settings.extensionLanguageRegion),(e=>he.j.localeRegion=e??null),{immediate:!0})}async function xt(){await H.V.ready;const e=H.V.settings.defaultRoutes,t=yt.getRoutes();Object.keys(e).forEach((a=>{const n=t.find((e=>e.name==a)),o=e[a],i=t.find((e=>e.name==o));if(null==n||null==i)return console.warn(`Route redirect could not resolved as at least one of the routes does not exist ('${a}' -> '${o}')`),void delete e[a];n.redirect={name:o}})),H.V.updateSettings({...H.V.settings,defaultRoutes:e})}function kt(){n.ZP.config.productionTip=!1;new n.ZP({router:yt,render:e=>e(mt)}).$mount("#app")}vt()},7048:(e,t,a)=>{function n(e){e=e.substring(1);const t=parseInt(e.substring(0,2),16),a=parseInt(e.substring(2,4),16),n=parseInt(e.substring(4,6),16);return{r:t,g:a,b:n}}function o(e){if(null==e)return null;const{r:t,g:a,b:o}=n(e);return`${t}, ${a}, ${o}`}a.d(t,{U:()=>o})}},t={};function a(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,a),i.exports}a.m=e,(()=>{var e=[];a.O=(t,n,o,i)=>{if(!n){var s=1/0;for(d=0;d<e.length;d++){for(var[n,o,i]=e[d],r=!0,l=0;l<n.length;l++)(!1&i||s>=i)&&Object.keys(a.O).every((e=>a.O[e](n[l])))?n.splice(l--,1):(r=!1,i<s&&(s=i));if(r){e.splice(d--,1);var c=o();void 0!==c&&(t=c)}}return t}i=i||0;for(var d=e.length;d>0&&e[d-1][2]>i;d--)e[d]=e[d-1];e[d]=[n,o,i]}})(),(()=>{a.n=e=>{var t=e&&e.__esModule?()=>e["default"]:()=>e;return a.d(t,{a:t}),t}})(),(()=>{a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})}})(),(()=>{a.f={},a.e=e=>Promise.all(Object.keys(a.f).reduce(((t,n)=>(a.f[n](e,t),t)),[]))})(),(()=>{a.u=e=>"js/"+e+"."+{179:"1f7db72d",309:"98e47bf2",343:"3f07459c",344:"50280984",359:"45869a07",450:"000ee161",547:"0f2af028",590:"a497afe4",604:"8c36e80b",628:"13f8ec92",655:"2cf30a64",818:"00e8d148",863:"56132575",910:"1c313f07",958:"cab32743",970:"d8522c88",1051:"792ceb74",1112:"bd57e932",1142:"bef02c01",1161:"6db26631",1300:"2a23e8d8",1563:"16f2c992",1638:"0e95d4df",1780:"d542ca66",1838:"e2c22ce2",1882:"54bb5c29",1922:"83ef44f8",1956:"678db1c4",2129:"d2774451",2297:"8a0ee17b",2309:"06efbaf0",2310:"dfb8d087",2326:"303ff280",2335:"0b0e3efd",2338:"fb8e05ea",2367:"abcc34d5",2380:"99f5513b",2449:"de42d0d7",2516:"962574a8",2519:"48927173",2643:"845dfdb0",2685:"848d0f92",2735:"da8223e9",2800:"88243f59",2870:"0eac3b6e",2997:"2bec6db3",3035:"0ebc78b8",3187:"dab30432",3188:"20ab4dc3",3288:"2e176775",3389:"3e564569",3422:"843ebe3b",3665:"31fcc77a",3678:"a5ab5c61",3685:"963fb480",3698:"f1ae2cb6",3741:"a11adb58",3764:"c66a8343",3793:"81eef222",3817:"d0b8bfb4",3820:"f7f90a1f",3978:"2d99f26b",4039:"80e676a2",4045:"3320b476",4197:"6e36c1bb",4290:"7c117adb",4325:"fa733274",4329:"acd1a24c",4346:"e38ea796",4387:"ac590fa7",4468:"7d9f1e32",4580:"dc7934e4",4719:"8fe413a3",4724:"3b2ab0be",4758:"a4f3b27b",4846:"9ad83518",4853:"bcac903e",4857:"cd039adf",4946:"f025f454",4985:"8751ea9d",5031:"de991459",5178:"c7618b78",5234:"99e7c936",5235:"cd0e9041",5475:"c74df042",5491:"5f70e036",5613:"082422f7",5710:"49ad920d",5712:"f552c231",5868:"706f108d",5921:"bb4b4ee6",5996:"47be62c0",6017:"69cb2a85",6056:"88109595",6066:"d1b67b39",6068:"5e78de58",6119:"8ea9ac1d",6177:"a8af02d2",6195:"04a5fb91",6248:"25959b55",6314:"0b5def77",6439:"31a3473c",6505:"f588e5f6",6528:"46db19db",6546:"02ffdc45",6589:"8295ec3c",6600:"d81d5e82",6819:"c7b286c1",6843:"9ca5d729",6890:"098e894a",6893:"8467d71d",6939:"74f75d82",7005:"bd58df79",7018:"b1b47812",7022:"76e54af4",7099:"d26908f9",7156:"a4142d49",7306:"349be40a",7356:"7a739e1d",7361:"41138985",7369:"2880d1a9",7558:"2d58e037",7572:"a60f6d7f",7649:"576d11fc",7674:"ca3da712",7685:"e74e3711",7689:"faaf5724",7750:"387b4cba",7829:"6d1f11e7",7872:"62eef4ad",7889:"877672f1",8005:"3568e184",8034:"cb1db07e",8038:"a5738fba",8124:"783a6e2e",8174:"879c5ae9",8217:"30dec4ca",8307:"decccc8f",8360:"55f08823",8362:"057f5f39",8380:"4e01f5b8",8422:"57924c4e",8568:"885ce34a",8604:"e57a5bda",8641:"8ff96ea1",8724:"222cbfcd",8740:"0f2a63d4",8807:"411968d7",8822:"3eada9a0",8832:"f745a66c",8875:"bf1aebf2",9004:"78aaff51",9144:"73dab8bf",9290:"5d0e4296",9381:"725337da",9418:"907b3174",9419:"81926873",9438:"7f413d43",9455:"fb642ee3",9478:"72425ce7",9600:"82261e4f",9652:"9ded9f9f",9694:"9e1469ef",9775:"5d58722f",9945:"888bb3ea",9955:"6bde1bc8",9996:"314680ff"}[e]+".js"})(),(()=>{a.miniCssF=e=>"css/"+e+"."+{179:"cd1af33d",344:"7231f1be",359:"2cea083d",450:"cc3ecaa3",547:"516e6034",604:"1d4b9446",628:"65435627",863:"1d4b9446",910:"a39ffae1",958:"959dda1d",970:"4574d71b",1051:"403e666c",1112:"d7d2fcb5",1161:"c752a532",1638:"7018a8b9",1838:"a2e5c28a",1922:"969eb1f2",1956:"1d4b9446",2309:"1d4b9446",2310:"a7850d76",2326:"2ca269c7",2335:"1d4b9446",2367:"1d4b9446",2449:"7a17f97d",2643:"48af57fe",2685:"f1390d8d",2735:"4574d71b",2800:"809bfa0a",2997:"5d6f879d",3187:"82651117",3288:"3b0c9143",3422:"8da08eb9",3665:"23938984",3685:"9360ada8",3698:"64c5c6d8",3793:"ba7b4396",3817:"e2a09a2d",4045:"1d4b9446",4197:"a9c8f65e",4290:"8f0c747f",4325:"9e9bdf96",4346:"ea4ffd32",4387:"f1b8eea1",4580:"94e52a60",4719:"1669bf98",4724:"c2e68072",4853:"9fafd82b",4946:"a1ba3267",5178:"227b989f",5475:"1d4b9446",5491:"88b7386a",5613:"dffdb118",5710:"4d276ec4",5712:"ec16a442",5868:"4608e2e6",5996:"88fbd6c9",6017:"e7f6ece7",6066:"1d4b9446",6068:"605cdf47",6177:"89740a80",6195:"e05366db",6248:"82605883",6528:"b99b9cca",6546:"88f7def1",6589:"69e4448b",6600:"157e3821",6843:"1d4b9446",6890:"1d4b9446",6893:"dc93f804",6939:"1d4b9446",7005:"6fc6b2a5",7099:"ba7de841",7156:"89b9dd8a",7306:"1d4b9446",7369:"9085fd32",7558:"d619df33",7649:"23938984",7674:"56882e53",7689:"c98fbe1a",7750:"db0fbb25",7829:"373f269a",7872:"94ec93e8",7889:"f1b8eea1",8038:"2e2d8960",8124:"2bbf490b",8360:"05236d95",8362:"88fbd6c9",8422:"ad25e997",8568:"f1b8eea1",8604:"8f53d9e3",8740:"afdc12ec",8822:"9d57d44f",8832:"c27f4c08",8875:"8ab7da99",9004:"1d4b9446",9290:"85744bbe",9381:"0e1b4a24",9438:"7291317d",9455:"88fbd6c9",9478:"7fdbae4d",9652:"64a88cb1",9945:"23938984"}[e]+".css"})(),(()=>{a.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()})(),(()=>{a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)})(),(()=>{var e={},t="ogame-tracker:";a.l=(n,o,i,s)=>{if(e[n])e[n].push(o);else{var r,l;if(void 0!==i)for(var c=document.getElementsByTagName("script"),d=0;d<c.length;d++){var u=c[d];if(u.getAttribute("src")==n||u.getAttribute("data-webpack")==t+i){r=u;break}}r||(l=!0,r=document.createElement("script"),r.charset="utf-8",r.timeout=120,a.nc&&r.setAttribute("nonce",a.nc),r.setAttribute("data-webpack",t+i),r.src=n),e[n]=[o];var m=(t,a)=>{r.onerror=r.onload=null,clearTimeout(p);var o=e[n];if(delete e[n],r.parentNode&&r.parentNode.removeChild(r),o&&o.forEach((e=>e(a))),t)return t(a)},p=setTimeout(m.bind(null,void 0,{type:"timeout",target:r}),12e4);r.onerror=m.bind(null,r.onerror),r.onload=m.bind(null,r.onload),l&&document.head.appendChild(r)}}})(),(()=>{a.r=e=>{"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}})(),(()=>{a.j=6784})(),(()=>{a.p=""})(),(()=>{var e=(e,t,a,n)=>{var o=document.createElement("link");o.rel="stylesheet",o.type="text/css";var i=i=>{if(o.onerror=o.onload=null,"load"===i.type)a();else{var s=i&&("load"===i.type?"missing":i.type),r=i&&i.target&&i.target.href||t,l=new Error("Loading CSS chunk "+e+" failed.\n("+r+")");l.code="CSS_CHUNK_LOAD_FAILED",l.type=s,l.request=r,o.parentNode.removeChild(o),n(l)}};return o.onerror=o.onload=i,o.href=t,document.head.appendChild(o),o},t=(e,t)=>{for(var a=document.getElementsByTagName("link"),n=0;n<a.length;n++){var o=a[n],i=o.getAttribute("data-href")||o.getAttribute("href");if("stylesheet"===o.rel&&(i===e||i===t))return o}var s=document.getElementsByTagName("style");for(n=0;n<s.length;n++){o=s[n],i=o.getAttribute("data-href");if(i===e||i===t)return o}},n=n=>new Promise(((o,i)=>{var s=a.miniCssF(n),r=a.p+s;if(t(s,r))return o();e(n,r,o,i)})),o={6784:0};a.f.miniCss=(e,t)=>{var a={179:1,344:1,359:1,450:1,547:1,604:1,628:1,863:1,910:1,958:1,970:1,1051:1,1112:1,1161:1,1638:1,1838:1,1922:1,1956:1,2309:1,2310:1,2326:1,2335:1,2367:1,2449:1,2643:1,2685:1,2735:1,2800:1,2997:1,3187:1,3288:1,3422:1,3665:1,3685:1,3698:1,3793:1,3817:1,4045:1,4197:1,4290:1,4325:1,4346:1,4387:1,4580:1,4719:1,4724:1,4853:1,4946:1,5178:1,5475:1,5491:1,5613:1,5710:1,5712:1,5868:1,5996:1,6017:1,6066:1,6068:1,6177:1,6195:1,6248:1,6528:1,6546:1,6589:1,6600:1,6843:1,6890:1,6893:1,6939:1,7005:1,7099:1,7156:1,7306:1,7369:1,7558:1,7649:1,7674:1,7689:1,7750:1,7829:1,7872:1,7889:1,8038:1,8124:1,8360:1,8362:1,8422:1,8568:1,8604:1,8740:1,8822:1,8832:1,8875:1,9004:1,9290:1,9381:1,9438:1,9455:1,9478:1,9652:1,9945:1};o[e]?t.push(o[e]):0!==o[e]&&a[e]&&t.push(o[e]=n(e).then((()=>{o[e]=0}),(t=>{throw delete o[e],t})))}})(),(()=>{var e={6784:0};a.f.j=(t,n)=>{var o=a.o(e,t)?e[t]:void 0;if(0!==o)if(o)n.push(o[2]);else{var i=new Promise(((a,n)=>o=e[t]=[a,n]));n.push(o[2]=i);var s=a.p+a.u(t),r=new Error,l=n=>{if(a.o(e,t)&&(o=e[t],0!==o&&(e[t]=void 0),o)){var i=n&&("load"===n.type?"missing":n.type),s=n&&n.target&&n.target.src;r.message="Loading chunk "+t+" failed.\n("+i+": "+s+")",r.name="ChunkLoadError",r.type=i,r.request=s,o[1](r)}};a.l(s,l,"chunk-"+t,t)}},a.O.j=t=>0===e[t];var t=(t,n)=>{var o,i,[s,r,l]=n,c=0;if(s.some((t=>0!==e[t]))){for(o in r)a.o(r,o)&&(a.m[o]=r[o]);if(l)var d=l(a)}for(t&&t(n);c<s.length;c++)i=s[c],a.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return a.O(d)},n=globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var n=a.O(void 0,[4998,3064],(()=>a(1486)));n=a.O(n)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,