"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[2997],{8288:(e,t,s)=>{s.d(t,{B:()=>a});var n=s(7331),r=s(917);function a(e,t={}){const s={metal:0,crystal:0,deuterium:0,...e},a={metal:1,crystal:1,deuterium:1,...t};n.P.forEach((e=>s[e]*=a[e]));const{mode:o,msu:i,dsu:u}=r.V.settings.conversionRates;return"msu"==o?s.metal+s.crystal*i.crystal+s.deuterium*i.deuterium:s.deuterium+s.crystal/u.crystal+s.metal/u.metal}},6597:(e,t,s)=>{s.d(t,{Z:()=>p});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"conversion-rate-settings fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.title)}})]),s("div",{staticClass:"fake-table-body"},[s("select",{domProps:{value:e.conversionMode},on:{input:function(t){return e.setConversionMode(t.target.value)}}},[s("option",{attrs:{value:"msu"},domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.msuLong+" ("+e.$i18n.$t.extension.common.msu+")")}}),s("option",{attrs:{value:"dsu"},domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.dsuLong+" ("+e.$i18n.$t.extension.common.dsu+")")}})]),"msu"==e.conversionMode?s("span",{staticClass:"inputs"},[s("span",[s("o-resource",{attrs:{resource:"crystal"}}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.msu.crystal,expression:"msu.crystal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"1",max:"3",step:"0.01"},domProps:{value:e.msu.crystal},on:{change:[function(t){e.$set(e.msu,"crystal",e._n(t.target.value))},function(t){return e.updateMsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("o-resource",{attrs:{resource:"metal"}})],1),s("span",[s("o-resource",{attrs:{resource:"deuterium"}}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.msu.deuterium,expression:"msu.deuterium",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"2",max:"5",step:"0.01"},domProps:{value:e.msu.deuterium},on:{change:[function(t){e.$set(e.msu,"deuterium",e._n(t.target.value))},function(t){return e.updateMsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("o-resource",{attrs:{resource:"metal"}})],1)]):s("span",{staticClass:"inputs"},[s("span",[s("o-resource",{attrs:{resource:"metal"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.dsu.metal,expression:"dsu.metal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"2",max:"5",step:"0.01"},domProps:{value:e.dsu.metal},on:{change:[function(t){e.$set(e.dsu,"metal",e._n(t.target.value))},function(t){return e.updateDsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("o-resource",{attrs:{resource:"deuterium"}})],1),s("span",[s("o-resource",{attrs:{resource:"crystal"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.dsu.crystal,expression:"dsu.crystal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"1",max:"3",step:"0.01"},domProps:{value:e.dsu.crystal},on:{change:[function(t){e.$set(e.dsu,"crystal",e._n(t.target.value))},function(t){return e.updateDsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("o-resource",{attrs:{resource:"deuterium"}})],1)])])])},r=[],a=s(655),o=s(4028),i=s(917);let u=class extends o.w3{msu={crystal:2,deuterium:3};dsu={metal:3,crystal:2};get msuRates(){return i.V.settings.conversionRates.msu}get dsuRates(){return i.V.settings.conversionRates.dsu}get conversionMode(){return i.V.settings.conversionRates.mode}setConversionMode(e){i.V.updateSettings({...i.V.settings,conversionRates:{...i.V.settings.conversionRates,mode:e}})}onMsuRatesChanged(){const{crystal:e,deuterium:t}=this.msuRates;this.msu.crystal=e,this.msu.deuterium=t}updateMsuConversionRates(){i.V.updateSettings({...i.V.settings,conversionRates:{...i.V.settings.conversionRates,msu:this.msu}})}onDsuRatesChanged(){const{crystal:e,metal:t}=this.dsuRates;this.dsu.crystal=e,this.dsu.metal=t}updateDsuConversionRates(){i.V.updateSettings({...i.V.settings,conversionRates:{...i.V.settings.conversionRates,dsu:this.dsu}})}};(0,a.gn)([(0,o.RL)("msuRates",{immediate:!0})],u.prototype,"onMsuRatesChanged",null),(0,a.gn)([(0,o.RL)("dsuRates",{immediate:!0})],u.prototype,"onDsuRatesChanged",null),u=(0,a.gn)([(0,o.wA)({})],u);const l=u,c=l;var d=s(1001),m=(0,d.Z)(c,n,r,!1,null,"13cde7dd",null);const p=m.exports},5209:(e,t,s)=>{s.d(t,{Z:()=>p});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table expedition-ship-resource-units-factor-settings"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.expeditions.resourceUnitFactorsOfShipFoundOnExpeditions)}})]),s("div",{staticClass:"fake-table-body"},[s("span",{staticClass:"inputs"},[s("span",[s("span",{staticClass:"two-resources"},[s("o-resource",{attrs:{resource:"metal"}}),s("o-resource",{attrs:{resource:"crystal"}})],1),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.factor,expression:"factor",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"0",max:"1",step:"0.01"},domProps:{value:e.factor},on:{change:[function(t){e.factor=e._n(t.target.value)},function(t){return e.updateFactors()}],focus:function(t){e.isFocused=!0},blur:[function(t){return e.onBlur()},function(t){return e.$forceUpdate()}]}})]),s("span",[s("o-resource",{attrs:{resource:"deuterium"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.deuteriumFactor,expression:"deuteriumFactor",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"0",max:"1",step:"0.01"},domProps:{value:e.deuteriumFactor},on:{change:[function(t){e.deuteriumFactor=e._n(t.target.value)},function(t){return e.updateFactors()}],focus:function(t){e.isFocused=!0},blur:[function(t){return e.onBlur()},function(t){return e.$forceUpdate()}]}})],1)])])])},r=[],a=s(655),o=s(4028),i=s(917);let u=class extends o.w3{factor=1;deuteriumFactor=1;isFocused=!1;get factors(){return i.V.settings.expeditionFoundShipsResourceUnits}onFactorsChanged(){const{factor:e,deuteriumFactor:t}=this.factors;this.isFocused||(this.factor=e,this.deuteriumFactor=t)}updateFactors(){i.V.updateSettings({...i.V.settings,expeditionFoundShipsResourceUnits:{factor:this.factor,deuteriumFactor:this.deuteriumFactor}})}onBlur(){this.isFocused=!1,this.onFactorsChanged()}};(0,a.gn)([(0,o.RL)("factors",{immediate:!0})],u.prototype,"onFactorsChanged",null),u=(0,a.gn)([(0,o.wA)({})],u);const l=u,c=l;var d=s(1001),m=(0,d.Z)(c,n,r,!1,null,"160db831",null);const p=m.exports},2546:(e,t,s)=>{s.d(t,{Z:()=>p});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table expedition-ship-resource-units-factor-settings"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.combats.resourceUnitFactorsOfLostShips)}})]),s("div",{staticClass:"fake-table-body"},[s("span",{staticClass:"inputs"},[s("span",[s("span",{staticClass:"two-resources"},[s("o-resource",{attrs:{resource:"metal"}}),s("o-resource",{attrs:{resource:"crystal"}})],1),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.factor,expression:"factor",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"0",max:"1",step:"0.01"},domProps:{value:e.factor},on:{change:[function(t){e.factor=e._n(t.target.value)},function(t){return e.updateFactors()}],focus:function(t){e.isFocused=!0},blur:[function(t){return e.onBlur()},function(t){return e.$forceUpdate()}]}})]),s("span",[s("o-resource",{attrs:{resource:"deuterium"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.deuteriumFactor,expression:"deuteriumFactor",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"0",max:"1",step:"0.01"},domProps:{value:e.deuteriumFactor},on:{change:[function(t){e.deuteriumFactor=e._n(t.target.value)},function(t){return e.updateFactors()}],focus:function(t){e.isFocused=!0},blur:[function(t){return e.onBlur()},function(t){return e.$forceUpdate()}]}})],1)])])])},r=[],a=s(655),o=s(4028),i=s(917);let u=class extends o.w3{factor=1;deuteriumFactor=1;isFocused=!1;get factors(){return i.V.settings.lostShipsResourceUnits}onFactorsChanged(){const{factor:e,deuteriumFactor:t}=this.factors;this.isFocused||(this.factor=e,this.deuteriumFactor=t)}updateFactors(){i.V.updateSettings({...i.V.settings,lostShipsResourceUnits:{factor:this.factor,deuteriumFactor:this.deuteriumFactor}})}onBlur(){this.isFocused=!1,this.onFactorsChanged()}};(0,a.gn)([(0,o.RL)("factors",{immediate:!0})],u.prototype,"onFactorsChanged",null),u=(0,a.gn)([(0,o.wA)({})],u);const l=u,c=l;var d=s(1001),m=(0,d.Z)(c,n,r,!1,null,"7b3b1bc9",null);const p=m.exports},3787:(e,t,s)=>{s.d(t,{Z:()=>p});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.showConvertedUnitsInTables.title)}})]),s("div",{staticClass:"fake-table-body"},[s("checkbox",{attrs:{value:e.showCellsWithConvertedResourceUnits,label:e.$i18n.$t.extension.settings.showConvertedUnitsInTables.label},on:{input:function(t){return e.toggle(t)}}}),e._t("default")],2)])},r=[],a=s(655),o=s(4028),i=s(917);let u=class extends o.w3{get showCellsWithConvertedResourceUnits(){return i.V.settings.showCellsWithConvertedResourceUnits}toggle(e){i.V.updateSettings({...i.V.settings,showCellsWithConvertedResourceUnits:e})}};u=(0,a.gn)([(0,o.wA)({})],u);const l=u,c=l;var d=s(1001),m=(0,d.Z)(c,n,r,!1,null,"90457dc2",null);const p=m.exports},3631:(e,t,s)=>{s.d(t,{Z:()=>p});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.resourceBalance.detailedResourceBalance.header)}})]),s("div",{staticClass:"fake-table-body"},[s("checkbox",{attrs:{value:e.showDetailedBreakdown,label:e.$i18n.$t.extension.settings.resourceBalance.detailedResourceBalance.checkboxLabel},on:{input:function(t){return e.toggleDetailedBreakdown(t)}}})],1)])},r=[],a=s(655),o=s(4028),i=s(917);let u=class extends o.w3{get showDetailedBreakdown(){return i.V.settings.resourceBalance.showDetailedBreakdown}toggleDetailedBreakdown(e){i.V.updateSettings({...i.V.settings,resourceBalance:{...i.V.settings.resourceBalance,showDetailedBreakdown:e}})}};u=(0,a.gn)([(0,o.wA)({})],u);const l=u,c=l;var d=s(1001),m=(0,d.Z)(c,n,r,!1,null,"1dbd13a2",null);const p=m.exports},4795:(e,t,s)=>{s.d(t,{Z:()=>p});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.resourceBalance.includeLostLootResources.header)}})]),s("div",{staticClass:"fake-table-body"},[s("checkbox",{attrs:{value:e.include,label:e.$i18n.$t.extension.settings.resourceBalance.includeLostLootResources.checkboxLabel},on:{input:function(t){return e.toggleInclude(t)}}})],1)])},r=[],a=s(655),o=s(4028),i=s(917);let u=class extends o.w3{get include(){return i.V.settings.resourceBalance.includeLostLootResources}toggleInclude(e){i.V.updateSettings({...i.V.settings,resourceBalance:{...i.V.settings.resourceBalance,includeLostLootResources:e}})}};u=(0,a.gn)([(0,o.wA)({})],u);const l=u,c=l;var d=s(1001),m=(0,d.Z)(c,n,r,!1,null,"54165ce9",null);const p=m.exports},8004:(e,t,s)=>{s.d(t,{Z:()=>p});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.resourceBalance.includeShipsFoundOnExpeditions.header)}})]),s("div",{staticClass:"fake-table-body"},[s("checkbox",{attrs:{value:e.include,label:e.$i18n.$t.extension.settings.resourceBalance.includeShipsFoundOnExpeditions.checkboxLabel},on:{input:function(t){return e.toggleInclude(t)}}})],1)])},r=[],a=s(655),o=s(4028),i=s(917);let u=class extends o.w3{get include(){return i.V.settings.resourceBalance.includeExpeditionFoundShipsResourceUnits}toggleInclude(e){i.V.updateSettings({...i.V.settings,resourceBalance:{...i.V.settings.resourceBalance,includeExpeditionFoundShipsResourceUnits:e}})}};u=(0,a.gn)([(0,o.wA)({})],u);const l=u,c=l;var d=s(1001),m=(0,d.Z)(c,n,r,!1,null,"2d954bb7",null);const p=m.exports},3467:(e,t,s)=>{s.d(t,{Z:()=>p});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.resourceBalance.includeShipsLostInCombats.header)}})]),s("div",{staticClass:"fake-table-body"},[s("checkbox",{attrs:{value:e.include,label:e.$i18n.$t.extension.settings.resourceBalance.includeShipsLostInCombats.checkboxLabel},on:{input:function(t){return e.toggleInclude(t)}}})],1)])},r=[],a=s(655),o=s(4028),i=s(917);let u=class extends o.w3{get include(){return i.V.settings.resourceBalance.includeLostShipsResourceUnits}toggleInclude(e){i.V.updateSettings({...i.V.settings,resourceBalance:{...i.V.settings.resourceBalance,includeLostShipsResourceUnits:e}})}};u=(0,a.gn)([(0,o.wA)({})],u);const l=u,c=l;var d=s(1001),m=(0,d.Z)(c,n,r,!1,null,"0388589a",null);const p=m.exports},4310:(e,t,s)=>{s.d(t,{Z:()=>b});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("grid-table",{staticClass:"ranged-stats-table",attrs:{columns:e.columns,items:e.rows,"footer-items":e.footerRows,"cell-class-provider":function(t){return e.getCellClass(t)}},scopedSlots:e._u([e._l(e.columns,(function(t,n){return{key:"cell-"+t.key,fn:function(r){var a=r.value,o=r.item;return[s("span",{key:t.key,staticClass:"ranged-stats-table-cell"},["label"==t.key?[null!=t.slotName&&null!=e.$scopedSlots[t.slotName]?e._t(t.slotName,null,{value:a}):s("span",{key:n,domProps:{textContent:e._s(a)}})]:"subLabel"==t.key?e._l(o.items,(function(n,r){return s("span",{key:r,class:n.labelClass},[null!=t.slotName&&null!=e.$scopedSlots[t.slotName]?e._t(t.slotName,null,{value:n.label}):s("span",{domProps:{textContent:e._s(n.label)}})],2)})):e._l(o.items||[o],(function(n,r){return s("span",{key:r,class:[e.getCellClass(n[t.key]),n.class]},[null!=t.formatter?s("span",{domProps:{textContent:e._s(t.formatter(n[t.key]))}}):s("span",{domProps:{textContent:e._s(n[t.key])}})])}))],2)]}}})),e._l(e.$scopedSlots,(function(t,s){return{key:s,fn:function(t){return[e._t(s,null,null,t)]}}}))],null,!0)})},r=[],a=s(655),o=s(4028),i=s(9858),u=s(6538),l=s(4749),c=s.n(l),d=s(917);let m=class extends o.w3{showPercentage;showAverage;items;footerItems;numberFormatOptions;averageNumberFormatOptions;dataItems;get hasGroupedItems(){return this.items.some((e=>"items"in e))}get dateRanges(){return d.V.settings.dateRanges}get dataItemsByRange(){const e=this.dataItems,t=this.dateRanges.map((()=>[]));return e.forEach((e=>{this.dateRanges.forEach(((s,n)=>{(0,i.m)(e.date,s)&&t[n].push(e)}))})),t}get firstDay(){return this.dataItemsByRange.reduce(((e,t)=>Math.min(e,Math.min(...t.map((e=>e.date))))),Date.now())}get columns(){const e=[{key:"label",label:"",slotName:"label"}];return this.hasGroupedItems&&e.push({key:"subLabel",label:"",slotName:"subLabel"}),e.push(...this.dateRanges.map(((e,t)=>({key:t,label:e.label??this.$i18n.$t.extension.settings.dateRanges.since(this.$i18n.$d(this.firstDay,"date")),formatter:e=>this.$i18n.$n(e,this.numberFormatOptions)})))),this.showAverage&&e.push({key:"average",label:this.$i18n.$t.extension.common.averagePerDay,formatter:e=>this.$i18n.$n(e,this.averageNumberFormatOptions??this.numberFormatOptions)}),this.showPercentage&&e.push({key:"percentage",label:"%",formatter:e=>""!=e?this.$i18n.$n(e,{minimumFractionDigits:3,maximumFractionDigits:3}):e}),e}get rows(){const e=this.dataItemsByRange,t=this.dateRanges.findIndex((e=>"all"==e.type))??(0,u.A)("failed to find range 'all'"),s=e[t].map((e=>c()(e.date).getTime())),n=new Set(s).size,r=Math.max(1,this.items.map((s=>"getValue"in s?s.getValue(e[t]):s.items.reduce(((s,n)=>s+n.getValue(e[t])),0))).reduce(((e,t)=>e+t),0));return this.items.map((s=>this.mapItemToRow(s,e,t,n,r)))}mapItemToRow(e,t,s,n,r){if("getValue"in e){const a={label:e.label,class:e.class,labelClass:e.labelClass,...this.dateRanges.map(((s,n)=>e.getValue(t[n])))},o=a[s];return this.showAverage&&(a.average=o/Math.max(1,n)),this.showPercentage&&(a.percentage=100*o/r),a}return{label:e.label,items:e.items.map((e=>this.mapItemToRow(e,t,s,n,r)))}}get footerRows(){const e=this.dataItemsByRange,t=this.dateRanges.findIndex((e=>"all"==e.type))??(0,u.A)("failed to find range 'all'"),s=e[t].map((e=>c()(e.date).getTime())),n=new Set(s).size;return this.footerItems.map((s=>{const r={label:s.label,...this.dateRanges.map(((t,n)=>"getValue"in s?s.getValue(e[n]):s.items.reduce(((t,s)=>t+s.getValue(e[n])),0))),percentage:""};if(this.showAverage){const e=r[t];r.average=e/Math.max(1,n)}return r}))}getCellClass(e){return 0==e?"fade-value":""}};(0,a.gn)([(0,o.fI)({required:!1,type:Boolean})],m.prototype,"showPercentage",void 0),(0,a.gn)([(0,o.fI)({required:!1,type:Boolean})],m.prototype,"showAverage",void 0),(0,a.gn)([(0,o.fI)({required:!0,type:Array})],m.prototype,"items",void 0),(0,a.gn)([(0,o.fI)({required:!1,type:Array,default:()=>[]})],m.prototype,"footerItems",void 0),(0,a.gn)([(0,o.fI)({required:!1,type:Object,default:void 0})],m.prototype,"numberFormatOptions",void 0),(0,a.gn)([(0,o.fI)({required:!1,type:Object,default:void 0})],m.prototype,"averageNumberFormatOptions",void 0),(0,a.gn)([(0,o.fI)({required:!0,type:Array})],m.prototype,"dataItems",void 0),m=(0,a.gn)([(0,o.wA)({})],m);const p=m,g=p;var h=s(1001),f=(0,h.Z)(g,n,r,!1,null,"1526beca",null);const b=f.exports},5960:(e,t,s)=>{s.r(t),s.d(t,{default:()=>L});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"table-container"},[s("div",[s("ranged-stats-table",{attrs:{dataItems:e.events,items:e.items,footerItems:e.footerItems,"show-average":"",averageNumberFormatOptions:e.avgNumberFormat},scopedSlots:e._u([{key:"cell-label",fn:function(t){var n=t.value;return[s("span",{staticClass:"mr-2",domProps:{textContent:e._s(n)}}),s("o-resource",{attrs:{resource:e.resourceTypes[n],size:e.resourceIconSize}})]}}])})],1),s("floating-menu",{staticClass:"floating-settings",attrs:{left:""},scopedSlots:e._u([{key:"activator",fn:function(){return[s("button",{on:{click:function(t){e.showSettings=!e.showSettings}}},[s("span",{staticClass:"mdi mdi-cog"})])]},proxy:!0}]),model:{value:e.showSettings,callback:function(t){e.showSettings=t},expression:"showSettings"}},[s("conversion-rate-settings"),s("show-converted-resources-in-cells-settings"),s("hr",{staticClass:"two-column"}),s("expedition-ship-resource-units-factor-settings"),s("lost-ship-resource-units-factor-settings"),s("hr",{staticClass:"two-column"}),s("include-ships-found-on-expeditions-in-resource-balance-settings"),s("include-ships-lost-in-combats-in-resource-balance"),s("IncludeLostLootResourcesInResourceBalance"),s("hr",{staticClass:"two-column"}),s("detailed-resource-balance-settings"),s("hr",{staticClass:"two-column"}),s("date-range-settings",{staticClass:"two-column"})],1)],1)},r=[],a=s(655),o=s(4028),i=s(4310),u=s(7331),l=s(4992),c=s(5359),d=s(7090),m=s(917),p=s(4329),g=s(3631),h=s(6597),f=s(5209),b=s(2546),v=s(9383),y=s(9119),x=s(7349),C=s(3787),R=s(8004),w=s(3467),$=s(4795),F=s(8288);const _=["expedition","combat-report","debris-field-report"];let S=class extends o.w3{showSettings=!1;avgNumberFormat={minimumFractionDigits:1,maximumFractionDigits:1};get includeFoundShipsFactor(){const{factor:e,deuteriumFactor:t}=m.V.settings.expeditionFoundShipsResourceUnits,s=this.includeFoundShips?1:0;return{[u._.metal]:e*s,[u._.crystal]:e*s,[u._.deuterium]:t*s}}get includeFoundShips(){return m.V.settings.resourceBalance.includeExpeditionFoundShipsResourceUnits}get includeLostShips(){return m.V.settings.resourceBalance.includeLostShipsResourceUnits}get includeLostShipsFactor(){const{factor:e,deuteriumFactor:t}=m.V.settings.lostShipsResourceUnits,s=this.includeLostShips?1:0;return{[u._.metal]:e*s,[u._.crystal]:e*s,[u._.deuterium]:t*s}}get includeLostLoot(){return m.V.settings.resourceBalance.includeLostLootResources}get resourceTypes(){return{[this.$i18n.$t.extension.resources.metal]:u._.metal,[this.$i18n.$t.extension.resources.crystal]:u._.crystal,[this.$i18n.$t.extension.resources.deuterium]:u._.deuterium}}get events(){const e=Math.min(l.t.firstDay,c.J.firstDay,d.m.firstDay),t=(0,v.Z)((0,y.Z)(Date.now()),e),s=Array.from({length:t+1}).map(((t,s)=>(0,x.Z)(e,s).getTime()));return s.map((e=>({date:e,expeditions:d.m.dailyResults[e],combats:l.t.dailyResults[e],debrisFields:c.J.dailyResults[e]}))).filter((e=>null!=(e.expeditions??e.combats??e.debrisFields)))}get settings(){return m.V.settings.resourceBalance}get resourceIconSize(){return this.settings.showDetailedBreakdown?"36px":"24px"}get items(){if(this.settings.showDetailedBreakdown){const e={[u._.metal]:["expedition","combat-report","debris-field-report",null],[u._.crystal]:["expedition","combat-report","debris-field-report",null],[u._.deuterium]:["expedition","combat-report","debris-field-report",null]};return u.P.map((t=>({label:this.$i18n.$t.extension.resources[t],items:e[t].map((e=>({label:null==e?this.$i18n.$t.extension.common.sum:this.$i18n.$t.extension.resourceBalance[e],getValue:s=>this.getResources(s,e,t),class:null==e?"sum-item":"",labelClass:null==e?"sum-item":""})))})))}return u.P.map((e=>({label:this.$i18n.$t.extension.resources[e],getValue:t=>this.getResources(t,null,e)})))}getResources(e,t,s){return e.reduce(((e,n)=>{switch(t){case"expedition":return e+this.getResource({date:n.date,expeditions:n.expeditions},s);case"combat-report":return e+this.getResource({date:n.date,combats:n.combats},s);case"debris-field-report":return e+this.getResource({date:n.date,debrisFields:n.debrisFields},s);case null:return e+this.getResource(n,s)}}),0)}getResource(e,t){return this.getExpeditionResourceAmount(e.expeditions,t)+this.getCombatResourceAmount(e.combats,t)+this.getDebrisFieldResourceAmount(e.debrisFields,t)}getExpeditionResourceAmount(e,t){if(null==e)return 0;const s=this.includeFoundShipsFactor[t],n=e.findings.resources[t]+e.findings.fleetResourceUnits[t]*s;return n}getCombatResourceAmount(e,t){if(null==e)return 0;const s=this.includeLostLoot?1:0,n=e.loot.lost[t]*s+e.loot.gained[t],r=this.includeLostShipsFactor[t],a=(e.lostShips.onExpeditions.resourceUnits[t]+e.lostShips.againstPlayers.resourceUnits[t])*r,o=n-a;return o}getDebrisFieldResourceAmount(e,t){return null==e?0:e.total[t]}get footerItems(){const e=[{label:this.$i18n.$t.extension.common.resourceUnits,getValue:e=>u.P.reduce(((t,s)=>t+_.reduce(((t,n)=>t+this.getResources(e,n,s)),0)),0)}];return m.V.settings.showCellsWithConvertedResourceUnits&&e.push({label:`${this.$i18n.$t.extension.common.resourceUnits} (${"msu"==m.V.settings.conversionRates.mode?this.$i18n.$t.extension.common.msu:this.$i18n.$t.extension.common.dsu})`,getValue:e=>u.P.reduce(((t,s)=>t+_.reduce(((t,n)=>t+(0,F.B)({[s]:this.getResources(e,n,s)})),0)),0)}),e}};S=(0,a.gn)([(0,o.wA)({components:{RangedStatsTable:i.Z,DateRangeSettings:p.Z,DetailedResourceBalanceSettings:g.Z,ConversionRateSettings:h.Z,ExpeditionShipResourceUnitsFactorSettings:f.Z,LostShipResourceUnitsFactorSettings:b.Z,ShowConvertedResourcesInCellsSettings:C.Z,IncludeShipsFoundOnExpeditionsInResourceBalanceSettings:R.Z,IncludeShipsLostInCombatsInResourceBalance:w.Z,IncludeLostLootResourcesInResourceBalance:$.Z}})],S);const k=S,V=k;var B=s(1001),I=(0,B.Z)(V,n,r,!1,null,"2f997d9f",null);const L=I.exports},8734:(e,t)=>{function s(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=s,e.exports=t.default},9383:(e,t,s)=>{s.d(t,{Z:()=>c});var n=s(9013),r=s(4262),a=s(9119),o=s(3882),i=864e5;function u(e,t){(0,o.Z)(2,arguments);var s=(0,a.Z)(e),n=(0,a.Z)(t),u=s.getTime()-(0,r.Z)(s),l=n.getTime()-(0,r.Z)(n);return Math.round((u-l)/i)}function l(e,t){var s=e.getFullYear()-t.getFullYear()||e.getMonth()-t.getMonth()||e.getDate()-t.getDate()||e.getHours()-t.getHours()||e.getMinutes()-t.getMinutes()||e.getSeconds()-t.getSeconds()||e.getMilliseconds()-t.getMilliseconds();return s<0?-1:s>0?1:s}function c(e,t){(0,o.Z)(2,arguments);var s=(0,n.Z)(e),r=(0,n.Z)(t),a=l(s,r),i=Math.abs(u(s,r));s.setDate(s.getDate()-a*i);var c=Number(l(s,r)===-a),d=a*(i-c);return 0===d?0:d}},4749:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=o;var n=a(s(1171)),r=a(s(8734));function a(e){return e&&e.__esModule?e:{default:e}}function o(e){(0,r.default)(1,arguments);var t=(0,n.default)(e);return t.setHours(0,0,0,0),t}e.exports=t.default},1171:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a;var n=r(s(8734));function r(e){return e&&e.__esModule?e:{default:e}}function a(e){(0,n.default)(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"===typeof e||"[object Number]"===t?new Date(e):("string"!==typeof e&&"[object String]"!==t||"undefined"===typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}e.exports=t.default}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cEIsSUFBSUosS0FBS0ssTUFJcEJ0RCxFQUFPRCxRQUFVQSxFQUFRRSIsInNvdXJjZXMiOlsib2dhbWUtdHJhY2tlcjovLy8uL3NyYy92aWV3cy9zdGF0cy9tb2RlbHMvc2V0dGluZ3MvZ2V0TXN1T3JEc3UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3N0YXRzL2NvbXBvbmVudHMvc2V0dGluZ3MvQ29udmVyc2lvblJhdGVTZXR0aW5ncy52dWU/YTEwZiIsIndlYnBhY2s6Ly8vc3JjL3ZpZXdzL3N0YXRzL2NvbXBvbmVudHMvc2V0dGluZ3MvQ29udmVyc2lvblJhdGVTZXR0aW5ncy52dWU/ZDQ4ZSIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc3RhdHMvY29tcG9uZW50cy9zZXR0aW5ncy9Db252ZXJzaW9uUmF0ZVNldHRpbmdzLnZ1ZT9hYWZiIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0cy9jb21wb25lbnRzL3NldHRpbmdzL0NvbnZlcnNpb25SYXRlU2V0dGluZ3MudnVlPzczODUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3N0YXRzL2NvbXBvbmVudHMvc2V0dGluZ3MvRXhwZWRpdGlvblNoaXBSZXNvdXJjZVVuaXRzRmFjdG9yU2V0dGluZ3MudnVlP2QyNGUiLCJ3ZWJwYWNrOi8vL3NyYy92aWV3cy9zdGF0cy9jb21wb25lbnRzL3NldHRpbmdzL0V4cGVkaXRpb25TaGlwUmVzb3VyY2VVbml0c0ZhY3RvclNldHRpbmdzLnZ1ZT83NjlhIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0cy9jb21wb25lbnRzL3NldHRpbmdzL0V4cGVkaXRpb25TaGlwUmVzb3VyY2VVbml0c0ZhY3RvclNldHRpbmdzLnZ1ZT85NzUxIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0cy9jb21wb25lbnRzL3NldHRpbmdzL0V4cGVkaXRpb25TaGlwUmVzb3VyY2VVbml0c0ZhY3RvclNldHRpbmdzLnZ1ZT9kZjRhIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0cy9jb21wb25lbnRzL3NldHRpbmdzL0xvc3RTaGlwUmVzb3VyY2VVbml0c0ZhY3RvclNldHRpbmdzLnZ1ZT85ZDZmIiwid2VicGFjazovLy9zcmMvdmlld3Mvc3RhdHMvY29tcG9uZW50cy9zZXR0aW5ncy9Mb3N0U2hpcFJlc291cmNlVW5pdHNGYWN0b3JTZXR0aW5ncy52dWU/ZGEwNiIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc3RhdHMvY29tcG9uZW50cy9zZXR0aW5ncy9Mb3N0U2hpcFJlc291cmNlVW5pdHNGYWN0b3JTZXR0aW5ncy52dWU/ZjY2MiIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc3RhdHMvY29tcG9uZW50cy9zZXR0aW5ncy9Mb3N0U2hpcFJlc291cmNlVW5pdHNGYWN0b3JTZXR0aW5ncy52dWU/ODg4YyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc3RhdHMvY29tcG9uZW50cy9zZXR0aW5ncy9TaG93Q29udmVydGVkUmVzb3VyY2VzSW5DZWxsc1NldHRpbmdzLnZ1ZT9hZThkIiwid2VicGFjazovLy9zcmMvdmlld3Mvc3RhdHMvY29tcG9uZW50cy9zZXR0aW5ncy9TaG93Q29udmVydGVkUmVzb3VyY2VzSW5DZWxsc1NldHRpbmdzLnZ1ZT9iOGFmIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0cy9jb21wb25lbnRzL3NldHRpbmdzL1Nob3dDb252ZXJ0ZWRSZXNvdXJjZXNJbkNlbGxzU2V0dGluZ3MudnVlP2M1YTMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3N0YXRzL2NvbXBvbmVudHMvc2V0dGluZ3MvU2hvd0NvbnZlcnRlZFJlc291cmNlc0luQ2VsbHNTZXR0aW5ncy52dWU/ZTNhZSIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc3RhdHMvY29tcG9uZW50cy9zZXR0aW5ncy9yZXNvdXJjZS1iYWxhbmNlL0RldGFpbGVkUmVzb3VyY2VCYWxhbmNlU2V0dGluZ3MudnVlPzJlZWYiLCJ3ZWJwYWNrOi8vL3NyYy92aWV3cy9zdGF0cy9jb21wb25lbnRzL3NldHRpbmdzL3Jlc291cmNlLWJhbGFuY2UvRGV0YWlsZWRSZXNvdXJjZUJhbGFuY2VTZXR0aW5ncy52dWU/NjlmZSIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc3RhdHMvY29tcG9uZW50cy9zZXR0aW5ncy9yZXNvdXJjZS1iYWxhbmNlL0RldGFpbGVkUmVzb3VyY2VCYWxhbmNlU2V0dGluZ3MudnVlP2FmYTQiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3N0YXRzL2NvbXBvbmVudHMvc2V0dGluZ3MvcmVzb3VyY2UtYmFsYW5jZS9EZXRhaWxlZFJlc291cmNlQmFsYW5jZVNldHRpbmdzLnZ1ZT9hNDhiIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0cy9jb21wb25lbnRzL3NldHRpbmdzL3Jlc291cmNlLWJhbGFuY2UvSW5jbHVkZUxvc3RMb290UmVzb3VyY2VzSW5SZXNvdXJjZUJhbGFuY2UudnVlPzdhNWYiLCJ3ZWJwYWNrOi8vL3NyYy92aWV3cy9zdGF0cy9jb21wb25lbnRzL3NldHRpbmdzL3Jlc291cmNlLWJhbGFuY2UvSW5jbHVkZUxvc3RMb290UmVzb3VyY2VzSW5SZXNvdXJjZUJhbGFuY2UudnVlP2ZjYjUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3N0YXRzL2NvbXBvbmVudHMvc2V0dGluZ3MvcmVzb3VyY2UtYmFsYW5jZS9JbmNsdWRlTG9zdExvb3RSZXNvdXJjZXNJblJlc291cmNlQmFsYW5jZS52dWU/ZjU5MyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc3RhdHMvY29tcG9uZW50cy9zZXR0aW5ncy9yZXNvdXJjZS1iYWxhbmNlL0luY2x1ZGVMb3N0TG9vdFJlc291cmNlc0luUmVzb3VyY2VCYWxhbmNlLnZ1ZT81MzAwIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0cy9jb21wb25lbnRzL3NldHRpbmdzL3Jlc291cmNlLWJhbGFuY2UvSW5jbHVkZVNoaXBzRm91bmRPbkV4cGVkaXRpb25zSW5SZXNvdXJjZUJhbGFuY2VTZXR0aW5ncy52dWU/MGVhYiIsIndlYnBhY2s6Ly8vc3JjL3ZpZXdzL3N0YXRzL2NvbXBvbmVudHMvc2V0dGluZ3MvcmVzb3VyY2UtYmFsYW5jZS9JbmNsdWRlU2hpcHNGb3VuZE9uRXhwZWRpdGlvbnNJblJlc291cmNlQmFsYW5jZVNldHRpbmdzLnZ1ZT81N2JiIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0cy9jb21wb25lbnRzL3NldHRpbmdzL3Jlc291cmNlLWJhbGFuY2UvSW5jbHVkZVNoaXBzRm91bmRPbkV4cGVkaXRpb25zSW5SZXNvdXJjZUJhbGFuY2VTZXR0aW5ncy52dWU/NzhkNiIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc3RhdHMvY29tcG9uZW50cy9zZXR0aW5ncy9yZXNvdXJjZS1iYWxhbmNlL0luY2x1ZGVTaGlwc0ZvdW5kT25FeHBlZGl0aW9uc0luUmVzb3VyY2VCYWxhbmNlU2V0dGluZ3MudnVlPzNhZmUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3N0YXRzL2NvbXBvbmVudHMvc2V0dGluZ3MvcmVzb3VyY2UtYmFsYW5jZS9JbmNsdWRlU2hpcHNMb3N0SW5Db21iYXRzSW5SZXNvdXJjZUJhbGFuY2UudnVlP2NiMDUiLCJ3ZWJwYWNrOi8vL3NyYy92aWV3cy9zdGF0cy9jb21wb25lbnRzL3NldHRpbmdzL3Jlc291cmNlLWJhbGFuY2UvSW5jbHVkZVNoaXBzTG9zdEluQ29tYmF0c0luUmVzb3VyY2VCYWxhbmNlLnZ1ZT9iZDU1Iiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0cy9jb21wb25lbnRzL3NldHRpbmdzL3Jlc291cmNlLWJhbGFuY2UvSW5jbHVkZVNoaXBzTG9zdEluQ29tYmF0c0luUmVzb3VyY2VCYWxhbmNlLnZ1ZT8wMmQzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0cy9jb21wb25lbnRzL3NldHRpbmdzL3Jlc291cmNlLWJhbGFuY2UvSW5jbHVkZVNoaXBzTG9zdEluQ29tYmF0c0luUmVzb3VyY2VCYWxhbmNlLnZ1ZT84NjgwIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0cy9jb21wb25lbnRzL3N0YXRzL1JhbmdlZFN0YXRzVGFibGUudnVlPzgxZGMiLCJ3ZWJwYWNrOi8vL3NyYy92aWV3cy9zdGF0cy9jb21wb25lbnRzL3N0YXRzL1JhbmdlZFN0YXRzVGFibGUudnVlPzU3OTciLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3N0YXRzL2NvbXBvbmVudHMvc3RhdHMvUmFuZ2VkU3RhdHNUYWJsZS52dWU/Zjc1YSIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc3RhdHMvY29tcG9uZW50cy9zdGF0cy9SYW5nZWRTdGF0c1RhYmxlLnZ1ZT83MGFjIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0cy92aWV3cy9yZXNvdXJjZS1iYWxhbmNlL1RhYmxlLnZ1ZT81MWM5Iiwid2VicGFjazovLy9zcmMvdmlld3Mvc3RhdHMvdmlld3MvcmVzb3VyY2UtYmFsYW5jZS9UYWJsZS52dWU/ZTQyYSIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc3RhdHMvdmlld3MvcmVzb3VyY2UtYmFsYW5jZS9UYWJsZS52dWU/Mzk4NCIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc3RhdHMvdmlld3MvcmVzb3VyY2UtYmFsYW5jZS9UYWJsZS52dWU/OTcxZiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanM/Mjk1YiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2RpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cy9pbmRleC5qcz8yMTRmIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZGlmZmVyZW5jZUluRGF5cy9pbmRleC5qcz81OTg2Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9zdGFydE9mRGF5L2luZGV4LmpzPzkxYTEiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL3RvRGF0ZS9pbmRleC5qcz9hZDZkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlc291cmNlVHlwZSwgUmVzb3VyY2VUeXBlcyB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvb2dhbWUvcmVzb3VyY2VzL1Jlc291cmNlVHlwZVwiO1xyXG5pbXBvcnQgeyBTZXR0aW5nc0RhdGFNb2R1bGUgfSBmcm9tIFwiLi4vLi4vZGF0YS9TZXR0aW5nc0RhdGFNb2R1bGVcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRNc3VPckRzdShyZXNvdXJjZXM6IFBhcnRpYWw8UmVjb3JkPFJlc291cmNlVHlwZSwgbnVtYmVyPj4sIGZhY3RvcnM6IFBhcnRpYWw8UmVjb3JkPFJlc291cmNlVHlwZSwgbnVtYmVyPj4gPSB7fSk6IG51bWJlciB7XHJcbiAgICBjb25zdCBjb3N0OiBSZWNvcmQ8UmVzb3VyY2VUeXBlLCBudW1iZXI+ID0ge1xyXG4gICAgICAgIG1ldGFsOiAwLFxyXG4gICAgICAgIGNyeXN0YWw6IDAsXHJcbiAgICAgICAgZGV1dGVyaXVtOiAwLFxyXG4gICAgICAgIC4uLnJlc291cmNlcyxcclxuICAgIH07XHJcbiAgICBjb25zdCBjb3N0RmFjdG9yczogUmVjb3JkPFJlc291cmNlVHlwZSwgbnVtYmVyPiA9IHtcclxuICAgICAgICBtZXRhbDogMSxcclxuICAgICAgICBjcnlzdGFsOiAxLFxyXG4gICAgICAgIGRldXRlcml1bTogMSxcclxuICAgICAgICAuLi5mYWN0b3JzLFxyXG4gICAgfTtcclxuICAgIFJlc291cmNlVHlwZXMuZm9yRWFjaChyZXNvdXJjZSA9PiBjb3N0W3Jlc291cmNlXSAqPSBjb3N0RmFjdG9yc1tyZXNvdXJjZV0pO1xyXG5cclxuICAgIGNvbnN0IHsgbW9kZSwgbXN1LCBkc3UgfSA9IFNldHRpbmdzRGF0YU1vZHVsZS5zZXR0aW5ncy5jb252ZXJzaW9uUmF0ZXM7XHJcbiAgICBpZiAobW9kZSA9PSAnbXN1Jykge1xyXG4gICAgICAgIHJldHVybiBjb3N0Lm1ldGFsICsgY29zdC5jcnlzdGFsICogbXN1LmNyeXN0YWwgKyBjb3N0LmRldXRlcml1bSAqIG1zdS5kZXV0ZXJpdW07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNvc3QuZGV1dGVyaXVtICsgY29zdC5jcnlzdGFsIC8gZHN1LmNyeXN0YWwgKyBjb3N0Lm1ldGFsIC8gZHN1Lm1ldGFsO1xyXG59IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiY29udmVyc2lvbi1yYXRlLXNldHRpbmdzIGZha2UtdGFibGVcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZha2UtdGFibGUtaGVhZGVyXCJ9LFtfYygnc3Bhbicse2RvbVByb3BzOntcInRleHRDb250ZW50XCI6X3ZtLl9zKF92bS4kaTE4bi4kdC5leHRlbnNpb24uc2V0dGluZ3MuY29tbW9uLmNvbnZlcnNpb25SYXRlcy50aXRsZSl9fSldKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmYWtlLXRhYmxlLWJvZHlcIn0sW19jKCdzZWxlY3QnLHtkb21Qcm9wczp7XCJ2YWx1ZVwiOl92bS5jb252ZXJzaW9uTW9kZX0sb246e1wiaW5wdXRcIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0uc2V0Q29udmVyc2lvbk1vZGUoJGV2ZW50LnRhcmdldC52YWx1ZSl9fX0sW19jKCdvcHRpb24nLHthdHRyczp7XCJ2YWx1ZVwiOlwibXN1XCJ9LGRvbVByb3BzOntcInRleHRDb250ZW50XCI6X3ZtLl9zKCgoX3ZtLiRpMThuLiR0LmV4dGVuc2lvbi5zZXR0aW5ncy5jb21tb24uY29udmVyc2lvblJhdGVzLm1zdUxvbmcpICsgXCIgKFwiICsgKF92bS4kaTE4bi4kdC5leHRlbnNpb24uY29tbW9uLm1zdSkgKyBcIilcIikpfX0pLF9jKCdvcHRpb24nLHthdHRyczp7XCJ2YWx1ZVwiOlwiZHN1XCJ9LGRvbVByb3BzOntcInRleHRDb250ZW50XCI6X3ZtLl9zKCgoX3ZtLiRpMThuLiR0LmV4dGVuc2lvbi5zZXR0aW5ncy5jb21tb24uY29udmVyc2lvblJhdGVzLmRzdUxvbmcpICsgXCIgKFwiICsgKF92bS4kaTE4bi4kdC5leHRlbnNpb24uY29tbW9uLmRzdSkgKyBcIilcIikpfX0pXSksKF92bS5jb252ZXJzaW9uTW9kZSA9PSAnbXN1Jyk/X2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcImlucHV0c1wifSxbX2MoJ3NwYW4nLFtfYygnby1yZXNvdXJjZScse2F0dHJzOntcInJlc291cmNlXCI6XCJjcnlzdGFsXCJ9fSksX2MoJ2lucHV0Jyx7YXR0cnM6e1widHlwZVwiOlwibnVtYmVyXCIsXCJyZWFkb25seVwiOlwiXCJ9LGRvbVByb3BzOntcInZhbHVlXCI6MX19KSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwiZXF1YWwgbWRpIG1kaS1lcXVhbFwifSksX2MoJ2lucHV0Jyx7ZGlyZWN0aXZlczpbe25hbWU6XCJtb2RlbFwiLHJhd05hbWU6XCJ2LW1vZGVsLm51bWJlci5sYXp5XCIsdmFsdWU6KF92bS5tc3UuY3J5c3RhbCksZXhwcmVzc2lvbjpcIm1zdS5jcnlzdGFsXCIsbW9kaWZpZXJzOntcIm51bWJlclwiOnRydWUsXCJsYXp5XCI6dHJ1ZX19XSxhdHRyczp7XCJ0eXBlXCI6XCJudW1iZXJcIixcIm1pblwiOlwiMVwiLFwibWF4XCI6XCIzXCIsXCJzdGVwXCI6XCIwLjAxXCJ9LGRvbVByb3BzOntcInZhbHVlXCI6KF92bS5tc3UuY3J5c3RhbCl9LG9uOntcImNoYW5nZVwiOltmdW5jdGlvbigkZXZlbnQpe192bS4kc2V0KF92bS5tc3UsIFwiY3J5c3RhbFwiLCBfdm0uX24oJGV2ZW50LnRhcmdldC52YWx1ZSkpfSxmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0udXBkYXRlTXN1Q29udmVyc2lvblJhdGVzKCl9XSxcImJsdXJcIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0uJGZvcmNlVXBkYXRlKCl9fX0pLF9jKCdvLXJlc291cmNlJyx7YXR0cnM6e1wicmVzb3VyY2VcIjpcIm1ldGFsXCJ9fSldLDEpLF9jKCdzcGFuJyxbX2MoJ28tcmVzb3VyY2UnLHthdHRyczp7XCJyZXNvdXJjZVwiOlwiZGV1dGVyaXVtXCJ9fSksX2MoJ2lucHV0Jyx7YXR0cnM6e1widHlwZVwiOlwibnVtYmVyXCIsXCJyZWFkb25seVwiOlwiXCJ9LGRvbVByb3BzOntcInZhbHVlXCI6MX19KSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwiZXF1YWwgbWRpIG1kaS1lcXVhbFwifSksX2MoJ2lucHV0Jyx7ZGlyZWN0aXZlczpbe25hbWU6XCJtb2RlbFwiLHJhd05hbWU6XCJ2LW1vZGVsLm51bWJlci5sYXp5XCIsdmFsdWU6KF92bS5tc3UuZGV1dGVyaXVtKSxleHByZXNzaW9uOlwibXN1LmRldXRlcml1bVwiLG1vZGlmaWVyczp7XCJudW1iZXJcIjp0cnVlLFwibGF6eVwiOnRydWV9fV0sYXR0cnM6e1widHlwZVwiOlwibnVtYmVyXCIsXCJtaW5cIjpcIjJcIixcIm1heFwiOlwiNVwiLFwic3RlcFwiOlwiMC4wMVwifSxkb21Qcm9wczp7XCJ2YWx1ZVwiOihfdm0ubXN1LmRldXRlcml1bSl9LG9uOntcImNoYW5nZVwiOltmdW5jdGlvbigkZXZlbnQpe192bS4kc2V0KF92bS5tc3UsIFwiZGV1dGVyaXVtXCIsIF92bS5fbigkZXZlbnQudGFyZ2V0LnZhbHVlKSl9LGZ1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS51cGRhdGVNc3VDb252ZXJzaW9uUmF0ZXMoKX1dLFwiYmx1clwiOmZ1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS4kZm9yY2VVcGRhdGUoKX19fSksX2MoJ28tcmVzb3VyY2UnLHthdHRyczp7XCJyZXNvdXJjZVwiOlwibWV0YWxcIn19KV0sMSldKTpfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwiaW5wdXRzXCJ9LFtfYygnc3BhbicsW19jKCdvLXJlc291cmNlJyx7YXR0cnM6e1wicmVzb3VyY2VcIjpcIm1ldGFsXCJ9fSksX2MoJ2lucHV0Jyx7ZGlyZWN0aXZlczpbe25hbWU6XCJtb2RlbFwiLHJhd05hbWU6XCJ2LW1vZGVsLm51bWJlci5sYXp5XCIsdmFsdWU6KF92bS5kc3UubWV0YWwpLGV4cHJlc3Npb246XCJkc3UubWV0YWxcIixtb2RpZmllcnM6e1wibnVtYmVyXCI6dHJ1ZSxcImxhenlcIjp0cnVlfX1dLGF0dHJzOntcInR5cGVcIjpcIm51bWJlclwiLFwibWluXCI6XCIyXCIsXCJtYXhcIjpcIjVcIixcInN0ZXBcIjpcIjAuMDFcIn0sZG9tUHJvcHM6e1widmFsdWVcIjooX3ZtLmRzdS5tZXRhbCl9LG9uOntcImNoYW5nZVwiOltmdW5jdGlvbigkZXZlbnQpe192bS4kc2V0KF92bS5kc3UsIFwibWV0YWxcIiwgX3ZtLl9uKCRldmVudC50YXJnZXQudmFsdWUpKX0sZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLnVwZGF0ZURzdUNvbnZlcnNpb25SYXRlcygpfV0sXCJibHVyXCI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLiRmb3JjZVVwZGF0ZSgpfX19KSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwiZXF1YWwgbWRpIG1kaS1lcXVhbFwifSksX2MoJ2lucHV0Jyx7YXR0cnM6e1widHlwZVwiOlwibnVtYmVyXCIsXCJyZWFkb25seVwiOlwiXCJ9LGRvbVByb3BzOntcInZhbHVlXCI6MX19KSxfYygnby1yZXNvdXJjZScse2F0dHJzOntcInJlc291cmNlXCI6XCJkZXV0ZXJpdW1cIn19KV0sMSksX2MoJ3NwYW4nLFtfYygnby1yZXNvdXJjZScse2F0dHJzOntcInJlc291cmNlXCI6XCJjcnlzdGFsXCJ9fSksX2MoJ2lucHV0Jyx7ZGlyZWN0aXZlczpbe25hbWU6XCJtb2RlbFwiLHJhd05hbWU6XCJ2LW1vZGVsLm51bWJlci5sYXp5XCIsdmFsdWU6KF92bS5kc3UuY3J5c3RhbCksZXhwcmVzc2lvbjpcImRzdS5jcnlzdGFsXCIsbW9kaWZpZXJzOntcIm51bWJlclwiOnRydWUsXCJsYXp5XCI6dHJ1ZX19XSxhdHRyczp7XCJ0eXBlXCI6XCJudW1iZXJcIixcIm1pblwiOlwiMVwiLFwibWF4XCI6XCIzXCIsXCJzdGVwXCI6XCIwLjAxXCJ9LGRvbVByb3BzOntcInZhbHVlXCI6KF92bS5kc3UuY3J5c3RhbCl9LG9uOntcImNoYW5nZVwiOltmdW5jdGlvbigkZXZlbnQpe192bS4kc2V0KF92bS5kc3UsIFwiY3J5c3RhbFwiLCBfdm0uX24oJGV2ZW50LnRhcmdldC52YWx1ZSkpfSxmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0udXBkYXRlRHN1Q29udmVyc2lvblJhdGVzKCl9XSxcImJsdXJcIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0uJGZvcmNlVXBkYXRlKCl9fX0pLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJlcXVhbCBtZGkgbWRpLWVxdWFsXCJ9KSxfYygnaW5wdXQnLHthdHRyczp7XCJ0eXBlXCI6XCJudW1iZXJcIixcInJlYWRvbmx5XCI6XCJcIn0sZG9tUHJvcHM6e1widmFsdWVcIjoxfX0pLF9jKCdvLXJlc291cmNlJyx7YXR0cnM6e1wicmVzb3VyY2VcIjpcImRldXRlcml1bVwifX0pXSwxKV0pXSldKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBjbGFzcz1cImNvbnZlcnNpb24tcmF0ZS1zZXR0aW5ncyBmYWtlLXRhYmxlXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImZha2UtdGFibGUtaGVhZGVyXCI+XHJcbiAgICAgICAgICAgIDxzcGFuIHYtdGV4dD1cIiRpMThuLiR0LmV4dGVuc2lvbi5zZXR0aW5ncy5jb21tb24uY29udmVyc2lvblJhdGVzLnRpdGxlXCIgLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmFrZS10YWJsZS1ib2R5XCI+XHJcbiAgICAgICAgICAgIDxzZWxlY3QgOnZhbHVlPVwiY29udmVyc2lvbk1vZGVcIiBAaW5wdXQ9XCJzZXRDb252ZXJzaW9uTW9kZSgkZXZlbnQudGFyZ2V0LnZhbHVlKVwiPlxyXG4gICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIm1zdVwiIHYtdGV4dD1cImAkeyRpMThuLiR0LmV4dGVuc2lvbi5zZXR0aW5ncy5jb21tb24uY29udmVyc2lvblJhdGVzLm1zdUxvbmd9ICgkeyRpMThuLiR0LmV4dGVuc2lvbi5jb21tb24ubXN1fSlgXCIgLz5cclxuICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJkc3VcIiB2LXRleHQ9XCJgJHskaTE4bi4kdC5leHRlbnNpb24uc2V0dGluZ3MuY29tbW9uLmNvbnZlcnNpb25SYXRlcy5kc3VMb25nfSAoJHskaTE4bi4kdC5leHRlbnNpb24uY29tbW9uLmRzdX0pYFwiIC8+XHJcbiAgICAgICAgICAgIDwvc2VsZWN0PlxyXG5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dHNcIiB2LWlmPVwiY29udmVyc2lvbk1vZGUgPT0gJ21zdSdcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxvLXJlc291cmNlIHJlc291cmNlPVwiY3J5c3RhbFwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiA6dmFsdWU9XCIxXCIgcmVhZG9ubHkgLz5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVxdWFsIG1kaSBtZGktZXF1YWxcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgdi1tb2RlbC5udW1iZXIubGF6eT1cIm1zdS5jcnlzdGFsXCIgQGNoYW5nZT1cInVwZGF0ZU1zdUNvbnZlcnNpb25SYXRlcygpXCIgbWluPVwiMVwiIG1heD1cIjNcIiBzdGVwPVwiMC4wMVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPG8tcmVzb3VyY2UgcmVzb3VyY2U9XCJtZXRhbFwiIC8+XHJcbiAgICAgICAgICAgICAgICA8L3NwYW4+XHJcblxyXG4gICAgICAgICAgICAgICAgPHNwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPG8tcmVzb3VyY2UgcmVzb3VyY2U9XCJkZXV0ZXJpdW1cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgOnZhbHVlPVwiMVwiIHJlYWRvbmx5IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcXVhbCBtZGkgbWRpLWVxdWFsXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIHYtbW9kZWwubnVtYmVyLmxhenk9XCJtc3UuZGV1dGVyaXVtXCIgQGNoYW5nZT1cInVwZGF0ZU1zdUNvbnZlcnNpb25SYXRlcygpXCIgbWluPVwiMlwiIG1heD1cIjVcIiBzdGVwPVwiMC4wMVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPG8tcmVzb3VyY2UgcmVzb3VyY2U9XCJtZXRhbFwiIC8+XHJcbiAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dHNcIiB2LWVsc2U+XHJcbiAgICAgICAgICAgICAgICA8c3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8by1yZXNvdXJjZSByZXNvdXJjZT1cIm1ldGFsXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIHYtbW9kZWwubnVtYmVyLmxhenk9XCJkc3UubWV0YWxcIiBAY2hhbmdlPVwidXBkYXRlRHN1Q29udmVyc2lvblJhdGVzKClcIiBtaW49XCIyXCIgbWF4PVwiNVwiIHN0ZXA9XCIwLjAxXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVxdWFsIG1kaSBtZGktZXF1YWxcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgOnZhbHVlPVwiMVwiIHJlYWRvbmx5IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPG8tcmVzb3VyY2UgcmVzb3VyY2U9XCJkZXV0ZXJpdW1cIiAvPlxyXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxyXG5cclxuICAgICAgICAgICAgICAgIDxzcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxvLXJlc291cmNlIHJlc291cmNlPVwiY3J5c3RhbFwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiB2LW1vZGVsLm51bWJlci5sYXp5PVwiZHN1LmNyeXN0YWxcIiBAY2hhbmdlPVwidXBkYXRlRHN1Q29udmVyc2lvblJhdGVzKClcIiBtaW49XCIxXCIgbWF4PVwiM1wiIHN0ZXA9XCIwLjAxXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVxdWFsIG1kaSBtZGktZXF1YWxcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgOnZhbHVlPVwiMVwiIHJlYWRvbmx5IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPG8tcmVzb3VyY2UgcmVzb3VyY2U9XCJkZXV0ZXJpdW1cIiAvPlxyXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQgbGFuZz1cInRzXCI+XHJcbiAgICBpbXBvcnQgeyBSZXNvdXJjZUNvbnZlcnNpb25Nb2RlIH0gZnJvbSAnQC9zaGFyZWQvbW9kZWxzL3NldHRpbmdzL1NldHRpbmdzJztcclxuICAgIGltcG9ydCB7IENvbXBvbmVudCwgUHJvcCwgVnVlLCBXYXRjaCB9IGZyb20gJ3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3InO1xyXG4gICAgaW1wb3J0IHsgU2V0dGluZ3NEYXRhTW9kdWxlIH0gZnJvbSAnLi4vLi4vZGF0YS9TZXR0aW5nc0RhdGFNb2R1bGUnO1xyXG5cclxuICAgIEBDb21wb25lbnQoe30pXHJcbiAgICBleHBvcnQgZGVmYXVsdCBjbGFzcyBDb252ZXJzaW9uUmF0ZVNldHRpbmdzIGV4dGVuZHMgVnVlIHtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBtc3UgPSB7XHJcbiAgICAgICAgICAgIGNyeXN0YWw6IDIsXHJcbiAgICAgICAgICAgIGRldXRlcml1bTogMyxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgZHN1ID0ge1xyXG4gICAgICAgICAgICBtZXRhbDogMyxcclxuICAgICAgICAgICAgY3J5c3RhbDogMixcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBwcml2YXRlIGdldCBtc3VSYXRlcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFNldHRpbmdzRGF0YU1vZHVsZS5zZXR0aW5ncy5jb252ZXJzaW9uUmF0ZXMubXN1O1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcml2YXRlIGdldCBkc3VSYXRlcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFNldHRpbmdzRGF0YU1vZHVsZS5zZXR0aW5ncy5jb252ZXJzaW9uUmF0ZXMuZHN1O1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcml2YXRlIGdldCBjb252ZXJzaW9uTW9kZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFNldHRpbmdzRGF0YU1vZHVsZS5zZXR0aW5ncy5jb252ZXJzaW9uUmF0ZXMubW9kZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc2V0Q29udmVyc2lvbk1vZGUobW9kZTogUmVzb3VyY2VDb252ZXJzaW9uTW9kZSkge1xyXG4gICAgICAgICAgICBTZXR0aW5nc0RhdGFNb2R1bGUudXBkYXRlU2V0dGluZ3Moe1xyXG4gICAgICAgICAgICAgICAgLi4uU2V0dGluZ3NEYXRhTW9kdWxlLnNldHRpbmdzLFxyXG4gICAgICAgICAgICAgICAgY29udmVyc2lvblJhdGVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLi4uU2V0dGluZ3NEYXRhTW9kdWxlLnNldHRpbmdzLmNvbnZlcnNpb25SYXRlcyxcclxuICAgICAgICAgICAgICAgICAgICBtb2RlLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBAV2F0Y2goJ21zdVJhdGVzJywgeyBpbW1lZGlhdGU6IHRydWUgfSlcclxuICAgICAgICBwcml2YXRlIG9uTXN1UmF0ZXNDaGFuZ2VkKCkge1xyXG4gICAgICAgICAgICBjb25zdCB7IGNyeXN0YWwsIGRldXRlcml1bSB9ID0gdGhpcy5tc3VSYXRlcztcclxuICAgICAgICAgICAgdGhpcy5tc3UuY3J5c3RhbCA9IGNyeXN0YWw7XHJcbiAgICAgICAgICAgIHRoaXMubXN1LmRldXRlcml1bSA9IGRldXRlcml1bTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdXBkYXRlTXN1Q29udmVyc2lvblJhdGVzKCkge1xyXG4gICAgICAgICAgICBTZXR0aW5nc0RhdGFNb2R1bGUudXBkYXRlU2V0dGluZ3Moe1xyXG4gICAgICAgICAgICAgICAgLi4uU2V0dGluZ3NEYXRhTW9kdWxlLnNldHRpbmdzLFxyXG4gICAgICAgICAgICAgICAgY29udmVyc2lvblJhdGVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLi4uU2V0dGluZ3NEYXRhTW9kdWxlLnNldHRpbmdzLmNvbnZlcnNpb25SYXRlcyxcclxuICAgICAgICAgICAgICAgICAgICBtc3U6IHRoaXMubXN1LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBAV2F0Y2goJ2RzdVJhdGVzJywgeyBpbW1lZGlhdGU6IHRydWUgfSlcclxuICAgICAgICBwcml2YXRlIG9uRHN1UmF0ZXNDaGFuZ2VkKCkge1xyXG4gICAgICAgICAgICBjb25zdCB7IGNyeXN0YWwsIG1ldGFsIH0gPSB0aGlzLmRzdVJhdGVzO1xyXG4gICAgICAgICAgICB0aGlzLmRzdS5jcnlzdGFsID0gY3J5c3RhbDtcclxuICAgICAgICAgICAgdGhpcy5kc3UubWV0YWwgPSBtZXRhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdXBkYXRlRHN1Q29udmVyc2lvblJhdGVzKCkge1xyXG4gICAgICAgICAgICBTZXR0aW5nc0RhdGFNb2R1bGUudXBkYXRlU2V0dGluZ3Moe1xyXG4gICAgICAgICAgICAgICAgLi4uU2V0dGluZ3NEYXRhTW9kdWxlLnNldHRpbmdzLFxyXG4gICAgICAgICAgICAgICAgY29udmVyc2lvblJhdGVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLi4uU2V0dGluZ3NEYXRhTW9kdWxlLnNldHRpbmdzLmNvbnZlcnNpb25SYXRlcyxcclxuICAgICAgICAgICAgICAgICAgICBkc3U6IHRoaXMuZHN1LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG48L3NjcmlwdD5cclxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPlxyXG4gICAgLmNvbnZlcnNpb24tcmF0ZS1zZXR0aW5ncyB7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBjb2x1bW4tZ2FwOiAxNnB4O1xyXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgbWF4LXdpZHRoOiA0MDBweDtcclxuXHJcbiAgICAgICAgLmlucHV0cyB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICAgICAgICAgIHJvdy1nYXA6IDhweDtcclxuXHJcbiAgICAgICAgICAgID4gKiB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnB1dFt0eXBlPVwibnVtYmVyXCJdIHtcclxuICAgICAgICAgICAgd2lkdGg6IDYwcHg7XHJcbiAgICAgICAgICAgICY6cmVhZC1vbmx5IHtcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHJnYmEodmFyKC0tY29sb3IpLCAwLjEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAuZXF1YWwge1xyXG4gICAgICAgICAgICBmb250LXNpemU6IDFyZW07XHJcbiAgICAgICAgICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLmZha2UtdGFibGUge1xyXG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEodmFyKC0tY29sb3IpLCAwLjUpO1xyXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICAgICAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgICAgIHdpZHRoOiBmaXQtY29udGVudDtcclxuXHJcbiAgICAgICAgJi1oZWFkZXIge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiBibGFjayBsaW5lYXItZ3JhZGllbnQoMGRlZywgcmdiYSh2YXIoLS1jb2xvciksIDAuNSksIHJnYmEodmFyKC0tY29sb3IpLCAwLjcpKTtcclxuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmLWhlYWRlcixcclxuICAgICAgICAmLWJvZHkge1xyXG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDhweDtcclxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICYtYm9keSB7XHJcbiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBzdGFydDtcclxuICAgICAgICAgICAgcm93LWdhcDogOHB4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuPC9zdHlsZT4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ29udmVyc2lvblJhdGVTZXR0aW5ncy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RocmVhZC1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Db252ZXJzaW9uUmF0ZVNldHRpbmdzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vQ29udmVyc2lvblJhdGVTZXR0aW5ncy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MTNjZGU3ZGQmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQ29udmVyc2lvblJhdGVTZXR0aW5ncy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0NvbnZlcnNpb25SYXRlU2V0dGluZ3MudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL0NvbnZlcnNpb25SYXRlU2V0dGluZ3MudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9MTNjZGU3ZGQmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCIxM2NkZTdkZFwiLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZha2UtdGFibGUgZXhwZWRpdGlvbi1zaGlwLXJlc291cmNlLXVuaXRzLWZhY3Rvci1zZXR0aW5nc1wifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZmFrZS10YWJsZS1oZWFkZXJcIn0sW19jKCdzcGFuJyx7ZG9tUHJvcHM6e1widGV4dENvbnRlbnRcIjpfdm0uX3MoX3ZtLiRpMThuLiR0LmV4dGVuc2lvbi5zZXR0aW5ncy5leHBlZGl0aW9ucy5yZXNvdXJjZVVuaXRGYWN0b3JzT2ZTaGlwRm91bmRPbkV4cGVkaXRpb25zKX19KV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZha2UtdGFibGUtYm9keVwifSxbX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcImlucHV0c1wifSxbX2MoJ3NwYW4nLFtfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwidHdvLXJlc291cmNlc1wifSxbX2MoJ28tcmVzb3VyY2UnLHthdHRyczp7XCJyZXNvdXJjZVwiOlwibWV0YWxcIn19KSxfYygnby1yZXNvdXJjZScse2F0dHJzOntcInJlc291cmNlXCI6XCJjcnlzdGFsXCJ9fSldLDEpLF9jKCdpbnB1dCcse2RpcmVjdGl2ZXM6W3tuYW1lOlwibW9kZWxcIixyYXdOYW1lOlwidi1tb2RlbC5udW1iZXIubGF6eVwiLHZhbHVlOihfdm0uZmFjdG9yKSxleHByZXNzaW9uOlwiZmFjdG9yXCIsbW9kaWZpZXJzOntcIm51bWJlclwiOnRydWUsXCJsYXp5XCI6dHJ1ZX19XSxhdHRyczp7XCJ0eXBlXCI6XCJudW1iZXJcIixcIm1pblwiOlwiMFwiLFwibWF4XCI6XCIxXCIsXCJzdGVwXCI6XCIwLjAxXCJ9LGRvbVByb3BzOntcInZhbHVlXCI6KF92bS5mYWN0b3IpfSxvbjp7XCJjaGFuZ2VcIjpbZnVuY3Rpb24oJGV2ZW50KXtfdm0uZmFjdG9yPV92bS5fbigkZXZlbnQudGFyZ2V0LnZhbHVlKX0sZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLnVwZGF0ZUZhY3RvcnMoKX1dLFwiZm9jdXNcIjpmdW5jdGlvbigkZXZlbnQpe192bS5pc0ZvY3VzZWQgPSB0cnVlfSxcImJsdXJcIjpbZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLm9uQmx1cigpfSxmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0uJGZvcmNlVXBkYXRlKCl9XX19KV0pLF9jKCdzcGFuJyxbX2MoJ28tcmVzb3VyY2UnLHthdHRyczp7XCJyZXNvdXJjZVwiOlwiZGV1dGVyaXVtXCJ9fSksX2MoJ2lucHV0Jyx7ZGlyZWN0aXZlczpbe25hbWU6XCJtb2RlbFwiLHJhd05hbWU6XCJ2LW1vZGVsLm51bWJlci5sYXp5XCIsdmFsdWU6KF92bS5kZXV0ZXJpdW1GYWN0b3IpLGV4cHJlc3Npb246XCJkZXV0ZXJpdW1GYWN0b3JcIixtb2RpZmllcnM6e1wibnVtYmVyXCI6dHJ1ZSxcImxhenlcIjp0cnVlfX1dLGF0dHJzOntcInR5cGVcIjpcIm51bWJlclwiLFwibWluXCI6XCIwXCIsXCJtYXhcIjpcIjFcIixcInN0ZXBcIjpcIjAuMDFcIn0sZG9tUHJvcHM6e1widmFsdWVcIjooX3ZtLmRldXRlcml1bUZhY3Rvcil9LG9uOntcImNoYW5nZVwiOltmdW5jdGlvbigkZXZlbnQpe192bS5kZXV0ZXJpdW1GYWN0b3I9X3ZtLl9uKCRldmVudC50YXJnZXQudmFsdWUpfSxmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0udXBkYXRlRmFjdG9ycygpfV0sXCJmb2N1c1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLmlzRm9jdXNlZCA9IHRydWV9LFwiYmx1clwiOltmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0ub25CbHVyKCl9LGZ1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS4kZm9yY2VVcGRhdGUoKX1dfX0pXSwxKV0pXSldKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBjbGFzcz1cImZha2UtdGFibGUgZXhwZWRpdGlvbi1zaGlwLXJlc291cmNlLXVuaXRzLWZhY3Rvci1zZXR0aW5nc1wiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmYWtlLXRhYmxlLWhlYWRlclwiPlxyXG4gICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgdi10ZXh0PVwiJGkxOG4uJHQuZXh0ZW5zaW9uLnNldHRpbmdzLmV4cGVkaXRpb25zLnJlc291cmNlVW5pdEZhY3RvcnNPZlNoaXBGb3VuZE9uRXhwZWRpdGlvbnNcIlxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmYWtlLXRhYmxlLWJvZHlcIj5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dHNcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidHdvLXJlc291cmNlc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8by1yZXNvdXJjZSByZXNvdXJjZT1cIm1ldGFsXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPG8tcmVzb3VyY2UgcmVzb3VyY2U9XCJjcnlzdGFsXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbC5udW1iZXIubGF6eT1cImZhY3RvclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEBjaGFuZ2U9XCJ1cGRhdGVGYWN0b3JzKClcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBAZm9jdXM9XCJpc0ZvY3VzZWQgPSB0cnVlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgQGJsdXI9XCJvbkJsdXIoKVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbj1cIjBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXg9XCIxXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcD1cIjAuMDFcIlxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L3NwYW4+XHJcblxyXG4gICAgICAgICAgICAgICAgPHNwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPG8tcmVzb3VyY2UgcmVzb3VyY2U9XCJkZXV0ZXJpdW1cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbC5udW1iZXIubGF6eT1cImRldXRlcml1bUZhY3RvclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEBjaGFuZ2U9XCJ1cGRhdGVGYWN0b3JzKClcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBAZm9jdXM9XCJpc0ZvY3VzZWQgPSB0cnVlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgQGJsdXI9XCJvbkJsdXIoKVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbj1cIjBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXg9XCIxXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcD1cIjAuMDFcIlxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdCBsYW5nPVwidHNcIj5cclxuICAgIGltcG9ydCB7IENvbXBvbmVudCwgUHJvcCwgVnVlLCBXYXRjaCB9IGZyb20gJ3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3InO1xyXG4gICAgaW1wb3J0IHsgU2V0dGluZ3NEYXRhTW9kdWxlIH0gZnJvbSAnLi4vLi4vZGF0YS9TZXR0aW5nc0RhdGFNb2R1bGUnO1xyXG5cclxuICAgIEBDb21wb25lbnQoe30pXHJcbiAgICBleHBvcnQgZGVmYXVsdCBjbGFzcyBFeHBlZGl0aW9uU2hpcFJlc291cmNlVW5pdHNGYWN0b3JTZXR0aW5ncyBleHRlbmRzIFZ1ZSB7XHJcbiAgICAgICAgcHJpdmF0ZSBmYWN0b3IgPSAxO1xyXG4gICAgICAgIHByaXZhdGUgZGV1dGVyaXVtRmFjdG9yID0gMTtcclxuICAgICAgICBwcml2YXRlIGlzRm9jdXNlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBwcml2YXRlIGdldCBmYWN0b3JzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gU2V0dGluZ3NEYXRhTW9kdWxlLnNldHRpbmdzLmV4cGVkaXRpb25Gb3VuZFNoaXBzUmVzb3VyY2VVbml0cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIEBXYXRjaCgnZmFjdG9ycycsIHsgaW1tZWRpYXRlOiB0cnVlIH0pXHJcbiAgICAgICAgcHJpdmF0ZSBvbkZhY3RvcnNDaGFuZ2VkKCkge1xyXG4gICAgICAgICAgICBjb25zdCB7IGZhY3RvciwgZGV1dGVyaXVtRmFjdG9yIH0gPSB0aGlzLmZhY3RvcnM7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNGb2N1c2VkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZhY3RvciA9IGZhY3RvcjtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGV1dGVyaXVtRmFjdG9yID0gZGV1dGVyaXVtRmFjdG9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHVwZGF0ZUZhY3RvcnMoKSB7XHJcbiAgICAgICAgICAgIFNldHRpbmdzRGF0YU1vZHVsZS51cGRhdGVTZXR0aW5ncyh7XHJcbiAgICAgICAgICAgICAgICAuLi5TZXR0aW5nc0RhdGFNb2R1bGUuc2V0dGluZ3MsXHJcbiAgICAgICAgICAgICAgICBleHBlZGl0aW9uRm91bmRTaGlwc1Jlc291cmNlVW5pdHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBmYWN0b3I6IHRoaXMuZmFjdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIGRldXRlcml1bUZhY3RvcjogdGhpcy5kZXV0ZXJpdW1GYWN0b3IsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgb25CbHVyKCkge1xyXG4gICAgICAgICAgICB0aGlzLmlzRm9jdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLm9uRmFjdG9yc0NoYW5nZWQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XHJcbiAgICAuZXhwZWRpdGlvbi1zaGlwLXJlc291cmNlLXVuaXRzLWZhY3Rvci1zZXR0aW5ncyB7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgIGNvbHVtbi1nYXA6IDE2cHg7XHJcbiAgICAgICAgbWF4LXdpZHRoOiA0MDBweDtcclxuXHJcbiAgICAgICAgPiAqIHtcclxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlucHV0IHtcclxuICAgICAgICAgICAgd2lkdGg6IDYwcHg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAuaW5wdXRzIHtcclxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICAgICAgY29sdW1uLWdhcDogOHB4O1xyXG5cclxuICAgICAgICAgICAgPiAqIHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLnR3by1yZXNvdXJjZXMge1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG5cclxuICAgICAgICA+IC5vLXJlc291cmNlOmZpcnN0LW9mLXR5cGUge1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICAgIGNsaXAtcGF0aDogcG9seWdvbigwIDAsIDAgMTAwJSwgMTAwJSAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgPiAuby1yZXNvdXJjZTpsYXN0LW9mLXR5cGUge1xyXG4gICAgICAgICAgICBjbGlwLXBhdGg6IHBvbHlnb24oMTAwJSAxMDAlLCAwIDEwMCUsIDEwMCUgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC5mYWtlLXRhYmxlIHtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKHZhcigtLWNvbG9yKSwgMC41KTtcclxuICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcclxuICAgICAgICB3aWR0aDogZml0LWNvbnRlbnQ7XHJcblxyXG4gICAgICAgICYtaGVhZGVyIHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZDogYmxhY2tcclxuICAgICAgICAgICAgICAgIGxpbmVhci1ncmFkaWVudChcclxuICAgICAgICAgICAgICAgICAgICAwZGVnLFxyXG4gICAgICAgICAgICAgICAgICAgIHJnYmEodmFyKC0tY29sb3IpLCAwLjUpLFxyXG4gICAgICAgICAgICAgICAgICAgIHJnYmEodmFyKC0tY29sb3IpLCAwLjcpXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICYtaGVhZGVyLFxyXG4gICAgICAgICYtYm9keSB7XHJcbiAgICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICAgICAgcGFkZGluZzogOHB4O1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuPC9zdHlsZT4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vRXhwZWRpdGlvblNoaXBSZXNvdXJjZVVuaXRzRmFjdG9yU2V0dGluZ3MudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vRXhwZWRpdGlvblNoaXBSZXNvdXJjZVVuaXRzRmFjdG9yU2V0dGluZ3MudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9FeHBlZGl0aW9uU2hpcFJlc291cmNlVW5pdHNGYWN0b3JTZXR0aW5ncy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MTYwZGI4MzEmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vRXhwZWRpdGlvblNoaXBSZXNvdXJjZVVuaXRzRmFjdG9yU2V0dGluZ3MudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9FeHBlZGl0aW9uU2hpcFJlc291cmNlVW5pdHNGYWN0b3JTZXR0aW5ncy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vRXhwZWRpdGlvblNoaXBSZXNvdXJjZVVuaXRzRmFjdG9yU2V0dGluZ3MudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9MTYwZGI4MzEmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCIxNjBkYjgzMVwiLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZha2UtdGFibGUgZXhwZWRpdGlvbi1zaGlwLXJlc291cmNlLXVuaXRzLWZhY3Rvci1zZXR0aW5nc1wifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZmFrZS10YWJsZS1oZWFkZXJcIn0sW19jKCdzcGFuJyx7ZG9tUHJvcHM6e1widGV4dENvbnRlbnRcIjpfdm0uX3MoX3ZtLiRpMThuLiR0LmV4dGVuc2lvbi5zZXR0aW5ncy5jb21iYXRzLnJlc291cmNlVW5pdEZhY3RvcnNPZkxvc3RTaGlwcyl9fSldKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmYWtlLXRhYmxlLWJvZHlcIn0sW19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJpbnB1dHNcIn0sW19jKCdzcGFuJyxbX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcInR3by1yZXNvdXJjZXNcIn0sW19jKCdvLXJlc291cmNlJyx7YXR0cnM6e1wicmVzb3VyY2VcIjpcIm1ldGFsXCJ9fSksX2MoJ28tcmVzb3VyY2UnLHthdHRyczp7XCJyZXNvdXJjZVwiOlwiY3J5c3RhbFwifX0pXSwxKSxfYygnaW5wdXQnLHtkaXJlY3RpdmVzOlt7bmFtZTpcIm1vZGVsXCIscmF3TmFtZTpcInYtbW9kZWwubnVtYmVyLmxhenlcIix2YWx1ZTooX3ZtLmZhY3RvciksZXhwcmVzc2lvbjpcImZhY3RvclwiLG1vZGlmaWVyczp7XCJudW1iZXJcIjp0cnVlLFwibGF6eVwiOnRydWV9fV0sYXR0cnM6e1widHlwZVwiOlwibnVtYmVyXCIsXCJtaW5cIjpcIjBcIixcIm1heFwiOlwiMVwiLFwic3RlcFwiOlwiMC4wMVwifSxkb21Qcm9wczp7XCJ2YWx1ZVwiOihfdm0uZmFjdG9yKX0sb246e1wiY2hhbmdlXCI6W2Z1bmN0aW9uKCRldmVudCl7X3ZtLmZhY3Rvcj1fdm0uX24oJGV2ZW50LnRhcmdldC52YWx1ZSl9LGZ1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS51cGRhdGVGYWN0b3JzKCl9XSxcImZvY3VzXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uaXNGb2N1c2VkID0gdHJ1ZX0sXCJibHVyXCI6W2Z1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS5vbkJsdXIoKX0sZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLiRmb3JjZVVwZGF0ZSgpfV19fSldKSxfYygnc3BhbicsW19jKCdvLXJlc291cmNlJyx7YXR0cnM6e1wicmVzb3VyY2VcIjpcImRldXRlcml1bVwifX0pLF9jKCdpbnB1dCcse2RpcmVjdGl2ZXM6W3tuYW1lOlwibW9kZWxcIixyYXdOYW1lOlwidi1tb2RlbC5udW1iZXIubGF6eVwiLHZhbHVlOihfdm0uZGV1dGVyaXVtRmFjdG9yKSxleHByZXNzaW9uOlwiZGV1dGVyaXVtRmFjdG9yXCIsbW9kaWZpZXJzOntcIm51bWJlclwiOnRydWUsXCJsYXp5XCI6dHJ1ZX19XSxhdHRyczp7XCJ0eXBlXCI6XCJudW1iZXJcIixcIm1pblwiOlwiMFwiLFwibWF4XCI6XCIxXCIsXCJzdGVwXCI6XCIwLjAxXCJ9LGRvbVByb3BzOntcInZhbHVlXCI6KF92bS5kZXV0ZXJpdW1GYWN0b3IpfSxvbjp7XCJjaGFuZ2VcIjpbZnVuY3Rpb24oJGV2ZW50KXtfdm0uZGV1dGVyaXVtRmFjdG9yPV92bS5fbigkZXZlbnQudGFyZ2V0LnZhbHVlKX0sZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLnVwZGF0ZUZhY3RvcnMoKX1dLFwiZm9jdXNcIjpmdW5jdGlvbigkZXZlbnQpe192bS5pc0ZvY3VzZWQgPSB0cnVlfSxcImJsdXJcIjpbZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLm9uQmx1cigpfSxmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0uJGZvcmNlVXBkYXRlKCl9XX19KV0sMSldKV0pXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cclxuICAgIDxkaXYgY2xhc3M9XCJmYWtlLXRhYmxlIGV4cGVkaXRpb24tc2hpcC1yZXNvdXJjZS11bml0cy1mYWN0b3Itc2V0dGluZ3NcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmFrZS10YWJsZS1oZWFkZXJcIj5cclxuICAgICAgICAgICAgPHNwYW4gdi10ZXh0PVwiJGkxOG4uJHQuZXh0ZW5zaW9uLnNldHRpbmdzLmNvbWJhdHMucmVzb3VyY2VVbml0RmFjdG9yc09mTG9zdFNoaXBzXCIgLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmFrZS10YWJsZS1ib2R5XCI+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXRzXCI+XHJcbiAgICAgICAgICAgICAgICA8c3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInR3by1yZXNvdXJjZXNcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPG8tcmVzb3VyY2UgcmVzb3VyY2U9XCJtZXRhbFwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxvLXJlc291cmNlIHJlc291cmNlPVwiY3J5c3RhbFwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWwubnVtYmVyLmxhenk9XCJmYWN0b3JcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBAY2hhbmdlPVwidXBkYXRlRmFjdG9ycygpXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgQGZvY3VzPVwiaXNGb2N1c2VkID0gdHJ1ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEBibHVyPVwib25CbHVyKClcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW49XCIwXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4PVwiMVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXA9XCIwLjAxXCJcclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxyXG5cclxuICAgICAgICAgICAgICAgIDxzcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxvLXJlc291cmNlIHJlc291cmNlPVwiZGV1dGVyaXVtXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWwubnVtYmVyLmxhenk9XCJkZXV0ZXJpdW1GYWN0b3JcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBAY2hhbmdlPVwidXBkYXRlRmFjdG9ycygpXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgQGZvY3VzPVwiaXNGb2N1c2VkID0gdHJ1ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEBibHVyPVwib25CbHVyKClcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW49XCIwXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4PVwiMVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXA9XCIwLjAxXCJcclxuICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQgbGFuZz1cInRzXCI+XHJcbiAgICBpbXBvcnQgeyBDb21wb25lbnQsIFByb3AsIFZ1ZSwgV2F0Y2ggfSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJztcclxuICAgIGltcG9ydCB7IFNldHRpbmdzRGF0YU1vZHVsZSB9IGZyb20gJy4uLy4uL2RhdGEvU2V0dGluZ3NEYXRhTW9kdWxlJztcclxuXHJcbiAgICBAQ29tcG9uZW50KHt9KVxyXG4gICAgZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXhwZWRpdGlvblNoaXBSZXNvdXJjZVVuaXRzRmFjdG9yU2V0dGluZ3MgZXh0ZW5kcyBWdWUge1xyXG4gICAgICAgIHByaXZhdGUgZmFjdG9yID0gMTtcclxuICAgICAgICBwcml2YXRlIGRldXRlcml1bUZhY3RvciA9IDE7XHJcbiAgICAgICAgcHJpdmF0ZSBpc0ZvY3VzZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBnZXQgZmFjdG9ycygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFNldHRpbmdzRGF0YU1vZHVsZS5zZXR0aW5ncy5sb3N0U2hpcHNSZXNvdXJjZVVuaXRzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgQFdhdGNoKCdmYWN0b3JzJywgeyBpbW1lZGlhdGU6IHRydWUgfSlcclxuICAgICAgICBwcml2YXRlIG9uRmFjdG9yc0NoYW5nZWQoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgZmFjdG9yLCBkZXV0ZXJpdW1GYWN0b3IgfSA9IHRoaXMuZmFjdG9ycztcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0ZvY3VzZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmFjdG9yID0gZmFjdG9yO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZXV0ZXJpdW1GYWN0b3IgPSBkZXV0ZXJpdW1GYWN0b3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdXBkYXRlRmFjdG9ycygpIHtcclxuICAgICAgICAgICAgU2V0dGluZ3NEYXRhTW9kdWxlLnVwZGF0ZVNldHRpbmdzKHtcclxuICAgICAgICAgICAgICAgIC4uLlNldHRpbmdzRGF0YU1vZHVsZS5zZXR0aW5ncyxcclxuICAgICAgICAgICAgICAgIGxvc3RTaGlwc1Jlc291cmNlVW5pdHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBmYWN0b3I6IHRoaXMuZmFjdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIGRldXRlcml1bUZhY3RvcjogdGhpcy5kZXV0ZXJpdW1GYWN0b3IsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgb25CbHVyKCkge1xyXG4gICAgICAgICAgICB0aGlzLmlzRm9jdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLm9uRmFjdG9yc0NoYW5nZWQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XHJcbiAgICAuZXhwZWRpdGlvbi1zaGlwLXJlc291cmNlLXVuaXRzLWZhY3Rvci1zZXR0aW5ncyB7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgIGNvbHVtbi1nYXA6IDE2cHg7XHJcbiAgICAgICAgbWF4LXdpZHRoOiA0MDBweDtcclxuXHJcbiAgICAgICAgPiAqIHtcclxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlucHV0IHtcclxuICAgICAgICAgICAgd2lkdGg6IDYwcHg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAuaW5wdXRzIHtcclxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICAgICAgY29sdW1uLWdhcDogOHB4O1xyXG5cclxuICAgICAgICAgICAgPiAqIHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLnR3by1yZXNvdXJjZXMge1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG5cclxuICAgICAgICA+IC5vLXJlc291cmNlOmZpcnN0LW9mLXR5cGUge1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICAgIGNsaXAtcGF0aDogcG9seWdvbigwIDAsIDAgMTAwJSwgMTAwJSAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgPiAuby1yZXNvdXJjZTpsYXN0LW9mLXR5cGUge1xyXG4gICAgICAgICAgICBjbGlwLXBhdGg6IHBvbHlnb24oMTAwJSAxMDAlLCAwIDEwMCUsIDEwMCUgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC5mYWtlLXRhYmxlIHtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKHZhcigtLWNvbG9yKSwgMC41KTtcclxuICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcclxuICAgICAgICB3aWR0aDogZml0LWNvbnRlbnQ7XHJcblxyXG4gICAgICAgICYtaGVhZGVyIHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZDogYmxhY2tcclxuICAgICAgICAgICAgICAgIGxpbmVhci1ncmFkaWVudChcclxuICAgICAgICAgICAgICAgICAgICAwZGVnLFxyXG4gICAgICAgICAgICAgICAgICAgIHJnYmEodmFyKC0tY29sb3IpLCAwLjUpLFxyXG4gICAgICAgICAgICAgICAgICAgIHJnYmEodmFyKC0tY29sb3IpLCAwLjcpXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICYtaGVhZGVyLFxyXG4gICAgICAgICYtYm9keSB7XHJcbiAgICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICAgICAgcGFkZGluZzogOHB4O1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuPC9zdHlsZT4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTG9zdFNoaXBSZXNvdXJjZVVuaXRzRmFjdG9yU2V0dGluZ3MudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTG9zdFNoaXBSZXNvdXJjZVVuaXRzRmFjdG9yU2V0dGluZ3MudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9Mb3N0U2hpcFJlc291cmNlVW5pdHNGYWN0b3JTZXR0aW5ncy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9N2IzYjFiYzkmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vTG9zdFNoaXBSZXNvdXJjZVVuaXRzRmFjdG9yU2V0dGluZ3MudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9Mb3N0U2hpcFJlc291cmNlVW5pdHNGYWN0b3JTZXR0aW5ncy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vTG9zdFNoaXBSZXNvdXJjZVVuaXRzRmFjdG9yU2V0dGluZ3MudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9N2IzYjFiYzkmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCI3YjNiMWJjOVwiLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZha2UtdGFibGVcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZha2UtdGFibGUtaGVhZGVyXCJ9LFtfYygnc3Bhbicse2RvbVByb3BzOntcInRleHRDb250ZW50XCI6X3ZtLl9zKF92bS4kaTE4bi4kdC5leHRlbnNpb24uc2V0dGluZ3Muc2hvd0NvbnZlcnRlZFVuaXRzSW5UYWJsZXMudGl0bGUpfX0pXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZmFrZS10YWJsZS1ib2R5XCJ9LFtfYygnY2hlY2tib3gnLHthdHRyczp7XCJ2YWx1ZVwiOl92bS5zaG93Q2VsbHNXaXRoQ29udmVydGVkUmVzb3VyY2VVbml0cyxcImxhYmVsXCI6X3ZtLiRpMThuLiR0LmV4dGVuc2lvbi5zZXR0aW5ncy5zaG93Q29udmVydGVkVW5pdHNJblRhYmxlcy5sYWJlbH0sb246e1wiaW5wdXRcIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0udG9nZ2xlKCRldmVudCl9fX0pLF92bS5fdChcImRlZmF1bHRcIildLDIpXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cclxuICAgIDxkaXYgY2xhc3M9XCJmYWtlLXRhYmxlXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImZha2UtdGFibGUtaGVhZGVyXCI+XHJcbiAgICAgICAgICAgIDxzcGFuIHYtdGV4dD1cIiRpMThuLiR0LmV4dGVuc2lvbi5zZXR0aW5ncy5zaG93Q29udmVydGVkVW5pdHNJblRhYmxlcy50aXRsZVwiIC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImZha2UtdGFibGUtYm9keVwiPlxyXG4gICAgICAgICAgICA8Y2hlY2tib3ggOnZhbHVlPVwic2hvd0NlbGxzV2l0aENvbnZlcnRlZFJlc291cmNlVW5pdHNcIiBAaW5wdXQ9XCJ0b2dnbGUoJGV2ZW50KVwiIDpsYWJlbD1cIiRpMThuLiR0LmV4dGVuc2lvbi5zZXR0aW5ncy5zaG93Q29udmVydGVkVW5pdHNJblRhYmxlcy5sYWJlbFwiIC8+XHJcbiAgICAgICAgICAgIDxzbG90IC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQgbGFuZz1cInRzXCI+XHJcbiAgICBpbXBvcnQgeyBDb21wb25lbnQsIFByb3AsIFZ1ZSB9IGZyb20gJ3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3InO1xyXG4gICAgaW1wb3J0IHsgU2V0dGluZ3NEYXRhTW9kdWxlIH0gZnJvbSAnLi4vLi4vZGF0YS9TZXR0aW5nc0RhdGFNb2R1bGUnO1xyXG5cclxuICAgIEBDb21wb25lbnQoe30pXHJcbiAgICBleHBvcnQgZGVmYXVsdCBjbGFzcyBTaG93Q29udmVydGVkUmVzb3VyY2VzSW5DZWxsc1NldHRpbmdzIGV4dGVuZHMgVnVlIHtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBnZXQgc2hvd0NlbGxzV2l0aENvbnZlcnRlZFJlc291cmNlVW5pdHMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBTZXR0aW5nc0RhdGFNb2R1bGUuc2V0dGluZ3Muc2hvd0NlbGxzV2l0aENvbnZlcnRlZFJlc291cmNlVW5pdHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHRvZ2dsZShzaG93Q2VsbHNXaXRoQ29udmVydGVkUmVzb3VyY2VVbml0czogYm9vbGVhbikge1xyXG4gICAgICAgICAgICBTZXR0aW5nc0RhdGFNb2R1bGUudXBkYXRlU2V0dGluZ3Moe1xyXG4gICAgICAgICAgICAgICAgLi4uU2V0dGluZ3NEYXRhTW9kdWxlLnNldHRpbmdzLFxyXG4gICAgICAgICAgICAgICAgc2hvd0NlbGxzV2l0aENvbnZlcnRlZFJlc291cmNlVW5pdHMsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XHJcbiAgICAuZmFrZS10YWJsZSB7XHJcbiAgICAgICAgbWF4LXdpZHRoOiA0MDBweDtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKHZhcigtLWNvbG9yKSwgMC41KTtcclxuICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcclxuICAgICAgICB3aWR0aDogZml0LWNvbnRlbnQ7XHJcblxyXG4gICAgICAgICYtaGVhZGVyIHtcclxuICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiBibGFjayBsaW5lYXItZ3JhZGllbnQoMGRlZywgcmdiYSh2YXIoLS1jb2xvciksIDAuNSksIHJnYmEodmFyKC0tY29sb3IpLCAwLjcpKTtcclxuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDhweDtcclxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICYtYm9keSB7XHJcbiAgICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICAgICAgcGFkZGluZzogOHB4O1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc3R5bGU+IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTQwWzBdLnJ1bGVzWzBdLnVzZVswXSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdGhyZWFkLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTQwWzBdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzBdLnJ1bGVzWzBdLnVzZVswXSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1Nob3dDb252ZXJ0ZWRSZXNvdXJjZXNJbkNlbGxzU2V0dGluZ3MudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vU2hvd0NvbnZlcnRlZFJlc291cmNlc0luQ2VsbHNTZXR0aW5ncy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL1Nob3dDb252ZXJ0ZWRSZXNvdXJjZXNJbkNlbGxzU2V0dGluZ3MudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTkwNDU3ZGMyJnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL1Nob3dDb252ZXJ0ZWRSZXNvdXJjZXNJbkNlbGxzU2V0dGluZ3MudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9TaG93Q29udmVydGVkUmVzb3VyY2VzSW5DZWxsc1NldHRpbmdzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9TaG93Q29udmVydGVkUmVzb3VyY2VzSW5DZWxsc1NldHRpbmdzLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTkwNDU3ZGMyJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiOTA0NTdkYzJcIixcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmYWtlLXRhYmxlXCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmYWtlLXRhYmxlLWhlYWRlclwifSxbX2MoJ3NwYW4nLHtkb21Qcm9wczp7XCJ0ZXh0Q29udGVudFwiOl92bS5fcyhfdm0uJGkxOG4uJHQuZXh0ZW5zaW9uLnNldHRpbmdzLnJlc291cmNlQmFsYW5jZS5kZXRhaWxlZFJlc291cmNlQmFsYW5jZS5oZWFkZXIpfX0pXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZmFrZS10YWJsZS1ib2R5XCJ9LFtfYygnY2hlY2tib3gnLHthdHRyczp7XCJ2YWx1ZVwiOl92bS5zaG93RGV0YWlsZWRCcmVha2Rvd24sXCJsYWJlbFwiOl92bS4kaTE4bi4kdC5leHRlbnNpb24uc2V0dGluZ3MucmVzb3VyY2VCYWxhbmNlLmRldGFpbGVkUmVzb3VyY2VCYWxhbmNlLmNoZWNrYm94TGFiZWx9LG9uOntcImlucHV0XCI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLnRvZ2dsZURldGFpbGVkQnJlYWtkb3duKCRldmVudCl9fX0pXSwxKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XHJcbiAgICA8ZGl2IGNsYXNzPVwiZmFrZS10YWJsZVwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmYWtlLXRhYmxlLWhlYWRlclwiPlxyXG4gICAgICAgICAgICA8c3BhbiB2LXRleHQ9XCIkaTE4bi4kdC5leHRlbnNpb24uc2V0dGluZ3MucmVzb3VyY2VCYWxhbmNlLmRldGFpbGVkUmVzb3VyY2VCYWxhbmNlLmhlYWRlclwiIC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImZha2UtdGFibGUtYm9keVwiPlxyXG4gICAgICAgICAgICA8Y2hlY2tib3hcclxuICAgICAgICAgICAgICAgIDp2YWx1ZT1cInNob3dEZXRhaWxlZEJyZWFrZG93blwiXHJcbiAgICAgICAgICAgICAgICBAaW5wdXQ9XCJ0b2dnbGVEZXRhaWxlZEJyZWFrZG93bigkZXZlbnQpXCJcclxuICAgICAgICAgICAgICAgIDpsYWJlbD1cIiRpMThuLiR0LmV4dGVuc2lvbi5zZXR0aW5ncy5yZXNvdXJjZUJhbGFuY2UuZGV0YWlsZWRSZXNvdXJjZUJhbGFuY2UuY2hlY2tib3hMYWJlbFwiXHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQgbGFuZz1cInRzXCI+XHJcbiAgICBpbXBvcnQgeyBDb21wb25lbnQsIFByb3AsIFZ1ZSB9IGZyb20gJ3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3InO1xyXG4gICAgaW1wb3J0IHsgU2V0dGluZ3NEYXRhTW9kdWxlIH0gZnJvbSAnLi4vLi4vLi4vZGF0YS9TZXR0aW5nc0RhdGFNb2R1bGUnO1xyXG5cclxuICAgIEBDb21wb25lbnQoe30pXHJcbiAgICBleHBvcnQgZGVmYXVsdCBjbGFzcyBEZXRhaWxlZFJlc291cmNlQmFsYW5jZVNldHRpbmdzIGV4dGVuZHMgVnVlIHtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBnZXQgc2hvd0RldGFpbGVkQnJlYWtkb3duKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gU2V0dGluZ3NEYXRhTW9kdWxlLnNldHRpbmdzLnJlc291cmNlQmFsYW5jZS5zaG93RGV0YWlsZWRCcmVha2Rvd247XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHRvZ2dsZURldGFpbGVkQnJlYWtkb3duKHNob3dEZXRhaWxlZEJyZWFrZG93bjogYm9vbGVhbikge1xyXG4gICAgICAgICAgICBTZXR0aW5nc0RhdGFNb2R1bGUudXBkYXRlU2V0dGluZ3Moe1xyXG4gICAgICAgICAgICAgICAgLi4uU2V0dGluZ3NEYXRhTW9kdWxlLnNldHRpbmdzLFxyXG4gICAgICAgICAgICAgICAgcmVzb3VyY2VCYWxhbmNlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLi4uU2V0dGluZ3NEYXRhTW9kdWxlLnNldHRpbmdzLnJlc291cmNlQmFsYW5jZSxcclxuICAgICAgICAgICAgICAgICAgICBzaG93RGV0YWlsZWRCcmVha2Rvd24sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG48L3NjcmlwdD5cclxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPlxyXG4gICAgLmZha2UtdGFibGUge1xyXG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEodmFyKC0tY29sb3IpLCAwLjUpO1xyXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICAgICAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgICAgIHdpZHRoOiBmaXQtY29udGVudDtcclxuICAgICAgICBtYXgtd2lkdGg6IDQwMHB4O1xyXG5cclxuICAgICAgICAmLWhlYWRlciB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IGJsYWNrXHJcbiAgICAgICAgICAgICAgICBsaW5lYXItZ3JhZGllbnQoXHJcbiAgICAgICAgICAgICAgICAgICAgMGRlZyxcclxuICAgICAgICAgICAgICAgICAgICByZ2JhKHZhcigtLWNvbG9yKSwgMC41KSxcclxuICAgICAgICAgICAgICAgICAgICByZ2JhKHZhcigtLWNvbG9yKSwgMC43KVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmLWhlYWRlcixcclxuICAgICAgICAmLWJvZHkge1xyXG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDhweDtcclxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc3R5bGU+IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTQwWzBdLnJ1bGVzWzBdLnVzZVswXSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdGhyZWFkLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTQwWzBdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzBdLnJ1bGVzWzBdLnVzZVswXSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0RldGFpbGVkUmVzb3VyY2VCYWxhbmNlU2V0dGluZ3MudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vRGV0YWlsZWRSZXNvdXJjZUJhbGFuY2VTZXR0aW5ncy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0RldGFpbGVkUmVzb3VyY2VCYWxhbmNlU2V0dGluZ3MudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTFkYmQxM2EyJnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0RldGFpbGVkUmVzb3VyY2VCYWxhbmNlU2V0dGluZ3MudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9EZXRhaWxlZFJlc291cmNlQmFsYW5jZVNldHRpbmdzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9EZXRhaWxlZFJlc291cmNlQmFsYW5jZVNldHRpbmdzLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTFkYmQxM2EyJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiMWRiZDEzYTJcIixcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmYWtlLXRhYmxlXCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmYWtlLXRhYmxlLWhlYWRlclwifSxbX2MoJ3NwYW4nLHtkb21Qcm9wczp7XCJ0ZXh0Q29udGVudFwiOl92bS5fcyhfdm0uJGkxOG4uJHQuZXh0ZW5zaW9uLnNldHRpbmdzLnJlc291cmNlQmFsYW5jZS5pbmNsdWRlTG9zdExvb3RSZXNvdXJjZXMuaGVhZGVyKX19KV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZha2UtdGFibGUtYm9keVwifSxbX2MoJ2NoZWNrYm94Jyx7YXR0cnM6e1widmFsdWVcIjpfdm0uaW5jbHVkZSxcImxhYmVsXCI6X3ZtLiRpMThuLiR0LmV4dGVuc2lvbi5zZXR0aW5ncy5yZXNvdXJjZUJhbGFuY2UuaW5jbHVkZUxvc3RMb290UmVzb3VyY2VzLmNoZWNrYm94TGFiZWx9LG9uOntcImlucHV0XCI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLnRvZ2dsZUluY2x1ZGUoJGV2ZW50KX19fSldLDEpXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cclxuICAgIDxkaXYgY2xhc3M9XCJmYWtlLXRhYmxlXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImZha2UtdGFibGUtaGVhZGVyXCI+XHJcbiAgICAgICAgICAgIDxzcGFuIHYtdGV4dD1cIiRpMThuLiR0LmV4dGVuc2lvbi5zZXR0aW5ncy5yZXNvdXJjZUJhbGFuY2UuaW5jbHVkZUxvc3RMb290UmVzb3VyY2VzLmhlYWRlclwiIC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImZha2UtdGFibGUtYm9keVwiPlxyXG4gICAgICAgICAgICA8Y2hlY2tib3hcclxuICAgICAgICAgICAgICAgIDp2YWx1ZT1cImluY2x1ZGVcIlxyXG4gICAgICAgICAgICAgICAgQGlucHV0PVwidG9nZ2xlSW5jbHVkZSgkZXZlbnQpXCJcclxuICAgICAgICAgICAgICAgIDpsYWJlbD1cIiRpMThuLiR0LmV4dGVuc2lvbi5zZXR0aW5ncy5yZXNvdXJjZUJhbGFuY2UuaW5jbHVkZUxvc3RMb290UmVzb3VyY2VzLmNoZWNrYm94TGFiZWxcIlxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxyXG4gICAgaW1wb3J0IHsgQ29tcG9uZW50LCBQcm9wLCBWdWUgfSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJztcclxuICAgIGltcG9ydCB7IFNldHRpbmdzRGF0YU1vZHVsZSB9IGZyb20gJy4uLy4uLy4uL2RhdGEvU2V0dGluZ3NEYXRhTW9kdWxlJztcclxuXHJcbiAgICBAQ29tcG9uZW50KHt9KVxyXG4gICAgZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5jbHVkZUxvc3RMb290UmVzb3VyY2VzSW5SZXNvdXJjZUJhbGFuY2UgZXh0ZW5kcyBWdWUge1xyXG5cclxuICAgICAgICBwcml2YXRlIGdldCBpbmNsdWRlKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gU2V0dGluZ3NEYXRhTW9kdWxlLnNldHRpbmdzLnJlc291cmNlQmFsYW5jZS5pbmNsdWRlTG9zdExvb3RSZXNvdXJjZXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHRvZ2dsZUluY2x1ZGUoaW5jbHVkZUxvc3RMb290UmVzb3VyY2VzOiBib29sZWFuKSB7XHJcbiAgICAgICAgICAgIFNldHRpbmdzRGF0YU1vZHVsZS51cGRhdGVTZXR0aW5ncyh7XHJcbiAgICAgICAgICAgICAgICAuLi5TZXR0aW5nc0RhdGFNb2R1bGUuc2V0dGluZ3MsXHJcbiAgICAgICAgICAgICAgICByZXNvdXJjZUJhbGFuY2U6IHtcclxuICAgICAgICAgICAgICAgICAgICAuLi5TZXR0aW5nc0RhdGFNb2R1bGUuc2V0dGluZ3MucmVzb3VyY2VCYWxhbmNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGluY2x1ZGVMb3N0TG9vdFJlc291cmNlcyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XHJcbiAgICAuZmFrZS10YWJsZSB7XHJcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSh2YXIoLS1jb2xvciksIDAuNSk7XHJcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAgICAgd2lkdGg6IGZpdC1jb250ZW50O1xyXG4gICAgICAgIG1heC13aWR0aDogNDAwcHg7XHJcblxyXG4gICAgICAgICYtaGVhZGVyIHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZDogYmxhY2tcclxuICAgICAgICAgICAgICAgIGxpbmVhci1ncmFkaWVudChcclxuICAgICAgICAgICAgICAgICAgICAwZGVnLFxyXG4gICAgICAgICAgICAgICAgICAgIHJnYmEodmFyKC0tY29sb3IpLCAwLjUpLFxyXG4gICAgICAgICAgICAgICAgICAgIHJnYmEodmFyKC0tY29sb3IpLCAwLjcpXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICYtaGVhZGVyLFxyXG4gICAgICAgICYtYm9keSB7XHJcbiAgICAgICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICAgICAgcGFkZGluZzogOHB4O1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuPC9zdHlsZT4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vSW5jbHVkZUxvc3RMb290UmVzb3VyY2VzSW5SZXNvdXJjZUJhbGFuY2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vSW5jbHVkZUxvc3RMb290UmVzb3VyY2VzSW5SZXNvdXJjZUJhbGFuY2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9JbmNsdWRlTG9zdExvb3RSZXNvdXJjZXNJblJlc291cmNlQmFsYW5jZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NTQxNjVjZTkmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vSW5jbHVkZUxvc3RMb290UmVzb3VyY2VzSW5SZXNvdXJjZUJhbGFuY2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9JbmNsdWRlTG9zdExvb3RSZXNvdXJjZXNJblJlc291cmNlQmFsYW5jZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vSW5jbHVkZUxvc3RMb290UmVzb3VyY2VzSW5SZXNvdXJjZUJhbGFuY2UudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NTQxNjVjZTkmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCI1NDE2NWNlOVwiLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZha2UtdGFibGVcIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImZha2UtdGFibGUtaGVhZGVyXCJ9LFtfYygnc3Bhbicse2RvbVByb3BzOntcInRleHRDb250ZW50XCI6X3ZtLl9zKF92bS4kaTE4bi4kdC5leHRlbnNpb24uc2V0dGluZ3MucmVzb3VyY2VCYWxhbmNlLmluY2x1ZGVTaGlwc0ZvdW5kT25FeHBlZGl0aW9ucy5oZWFkZXIpfX0pXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZmFrZS10YWJsZS1ib2R5XCJ9LFtfYygnY2hlY2tib3gnLHthdHRyczp7XCJ2YWx1ZVwiOl92bS5pbmNsdWRlLFwibGFiZWxcIjpfdm0uJGkxOG4uJHQuZXh0ZW5zaW9uLnNldHRpbmdzLnJlc291cmNlQmFsYW5jZS5pbmNsdWRlU2hpcHNGb3VuZE9uRXhwZWRpdGlvbnMuY2hlY2tib3hMYWJlbH0sb246e1wiaW5wdXRcIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0udG9nZ2xlSW5jbHVkZSgkZXZlbnQpfX19KV0sMSldKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBjbGFzcz1cImZha2UtdGFibGVcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmFrZS10YWJsZS1oZWFkZXJcIj5cclxuICAgICAgICAgICAgPHNwYW4gdi10ZXh0PVwiJGkxOG4uJHQuZXh0ZW5zaW9uLnNldHRpbmdzLnJlc291cmNlQmFsYW5jZS5pbmNsdWRlU2hpcHNGb3VuZE9uRXhwZWRpdGlvbnMuaGVhZGVyXCIgLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmFrZS10YWJsZS1ib2R5XCI+XHJcbiAgICAgICAgICAgIDxjaGVja2JveFxyXG4gICAgICAgICAgICAgICAgOnZhbHVlPVwiaW5jbHVkZVwiXHJcbiAgICAgICAgICAgICAgICBAaW5wdXQ9XCJ0b2dnbGVJbmNsdWRlKCRldmVudClcIlxyXG4gICAgICAgICAgICAgICAgOmxhYmVsPVwiJGkxOG4uJHQuZXh0ZW5zaW9uLnNldHRpbmdzLnJlc291cmNlQmFsYW5jZS5pbmNsdWRlU2hpcHNGb3VuZE9uRXhwZWRpdGlvbnMuY2hlY2tib3hMYWJlbFwiXHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQgbGFuZz1cInRzXCI+XHJcbiAgICBpbXBvcnQgeyBDb21wb25lbnQsIFByb3AsIFZ1ZSB9IGZyb20gJ3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3InO1xyXG4gICAgaW1wb3J0IHsgU2V0dGluZ3NEYXRhTW9kdWxlIH0gZnJvbSAnLi4vLi4vLi4vZGF0YS9TZXR0aW5nc0RhdGFNb2R1bGUnO1xyXG5cclxuICAgIEBDb21wb25lbnQoe30pXHJcbiAgICBleHBvcnQgZGVmYXVsdCBjbGFzcyBJbmNsdWRlU2hpcHNGb3VuZE9uRXhwZWRpdGlvbnNJblJlc291cmNlQmFsYW5jZVNldHRpbmdzIGV4dGVuZHMgVnVlIHtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBnZXQgaW5jbHVkZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFNldHRpbmdzRGF0YU1vZHVsZS5zZXR0aW5ncy5yZXNvdXJjZUJhbGFuY2UuaW5jbHVkZUV4cGVkaXRpb25Gb3VuZFNoaXBzUmVzb3VyY2VVbml0cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdG9nZ2xlSW5jbHVkZShpbmNsdWRlRXhwZWRpdGlvbkZvdW5kU2hpcHNSZXNvdXJjZVVuaXRzOiBib29sZWFuKSB7XHJcbiAgICAgICAgICAgIFNldHRpbmdzRGF0YU1vZHVsZS51cGRhdGVTZXR0aW5ncyh7XHJcbiAgICAgICAgICAgICAgICAuLi5TZXR0aW5nc0RhdGFNb2R1bGUuc2V0dGluZ3MsXHJcbiAgICAgICAgICAgICAgICByZXNvdXJjZUJhbGFuY2U6IHtcclxuICAgICAgICAgICAgICAgICAgICAuLi5TZXR0aW5nc0RhdGFNb2R1bGUuc2V0dGluZ3MucmVzb3VyY2VCYWxhbmNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGluY2x1ZGVFeHBlZGl0aW9uRm91bmRTaGlwc1Jlc291cmNlVW5pdHMsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG48L3NjcmlwdD5cclxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPlxyXG4gICAgLmZha2UtdGFibGUge1xyXG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEodmFyKC0tY29sb3IpLCAwLjUpO1xyXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICAgICAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgICAgIHdpZHRoOiBmaXQtY29udGVudDtcclxuICAgICAgICBtYXgtd2lkdGg6IDQwMHB4O1xyXG5cclxuICAgICAgICAmLWhlYWRlciB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IGJsYWNrXHJcbiAgICAgICAgICAgICAgICBsaW5lYXItZ3JhZGllbnQoXHJcbiAgICAgICAgICAgICAgICAgICAgMGRlZyxcclxuICAgICAgICAgICAgICAgICAgICByZ2JhKHZhcigtLWNvbG9yKSwgMC41KSxcclxuICAgICAgICAgICAgICAgICAgICByZ2JhKHZhcigtLWNvbG9yKSwgMC43KVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAmLWhlYWRlcixcclxuICAgICAgICAmLWJvZHkge1xyXG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDhweDtcclxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc3R5bGU+IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTQwWzBdLnJ1bGVzWzBdLnVzZVswXSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdGhyZWFkLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTQwWzBdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzBdLnJ1bGVzWzBdLnVzZVswXSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0luY2x1ZGVTaGlwc0ZvdW5kT25FeHBlZGl0aW9uc0luUmVzb3VyY2VCYWxhbmNlU2V0dGluZ3MudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vSW5jbHVkZVNoaXBzRm91bmRPbkV4cGVkaXRpb25zSW5SZXNvdXJjZUJhbGFuY2VTZXR0aW5ncy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0luY2x1ZGVTaGlwc0ZvdW5kT25FeHBlZGl0aW9uc0luUmVzb3VyY2VCYWxhbmNlU2V0dGluZ3MudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTJkOTU0YmI3JnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0luY2x1ZGVTaGlwc0ZvdW5kT25FeHBlZGl0aW9uc0luUmVzb3VyY2VCYWxhbmNlU2V0dGluZ3MudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9JbmNsdWRlU2hpcHNGb3VuZE9uRXhwZWRpdGlvbnNJblJlc291cmNlQmFsYW5jZVNldHRpbmdzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9JbmNsdWRlU2hpcHNGb3VuZE9uRXhwZWRpdGlvbnNJblJlc291cmNlQmFsYW5jZVNldHRpbmdzLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTJkOTU0YmI3Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiMmQ5NTRiYjdcIixcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmYWtlLXRhYmxlXCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmYWtlLXRhYmxlLWhlYWRlclwifSxbX2MoJ3NwYW4nLHtkb21Qcm9wczp7XCJ0ZXh0Q29udGVudFwiOl92bS5fcyhfdm0uJGkxOG4uJHQuZXh0ZW5zaW9uLnNldHRpbmdzLnJlc291cmNlQmFsYW5jZS5pbmNsdWRlU2hpcHNMb3N0SW5Db21iYXRzLmhlYWRlcil9fSldKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmYWtlLXRhYmxlLWJvZHlcIn0sW19jKCdjaGVja2JveCcse2F0dHJzOntcInZhbHVlXCI6X3ZtLmluY2x1ZGUsXCJsYWJlbFwiOl92bS4kaTE4bi4kdC5leHRlbnNpb24uc2V0dGluZ3MucmVzb3VyY2VCYWxhbmNlLmluY2x1ZGVTaGlwc0xvc3RJbkNvbWJhdHMuY2hlY2tib3hMYWJlbH0sb246e1wiaW5wdXRcIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0udG9nZ2xlSW5jbHVkZSgkZXZlbnQpfX19KV0sMSldKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBjbGFzcz1cImZha2UtdGFibGVcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmFrZS10YWJsZS1oZWFkZXJcIj5cclxuICAgICAgICAgICAgPHNwYW4gdi10ZXh0PVwiJGkxOG4uJHQuZXh0ZW5zaW9uLnNldHRpbmdzLnJlc291cmNlQmFsYW5jZS5pbmNsdWRlU2hpcHNMb3N0SW5Db21iYXRzLmhlYWRlclwiIC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImZha2UtdGFibGUtYm9keVwiPlxyXG4gICAgICAgICAgICA8Y2hlY2tib3hcclxuICAgICAgICAgICAgICAgIDp2YWx1ZT1cImluY2x1ZGVcIlxyXG4gICAgICAgICAgICAgICAgQGlucHV0PVwidG9nZ2xlSW5jbHVkZSgkZXZlbnQpXCJcclxuICAgICAgICAgICAgICAgIDpsYWJlbD1cIiRpMThuLiR0LmV4dGVuc2lvbi5zZXR0aW5ncy5yZXNvdXJjZUJhbGFuY2UuaW5jbHVkZVNoaXBzTG9zdEluQ29tYmF0cy5jaGVja2JveExhYmVsXCJcclxuICAgICAgICAgICAgLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdCBsYW5nPVwidHNcIj5cclxuICAgIGltcG9ydCB7IENvbXBvbmVudCwgUHJvcCwgVnVlIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7XHJcbiAgICBpbXBvcnQgeyBTZXR0aW5nc0RhdGFNb2R1bGUgfSBmcm9tICcuLi8uLi8uLi9kYXRhL1NldHRpbmdzRGF0YU1vZHVsZSc7XHJcblxyXG4gICAgQENvbXBvbmVudCh7fSlcclxuICAgIGV4cG9ydCBkZWZhdWx0IGNsYXNzIEluY2x1ZGVTaGlwc0xvc3RJbkNvbWJhdHNJblJlc291cmNlQmFsYW5jZSBleHRlbmRzIFZ1ZSB7XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0IGluY2x1ZGUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBTZXR0aW5nc0RhdGFNb2R1bGUuc2V0dGluZ3MucmVzb3VyY2VCYWxhbmNlLmluY2x1ZGVMb3N0U2hpcHNSZXNvdXJjZVVuaXRzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSB0b2dnbGVJbmNsdWRlKGluY2x1ZGVMb3N0U2hpcHNSZXNvdXJjZVVuaXRzOiBib29sZWFuKSB7XHJcbiAgICAgICAgICAgIFNldHRpbmdzRGF0YU1vZHVsZS51cGRhdGVTZXR0aW5ncyh7XHJcbiAgICAgICAgICAgICAgICAuLi5TZXR0aW5nc0RhdGFNb2R1bGUuc2V0dGluZ3MsXHJcbiAgICAgICAgICAgICAgICByZXNvdXJjZUJhbGFuY2U6IHtcclxuICAgICAgICAgICAgICAgICAgICAuLi5TZXR0aW5nc0RhdGFNb2R1bGUuc2V0dGluZ3MucmVzb3VyY2VCYWxhbmNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGluY2x1ZGVMb3N0U2hpcHNSZXNvdXJjZVVuaXRzLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cclxuICAgIC5mYWtlLXRhYmxlIHtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKHZhcigtLWNvbG9yKSwgMC41KTtcclxuICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcclxuICAgICAgICB3aWR0aDogZml0LWNvbnRlbnQ7XHJcbiAgICAgICAgbWF4LXdpZHRoOiA0MDBweDtcclxuXHJcbiAgICAgICAgJi1oZWFkZXIge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiBibGFja1xyXG4gICAgICAgICAgICAgICAgbGluZWFyLWdyYWRpZW50KFxyXG4gICAgICAgICAgICAgICAgICAgIDBkZWcsXHJcbiAgICAgICAgICAgICAgICAgICAgcmdiYSh2YXIoLS1jb2xvciksIDAuNSksXHJcbiAgICAgICAgICAgICAgICAgICAgcmdiYSh2YXIoLS1jb2xvciksIDAuNylcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJi1oZWFkZXIsXHJcbiAgICAgICAgJi1ib2R5IHtcclxuICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICAgICAgICBwYWRkaW5nOiA4cHg7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG48L3N0eWxlPiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RocmVhZC1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9JbmNsdWRlU2hpcHNMb3N0SW5Db21iYXRzSW5SZXNvdXJjZUJhbGFuY2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vSW5jbHVkZVNoaXBzTG9zdEluQ29tYmF0c0luUmVzb3VyY2VCYWxhbmNlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vSW5jbHVkZVNoaXBzTG9zdEluQ29tYmF0c0luUmVzb3VyY2VCYWxhbmNlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wMzg4NTg5YSZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9JbmNsdWRlU2hpcHNMb3N0SW5Db21iYXRzSW5SZXNvdXJjZUJhbGFuY2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9JbmNsdWRlU2hpcHNMb3N0SW5Db21iYXRzSW5SZXNvdXJjZUJhbGFuY2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL0luY2x1ZGVTaGlwc0xvc3RJbkNvbWJhdHNJblJlc291cmNlQmFsYW5jZS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0wMzg4NTg5YSZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjAzODg1ODlhXCIsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2dyaWQtdGFibGUnLHtzdGF0aWNDbGFzczpcInJhbmdlZC1zdGF0cy10YWJsZVwiLGF0dHJzOntcImNvbHVtbnNcIjpfdm0uY29sdW1ucyxcIml0ZW1zXCI6X3ZtLnJvd3MsXCJmb290ZXItaXRlbXNcIjpfdm0uZm9vdGVyUm93cyxcImNlbGwtY2xhc3MtcHJvdmlkZXJcIjpmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIF92bS5nZXRDZWxsQ2xhc3ModmFsdWUpOyB9fSxzY29wZWRTbG90czpfdm0uX3UoW192bS5fbCgoX3ZtLmNvbHVtbnMpLGZ1bmN0aW9uKGNvbHVtbixpKXtyZXR1cm4ge2tleTooXCJjZWxsLVwiICsgKGNvbHVtbi5rZXkpKSxmbjpmdW5jdGlvbihyZWYpe1xudmFyIHZhbHVlID0gcmVmLnZhbHVlO1xudmFyIGl0ZW0gPSByZWYuaXRlbTtcbnJldHVybiBbX2MoJ3NwYW4nLHtrZXk6Y29sdW1uLmtleSxzdGF0aWNDbGFzczpcInJhbmdlZC1zdGF0cy10YWJsZS1jZWxsXCJ9LFsoY29sdW1uLmtleSA9PSAnbGFiZWwnKT9bKGNvbHVtbi5zbG90TmFtZSAhPSBudWxsICYmIF92bS4kc2NvcGVkU2xvdHNbY29sdW1uLnNsb3ROYW1lXSAhPSBudWxsKT9fdm0uX3QoY29sdW1uLnNsb3ROYW1lLG51bGwse1widmFsdWVcIjp2YWx1ZX0pOl9jKCdzcGFuJyx7a2V5OmksZG9tUHJvcHM6e1widGV4dENvbnRlbnRcIjpfdm0uX3ModmFsdWUpfX0pXTooY29sdW1uLmtleSA9PSAnc3ViTGFiZWwnKT9fdm0uX2woKGl0ZW0uaXRlbXMpLGZ1bmN0aW9uKGl0ZW0saSl7cmV0dXJuIF9jKCdzcGFuJyx7a2V5OmksY2xhc3M6aXRlbS5sYWJlbENsYXNzfSxbKGNvbHVtbi5zbG90TmFtZSAhPSBudWxsICYmIF92bS4kc2NvcGVkU2xvdHNbY29sdW1uLnNsb3ROYW1lXSAhPSBudWxsKT9fdm0uX3QoY29sdW1uLnNsb3ROYW1lLG51bGwse1widmFsdWVcIjppdGVtLmxhYmVsfSk6X2MoJ3NwYW4nLHtkb21Qcm9wczp7XCJ0ZXh0Q29udGVudFwiOl92bS5fcyhpdGVtLmxhYmVsKX19KV0sMil9KTpfdm0uX2woKGl0ZW0uaXRlbXMgfHwgW2l0ZW1dKSxmdW5jdGlvbihpdGVtLGkpe3JldHVybiBfYygnc3Bhbicse2tleTppLGNsYXNzOltfdm0uZ2V0Q2VsbENsYXNzKGl0ZW1bY29sdW1uLmtleV0pLCBpdGVtLmNsYXNzXX0sWyhjb2x1bW4uZm9ybWF0dGVyICE9IG51bGwpP19jKCdzcGFuJyx7ZG9tUHJvcHM6e1widGV4dENvbnRlbnRcIjpfdm0uX3MoY29sdW1uLmZvcm1hdHRlcihpdGVtW2NvbHVtbi5rZXldKSl9fSk6X2MoJ3NwYW4nLHtkb21Qcm9wczp7XCJ0ZXh0Q29udGVudFwiOl92bS5fcyhpdGVtW2NvbHVtbi5rZXldKX19KV0pfSldLDIpXX19fSksX3ZtLl9sKChfdm0uJHNjb3BlZFNsb3RzKSxmdW5jdGlvbihpbmRleCxuYW1lKXtyZXR1cm4ge2tleTpuYW1lLGZuOmZ1bmN0aW9uKGRhdGEpe3JldHVybiBbX3ZtLl90KG5hbWUsbnVsbCxudWxsLGRhdGEpXX19fSldLG51bGwsdHJ1ZSl9KX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxyXG4gICAgPGdyaWQtdGFibGUgOmNvbHVtbnM9XCJjb2x1bW5zXCIgOml0ZW1zPVwicm93c1wiIDpmb290ZXItaXRlbXM9XCJmb290ZXJSb3dzXCIgOmNlbGwtY2xhc3MtcHJvdmlkZXI9XCIodmFsdWUpID0+IGdldENlbGxDbGFzcyh2YWx1ZSlcIiBjbGFzcz1cInJhbmdlZC1zdGF0cy10YWJsZVwiPlxyXG4gICAgICAgIDwhLS0gb2ggZ29kIHRoaXMgaXMgdWdseSAtLT5cclxuICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCIoY29sdW1uLCBpKSBpbiBjb2x1bW5zXCIgdi1zbG90OltgY2VsbC0ke2NvbHVtbi5rZXl9YF09XCJ7IHZhbHVlLCBpdGVtIH1cIj5cclxuICAgICAgICAgICAgPHNwYW4gOmtleT1cImNvbHVtbi5rZXlcIiBjbGFzcz1cInJhbmdlZC1zdGF0cy10YWJsZS1jZWxsXCI+XHJcbiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cImNvbHVtbi5rZXkgPT0gJ2xhYmVsJ1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzbG90IHYtaWY9XCJjb2x1bW4uc2xvdE5hbWUgIT0gbnVsbCAmJiAkc2NvcGVkU2xvdHNbY29sdW1uLnNsb3ROYW1lXSAhPSBudWxsXCIgOm5hbWU9XCJjb2x1bW4uc2xvdE5hbWVcIiA6dmFsdWU9XCJ2YWx1ZVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1lbHNlIDprZXk9XCJpXCIgdi10ZXh0PVwidmFsdWVcIiAvPlxyXG4gICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2UtaWY9XCJjb2x1bW4ua2V5ID09ICdzdWJMYWJlbCdcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWZvcj1cIihpdGVtLCBpKSBpbiBpdGVtLml0ZW1zXCIgOmtleT1cImlcIiA6Y2xhc3M9XCJpdGVtLmxhYmVsQ2xhc3NcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNsb3Qgdi1pZj1cImNvbHVtbi5zbG90TmFtZSAhPSBudWxsICYmICRzY29wZWRTbG90c1tjb2x1bW4uc2xvdE5hbWVdICE9IG51bGxcIiA6bmFtZT1cImNvbHVtbi5zbG90TmFtZVwiIDp2YWx1ZT1cIml0ZW0ubGFiZWxcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWVsc2Ugdi10ZXh0PVwiaXRlbS5sYWJlbFwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1mb3I9XCIoaXRlbSwgaSkgaW4gaXRlbS5pdGVtcyB8fCBbaXRlbV1cIiA6a2V5PVwiaVwiIDpjbGFzcz1cIltnZXRDZWxsQ2xhc3MoaXRlbVtjb2x1bW4ua2V5XSksIGl0ZW0uY2xhc3NdXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtaWY9XCJjb2x1bW4uZm9ybWF0dGVyICE9IG51bGxcIiB2LXRleHQ9XCJjb2x1bW4uZm9ybWF0dGVyKGl0ZW1bY29sdW1uLmtleV0pXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1lbHNlIHYtdGV4dD1cIml0ZW1bY29sdW1uLmtleV1cIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICA8L3RlbXBsYXRlPlxyXG5cclxuICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCIoaW5kZXgsIG5hbWUpIGluICRzY29wZWRTbG90c1wiIHYtc2xvdDpbbmFtZV09XCJkYXRhXCI+XHJcbiAgICAgICAgICAgIDxzbG90IDpuYW1lPVwibmFtZVwiIHYtYmluZD1cImRhdGFcIiAvPlxyXG4gICAgICAgIDwvdGVtcGxhdGU+XHJcbiAgICA8L2dyaWQtdGFibGU+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxyXG4gICAgaW1wb3J0IHsgUHJvcFR5cGUgfSBmcm9tICd2dWUnO1xyXG4gICAgaW1wb3J0IHsgUHJvcCB9IGZyb20gJ3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3InO1xyXG4gICAgaW1wb3J0IHsgQ29tcG9uZW50LCBWdWUgfSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJztcclxuICAgIGltcG9ydCB7IEdyaWRUYWJsZUNvbHVtbiB9IGZyb20gJ0BzdGF0cy9jb21wb25lbnRzL2NvbW1vbi9HcmlkVGFibGUudnVlJztcclxuICAgIGltcG9ydCB7IGlzSW5SYW5nZSB9IGZyb20gJ0BzdGF0cy91dGlscy9kYXRlUmFuZ2VzJztcclxuICAgIGltcG9ydCB7IF90aHJvdyB9IGZyb20gJ0Avc2hhcmVkL3V0aWxzL190aHJvdyc7XHJcbiAgICBpbXBvcnQgc3RhcnRPZkRheSBmcm9tICdkYXRlLWZucy9zdGFydE9mRGF5L2luZGV4JztcclxuICAgIGltcG9ydCB7IFNldHRpbmdzRGF0YU1vZHVsZSB9IGZyb20gJy4uLy4uL2RhdGEvU2V0dGluZ3NEYXRhTW9kdWxlJztcclxuXHJcbiAgICBpbnRlcmZhY2UgUmFuZ2VTdGF0c1RhYmxlSXRlbVdpdGhEYXRlIHtcclxuICAgICAgICBkYXRlOiBudW1iZXI7XHJcbiAgICB9XHJcblxyXG4gICAgaW50ZXJmYWNlIFNpbmdsZVJhbmdlZFN0YXRzVGFibGVJdGVtPFQgZXh0ZW5kcyBSYW5nZVN0YXRzVGFibGVJdGVtV2l0aERhdGU+IHtcclxuICAgICAgICBsYWJlbDogc3RyaW5nO1xyXG4gICAgICAgIGdldFZhbHVlOiAoaXRlbXM6IFRbXSkgPT4gbnVtYmVyO1xyXG4gICAgICAgIGNsYXNzPzogc3RyaW5nO1xyXG4gICAgICAgIGxhYmVsQ2xhc3M/OiBzdHJpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgaW50ZXJmYWNlIEdyb3VwZWRSYW5nZWRTdGF0c1RhYmxlSXRlbTxUIGV4dGVuZHMgUmFuZ2VTdGF0c1RhYmxlSXRlbVdpdGhEYXRlPiB7XHJcbiAgICAgICAgbGFiZWw6IHN0cmluZztcclxuICAgICAgICBpdGVtczogU2luZ2xlUmFuZ2VkU3RhdHNUYWJsZUl0ZW08VD5bXTtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgdHlwZSBSYW5nZWRTdGF0c1RhYmxlSXRlbTxUIGV4dGVuZHMgUmFuZ2VTdGF0c1RhYmxlSXRlbVdpdGhEYXRlPiA9IFNpbmdsZVJhbmdlZFN0YXRzVGFibGVJdGVtPFQ+IHwgR3JvdXBlZFJhbmdlZFN0YXRzVGFibGVJdGVtPFQ+O1xyXG5cclxuICAgIGludGVyZmFjZSBTaW1wbGVSYW5nZWRTdGF0c1RhYmxlUm93IHtcclxuICAgICAgICBsYWJlbDogc3RyaW5nO1xyXG4gICAgICAgIHBlcmNlbnRhZ2U/OiBudW1iZXIgfCAnJztcclxuICAgICAgICBhdmVyYWdlPzogbnVtYmVyO1xyXG5cclxuICAgICAgICBbaW5kZXg6IG51bWJlcl06IG51bWJlcjtcclxuICAgIH1cclxuXHJcbiAgICBpbnRlcmZhY2UgR3JvdXBlZFJhbmdlZFN0YXRzVGFibGVSb3cge1xyXG4gICAgICAgIGxhYmVsOiBzdHJpbmc7XHJcbiAgICAgICAgaXRlbXM6IFNpbXBsZVJhbmdlZFN0YXRzVGFibGVSb3dbXTtcclxuICAgIH1cclxuXHJcbiAgICB0eXBlIFJhbmdlZFN0YXRzVGFibGVSb3cgPSBTaW1wbGVSYW5nZWRTdGF0c1RhYmxlUm93IHwgR3JvdXBlZFJhbmdlZFN0YXRzVGFibGVSb3c7XHJcblxyXG4gICAgaW50ZXJmYWNlIFJhbmdlU3RhdHNUYWJsZUNvbHVtbiBleHRlbmRzIEdyaWRUYWJsZUNvbHVtbjxrZXlvZiBTaW1wbGVSYW5nZWRTdGF0c1RhYmxlUm93IHwgJ3N1YkxhYmVsJyB8IG51bWJlcj4ge1xyXG4gICAgICAgIHNsb3ROYW1lPzogc3RyaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIEBDb21wb25lbnQoe30pXHJcbiAgICBleHBvcnQgZGVmYXVsdCBjbGFzcyBSYW5nZWRTdGF0c1RhYmxlPFQgZXh0ZW5kcyBSYW5nZVN0YXRzVGFibGVJdGVtV2l0aERhdGU+IGV4dGVuZHMgVnVlIHtcclxuXHJcbiAgICAgICAgQFByb3AoeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6IEJvb2xlYW4gfSlcclxuICAgICAgICBwcml2YXRlIHNob3dQZXJjZW50YWdlITogYm9vbGVhbjtcclxuXHJcbiAgICAgICAgQFByb3AoeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6IEJvb2xlYW4gfSlcclxuICAgICAgICBwcml2YXRlIHNob3dBdmVyYWdlITogYm9vbGVhbjtcclxuXHJcbiAgICAgICAgQFByb3AoeyByZXF1aXJlZDogdHJ1ZSwgdHlwZTogQXJyYXkgYXMgUHJvcFR5cGU8UmFuZ2VkU3RhdHNUYWJsZUl0ZW08VD5bXT4gfSlcclxuICAgICAgICBwcml2YXRlIGl0ZW1zITogUmFuZ2VkU3RhdHNUYWJsZUl0ZW08VD5bXTtcclxuXHJcbiAgICAgICAgQFByb3AoeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6IEFycmF5IGFzIFByb3BUeXBlPFJhbmdlZFN0YXRzVGFibGVJdGVtPFQ+W10+LCBkZWZhdWx0OiAoKSA9PiBbXSB9KVxyXG4gICAgICAgIHByaXZhdGUgZm9vdGVySXRlbXMhOiBSYW5nZWRTdGF0c1RhYmxlSXRlbTxUPltdO1xyXG5cclxuICAgICAgICBAUHJvcCh7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogT2JqZWN0IGFzIFByb3BUeXBlPEludGwuTnVtYmVyRm9ybWF0T3B0aW9ucz4sIGRlZmF1bHQ6IHVuZGVmaW5lZCB9KVxyXG4gICAgICAgIHByaXZhdGUgbnVtYmVyRm9ybWF0T3B0aW9uczogSW50bC5OdW1iZXJGb3JtYXRPcHRpb25zIHwgdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICBAUHJvcCh7IHJlcXVpcmVkOiBmYWxzZSwgdHlwZTogT2JqZWN0IGFzIFByb3BUeXBlPEludGwuTnVtYmVyRm9ybWF0T3B0aW9ucz4sIGRlZmF1bHQ6IHVuZGVmaW5lZCB9KVxyXG4gICAgICAgIHByaXZhdGUgYXZlcmFnZU51bWJlckZvcm1hdE9wdGlvbnM6IEludGwuTnVtYmVyRm9ybWF0T3B0aW9ucyB8IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgQFByb3AoeyByZXF1aXJlZDogdHJ1ZSwgdHlwZTogQXJyYXkgYXMgUHJvcFR5cGU8VFtdPiB9KVxyXG4gICAgICAgIHByaXZhdGUgZGF0YUl0ZW1zITogVFtdO1xyXG5cclxuICAgICAgICBwcml2YXRlIGdldCBoYXNHcm91cGVkSXRlbXMoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLml0ZW1zLnNvbWUoaXRlbSA9PiAnaXRlbXMnIGluIGl0ZW0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBnZXQgZGF0ZVJhbmdlcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFNldHRpbmdzRGF0YU1vZHVsZS5zZXR0aW5ncy5kYXRlUmFuZ2VzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBnZXQgZGF0YUl0ZW1zQnlSYW5nZSgpOiBUW11bXSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGFJdGVtcyA9IHRoaXMuZGF0YUl0ZW1zO1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhSXRlbXNCeVJhbmdlOiBUW11bXSA9IHRoaXMuZGF0ZVJhbmdlcy5tYXAoKCkgPT4gW10pO1xyXG5cclxuICAgICAgICAgICAgZGF0YUl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGVSYW5nZXMuZm9yRWFjaCgocmFuZ2UsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNJblJhbmdlKGl0ZW0uZGF0ZSwgcmFuZ2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFJdGVtc0J5UmFuZ2VbaV0ucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZGF0YUl0ZW1zQnlSYW5nZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0IGZpcnN0RGF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhSXRlbXNCeVJhbmdlLnJlZHVjZSgoYWNjLCBjdXIpID0+IE1hdGgubWluKFxyXG4gICAgICAgICAgICAgICAgYWNjLFxyXG4gICAgICAgICAgICAgICAgTWF0aC5taW4oLi4uY3VyLm1hcCh0ID0+IHQuZGF0ZSkpLFxyXG4gICAgICAgICAgICApLCBEYXRlLm5vdygpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0IGNvbHVtbnMoKTogUmFuZ2VTdGF0c1RhYmxlQ29sdW1uW10ge1xyXG4gICAgICAgICAgICBjb25zdCBjb2x1bW5zOiBSYW5nZVN0YXRzVGFibGVDb2x1bW5bXSA9IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBrZXk6ICdsYWJlbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIHNsb3ROYW1lOiAnbGFiZWwnLFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5oYXNHcm91cGVkSXRlbXMpIHtcclxuICAgICAgICAgICAgICAgIGNvbHVtbnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnc3ViTGFiZWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICBzbG90TmFtZTogJ3N1YkxhYmVsJyxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb2x1bW5zLnB1c2goLi4udGhpcy5kYXRlUmFuZ2VzLm1hcCgocmFuZ2UsIGkpID0+ICh7XHJcbiAgICAgICAgICAgICAgICBrZXk6IGksXHJcbiAgICAgICAgICAgICAgICBsYWJlbDogcmFuZ2UubGFiZWwgPz8gdGhpcy4kaTE4bi4kdC5leHRlbnNpb24uc2V0dGluZ3MuZGF0ZVJhbmdlcy5zaW5jZSh0aGlzLiRpMThuLiRkKHRoaXMuZmlyc3REYXksICdkYXRlJykpLFxyXG4gICAgICAgICAgICAgICAgZm9ybWF0dGVyOiAodmFsdWU6IG51bWJlcikgPT4gdGhpcy4kaTE4bi4kbih2YWx1ZSwgdGhpcy5udW1iZXJGb3JtYXRPcHRpb25zKSxcclxuICAgICAgICAgICAgfSkpKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNob3dBdmVyYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBjb2x1bW5zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ2F2ZXJhZ2UnLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiB0aGlzLiRpMThuLiR0LmV4dGVuc2lvbi5jb21tb24uYXZlcmFnZVBlckRheSxcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6ICh2YWx1ZTogbnVtYmVyKSA9PiB0aGlzLiRpMThuLiRuKHZhbHVlLCB0aGlzLmF2ZXJhZ2VOdW1iZXJGb3JtYXRPcHRpb25zID8/IHRoaXMubnVtYmVyRm9ybWF0T3B0aW9ucylcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zaG93UGVyY2VudGFnZSkge1xyXG4gICAgICAgICAgICAgICAgY29sdW1ucy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICBrZXk6ICdwZXJjZW50YWdlJyxcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJyUnLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogKHZhbHVlOiBudW1iZXIgfCAnJykgPT4gdmFsdWUgIT0gJydcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLiRpMThuLiRuKHZhbHVlLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5pbXVtRnJhY3Rpb25EaWdpdHM6IDMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IDMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdmFsdWVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY29sdW1ucztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0IHJvd3MoKTogKFJhbmdlZFN0YXRzVGFibGVSb3cgJiB7IGNsYXNzPzogc3RyaW5nIH0pW10ge1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhSXRlbXNCeVJhbmdlID0gdGhpcy5kYXRhSXRlbXNCeVJhbmdlO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgYWxsUmFuZ2VJbmRleCA9IHRoaXMuZGF0ZVJhbmdlcy5maW5kSW5kZXgocmFuZ2UgPT4gcmFuZ2UudHlwZSA9PSAnYWxsJylcclxuICAgICAgICAgICAgICAgID8/IF90aHJvdyhgZmFpbGVkIHRvIGZpbmQgcmFuZ2UgJ2FsbCdgKTtcclxuICAgICAgICAgICAgY29uc3QgZGF0YUl0ZW1EYXlzID0gZGF0YUl0ZW1zQnlSYW5nZVthbGxSYW5nZUluZGV4XS5tYXAoZXhwbyA9PiBzdGFydE9mRGF5KGV4cG8uZGF0ZSkuZ2V0VGltZSgpKTtcclxuICAgICAgICAgICAgY29uc3QgZGF5c1dpdGhEYXRhSXRlbXMgPSBuZXcgU2V0KGRhdGFJdGVtRGF5cykuc2l6ZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRvdGFsVmFsdWUgPSBNYXRoLm1heCgxLCB0aGlzLml0ZW1zXHJcbiAgICAgICAgICAgICAgICAubWFwKGl0ZW0gPT4gJ2dldFZhbHVlJyBpbiBpdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgPyBpdGVtLmdldFZhbHVlKGRhdGFJdGVtc0J5UmFuZ2VbYWxsUmFuZ2VJbmRleF0pXHJcbiAgICAgICAgICAgICAgICAgICAgOiBpdGVtLml0ZW1zLnJlZHVjZSgoYWNjLCBpKSA9PiBhY2MgKyBpLmdldFZhbHVlKGRhdGFJdGVtc0J5UmFuZ2VbYWxsUmFuZ2VJbmRleF0pLCAwKVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgLnJlZHVjZSgoYWNjLCBjdXIpID0+IGFjYyArIGN1ciwgMClcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLml0ZW1zLm1hcChpdGVtID0+IHRoaXMubWFwSXRlbVRvUm93KGl0ZW0sIGRhdGFJdGVtc0J5UmFuZ2UsIGFsbFJhbmdlSW5kZXgsIGRheXNXaXRoRGF0YUl0ZW1zLCB0b3RhbFZhbHVlKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIG1hcEl0ZW1Ub1JvdyhpdGVtOiBSYW5nZWRTdGF0c1RhYmxlSXRlbTxUPiwgZGF0YUl0ZW1zQnlSYW5nZTogVFtdW10sIGFsbFJhbmdlSW5kZXg6IG51bWJlciwgZGF5c1dpdGhEYXRhSXRlbXM6IG51bWJlciwgdG90YWxWYWx1ZTogbnVtYmVyKTogKFJhbmdlZFN0YXRzVGFibGVSb3cgJiB7IGNsYXNzPzogc3RyaW5nOyBsYWJlbENsYXNzPzogc3RyaW5nIH0pIHtcclxuICAgICAgICAgICAgaWYgKCdnZXRWYWx1ZScgaW4gaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgcm93OiBTaW1wbGVSYW5nZWRTdGF0c1RhYmxlUm93ICYgeyBjbGFzcz86IHN0cmluZzsgbGFiZWxDbGFzcz86IHN0cmluZyB9ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBpdGVtLmxhYmVsLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiBpdGVtLmNsYXNzLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsQ2xhc3M6IGl0ZW0ubGFiZWxDbGFzcyxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5kYXRlUmFuZ2VzLm1hcCgoXywgcmFuZ2VJbmRleCkgPT4gaXRlbS5nZXRWYWx1ZShkYXRhSXRlbXNCeVJhbmdlW3JhbmdlSW5kZXhdKSksXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGFsbFJhbmdlVmFsdWUgPSByb3dbYWxsUmFuZ2VJbmRleF07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2hvd0F2ZXJhZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICByb3cuYXZlcmFnZSA9IGFsbFJhbmdlVmFsdWUgLyBNYXRoLm1heCgxLCBkYXlzV2l0aERhdGFJdGVtcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2hvd1BlcmNlbnRhZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICByb3cucGVyY2VudGFnZSA9IDEwMCAqIGFsbFJhbmdlVmFsdWUgLyB0b3RhbFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJvdztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiBpdGVtLmxhYmVsLFxyXG4gICAgICAgICAgICAgICAgaXRlbXM6IGl0ZW0uaXRlbXMubWFwKHN1Yml0ZW0gPT4gdGhpcy5tYXBJdGVtVG9Sb3coc3ViaXRlbSwgZGF0YUl0ZW1zQnlSYW5nZSwgYWxsUmFuZ2VJbmRleCwgZGF5c1dpdGhEYXRhSXRlbXMsIHRvdGFsVmFsdWUpIGFzIFNpbXBsZVJhbmdlZFN0YXRzVGFibGVSb3cgJiB7IGNsYXNzPzogc3RyaW5nOyBsYWJlbENsYXNzPzogc3RyaW5nIH0pLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBnZXQgZm9vdGVyUm93cygpOiBSYW5nZWRTdGF0c1RhYmxlUm93W10ge1xyXG4gICAgICAgICAgICBjb25zdCBkYXRhSXRlbXNCeVJhbmdlID0gdGhpcy5kYXRhSXRlbXNCeVJhbmdlO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgYWxsUmFuZ2VJbmRleCA9IHRoaXMuZGF0ZVJhbmdlcy5maW5kSW5kZXgocmFuZ2UgPT4gcmFuZ2UudHlwZSA9PSAnYWxsJylcclxuICAgICAgICAgICAgICAgID8/IF90aHJvdyhgZmFpbGVkIHRvIGZpbmQgcmFuZ2UgJ2FsbCdgKTtcclxuICAgICAgICAgICAgY29uc3QgZGF0YUl0ZW1EYXlzID0gZGF0YUl0ZW1zQnlSYW5nZVthbGxSYW5nZUluZGV4XS5tYXAoZXhwbyA9PiBzdGFydE9mRGF5KGV4cG8uZGF0ZSkuZ2V0VGltZSgpKTtcclxuICAgICAgICAgICAgY29uc3QgZGF5c1dpdGhEYXRhSXRlbXMgPSBuZXcgU2V0KGRhdGFJdGVtRGF5cykuc2l6ZTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvb3Rlckl0ZW1zLm1hcChpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJvdzogUmFuZ2VkU3RhdHNUYWJsZVJvdyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogaXRlbS5sYWJlbCxcclxuICAgICAgICAgICAgICAgICAgICAuLi50aGlzLmRhdGVSYW5nZXMubWFwKChfLCByYW5nZUluZGV4KSA9PiAnZ2V0VmFsdWUnIGluIGl0ZW1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBpdGVtLmdldFZhbHVlKGRhdGFJdGVtc0J5UmFuZ2VbcmFuZ2VJbmRleF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogaXRlbS5pdGVtcy5yZWR1Y2UoKGFjYywgaSkgPT4gYWNjICsgaS5nZXRWYWx1ZShkYXRhSXRlbXNCeVJhbmdlW3JhbmdlSW5kZXhdKSwgMClcclxuICAgICAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgICAgICAgIHBlcmNlbnRhZ2U6ICcnLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zaG93QXZlcmFnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsbFJhbmdlVmFsdWUgPSByb3dbYWxsUmFuZ2VJbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgcm93LmF2ZXJhZ2UgPSBhbGxSYW5nZVZhbHVlIC8gTWF0aC5tYXgoMSwgZGF5c1dpdGhEYXRhSXRlbXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiByb3c7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBnZXRDZWxsQ2xhc3ModmFsdWU6IGFueSk6IHN0cmluZyB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2ZhZGUtdmFsdWUnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG48L3NjcmlwdD5cclxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPlxyXG4gICAgLmdyaWQtdGFibGUge1xyXG4gICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xyXG5cclxuICAgICAgICAmOjp2LWRlZXAgLmZhZGUtdmFsdWUge1xyXG4gICAgICAgICAgICBjb2xvcjogcmdiYSh3aGl0ZSwgMC4xKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLnJhbmdlZC1zdGF0cy10YWJsZS1jZWxsIHtcclxuICAgICAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgfVxyXG48L3N0eWxlPiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RocmVhZC1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9SYW5nZWRTdGF0c1RhYmxlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTQwWzBdLnJ1bGVzWzBdLnVzZVswXSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdGhyZWFkLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTQwWzBdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzBdLnJ1bGVzWzBdLnVzZVswXSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1JhbmdlZFN0YXRzVGFibGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9SYW5nZWRTdGF0c1RhYmxlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xNTI2YmVjYSZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9SYW5nZWRTdGF0c1RhYmxlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vUmFuZ2VkU3RhdHNUYWJsZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vUmFuZ2VkU3RhdHNUYWJsZS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0xNTI2YmVjYSZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjE1MjZiZWNhXCIsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidGFibGUtY29udGFpbmVyXCJ9LFtfYygnZGl2JyxbX2MoJ3JhbmdlZC1zdGF0cy10YWJsZScse2F0dHJzOntcImRhdGFJdGVtc1wiOl92bS5ldmVudHMsXCJpdGVtc1wiOl92bS5pdGVtcyxcImZvb3Rlckl0ZW1zXCI6X3ZtLmZvb3Rlckl0ZW1zLFwic2hvdy1hdmVyYWdlXCI6XCJcIixcImF2ZXJhZ2VOdW1iZXJGb3JtYXRPcHRpb25zXCI6X3ZtLmF2Z051bWJlckZvcm1hdH0sc2NvcGVkU2xvdHM6X3ZtLl91KFt7a2V5OlwiY2VsbC1sYWJlbFwiLGZuOmZ1bmN0aW9uKHJlZil7XG52YXIgdmFsdWUgPSByZWYudmFsdWU7XG5yZXR1cm4gW19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJtci0yXCIsZG9tUHJvcHM6e1widGV4dENvbnRlbnRcIjpfdm0uX3ModmFsdWUpfX0pLF9jKCdvLXJlc291cmNlJyx7YXR0cnM6e1wicmVzb3VyY2VcIjpfdm0ucmVzb3VyY2VUeXBlc1t2YWx1ZV0sXCJzaXplXCI6X3ZtLnJlc291cmNlSWNvblNpemV9fSldfX1dKX0pXSwxKSxfYygnZmxvYXRpbmctbWVudScse3N0YXRpY0NsYXNzOlwiZmxvYXRpbmctc2V0dGluZ3NcIixhdHRyczp7XCJsZWZ0XCI6XCJcIn0sc2NvcGVkU2xvdHM6X3ZtLl91KFt7a2V5OlwiYWN0aXZhdG9yXCIsZm46ZnVuY3Rpb24oKXtyZXR1cm4gW19jKCdidXR0b24nLHtvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLnNob3dTZXR0aW5ncyA9ICFfdm0uc2hvd1NldHRpbmdzfX19LFtfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwibWRpIG1kaS1jb2dcIn0pXSldfSxwcm94eTp0cnVlfV0pLG1vZGVsOnt2YWx1ZTooX3ZtLnNob3dTZXR0aW5ncyksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS5zaG93U2V0dGluZ3M9JCR2fSxleHByZXNzaW9uOlwic2hvd1NldHRpbmdzXCJ9fSxbX2MoJ2NvbnZlcnNpb24tcmF0ZS1zZXR0aW5ncycpLF9jKCdzaG93LWNvbnZlcnRlZC1yZXNvdXJjZXMtaW4tY2VsbHMtc2V0dGluZ3MnKSxfYygnaHInLHtzdGF0aWNDbGFzczpcInR3by1jb2x1bW5cIn0pLF9jKCdleHBlZGl0aW9uLXNoaXAtcmVzb3VyY2UtdW5pdHMtZmFjdG9yLXNldHRpbmdzJyksX2MoJ2xvc3Qtc2hpcC1yZXNvdXJjZS11bml0cy1mYWN0b3Itc2V0dGluZ3MnKSxfYygnaHInLHtzdGF0aWNDbGFzczpcInR3by1jb2x1bW5cIn0pLF9jKCdpbmNsdWRlLXNoaXBzLWZvdW5kLW9uLWV4cGVkaXRpb25zLWluLXJlc291cmNlLWJhbGFuY2Utc2V0dGluZ3MnKSxfYygnaW5jbHVkZS1zaGlwcy1sb3N0LWluLWNvbWJhdHMtaW4tcmVzb3VyY2UtYmFsYW5jZScpLF9jKCdJbmNsdWRlTG9zdExvb3RSZXNvdXJjZXNJblJlc291cmNlQmFsYW5jZScpLF9jKCdocicse3N0YXRpY0NsYXNzOlwidHdvLWNvbHVtblwifSksX2MoJ2RldGFpbGVkLXJlc291cmNlLWJhbGFuY2Utc2V0dGluZ3MnKSxfYygnaHInLHtzdGF0aWNDbGFzczpcInR3by1jb2x1bW5cIn0pLF9jKCdkYXRlLXJhbmdlLXNldHRpbmdzJyx7c3RhdGljQ2xhc3M6XCJ0d28tY29sdW1uXCJ9KV0sMSldLDEpfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XHJcbiAgICA8ZGl2IGNsYXNzPVwidGFibGUtY29udGFpbmVyXCI+XHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPHJhbmdlZC1zdGF0cy10YWJsZSA6ZGF0YUl0ZW1zPVwiZXZlbnRzXCIgOml0ZW1zPVwiaXRlbXNcIiA6Zm9vdGVySXRlbXM9XCJmb290ZXJJdGVtc1wiIHNob3ctYXZlcmFnZSA6YXZlcmFnZU51bWJlckZvcm1hdE9wdGlvbnM9XCJhdmdOdW1iZXJGb3JtYXRcIj5cclxuICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSAjY2VsbC1sYWJlbD1cInsgdmFsdWUgfVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtdGV4dD1cInZhbHVlXCIgY2xhc3M9XCJtci0yXCIgLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPG8tcmVzb3VyY2UgOnJlc291cmNlPVwicmVzb3VyY2VUeXBlc1t2YWx1ZV1cIiA6c2l6ZT1cInJlc291cmNlSWNvblNpemVcIiAvPlxyXG4gICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgICAgICAgICAgPC9yYW5nZWQtc3RhdHMtdGFibGU+XHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgIDxmbG9hdGluZy1tZW51IHYtbW9kZWw9XCJzaG93U2V0dGluZ3NcIiBsZWZ0IGNsYXNzPVwiZmxvYXRpbmctc2V0dGluZ3NcIj5cclxuICAgICAgICAgICAgPHRlbXBsYXRlICNhY3RpdmF0b3I+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIEBjbGljaz1cInNob3dTZXR0aW5ncyA9ICFzaG93U2V0dGluZ3NcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kaSBtZGktY29nXCIgLz5cclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxyXG5cclxuICAgICAgICAgICAgPGNvbnZlcnNpb24tcmF0ZS1zZXR0aW5ncyAvPlxyXG4gICAgICAgICAgICA8c2hvdy1jb252ZXJ0ZWQtcmVzb3VyY2VzLWluLWNlbGxzLXNldHRpbmdzIC8+XHJcbiAgICAgICAgICAgIDxociBjbGFzcz1cInR3by1jb2x1bW5cIiAvPlxyXG4gICAgICAgICAgICA8ZXhwZWRpdGlvbi1zaGlwLXJlc291cmNlLXVuaXRzLWZhY3Rvci1zZXR0aW5ncyAvPlxyXG4gICAgICAgICAgICA8bG9zdC1zaGlwLXJlc291cmNlLXVuaXRzLWZhY3Rvci1zZXR0aW5ncyAvPlxyXG4gICAgICAgICAgICA8aHIgY2xhc3M9XCJ0d28tY29sdW1uXCIgLz5cclxuICAgICAgICAgICAgPGluY2x1ZGUtc2hpcHMtZm91bmQtb24tZXhwZWRpdGlvbnMtaW4tcmVzb3VyY2UtYmFsYW5jZS1zZXR0aW5ncyAvPlxyXG4gICAgICAgICAgICA8aW5jbHVkZS1zaGlwcy1sb3N0LWluLWNvbWJhdHMtaW4tcmVzb3VyY2UtYmFsYW5jZSAvPlxyXG4gICAgICAgICAgICA8SW5jbHVkZUxvc3RMb290UmVzb3VyY2VzSW5SZXNvdXJjZUJhbGFuY2UgLz5cclxuICAgICAgICAgICAgPGhyIGNsYXNzPVwidHdvLWNvbHVtblwiIC8+XHJcbiAgICAgICAgICAgIDxkZXRhaWxlZC1yZXNvdXJjZS1iYWxhbmNlLXNldHRpbmdzIC8+XHJcbiAgICAgICAgICAgIDxociBjbGFzcz1cInR3by1jb2x1bW5cIiAvPlxyXG4gICAgICAgICAgICA8ZGF0ZS1yYW5nZS1zZXR0aW5ncyBjbGFzcz1cInR3by1jb2x1bW5cIiAvPlxyXG4gICAgICAgIDwvZmxvYXRpbmctbWVudT5cclxuICAgIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdCBsYW5nPVwidHNcIj5cclxuICAgIGltcG9ydCB7IENvbXBvbmVudCwgVnVlIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7XHJcbiAgICBpbXBvcnQgUmFuZ2VkU3RhdHNUYWJsZSwgeyBSYW5nZWRTdGF0c1RhYmxlSXRlbSB9IGZyb20gJ0BzdGF0cy9jb21wb25lbnRzL3N0YXRzL1JhbmdlZFN0YXRzVGFibGUudnVlJztcclxuICAgIGltcG9ydCB7IFJlc291cmNlVHlwZSwgUmVzb3VyY2VUeXBlcyB9IGZyb20gJ0Avc2hhcmVkL21vZGVscy9vZ2FtZS9yZXNvdXJjZXMvUmVzb3VyY2VUeXBlJztcclxuICAgIGltcG9ydCB7IENvbWJhdFJlcG9ydERhdGFNb2R1bGUsIERhaWx5Q29tYmF0UmVwb3J0UmVzdWx0IH0gZnJvbSAnQC92aWV3cy9zdGF0cy9kYXRhL0NvbWJhdFJlcG9ydERhdGFNb2R1bGUnO1xyXG4gICAgaW1wb3J0IHsgRGFpbHlEZWJyaXNGaWVsZFJlcG9ydFJlc3VsdCwgRGVicmlzRmllbGRSZXBvcnREYXRhTW9kdWxlIH0gZnJvbSAnLi4vLi4vZGF0YS9EZWJyaXNGaWVsZFJlcG9ydERhdGFNb2R1bGUnO1xyXG4gICAgaW1wb3J0IHsgRGFpbHlFeHBlZGl0aW9uUmVzdWx0LCBFeHBlZGl0aW9uRGF0YU1vZHVsZSB9IGZyb20gJy4uLy4uL2RhdGEvRXhwZWRpdGlvbkRhdGFNb2R1bGUnO1xyXG4gICAgaW1wb3J0IHsgU2V0dGluZ3NEYXRhTW9kdWxlIH0gZnJvbSAnLi4vLi4vZGF0YS9TZXR0aW5nc0RhdGFNb2R1bGUnO1xyXG4gICAgaW1wb3J0IERhdGVSYW5nZVNldHRpbmdzIGZyb20gJ0BzdGF0cy9jb21wb25lbnRzL3NldHRpbmdzL0RhdGVSYW5nZVNldHRpbmdzLnZ1ZSc7XHJcbiAgICBpbXBvcnQgRGV0YWlsZWRSZXNvdXJjZUJhbGFuY2VTZXR0aW5ncyBmcm9tICdAL3ZpZXdzL3N0YXRzL2NvbXBvbmVudHMvc2V0dGluZ3MvcmVzb3VyY2UtYmFsYW5jZS9EZXRhaWxlZFJlc291cmNlQmFsYW5jZVNldHRpbmdzLnZ1ZSc7XHJcbiAgICBpbXBvcnQgQ29udmVyc2lvblJhdGVTZXR0aW5ncyBmcm9tICdAL3ZpZXdzL3N0YXRzL2NvbXBvbmVudHMvc2V0dGluZ3MvQ29udmVyc2lvblJhdGVTZXR0aW5ncy52dWUnO1xyXG4gICAgaW1wb3J0IEV4cGVkaXRpb25TaGlwUmVzb3VyY2VVbml0c0ZhY3RvclNldHRpbmdzIGZyb20gJ0BzdGF0cy9jb21wb25lbnRzL3NldHRpbmdzL0V4cGVkaXRpb25TaGlwUmVzb3VyY2VVbml0c0ZhY3RvclNldHRpbmdzLnZ1ZSc7XHJcbiAgICBpbXBvcnQgTG9zdFNoaXBSZXNvdXJjZVVuaXRzRmFjdG9yU2V0dGluZ3MgZnJvbSAnQHN0YXRzL2NvbXBvbmVudHMvc2V0dGluZ3MvTG9zdFNoaXBSZXNvdXJjZVVuaXRzRmFjdG9yU2V0dGluZ3MudnVlJztcclxuICAgIGltcG9ydCB7IGFkZERheXMsIGRpZmZlcmVuY2VJbkRheXMsIHN0YXJ0T2ZEYXkgfSBmcm9tICdkYXRlLWZucyc7XHJcbiAgICBpbXBvcnQgU2hvd0NvbnZlcnRlZFJlc291cmNlc0luQ2VsbHNTZXR0aW5ncyBmcm9tICdAc3RhdHMvY29tcG9uZW50cy9zZXR0aW5ncy9TaG93Q29udmVydGVkUmVzb3VyY2VzSW5DZWxsc1NldHRpbmdzLnZ1ZSc7XHJcbiAgICBpbXBvcnQgSW5jbHVkZVNoaXBzRm91bmRPbkV4cGVkaXRpb25zSW5SZXNvdXJjZUJhbGFuY2VTZXR0aW5ncyBmcm9tICdAL3ZpZXdzL3N0YXRzL2NvbXBvbmVudHMvc2V0dGluZ3MvcmVzb3VyY2UtYmFsYW5jZS9JbmNsdWRlU2hpcHNGb3VuZE9uRXhwZWRpdGlvbnNJblJlc291cmNlQmFsYW5jZVNldHRpbmdzLnZ1ZSc7XHJcbiAgICBpbXBvcnQgSW5jbHVkZVNoaXBzTG9zdEluQ29tYmF0c0luUmVzb3VyY2VCYWxhbmNlIGZyb20gJ0Avdmlld3Mvc3RhdHMvY29tcG9uZW50cy9zZXR0aW5ncy9yZXNvdXJjZS1iYWxhbmNlL0luY2x1ZGVTaGlwc0xvc3RJbkNvbWJhdHNJblJlc291cmNlQmFsYW5jZS52dWUnO1xyXG4gICAgaW1wb3J0IEluY2x1ZGVMb3N0TG9vdFJlc291cmNlc0luUmVzb3VyY2VCYWxhbmNlIGZyb20gJ0Avdmlld3Mvc3RhdHMvY29tcG9uZW50cy9zZXR0aW5ncy9yZXNvdXJjZS1iYWxhbmNlL0luY2x1ZGVMb3N0TG9vdFJlc291cmNlc0luUmVzb3VyY2VCYWxhbmNlLnZ1ZSc7XHJcbiAgICBpbXBvcnQgeyBnZXRNc3VPckRzdSB9IGZyb20gJy4uLy4uL21vZGVscy9zZXR0aW5ncy9nZXRNc3VPckRzdSc7XHJcblxyXG4gICAgdHlwZSBFdmVudFR5cGUgPSAnZXhwZWRpdGlvbicgfCAnY29tYmF0LXJlcG9ydCcgfCAnZGVicmlzLWZpZWxkLXJlcG9ydCc7XHJcbiAgICBjb25zdCBFdmVudFR5cGVzOiBFdmVudFR5cGVbXSA9IFsnZXhwZWRpdGlvbicsICdjb21iYXQtcmVwb3J0JywgJ2RlYnJpcy1maWVsZC1yZXBvcnQnXTtcclxuXHJcbiAgICBpbnRlcmZhY2UgRGFpbHlFdmVudHMge1xyXG4gICAgICAgIGRhdGU6IG51bWJlcjtcclxuXHJcbiAgICAgICAgZXhwZWRpdGlvbnM/OiBEYWlseUV4cGVkaXRpb25SZXN1bHQ7XHJcbiAgICAgICAgY29tYmF0cz86IERhaWx5Q29tYmF0UmVwb3J0UmVzdWx0O1xyXG4gICAgICAgIGRlYnJpc0ZpZWxkcz86IERhaWx5RGVicmlzRmllbGRSZXBvcnRSZXN1bHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIEBDb21wb25lbnQoe1xyXG4gICAgICAgIGNvbXBvbmVudHM6IHtcclxuICAgICAgICAgICAgUmFuZ2VkU3RhdHNUYWJsZSxcclxuICAgICAgICAgICAgRGF0ZVJhbmdlU2V0dGluZ3MsXHJcbiAgICAgICAgICAgIERldGFpbGVkUmVzb3VyY2VCYWxhbmNlU2V0dGluZ3MsXHJcbiAgICAgICAgICAgIENvbnZlcnNpb25SYXRlU2V0dGluZ3MsXHJcbiAgICAgICAgICAgIEV4cGVkaXRpb25TaGlwUmVzb3VyY2VVbml0c0ZhY3RvclNldHRpbmdzLFxyXG4gICAgICAgICAgICBMb3N0U2hpcFJlc291cmNlVW5pdHNGYWN0b3JTZXR0aW5ncyxcclxuICAgICAgICAgICAgU2hvd0NvbnZlcnRlZFJlc291cmNlc0luQ2VsbHNTZXR0aW5ncyxcclxuICAgICAgICAgICAgSW5jbHVkZVNoaXBzRm91bmRPbkV4cGVkaXRpb25zSW5SZXNvdXJjZUJhbGFuY2VTZXR0aW5ncyxcclxuICAgICAgICAgICAgSW5jbHVkZVNoaXBzTG9zdEluQ29tYmF0c0luUmVzb3VyY2VCYWxhbmNlLFxyXG4gICAgICAgICAgICBJbmNsdWRlTG9zdExvb3RSZXNvdXJjZXNJblJlc291cmNlQmFsYW5jZSxcclxuICAgICAgICB9LFxyXG4gICAgfSlcclxuICAgIGV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhYmxlIGV4dGVuZHMgVnVlIHtcclxuICAgICAgICBwcml2YXRlIHNob3dTZXR0aW5ncyA9IGZhbHNlO1xyXG5cclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGF2Z051bWJlckZvcm1hdDogSW50bC5OdW1iZXJGb3JtYXRPcHRpb25zID0ge1xyXG4gICAgICAgICAgICBtaW5pbXVtRnJhY3Rpb25EaWdpdHM6IDEsXHJcbiAgICAgICAgICAgIG1heGltdW1GcmFjdGlvbkRpZ2l0czogMSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBwcml2YXRlIGdldCBpbmNsdWRlRm91bmRTaGlwc0ZhY3RvcigpOiBSZWNvcmQ8UmVzb3VyY2VUeXBlLCBudW1iZXI+IHtcclxuICAgICAgICAgICAgY29uc3QgeyBmYWN0b3IsIGRldXRlcml1bUZhY3RvciB9ID0gU2V0dGluZ3NEYXRhTW9kdWxlLnNldHRpbmdzLmV4cGVkaXRpb25Gb3VuZFNoaXBzUmVzb3VyY2VVbml0cztcclxuICAgICAgICAgICAgY29uc3Qgc2V0dGluZ0ZhY3RvciA9IHRoaXMuaW5jbHVkZUZvdW5kU2hpcHMgPyAxIDogMDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBbUmVzb3VyY2VUeXBlLm1ldGFsXTogZmFjdG9yICogc2V0dGluZ0ZhY3RvcixcclxuICAgICAgICAgICAgICAgIFtSZXNvdXJjZVR5cGUuY3J5c3RhbF06IGZhY3RvciAqIHNldHRpbmdGYWN0b3IsXHJcbiAgICAgICAgICAgICAgICBbUmVzb3VyY2VUeXBlLmRldXRlcml1bV06IGRldXRlcml1bUZhY3RvciAqIHNldHRpbmdGYWN0b3IsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGdldCBpbmNsdWRlRm91bmRTaGlwcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFNldHRpbmdzRGF0YU1vZHVsZS5zZXR0aW5ncy5yZXNvdXJjZUJhbGFuY2UuaW5jbHVkZUV4cGVkaXRpb25Gb3VuZFNoaXBzUmVzb3VyY2VVbml0cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0IGluY2x1ZGVMb3N0U2hpcHMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBTZXR0aW5nc0RhdGFNb2R1bGUuc2V0dGluZ3MucmVzb3VyY2VCYWxhbmNlLmluY2x1ZGVMb3N0U2hpcHNSZXNvdXJjZVVuaXRzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBnZXQgaW5jbHVkZUxvc3RTaGlwc0ZhY3RvcigpOiBSZWNvcmQ8UmVzb3VyY2VUeXBlLCBudW1iZXI+IHtcclxuICAgICAgICAgICAgY29uc3QgeyBmYWN0b3IsIGRldXRlcml1bUZhY3RvciB9ID0gU2V0dGluZ3NEYXRhTW9kdWxlLnNldHRpbmdzLmxvc3RTaGlwc1Jlc291cmNlVW5pdHM7XHJcbiAgICAgICAgICAgIGNvbnN0IHNldHRpbmdGYWN0b3IgPSB0aGlzLmluY2x1ZGVMb3N0U2hpcHMgPyAxIDogMDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBbUmVzb3VyY2VUeXBlLm1ldGFsXTogZmFjdG9yICogc2V0dGluZ0ZhY3RvcixcclxuICAgICAgICAgICAgICAgIFtSZXNvdXJjZVR5cGUuY3J5c3RhbF06IGZhY3RvciAqIHNldHRpbmdGYWN0b3IsXHJcbiAgICAgICAgICAgICAgICBbUmVzb3VyY2VUeXBlLmRldXRlcml1bV06IGRldXRlcml1bUZhY3RvciAqIHNldHRpbmdGYWN0b3IsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGdldCBpbmNsdWRlTG9zdExvb3QoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBTZXR0aW5nc0RhdGFNb2R1bGUuc2V0dGluZ3MucmVzb3VyY2VCYWxhbmNlLmluY2x1ZGVMb3N0TG9vdFJlc291cmNlcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0IHJlc291cmNlVHlwZXMoKTogUmVjb3JkPHN0cmluZywgUmVzb3VyY2VUeXBlPiB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBbdGhpcy4kaTE4bi4kdC5leHRlbnNpb24ucmVzb3VyY2VzLm1ldGFsXTogUmVzb3VyY2VUeXBlLm1ldGFsLFxyXG4gICAgICAgICAgICAgICAgW3RoaXMuJGkxOG4uJHQuZXh0ZW5zaW9uLnJlc291cmNlcy5jcnlzdGFsXTogUmVzb3VyY2VUeXBlLmNyeXN0YWwsXHJcbiAgICAgICAgICAgICAgICBbdGhpcy4kaTE4bi4kdC5leHRlbnNpb24ucmVzb3VyY2VzLmRldXRlcml1bV06IFJlc291cmNlVHlwZS5kZXV0ZXJpdW0sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGdldCBldmVudHMoKTogRGFpbHlFdmVudHNbXSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1pbkRheSA9IE1hdGgubWluKENvbWJhdFJlcG9ydERhdGFNb2R1bGUuZmlyc3REYXksIERlYnJpc0ZpZWxkUmVwb3J0RGF0YU1vZHVsZS5maXJzdERheSwgRXhwZWRpdGlvbkRhdGFNb2R1bGUuZmlyc3REYXkpO1xyXG4gICAgICAgICAgICBjb25zdCBkYXlDb3VudCA9IGRpZmZlcmVuY2VJbkRheXMoc3RhcnRPZkRheShEYXRlLm5vdygpKSwgbWluRGF5KTtcclxuICAgICAgICAgICAgY29uc3QgZGF5cyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IGRheUNvdW50ICsgMSB9KS5tYXAoKF8sIGFkZCkgPT4gYWRkRGF5cyhtaW5EYXksIGFkZCkuZ2V0VGltZSgpKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBkYXlzLm1hcDxEYWlseUV2ZW50cz4oZGF5ID0+ICh7XHJcbiAgICAgICAgICAgICAgICBkYXRlOiBkYXksXHJcbiAgICAgICAgICAgICAgICBleHBlZGl0aW9uczogRXhwZWRpdGlvbkRhdGFNb2R1bGUuZGFpbHlSZXN1bHRzW2RheV0sXHJcbiAgICAgICAgICAgICAgICBjb21iYXRzOiBDb21iYXRSZXBvcnREYXRhTW9kdWxlLmRhaWx5UmVzdWx0c1tkYXldLFxyXG4gICAgICAgICAgICAgICAgZGVicmlzRmllbGRzOiBEZWJyaXNGaWVsZFJlcG9ydERhdGFNb2R1bGUuZGFpbHlSZXN1bHRzW2RheV0sXHJcbiAgICAgICAgICAgIH0pKS5maWx0ZXIoZXYgPT4gKGV2LmV4cGVkaXRpb25zID8/IGV2LmNvbWJhdHMgPz8gZXYuZGVicmlzRmllbGRzKSAhPSBudWxsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0IHNldHRpbmdzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gU2V0dGluZ3NEYXRhTW9kdWxlLnNldHRpbmdzLnJlc291cmNlQmFsYW5jZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0IHJlc291cmNlSWNvblNpemUoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnNob3dEZXRhaWxlZEJyZWFrZG93bikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICczNnB4JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gJzI0cHgnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBnZXQgaXRlbXMoKTogUmFuZ2VkU3RhdHNUYWJsZUl0ZW08RGFpbHlFdmVudHM+W10ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5zaG93RGV0YWlsZWRCcmVha2Rvd24pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHR5cGVzOiBSZWNvcmQ8UmVzb3VyY2VUeXBlLCAoRXZlbnRUeXBlIHwgbnVsbClbXT4gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgW1Jlc291cmNlVHlwZS5tZXRhbF06IFsnZXhwZWRpdGlvbicsICdjb21iYXQtcmVwb3J0JywgJ2RlYnJpcy1maWVsZC1yZXBvcnQnLCBudWxsXSxcclxuICAgICAgICAgICAgICAgICAgICBbUmVzb3VyY2VUeXBlLmNyeXN0YWxdOiBbJ2V4cGVkaXRpb24nLCAnY29tYmF0LXJlcG9ydCcsICdkZWJyaXMtZmllbGQtcmVwb3J0JywgbnVsbF0sXHJcbiAgICAgICAgICAgICAgICAgICAgW1Jlc291cmNlVHlwZS5kZXV0ZXJpdW1dOiBbJ2V4cGVkaXRpb24nLCAnY29tYmF0LXJlcG9ydCcsICdkZWJyaXMtZmllbGQtcmVwb3J0JywgbnVsbF0sXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBSZXNvdXJjZVR5cGVzLm1hcDxSYW5nZWRTdGF0c1RhYmxlSXRlbTxEYWlseUV2ZW50cz4+KHJlc291cmNlID0+ICh7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHRoaXMuJGkxOG4uJHQuZXh0ZW5zaW9uLnJlc291cmNlc1tyZXNvdXJjZV0sXHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbXM6IHR5cGVzW3Jlc291cmNlXS5tYXAoZXZlbnRUeXBlID0+ICh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBldmVudFR5cGUgPT0gbnVsbCA/IHRoaXMuJGkxOG4uJHQuZXh0ZW5zaW9uLmNvbW1vbi5zdW0gOiB0aGlzLiRpMThuLiR0LmV4dGVuc2lvbi5yZXNvdXJjZUJhbGFuY2VbZXZlbnRUeXBlXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0VmFsdWU6IGV2ZW50cyA9PiB0aGlzLmdldFJlc291cmNlcyhldmVudHMsIGV2ZW50VHlwZSwgcmVzb3VyY2UpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogZXZlbnRUeXBlID09IG51bGwgPyAnc3VtLWl0ZW0nIDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsQ2xhc3M6IGV2ZW50VHlwZSA9PSBudWxsID8gJ3N1bS1pdGVtJyA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pKSxcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIFJlc291cmNlVHlwZXMubWFwKHJlc291cmNlID0+ICh7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogdGhpcy4kaTE4bi4kdC5leHRlbnNpb24ucmVzb3VyY2VzW3Jlc291cmNlXSxcclxuICAgICAgICAgICAgICAgIGdldFZhbHVlOiBldmVudHMgPT4gdGhpcy5nZXRSZXNvdXJjZXMoZXZlbnRzLCBudWxsLCByZXNvdXJjZSksXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0UmVzb3VyY2VzKGV2ZW50czogRGFpbHlFdmVudHNbXSwgZXZlbnRUeXBlOiBFdmVudFR5cGUgfCBudWxsLCByZXNvdXJjZTogUmVzb3VyY2VUeXBlKTogbnVtYmVyIHtcclxuICAgICAgICAgICAgcmV0dXJuIGV2ZW50cy5yZWR1Y2UoKGFjYywgZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZXZlbnRUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZXhwZWRpdGlvbic6IHJldHVybiBhY2MgKyB0aGlzLmdldFJlc291cmNlKHsgZGF0ZTogZXZlbnQuZGF0ZSwgZXhwZWRpdGlvbnM6IGV2ZW50LmV4cGVkaXRpb25zIH0sIHJlc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdjb21iYXQtcmVwb3J0JzogcmV0dXJuIGFjYyArIHRoaXMuZ2V0UmVzb3VyY2UoeyBkYXRlOiBldmVudC5kYXRlLCBjb21iYXRzOiBldmVudC5jb21iYXRzIH0sIHJlc291cmNlKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdkZWJyaXMtZmllbGQtcmVwb3J0JzogcmV0dXJuIGFjYyArIHRoaXMuZ2V0UmVzb3VyY2UoeyBkYXRlOiBldmVudC5kYXRlLCBkZWJyaXNGaWVsZHM6IGV2ZW50LmRlYnJpc0ZpZWxkcyB9LCByZXNvdXJjZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBudWxsOiByZXR1cm4gYWNjICsgdGhpcy5nZXRSZXNvdXJjZShldmVudCwgcmVzb3VyY2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0UmVzb3VyY2UoZGF5RXZlbnRzOiBEYWlseUV2ZW50cywgcmVzb3VyY2U6IFJlc291cmNlVHlwZSk6IG51bWJlciB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEV4cGVkaXRpb25SZXNvdXJjZUFtb3VudChkYXlFdmVudHMuZXhwZWRpdGlvbnMsIHJlc291cmNlKVxyXG4gICAgICAgICAgICAgICAgKyB0aGlzLmdldENvbWJhdFJlc291cmNlQW1vdW50KGRheUV2ZW50cy5jb21iYXRzLCByZXNvdXJjZSlcclxuICAgICAgICAgICAgICAgICsgdGhpcy5nZXREZWJyaXNGaWVsZFJlc291cmNlQW1vdW50KGRheUV2ZW50cy5kZWJyaXNGaWVsZHMsIHJlc291cmNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0RXhwZWRpdGlvblJlc291cmNlQW1vdW50KGV4cGVkaXRpb25zOiBEYWlseUV4cGVkaXRpb25SZXN1bHQgfCB1bmRlZmluZWQsIHJlc291cmNlOiBSZXNvdXJjZVR5cGUpOiBudW1iZXIge1xyXG4gICAgICAgICAgICBpZiAoZXhwZWRpdGlvbnMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGluY2x1ZGVGb3VuZFNoaXBzRmFjdG9yID0gdGhpcy5pbmNsdWRlRm91bmRTaGlwc0ZhY3RvcltyZXNvdXJjZV07XHJcbiAgICAgICAgICAgIGNvbnN0IHRvdGFsID0gZXhwZWRpdGlvbnMuZmluZGluZ3MucmVzb3VyY2VzW3Jlc291cmNlXVxyXG4gICAgICAgICAgICAgICAgKyBleHBlZGl0aW9ucy5maW5kaW5ncy5mbGVldFJlc291cmNlVW5pdHNbcmVzb3VyY2VdICogaW5jbHVkZUZvdW5kU2hpcHNGYWN0b3I7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdG90YWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGdldENvbWJhdFJlc291cmNlQW1vdW50KGRhaWx5UmVwb3J0czogRGFpbHlDb21iYXRSZXBvcnRSZXN1bHQgfCB1bmRlZmluZWQsIHJlc291cmNlOiBSZXNvdXJjZVR5cGUpOiBudW1iZXIge1xyXG4gICAgICAgICAgICBpZiAoZGFpbHlSZXBvcnRzID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBsb3N0TG9vdEZhY3RvciA9IHRoaXMuaW5jbHVkZUxvc3RMb290ID8gMSA6IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IGxvb3RSZXNvdXJjZXMgPSBkYWlseVJlcG9ydHMubG9vdC5sb3N0W3Jlc291cmNlXSAqIGxvc3RMb290RmFjdG9yXHJcbiAgICAgICAgICAgICAgICArIGRhaWx5UmVwb3J0cy5sb290LmdhaW5lZFtyZXNvdXJjZV07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBpbmNsdWRlTG9zdFNoaXBzRmFjdG9yID0gdGhpcy5pbmNsdWRlTG9zdFNoaXBzRmFjdG9yW3Jlc291cmNlXTtcclxuICAgICAgICAgICAgY29uc3QgbG9zdFNoaXBSZXNvdXJjZVVuaXRzID0gKFxyXG4gICAgICAgICAgICAgICAgZGFpbHlSZXBvcnRzLmxvc3RTaGlwcy5vbkV4cGVkaXRpb25zLnJlc291cmNlVW5pdHNbcmVzb3VyY2VdXHJcbiAgICAgICAgICAgICAgICArIGRhaWx5UmVwb3J0cy5sb3N0U2hpcHMuYWdhaW5zdFBsYXllcnMucmVzb3VyY2VVbml0c1tyZXNvdXJjZV1cclxuICAgICAgICAgICAgKSAqIGluY2x1ZGVMb3N0U2hpcHNGYWN0b3I7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0b3RhbCA9IGxvb3RSZXNvdXJjZXMgLSBsb3N0U2hpcFJlc291cmNlVW5pdHM7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdG90YWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGdldERlYnJpc0ZpZWxkUmVzb3VyY2VBbW91bnQocmVwb3J0czogRGFpbHlEZWJyaXNGaWVsZFJlcG9ydFJlc3VsdCB8IHVuZGVmaW5lZCwgcmVzb3VyY2U6IFJlc291cmNlVHlwZSk6IG51bWJlciB7XHJcbiAgICAgICAgICAgIGlmIChyZXBvcnRzID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVwb3J0cy50b3RhbFtyZXNvdXJjZV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGdldCBmb290ZXJJdGVtcygpOiBSYW5nZWRTdGF0c1RhYmxlSXRlbTxEYWlseUV2ZW50cz5bXSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdDogUmFuZ2VkU3RhdHNUYWJsZUl0ZW08RGFpbHlFdmVudHM+W10gPSBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHRoaXMuJGkxOG4uJHQuZXh0ZW5zaW9uLmNvbW1vbi5yZXNvdXJjZVVuaXRzLFxyXG4gICAgICAgICAgICAgICAgICAgIGdldFZhbHVlOiBldmVudHMgPT4gUmVzb3VyY2VUeXBlcy5yZWR1Y2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICh0b3RhbCwgcmVzb3VyY2UpID0+IHRvdGFsICsgRXZlbnRUeXBlcy5yZWR1Y2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodG90YWwsIGV2ZW50VHlwZSkgPT4gdG90YWwgKyB0aGlzLmdldFJlc291cmNlcyhldmVudHMsIGV2ZW50VHlwZSwgcmVzb3VyY2UpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAwXHJcbiAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF07XHJcblxyXG4gICAgICAgICAgICBpZiAoU2V0dGluZ3NEYXRhTW9kdWxlLnNldHRpbmdzLnNob3dDZWxsc1dpdGhDb252ZXJ0ZWRSZXNvdXJjZVVuaXRzKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGAke3RoaXMuJGkxOG4uJHQuZXh0ZW5zaW9uLmNvbW1vbi5yZXNvdXJjZVVuaXRzfSAoJHtTZXR0aW5nc0RhdGFNb2R1bGUuc2V0dGluZ3MuY29udmVyc2lvblJhdGVzLm1vZGUgPT0gJ21zdScgPyB0aGlzLiRpMThuLiR0LmV4dGVuc2lvbi5jb21tb24ubXN1IDogdGhpcy4kaTE4bi4kdC5leHRlbnNpb24uY29tbW9uLmRzdX0pYCxcclxuICAgICAgICAgICAgICAgICAgICBnZXRWYWx1ZTogZXZlbnRzID0+IFJlc291cmNlVHlwZXMucmVkdWNlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAodG90YWwsIHJlc291cmNlKSA9PiB0b3RhbCArIEV2ZW50VHlwZXMucmVkdWNlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRvdGFsLCBldmVudFR5cGUpID0+IHRvdGFsICsgZ2V0TXN1T3JEc3Uoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtyZXNvdXJjZV06IHRoaXMuZ2V0UmVzb3VyY2VzKGV2ZW50cywgZXZlbnRUeXBlLCByZXNvdXJjZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAwXHJcbiAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XHJcbiAgICAudGFibGUtY29udGFpbmVyIHtcclxuICAgICAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgICAgIGNvbHVtbi1nYXA6IDRweDtcclxuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciBhdXRvO1xyXG4gICAgICAgIGFsaWduLWl0ZW1zOiBzdGFydDtcclxuICAgICAgICBoZWlnaHQ6IDEwMCU7XHJcblxyXG4gICAgICAgICY6OnYtZGVlcCB7XHJcbiAgICAgICAgICAgIC5zdW0taXRlbSB7XHJcbiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgICAgICAgICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCByZ2JhKHZhcigtLWNvbG9yKSwgMC41KTtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDFweDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAuZmxvYXRpbmctc2V0dGluZ3M6OnYtZGVlcCAuZmxvYXRpbmctbWVudSB7XHJcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcclxuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG8gYXV0bztcclxuICAgICAgICBjb2x1bW4tZ2FwOiA4cHg7XHJcblxyXG4gICAgICAgIC50d28tY29sdW1uIHtcclxuICAgICAgICAgICAgZ3JpZC1jb2x1bW46IDEgLyBzcGFuIDI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBociB7XHJcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuPC9zdHlsZT4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vVGFibGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vVGFibGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9UYWJsZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MmY5OTdkOWYmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vVGFibGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9UYWJsZS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vVGFibGUudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9MmY5OTdkOWYmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCIyZjk5N2Q5ZlwiLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcmVxdWlyZWRBcmdzO1xuXG5mdW5jdGlvbiByZXF1aXJlZEFyZ3MocmVxdWlyZWQsIGFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoIDwgcmVxdWlyZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHJlcXVpcmVkICsgJyBhcmd1bWVudCcgKyAocmVxdWlyZWQgPiAxID8gJ3MnIDogJycpICsgJyByZXF1aXJlZCwgYnV0IG9ubHkgJyArIGFyZ3MubGVuZ3RoICsgJyBwcmVzZW50Jyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7IiwiaW1wb3J0IGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMgZnJvbSBcIi4uL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZEYXkgZnJvbSBcIi4uL3N0YXJ0T2ZEYXkvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX0RBWSA9IDg2NDAwMDAwO1xuLyoqXG4gKiBAbmFtZSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXNcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgR2V0IHRoZSBudW1iZXIgb2YgY2FsZW5kYXIgZGF5cyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcy5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIGRheXMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuIFRoaXMgbWVhbnMgdGhhdCB0aGUgdGltZXMgYXJlIHJlbW92ZWRcbiAqIGZyb20gdGhlIGRhdGVzIGFuZCB0aGVuIHRoZSBkaWZmZXJlbmNlIGluIGRheXMgaXMgY2FsY3VsYXRlZC5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVMZWZ0IC0gdGhlIGxhdGVyIGRhdGVcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVSaWdodCAtIHRoZSBlYXJsaWVyIGRhdGVcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSBudW1iZXIgb2YgY2FsZW5kYXIgZGF5c1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBIb3cgbWFueSBjYWxlbmRhciBkYXlzIGFyZSBiZXR3ZWVuXG4gKiAvLyAyIEp1bHkgMjAxMSAyMzowMDowMCBhbmQgMiBKdWx5IDIwMTIgMDA6MDA6MDA/XG4gKiBjb25zdCByZXN1bHQgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoXG4gKiAgIG5ldyBEYXRlKDIwMTIsIDYsIDIsIDAsIDApLFxuICogICBuZXcgRGF0ZSgyMDExLCA2LCAyLCAyMywgMClcbiAqIClcbiAqIC8vPT4gMzY2XG4gKiAvLyBIb3cgbWFueSBjYWxlbmRhciBkYXlzIGFyZSBiZXR3ZWVuXG4gKiAvLyAyIEp1bHkgMjAxMSAyMzo1OTowMCBhbmQgMyBKdWx5IDIwMTEgMDA6MDE6MDA/XG4gKiBjb25zdCByZXN1bHQgPSBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoXG4gKiAgIG5ldyBEYXRlKDIwMTEsIDYsIDMsIDAsIDEpLFxuICogICBuZXcgRGF0ZSgyMDExLCA2LCAyLCAyMywgNTkpXG4gKiApXG4gKiAvLz0+IDFcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoZGlydHlEYXRlTGVmdCwgZGlydHlEYXRlUmlnaHQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBzdGFydE9mRGF5TGVmdCA9IHN0YXJ0T2ZEYXkoZGlydHlEYXRlTGVmdCk7XG4gIHZhciBzdGFydE9mRGF5UmlnaHQgPSBzdGFydE9mRGF5KGRpcnR5RGF0ZVJpZ2h0KTtcbiAgdmFyIHRpbWVzdGFtcExlZnQgPSBzdGFydE9mRGF5TGVmdC5nZXRUaW1lKCkgLSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKHN0YXJ0T2ZEYXlMZWZ0KTtcbiAgdmFyIHRpbWVzdGFtcFJpZ2h0ID0gc3RhcnRPZkRheVJpZ2h0LmdldFRpbWUoKSAtIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoc3RhcnRPZkRheVJpZ2h0KTsgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIGRheSBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIGRheSBvZiB0aGUgZGF5bGlnaHQgc2F2aW5nIHRpbWUgY2xvY2sgc2hpZnQpXG5cbiAgcmV0dXJuIE1hdGgucm91bmQoKHRpbWVzdGFtcExlZnQgLSB0aW1lc3RhbXBSaWdodCkgLyBNSUxMSVNFQ09ORFNfSU5fREFZKTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMgZnJvbSBcIi4uL2RpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cy9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjsgLy8gTGlrZSBgY29tcGFyZUFzY2AgYnV0IHVzZXMgbG9jYWwgdGltZSBub3QgVVRDLCB3aGljaCBpcyBuZWVkZWRcbi8vIGZvciBhY2N1cmF0ZSBlcXVhbGl0eSBjb21wYXJpc29ucyBvZiBVVEMgdGltZXN0YW1wcyB0aGF0IGVuZCB1cFxuLy8gaGF2aW5nIHRoZSBzYW1lIHJlcHJlc2VudGF0aW9uIGluIGxvY2FsIHRpbWUsIGUuZy4gb25lIGhvdXIgYmVmb3JlXG4vLyBEU1QgZW5kcyB2cy4gdGhlIGluc3RhbnQgdGhhdCBEU1QgZW5kcy5cblxuZnVuY3Rpb24gY29tcGFyZUxvY2FsQXNjKGRhdGVMZWZ0LCBkYXRlUmlnaHQpIHtcbiAgdmFyIGRpZmYgPSBkYXRlTGVmdC5nZXRGdWxsWWVhcigpIC0gZGF0ZVJpZ2h0LmdldEZ1bGxZZWFyKCkgfHwgZGF0ZUxlZnQuZ2V0TW9udGgoKSAtIGRhdGVSaWdodC5nZXRNb250aCgpIHx8IGRhdGVMZWZ0LmdldERhdGUoKSAtIGRhdGVSaWdodC5nZXREYXRlKCkgfHwgZGF0ZUxlZnQuZ2V0SG91cnMoKSAtIGRhdGVSaWdodC5nZXRIb3VycygpIHx8IGRhdGVMZWZ0LmdldE1pbnV0ZXMoKSAtIGRhdGVSaWdodC5nZXRNaW51dGVzKCkgfHwgZGF0ZUxlZnQuZ2V0U2Vjb25kcygpIC0gZGF0ZVJpZ2h0LmdldFNlY29uZHMoKSB8fCBkYXRlTGVmdC5nZXRNaWxsaXNlY29uZHMoKSAtIGRhdGVSaWdodC5nZXRNaWxsaXNlY29uZHMoKTtcblxuICBpZiAoZGlmZiA8IDApIHtcbiAgICByZXR1cm4gLTE7XG4gIH0gZWxzZSBpZiAoZGlmZiA+IDApIHtcbiAgICByZXR1cm4gMTsgLy8gUmV0dXJuIDAgaWYgZGlmZiBpcyAwOyByZXR1cm4gTmFOIGlmIGRpZmYgaXMgTmFOXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGRpZmY7XG4gIH1cbn1cbi8qKlxuICogQG5hbWUgZGlmZmVyZW5jZUluRGF5c1xuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG51bWJlciBvZiBmdWxsIGRheXMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBmdWxsIGRheSBwZXJpb2RzIGJldHdlZW4gdHdvIGRhdGVzLiBGcmFjdGlvbmFsIGRheXMgYXJlXG4gKiB0cnVuY2F0ZWQgdG93YXJkcyB6ZXJvLlxuICpcbiAqIE9uZSBcImZ1bGwgZGF5XCIgaXMgdGhlIGRpc3RhbmNlIGJldHdlZW4gYSBsb2NhbCB0aW1lIGluIG9uZSBkYXkgdG8gdGhlIHNhbWVcbiAqIGxvY2FsIHRpbWUgb24gdGhlIG5leHQgb3IgcHJldmlvdXMgZGF5LiBBIGZ1bGwgZGF5IGNhbiBzb21ldGltZXMgYmUgbGVzcyB0aGFuXG4gKiBvciBtb3JlIHRoYW4gMjQgaG91cnMgaWYgYSBkYXlsaWdodCBzYXZpbmdzIGNoYW5nZSBoYXBwZW5zIGJldHdlZW4gdHdvIGRhdGVzLlxuICpcbiAqIFRvIGlnbm9yZSBEU1QgYW5kIG9ubHkgbWVhc3VyZSBleGFjdCAyNC1ob3VyIHBlcmlvZHMsIHVzZSB0aGlzIGluc3RlYWQ6XG4gKiBgTWF0aC5mbG9vcihkaWZmZXJlbmNlSW5Ib3VycyhkYXRlTGVmdCwgZGF0ZVJpZ2h0KS8yNCl8MGAuXG4gKlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZUxlZnQgLSB0aGUgbGF0ZXIgZGF0ZVxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIGVhcmxpZXIgZGF0ZVxuICogQHJldHVybnMge051bWJlcn0gdGhlIG51bWJlciBvZiBmdWxsIGRheXMgYWNjb3JkaW5nIHRvIHRoZSBsb2NhbCB0aW1lem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBIb3cgbWFueSBmdWxsIGRheXMgYXJlIGJldHdlZW5cbiAqIC8vIDIgSnVseSAyMDExIDIzOjAwOjAwIGFuZCAyIEp1bHkgMjAxMiAwMDowMDowMD9cbiAqIGNvbnN0IHJlc3VsdCA9IGRpZmZlcmVuY2VJbkRheXMoXG4gKiAgIG5ldyBEYXRlKDIwMTIsIDYsIDIsIDAsIDApLFxuICogICBuZXcgRGF0ZSgyMDExLCA2LCAyLCAyMywgMClcbiAqIClcbiAqIC8vPT4gMzY1XG4gKiAvLyBIb3cgbWFueSBmdWxsIGRheXMgYXJlIGJldHdlZW5cbiAqIC8vIDIgSnVseSAyMDExIDIzOjU5OjAwIGFuZCAzIEp1bHkgMjAxMSAwMDowMTowMD9cbiAqIGNvbnN0IHJlc3VsdCA9IGRpZmZlcmVuY2VJbkRheXMoXG4gKiAgIG5ldyBEYXRlKDIwMTEsIDYsIDMsIDAsIDEpLFxuICogICBuZXcgRGF0ZSgyMDExLCA2LCAyLCAyMywgNTkpXG4gKiApXG4gKiAvLz0+IDBcbiAqIC8vIEhvdyBtYW55IGZ1bGwgZGF5cyBhcmUgYmV0d2VlblxuICogLy8gMSBNYXJjaCAyMDIwIDA6MDAgYW5kIDEgSnVuZSAyMDIwIDA6MDAgP1xuICogLy8gTm90ZTogYmVjYXVzZSBsb2NhbCB0aW1lIGlzIHVzZWQsIHRoZVxuICogLy8gcmVzdWx0IHdpbGwgYWx3YXlzIGJlIDkyIGRheXMsIGV2ZW4gaW5cbiAqIC8vIHRpbWUgem9uZXMgd2hlcmUgRFNUIHN0YXJ0cyBhbmQgdGhlXG4gKiAvLyBwZXJpb2QgaGFzIG9ubHkgOTIqMjQtMSBob3Vycy5cbiAqIGNvbnN0IHJlc3VsdCA9IGRpZmZlcmVuY2VJbkRheXMoXG4gKiAgIG5ldyBEYXRlKDIwMjAsIDUsIDEpLFxuICogICBuZXcgRGF0ZSgyMDIwLCAyLCAxKVxuICogKVxuLy89PiA5MlxuICovXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlmZmVyZW5jZUluRGF5cyhkaXJ0eURhdGVMZWZ0LCBkaXJ0eURhdGVSaWdodCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGVMZWZ0ID0gdG9EYXRlKGRpcnR5RGF0ZUxlZnQpO1xuICB2YXIgZGF0ZVJpZ2h0ID0gdG9EYXRlKGRpcnR5RGF0ZVJpZ2h0KTtcbiAgdmFyIHNpZ24gPSBjb21wYXJlTG9jYWxBc2MoZGF0ZUxlZnQsIGRhdGVSaWdodCk7XG4gIHZhciBkaWZmZXJlbmNlID0gTWF0aC5hYnMoZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKGRhdGVMZWZ0LCBkYXRlUmlnaHQpKTtcbiAgZGF0ZUxlZnQuc2V0RGF0ZShkYXRlTGVmdC5nZXREYXRlKCkgLSBzaWduICogZGlmZmVyZW5jZSk7IC8vIE1hdGguYWJzKGRpZmYgaW4gZnVsbCBkYXlzIC0gZGlmZiBpbiBjYWxlbmRhciBkYXlzKSA9PT0gMSBpZiBsYXN0IGNhbGVuZGFyIGRheSBpcyBub3QgZnVsbFxuICAvLyBJZiBzbywgcmVzdWx0IG11c3QgYmUgZGVjcmVhc2VkIGJ5IDEgaW4gYWJzb2x1dGUgdmFsdWVcblxuICB2YXIgaXNMYXN0RGF5Tm90RnVsbCA9IE51bWJlcihjb21wYXJlTG9jYWxBc2MoZGF0ZUxlZnQsIGRhdGVSaWdodCkgPT09IC1zaWduKTtcbiAgdmFyIHJlc3VsdCA9IHNpZ24gKiAoZGlmZmVyZW5jZSAtIGlzTGFzdERheU5vdEZ1bGwpOyAvLyBQcmV2ZW50IG5lZ2F0aXZlIHplcm9cblxuICByZXR1cm4gcmVzdWx0ID09PSAwID8gMCA6IHJlc3VsdDtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHN0YXJ0T2ZEYXk7XG5cbnZhciBfaW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi90b0RhdGUvaW5kZXguanNcIikpO1xuXG52YXIgX2luZGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSBzdGFydE9mRGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHN0YXJ0IG9mIGEgZGF5XG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgZGF5IGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZkRheShuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBUdWUgU2VwIDAyIDIwMTQgMDA6MDA6MDBcbiAqL1xuZnVuY3Rpb24gc3RhcnRPZkRheShkaXJ0eURhdGUpIHtcbiAgKDAsIF9pbmRleDIuZGVmYXVsdCkoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSAoMCwgX2luZGV4LmRlZmF1bHQpKGRpcnR5RGF0ZSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRvRGF0ZTtcblxudmFyIF9pbmRleCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBAbmFtZSB0b0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0cyBjbG9uZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIG5vbmUgb2YgdGhlIGFib3ZlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogKipOb3RlKio6ICphbGwqIERhdGUgYXJndW1lbnRzIHBhc3NlZCB0byBhbnkgKmRhdGUtZm5zKiBmdW5jdGlvbiBpcyBwcm9jZXNzZWQgYnkgYHRvRGF0ZWAuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gYXJndW1lbnQgLSB0aGUgdmFsdWUgdG8gY29udmVydFxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ2xvbmUgdGhlIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCB0aGUgdGltZXN0YW1wIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUoMTM5MjA5ODQzMDAwMClcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKi9cbmZ1bmN0aW9uIHRvRGF0ZShhcmd1bWVudCkge1xuICAoMCwgX2luZGV4LmRlZmF1bHQpKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBhcmdTdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpOyAvLyBDbG9uZSB0aGUgZGF0ZVxuXG4gIGlmIChhcmd1bWVudCBpbnN0YW5jZW9mIERhdGUgfHwgdHlwZW9mIGFyZ3VtZW50ID09PSAnb2JqZWN0JyAmJiBhcmdTdHIgPT09ICdbb2JqZWN0IERhdGVdJykge1xuICAgIC8vIFByZXZlbnQgdGhlIGRhdGUgdG8gbG9zZSB0aGUgbWlsbGlzZWNvbmRzIHdoZW4gcGFzc2VkIHRvIG5ldyBEYXRlKCkgaW4gSUUxMFxuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudC5nZXRUaW1lKCkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhcmd1bWVudCA9PT0gJ251bWJlcicgfHwgYXJnU3RyID09PSAnW29iamVjdCBOdW1iZXJdJykge1xuICAgIHJldHVybiBuZXcgRGF0ZShhcmd1bWVudCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCh0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgU3RyaW5nXScpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcIlN0YXJ0aW5nIHdpdGggdjIuMC4wLWJldGEuMSBkYXRlLWZucyBkb2Vzbid0IGFjY2VwdCBzdHJpbmdzIGFzIGRhdGUgYXJndW1lbnRzLiBQbGVhc2UgdXNlIGBwYXJzZUlTT2AgdG8gcGFyc2Ugc3RyaW5ncy4gU2VlOiBodHRwczovL2dpdC5pby9manVsZVwiKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcblxuICAgICAgY29uc29sZS53YXJuKG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDsiXSwibmFtZXMiOlsiZ2V0TXN1T3JEc3UiLCJyZXNvdXJjZXMiLCJmYWN0b3JzIiwiY29zdCIsIm1ldGFsIiwiY3J5c3RhbCIsImRldXRlcml1bSIsImNvc3RGYWN0b3JzIiwicmVzb3VyY2UiLCJtb2RlIiwibXN1IiwiZHN1IiwicmVuZGVyIiwiX3ZtIiwidGhpcyIsIl9oIiwiJGNyZWF0ZUVsZW1lbnQiLCJfYyIsIl9zZWxmIiwic3RhdGljQ2xhc3MiLCJkb21Qcm9wcyIsIl9zIiwiJGkxOG4iLCIkdCIsImV4dGVuc2lvbiIsInNldHRpbmdzIiwiY29tbW9uIiwiY29udmVyc2lvblJhdGVzIiwidGl0bGUiLCJjb252ZXJzaW9uTW9kZSIsIm9uIiwiJGV2ZW50Iiwic2V0Q29udmVyc2lvbk1vZGUiLCJ0YXJnZXQiLCJ2YWx1ZSIsImF0dHJzIiwiZGlyZWN0aXZlcyIsIm5hbWUiLCJyYXdOYW1lIiwiZXhwcmVzc2lvbiIsIm1vZGlmaWVycyIsIiRzZXQiLCJfbiIsInVwZGF0ZU1zdUNvbnZlcnNpb25SYXRlcyIsIiRmb3JjZVVwZGF0ZSIsInVwZGF0ZURzdUNvbnZlcnNpb25SYXRlcyIsInN0YXRpY1JlbmRlckZucyIsImNvbXBvbmVudCIsImV4cGVkaXRpb25zIiwicmVzb3VyY2VVbml0RmFjdG9yc09mU2hpcEZvdW5kT25FeHBlZGl0aW9ucyIsImZhY3RvciIsInVwZGF0ZUZhY3RvcnMiLCJpc0ZvY3VzZWQiLCJvbkJsdXIiLCJkZXV0ZXJpdW1GYWN0b3IiLCJjb21iYXRzIiwicmVzb3VyY2VVbml0RmFjdG9yc09mTG9zdFNoaXBzIiwic2hvd0NvbnZlcnRlZFVuaXRzSW5UYWJsZXMiLCJzaG93Q2VsbHNXaXRoQ29udmVydGVkUmVzb3VyY2VVbml0cyIsImxhYmVsIiwidG9nZ2xlIiwiX3QiLCJyZXNvdXJjZUJhbGFuY2UiLCJkZXRhaWxlZFJlc291cmNlQmFsYW5jZSIsImhlYWRlciIsInNob3dEZXRhaWxlZEJyZWFrZG93biIsImNoZWNrYm94TGFiZWwiLCJ0b2dnbGVEZXRhaWxlZEJyZWFrZG93biIsImluY2x1ZGVMb3N0TG9vdFJlc291cmNlcyIsImluY2x1ZGUiLCJ0b2dnbGVJbmNsdWRlIiwiaW5jbHVkZVNoaXBzRm91bmRPbkV4cGVkaXRpb25zIiwiaW5jbHVkZVNoaXBzTG9zdEluQ29tYmF0cyIsImNvbHVtbnMiLCJyb3dzIiwiZm9vdGVyUm93cyIsImdldENlbGxDbGFzcyIsInNjb3BlZFNsb3RzIiwiX3UiLCJfbCIsImNvbHVtbiIsImkiLCJrZXkiLCJmbiIsInJlZiIsIml0ZW0iLCJzbG90TmFtZSIsIiRzY29wZWRTbG90cyIsImNsYXNzIiwibGFiZWxDbGFzcyIsIml0ZW1zIiwiZm9ybWF0dGVyIiwiaW5kZXgiLCJkYXRhIiwiZXZlbnRzIiwiZm9vdGVySXRlbXMiLCJhdmdOdW1iZXJGb3JtYXQiLCJyZXNvdXJjZVR5cGVzIiwicmVzb3VyY2VJY29uU2l6ZSIsInNob3dTZXR0aW5ncyIsInByb3h5IiwibW9kZWwiLCJjYWxsYmFjayIsIiQkdiIsInJlcXVpcmVkQXJncyIsInJlcXVpcmVkIiwiYXJncyIsImxlbmd0aCIsIlR5cGVFcnJvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiLCJNSUxMSVNFQ09ORFNfSU5fREFZIiwiZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzIiwiZGlydHlEYXRlTGVmdCIsImRpcnR5RGF0ZVJpZ2h0IiwiYXJndW1lbnRzIiwic3RhcnRPZkRheUxlZnQiLCJzdGFydE9mRGF5Iiwic3RhcnRPZkRheVJpZ2h0IiwidGltZXN0YW1wTGVmdCIsImdldFRpbWUiLCJnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIiwidGltZXN0YW1wUmlnaHQiLCJNYXRoIiwicm91bmQiLCJjb21wYXJlTG9jYWxBc2MiLCJkYXRlTGVmdCIsImRhdGVSaWdodCIsImRpZmYiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJkaWZmZXJlbmNlSW5EYXlzIiwidG9EYXRlIiwic2lnbiIsImRpZmZlcmVuY2UiLCJhYnMiLCJzZXREYXRlIiwiaXNMYXN0RGF5Tm90RnVsbCIsIk51bWJlciIsInJlc3VsdCIsIl9pbmRleCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfaW5kZXgyIiwib2JqIiwiX19lc01vZHVsZSIsImRpcnR5RGF0ZSIsImRhdGUiLCJzZXRIb3VycyIsImFyZ3VtZW50IiwiYXJnU3RyIiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiRGF0ZSIsImNvbnNvbGUiLCJ3YXJuIiwiRXJyb3IiLCJzdGFjayIsIk5hTiJdLCJzb3VyY2VSb290IjoiIn0=