"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[7156],{9781:(e,t,o)=>{o.d(t,{L:()=>i});var s=o(776);const i={[s.Mm.small]:[25e4,3e5,35e4,4e5,45e4,5e5,55e4,6e5,65e4,7e5,75e4,8e5,85e4,9e5,95e4,1e6,105e4,11e5,115e4,12e5,125e4],[s.Mm.medium]:[125e4,13e5,135e4,14e5,145e4,15e5,155e4,16e5,165e4,17e5,175e4,18e5,185e4,19e5,195e4,2e6,205e4,21e5,215e4,22e5,225e4,23e5,235e4,24e5,245e4,25e5],[s.Mm.large]:[25e5,255e4,26e5,265e4,27e5,275e4,28e5,285e4,29e5,295e4,3e6,305e4,31e5,315e4,32e5,325e4,33e5,335e4,34e5,345e4,35e5,355e4,36e5,365e4,37e5,375e4,38e5,385e4,39e5,395e4,4e6,405e4,41e5,415e4,42e5,425e4,43e5,435e4,44e5,445e4,45e5,455e4,46e5,465e4,47e5,475e4,48e5,485e4,49e5,495e4,5e6]}},2611:(e,t,o)=>{function s(e){return e<1e5?.1:e<1e6?.24:e<5e6?.36:e<25e6?.48:e<5e7?.6:e<75e6?.72:e<1e8?.84:1}o.d(t,{Q:()=>s})},147:(e,t,o)=>{o.d(t,{g1:()=>i,g4:()=>n,_Z:()=>l});const s=.001;function i(e){const t=n(e);return t*s}function n(e){for(let t=0;;t++){const o=l(t+1);if(o>e)return t}}function l(e){return 900*e*(e+1)/2}},5546:(e,t,o)=>{function s(e,t){return 1+e+t}o.d(t,{q:()=>s})},2343:(e,t,o)=>{function s(e){return e.admiral&&e.commander&&e.engineer&&e.geologist&&e.technocrat}o.d(t,{J:()=>s})},4163:(e,t,o)=>{o.d(t,{F:()=>i});var s=o(602);function i(e,t,o,i){return e!=s.D0.collector?1:1*(1+i)+t*(1+o)}},9448:(e,t,o)=>{function s(e,t){switch(e){case 1:return t.pos1;case 2:return t.pos2;case 3:return t.pos3}return t.default}function i(e){const t=s(e.planetPosition,e.serverPositionBoost),o=15*e.serverEconomySpeed*(1+t);return Math.trunc(o)}o.d(t,{q:()=>i})},9452:(e,t,o)=>{o.d(t,{p:()=>n,E:()=>l});var s=o(1639),i=o(7331);function n(e,t){const o=Date.now(),n={[i._.metal]:[s.t.metalBooster_bronze_1day,s.t.metalBooster_bronze_7days],[i._.crystal]:[s.t.crystalBooster_bronze_1day,s.t.crystalBooster_bronze_7days],[i._.deuterium]:[s.t.deuteriumBooster_bronze_1day,s.t.deuteriumBooster_bronze_7days]}[e],r={[i._.metal]:[s.t.metalBooster_silver_7days,s.t.metalBooster_silver_30days,s.t.metalBooster_silver_90days],[i._.crystal]:[s.t.crystalBooster_silver_7days,s.t.crystalBooster_silver_30days,s.t.crystalBooster_silver_90days],[i._.deuterium]:[s.t.deuteriumBooster_silver_7days,s.t.deuteriumBooster_silver_30days,s.t.deuteriumBooster_silver_90days]}[e],a={[i._.metal]:[s.t.metalBooster_gold_7days,s.t.metalBooster_gold_30days,s.t.metalBooster_gold_90days],[i._.crystal]:[s.t.crystalBooster_gold_7days,s.t.crystalBooster_gold_30days,s.t.crystalBooster_gold_90days],[i._.deuterium]:[s.t.deuteriumBooster_gold_7days,s.t.deuteriumBooster_gold_30days,s.t.deuteriumBooster_gold_90days]}[e],c={[i._.metal]:[s.t.metalBooster_platinum_7days,s.t.metalBooster_platinum_30days,s.t.metalBooster_platinum_90days],[i._.crystal]:[s.t.crystalBooster_platinum_7days,s.t.crystalBooster_platinum_30days,s.t.crystalBooster_platinum_90days],[i._.deuterium]:[s.t.deuteriumBooster_platinum_7days,s.t.deuteriumBooster_platinum_30days,s.t.deuteriumBooster_platinum_90days]}[e];return n.some((e=>l(o,t[e])))?.1:r.some((e=>l(o,t[e])))?.2:a.some((e=>l(o,t[e])))?.3:c.some((e=>l(o,t[e])))?.4:0}function l(e,t){return null!=t&&("permanent"==t||t>e)}},7270:(e,t,o)=>{function s(e,t,o,s,i,n,l){const r=i&&s?1+n*(1+l):1,a=8,c=Math.floor((e+t+o)*a*r);return c}o.d(t,{Y:()=>s})},5148:(e,t,o)=>{function s(e){switch(e){case 8:return.35;case 7:case 9:return.23;case 6:case 10:return.17}return 0}function i(e){const t=s(e.planetPosition),o=30*e.serverEconomySpeed*(1+t);return Math.trunc(o)}o.d(t,{s:()=>i})},7053:(e,t,o)=>{o.d(t,{_:()=>y});var s=o(7545),i=o(9867),n=o(602),l=o(5546),r=o(7331);const a=.1,c=.02,d={[r._.metal]:.01,[r._.crystal]:.0066,[r._.deuterium]:.0033},u=.05;var m=o(4163),g=o(7270);function p(e){const t=(0,g.Y)(e.levelMetalMine,e.levelCrystalMine,e.levelDeuteriumSynthesizer,e.playerClass==n.D0.collector,e.hasGeologist,e.serverSettings.geologistActiveCrawlerFactorBonus,e.lifeformTechnologies.collectorClassBonus),o=Math.min(t,e.availableCrawlers),s=(0,m.F)(e.playerClass,e.serverSettings.collectorCrawlerProductionFactorBonus,e.lifeformTechnologies.collectorClassBonus,e.lifeformTechnologies.crawlerProductionBonus),i=e.serverSettings.crawlerProductionFactorPerUnit*o*s*e.crawlerProductionSetting/100;return Math.min(i,e.serverSettings.crawlerMaxProductionFactor)}var f=o(9681),h=o(4846);class y{#e;#t;plasmaTechnologyLevel;playerClass;allianceClass;geologist;commandStaff;planets;serverSettings;constructor(e,t,o,i,n,l,r,a){this.#t=e,this.plasmaTechnologyLevel=t,this.playerClass=o,this.allianceClass=i,this.geologist=n,this.commandStaff=l,this.serverSettings=r,this.planets=a,this.#e=Object.keys(a).map((e=>(0,s.Y)(e)))}getLifeformBonusFactors(){let e=0,t=0,o=0;return this.#e.forEach((s=>{const i=this.planets[s];e+=i.collectorClassBonusFactor*(0,l.q)(i.lifeformTechnologyBoost[f.Nw.rocktalCollectorEnhancement],i.lifeformExperienceBoost),h.rE.forEach((e=>{t+=i.lifeformTechnologyBonusProductionFactor[e.type]*(0,l.q)(i.lifeformTechnologyBoost[e.type],i.lifeformExperienceBoost)})),o+=i.lifeformTechnologyCrawlerProductionBonusFactor*(0,l.q)(i.lifeformTechnologyBoost[f.Nw.ionCrystalModules],i.lifeformExperienceBoost)})),{collectorClassBonusFactor:e,lifeformTechnologyProductionBonusFactor:t,lifeformTechnologyCrawlerProductionBonusFactor:o}}addPlanet(e,t){this.#e.push(e),this.planets[e]=t}getProductionBreakdown(e){return this.#o(e,this.getLifeformBonusFactors())}#o(e,t){const{collectorClassBonusFactor:o,lifeformTechnologyProductionBonusFactor:s,lifeformTechnologyCrawlerProductionBonusFactor:l}=t,r=this.planets[e].mineProduction,m=(this.playerClass==n.D0.collector?1:0)*this.serverSettings.collectorProductionFactor*(1+o),g=(this.allianceClass==i.Ck.trader?1:0)*u,f=this.geologist?a:0,h=this.commandStaff?c:0,y=this.planets[e].crawlers,v=p({hasGeologist:this.geologist,availableCrawlers:y.available,levelMetalMine:y.totalMineLevel,levelCrystalMine:0,levelDeuteriumSynthesizer:0,crawlerProductionSetting:y.percentage,lifeformTechnologies:{collectorClassBonus:o,crawlerProductionBonus:l},playerClass:this.playerClass,serverSettings:{collectorCrawlerProductionFactorBonus:this.serverSettings.collectorCrawlerProductionFactorBonus,crawlerMaxProductionFactor:this.serverSettings.crawlerMaxProductionFactor,crawlerProductionFactorPerUnit:this.serverSettings.crawlerProductionFactorPerUnit,geologistActiveCrawlerFactorBonus:this.serverSettings.geologistActiveCrawlerFactorBonus}}),C=this.planets[e].baseProduction,B=r*this.plasmaTechnologyLevel*d[this.#t],x=r*v,T=r*m,b=r*g,_=r*f,S=r*h,P=r*this.planets[e].itemBonusProductionFactor,w=r*this.planets[e].lifeformBuildingBonusProductionFactor,I=r*s,$=C+r+B+x+T+b+_+S+P+w+I;return{baseProduction:C,mineProduction:r,plasmaTechnologyProduction:B,crawlerProduction:x,playerClassProduction:T,allianceClassProduction:b,geologistProduction:_,commandStaffProduction:S,itemProduction:P,lifeformBuildingsProduction:w,lifeformTechnologiesProduction:I,total:$}}getTotal(e=!1){const t=this.getLifeformBonusFactors();return this.#e.reduce(((o,s)=>{const i=e?this.planets[s].fusionReactorConsumption:0;return o+this.#o(s,t).total-i}),0)}getAverage(e=!1){return this.getTotal(e)/this.#e.length}clone(){const e={};return this.#e.forEach((t=>{e[t]={...this.planets[t],lifeformTechnologyBonusProductionFactor:{...this.planets[t].lifeformTechnologyBonusProductionFactor},lifeformTechnologyBoost:{...this.planets[t].lifeformTechnologyBoost},crawlers:{...this.planets[t].crawlers}}})),new y(this.#t,this.plasmaTechnologyLevel,this.playerClass,this.allianceClass,this.geologist,this.commandStaff,this.serverSettings,e)}}},5593:(e,t,o)=>{o.d(t,{D:()=>p});var s=o(655),i=o(3768),n=o(4384),l=o(1936);function r(e,t){const o={...e};return Object.keys(t).forEach((e=>{const s=t[e];if(e in o){const t=o[e];if("object"===typeof t&&!(t instanceof Array))return void(o[e]=r(t,s))}o[e]=s})),o}const a={universeHistory:{alliances:{highscore:[]},players:{highscore:[]}}};async function c(e){const t=await(0,n._N)(e),o=r(a,await t.get("universeSpecificSettings",0)??{});return o}var d=o(3654),u=o(4028),m=o(8717);let g=class extends u.w3{settings=null;_ready;_resolveReady;updateSettings(e){console.debug("updating universe specific settings",e),this.settings=e,(async()=>{const t=await(0,n._N)(m.l);await t.put("universeSpecificSettings",e,0);const o={ogameMeta:m.l,senderUuid:m.g,type:l.C.NotifyUniverseSpecificSettingsUpdate};await(0,i.p)(o)})()}get ready(){return this._ready}async created(){this._ready=new Promise((e=>this._resolveReady=e)),this.initCommunication(),await this.loadData()}initCommunication(){chrome.runtime.onMessage.addListener((async e=>await this.onMessage(e)))}async loadData(){this.settings=await c(m.l),this._resolveReady()}async onMessage(e){const{type:t,ogameMeta:o}=e;if((0,d.i)(o,m.l)&&e.senderUuid!=m.g)switch(t){case l.C.NotifyUniverseSpecificSettingsUpdate:await this.loadData();break}}};g=(0,s.gn)([u.wA],g);const p=new g},3119:(e,t,o)=>{o.r(t),o.d(t,{default:()=>Qe});var s=function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("div",{staticClass:"amortization"},[o("div",{staticClass:"amortization-container"},[o("div",{staticClass:"amortization-settings",style:{overflow:e.showSettings?"auto":null}},[o("div",{staticClass:"amortization-settings-header"},[o("button",{on:{click:function(t){return e.toggleSettings()}}},[o("span",{staticClass:"mdi mdi-cogs"}),e.showSettings?o("span",{staticClass:"mdi mdi-menu-up"}):o("span",{staticClass:"mdi mdi-menu-down"}),e.showSettings?o("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.applyAndClose)}}):o("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.header)}})]),o("div",{staticClass:"generating-count"},[null!=e.generatingItemCount?o("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.info.generatingItems+": "+e.generatingItemCount.count+"/"+e.generatingItemCount.total)}}):e._e(),null==e.saveStateDate?[e.items.length>0?o("button",{staticClass:"mr-1",attrs:{disabled:null!=e.generatingItemCount||0==e.items.length||e.showSettings},domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.saveLoad.saveButton)},on:{click:function(t){return e.saveItems()}}}):e._e(),null!=e.savedAmortization?o("button",{attrs:{disabled:null!=e.generatingItemCount},domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.saveLoad.loadButton(e.$i18n.$d(e.savedAmortization.date,"datetime")))},on:{click:function(t){return e.loadItems()}}}):e._e()]:o("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.saveLoad.loadedSave(e.$i18n.$d(e.savedAmortization.date,"datetime"),e.$i18n.$n(e.saveStateHiddenItems)))}})],2),o("floating-menu",{attrs:{left:""},scopedSlots:e._u([{key:"activator",fn:function(){return[o("button",{on:{click:function(t){e.showInfoMenu=!e.showInfoMenu}}},[o("span",{staticClass:"mdi mdi-help"})])]},proxy:!0}]),model:{value:e.showInfoMenu,callback:function(t){e.showInfoMenu=t},expression:"showInfoMenu"}},[o("div",{staticClass:"infos"},[o("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.info.slowCalculation)}}),o("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.info.ctrlClick)}})])]),o("floating-menu",{attrs:{left:""},scopedSlots:e._u([{key:"activator",fn:function(){return[o("button",{on:{click:function(t){e.showSettingsMenu=!e.showSettingsMenu}}},[o("span",{staticClass:"mdi mdi-cog"})])]},proxy:!0}]),model:{value:e.showSettingsMenu,callback:function(t){e.showSettingsMenu=t},expression:"showSettingsMenu"}},[o("show-converted-resources-in-cells-settings",[o("div",{staticClass:"msu-settings-amortization-info"},[o("span",{staticClass:"mdi mdi-alert"}),o("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.showConvertedUnitsInTables.infoAmortization)}})])])],1)],1),o("div",{directives:[{name:"show",rawName:"v-show",value:e.showSettings,expression:"showSettings"}],staticClass:"amortization-settings-container"},[o("div",{staticClass:"flex-settings"},[o("div",[o("h3",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.playerSettings.header)}}),o("amortization-player-settings-inputs",{model:{value:e.playerSettings,callback:function(t){e.playerSettings=t},expression:"playerSettings"}})],1),o("div",[o("h3",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.includeSettings.header)}}),o("div",{staticClass:"include-settings"},[o("checkbox",{attrs:{label:e.$i18n.$t.extension.empire.amortization.settings.includeSettings.mines},model:{value:e.includeSettings.mines,callback:function(t){e.$set(e.includeSettings,"mines",t)},expression:"includeSettings.mines"}}),o("checkbox",{scopedSlots:e._u([{key:"label",fn:function(){return[o("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.includeSettings.expeditions)}}),o("br"),o("i",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.includeSettings.expeditionsRequirement)}})]},proxy:!0}]),model:{value:e.includeSettings.expeditions,callback:function(t){e.$set(e.includeSettings,"expeditions",t)},expression:"includeSettings.expeditions"}}),o("checkbox",{attrs:{label:e.$i18n.$t.extension.empire.amortization.settings.includeSettings.lifeformProductionBonusBuildings},model:{value:e.includeSettings.lifeformProductionBonusBuildings,callback:function(t){e.$set(e.includeSettings,"lifeformProductionBonusBuildings",t)},expression:"includeSettings.lifeformProductionBonusBuildings"}}),o("checkbox",{attrs:{label:e.$i18n.$t.extension.empire.amortization.settings.includeSettings.lifeformTechnologyBoostBuildings},model:{value:e.includeSettings.lifeformTechnologyBoostBuildings,callback:function(t){e.$set(e.includeSettings,"lifeformTechnologyBoostBuildings",t)},expression:"includeSettings.lifeformTechnologyBoostBuildings"}}),o("checkbox",{attrs:{label:e.$i18n.$t.extension.empire.amortization.settings.includeSettings.lifeformProductionBonusTechnologies},model:{value:e.includeSettings.lifeformProductionBonusTechnologies,callback:function(t){e.$set(e.includeSettings,"lifeformProductionBonusTechnologies",t)},expression:"includeSettings.lifeformProductionBonusTechnologies"}}),o("checkbox",{attrs:{label:e.$i18n.$t.extension.empire.amortization.settings.includeSettings.lifeformExpeditionBonusTechnologies},model:{value:e.includeSettings.lifeformExpeditionBonusTechnologies,callback:function(t){e.$set(e.includeSettings,"lifeformExpeditionBonusTechnologies",t)},expression:"includeSettings.lifeformExpeditionBonusTechnologies"}}),o("checkbox",{attrs:{label:e.$i18n.$t.ogame.research[e.ResearchType.plasmaTechnology]},model:{value:e.includeSettings.plasmaTechnology,callback:function(t){e.$set(e.includeSettings,"plasmaTechnology",t)},expression:"includeSettings.plasmaTechnology"}}),o("checkbox",{scopedSlots:e._u([{key:"label",fn:function(){return[o("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.includeSettings.astrophysicsAndColony)}}),o("br"),o("i",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.includeSettings.astrophysicsPerformanceNote)}})]},proxy:!0}]),model:{value:e.includeSettings.astrophysics,callback:function(t){e.$set(e.includeSettings,"astrophysics",t)},expression:"includeSettings.astrophysics"}})],1)]),o("div",[o("h3",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.astrophysicsSettings.header(e.$i18n.$t.ogame.research[e.ResearchType.astrophysics]))}}),o("div",{staticClass:"astrophysics-settings"},[o("amortization-planet-settings-inputs",{model:{value:e.astrophysicsSettings,callback:function(t){e.astrophysicsSettings=t},expression:"astrophysicsSettings"}})],1)]),o("div",[o("h3",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.expeditionSettings.header)}}),o("div",{staticClass:"expeditionsettings"},[o("amortization-expedition-settings-inputs",{attrs:{playerSettings:e.playerSettings,breakdown:e.expoBreakdown},model:{value:e.expeditionSettings,callback:function(t){e.expeditionSettings=t},expression:"expeditionSettings"}})],1)]),o("hr",{staticStyle:{width:"100%"}}),o("div",[o("h3",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.planetSettings.header)}}),o("div",{staticClass:"global-planet-settings"},[o("button",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.planetSettings.global.deselectItems)},on:{click:function(t){return e.deselectAllItems()}}}),o("button",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.planetSettings.global.ignoreInactiveLifeformTechnologySlots)},on:{click:function(t){return e.ignoreAllInactiveSlots()}}}),o("button",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.planetSettings.global.deselectAllPlanets)},on:{click:function(t){return e.deselectAllPlanets()}}})]),o("div",{staticStyle:{display:"flex",gap:"8px","flex-wrap":"wrap"}},e._l(e.planetSettingsSorted,(function(t){return o("amortization-planet-settings-inputs",{key:t.id,attrs:{toggleable:"",planetData:e.empire.planets[t.id]},model:{value:e.planetSettings[t.id],callback:function(o){e.$set(e.planetSettings,t.id,o)},expression:"planetSettings[planetSetting.id]"}})})),1)])])])]),e.showSettings?e._e():o("div",{staticClass:"amortization-table"},[[o("grid-table",{directives:[{name:"show",rawName:"v-show",value:!e.isGroupedItemsView,expression:"!isGroupedItemsView"}],attrs:{items:e.items,columns:e.columns,footerItems:e.footerItems,sticky:"100%","sticky-footer":"",cellClassProvider:e.cellClassProvider,"row-borders":""},scopedSlots:e._u([{key:"header-checkbox",fn:function(){return[o("checkbox",{attrs:{value:e.selectedCount==e.items.length,"check-color":"rgb(var(--color))",color:"white"},on:{input:function(t){return e.toggleItemSelection()}}})]},proxy:!0},{key:"header-cost",fn:function(){return[o("div",{staticClass:"cost-grid"},[o("span",{staticStyle:{"grid-column":"2"},domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.table.cost)}}),o("o-resource",{staticStyle:{"grid-column":"1"},attrs:{resource:"metal"}}),o("o-resource",{attrs:{resource:"crystal"}}),o("o-resource",{attrs:{resource:"deuterium"}})],1)]},proxy:!0},{key:"cell-checkbox",fn:function(t){var s=t.index,i=t.item;return[o("checkbox",{attrs:{value:i.selected},on:{"input-extended":function(t){return e.toggleItemSelection(i,s,t.ctrl)}}})]}},{key:"cell-what",fn:function(t){var s=t.item,i=t.index;return["mine"==s.type||"lifeform-building"==s.type||"lifeform-technology"==s.type?o("div",{staticClass:"what-cell",class:"what-cell--"+s.type},[s.planetId>0?o("span",{staticClass:"planet"},[o("span",{domProps:{textContent:e._s(e.getPlanetName(s.planetId))}}),o("span",{domProps:{textContent:e._s(e.formatPlanetCoordinates(s.planetId))}})]):o("span",{staticClass:"planet"},[o("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.astrophysicsSettings.newColony+" "+-s.planetId)}}),o("span",{domProps:{textContent:e._s("[-:-:"+e.astrophysicsSettings.position+"]")}})]),o("div",{staticClass:"levels"},[e._l(s.additionalLifeformBuildings,(function(t,s){return[o("o-lifeform-building",{key:"icon-"+s,attrs:{building:t.building,size:"36px"}}),o("span",{key:"name-level-"+s,staticClass:"name-and-level"},[o("span",{domProps:{textContent:e._s(e.$i18n.$t.ogame.lifeformBuildings[t.building])}}),t.levels.from!=t.levels.to?o("span",{domProps:{textContent:e._s(t.levels.from+" - "+t.levels.to)}}):o("span",{domProps:{textContent:e._s(t.levels.from)}})])]})),"mine"==s.type?[o("o-building",{attrs:{building:s.mine,size:"36px"}}),o("span",{staticClass:"name-and-level"},[o("span",{domProps:{textContent:e._s(e.$i18n.$t.ogame.buildings[s.mine])}}),o("span",{domProps:{textContent:e._s(s.level)}})])]:"lifeform-building"==s.type?[o("o-lifeform-building",{attrs:{building:s.building,size:"36px"}}),o("span",{staticClass:"name-and-level"},[o("span",{domProps:{textContent:e._s(e.$i18n.$t.ogame.lifeformBuildings[s.building])}}),o("span",{domProps:{textContent:e._s(s.level)}})])]:"lifeform-technology"==s.type?[o("o-lifeform-technology",{attrs:{technology:s.technology,size:"36px"}}),o("span",{staticClass:"name-and-level"},[o("span",{domProps:{textContent:e._s(e.$i18n.$t.ogame.lifeformTechnologies[s.technology])}}),o("span",{domProps:{textContent:e._s(s.level)}})])]:o("span",{domProps:{textContent:e._s("??? contact developer")}})],2)]):"plasma-technology"==s.type?o("div",{staticClass:"what-cell what-cell--plasma-technology"},[e._l(e.getAdditionalLifeformStuffGroups(s.additionalLifeformStuff),(function(t,s){return o("div",{key:s,staticStyle:{display:"contents"}},[t.planetIds.size>1?[o("span",{staticClass:"mdi expand-amortization-group",class:e.showAmotizationGroup["item-"+i+"_group-"+s]?"mdi-menu-up":"mdi-menu-down",on:{click:function(t){return e.toggleAmortizationGroup("item-"+i+"_group-"+s)}}}),null!=t.building?o("o-lifeform-building",{attrs:{building:t.building,size:"36px"}}):o("o-lifeform-technology",{attrs:{technology:t.technology,size:"36px"}}),o("span",{staticClass:"name-and-level"},[o("i","building"in t?{domProps:{textContent:e._s(e.$i18n.$t.ogame.lifeformBuildings[t.building])}}:{domProps:{textContent:e._s(e.$i18n.$t.ogame.lifeformTechnologies[t.technology])}}),o("i",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.table.levelsOnPlanets(t.totalLevels,t.planetIds.size))}})])]:e._e(),o("div",{style:{display:1==t.planetIds.size||e.showAmotizationGroup["item-"+i+"_group-"+s]?"contents":"none"}},e._l(t.items,(function(s,i){return o("div",{key:i,staticStyle:{display:"contents"}},[s.planetId>0?o("span",{staticClass:"planet"},[o("span",{domProps:{textContent:e._s(e.empire.planets[s.planetId].name)}}),o("span",{domProps:{textContent:e._s(e.formatCoordinates(e.empire.planets[s.planetId].coordinates))}})]):o("span",{staticClass:"planet"},[o("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.astrophysicsSettings.newColony+" "+-s.planetId)}}),o("span",{domProps:{textContent:e._s("[-:-:"+e.astrophysicsSettings.position+"]")}})]),"building"in s?o("o-lifeform-building",{attrs:{building:s.building,size:"36px"}}):o("o-lifeform-technology",{attrs:{technology:s.technology,size:"36px"}}),o("span",{staticClass:"name-and-level"},[o("span","building"in t?{domProps:{textContent:e._s(e.$i18n.$t.ogame.lifeformBuildings[t.building])}}:{domProps:{textContent:e._s(e.$i18n.$t.ogame.lifeformTechnologies[t.technology])}}),s.levels.from!=s.levels.to?o("span",{domProps:{textContent:e._s(s.levels.from+" - "+s.levels.to)}}):o("span",{domProps:{textContent:e._s(s.levels.from)}})])],1)})),0)],2)})),o("span"),o("o-research",{attrs:{research:e.ResearchType.plasmaTechnology,size:"36px"}}),o("span",{staticClass:"name-and-level"},[o("span",{domProps:{textContent:e._s(e.$i18n.$t.ogame.research[e.ResearchType.plasmaTechnology])}}),o("span",{domProps:{textContent:e._s(s.level)}})])],2):"astrophysics-and-colony"==s.type?o("div",{staticClass:"what-cell what-cell--colony"},[o("span",{staticStyle:{display:"contents"}},[o("o-research",{staticStyle:{"grid-column":"2"},attrs:{research:e.ResearchType.astrophysics,disabled:0==s.levels.length,size:"36px"}}),o("span",{staticClass:"name-and-level"},[o("span",{domProps:{textContent:e._s(e.$i18n.$t.ogame.research[e.ResearchType.astrophysics])}}),0==s.levels.length?o("span",{domProps:{textContent:e._s("-")}}):1==s.levels.length?o("span",{domProps:{textContent:e._s(s.levels[0])}}):o("span",{domProps:{textContent:e._s(s.levels[0]+" + "+s.levels[1])}})])],1),o("span",{staticClass:"planet",staticStyle:{"align-self":"start","grid-row":"2"}},[o("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.astrophysicsSettings.newColony+" "+-s.newPlanetId)}}),o("span",{domProps:{textContent:e._s("[-:-:"+e.astrophysicsSettings.position+"]")}})]),o("span",{staticClass:"colony-mines",staticStyle:{display:"contents"}},[e._l(e.mineBuildingTypes,(function(t){return[s.builtLevels.mines[t]>0?[o("o-building",{key:t+"-icon",staticStyle:{"grid-column":"2"},attrs:{building:t,size:"36px"}}),o("span",{key:t+"-name-level",staticClass:"name-and-level"},[o("span",{domProps:{textContent:e._s(e.$i18n.$t.ogame.buildings[t])}}),o("span",{domProps:{textContent:e._s("0 - "+s.builtLevels.mines[t])}})])]:e._e()]}))],2),o("span",{staticClass:"colony-lifeform-buildings",staticStyle:{display:"contents"}},[e._l(e.applicableLifeformBuildingTypes,(function(t){return[s.builtLevels.lifeformBuildings[t]>0?[o("o-lifeform-building",{key:t+"-icon",staticStyle:{"grid-column":"2"},attrs:{building:t,size:"36px"}}),o("span",{key:t+"-name-level",staticClass:"name-and-level"},[o("span",{domProps:{textContent:e._s(e.$i18n.$t.ogame.lifeformBuildings[t])}}),o("span",{domProps:{textContent:e._s("0 - "+s.builtLevels.lifeformBuildings[t])}})])]:e._e()]}))],2),o("span",{staticClass:"colony-lifeform-technologies",staticStyle:{display:"contents"}},[e._l(e.applicableLifeformTechnologyTypes,(function(t){return[s.builtLevels.lifeformTechnologies[t]>0?[o("o-lifeform-technology",{key:t+"-icon",staticStyle:{"grid-column":"2"},attrs:{technology:t,size:"36px"}}),o("span",{key:t+"-name-level",staticClass:"name-and-level"},[o("span",{domProps:{textContent:e._s(e.$i18n.$t.ogame.lifeformTechnologies[t])}}),o("span",{domProps:{textContent:e._s("0 - "+s.builtLevels.lifeformTechnologies[t])}})])]:e._e()]}))],2)]):o("div",{domProps:{textContent:e._s("??? contact developer")}})]}},{key:"cell-cost",fn:function(t){var s=t.value;return[o("div",{staticClass:"cost-grid"},[o("span",{class:{zero:0==s.metal},domProps:{textContent:e._s(e.$i18n.$n(s.metal))}}),o("span",{class:{zero:0==s.crystal},domProps:{textContent:e._s(e.$i18n.$n(s.crystal))}}),o("span",{class:{zero:0==s.deuterium},domProps:{textContent:e._s(e.$i18n.$n(s.deuterium))}})])]}},{key:"cell-costConverted",fn:function(e){var t=e.value;return[o("decimal-number",{attrs:{value:t}})]}},{key:"cell-productionDelta",fn:function(t){var s=t.value;return[o("div",{staticClass:"production-delta-grid"},[s.metal>0?[o("o-resource",{attrs:{resource:"metal",size:"18px"}}),o("decimal-number",{attrs:{value:s.metal}})]:e._e(),s.crystal>0?[o("o-resource",{attrs:{resource:"crystal",size:"18px"}}),o("decimal-number",{attrs:{value:s.crystal}})]:e._e(),s.deuterium>0?[o("o-resource",{attrs:{resource:"deuterium",size:"18px"}}),o("decimal-number",{attrs:{value:s.deuterium}})]:e._e()],2)]}},{key:"cell-productionDeltaConverted",fn:function(e){var t=e.value;return[o("decimal-number",{attrs:{value:t}})]}},{key:"cell-timeInHours",fn:function(t){var s=t.value;return[o("span",{domProps:{textContent:e._s(e.$i18n.$timespan(60*s*60))}})]}},{key:"footer-cost",fn:function(t){var s=t.value;return[o("div",{staticClass:"cost-grid"},[o("span",{class:{zero:0==s.metal},domProps:{textContent:e._s(e.$i18n.$n(s.metal))}}),o("span",{class:{zero:0==s.crystal},domProps:{textContent:e._s(e.$i18n.$n(s.crystal))}}),o("span",{class:{zero:0==s.deuterium},domProps:{textContent:e._s(e.$i18n.$n(s.deuterium))}})])]}},{key:"footer-costConverted",fn:function(e){var t=e.value;return[o("decimal-number",{attrs:{value:t}})]}},{key:"footer-productionDelta",fn:function(t){var s=t.value;return[o("div",{staticClass:"production-delta-grid"},[s.metal>0?[o("o-resource",{attrs:{resource:"metal",size:"18px"}}),o("decimal-number",{attrs:{value:s.metal}})]:e._e(),s.crystal>0?[o("o-resource",{attrs:{resource:"crystal",size:"18px"}}),o("decimal-number",{attrs:{value:s.crystal}})]:e._e(),s.deuterium>0?[o("o-resource",{attrs:{resource:"deuterium",size:"18px"}}),o("decimal-number",{attrs:{value:s.deuterium}})]:e._e()],2)]}},{key:"footer-productionDeltaConverted",fn:function(e){var t=e.value;return[o("decimal-number",{attrs:{value:t}})]}},{key:"footer-timeInHours",fn:function(){},proxy:!0}],null,!1,2963654875)}),null!=e.generator?o("div",{directives:[{name:"show",rawName:"v-show",value:!e.isGroupedItemsView,expression:"!isGroupedItemsView"}],staticStyle:{display:"flex",gap:"8px"}},e._l([25,50,100,500],(function(t){return o("button",{key:t,attrs:{disabled:null!=e.generatingItemCount},on:{click:function(o){return e.insertNextAmortizationItems(t)}}},[o("span",{staticClass:"mdi mdi-plus"}),o("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.generateItems(e.$i18n.$n(t)))}})])})),0):e._e()],e.isGroupedItemsView?o("amortization-grouped-item-table",{attrs:{groupedItems:e.groupedItemsSorted,newColonyPosition:e.astrophysicsSettings.position}}):e._e()],2)])])},i=[],n=o(655),l=o(6864),r=o(9867),a=o(602),c=o(5128),d=o(3738),u=o(2057),m=o(4028),g=o(1854),p=o(6705),f=function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("grid-table",{attrs:{items:e.groupedItems,footerItems:e.footerItems,columns:e.columns,sticky:"100%","sticky-footer":"","row-borders":""},scopedSlots:e._u([{key:"header-cost",fn:function(){return[o("div",{staticClass:"cost-grid"},[o("span",{staticStyle:{"grid-column":"2"},domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.table.cost)}}),o("o-resource",{staticStyle:{"grid-column":"1"},attrs:{resource:"metal"}}),o("o-resource",{attrs:{resource:"crystal"}}),o("o-resource",{attrs:{resource:"deuterium"}})],1)]},proxy:!0},{key:"cell-planet",fn:function(t){var s=t.item;return[null!=s.planetId?[s.planetId>0?o("span",{staticClass:"planet"},[o("span",{domProps:{textContent:e._s(e.getPlanetName(s.planetId))}}),o("span",{domProps:{textContent:e._s(e.formatPlanetCoordinates(s.planetId))}})]):o("span",{staticClass:"planet"},[o("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.astrophysicsSettings.newColony+" "+-s.planetId)}}),o("span",{domProps:{textContent:e._s("[-:-:"+e.newColonyPosition+"]")}})])]:e._e()]}},{key:"cell-item",fn:function(t){var s=t.item;return["plasma-technology"==s.type?o("div",{staticClass:"build-grid"},[e._v("TODO:")]):o("div",{staticClass:"build-grid"},[s.astrophysicsLevels.length>0?[o("o-research",{attrs:{research:e.ResearchType.astrophysics,size:"36px"}}),o("span",{staticClass:"name-and-level"},[o("span",{domProps:{textContent:e._s(e.$i18n.$t.ogame.research[e.ResearchType.astrophysics])}}),1==s.astrophysicsLevels.length?o("span",{domProps:{textContent:e._s(s.astrophysicsLevels[0])}}):o("span",{domProps:{textContent:e._s(s.astrophysicsLevels[0]+" - "+s.astrophysicsLevels[s.astrophysicsLevels.length-1])}})])]:e._e(),e._l(e.LifeformBuildingTypes,(function(t){return[s.lifeformBuildings[t].length>0?[o("o-lifeform-building",{key:"image-"+t,attrs:{building:t,size:"36px"}}),o("span",{key:"level-"+t,staticClass:"name-and-level"},[o("span",{domProps:{textContent:e._s(e.$i18n.$t.ogame.lifeformBuildings[t])}}),1==s.lifeformBuildings[t].length?o("span",{domProps:{textContent:e._s(s.lifeformBuildings[t][0])}}):o("span",{domProps:{textContent:e._s(s.lifeformBuildings[t][0]+" - "+s.lifeformBuildings[t][s.lifeformBuildings[t].length-1])}})])]:e._e()]})),e._l(e.mineBuildingTypes,(function(t){return[s.mines[t].length>0?[o("o-building",{key:"image-"+t,attrs:{building:t,size:"36px"}}),o("span",{key:"level-"+t,staticClass:"name-and-level"},[o("span",{domProps:{textContent:e._s(e.$i18n.$t.ogame.buildings[t])}}),1==s.mines[t].length?o("span",{domProps:{textContent:e._s(s.mines[t][0])}}):o("span",{domProps:{textContent:e._s(s.mines[t][0]+" - "+s.mines[t][s.mines[t].length-1])}})])]:e._e()]})),e._l(e.LifeformTechnologyTypes,(function(t){return[s.lifeformTechnologies[t].length>0?[o("o-lifeform-technology",{key:"image-"+t,attrs:{technology:t,size:"36px"}}),o("span",{key:"level-"+t,staticClass:"name-and-level"},[o("span",{domProps:{textContent:e._s(e.$i18n.$t.ogame.lifeformTechnologies[t])}}),1==s.lifeformTechnologies[t].length?o("span",{domProps:{textContent:e._s(s.lifeformTechnologies[t][0])}}):o("span",{domProps:{textContent:e._s(s.lifeformTechnologies[t][0]+" - "+s.lifeformTechnologies[t][s.lifeformTechnologies[t].length-1])}})])]:e._e()]}))],2)]}},{key:"cell-cost",fn:function(t){var s=t.value;return[o("div",{staticClass:"cost-grid"},[o("span",{class:{zero:0==s.metal},domProps:{textContent:e._s(e.$i18n.$n(s.metal))}}),o("span",{class:{zero:0==s.crystal},domProps:{textContent:e._s(e.$i18n.$n(s.crystal))}}),o("span",{class:{zero:0==s.deuterium},domProps:{textContent:e._s(e.$i18n.$n(s.deuterium))}})])]}},{key:"cell-costConverted",fn:function(e){var t=e.value;return[o("decimal-number",{attrs:{value:t}})]}},{key:"footer-cost",fn:function(t){var s=t.value;return[o("div",{staticClass:"cost-grid"},[o("span",{class:{zero:0==s.metal},domProps:{textContent:e._s(e.$i18n.$n(s.metal))}}),o("span",{class:{zero:0==s.crystal},domProps:{textContent:e._s(e.$i18n.$n(s.crystal))}}),o("span",{class:{zero:0==s.deuterium},domProps:{textContent:e._s(e.$i18n.$n(s.deuterium))}})])]}},{key:"footer-costConverted",fn:function(e){var t=e.value;return[o("decimal-number",{attrs:{value:t}})]}}])})},h=[],y=o(8395),v=o(2816),C=o(9681),B=o(917);let x=class extends m.w3{groupedItems;newColonyPosition;ResearchType=d.s;mineBuildingTypes=[l.A.metalMine,l.A.crystalMine,l.A.deuteriumSynthesizer];LifeformBuildingTypes=v.YS;LifeformTechnologyTypes=C.Vs;get columns(){return[{key:"planet",label:this.$i18n.$t.extension.empire.planet,size:"auto"},{key:"item",label:this.$i18n.$t.extension.empire.amortization.table.levels,size:"1fr"},{key:"cost",label:this.$i18n.$t.extension.empire.amortization.table.cost,size:"3fr"},{key:"costConverted",label:`${this.$i18n.$t.extension.empire.amortization.table.cost} (${"msu"==B.V.settings.conversionRates.mode?this.$i18n.$t.extension.common.msu:this.$i18n.$t.extension.common.dsu})`,size:"1fr"}]}get footerItems(){return[{item:null,cost:{metal:0,crystal:0,deuterium:0,energy:0},costConverted:0}]}getPlanetName(e){return y.p.empire.planets[e]?.name??`${this.$i18n.$t.extension.empire.amortization.saveLoad.abandonedPlanet} (${e})`}formatPlanetCoordinates(e){const t=y.p.empire.planets[e]?.coordinates;return null==t?"":this.formatCoordinates(t)}formatCoordinates(e){return`[${e.galaxy}:${e.system}:${e.position}]`}};(0,n.gn)([(0,m.fI)({required:!0,type:Array})],x.prototype,"groupedItems",void 0),(0,n.gn)([(0,m.fI)({required:!0,type:Number})],x.prototype,"newColonyPosition",void 0),x=(0,n.gn)([(0,m.wA)({})],x);const T=x,b=T;var _=o(1001),S=(0,_.Z)(b,f,h,!1,null,"6551bf12",null);const P=S.exports;var w=function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("div",{staticClass:"expedition-settings"},[o("div",{staticClass:"header"},[o("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.expeditionSettings.header)}})]),o("div",{staticClass:"body"},[o("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.expeditionSettings.averageWavesPerDay)}}),o("span",[o("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.settings.wavesPerDay,expression:"settings.wavesPerDay",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"0",max:"20",step:"0.1"},domProps:{value:e.settings.wavesPerDay},on:{change:function(t){e.$set(e.settings,"wavesPerDay",e._n(t.target.value))},blur:function(t){return e.$forceUpdate()}}})]),o("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.expeditionSettings.items)}}),o("span",{staticClass:"item-grid"},e._l(e.slotItems,(function(t){return o("o-item",{key:t,attrs:{item:t,disabled:!e.settings.items.includes(t)},on:{click:function(o){return e.toggleItem(t)}}})})),1),o("i",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.expeditionSettings.averageExpeditionsPerDay)}}),o("i",{domProps:{textContent:e._s(e.$i18n.$n(e.expeditionsPerDay))}}),o("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.expeditionSettings.shipUnitFactors)}}),o("div",{staticClass:"resource-factors"},[o("o-resource",{attrs:{resource:"metal"}}),o("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.settings.fleetUnitsFactors.metal,expression:"settings.fleetUnitsFactors.metal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"0",max:"1",step:"0.01"},domProps:{value:e.settings.fleetUnitsFactors.metal},on:{change:function(t){e.$set(e.settings.fleetUnitsFactors,"metal",e._n(t.target.value))},blur:function(t){return e.$forceUpdate()}}}),o("o-resource",{attrs:{resource:"crystal"}}),o("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.settings.fleetUnitsFactors.crystal,expression:"settings.fleetUnitsFactors.crystal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"0",max:"1",step:"0.01"},domProps:{value:e.settings.fleetUnitsFactors.crystal},on:{change:function(t){e.$set(e.settings.fleetUnitsFactors,"crystal",e._n(t.target.value))},blur:function(t){return e.$forceUpdate()}}}),o("o-resource",{attrs:{resource:"deuterium"}}),o("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.settings.fleetUnitsFactors.deuterium,expression:"settings.fleetUnitsFactors.deuterium",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"0",max:"1",step:"0.01"},domProps:{value:e.settings.fleetUnitsFactors.deuterium},on:{change:function(t){e.$set(e.settings.fleetUnitsFactors,"deuterium",e._n(t.target.value))},blur:function(t){return e.$forceUpdate()}}})],1),o("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.expeditionSettings.topPlayerScore)}}),o("span",[o("select",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.settings.serverSettings.topScore,expression:"settings.serverSettings.topScore",modifiers:{number:!0,lazy:!0}}],on:{change:function(t){var o=Array.prototype.filter.call(t.target.options,(function(e){return e.selected})).map((function(t){var o="_value"in t?t._value:t.value;return e._n(o)}));e.$set(e.settings.serverSettings,"topScore",t.target.multiple?o:o[0])}}},e._l(e.topScores,(function(t,s){return o("option",{key:s,domProps:{value:s,textContent:e._s(t)}})})),0)])])])},I=[],$=o(1639),R=o(6538),z=o(9452);function L(e){const t=Date.now();let o=0;const s=[$.t.expeditionslots_bronze_7days,$.t.expeditionslots_bronze_7days_pts,$.t.expeditionslots_bronze_30days,$.t.expeditionslots_bronze_30days_pts,$.t.expeditionslots_bronze_90days,$.t.expeditionslots_bronze_90days_pts];s.some((o=>(0,z.E)(t,e[o])))&&(o+=1);const i=[$.t.expeditionslots_silver_7days,$.t.expeditionslots_silver_7days_pts,$.t.expeditionslots_silver_30days,$.t.expeditionslots_silver_30days_pts,$.t.expeditionslots_silver_90days,$.t.expeditionslots_silver_90days_pts];i.some((o=>(0,z.E)(t,e[o])))&&(o+=2);const n=[$.t.expeditionslots_gold_7days,$.t.expeditionslots_gold_7days_pts,$.t.expeditionslots_gold_30days,$.t.expeditionslots_gold_30days_pts,$.t.expeditionslots_gold_90days,$.t.expeditionslots_gold_90days_pts];return n.some((o=>(0,z.E)(t,e[o])))&&(o+=3),o}var A=o(9751),k=o(7545);let E=class extends m.w3{settings;playerSettings;breakdown;get topScores(){return{0:`< ${this.$i18n.$n(1e5)}`,1e5:`< ${this.$i18n.$n(1e6)}`,1e6:`< ${this.$i18n.$n(5e6)}`,5e6:`< ${this.$i18n.$n(25e6)}`,25e6:`< ${this.$i18n.$n(5e7)}`,5e7:`< ${this.$i18n.$n(75e6)}`,75e6:`< ${this.$i18n.$n(1e8)}`,1e8:`≥ ${this.$i18n.$n(1e8)}`}}slotItems=[$.t.expeditionslots_bronze_7days,$.t.expeditionslots_silver_7days,$.t.expeditionslots_gold_7days];slotItemsMap={[$.t.expeditionslots_bronze_7days]:$.t.expeditionslots_bronze_7days,[$.t.expeditionslots_bronze_7days_pts]:$.t.expeditionslots_bronze_7days,[$.t.expeditionslots_silver_7days]:$.t.expeditionslots_silver_7days,[$.t.expeditionslots_silver_7days_pts]:$.t.expeditionslots_silver_7days,[$.t.expeditionslots_gold_7days]:$.t.expeditionslots_gold_7days,[$.t.expeditionslots_gold_7days_pts]:$.t.expeditionslots_gold_7days,[$.t.expeditionslots_bronze_30days]:$.t.expeditionslots_bronze_7days,[$.t.expeditionslots_bronze_30days_pts]:$.t.expeditionslots_bronze_7days,[$.t.expeditionslots_silver_30days]:$.t.expeditionslots_silver_7days,[$.t.expeditionslots_silver_30days_pts]:$.t.expeditionslots_silver_7days,[$.t.expeditionslots_gold_30days]:$.t.expeditionslots_gold_7days,[$.t.expeditionslots_gold_30days_pts]:$.t.expeditionslots_gold_7days,[$.t.expeditionslots_bronze_90days]:$.t.expeditionslots_bronze_7days,[$.t.expeditionslots_bronze_90days_pts]:$.t.expeditionslots_bronze_7days,[$.t.expeditionslots_silver_90days]:$.t.expeditionslots_silver_7days,[$.t.expeditionslots_silver_90days_pts]:$.t.expeditionslots_silver_7days,[$.t.expeditionslots_gold_90days]:$.t.expeditionslots_gold_7days,[$.t.expeditionslots_gold_90days_pts]:$.t.expeditionslots_gold_7days};onSettingsChanged(){const e=Object.keys(this.slotItemsMap).filter((e=>!this.slotItems.includes(e)));e.forEach((e=>{const t=this.settings.items.indexOf(e);t<0||this.settings.items.splice(t,1,this.slotItemsMap[e]??(0,R.A)(`missing item configuration for '${e}'`))})),this.breakdown.options.playerClass=this.playerSettings.playerClass,this.breakdown.options.admiral=this.playerSettings.officers.admiral,this.breakdown.options.astrophysicsLevel=this.playerSettings.levelAstrophysics,this.breakdown.options.itemBonusSlots=L((0,A.a)(this.settings.items,(e=>"permanent"))),this.breakdown.options.fleetFindsResourceFactors=this.settings.fleetUnitsFactors,this.breakdown.options.serverSettings=this.settings.serverSettings,null==this.topScores[this.settings.serverSettings.topScore]&&(this.settings.serverSettings.topScore=Object.keys(this.topScores).map((e=>(0,k.Y)(e))).sort(((e,t)=>t-e)).find((e=>e<=this.settings.serverSettings.topScore))??(0,R.A)("failed to find matching top score"))}get expeditionsPerDay(){return this.breakdown.slots*this.settings.wavesPerDay}toggleItem(e){const t=this.settings.items.indexOf(e);t<0?this.settings.items.push(e):this.settings.items.splice(t,1)}};(0,n.gn)([(0,m.Ey)({required:!0,type:Object})],E.prototype,"settings",void 0),(0,n.gn)([(0,m.fI)({required:!0,type:Object})],E.prototype,"playerSettings",void 0),(0,n.gn)([(0,m.fI)({required:!0,type:Object})],E.prototype,"breakdown",void 0),(0,n.gn)([(0,m.RL)("settings",{immediate:!0,deep:!0}),(0,m.RL)("playerSettings",{immediate:!0,deep:!0})],E.prototype,"onSettingsChanged",null),E=(0,n.gn)([(0,m.wA)({})],E);const F=E,D=F;var M=(0,_.Z)(D,w,I,!1,null,"63a544c8",null);const V=M.exports;var U=o(7076),O=o(3787),j=o(3418),N=o(2025),G=o(6682),H=o(3987),Z=o(6532),q=o(6119),Y=o(147),J=o(2343),Q=o(3306),W=o(8996),X=o(9448),K=o(5148),ee=o(7053),te=o(7331),oe=o(6882);function se(e,t){const o=performance.now(),s=t(),i=performance.now();return(0,oe.gW)(`Performance measurement '${e}': ${(i-o).toFixed(3)}ms`),s}var ie=o(8288),ne=o(5424),le=o(5546),re=o(776),ae=o(2611),ce=o(9781),de=o(9563),ue=o(248),me=o(892);const ge={[ne.r.resources]:.35,[ne.r.fleet]:.17},pe={[te._.metal]:.5,[te._.crystal]:2/6,[te._.deuterium]:1/6},fe={[te._.metal]:1,[te._.crystal]:.5,[te._.deuterium]:1/3},he={[ne.r.resources]:{[re.Mm.small]:.89,[re.Mm.medium]:.1,[re.Mm.large]:.01},[ne.r.fleet]:{[re.Mm.small]:.89,[re.Mm.medium]:.1,[re.Mm.large]:.01}},ye=me.F,ve=ye.cost.metal+ye.cost.crystal,Ce=de.x.map((e=>{const t=ue.lp[e],o=t.cost.metal+t.cost.crystal,s=(0,c.fB)(t.cost,ve/o);return s})),Be=(0,c.aV)(...Ce),xe=Be.metal+Be.crystal,Te={[te._.metal]:Be.metal/xe,[te._.crystal]:Be.crystal/xe,[te._.deuterium]:Be.deuterium/xe};class be{options;constructor(e){this.options=e}get#s(){const e=this.options.serverSettings.topScore;return(0,ae.Q)(e)}get slots(){const e=Math.floor(Math.sqrt(this.options.astrophysicsLevel)),t=this.options.playerClass==a.D0.discoverer?Math.trunc(this.options.serverSettings.discovererExpeditionSlotBonus*(1+this.#i)):0,o=this.options.admiral?1:0;return e+t+o+this.options.itemBonusSlots}get#i(){let e=0;return Object.values(this.options.planets).forEach((t=>{const o=(0,le.q)(t.lifeformTechnologyBoost[C.Nw.kaeleshDiscovererEnhancement],t.lifeformExperienceBoost);e+=t.discovererClassBonusFactor*o})),e}get#n(){const e={...(0,A.a)(ne.A,0),[ne.r.resources]:0,[ne.r.fleet]:0};return Object.values(this.options.planets).forEach((t=>{const o=(0,le.q)(t.lifeformTechnologyBoost[C.Nw.sixthSense],t.lifeformExperienceBoost);ne.A.forEach((s=>{e[s]+=t.lifeformTechnologyExpeditionBonusFactor[s]*o}))})),e}get averageExpeditionFinds(){const e=this.#s,t=2,o=this.options.playerClass==a.D0.discoverer?(1+this.options.serverSettings.discovererExpeditionBonus)*(1+this.#i)*this.options.serverSettings.economySpeed:1,s=this.#n,i=(0,A.a)(re.Fg,(i=>{const n=ce.L[i].map((i=>(0,c.fB)({energy:0,...(0,A.a)(te.P,(e=>i*pe[e]*fe[e]))},e*o*t*ge.resources*(1+s.resources)))).reduce(((e,t)=>(0,c.aV)(e,t)),{metal:0,crystal:0,deuterium:0,energy:0});return(0,c.fB)(n,1/ce.L[i].length)})),n=(0,c.aV)((0,c.fB)(i.small,he.resources.small),(0,c.fB)(i.medium,he.resources.medium),(0,c.fB)(i.large,he.resources.large)),l=(0,A.a)(re.Fg,(i=>{const n=ce.L[i].map((i=>(0,c.fB)((0,c.G0)({energy:0,...(0,A.a)(te.P,(e=>i*fe.crystal*Te[e]))},{energy:0,...this.options.fleetFindsResourceFactors}),e*o*t*ge.fleet*(1+s.fleet)))).reduce(((e,t)=>(0,c.aV)(e,t)),{metal:0,crystal:0,deuterium:0,energy:0});return(0,c.fB)(n,1/ce.L[i].length)})),r=(0,c.aV)((0,c.fB)(l.small,he.fleet.small),(0,c.fB)(l.medium,he.fleet.medium),(0,c.fB)(l.large,he.fleet.large));return(0,c.aV)(n,r)}clone(){const e=JSON.parse(JSON.stringify(this.options));return new be(e)}}var _e=o(4846);const Se=[l.A.metalMine,l.A.crystalMine,l.A.deuteriumSynthesizer];function Pe(e){const t={id:e.data.id,lifeformExperienceBoost:e.lifeformExperienceBoost,lifeformTechnologyBoost:e.lifeformTechnologyBoost,discovererClassBonusFactor:we(e),lifeformTechnologyExpeditionBonusFactor:Ie(e)};return t}function we(e){return e.discovererClassBonusTechnologies.reduce(((t,o)=>t+o.getClassBonus(a.D0.discoverer,e.data.lifeformTechnologies[o.type]??0)),0)}function Ie(e){return(0,A.a)(ne.A,(t=>e.lifeformExpeditionBonusTechnologies.reduce(((o,s)=>o+s.getExpeditionBonus(t,e.data.lifeformTechnologies[s.type]??0)),0)))}function $e(e){return(0,A.a)(C.Vs,(t=>e.lifeformTechnologyBoostBuildings.map((o=>o.getLifeformTechnologyBonus(t,e.data.lifeformBuildings[o.type]))).reduce(((e,t)=>e+t),0)))}function Re(e){return e.collectorClassBonusTechnologies.reduce(((t,o)=>t+o.getClassBonus(a.D0.collector,e.data.lifeformTechnologies[o.type]??0)),0)}function ze(e){return e.crawlerProductionBonusTechnologies.reduce(((t,o)=>t+o.getCrawlerProductionBonus(e.data.lifeformTechnologies[o.type])),0)}function Le(e){return e.lifeformResourceProductionBonusBuildings.reduce(((t,o)=>(0,c.aV)(t,o.getProductionBonus(e.data.lifeformBuildings[o.type]))),{metal:0,crystal:0,deuterium:0,energy:0})}function Ae(e){return _e.rE.filter((t=>e.lifeformResourceProductionBonusTechnologies.includes(t))).reduce(((t,o)=>{const s=o.getProductionBonus(e.data.lifeformTechnologies[o.type]);return t.metal[o.type]+=s.metal,t.crystal[o.type]+=s.crystal,t.deuterium[o.type]+=s.deuterium,t.energy[o.type]+=s.energy,t}),{metal:(0,A.a)(C.Vs,0),crystal:(0,A.a)(C.Vs,0),deuterium:(0,A.a)(C.Vs,0),energy:(0,A.a)(C.Vs,0)})}function ke(e,t,o){const s=Ee(e),i=q.wJ[e.lifeform],n=q.t8[e.lifeform].filter((e=>v.YS.some((t=>e.getCostAndTimeReduction(t,20).cost>0)))),r=q.t8[e.lifeform].filter((e=>Se.some((t=>e.getCostAndTimeReduction(t,20).cost>0)))),c=_e.LN.filter((t=>e.activeLifeformTechnologies.includes(t.type)&&t.getResearchCostAndTimeReduction(d.s.plasmaTechnology,20).cost>0)),u=q.FH[e.lifeform],m=_e._i.filter((t=>t.appliesTo(a.D0.collector)&&e.activeLifeformTechnologies.includes(t.type))),g=_e.s5.filter((t=>e.activeLifeformTechnologies.includes(t.type))),p=_e.rE.filter((t=>e.activeLifeformTechnologies.includes(t.type))),f=q.cQ[e.lifeform],h=(0,A.a)(Se,(e=>r.reduce(((t,o)=>t+o.getCostAndTimeReduction(e,s.lifeformBuildings[o.type]).cost),0))),y=(0,A.a)(v.YS,(e=>n.reduce(((t,o)=>t+o.getCostAndTimeReduction(e,s.lifeformBuildings[o.type]).cost),0))),B=u.reduce(((e,t)=>e+t.getLifeformTechnologyResearchCostAndTimeReduction(s.lifeformBuildings[t.type]).cost),0),x=c.reduce(((e,t)=>e+t.getResearchCostAndTimeReduction(d.s.plasmaTechnology,s.lifeformTechnologies[t.type]).cost),0),T=(0,A.a)(C.Vs,(e=>f.map((t=>t.getLifeformTechnologyBonus(e,s.lifeformBuildings[t.type]))).reduce(((e,t)=>e+t),0))),b=_e._i.filter((t=>t.appliesTo(a.D0.discoverer)&&e.activeLifeformTechnologies.includes(t.type))),_=_e.uv.filter((t=>e.activeLifeformTechnologies.includes(t.type))),S={planet:{position:s.coordinates.position,temperature:s.maxTemperature},serverSettings:{economySpeed:t.speed.economy,crystalBoost:{default:t.resourceProduction.productionFactorBonus.crystal.default,pos1:t.resourceProduction.productionFactorBonus.crystal.pos1,pos2:t.resourceProduction.productionFactorBonus.crystal.pos2,pos3:t.resourceProduction.productionFactorBonus.crystal.pos3}},productionSettings:{metalMine:s.productionSettings[l.A.metalMine],crystalMine:s.productionSettings[l.A.crystalMine],deuteriumSynthesizer:s.productionSettings[l.A.deuteriumSynthesizer],fusionReactor:0}},P=e.lifeform==j.e5.none?0:(0,Y.g1)(o[e.lifeform]);return{data:s,lifeformExperienceBoost:P,lifeformTechnologyBoost:T,productionBuildingDependencies:S,mineCostReductionBuildings:r,lifeformBuildingCostReductionBuildings:n,lifeformTechnologyResearchBuildings:u,lifeformTechnologyBoostBuildings:f,lifeformResourceProductionBonusBuildings:i,collectorClassBonusTechnologies:m,plasmaTechnologyCostReductionTechnologies:c,crawlerProductionBonusTechnologies:g,lifeformResourceProductionBonusTechnologies:p,mineCostReductions:h,lifeformBuildingCostReductions:y,lifeformTechnologyCostReduction:B,plasmaTechnologyCostReduction:x,discovererClassBonusTechnologies:b,lifeformExpeditionBonusTechnologies:_}}function Ee(e){return{id:e.id,isMoon:!1,name:e.name,activeItems:e.activeItems.reduce(((e,t)=>(e[t]="permanent",e)),{}),activeLifeform:e.lifeform,activeLifeformTechnologies:[...e.activeLifeformTechnologies],buildings:{[l.A.metalMine]:e.mines?.metalMine??0,[l.A.crystalMine]:e.mines?.crystalMine??0,[l.A.deuteriumSynthesizer]:e.mines?.deuteriumSynthesizer??0},coordinates:{position:e.position},defense:{},missiles:{},lifeformBuildings:{...e.lifeformBuildingLevels??(0,A.a)(v.YS,0),...(0,A.a)(q.ax.map((e=>e.type)),(t=>Math.max(1,e.lifeformBuildingLevels?.[t]??0)))},lifeformTechnologies:{...e.lifeformTechnologyLevels??(0,A.a)(C.Vs,0)},maxTemperature:e.maxTemperature,productionSettings:{[l.A.metalMine]:100,[l.A.crystalMine]:100,[l.A.deuteriumSynthesizer]:100,[u.g.crawler]:e.crawlers.percentage},ships:{[u.g.crawler]:e.crawlers.max?1e4:e.crawlers.count}}}const Fe={[l.A.metalMine]:Z.H,[l.A.crystalMine]:G.g,[l.A.deuteriumSynthesizer]:H.w},De={metal:Z.H,crystal:G.g,deuterium:H.w},Me={[l.A.metalMine]:te._.metal,[l.A.crystalMine]:te._.crystal,[l.A.deuteriumSynthesizer]:te._.deuterium};class Ve{#l;#r;#a;#c=null;#d={get totalPlasmaTechnologyCostReduction(){return Object.values(this.planets).reduce(((e,t)=>e+t.plasmaTechnologyCostReduction*(0,le.q)(t.lifeformTechnologyBoost[C.Nw.improvedStellarator],t.lifeformExperienceBoost)),0)}};#u;constructor(e){this.#l=e.settings,this.#r=e.lifeformExperience,this.#a=e.serverSettings,this.#u=ie.B}nextItem(){const e=this.#c??this.#m(),t=se("generate next amortization item",(()=>e.next()));return t.done?null:t.value}#g(e){const t={metal:0,crystal:0,deuterium:0,energy:0};return this.#l.player.optimizeForResources.forEach((o=>t[o]=e[o])),t}#m(){const e=this.#p(),t=Object.values(this.#l.planets),o={};t.forEach((e=>{o[e.id]=ke(e,this.#a,this.#r)}));const s={[d.s.plasmaTechnology]:this.#l.player.levelPlasmaTechnology,[d.s.astrophysics]:this.#l.player.levelAstrophysics},i=(0,A.a)(j.gN,(e=>e==j.e5.none?0:(0,Y.g1)(this.#r[e]))),n={metal:{},crystal:{},deuterium:{}};t.forEach((e=>{const t=e.id,s=o[t],r=s.data.buildings[l.A.metalMine],a=s.data.buildings[l.A.crystalMine],c=s.data.buildings[l.A.deuteriumSynthesizer],d=r+a+c,m={available:s.data.ships[u.g.crawler],percentage:s.data.productionSettings[u.g.crawler],totalMineLevel:d},g={crawlers:m,lifeformExperienceBoost:i[s.data.activeLifeform],collectorClassBonusFactor:Re(s),lifeformBuildingBonusProductionFactor:Le(s),lifeformTechnologyBonusProductionFactor:Ae(s),lifeformTechnologyCrawlerProductionBonusFactor:ze(s),lifeformTechnologyBoost:$e(s)};n.metal[t]={baseProduction:(0,K.s)({planetPosition:s.data.coordinates.position,serverEconomySpeed:this.#a.speed.economy}),mineProduction:Z.H.getProduction(r,s.productionBuildingDependencies),itemBonusProductionFactor:(0,z.p)(te._.metal,s.data.activeItems),...g,lifeformBuildingBonusProductionFactor:g.lifeformBuildingBonusProductionFactor.metal,lifeformTechnologyBonusProductionFactor:g.lifeformTechnologyBonusProductionFactor.metal,fusionReactorConsumption:0},n.crystal[t]={baseProduction:(0,X.q)({planetPosition:s.data.coordinates.position,serverEconomySpeed:this.#a.speed.economy,serverPositionBoost:this.#a.resourceProduction.productionFactorBonus.crystal}),mineProduction:G.g.getProduction(a,s.productionBuildingDependencies),itemBonusProductionFactor:(0,z.p)(te._.crystal,s.data.activeItems),...g,lifeformBuildingBonusProductionFactor:g.lifeformBuildingBonusProductionFactor.crystal,lifeformTechnologyBonusProductionFactor:g.lifeformTechnologyBonusProductionFactor.crystal,fusionReactorConsumption:0},n.deuterium[t]={baseProduction:0,mineProduction:H.w.getProduction(c,s.productionBuildingDependencies),itemBonusProductionFactor:(0,z.p)(te._.deuterium,s.data.activeItems),...g,lifeformBuildingBonusProductionFactor:g.lifeformBuildingBonusProductionFactor.deuterium,lifeformTechnologyBonusProductionFactor:g.lifeformTechnologyBonusProductionFactor.deuterium,fusionReactorConsumption:0}}));const r={collectorProductionFactor:this.#a.playerClasses.collector.productionFactorBonus,geologistActiveCrawlerFactorBonus:this.#a.playerClasses.collector.crawlers.geologistActiveCrawlerFactorBonus,collectorCrawlerProductionFactorBonus:this.#a.playerClasses.collector.crawlers.productionFactorBonus,crawlerProductionFactorPerUnit:this.#a.playerClasses.crawlers.productionBoostFactorPerUnit,crawlerMaxProductionFactor:this.#a.playerClasses.crawlers.maxProductionFactor},a={metal:new ee._(te._.metal,s[d.s.plasmaTechnology],this.#l.player.playerClass,this.#l.player.allianceClass,this.#l.player.officers.geologist,(0,J.J)(this.#l.player.officers),r,n.metal),crystal:new ee._(te._.crystal,s[d.s.plasmaTechnology],this.#l.player.playerClass,this.#l.player.allianceClass,this.#l.player.officers.geologist,(0,J.J)(this.#l.player.officers),r,n.crystal),deuterium:new ee._(te._.deuterium,s[d.s.plasmaTechnology],this.#l.player.playerClass,this.#l.player.allianceClass,this.#l.player.officers.geologist,(0,J.J)(this.#l.player.officers),r,n.deuterium),getTotal(){return{metal:this.metal.getTotal(),crystal:this.crystal.getTotal(),deuterium:this.deuterium.getTotal(),energy:0}},setPlasmaTechnologyLevel(e){this.metal.plasmaTechnologyLevel=e,this.crystal.plasmaTechnologyLevel=e,this.deuterium.plasmaTechnologyLevel=e},clone(){return{metal:this.metal.clone(),crystal:this.crystal.clone(),deuterium:this.deuterium.clone(),setPlasmaTechnologyLevel:this.setPlasmaTechnologyLevel,getTotal:this.getTotal,clone:this.clone}}};this.#d.planets=o,this.#d.research=s,this.#d.productionBreakdowns=a;const c=(0,A.a)(this.#l.expeditions.items,(e=>"permanent"));return this.#d.expeditions=new be({admiral:this.#l.player.officers.admiral,astrophysicsLevel:s[d.s.astrophysics],fleetFindsResourceFactors:this.#l.expeditions.fleetUnitsFactors,itemBonusSlots:L(c),playerClass:this.#l.player.playerClass,serverSettings:{discovererExpeditionSlotBonus:this.#a.playerClasses.discoverer.bonusExpeditionSlots,discovererExpeditionBonus:this.#a.playerClasses.discoverer.expeditions.outcomeFactorBonus,economySpeed:this.#a.speed.economy,topScore:this.#l.expeditions.serverSettings.topScore??0},planets:(0,A.r)(t,(e=>e.id),(e=>Pe(o[e.id])))}),this.#c=e}#f(){const e=this.#d.research[d.s.plasmaTechnology];this.#d.productionBreakdowns.setPlasmaTechnologyLevel(e),te.P.forEach((e=>{const t=this.#d.productionBreakdowns[e],o=De[e];Object.values(this.#d.planets).forEach((s=>this.#h(s,t,e,o)))})),Object.values(this.#d.expeditions.options.planets).forEach((e=>{this.#y(e)}))}#y(e,t){t??=this.#d.planets[e.id],e.discovererClassBonusFactor=we(t),e.lifeformTechnologyExpeditionBonusFactor=Ie(t),e.lifeformTechnologyBoost=$e(t)}#h(e,t,o,s){const i=s.type,n=e.data;{const l=t.planets[n.id];l.mineProduction=s.getProduction(n.buildings[i],e.productionBuildingDependencies),l.lifeformBuildingBonusProductionFactor=Le(e)[o],l.collectorClassBonusFactor=Re(e),l.lifeformTechnologyBonusProductionFactor=Ae(e)[o],l.lifeformTechnologyCrawlerProductionBonusFactor=ze(e),l.crawlers.totalMineLevel=Se.reduce(((e,t)=>e+n.buildings[t]),0),l.lifeformTechnologyBoost=$e(e)}v.YS.forEach((t=>{e.lifeformBuildingCostReductions[t]=e.lifeformBuildingCostReductionBuildings.reduce(((e,o)=>e+o.getCostAndTimeReduction(t,n.lifeformBuildings[o.type]).cost),0)})),e.lifeformTechnologyCostReduction=e.lifeformTechnologyResearchBuildings.reduce(((e,t)=>e+t.getLifeformTechnologyResearchCostAndTimeReduction(n.lifeformBuildings[t.type]).cost),0),Se.forEach((t=>{e.mineCostReductions[t]=e.mineCostReductionBuildings.reduce(((e,o)=>e+o.getCostAndTimeReduction(t,n.lifeformBuildings[o.type]).cost),0)})),e.plasmaTechnologyCostReduction=e.plasmaTechnologyCostReductionTechnologies.reduce(((e,t)=>e+t.getResearchCostAndTimeReduction(d.s.plasmaTechnology,n.lifeformTechnologies[t.type]).cost),0)}*#p(){let e=0;while(1){let t=[];if(this.#l.include.mines&&t.push(...this.#v()),this.#l.include.lifeformProductionBonusBuildings){const e=this.#C();t.push(...e)}if(this.#l.include.lifeformTechnologyBoostBuildings){const e=this.#B(this.#l.include.expeditions);t.push(...e)}if(this.#l.include.lifeformProductionBonusTechnologies&&t.push(...this.#x(!1)),this.#l.include.expeditions&&this.#l.include.lifeformExpeditionBonusTechnologies&&t.push(...this.#x(!0)),this.#l.include.plasmaTechnology){const e=this.#T();t.push(e)}if(this.#l.include.astrophysics){const o=this.#b(-e-1,this.#d.expeditions,this.#l.include.expeditions);t.push(o)}if(t=t.filter((e=>e.productionDeltaConverted>0)).sort(((e,t)=>{const o=e.timeInHours-t.timeInHours;return 0!=o?o:e.costConverted-t.costConverted})),0==t.length)break;const o=t[0];switch(o.type){case"mine":{const e=this.#d.planets[o.planetId].data;e.buildings[o.mine]=o.level,o.additionalLifeformBuildings.forEach((t=>{e.lifeformBuildings[t.building]=t.levels.to}));break}case"plasma-technology":this.#d.research[d.s.plasmaTechnology]=o.level,o.additionalLifeformStuff.forEach((e=>{const t=this.#d.planets[e.planetId].data;"building"in e?t.lifeformBuildings[e.building]=e.levels.to:t.lifeformTechnologies[e.technology]=e.levels.to}));break;case"lifeform-building":{const e=this.#d.planets[o.planetId],t=e.data;t.lifeformBuildings[o.building]=o.level,o.additionalLifeformBuildings.forEach((e=>{t.lifeformBuildings[e.building]=e.levels.to}));break}case"lifeform-technology":{const e=this.#d.planets[o.planetId],t=e.data;t.lifeformTechnologies[o.technology]=o.level,o.additionalLifeformBuildings.forEach((e=>{t.lifeformBuildings[e.building]=e.levels.to}));break}case"astrophysics-and-colony":{e++;const t=Math.max(this.#d.research[d.s.astrophysics],...o.levels);this.#d.research[d.s.astrophysics]=t,this.#d.planets[o.newPlanetId]=o.planetState,this.#d.expeditions.options.planets[o.newPlanetId]=o.planetExpeditionState,te.P.forEach((e=>{this.#d.productionBreakdowns[e].addPlanet(o.newPlanetId,o.newPlanetProductionStates[e])})),this.#l.planets[o.newPlanetId]={...this.#l.astrophysics,include:!0};break}default:(0,R.A)("invalid item type")}this.#f(),yield o}}#b(e,t,o){const s=Object.keys(this.#d.planets).length+this.#l.player.numberOfUnusedRaidColonySlots,i=2*(s-1)-1,n=Math.max(i,this.#d.research[d.s.astrophysics]),l=Math.ceil(n/2)+1,r=n+n%2+1,a=[];let u={metal:0,crystal:0,deuterium:0,energy:0};if(s==l)for(let d=n+1;d<=r;d++){a.push(d);const e=Q.C.getCost(d);u=(0,c.aV)(u,e)}let m=ke({...this.#l.astrophysics,include:!0,id:e},this.#a,this.#r),g=Pe(m);const p=t.slots*this.#l.expeditions.wavesPerDay/24,f=(0,c.fB)(t.averageExpeditionFinds,p),h=this.#l.astrophysics,y=h.position,v=h.activeItems.reduce(((e,t)=>(e[t]="permanent",e)),{}),B=(0,A.a)(j.gN,(e=>e==j.e5.none?0:(0,Y.g1)(this.#r[e]))),x={crawlers:{available:h.crawlers.max?1e4:h.crawlers.count,percentage:h.crawlers.percentage,totalMineLevel:0},lifeformExperienceBoost:B[h.lifeform],collectorClassBonusFactor:0,lifeformTechnologyCrawlerProductionBonusFactor:0,lifeformTechnologyBoost:(0,A.a)(C.Vs,0),lifeformBuildingBonusProductionFactor:0,lifeformTechnologyBonusProductionFactor:(0,A.a)(C.Vs,0),fusionReactorConsumption:0},T={metal:{baseProduction:(0,K.s)({planetPosition:y,serverEconomySpeed:this.#a.speed.economy}),mineProduction:0,itemBonusProductionFactor:(0,z.p)(te._.metal,v),...x},crystal:{baseProduction:(0,X.q)({planetPosition:y,serverEconomySpeed:this.#a.speed.economy,serverPositionBoost:this.#a.resourceProduction.productionFactorBonus.crystal}),mineProduction:0,itemBonusProductionFactor:(0,z.p)(te._.crystal,v),...x},deuterium:{baseProduction:0,mineProduction:0,itemBonusProductionFactor:(0,z.p)(te._.deuterium,v),...x}},b=this.#d.productionBreakdowns.getTotal(),_=this.#d.productionBreakdowns.clone();_.metal.addPlanet(e,T.metal),_.crystal.addPlanet(e,T.crystal),_.deuterium.addPlanet(e,T.deuterium);const S=t.clone();S.options.planets[e]={id:e,discovererClassBonusFactor:0,lifeformExperienceBoost:B[h.lifeform],lifeformTechnologyBoost:(0,A.a)(C.Vs,0),lifeformTechnologyExpeditionBonusFactor:(0,A.a)(ne.A,0)};let P=1/0;do{const e=[];if(this.#l.include.mines){const t=Se.map((e=>this.#_(_,m,e)));e.push(...t)}if(this.#l.include.lifeformProductionBonusBuildings){const t=q.wJ[m.data.activeLifeform].map((e=>this.#S(_,m,e)));e.push(...t)}if(this.#l.include.lifeformTechnologyBoostBuildings){const t=q.cQ[m.data.activeLifeform].map((e=>this.#P(_,S,m,e,o)));e.push(...t)}if(this.#l.include.lifeformProductionBonusTechnologies){const t=[...m.lifeformResourceProductionBonusTechnologies,...m.crawlerProductionBonusTechnologies,...m.collectorClassBonusTechnologies].map((e=>this.#w(_,S,m,e,o)));e.push(...t)}if(this.#l.include.expeditions&&this.#l.include.lifeformExpeditionBonusTechnologies){const t=[...m.discovererClassBonusTechnologies,...m.lifeformExpeditionBonusTechnologies].map((e=>this.#w(_,S,m,e,o)));e.push(...t)}const t=e.filter((e=>e.productionDeltaConverted>0)).reduce(((e,t)=>t.timeInHours<e.timeInHours?t:e),{timeInHours:1/0}),s=(0,c.aV)(u,t.cost),i=this.#u(s),n=this.#I(m);switch(t.type){case"mine":n.data.buildings[t.mine]=t.level,t.additionalLifeformBuildings.forEach((e=>{n.data.lifeformBuildings[e.building]=e.levels.to}));break;case"lifeform-building":n.data.lifeformBuildings[t.building]=t.level,t.additionalLifeformBuildings.forEach((e=>{n.data.lifeformBuildings[e.building]=e.levels.to}));break;case"lifeform-technology":n.data.lifeformTechnologies[t.technology]=t.level,t.additionalLifeformBuildings.forEach((e=>{n.data.lifeformBuildings[e.building]=e.levels.to}));break;default:(0,R.A)(`Invalid amortization item '${t}'`)}te.P.forEach((e=>{this.#h(n,_[e],e,De[e])})),this.#y(g,n);let l=(0,c.mw)(_.getTotal(),b),r=this.#u(l);if(o){const e=S.slots*this.#l.expeditions.wavesPerDay/24;S.options.planets[g.id]=g;const t=(0,c.fB)(S.averageExpeditionFinds,e),o=(0,c.mw)(t,f),s=this.#u(o);l=(0,c.aV)(l,o),r+=s}const a=i/r;if(a>P)break;P=a,u=s,m=n}while(1);const w=this.#u(u);let I=(0,c.mw)(_.getTotal(),b);if(this.#l.expeditions){const e=t.clone(),o=e.slots*this.#l.expeditions.wavesPerDay/24;e.options.planets[g.id]=g;const s=(0,c.fB)(e.averageExpeditionFinds,o),i=(0,c.mw)(s,f);I=(0,c.aV)(I,i)}I=this.#g(I);let $=this.#u(I);return{type:"astrophysics-and-colony",newPlanetId:e,levels:a,planetState:m,planetExpeditionState:g,newPlanetProductionStates:T,builtLevels:{mines:{...m.data.buildings},lifeformBuildings:{...m.data.lifeformBuildings},lifeformTechnologies:{...m.data.lifeformTechnologies}},cost:u,costConverted:w,productionDelta:I,productionDeltaConverted:$,timeInHours:w/$}}#I(e){return{...e,lifeformBuildingCostReductions:{...e.lifeformBuildingCostReductions},mineCostReductions:{...e.mineCostReductions},data:JSON.parse(JSON.stringify(e.data))}}#x(e){return this.#$.flatMap((t=>{const o=e?[...t.discovererClassBonusTechnologies,...t.lifeformExpeditionBonusTechnologies]:[...t.lifeformResourceProductionBonusTechnologies,...t.crawlerProductionBonusTechnologies,...t.collectorClassBonusTechnologies];return o.map((o=>this.#w(this.#d.productionBreakdowns,this.#d.expeditions,t,o,e)))}))}#w(e,t,o,s,i){const n=o.data,l=n.id,r=n.lifeformTechnologies[s.type]+1,d=this.#R(o,s),u=d.totalReducedCost,m=d.totalReducedCostConverted,g=[],p={};d.additionalLifeformBuildings.forEach((e=>{let t=p[e.building];null==t&&(t={planetId:n.id,building:e.building,levels:{from:e.level,to:e.level}},p[e.building]=t,g.push(t)),t.levels.to=e.level}));let f=0,h=0,y={metal:0,crystal:0,deuterium:0,energy:0};if("getProductionBonus"in s){const e=(0,c.mw)(s.getProductionBonus(r),s.getProductionBonus(r-1));y=(0,c.aV)(y,e)}else if("getCrawlerProductionBonus"in s){const e=s.getCrawlerProductionBonus(r)-s.getCrawlerProductionBonus(r-1);f=e}else if("getClassBonus"in s&&s.appliesTo(a.D0.collector)){const e=s.getClassBonus(a.D0.collector,r)-s.getClassBonus(a.D0.collector,r-1);h=e}let v={metal:0,crystal:0,deuterium:0,energy:0},C=0;const B=e.getTotal(),x=e.clone();te.P.forEach((e=>{const t=x[e].planets[l];t.lifeformTechnologyBonusProductionFactor[s.type]+=y[e],t.collectorClassBonusFactor+=h,t.lifeformTechnologyCrawlerProductionBonusFactor+=f}));const T=x.getTotal();if(v=(0,c.mw)(T,B),i){let e=0,o=(0,A.a)(ne.A,0),i=(0,A.a)(ne.A,0);if("getExpeditionBonus"in s)ne.A.forEach((e=>{const t=s.getExpeditionBonus(e,r)-s.getExpeditionBonus(e,r-1);o[e]+=t}));else if("getExpeditionEventProbabilityBonus"in s)ne.A.forEach((e=>{const t=s.getExpeditionEventProbabilityBonus(e,r)-s.getExpeditionEventProbabilityBonus(e,r-1);i[e]+=t}));else if("getClassBonus"in s&&s.appliesTo(a.D0.discoverer)){const t=s.getClassBonus(a.D0.discoverer,r)-s.getClassBonus(a.D0.discoverer,r-1);e=t}const n=t.slots*this.#l.expeditions.wavesPerDay/24,d=(0,c.fB)(t.averageExpeditionFinds,n),u=t.clone(),m=u.options.planets[l];m.discovererClassBonusFactor+=e,ne.A.forEach((e=>{m.lifeformTechnologyExpeditionBonusFactor[e]+=o[e]}));const g=u.slots*this.#l.expeditions.wavesPerDay/24,p=(0,c.fB)(u.averageExpeditionFinds,g),f=(0,c.mw)(p,d);v=(0,c.aV)(v,f)}return v=this.#g(v),C=this.#u(v),{type:"lifeform-technology",planetId:l,technology:s.type,level:r,additionalLifeformBuildings:g,cost:u,costConverted:m,productionDelta:v,productionDeltaConverted:C,timeInHours:m/C}}#R(e,t){const o=e.data,s={lifeformBuildingLevels:{...e.data.lifeformBuildings},lifeformTechnologyLevels:{...e.data.lifeformTechnologies},lifeformTechnologyCostReduction:e.lifeformTechnologyCostReduction,lifeformBuildingCostReduction:{...e.lifeformBuildingCostReductions},plasmaTechnologyCostReduction:e.plasmaTechnologyCostReduction,lifeformTechnologyBoost:e.lifeformTechnologyBoost},i=o.lifeformTechnologies[t.type]+1,n=s.lifeformTechnologyCostReduction,l=t.getCost(i),r=(0,c.Uj)(l,1-n),a=[{planetId:o.id,technology:t.type,cost:l,level:i}];let d=r,u=this.#u(d);const m=(e,t)=>{const i=s.lifeformBuildingLevels[t.type]+1,n=t.getCost(i),l=(0,c.Uj)(n,1-s.lifeformBuildingCostReduction[t.type]);let r=t.getLifeformTechnologyResearchCostAndTimeReduction(i).cost-t.getLifeformTechnologyResearchCostAndTimeReduction(i-1).cost;const d=a.reduce(((e,t)=>{if("building"in t){const o=(0,c.Uj)(t.cost,1-s.lifeformBuildingCostReduction[t.building]);return(0,c.aV)(e,o)}const o=s.lifeformTechnologyCostReduction+r,i=(0,c.Uj)(t.cost,1-o);return(0,c.aV)(e,i)}),l),m=this.#u(d);if(m<u&&(null==e||m<e.newTotalReducedCostConverted)){const e={planetId:o.id,level:i,cost:n,newTotalReducedCost:d,newTotalReducedCostConverted:m};return{...e,building:t}}return e},g=(e,t)=>{const i=s.lifeformBuildingLevels[t.type]+1,n=t.getCost(i),l=(0,c.Uj)(n,1-s.lifeformBuildingCostReduction[t.type]),r=a.reduce(((e,o)=>{if("technology"in o){const t=(0,c.Uj)(o.cost,1-s.lifeformTechnologyCostReduction);return(0,c.aV)(e,t)}const n=s.lifeformTechnologyCostReduction,l=o.building!=t.type?t.getCostAndTimeReduction(o.building,i).cost-t.getCostAndTimeReduction(o.building,i-1).cost:0,r=n+l,a=(0,c.Uj)(o.cost,1-r);return(0,c.aV)(e,a)}),l),d=this.#u(r);return d<u&&(null==e||d<e.newTotalReducedCostConverted)?{planetId:o.id,building:t,level:i,cost:n,newTotalReducedCost:r,newTotalReducedCostConverted:d}:e},p=[];while(1){const t=[...e.lifeformTechnologyResearchBuildings].reduce(((e,t)=>m(e,t)),null)??e.lifeformBuildingCostReductionBuildings.reduce(((e,t)=>g(e,t)),null);if(null==t)break;const o={cost:t.cost,level:t.level,building:t.building.type,planetId:t.planetId};if(s.lifeformBuildingLevels[t.building.type]++,"affectedBuildings"in t.building){const e=t.building;e.affectedBuildings.forEach((o=>{const i=e.getCostAndTimeReduction(o,t.level).cost-e.getCostAndTimeReduction(o,t.level-1).cost;v.YS.includes(o)&&(s.lifeformBuildingCostReduction[o]+=i)}))}else if("getLifeformTechnologyResearchCostAndTimeReduction"in t.building){const e=t.building.getLifeformTechnologyResearchCostAndTimeReduction(t.level).cost-t.building.getLifeformTechnologyResearchCostAndTimeReduction(t.level-1).cost;s.lifeformTechnologyCostReduction+=e}else for(const e of C.Vs){const o=t.building.getLifeformTechnologyBonus(e,t.level)-t.building.getLifeformTechnologyBonus(e,t.level-1);s.lifeformTechnologyBoost[e]+=o}a.push(o),d=t.newTotalReducedCost,u=t.newTotalReducedCostConverted,p.push(t)}const f=a.filter((e=>"building"in e)).map((e=>({building:e.building,level:e.level,planetId:e.planetId,order:q.ZX.some((t=>t.type==e.building))?1:q.d2.some((t=>t.type==e.building))?2:3}))).sort(((e,t)=>{const o=e.order-t.order;return 0!=o?o:e.level-t.level}));return{totalReducedCost:d,totalReducedCostConverted:u,newPlanetState:s,additionalLifeformBuildings:f}}#B(e){return this.#$.flatMap((t=>q.cQ[t.data.activeLifeform].map((o=>this.#P(this.#d.productionBreakdowns,this.#d.expeditions,t,o,e)))))}#P(e,t,o,s,i){const n=o.data,l=n.id,r=n.lifeformBuildings[s.type]+1,a=this.#z(o,s),d=a.totalReducedCost,u=a.totalReducedCostConverted,m=[],g={};a.additionalLifeformBuildings.forEach((e=>{let t=g[e.building];null==t&&(t={planetId:n.id,building:e.building,levels:{from:e.level,to:e.level}},g[e.building]=t,m.push(t)),t.levels.to=e.level}));let p={metal:0,crystal:0,deuterium:0,energy:0};const f=(0,A.a)(C.Vs,(e=>s.getLifeformTechnologyBonus(e,r)-s.getLifeformTechnologyBonus(e,r-1)));if(te.P.forEach((t=>{const o=e[t],s=o.clone();C.Vs.forEach((e=>{s.planets[l].lifeformTechnologyBoost[e]+=f[e]}));const i=s.getTotal()-o.getTotal();p=(0,c.aV)(p,{metal:0,crystal:0,deuterium:0,energy:0,[t]:i})})),i){const e=t.slots*this.#l.expeditions.wavesPerDay/24,o=(0,c.fB)(t.averageExpeditionFinds,e),s=t.clone();C.Vs.forEach((e=>{s.options.planets[l].lifeformTechnologyBoost[e]+=f[e]}));const i=(0,c.fB)(s.averageExpeditionFinds,e),n=(0,c.mw)(i,o);p=(0,c.aV)(p,n)}p=this.#g(p);const h=this.#u(p);return{type:"lifeform-building",planetId:l,building:s.type,level:r,additionalLifeformBuildings:m,cost:d,costConverted:u,productionDelta:p,productionDeltaConverted:h,timeInHours:u/h}}#C(){return this.#$.flatMap((e=>q.wJ[e.data.activeLifeform].map((t=>this.#S(this.#d.productionBreakdowns,e,t)))))}#S(e,t,o){const s=t.data,i=s.id,n=s.lifeformBuildings[o.type]+1,l=this.#z(t,o),r=l.totalReducedCost,a=l.totalReducedCostConverted,d=[],u={};l.additionalLifeformBuildings.forEach((e=>{let t=u[e.building];null==t&&(t={planetId:s.id,building:e.building,levels:{from:e.level,to:e.level}},u[e.building]=t,d.push(t)),t.levels.to=e.level}));let m={metal:0,crystal:0,deuterium:0,energy:0};te.P.forEach((t=>{const s=e[t],l=s.clone(),r=o.getProductionBonus(n)[t]-o.getProductionBonus(n-1)[t];l.planets[i].lifeformBuildingBonusProductionFactor+=r;const a=l.getTotal()-s.getTotal();m=(0,c.aV)(m,{metal:0,crystal:0,deuterium:0,energy:0,[t]:a})})),m=this.#g(m);const g=this.#u(m);return{type:"lifeform-building",planetId:i,building:o.type,level:n,additionalLifeformBuildings:d,cost:r,costConverted:a,productionDelta:m,productionDeltaConverted:g,timeInHours:a/g}}#z(e,t){const o=e.data,s=e.lifeformBuildingCostReductionBuildings,i={...e.lifeformBuildingCostReductions},n={...o.lifeformBuildings},l=o.lifeformBuildings[t.type]+1,r=t.getCost(l),a=(0,c.Uj)(r,1-i[t.type]),d=[{building:t.type,cost:r,level:l}];let u=a,m=this.#u(a);const g=(e,t)=>{const o=n[t.type]+1,s=t.getCost(o),l=(0,c.Uj)(s,1-i[t.type]),r=d.reduce(((e,s)=>{const n=i[s.building],l=s.building!=t.type?t.getCostAndTimeReduction(s.building,o).cost-t.getCostAndTimeReduction(s.building,o-1).cost:0,r=n+l,a=(0,c.Uj)(s.cost,1-r);return(0,c.aV)(e,a)}),l),a=this.#u(r);return a<m&&(null==e||a<e.newTotalReducedCostConverted)?{building:t,level:o,cost:s,newTotalReducedCost:r,newTotalReducedCostConverted:a}:e};while(1){const e=s.reduce(g,null);if(null==e)break;d.push({building:e.building.type,cost:e.cost,level:e.level}),u=e.newTotalReducedCost,m=e.newTotalReducedCostConverted,n[e.building.type]++,e.building.affectedBuildings.forEach((t=>{const o=e.building.getCostAndTimeReduction(t,e.level).cost-e.building.getCostAndTimeReduction(t,e.level-1).cost;v.YS.includes(t)||(0,R.A)(`affected building type ${t} is not a lifeform building!`),i[t]+=o}))}const p=d.filter((e=>v.YS.includes(e.building)&&t.type!=e.building)).map((e=>({building:e.building,level:e.level,order:q.ZX.some((t=>t.type==e.building))?1:2}))).sort(((e,t)=>{const o=e.order-t.order;return 0!=o?o:e.level-t.level}));return{totalReducedCost:u,totalReducedCostConverted:m,lifeformBuildingCostReduction:i,additionalLifeformBuildings:p}}#T(){const e=this.#d.research[d.s.plasmaTechnology]+1,t=this.#L(),o=t.totalReducedCost,s=t.totalReducedCostConverted,i=this.#d.productionBreakdowns.getTotal(),n=this.#d.productionBreakdowns.clone();n.setPlasmaTechnologyLevel(e);const l=n.getTotal();let r=(0,c.mw)(l,i);r=this.#g(r);const a=this.#u(r),u=[],m={};return t.additionalLifeformBuildings.forEach((e=>{const t=m[e.planetId]??={};let o=t[e.building];null==o&&(o={planetId:e.planetId,building:e.building,levels:{from:e.level,to:e.level}},t[e.building]=o,u.push(o)),o.levels.to=e.level})),t.additionalLifeformTechnologies.forEach((e=>{const t=m[e.planetId]??={};let o=t[e.technology];null==o&&(o={planetId:e.planetId,technology:e.technology,levels:{from:e.level,to:e.level}},t[e.technology]=o,u.push(o)),o.levels.to=e.level})),{type:"plasma-technology",level:e,additionalLifeformStuff:u,cost:o,costConverted:s,productionDelta:r,productionDeltaConverted:a,timeInHours:s/a}}#L(){const e=this.#d.research[d.s.plasmaTechnology]+1,t=this.#d.totalPlasmaTechnologyCostReduction,o=W.Z.getCost(e),s=(0,c.Uj)(o,1-t),i=[{research:d.s.plasmaTechnology,cost:o,level:e}];let n=s,l=this.#u(s);const r={},a=()=>Object.values(r).reduce(((e,t)=>{const o=t.plasmaTechnologyCostReduction,s=t.lifeformTechnologyBoost,i=this.#d.planets[t.id].lifeformExperienceBoost;return e+o*(0,le.q)(s[C.Nw.improvedStellarator],i)}),0),u=this.#$;u.forEach((e=>{r[e.data.id]={id:e.data.id,lifeformBuildingLevels:{...e.data.lifeformBuildings},lifeformTechnologyLevels:{...e.data.lifeformTechnologies},lifeformTechnologyCostReduction:e.lifeformTechnologyCostReduction,lifeformBuildingCostReduction:{...e.lifeformBuildingCostReductions},plasmaTechnologyCostReduction:e.plasmaTechnologyCostReduction,lifeformTechnologyBoost:e.lifeformTechnologyBoost}}));const m=(e,t,o)=>{const s=r[o],n=s.lifeformTechnologyLevels[t.type]+1,d=t.getCost(n),u=(0,c.Uj)(d,1-s.lifeformTechnologyCostReduction),m=a(),g=i.reduce(((e,i)=>{if("building"in i){const t=(0,c.Uj)(i.cost,1-s.lifeformBuildingCostReduction[i.building]);return(0,c.aV)(e,t)}if("technology"in i){const t=(0,c.Uj)(i.cost,1-s.lifeformTechnologyCostReduction);return(0,c.aV)(e,t)}const l=s.lifeformTechnologyBoost,r=this.#d.planets[o].lifeformExperienceBoost,a=t.getResearchCostAndTimeReduction(i.research,n).cost-t.getResearchCostAndTimeReduction(i.research,n-1).cost,d=m+a*(0,le.q)(l[t.type],r),u=(0,c.Uj)(i.cost,1-d);return(0,c.aV)(e,u)}),u),p=this.#u(g);return p<l&&(null==e||p<e.newTotalReducedCostConverted)?{planetId:o,technology:t,level:n,cost:d,newTotalReducedCost:g,newTotalReducedCostConverted:p}:e},g=(e,t,o)=>{const s=r[o],n=s.lifeformBuildingLevels[t.type]+1,a=t.getCost(n),d=(0,c.Uj)(a,1-s.lifeformBuildingCostReduction[t.type]);let u=0;const m=(0,A.a)(C.Vs,0);if("getLifeformTechnologyResearchCostAndTimeReduction"in t)u=t.getLifeformTechnologyResearchCostAndTimeReduction(n).cost-t.getLifeformTechnologyResearchCostAndTimeReduction(n-1).cost;else for(const i of C.Vs)m[i]=t.getLifeformTechnologyBonus(i,n)-t.getLifeformTechnologyBonus(i,n-1);const g=i.reduce(((e,t)=>{if("research"in t){const s=Object.values(r).reduce(((e,t)=>{const s=t.plasmaTechnologyCostReduction,i=t.lifeformTechnologyBoost[C.Nw.improvedStellarator]+(t.id==o?m[C.Nw.improvedStellarator]:0),n=this.#d.planets[o].lifeformExperienceBoost;return e+s*(0,le.q)(i,n)}),0),i=(0,c.Uj)(t.cost,1-s);return(0,c.aV)(e,i)}if("building"in t){const o=(0,c.Uj)(t.cost,1-s.lifeformBuildingCostReduction[t.building]);return(0,c.aV)(e,o)}const i=s.lifeformTechnologyCostReduction+u,n=(0,c.Uj)(t.cost,1-i);return(0,c.aV)(e,n)}),d),p=this.#u(g);if(p<l&&(null==e||p<e.newTotalReducedCostConverted)){const e={planetId:o,level:n,cost:a,newTotalReducedCost:g,newTotalReducedCostConverted:p};return{...e,building:t}}return e},p=(e,t,o)=>{const s=r[o],n=s.lifeformBuildingLevels[t.type]+1,a=t.getCost(n),d=(0,c.Uj)(a,1-s.lifeformBuildingCostReduction[t.type]),u=i.reduce(((e,i)=>{if("research"in i){const t=Object.values(r).reduce(((e,t)=>{const s=t.plasmaTechnologyCostReduction,i=t.lifeformTechnologyBoost[C.Nw.improvedStellarator],n=this.#d.planets[o].lifeformExperienceBoost;return e+s*(0,le.q)(i,n)}),0),s=(0,c.Uj)(i.cost,1-t);return(0,c.aV)(e,s)}if("technology"in i){const t=(0,c.Uj)(i.cost,1-s.lifeformTechnologyCostReduction);return(0,c.aV)(e,t)}const l=s.lifeformTechnologyCostReduction,a=i.building!=t.type?t.getCostAndTimeReduction(i.building,n).cost-t.getCostAndTimeReduction(i.building,n-1).cost:0,d=l+a,u=(0,c.Uj)(i.cost,1-d);return(0,c.aV)(e,u)}),d),m=this.#u(u);return m<l&&(null==e||m<e.newTotalReducedCostConverted)?{planetId:o,building:t,level:n,cost:a,newTotalReducedCost:u,newTotalReducedCostConverted:m}:e},f=(e,t)=>{const o=t.plasmaTechnologyCostReductionTechnologies.reduce(((e,o)=>m(e,o,t.data.id)),null)??[...t.lifeformTechnologyResearchBuildings,...t.lifeformTechnologyBoostBuildings].reduce(((e,o)=>g(e,o,t.data.id)),null)??t.lifeformBuildingCostReductionBuildings.reduce(((e,o)=>p(e,o,t.data.id)),null);return null==o?e:o.newTotalReducedCostConverted<l&&(null==e||o.newTotalReducedCostConverted<e.newTotalReducedCostConverted)?o:e},h=[];while(1){const e=u.reduce(f,null);if(null==e)break;const t=r[e.planetId];let o;if("building"in e)if(o={cost:e.cost,level:e.level,building:e.building.type,planetId:e.planetId},t.lifeformBuildingLevels[e.building.type]++,"affectedBuildings"in e.building){const o=e.building;o.affectedBuildings.forEach((s=>{const i=o.getCostAndTimeReduction(s,e.level).cost-o.getCostAndTimeReduction(s,e.level-1).cost;t.lifeformBuildingCostReduction[s]+=i}))}else if("getLifeformTechnologyResearchCostAndTimeReduction"in e.building){const o=e.building.getLifeformTechnologyResearchCostAndTimeReduction(e.level).cost-e.building.getLifeformTechnologyResearchCostAndTimeReduction(e.level-1).cost;t.lifeformTechnologyCostReduction+=o}else for(const s of C.Vs){const o=e.building.getLifeformTechnologyBonus(s,e.level)-e.building.getLifeformTechnologyBonus(s,e.level-1);t.lifeformTechnologyBoost[s]+=o}else o={cost:e.cost,level:e.level,technology:e.technology.type,planetId:e.planetId},t.lifeformTechnologyLevels[e.technology.type]++,t.plasmaTechnologyCostReduction+=e.technology.getResearchCostAndTimeReduction(d.s.plasmaTechnology,e.level).cost-e.technology.getResearchCostAndTimeReduction(d.s.plasmaTechnology,e.level-1).cost;i.push(o),n=e.newTotalReducedCost,l=e.newTotalReducedCostConverted,h.push(e)}const y=i.filter((e=>"building"in e)).map((e=>({building:e.building,level:e.level,planetId:e.planetId,order:q.ZX.some((t=>t.type==e.building))?1:q.d2.some((t=>t.type==e.building))?2:3}))).sort(((e,t)=>{const o=e.order-t.order;return 0!=o?o:e.level-t.level})).map((e=>({building:e.building,level:e.level,planetId:e.planetId}))),v=i.filter((e=>"technology"in e)).map((e=>({technology:e.technology,level:e.level,planetId:e.planetId}))).sort(((e,t)=>{const o=e.technology-t.technology;return 0!=o?o:e.level-t.level}));return{totalReducedCost:n,totalReducedCostConverted:l,newPlanetStates:r,additionalLifeformBuildings:y,additionalLifeformTechnologies:v}}#v(){return this.#$.flatMap((e=>Se.map((t=>this.#_(this.#d.productionBreakdowns,e,t)))))}#_(e,t,o){const s=t.data,i=s.id,n=s.buildings[o]+1,l=Fe[o],r=this.#A(t,o),a=r.totalReducedCost,d=r.totalReducedCostConverted,u=[],m={};r.additionalLifeformBuildings.forEach((e=>{let t=m[e.building];null==t&&(t={planetId:s.id,building:e.building,levels:{from:e.level,to:e.level}},m[e.building]=t,u.push(t)),t.levels.to=e.level}));const g=Me[o],p=e.clone();p[g].planets[i].mineProduction=l.getProduction(n,t.productionBuildingDependencies),te.P.forEach((e=>p[e].planets[i].crawlers.totalMineLevel+=1));const f=(0,c.mw)(p.getTotal(),e.getTotal()),h=this.#g(f),y=this.#u(h);return{type:"mine",planetId:i,mine:o,level:n,additionalLifeformBuildings:u,cost:a,costConverted:d,productionDelta:h,productionDeltaConverted:y,timeInHours:d/y}}#A(e,t){const o=e.data,s=e.mineCostReductionBuildings;let i={...e.mineCostReductions};const n={...e.lifeformBuildingCostReductions},l={...o.lifeformBuildings},r=o.buildings[t]+1,a=Fe[t],d=a.getCost(r),u=(0,c.Uj)(d,1-i[t]),m=[{building:t,cost:d,level:r}];let g=u,p=this.#u(u);const f=e.lifeformBuildingCostReductionBuildings,h=(e,o)=>{const s=l[o.type]+1,r=o.getCost(s),a=(0,c.Uj)(r,1-n[o.type]),d=m.reduce(((e,l)=>{const r=l.building==t?i[t]:n[l.building],a=l.building!=o.type?o.getCostAndTimeReduction(l.building,s).cost-o.getCostAndTimeReduction(l.building,s-1).cost:0,d=r+a,u=(0,c.Uj)(l.cost,1-d);return(0,c.aV)(e,u)}),a),u=this.#u(d);return u<p&&(null==e||u<e.newTotalReducedCostConverted)?{building:o,level:s,cost:r,newTotalReducedCost:d,newTotalReducedCostConverted:u}:e};while(1){const e=s.reduce(h,null)??f.reduce(h,null);if(null==e)break;m.push({building:e.building.type,cost:e.cost,level:e.level}),g=e.newTotalReducedCost,p=e.newTotalReducedCostConverted,l[e.building.type]++,e.building.affectedBuildings.forEach((t=>{const o=e.building.getCostAndTimeReduction(t,e.level).cost-e.building.getCostAndTimeReduction(t,e.level-1).cost;Se.includes(t)?i[t]+=o:n[t]+=o}))}const y=m.filter((e=>v.YS.includes(e.building))).map((e=>({building:e.building,level:e.level}))).sort(((e,t)=>{const o=s.some((t=>t.type==e.building)),i=s.some((e=>e.type==t.building));return o?i?e.level-t.level:1:i?-1:e.level-t.level}));return{totalReducedCost:g,totalReducedCostConverted:p,mineCostReduction:i,lifeformBuildingCostReduction:n,additionalLifeformBuildings:y}}get#$(){return Object.values(this.#d.planets).filter((e=>this.#l.planets[e.data.id].include))}}var Ue=o(329),Oe=o(5593),je=o(7090),Ne=o(5347),Ge=o(9119);function He(){return(0,Ge.Z)(Date.now())}let Ze=class extends m.w3{numberFormat={maximumFractionDigits:0};showSettingsMenu=!1;showInfoMenu=!1;BuildingType=l.A;ResearchType=d.s;mineBuildingTypes=[l.A.metalMine,l.A.crystalMine,l.A.deuteriumSynthesizer];LifeformBuildingTypes=v.YS;LifeformTechnologyTypes=C.Vs;expoBreakdown=new be({playerClass:a.D0.none,admiral:!1,astrophysicsLevel:0,itemBonusSlots:0,fleetFindsResourceFactors:(0,A.a)(te.P,(()=>0)),planets:{},serverSettings:{topScore:0,economySpeed:0,discovererExpeditionBonus:0,discovererExpeditionSlotBonus:0}});applicableBuildingTypes=[...q.yn,...q.d2].map((e=>e.type));get applicableLifeformBuildingTypes(){const e=v.IU[this.astrophysicsSettings.lifeform];return e.filter((e=>this.applicableBuildingTypes.includes(e)))}applicableLifeformTechnologyTypes=C.Vs.sort(((e,t)=>C.rI[e]-C.rI[t]));get savedAmortization(){return Oe.D.settings.savedAmortization}onPlayerClassSelectionChanged(e){const t=e==a.D0.collector,o=t?150:100;this.planetSettingsSorted.forEach((e=>{e.crawlers.percentage=o,e.crawlers.max=t})),this.astrophysicsSettings.crawlers.percentage=o,this.astrophysicsSettings.crawlers.max=t}async saveItems(){const e={date:Date.now(),items:this.items};await Oe.D.updateSettings({...Oe.D.settings,savedAmortization:e})}loadItems(){const e=Oe.D.settings.savedAmortization;null!=e&&(this.showSettings=!1,this.generator=null,this.selectedCount=0,this.isGroupedItemsView=!1,this.saveStateDate=e.date,this.amortizationItems=e.items.filter((e=>!this.getIsDone(e))).map((e=>({...e,selected:!1}))),this.saveStateHiddenItems=e.items.length-this.amortizationItems.length)}getIsDone(e){const t=e.type;switch(e.type){case"mine":{if(e.planetId<0)return!1;const t=this.empire.planets[e.planetId];return null==t||t.buildings[e.mine]>=e.level}case"plasma-technology":return this.empire.research[d.s.plasmaTechnology]>=e.level;case"astrophysics-and-colony":return!1;case"lifeform-building":{if(e.planetId<0)return!1;const t=this.empire.planets[e.planetId];return null==t||t.lifeformBuildings[e.building]>=e.level}case"lifeform-technology":{if(e.planetId<0)return!1;const t=this.empire.planets[e.planetId];return null==t||t.lifeformTechnologies[e.technology]>=e.level}default:(0,R.A)(`Invalid amortization item type '${t}'`)}}getPlanetName(e){return this.empire.planets[e]?.name??`${this.$i18n.$t.extension.empire.amortization.saveLoad.abandonedPlanet} (${e})`}formatPlanetCoordinates(e){const t=this.empire.planets[e]?.coordinates;return null==t?"":this.formatCoordinates(t)}saveStateDate=null;saveStateHiddenItems=0;playerSettings={optimizeForResources:[te._.metal,te._.crystal,te._.deuterium],officers:{admiral:!1,commander:!1,engineer:!1,geologist:!1,technocrat:!1},playerClass:a.D0.none,allianceClass:r.Ck.none,levelPlasmaTechnology:0,levelAstrophysics:0,numberOfUnusedRaidColonySlots:0,lifeformLevels:(0,A.a)(j.p3,0)};planetSettings={};astrophysicsSettings={id:-1,name:"",position:8,maxTemperature:(0,N.h)(8),activeItems:[],crawlers:{percentage:100,count:0,max:!1},ignoreEmptyLifeformTechnologySlots:!1,lifeform:j.e5.none,activeLifeformTechnologies:[]};includeSettings={astrophysics:!1,plasmaTechnology:!0,expeditions:!0,mines:!0,lifeformProductionBonusBuildings:!0,lifeformTechnologyBoostBuildings:!0,lifeformProductionBonusTechnologies:!0,lifeformExpeditionBonusTechnologies:!0};expeditionSettings={wavesPerDay:8,items:[],fleetUnitsFactors:{metal:.35,crystal:.35,deuterium:.35},serverSettings:{topScore:100000001,economySpeed:1,discovererExpeditionBonus:.5,discovererExpeditionSlotBonus:2}};showSettings=!0;empire=y.p.empire;generator=null;amortizationItems=[];selectedCount=0;generatingItemCount=null;get planetSettingsSorted(){return Object.values(this.planetSettings).sort(((e,t)=>y.p.empire.planetOrder.indexOf(e.id)-y.p.empire.planetOrder.indexOf(t.id)))}mounted(){this.initSettings()}toggleSettings(){this.saveStateDate=null,this.showSettings?(this.stopGenerating=!1,this.showSettings=!1,this.initItems(),this.selectedCount=0,this.isGroupedItemsView=!1,this.insertNextAmortizationItems(25)):(this.stopGenerating=!0,this.showSettings=!0)}clone(e){return JSON.parse(JSON.stringify(e))}initItems(){this.generator=new Ve({settings:{player:this.clone(this.playerSettings),planets:this.clone(this.planetSettings),astrophysics:this.clone(this.astrophysicsSettings),expeditions:this.clone(this.expeditionSettings),include:this.clone(this.includeSettings)},lifeformExperience:(0,A.a)(j.p3,(e=>(0,Y._Z)(this.playerSettings.lifeformLevels[e]))),serverSettings:this.clone(U.s.serverSettings),getMsuOrDsu:ie.B}),this.amortizationItems=[]}stopGenerating=!1;async insertNextAmortizationItems(e){if(null==this.generatingItemCount){this.generatingItemCount={total:e,count:0},await this.$nextTick();while(e>0){const t=this.generator?.nextItem();if(null==t||this.stopGenerating)break;this.amortizationItems.push({...t,selected:!1}),e--,this.generatingItemCount.count++,await this.$nextTick(),await(0,Ue.g)(10)}this.generatingItemCount=null}}initSettings(){const e=this.empire,t=U.s.serverSettings,o=B.V.settings;this.playerSettings={...this.playerSettings,lifeformLevels:(0,A.a)(j.p3,(e=>(0,Y.g4)(y.p.lifeformExperience[e]))),officers:{...e.officers},playerClass:e.playerClass,allianceClass:e.allianceClass,levelPlasmaTechnology:e.research[d.s.plasmaTechnology],levelAstrophysics:e.research[d.s.astrophysics]},this.planetSettings=Object.values(e.planets).filter((e=>!e.isMoon)).reduce(((t,o)=>{const s={include:!0,id:o.id,name:o.name,maxTemperature:o.maxTemperature,coordinates:o.coordinates,position:o.coordinates.position,mines:{metalMine:o.buildings[l.A.metalMine],crystalMine:o.buildings[l.A.crystalMine],deuteriumSynthesizer:o.buildings[l.A.deuteriumSynthesizer]},activeItems:Object.keys(o.activeItems),crawlers:{percentage:o.productionSettings[u.g.crawler],count:o.ships[u.g.crawler],max:e.playerClass==a.D0.collector},lifeform:o.activeLifeform,activeLifeformTechnologies:[...o.activeLifeformTechnologies],ignoreEmptyLifeformTechnologySlots:!1,lifeformTechnologyLevels:{...o.lifeformTechnologies},lifeformBuildingLevels:{...o.lifeformBuildings}};return t[o.id]=s,t}),{});const s=t.lifeforms.enabled?j.e5.rocktal:j.e5.none;this.astrophysicsSettings={...this.astrophysicsSettings,lifeform:s,activeLifeformTechnologies:[...C.dY[s]],name:this.$i18n.$t.extension.empire.amortization.settings.astrophysicsSettings.newColony,crawlers:{percentage:e.playerClass==a.D0.collector?150:100,count:0,max:e.playerClass==a.D0.collector}};const i=Object.keys(Object.values(e.planets)[0].activeItems),n=L((0,A.a)(i,(e=>"permanent"))),r=Array.from({length:7}).map(((e,t)=>(0,Ne.Z)(He(),t+1).getTime())),c=r.map((e=>je.m.dailyResults[e])).map((e=>null==e?0:Object.values(e.events).reduce(((e,t)=>e+t),0))).filter((e=>e>0)),m=c.reduce(((e,t)=>e+t),0)/Math.max(1,c.length),g={topScore:t.topScore??100000001,economySpeed:t.speed.economy,discovererExpeditionBonus:t.playerClasses.discoverer.expeditions.outcomeFactorBonus,discovererExpeditionSlotBonus:t.playerClasses.discoverer.bonusExpeditionSlots},p=(0,A.a)(j.p3,(e=>(0,Y._Z)(this.playerSettings.lifeformLevels[e])));this.expoBreakdown=new be({playerClass:this.playerSettings.playerClass,admiral:this.playerSettings.officers.admiral,astrophysicsLevel:this.playerSettings.levelAstrophysics,itemBonusSlots:n,fleetFindsResourceFactors:{metal:o.expeditionFoundShipsResourceUnits.factor,crystal:o.expeditionFoundShipsResourceUnits.factor,deuterium:o.expeditionFoundShipsResourceUnits.deuteriumFactor},serverSettings:g,planets:(0,A.r)(Object.values(this.planetSettings),(e=>e.id),(e=>Pe(ke(e,t,p))))});const f=Math.round(10*m/this.expoBreakdown.slots)/10;this.expeditionSettings={items:i,wavesPerDay:f,fleetUnitsFactors:{metal:o.expeditionFoundShipsResourceUnits.factor,crystal:o.expeditionFoundShipsResourceUnits.factor,deuterium:o.expeditionFoundShipsResourceUnits.deuteriumFactor},serverSettings:g}}get columns(){const e=B.V.settings.showCellsWithConvertedResourceUnits,t=[{key:"checkbox",size:"auto"},{key:"what",size:"auto"},{key:"cost",size:"3fr"}];return e&&t.push({key:"costConverted",label:`${this.$i18n.$t.extension.empire.amortization.table.cost} (${"msu"==B.V.settings.conversionRates.mode?this.$i18n.$t.extension.common.msu:this.$i18n.$t.extension.common.dsu})`,size:"1fr"}),t.push({key:"productionDelta",label:this.$i18n.$t.extension.empire.amortization.table.productionPlus,size:"1fr"}),e&&t.push({key:"productionDeltaConverted",label:`${this.$i18n.$t.extension.empire.amortization.table.productionPlus} (${"msu"==B.V.settings.conversionRates.mode?this.$i18n.$t.extension.common.msu:this.$i18n.$t.extension.common.dsu})`,size:"1fr"}),t.push({key:"timeInHours",label:this.$i18n.$t.extension.empire.amortization.table.amortizationTime,size:"1fr"}),t}get items(){return this.amortizationItems}get footerItems(){let e={metal:0,crystal:0,deuterium:0,energy:0},t={metal:0,crystal:0,deuterium:0,energy:0},o=0;return this.amortizationItems.filter((e=>e.selected)).forEach((s=>{e=(0,c.aV)(e,s.cost),t=(0,c.aV)(t,s.productionDelta),o+=s.productionDeltaConverted})),[{cost:e,costConverted:(0,ie.B)(e),productionDelta:t,productionDeltaConverted:o,timeInHours:0}]}formatCoordinates(e){return`[${e.galaxy}:${e.system}:${e.position}]`}cellClassProvider(e,t){const o=[];switch(t.type){case"astrophysics-and-colony":o.push("astrophysics-cell");break;case"plasma-technology":o.push("plasmatech-cell");break;default:break}return o.join(" ")}toggleItemSelection(e,t,o){if(null==e||null==t){const e=this.selectedCount==this.amortizationItems.length;return this.selectedCount=e?0:this.amortizationItems.length,void this.amortizationItems.forEach((t=>t.selected=!e))}const s=!e.selected,i=o?0:t,n=t;for(let l=i;l<=n;l++){const e=this.amortizationItems[l];!s&&e.selected?(e.selected=!1,this.selectedCount--):s&&!e.selected&&(e.selected=!0,this.selectedCount++)}}deselectAllPlanets(){Object.values(this.planetSettings).forEach((e=>e.include=!1))}getAdditionalLifeformStuffGroups(e){const t=[],o={};return e.forEach((e=>{const s="building"in e?e.building:e.technology;let i=o[s];null==i&&(i=o[s]={items:[],planetIds:new Set,building:"building"in e?e.building:void 0,technology:"technology"in e?e.technology:void 0,totalLevels:0},t.push(i)),i.planetIds.add(e.planetId),i.items.push(e),i.totalLevels+=e.levels.to-e.levels.from+1})),t}showAmotizationGroup={};toggleAmortizationGroup(e){null==this.showAmotizationGroup[e]?this.$set(this.showAmotizationGroup,e,!0):this.showAmotizationGroup[e]=!this.showAmotizationGroup[e]}isGroupedItemsView=!1;groupedItems={};showGroupedItems(){this.groupedItems=this.amortizationItems.filter((e=>e.selected)).reduce(((e,t)=>{const o=t=>e[t]??={type:"planet-item",planetId:t,astrophysicsLevels:[],mines:(0,A.a)(this.mineBuildingTypes,(e=>[])),lifeformBuildings:(0,A.a)(v.YS,(e=>[])),lifeformTechnologies:(0,A.a)(C.Vs,(e=>[]))},s=e=>"number"===typeof e?Array.from({length:e}).map(((e,t)=>t+1)):Array.from({length:e.to-e.from+1}).map(((t,o)=>e.from+o));switch(t.type){case"plasma-technology":{const i=e.plasmaTechnology??={type:"plasma-technology",levels:[]};return i.levels.push(t.level),t.additionalLifeformStuff.forEach((e=>{const t=o(e.planetId),i=s(e.levels);"building"in e?t.lifeformBuildings[e.building].push(...i):t.lifeformTechnologies[e.technology].push(...i)})),e}case"mine":{const i=o(t.planetId);return i.mines[t.mine].push(t.level),t.additionalLifeformBuildings.forEach((e=>{const t=s(e.levels);i.lifeformBuildings[e.building].push(...t)})),e}case"astrophysics-and-colony":{const i=o(t.newPlanetId);return this.mineBuildingTypes.forEach((e=>{const o=s(t.builtLevels.mines[e]);i.mines[e].push(...o)})),v.YS.forEach((e=>{const o=s(t.builtLevels.lifeformBuildings[e]);i.lifeformBuildings[e].push(...o)})),C.Vs.forEach((e=>{const o=s(t.builtLevels.lifeformTechnologies[e]);i.lifeformTechnologies[e].push(...o)})),i.astrophysicsLevels.push(...t.levels),e}case"lifeform-building":{const i=o(t.planetId);return i.lifeformBuildings[t.building].push(t.level),t.additionalLifeformBuildings.forEach((e=>{const t=s(e.levels);i.lifeformBuildings[e.building].push(...t)})),e}case"lifeform-technology":{const i=o(t.planetId);return i.lifeformTechnologies[t.technology].push(t.level),t.additionalLifeformBuildings.forEach((e=>{const t=s(e.levels);i.lifeformBuildings[e.building].push(...t)})),e}default:(0,R.A)("invalid type")}}),{}),this.isGroupedItemsView=!0}get groupedItemsSorted(){const e=this.planetSettingsSorted.map((e=>this.groupedItems[e.id])).filter((e=>null!=e));return null!=this.groupedItems.plasmaTechnology&&e.unshift(this.groupedItems.plasmaTechnology),Object.keys(this.groupedItems).map((e=>parseInt(e))).filter((e=>e<0)).forEach((t=>{e.push(this.groupedItems[t])})),e}showNormalItems(){this.isGroupedItemsView=!1,this.groupedItems={}}deselectAllItems(){this.planetSettingsSorted.forEach((e=>e.activeItems=[]))}ignoreAllInactiveSlots(){this.planetSettingsSorted.forEach((e=>e.ignoreEmptyLifeformTechnologySlots=!0))}};(0,n.gn)([(0,m.RL)("playerSettings.playerClass")],Ze.prototype,"onPlayerClassSelectionChanged",null),Ze=(0,n.gn)([(0,m.wA)({components:{AmortizationPlanetSettingsInputs:g.Z,AmortizationPlayerSettingsInputs:p.Z,AmortizationGroupedItemTable:P,AmortizationExpeditionSettingsInputs:V,ShowConvertedResourcesInCellsSettings:O.Z}})],Ze);const qe=Ze,Ye=qe;var Je=(0,_.Z)(Ye,s,i,!1,null,"6582236e",null);const Qe=Je.exports},7349:(e,t,o)=>{o.d(t,{Z:()=>l});var s=o(3946),i=o(9013),n=o(3882);function l(e,t){(0,n.Z)(2,arguments);var o=(0,i.Z)(e),l=(0,s.Z)(t);return isNaN(l)?new Date(NaN):l?(o.setDate(o.getDate()+l),o):o}},5347:(e,t,o)=>{o.d(t,{Z:()=>l});var s=o(3946),i=o(7349),n=o(3882);function l(e,t){(0,n.Z)(2,arguments);var o=(0,s.Z)(t);return(0,i.Z)(e,-o)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,