"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[8422],{4263:(e,t,i)=>{var a;i.d(t,{O:()=>s}),function(e){e[e["total"]=0]="total",e[e["economy"]=1]="economy",e[e["research"]=2]="research",e[e["militaryAndNumberOfShips"]=3]="militaryAndNumberOfShips",e[e["militaryLost"]=4]="militaryLost",e[e["militaryBuilt"]=5]="militaryBuilt",e[e["militaryDestroyed"]=6]="militaryDestroyed",e[e["honor"]=7]="honor",e[e["lifeform"]=8]="lifeform",e[e["lifeformEconomy"]=9]="lifeformEconomy",e[e["lifeformTechnology"]=10]="lifeformTechnology",e[e["lifeformDiscoveries"]=11]="lifeformDiscoveries"}(a||(a={}));const s=["total","economy","research","military","militaryBuilt","militaryDestroyed","militaryLost","honor","numberOfShips","lifeform","lifeformEconomy","lifeformTechnology","lifeformDiscoveries"]},5593:(e,t,i)=>{i.d(t,{D:()=>m});var a=i(655),s=i(3768),l=i(4384),n=i(1936);function r(e,t){const i={...e};return Object.keys(t).forEach((e=>{const a=t[e];if(e in i){const t=i[e];if("object"===typeof t&&!(t instanceof Array))return void(i[e]=r(t,a))}i[e]=a})),i}const o={universeHistory:{alliances:{highscore:[]},players:{highscore:[]}}};async function c(e){const t=await(0,l._N)(e),i=r(o,await t.get("universeSpecificSettings",0)??{});return i}var h=i(3654),d=i(4028),u=i(8717);let y=class extends d.w3{settings=null;_ready;_resolveReady;updateSettings(e){console.debug("updating universe specific settings",e),this.settings=e,(async()=>{const t=await(0,l._N)(u.l);await t.put("universeSpecificSettings",e,0);const i={ogameMeta:u.l,senderUuid:u.g,type:n.C.NotifyUniverseSpecificSettingsUpdate};await(0,s.p)(i)})()}get ready(){return this._ready}async created(){this._ready=new Promise((e=>this._resolveReady=e)),this.initCommunication(),await this.loadData()}initCommunication(){chrome.runtime.onMessage.addListener((async e=>await this.onMessage(e)))}async loadData(){this.settings=await c(u.l),this._resolveReady()}async onMessage(e){const{type:t,ogameMeta:i}=e;if((0,h.i)(i,u.l)&&e.senderUuid!=u.g)switch(t){case n.C.NotifyUniverseSpecificSettingsUpdate:await this.loadData();break}}};y=(0,a.gn)([d.wA],y);const m=new y},8422:(e,t,i)=>{i.r(t),i.d(t,{default:()=>$});var a=function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("div",{staticClass:"highscores"},[e.dataModuleLoading?i("loading-spinner"):[i("grid-table",{staticClass:"alliance-selection-table",attrs:{columns:e.tableColumns,items:e.tableItems},scopedSlots:e._u([{key:"cell-alliance",fn:function(t){var a=t.value;return[null==a?[i("input",{directives:[{name:"model",rawName:"v-model",value:e.selectedAllianceName,expression:"selectedAllianceName"}],staticStyle:{width:"100%"},attrs:{type:"text",placeholder:e.$i18n.$t.extension.universeHistory.allianceSelection.search,list:"alliance-list"},domProps:{value:e.selectedAllianceName},on:{change:function(t){return e.onAllianceSelected(t.target.value)},input:function(t){t.target.composing||(e.selectedAllianceName=t.target.value)}}}),i("datalist",{attrs:{id:"alliance-list"}},e._l(e.allianceNames,(function(t,a){return i("option",{key:a},[e._v(" "+e._s(t)+" ")])})),0)]:i("div",{staticClass:"list-item"},[i("span",{staticClass:"mdi mdi-delete",on:{click:function(t){return e.removeAlliance(a.id)}}}),i("span",{domProps:{textContent:e._s(e.getAllianceString(a))}})])]}}])}),i("tabs",{attrs:{tabs:e.tabs}},[e._l(e.keys,(function(t){return[i("template",{slot:"tab-content-"+t},[e.allianceScoresLoading?i("span",{key:"score-"+t+"-loading",staticClass:"loading"}):e.allianceIds.length>0?i("scrollable-chart",{key:"score-"+t,attrs:{datasets:e.scoreDatasets[t],"continue-last-value":"","show-x-values-in-grid":"","tick-interval":864e5,ticks:30,"tick-list":e.days,"min-tick":e.firstDay,"max-tick":e.nextDay,"x-label-formatter":function(t){return e.$i18n.$d(t,"date")},"x-label-tooltip-formatter":function(t){return e.$i18n.$d(t,"datetime")}}}):e._e()],1)]}))],2)]],2)},s=[],l=i(655),n=i(4263),r=i(9751),o=i(7545),c=i(6538),h=i(7076),d=i(5038),u=i(5593),y=i(7349),m=i(9119),g=i(4028);let f=class extends g.w3{colors=["#F48FB1","#673AB7","#E53935","#3F51B5","#006064","#546E7A","#EF9A9A","#64B5F6","#FFE082","#E91E63","#BA68C8","#BF360C","#039BE5","#8E24AA","#9CCC65","#A1887F","#0097A7","#FFAB91","#009688","#43A047","#1A237E","#558B2F","#311B92","#880E4F","#01579B","#AFB42B","#1E88E5","#827717","#FFF176","#BDBDBD","#FFC107","#FFA726","#FF5722","#795548","#004D40","#81C784","#90A4AE","#757575","#FDD835"];leftX=0;rightX=1;dataModuleLoading=!0;allianceScoresLoading=!0;selectedAllianceName="";scoreDatasets={};firstDay=0;keys=n.O;get tabs(){const e=[{key:"total",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.total},{key:"economy",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.economy},{key:"research",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.research},{key:"military",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.military},{key:"militaryBuilt",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.militaryBuilt},{key:"militaryDestroyed",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.militaryDestroyed},{key:"militaryLost",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.militaryLost},{key:"honor",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.honor},{key:"numberOfShips",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.numberOfShips}];return h.s.serverSettings.lifeforms.enabled&&e.push({key:"lifeform",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.lifeform},{key:"lifeformEconomy",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.lifeformEconomy},{key:"lifeformTechnology",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.lifeformTechnology},{key:"lifeformDiscoveries",label:this.$i18n.$t.extension.universeHistory.highscoreTabs.lifeformDiscoveries}),e}get tableColumns(){return[{key:"alliance",label:this.$i18n.$t.extension.universeHistory.allianceSelection.header,headerClass:"alliance-selection-table-cell",class:"alliance-selection-table-cell"}]}get tableItems(){return[{alliance:null},...this.selectedAlliances.map((e=>({alliance:e})))]}get allianceIds(){return(this.$route.query.alliances??"").split(",").filter((e=>e.length>0)).map((e=>(0,o.Y)(e,10)))}async mounted(){await u.D.ready,await this.redirectToDefault(),this.dataModuleLoading=!0,await d.z.ready,this.dataModuleLoading=!1,await this.loadAllianceScores()}async redirectToDefault(){if(0!=this.allianceIds.length)return;const e=u.D.settings.universeHistory.alliances.highscore;0!=e.length&&await this.updateAllianceIdRoute(e)}async loadAllianceScores(){this.allianceScoresLoading=!0,this.scoreDatasets={};const e={};this.allianceIds.forEach((t=>e[t]={})),this.keys.forEach((t=>{this.scoreDatasets[t]=[],this.allianceIds.forEach(((i,a)=>e[i][t]={key:`${i}-${t}`,values:[],color:this.colors[a%this.colors.length],label:this.getAllianceString(this.alliances.find((e=>e.id==i))??(0,c.A)(`no alliance with id '${i}' found`)),filled:!1,stack:!1,hidePoints:!1}))}));let t=Number.MAX_SAFE_INTEGER;const i=await d.z.getAllianceScoreHistory(this.allianceIds),a=n.O,s=(0,r.a)(this.allianceIds,(()=>(0,r.a)(a,null)));i.forEach(((i,l)=>{t=Math.min(t,i.date),s[i.allianceId][i.type]!=i.score&&a.includes(i.type)&&(e[i.allianceId][i.type].values.push({x:i.date,y:i.score}),s[i.allianceId][i.type]=i.score)})),this.keys.forEach((t=>{this.allianceIds.forEach((i=>{this.scoreDatasets[t].push(e[i][t])}))})),this.firstDay=(0,m.Z)(t).getTime(),this.allianceScoresLoading=!1}get nextDay(){return(0,y.Z)((0,m.Z)(Date.now()),1).getTime()}get days(){const e=[],t=this.nextDay;for(let i=this.firstDay;i<=t;i=(0,y.Z)(i,1).getTime())e.push(i);return e}get alliances(){return d.z.alliances}getAllianceString(e){return`[${e.tag}] ${e.name}`}get allianceNames(){return this.alliances.map((e=>this.getAllianceString(e))).sort()}get selectedAlliances(){return this.allianceIds.map((e=>this.alliances.find((t=>t.id==e))))}async onAllianceSelected(e){const t=this.alliances.find((t=>this.getAllianceString(t).toLowerCase()==e.toLowerCase()));if(null==t)return;await this.$nextTick(),this.selectedAllianceName="";const i=this.$route.query.alliances?.split(",")??[];await this.updateAllianceIdRoute([...i.filter((e=>e!=t.id.toString())),t.id]),await this.loadAllianceScores()}async removeAlliance(e){await this.updateAllianceIdRoute(this.allianceIds.filter((t=>t!=e))),await this.loadAllianceScores()}updateSettings(e){const t=u.D.settings;u.D.updateSettings({...t,universeHistory:{...t.universeHistory,alliances:{...t.universeHistory.alliances,highscore:e}}})}async updateAllianceIdRoute(e){this.updateSettings(e.map((e=>"string"===typeof e?(0,o.Y)(e,10):e))),await this.$router.replace({query:{alliances:e.join(",")}})}};f=(0,l.gn)([(0,g.wA)({})],f);const p=f,v=p;var b=i(1001),A=(0,b.Z)(v,a,s,!1,null,"7f9197cf",null);const $=A.exports},7349:(e,t,i)=>{i.d(t,{Z:()=>n});var a=i(3946),s=i(9013),l=i(3882);function n(e,t){(0,l.Z)(2,arguments);var i=(0,s.Z)(e),n=(0,a.Z)(t);return isNaN(n)?new Date(NaN):n?(i.setDate(i.getDate()+n),i):i}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,