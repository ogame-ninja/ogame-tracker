"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[7689],{7689:(e,t,a)=>{a.r(t),a.d(t,{default:()=>b});var s=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",[a("h2",[e._v(e._s(e.$i18n.$t.extension.donate.subHeader))]),a("div",{staticClass:"fake-table kofi-table"},[a("div",{staticClass:"fake-table-header"},[a("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.donate.kofi.header)}})]),a("div",{staticClass:"fake-table-body",staticStyle:{"justify-items":"center"}},[a("a",{staticClass:"donate-button",attrs:{href:e.kofiLink,target:"_blank",rel:"noreferrer noopener"}},[a("img",{attrs:{src:"/img/extern/kofi-logo.svg"}}),e._v(" "+e._s(e.$i18n.$t.extension.donate.kofi.buttonText)+" ")]),a("small",{domProps:{textContent:e._s(e.$i18n.$t.extension.donate.kofi.message)}})])])])},n=[],o=a(655),i=a(4028),r=a(8540);let l=class extends i.w3{kofiLink=r.m.kofiLink};l=(0,o.gn)([(0,i.wA)({})],l);const k=l,c=k;var d=a(1001),f=(0,d.Z)(c,s,n,!1,null,"4becbc9a",null);const b=f.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,