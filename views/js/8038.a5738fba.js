"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[8038],{7622:()=>{},4840:(e,t,s)=>{s(7622)},7238:(e,t,s)=>{s.d(t,{Z:()=>n});var a=s(2528);const n=a.Z},2528:(e,t,s)=>{s.d(t,{Z:()=>r});var a=s(655),n=s(4028);let o=class extends n.w3{size};(0,a.gn)([(0,n.fI)({required:!1,type:String,default:"32px"})],o.prototype,"size",void 0),o=(0,a.gn)([(0,n.wA)({})],o);const r=o},8958:(e,t,s)=>{s.d(t,{Z:()=>l});var a=s(1120),n=s(7238),o=(s(4840),s(1001)),r=(0,o.Z)(n.Z,a.s,a.x,!1,null,"058bdb72",null);const l=r.exports},4310:(e,t,s)=>{s.d(t,{Z:()=>b});var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("grid-table",{staticClass:"ranged-stats-table",attrs:{columns:e.columns,items:e.rows,"footer-items":e.footerRows,"cell-class-provider":function(t){return e.getCellClass(t)}},scopedSlots:e._u([e._l(e.columns,(function(t,a){return{key:"cell-"+t.key,fn:function(n){var o=n.value,r=n.item;return[s("span",{key:t.key,staticClass:"ranged-stats-table-cell"},["label"==t.key?[null!=t.slotName&&null!=e.$scopedSlots[t.slotName]?e._t(t.slotName,null,{value:o}):s("span",{key:a,domProps:{textContent:e._s(o)}})]:"subLabel"==t.key?e._l(r.items,(function(a,n){return s("span",{key:n,class:a.labelClass},[null!=t.slotName&&null!=e.$scopedSlots[t.slotName]?e._t(t.slotName,null,{value:a.label}):s("span",{domProps:{textContent:e._s(a.label)}})],2)})):e._l(r.items||[r],(function(a,n){return s("span",{key:n,class:[e.getCellClass(a[t.key]),a.class]},[null!=t.formatter?s("span",{domProps:{textContent:e._s(t.formatter(a[t.key]))}}):s("span",{domProps:{textContent:e._s(a[t.key])}})])}))],2)]}}})),e._l(e.$scopedSlots,(function(t,s){return{key:s,fn:function(t){return[e._t(s,null,null,t)]}}}))],null,!0)})},n=[],o=s(655),r=s(4028),l=s(9858),i=s(6538),u=s(4749),d=s.n(u),m=s(917);let c=class extends r.w3{showPercentage;showAverage;items;footerItems;numberFormatOptions;averageNumberFormatOptions;dataItems;get hasGroupedItems(){return this.items.some((e=>"items"in e))}get dateRanges(){return m.V.settings.dateRanges}get dataItemsByRange(){const e=this.dataItems,t=this.dateRanges.map((()=>[]));return e.forEach((e=>{this.dateRanges.forEach(((s,a)=>{(0,l.m)(e.date,s)&&t[a].push(e)}))})),t}get firstDay(){return this.dataItemsByRange.reduce(((e,t)=>Math.min(e,Math.min(...t.map((e=>e.date))))),Date.now())}get columns(){const e=[{key:"label",label:"",slotName:"label"}];return this.hasGroupedItems&&e.push({key:"subLabel",label:"",slotName:"subLabel"}),e.push(...this.dateRanges.map(((e,t)=>({key:t,label:e.label??this.$i18n.$t.extension.settings.dateRanges.since(this.$i18n.$d(this.firstDay,"date")),formatter:e=>this.$i18n.$n(e,this.numberFormatOptions)})))),this.showAverage&&e.push({key:"average",label:this.$i18n.$t.extension.common.averagePerDay,formatter:e=>this.$i18n.$n(e,this.averageNumberFormatOptions??this.numberFormatOptions)}),this.showPercentage&&e.push({key:"percentage",label:"%",formatter:e=>""!=e?this.$i18n.$n(e,{minimumFractionDigits:3,maximumFractionDigits:3}):e}),e}get rows(){const e=this.dataItemsByRange,t=this.dateRanges.findIndex((e=>"all"==e.type))??(0,i.A)("failed to find range 'all'"),s=e[t].map((e=>d()(e.date).getTime())),a=new Set(s).size,n=Math.max(1,this.items.map((s=>"getValue"in s?s.getValue(e[t]):s.items.reduce(((s,a)=>s+a.getValue(e[t])),0))).reduce(((e,t)=>e+t),0));return this.items.map((s=>this.mapItemToRow(s,e,t,a,n)))}mapItemToRow(e,t,s,a,n){if("getValue"in e){const o={label:e.label,class:e.class,labelClass:e.labelClass,...this.dateRanges.map(((s,a)=>e.getValue(t[a])))},r=o[s];return this.showAverage&&(o.average=r/Math.max(1,a)),this.showPercentage&&(o.percentage=100*r/n),o}return{label:e.label,items:e.items.map((e=>this.mapItemToRow(e,t,s,a,n)))}}get footerRows(){const e=this.dataItemsByRange,t=this.dateRanges.findIndex((e=>"all"==e.type))??(0,i.A)("failed to find range 'all'"),s=e[t].map((e=>d()(e.date).getTime())),a=new Set(s).size;return this.footerItems.map((s=>{const n={label:s.label,...this.dateRanges.map(((t,a)=>"getValue"in s?s.getValue(e[a]):s.items.reduce(((t,s)=>t+s.getValue(e[a])),0))),percentage:""};if(this.showAverage){const e=n[t];n.average=e/Math.max(1,a)}return n}))}getCellClass(e){return 0==e?"fade-value":""}};(0,o.gn)([(0,r.fI)({required:!1,type:Boolean})],c.prototype,"showPercentage",void 0),(0,o.gn)([(0,r.fI)({required:!1,type:Boolean})],c.prototype,"showAverage",void 0),(0,o.gn)([(0,r.fI)({required:!0,type:Array})],c.prototype,"items",void 0),(0,o.gn)([(0,r.fI)({required:!1,type:Array,default:()=>[]})],c.prototype,"footerItems",void 0),(0,o.gn)([(0,r.fI)({required:!1,type:Object,default:void 0})],c.prototype,"numberFormatOptions",void 0),(0,o.gn)([(0,r.fI)({required:!1,type:Object,default:void 0})],c.prototype,"averageNumberFormatOptions",void 0),(0,o.gn)([(0,r.fI)({required:!0,type:Array})],c.prototype,"dataItems",void 0),c=(0,o.gn)([(0,r.wA)({})],c);const p=c,g=p;var f=s(1001),h=(0,f.Z)(g,a,n,!1,null,"1526beca",null);const b=h.exports},1233:(e,t,s)=>{s.r(t),s.d(t,{default:()=>w});var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"table-container"},[s("ranged-stats-table",{attrs:{dataItems:e.expos,items:e.items,footerItems:e.footerItems,"show-percentage":"","show-average":"",averageNumberFormatOptions:e.avgFormat},scopedSlots:e._u([{key:"cell-label",fn:function(t){var a=t.value;return[s("span",{staticClass:"mr-2",domProps:{textContent:e._s(a)}}),s("span",{staticClass:"mdi",class:{unknown:"mdi-help",none:"mdi-signal-cellular-outline",low:"mdi-signal-cellular-1",medium:"mdi-signal-cellular-2",high:"mdi-signal-cellular-3"}[e.depletionLevelsByLabel[a]],style:{color:e.colors[e.depletionLevelsByLabel[a]]}})]}}])}),s("floating-menu",{attrs:{left:""},scopedSlots:e._u([{key:"activator",fn:function(){return[s("button",{on:{click:function(t){e.showSettings=!e.showSettings}}},[s("span",{staticClass:"mdi mdi-cog"})])]},proxy:!0}]),model:{value:e.showSettings,callback:function(t){e.showSettings=t},expression:"showSettings"}},[s("date-range-settings")],1)],1)},n=[],o=s(655),r=s(4028),l=s(4310),i=s(7090),u=s(917),d=s(4329),m=s(8958),c=s(1745),p=s(9751),g=s(6538);let f=class extends r.w3{showSettings=!1;avgFormat={minimumFractionDigits:1,maximumFractionDigits:1};get colors(){return u.V.settings.colors.expeditions.depletion}get expos(){return i.m.dailyResultsArray}depletionLevels=[...c.R,"unknown"];get items(){return this.depletionLevels.map((e=>({label:this.$i18n.$t.extension.expeditions.depletionLevels[e],getValue:t=>t.reduce(((t,s)=>t+s.depletion[e]),0)})))}get footerItems(){return[{label:this.$i18n.$t.extension.common.sum,getValue:e=>this.depletionLevels.reduce(((t,s)=>t+e.reduce(((e,t)=>e+t.depletion[s]),0)),0)}]}get depletionLevelsByLabel(){return(0,p.a)(this.depletionLevels.map((e=>this.$i18n.$t.extension.expeditions.depletionLevels[e])),(e=>this.depletionLevels.find((t=>e==this.$i18n.$t.extension.expeditions.depletionLevels[t]))??(0,g.A)(`failed to find depletion level for label '${e}'`)))}};f=(0,o.gn)([(0,r.wA)({components:{RangedStatsTable:l.Z,DateRangeSettings:d.Z,ExpeditionEventResourcesIcon:m.Z}})],f);const h=f,b=h;var v=s(1001),y=(0,v.Z)(b,a,n,!1,null,"4d087f94",null);const w=y.exports},1120:(e,t,s)=>{s.d(t,{s:()=>a,x:()=>n});var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("span",{staticClass:"tri-resource"},[s("o-resource",{attrs:{resource:"metal",size:e.size}}),s("o-resource",{attrs:{resource:"crystal",size:e.size}}),s("o-resource",{attrs:{resource:"deuterium",size:e.size}})],1)},n=[]},8734:(e,t)=>{function s(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=s,e.exports=t.default},4749:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var a=o(s(1171)),n=o(s(8734));function o(e){return e&&e.__esModule?e:{default:e}}function r(e){(0,n.default)(1,arguments);var t=(0,a.default)(e);return t.setHours(0,0,0,0),t}e.exports=t.default},1171:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=o;var a=n(s(8734));function n(e){return e&&e.__esModule?e:{default:e}}function o(e){(0,a.default)(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"===typeof e||"[object Number]"===t?new Date(e):("string"!==typeof e&&"[object String]"!==t||"undefined"===typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}e.exports=t.default}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,