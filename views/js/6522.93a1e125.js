"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[6522],{5483:(e,t,n)=>{n.d(t,{c:()=>c});var i=n(9751),o=n(147),s=n(3418),r=n(6119);function c(e){const t=Object.values(e.planets).filter((e=>!e.isMoon)),n=(0,i.a)(t.map((e=>e.id)),0),c=(0,i.a)(s.p3,(t=>(0,o.g1)(e.lifeformExperience[t])));for(const i of t){if(i.activeLifeform==s.e5.none)continue;const e=c[i.activeLifeform],t=r.cQ[i.activeLifeform],o=t.reduce(((e,t)=>{const n=i.lifeformBuildings[t.type],o=t.getLifeformTechnologyBonus(n);return e+o}),0),l=e+o;n[i.id]=l}return n}},147:(e,t,n)=>{n.d(t,{g1:()=>o,g4:()=>s,_Z:()=>r});const i=.001;function o(e){const t=s(e);return t*i}function s(e){for(let t=0;;t++){const n=r(t+1);if(n>e)return t}}function r(e){return 900*e*(e+1)/2}},3497:(e,t,n)=>{n.r(t),n.d(t,{default:()=>k});var i=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("lifeform-planet-bonuses-component",{attrs:{technologyBonuses:e.technologyBonuses,types:e.bonusTypes,buildings:e.buildings,planets:e.planets,limits:e.limits,"research-bonus-breakdown-route-name":"lifeforms/bonus-breakdown/research-cost-time"}})},o=[],s=n(655),r=n(4028),c=n(2593),l=n(7848),a=n(7377),u=n(2816),f=n(6119),m=n(9751),p=n(8395),h=n(4846),g=n(5483),d=n(9681);let b=class extends r.w3{get bonusTypes(){return[{key:"cost",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.buildingCostTime.cost},{key:"time",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.buildingCostTime.time}]}buildings=f.ax.map((e=>e.type));get limits(){const e=d.Nw.intergalacticEnvoys,t=(0,l.K)({type:a.f.TechCostReduction,tech:e}),n=(0,l.K)({type:a.f.TechTimeReduction,tech:e});return{cost:e=>null!=t?Math.max(e,-t):e,time:e=>null!=n?Math.max(e,-n):e}}techs=h.LN;get technologyBonuses(){const e=d.Nw.intergalacticEnvoys,t=["cost","time"],n=(0,m.a)(t,(()=>0)),i=(0,g.c)(p.p.empire);return this.empirePlanets.forEach((o=>{this.techs.filter((e=>o.activeLifeformTechnologies.includes(e.type))).forEach((s=>t.forEach((t=>{const r=s.getResearchCostAndTimeReduction(e,o.lifeformTechnologies[s.type])[t],c=i[o.id];n[t]+=-1*r*(1+c)}))))})),n}get empirePlanets(){return p.p.empire.planetOrder.map((e=>p.p.empire.planets[e])).filter((e=>!e.isMoon))}get planets(){return(0,m.r)(this.empirePlanets,(e=>e.id),(e=>{const t=u.IU[e.activeLifeform].filter((e=>this.buildings.includes(e))),n=(0,m.a)(["cost","time"],(n=>(0,m.a)(t,(t=>-1*f.ry[t].getLifeformTechnologyResearchCostAndTimeReduction(e.lifeformBuildings[t])[n]))));return{planet:e,bonusByBuilding:n}}))}};b=(0,s.gn)([(0,r.wA)({components:{LifeformPlanetBonusesComponent:c.Z}})],b);const y=b,T=y;var v=n(1001),B=(0,v.Z)(T,i,o,!1,null,null,null);const k=B.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,