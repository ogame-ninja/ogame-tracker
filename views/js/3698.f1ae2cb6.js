"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[3698],{8288:(e,t,s)=>{s.d(t,{B:()=>r});var n=s(7331),a=s(917);function r(e,t={}){const s={metal:0,crystal:0,deuterium:0,...e},r={metal:1,crystal:1,deuterium:1,...t};n.P.forEach((e=>s[e]*=r[e]));const{mode:o,msu:i,dsu:u}=a.V.settings.conversionRates;return"msu"==o?s.metal+s.crystal*i.crystal+s.deuterium*i.deuterium:s.deuterium+s.crystal/u.crystal+s.metal/u.metal}},9027:(e,t,s)=>{s.d(t,{Z:()=>p});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.combats.ignoreEspionageCombats.title)}})]),s("div",{staticClass:"fake-table-body"},[s("checkbox",{attrs:{value:e.ignoreEspionageCombats,label:e.$i18n.$t.extension.settings.combats.ignoreEspionageCombats.label},on:{input:function(t){return e.setIgnoreEspionageCombats(t)}}})],1)])},a=[],r=s(655),o=s(4028),i=s(917);let u=class extends o.w3{get ignoreEspionageCombats(){return i.V.settings.combatTracking.ignoreEspionageFights}setIgnoreEspionageCombats(e){i.V.updateSettings({...i.V.settings,combatTracking:{ignoreEspionageFights:e}})}};u=(0,r.gn)([(0,o.wA)({})],u);const l=u,c=l;var m=s(1001),d=(0,m.Z)(c,n,a,!1,null,"3b222f56",null);const p=d.exports},6597:(e,t,s)=>{s.d(t,{Z:()=>p});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"conversion-rate-settings fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.title)}})]),s("div",{staticClass:"fake-table-body"},[s("select",{domProps:{value:e.conversionMode},on:{input:function(t){return e.setConversionMode(t.target.value)}}},[s("option",{attrs:{value:"msu"},domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.msuLong+" ("+e.$i18n.$t.extension.common.msu+")")}}),s("option",{attrs:{value:"dsu"},domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.dsuLong+" ("+e.$i18n.$t.extension.common.dsu+")")}})]),"msu"==e.conversionMode?s("span",{staticClass:"inputs"},[s("span",[s("o-resource",{attrs:{resource:"crystal"}}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.msu.crystal,expression:"msu.crystal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"1",max:"3",step:"0.01"},domProps:{value:e.msu.crystal},on:{change:[function(t){e.$set(e.msu,"crystal",e._n(t.target.value))},function(t){return e.updateMsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("o-resource",{attrs:{resource:"metal"}})],1),s("span",[s("o-resource",{attrs:{resource:"deuterium"}}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.msu.deuterium,expression:"msu.deuterium",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"2",max:"5",step:"0.01"},domProps:{value:e.msu.deuterium},on:{change:[function(t){e.$set(e.msu,"deuterium",e._n(t.target.value))},function(t){return e.updateMsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("o-resource",{attrs:{resource:"metal"}})],1)]):s("span",{staticClass:"inputs"},[s("span",[s("o-resource",{attrs:{resource:"metal"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.dsu.metal,expression:"dsu.metal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"2",max:"5",step:"0.01"},domProps:{value:e.dsu.metal},on:{change:[function(t){e.$set(e.dsu,"metal",e._n(t.target.value))},function(t){return e.updateDsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("o-resource",{attrs:{resource:"deuterium"}})],1),s("span",[s("o-resource",{attrs:{resource:"crystal"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.dsu.crystal,expression:"dsu.crystal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"1",max:"3",step:"0.01"},domProps:{value:e.dsu.crystal},on:{change:[function(t){e.$set(e.dsu,"crystal",e._n(t.target.value))},function(t){return e.updateDsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("o-resource",{attrs:{resource:"deuterium"}})],1)])])])},a=[],r=s(655),o=s(4028),i=s(917);let u=class extends o.w3{msu={crystal:2,deuterium:3};dsu={metal:3,crystal:2};get msuRates(){return i.V.settings.conversionRates.msu}get dsuRates(){return i.V.settings.conversionRates.dsu}get conversionMode(){return i.V.settings.conversionRates.mode}setConversionMode(e){i.V.updateSettings({...i.V.settings,conversionRates:{...i.V.settings.conversionRates,mode:e}})}onMsuRatesChanged(){const{crystal:e,deuterium:t}=this.msuRates;this.msu.crystal=e,this.msu.deuterium=t}updateMsuConversionRates(){i.V.updateSettings({...i.V.settings,conversionRates:{...i.V.settings.conversionRates,msu:this.msu}})}onDsuRatesChanged(){const{crystal:e,metal:t}=this.dsuRates;this.dsu.crystal=e,this.dsu.metal=t}updateDsuConversionRates(){i.V.updateSettings({...i.V.settings,conversionRates:{...i.V.settings.conversionRates,dsu:this.dsu}})}};(0,r.gn)([(0,o.RL)("msuRates",{immediate:!0})],u.prototype,"onMsuRatesChanged",null),(0,r.gn)([(0,o.RL)("dsuRates",{immediate:!0})],u.prototype,"onDsuRatesChanged",null),u=(0,r.gn)([(0,o.wA)({})],u);const l=u,c=l;var m=s(1001),d=(0,m.Z)(c,n,a,!1,null,"13cde7dd",null);const p=d.exports},2546:(e,t,s)=>{s.d(t,{Z:()=>p});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table expedition-ship-resource-units-factor-settings"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.combats.resourceUnitFactorsOfLostShips)}})]),s("div",{staticClass:"fake-table-body"},[s("span",{staticClass:"inputs"},[s("span",[s("span",{staticClass:"two-resources"},[s("o-resource",{attrs:{resource:"metal"}}),s("o-resource",{attrs:{resource:"crystal"}})],1),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.factor,expression:"factor",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"0",max:"1",step:"0.01"},domProps:{value:e.factor},on:{change:[function(t){e.factor=e._n(t.target.value)},function(t){return e.updateFactors()}],focus:function(t){e.isFocused=!0},blur:[function(t){return e.onBlur()},function(t){return e.$forceUpdate()}]}})]),s("span",[s("o-resource",{attrs:{resource:"deuterium"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.deuteriumFactor,expression:"deuteriumFactor",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"0",max:"1",step:"0.01"},domProps:{value:e.deuteriumFactor},on:{change:[function(t){e.deuteriumFactor=e._n(t.target.value)},function(t){return e.updateFactors()}],focus:function(t){e.isFocused=!0},blur:[function(t){return e.onBlur()},function(t){return e.$forceUpdate()}]}})],1)])])])},a=[],r=s(655),o=s(4028),i=s(917);let u=class extends o.w3{factor=1;deuteriumFactor=1;isFocused=!1;get factors(){return i.V.settings.lostShipsResourceUnits}onFactorsChanged(){const{factor:e,deuteriumFactor:t}=this.factors;this.isFocused||(this.factor=e,this.deuteriumFactor=t)}updateFactors(){i.V.updateSettings({...i.V.settings,lostShipsResourceUnits:{factor:this.factor,deuteriumFactor:this.deuteriumFactor}})}onBlur(){this.isFocused=!1,this.onFactorsChanged()}};(0,r.gn)([(0,o.RL)("factors",{immediate:!0})],u.prototype,"onFactorsChanged",null),u=(0,r.gn)([(0,o.wA)({})],u);const l=u,c=l;var m=s(1001),d=(0,m.Z)(c,n,a,!1,null,"7b3b1bc9",null);const p=d.exports},3787:(e,t,s)=>{s.d(t,{Z:()=>p});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.showConvertedUnitsInTables.title)}})]),s("div",{staticClass:"fake-table-body"},[s("checkbox",{attrs:{value:e.showCellsWithConvertedResourceUnits,label:e.$i18n.$t.extension.settings.showConvertedUnitsInTables.label},on:{input:function(t){return e.toggle(t)}}}),e._t("default")],2)])},a=[],r=s(655),o=s(4028),i=s(917);let u=class extends o.w3{get showCellsWithConvertedResourceUnits(){return i.V.settings.showCellsWithConvertedResourceUnits}toggle(e){i.V.updateSettings({...i.V.settings,showCellsWithConvertedResourceUnits:e})}};u=(0,r.gn)([(0,o.wA)({})],u);const l=u,c=l;var m=s(1001),d=(0,m.Z)(c,n,a,!1,null,"90457dc2",null);const p=d.exports},4310:(e,t,s)=>{s.d(t,{Z:()=>v});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("grid-table",{staticClass:"ranged-stats-table",attrs:{columns:e.columns,items:e.rows,"footer-items":e.footerRows,"cell-class-provider":function(t){return e.getCellClass(t)}},scopedSlots:e._u([e._l(e.columns,(function(t,n){return{key:"cell-"+t.key,fn:function(a){var r=a.value,o=a.item;return[s("span",{key:t.key,staticClass:"ranged-stats-table-cell"},["label"==t.key?[null!=t.slotName&&null!=e.$scopedSlots[t.slotName]?e._t(t.slotName,null,{value:r}):s("span",{key:n,domProps:{textContent:e._s(r)}})]:"subLabel"==t.key?e._l(o.items,(function(n,a){return s("span",{key:a,class:n.labelClass},[null!=t.slotName&&null!=e.$scopedSlots[t.slotName]?e._t(t.slotName,null,{value:n.label}):s("span",{domProps:{textContent:e._s(n.label)}})],2)})):e._l(o.items||[o],(function(n,a){return s("span",{key:a,class:[e.getCellClass(n[t.key]),n.class]},[null!=t.formatter?s("span",{domProps:{textContent:e._s(t.formatter(n[t.key]))}}):s("span",{domProps:{textContent:e._s(n[t.key])}})])}))],2)]}}})),e._l(e.$scopedSlots,(function(t,s){return{key:s,fn:function(t){return[e._t(s,null,null,t)]}}}))],null,!0)})},a=[],r=s(655),o=s(4028),i=s(9858),u=s(6538),l=s(4749),c=s.n(l),m=s(917);let d=class extends o.w3{showPercentage;showAverage;items;footerItems;numberFormatOptions;averageNumberFormatOptions;dataItems;get hasGroupedItems(){return this.items.some((e=>"items"in e))}get dateRanges(){return m.V.settings.dateRanges}get dataItemsByRange(){const e=this.dataItems,t=this.dateRanges.map((()=>[]));return e.forEach((e=>{this.dateRanges.forEach(((s,n)=>{(0,i.m)(e.date,s)&&t[n].push(e)}))})),t}get firstDay(){return this.dataItemsByRange.reduce(((e,t)=>Math.min(e,Math.min(...t.map((e=>e.date))))),Date.now())}get columns(){const e=[{key:"label",label:"",slotName:"label"}];return this.hasGroupedItems&&e.push({key:"subLabel",label:"",slotName:"subLabel"}),e.push(...this.dateRanges.map(((e,t)=>({key:t,label:e.label??this.$i18n.$t.extension.settings.dateRanges.since(this.$i18n.$d(this.firstDay,"date")),formatter:e=>this.$i18n.$n(e,this.numberFormatOptions)})))),this.showAverage&&e.push({key:"average",label:this.$i18n.$t.extension.common.averagePerDay,formatter:e=>this.$i18n.$n(e,this.averageNumberFormatOptions??this.numberFormatOptions)}),this.showPercentage&&e.push({key:"percentage",label:"%",formatter:e=>""!=e?this.$i18n.$n(e,{minimumFractionDigits:3,maximumFractionDigits:3}):e}),e}get rows(){const e=this.dataItemsByRange,t=this.dateRanges.findIndex((e=>"all"==e.type))??(0,u.A)("failed to find range 'all'"),s=e[t].map((e=>c()(e.date).getTime())),n=new Set(s).size,a=Math.max(1,this.items.map((s=>"getValue"in s?s.getValue(e[t]):s.items.reduce(((s,n)=>s+n.getValue(e[t])),0))).reduce(((e,t)=>e+t),0));return this.items.map((s=>this.mapItemToRow(s,e,t,n,a)))}mapItemToRow(e,t,s,n,a){if("getValue"in e){const r={label:e.label,class:e.class,labelClass:e.labelClass,...this.dateRanges.map(((s,n)=>e.getValue(t[n])))},o=r[s];return this.showAverage&&(r.average=o/Math.max(1,n)),this.showPercentage&&(r.percentage=100*o/a),r}return{label:e.label,items:e.items.map((e=>this.mapItemToRow(e,t,s,n,a)))}}get footerRows(){const e=this.dataItemsByRange,t=this.dateRanges.findIndex((e=>"all"==e.type))??(0,u.A)("failed to find range 'all'"),s=e[t].map((e=>c()(e.date).getTime())),n=new Set(s).size;return this.footerItems.map((s=>{const a={label:s.label,...this.dateRanges.map(((t,n)=>"getValue"in s?s.getValue(e[n]):s.items.reduce(((t,s)=>t+s.getValue(e[n])),0))),percentage:""};if(this.showAverage){const e=a[t];a.average=e/Math.max(1,n)}return a}))}getCellClass(e){return 0==e?"fade-value":""}};(0,r.gn)([(0,o.fI)({required:!1,type:Boolean})],d.prototype,"showPercentage",void 0),(0,r.gn)([(0,o.fI)({required:!1,type:Boolean})],d.prototype,"showAverage",void 0),(0,r.gn)([(0,o.fI)({required:!0,type:Array})],d.prototype,"items",void 0),(0,r.gn)([(0,o.fI)({required:!1,type:Array,default:()=>[]})],d.prototype,"footerItems",void 0),(0,r.gn)([(0,o.fI)({required:!1,type:Object,default:void 0})],d.prototype,"numberFormatOptions",void 0),(0,r.gn)([(0,o.fI)({required:!1,type:Object,default:void 0})],d.prototype,"averageNumberFormatOptions",void 0),(0,r.gn)([(0,o.fI)({required:!0,type:Array})],d.prototype,"dataItems",void 0),d=(0,r.gn)([(0,o.wA)({})],d);const p=d,g=p;var f=s(1001),h=(0,f.Z)(g,n,a,!1,null,"1526beca",null);const v=h.exports},4230:(e,t,s)=>{s.r(t),s.d(t,{default:()=>$});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"table-container"},[s("ranged-stats-table",{attrs:{dataItems:e.reportsPerDay,items:e.items,footerItems:e.footerItems,"show-average":"",averageNumberFormatOptions:e.avgNumberFormat},scopedSlots:e._u([{key:"cell-label",fn:function(t){var n=t.value;return[s("span",{staticClass:"mr-2",domProps:{textContent:e._s(n)}}),s("o-resource",{attrs:{resource:e.resourceTypes[n],size:"24px"}})]}}])}),s("floating-menu",{staticClass:"floating-settings",attrs:{left:""},scopedSlots:e._u([{key:"activator",fn:function(){return[s("button",{on:{click:function(t){e.showSettings=!e.showSettings}}},[s("span",{staticClass:"mdi mdi-cog"})])]},proxy:!0}]),model:{value:e.showSettings,callback:function(t){e.showSettings=t},expression:"showSettings"}},[s("conversion-rate-settings"),s("lost-ship-resource-units-factor-settings"),s("hr",{staticClass:"two-column"}),s("combat-tracking-ignore-espionage-combats-settings"),s("show-converted-resources-in-cells-settings"),s("hr",{staticClass:"two-column"}),s("date-range-settings",{staticClass:"two-column"})],1)],1)},a=[],r=s(655),o=s(4028),i=s(4310),u=s(7331),l=s(917),c=s(4329),m=s(4992),d=s(6597),p=s(2546),g=s(9027),f=s(3787),h=s(8288);let v=class extends o.w3{showSettings=!1;avgNumberFormat={minimumFractionDigits:1,maximumFractionDigits:1};get colors(){return l.V.settings.colors.resources}get factors(){return l.V.settings.lostShipsResourceUnits}get firstDay(){return m.t.firstDay}get reportsPerDay(){return m.t.dailyResultsArray}get resourceTypes(){return{[this.$i18n.$t.extension.resources.metal]:u._.metal,[this.$i18n.$t.extension.resources.crystal]:u._.crystal,[this.$i18n.$t.extension.resources.deuterium]:u._.deuterium}}get items(){const e={[u._.metal]:this.factors.factor,[u._.crystal]:this.factors.factor,[u._.deuterium]:this.factors.deuteriumFactor};return u.P.map((t=>({label:this.$i18n.$t.extension.resources[t],getValue:s=>s.reduce(((s,n)=>s+n.lostShips.onExpeditions.resourceUnits[t]*e[t]),0)})))}get footerItems(){const e={[u._.metal]:this.factors.factor,[u._.crystal]:this.factors.factor,[u._.deuterium]:this.factors.deuteriumFactor},t=[{label:this.$i18n.$t.extension.common.resourceUnits,getValue:t=>t.reduce(((t,s)=>t+s.lostShips.onExpeditions.resourceUnits.metal*e.metal+s.lostShips.onExpeditions.resourceUnits.crystal*e.crystal+s.lostShips.onExpeditions.resourceUnits.deuterium*e.deuterium),0)}];return l.V.settings.showCellsWithConvertedResourceUnits&&t.push({label:`${this.$i18n.$t.extension.common.resourceUnits} (${"msu"==l.V.settings.conversionRates.mode?this.$i18n.$t.extension.common.msu:this.$i18n.$t.extension.common.dsu})`,getValue:t=>t.reduce(((t,s)=>t+(0,h.B)(s.lostShips.onExpeditions.resourceUnits,e)),0)}),t}};v=(0,r.gn)([(0,o.wA)({components:{RangedStatsTable:i.Z,DateRangeSettings:c.Z,ConversionRateSettings:d.Z,LostShipResourceUnitsFactorSettings:p.Z,CombatTrackingIgnoreEspionageCombatsSettings:g.Z,ShowConvertedResourcesInCellsSettings:f.Z}})],v);const b=v,y=b;var C=s(1001),x=(0,C.Z)(y,n,a,!1,null,"0afe844e",null);const $=x.exports},8734:(e,t)=>{function s(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=s,e.exports=t.default},4749:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=o;var n=r(s(1171)),a=r(s(8734));function r(e){return e&&e.__esModule?e:{default:e}}function o(e){(0,a.default)(1,arguments);var t=(0,n.default)(e);return t.setHours(0,0,0,0),t}e.exports=t.default},1171:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var n=a(s(8734));function a(e){return e&&e.__esModule?e:{default:e}}function r(e){(0,n.default)(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"===typeof e||"[object Number]"===t?new Date(e):("string"!==typeof e&&"[object String]"!==t||"undefined"===typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}e.exports=t.default}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,