"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[3576],{407:(e,t,s)=>{s.r(t),s.d(t,{default:()=>T});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("lifeform-bonuses-breakdown",{attrs:{types:e.bonusTypes,technologies:e.techs,planets:e.planets,limits:e.limits}})},i=[],o=s(655),l=s(147),r=s(3418),a=s(4846),p=s(9751),u=s(8395),c=s(1786),f=s(4028),g=s(3894),m=s(5794),d=s(7848),h=s(7377);let b=class extends f.w3{bonusTypes=[{key:"speed",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.expeditionSpeed.bonus}];technologies=a.YO.filter((e=>e.appliesTo(m.q.expedition)));get techs(){return this.technologies.map((e=>e.type))}get limits(){const e=(0,d.K)({type:h.f.FleetSpeedBonus,missionType:m.q.expedition});return{speed:t=>null!=e?Math.min(t,e):t}}get planets(){return(0,p.r)(u.p.empire.planetOrder.map((e=>u.p.empire.planets[e])).filter((e=>!e.isMoon)),(e=>e.id),(e=>this.technologies.map((t=>{const s=this.getPlanetBonus(t,e);return{planet:e,technologyType:t.type,bonuses:(0,p.a)(["speed"],(e=>({base:s.base,buildings:s.buildings,level:s.level,total:s.total})))}}))))}get experience(){return u.p.lifeformExperience}getPlanetBonus(e,t){const s={base:0,level:0,buildings:0,buildingsBoost:0,total:0};if(t.activeLifeform==r.e5.none||!t.activeLifeformTechnologies.includes(e.type))return s;const n=Math.min((0,c.io)(t),(0,d.K)({type:h.f.LifeformResearchBonusBoost})??Number.MAX_SAFE_INTEGER);s.buildingsBoost+=n;const i=e.getFleetSpeedBonus(m.q.expedition,t.lifeformTechnologies[e.type]),o=i*(0,l.g1)(this.experience[t.activeLifeform]),a=i*n,p=i+o+a;return s.base+=i,s.level+=o,s.buildings+=a,s.total+=p,s}};b=(0,o.gn)([(0,f.wA)({components:{LifeformBonusesBreakdown:g.Z}})],b);const y=b,B=y;var v=s(1001),x=(0,v.Z)(B,n,i,!1,null,null,null);const T=x.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,