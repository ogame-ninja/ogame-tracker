"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[7356],{7848:(e,s,a)=>{a.d(s,{K:()=>l});var t=a(5424),n=a(6864),r=a(3738),o=a(2816),c=a(9681),i=a(7377);function l(e){switch(e.type){case i.f.FleetSpeedBonus:return;case i.f.ResourceProductionBonus:return;case i.f.StatsBonus:return;case i.f.TechTimeReduction:switch(e.tech){case r.s.espionageTechnology:case r.s.computerTechnology:case r.s.weaponsTechnology:case r.s.shieldingTechnology:case r.s.armorTechnology:case r.s.energyTechnology:case r.s.hyperspaceTechnology:case r.s.combustionDrive:case r.s.impulseDrive:case r.s.hyperspaceDrive:case r.s.laserTechnology:case r.s.ionTechnology:case r.s.plasmaTechnology:case r.s.intergalacticResearchNetwork:case r.s.astrophysics:case r.s.gravitonTechnology:return.99;case c.Nw.intergalacticEnvoys:case c.Nw.highPerformanceExtractors:case c.Nw.fusionDrives:case c.Nw.stealthFieldGenerator:case c.Nw.orbitalDen:case c.Nw.researchAI:case c.Nw.highPerformanceTerraformer:case c.Nw.enhancedProductionTechnologies:case c.Nw.lightFighterMkII:case c.Nw.cruiserMkII:case c.Nw.improvedLabTechnology:case c.Nw.plasmaTerraformer:case c.Nw.lowTemperatureDrives:case c.Nw.bomberMkII:case c.Nw.destroyerMkII:case c.Nw.battlecruiserMkII:case c.Nw.robotAssistants:case c.Nw.supercomputer:case c.Nw.volcanicBatteries:case c.Nw.acousticScanning:case c.Nw.highEnergyPumpSystems:case c.Nw.cargoHoldExpansion_CivilianShips:case c.Nw.magmaPoweredProduction:case c.Nw.geothermalPowerPlants:case c.Nw.depthSounding:case c.Nw.ionCrystalEnhancement_heavyFighter:case c.Nw.improvedStellarator:case c.Nw.hardenedDiamondDrillHeads:case c.Nw.seismicMiningTechnology:case c.Nw.magmaPoweredPumpSystems:case c.Nw.ionCrystalModules:case c.Nw.optimisedSiloConstructionMethod:case c.Nw.diamondEnergyTransmitter:case c.Nw.obsidianShieldReinforcement:case c.Nw.runeShields:case c.Nw.rocktalCollectorEnhancement:case c.Nw.catalyserTechnology:case c.Nw.plasmaDrive:case c.Nw.efficiencyModule:case c.Nw.depotAI:case c.Nw.generalOverhaul_lightFighter:case c.Nw.automatedTransportLines:case c.Nw.improvedDroneAI:case c.Nw.experimentalRecyclingTechnology:case c.Nw.generalOverhaul_cruiser:case c.Nw.slingshotAutopilot:case c.Nw.highTemperatureSuperconductors:case c.Nw.generalOverhaul_battleship:case c.Nw.artificialSwarmIntelligence:case c.Nw.generalOverhaul_battlecruiser:case c.Nw.generalOverhaul_bomber:case c.Nw.generalOverhaul_destroyer:case c.Nw.experimentalWeaponsTechnology:case c.Nw.mechanGeneralEnhancement:case c.Nw.heatRecovery:case c.Nw.sulphideProcess:case c.Nw.psionicNetwork:case c.Nw.telekineticTractorBeam:case c.Nw.enhancedSensorTechnology:case c.Nw.neuromodalCompressor:case c.Nw.neuroInterface:case c.Nw.interplanetaryAnalysisNetwork:case c.Nw.overclocking_heavyFighter:case c.Nw.telekineticDrive:case c.Nw.sixthSense:case c.Nw.psychoharmoniser:case c.Nw.efficientSwarmIntelligence:case c.Nw.overclocking_largeCargo:case c.Nw.gravitationSensors:case c.Nw.overclocking_battleship:case c.Nw.psionicShieldMatrix:case c.Nw.kaeleshDiscovererEnhancement:return.99;case n.A.terraformer:case n.A.allianceDepot:case n.A.missileSilo:return.99;case o.EO.meditationEnclave:case o.EO.crystalFarm:case o.EO.runeTechnologium:case o.EO.runeForge:case o.EO.oriktorium:case o.EO.magmaForge:case o.EO.disruptionChamber:case o.EO.megalith:case o.EO.crystalRefinery:case o.EO.deuteriumSynthesiser:case o.EO.mineralResearchCentre:case o.EO.advancedRecyclingPlant:return.5}return;case i.f.TechCostReduction:switch(e.tech){case r.s.espionageTechnology:case r.s.plasmaTechnology:case r.s.energyTechnology:case r.s.armorTechnology:case r.s.shieldingTechnology:case r.s.weaponsTechnology:return.5;case c.Nw.intergalacticEnvoys:case c.Nw.highPerformanceExtractors:case c.Nw.fusionDrives:case c.Nw.stealthFieldGenerator:case c.Nw.orbitalDen:case c.Nw.researchAI:case c.Nw.highPerformanceTerraformer:case c.Nw.enhancedProductionTechnologies:case c.Nw.lightFighterMkII:case c.Nw.cruiserMkII:case c.Nw.improvedLabTechnology:case c.Nw.plasmaTerraformer:case c.Nw.lowTemperatureDrives:case c.Nw.bomberMkII:case c.Nw.destroyerMkII:case c.Nw.battlecruiserMkII:case c.Nw.robotAssistants:case c.Nw.supercomputer:case c.Nw.volcanicBatteries:case c.Nw.acousticScanning:case c.Nw.highEnergyPumpSystems:case c.Nw.cargoHoldExpansion_CivilianShips:case c.Nw.magmaPoweredProduction:case c.Nw.geothermalPowerPlants:case c.Nw.depthSounding:case c.Nw.ionCrystalEnhancement_heavyFighter:case c.Nw.improvedStellarator:case c.Nw.hardenedDiamondDrillHeads:case c.Nw.seismicMiningTechnology:case c.Nw.magmaPoweredPumpSystems:case c.Nw.ionCrystalModules:case c.Nw.optimisedSiloConstructionMethod:case c.Nw.diamondEnergyTransmitter:case c.Nw.obsidianShieldReinforcement:case c.Nw.runeShields:case c.Nw.rocktalCollectorEnhancement:case c.Nw.catalyserTechnology:case c.Nw.plasmaDrive:case c.Nw.efficiencyModule:case c.Nw.depotAI:case c.Nw.generalOverhaul_lightFighter:case c.Nw.automatedTransportLines:case c.Nw.improvedDroneAI:case c.Nw.experimentalRecyclingTechnology:case c.Nw.generalOverhaul_cruiser:case c.Nw.slingshotAutopilot:case c.Nw.highTemperatureSuperconductors:case c.Nw.generalOverhaul_battleship:case c.Nw.artificialSwarmIntelligence:case c.Nw.generalOverhaul_battlecruiser:case c.Nw.generalOverhaul_bomber:case c.Nw.generalOverhaul_destroyer:case c.Nw.experimentalWeaponsTechnology:case c.Nw.mechanGeneralEnhancement:case c.Nw.heatRecovery:case c.Nw.sulphideProcess:case c.Nw.psionicNetwork:case c.Nw.telekineticTractorBeam:case c.Nw.enhancedSensorTechnology:case c.Nw.neuromodalCompressor:case c.Nw.neuroInterface:case c.Nw.interplanetaryAnalysisNetwork:case c.Nw.overclocking_heavyFighter:case c.Nw.telekineticDrive:case c.Nw.sixthSense:case c.Nw.psychoharmoniser:case c.Nw.efficientSwarmIntelligence:case c.Nw.overclocking_largeCargo:case c.Nw.gravitationSensors:case c.Nw.overclocking_battleship:case c.Nw.psionicShieldMatrix:case c.Nw.kaeleshDiscovererEnhancement:return.25;case n.A.metalMine:case n.A.crystalMine:case n.A.deuteriumSynthesizer:case n.A.solarPlant:case n.A.fusionReactor:case n.A.terraformer:case n.A.allianceDepot:case n.A.missileSilo:return.5;case o.EO.meditationEnclave:case o.EO.crystalFarm:case o.EO.runeTechnologium:case o.EO.runeForge:case o.EO.oriktorium:case o.EO.magmaForge:case o.EO.disruptionChamber:case o.EO.megalith:case o.EO.crystalRefinery:case o.EO.deuteriumSynthesiser:case o.EO.mineralResearchCentre:case o.EO.advancedRecyclingPlant:return.5}return;case i.f.DenCapacityBonus:return;case i.f.CrawlerBonus:return;case i.f.CrawlerEnergyConsumptionReduction:return.5;case i.f.PlayerClassBonus:return;case i.f.FuelConsumptionReduction:return.3;case i.f.FuelReturn:return.9;case i.f.PhalanxRangeBonus:return;case i.f.ExpeditionEventProbabilityBonus:switch(e.event){case t.r.lostFleet:return.5}return;case i.f.ExpeditionBonus:return;case i.f.EnergyConsumptionReduction:return.4;case i.f.AutoRecycleDebrisField:return.3;case i.f.ShipProductionSpeedBonus:return.99;case i.f.FoodConsumptionReduction:return.8;case i.f.MaxPopulationBonus:return 1;case i.f.PopulationGrowthBonus:return;case i.f.LifeformResearchBonusBoost:return 1;case i.f.PopulationProtection:return.8;case i.f.SpaceDockBonus:return.5;case i.f.PlanetFieldsBonus:return;case i.f.LifeformResearchPopulationConditionReduction:return.25;case i.f.MoonChanceBonus:return.3;default:throw new Error("invalid bonus type")}}},147:(e,s,a)=>{a.d(s,{g1:()=>n,g4:()=>r,_Z:()=>o});const t=.001;function n(e){const s=r(e);return s*t}function r(e){for(let s=0;;s++){const a=o(s+1);if(a>e)return s}}function o(e){return 900*e*(e+1)/2}},1786:(e,s,a)=>{a.d(s,{I5:()=>l,io:()=>u,qH:()=>m,g5:()=>d});var t=a(602),n=a(5128),r=a(6119),o=a(9681),c=a(4846),i=a(9751);function l(e){return c._i.filter((s=>e.activeLifeformTechnologies.includes(s.type))).reduce(((s,a)=>s+a.getClassBonus(t.D0.collector,e.lifeformTechnologies[a.type])),0)}function u(e){return(0,i.a)(o.Vs,(s=>r.cQ[e.activeLifeform].map((a=>a.getLifeformTechnologyBonus(s,e.lifeformBuildings[a.type]))).reduce(((e,s)=>e+s),0)))}function m(e){return r.wJ[e.activeLifeform].reduce(((s,a)=>(0,n.aV)(s,a.getProductionBonus(e.lifeformBuildings[a.type]))),{metal:0,crystal:0,deuterium:0,energy:0})}function d(e){return c.rE.filter((s=>e.activeLifeformTechnologies.includes(s.type))).reduce(((s,a)=>{const t=a.getProductionBonus(e.lifeformTechnologies[a.type]);return s.metal[a.type]+=t.metal,s.crystal[a.type]+=t.crystal,s.deuterium[a.type]+=t.deuterium,s.energy[a.type]+=t.energy,s}),{metal:(0,i.a)(o.Vs,0),crystal:(0,i.a)(o.Vs,0),deuterium:(0,i.a)(o.Vs,0),energy:(0,i.a)(o.Vs,0)})}},7385:(e,s,a)=>{a.d(s,{Z:()=>N});var t=function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("div",{staticClass:"lifeform-bonus-breakdown",style:"--bonus-types: "+e.types.length},[a("div",{staticClass:"header-row"},[a("div",{staticClass:"title"},[null!=e.$scopedSlots.header?e._t("header"):a("span",{domProps:{textContent:e._s(e.header)}})],2),e._l(e.types,(function(s){return a("div",{key:s.key,staticClass:"partial-bonus"},[a("div",{staticClass:"title",domProps:{textContent:e._s(s.label)}}),a("span",{staticClass:"total-value"},[a("decimal-number",{staticStyle:{"--small-fraction-size":"0.75em"},attrs:{value:100*e.totalBonus[s.key],suffix:"%",digits:3,"fade-decimals":!1}}),e.limits[s.key](Number.MAX_SAFE_INTEGER)==e.totalBonus[s.key]||e.limits[s.key](Number.MIN_SAFE_INTEGER)==e.totalBonus[s.key]?a("span",{staticClass:"mdi mdi-alert-outline"}):e._e()],1)])}))],2),e._l(e.empirePlanets,(function(s){return a("div",{key:s.id,staticClass:"planet-row"},["none"!=s.activeLifeform?[a("div",{staticClass:"planet-header-row"},[a("div",{staticClass:"toggle"},[a("span",{staticClass:"mdi",class:{"mdi-menu-down":1==e.expandedPlanets[s.id],"mdi-menu-right":1!=e.expandedPlanets[s.id]},on:{click:function(a){return e.togglePlanet(s.id)}}})]),a("div",{domProps:{textContent:e._s(s.name+" "+e.formatCoordinates(s.coordinates))}}),e._l(e.types,(function(t){return a("span",{key:t.key,staticClass:"bonus"},[a("decimal-number",{staticStyle:{"--small-fraction-size":"0.75em"},attrs:{value:100*e.totalPlanetBonusesByType[s.id][t.key],suffix:"%",digits:3,"fade-decimals":!1}})],1)}))],2),1==e.expandedPlanets[s.id]?[a("div",{staticClass:"tech-header-row"},[a("div",{staticClass:"slot",domProps:{textContent:e._s(e.$i18n.$t.extension.empire.lifeforms.researchBonuses.breakdown.slot)}}),a("div",{staticClass:"tech",domProps:{textContent:e._s(e.$i18n.$t.extension.empire.lifeforms.researchBonuses.breakdown.research)}}),e._l(e.types,(function(s){return a("div",{key:s.key,staticClass:"bonus",domProps:{textContent:e._s(e.$i18n.$t.extension.empire.lifeforms.researchBonuses.breakdown.bonus)}})}))],2),e._l(e.technologiesSorted,(function(t){return a("div",{key:t,staticClass:"tech-row"},[s.activeLifeformTechnologies.includes(t)&&s.lifeformTechnologies[t]>0?[a("div",{staticClass:"slot",domProps:{textContent:e._s(e.LifeformTechnologySlots[t])}}),a("div",{staticClass:"tech"},[a("o-lifeform-technology",{attrs:{technology:t,size:"24px"}}),a("span",{domProps:{textContent:e._s(e.$i18n.$t.ogame.lifeformTechnologies[t]+" ("+s.lifeformTechnologies[t]+")")}})],1),e._l(e.types,(function(n){return a("span",{key:n.key,staticClass:"bonus"},[a("decimal-number",{staticStyle:{"--small-fraction-size":"0.75em"},attrs:{value:100*e.totalPlanetBonusesByTechnologyType[s.id][t][n.key].base,suffix:"%",digits:3,"fade-decimals":!1}})],1)}))]:e._e()],2)})),a("div",{staticClass:"tech-row boosts"},[a("div"),a("div",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.lifeforms.researchBonuses.breakdown.lifeformBuildingsBoost)}}),e._l(e.types,(function(t){return a("span",{key:t.key,staticClass:"bonus"},[a("decimal-number",{staticStyle:{"--small-fraction-size":"0.75em"},attrs:{value:100*e.buildingsPlanetBonusesByType[s.id][t.key],suffix:"%",digits:3,"fade-decimals":!1}})],1)}))],2),a("div",{staticClass:"tech-row"},[a("div"),a("div",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.lifeforms.researchBonuses.breakdown.lifeformLevelBoost(e.$i18n.$t.ogame.lifeforms[s.activeLifeform],e.$i18n.$n(100*e.getLifeformLevelTechnologyBonus(e.experience[s.activeLifeform]),e.smallPercentageFormat)+"%"))}}),e._l(e.types,(function(t){return a("span",{key:t.key,staticClass:"bonus"},[a("decimal-number",{staticStyle:{"--small-fraction-size":"0.75em"},attrs:{value:100*e.levelPlanetBonusesByType[s.id][t.key],suffix:"%",digits:3,"fade-decimals":!1}})],1)}))],2),Object.values(e.planetBugBonusesByType[s.id]).some((function(e){return 0!=e}))?a("div",{staticClass:"tech-row boosts"},[a("div"),a("div",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.lifeforms.researchBonuses.breakdown.bugBoost)}}),e._l(e.types,(function(t){return a("span",{key:t.key,staticClass:"bonus"},[a("decimal-number",{staticStyle:{"--small-fraction-size":"0.75em"},attrs:{value:100*e.planetBugBonusesByType[s.id][t.key],suffix:"%",digits:3,"fade-decimals":!1}})],1)}))],2):e._e()]:e._e()]:e._e()],2)}))],2)},n=[],r=a(655),o=a(147),c=a(9681),i=a(3418),l=a(9751),u=a(8395),m=a(1786),d=a(4028),h=a(7545);let g=class extends d.w3{header;types;planets;technologies;limits;get technologiesSorted(){return[...this.technologies].sort(((e,s)=>c.rI[e]-c.rI[s]))}smallPercentageFormat={minimumFractionDigits:1,maximumFractionDigits:1};getLifeformLevelTechnologyBonus=o.g1;getPlanetLifeformTechnologyBoost=m.io;expandedPlanets={};togglePlanet(e){d.w3.set(this.expandedPlanets,e,!this.expandedPlanets[e])}formatCoordinates(e){return`[${e.galaxy}:${e.system}:${e.position}]`}LifeformTechnologySlots=c.rI;get experience(){return u.p.lifeformExperience}get levels(){return(0,l.a)(i.p3,(e=>(0,o.g4)(this.experience[e])))}get totalPlanetBonusesByTechnologyType(){const e={};return Object.entries(this.planets).map((e=>[(0,h.Y)(e[0]),e[1]])).forEach((s=>{const[a,t]=s;e[a]={},t.forEach((s=>{const t=e[a][s.technologyType]??={};Object.entries(s.bonuses).forEach((e=>{const[s,a]=e;t[s]??={base:0,buildings:0,level:0,total:0,bugBonus:0},t[s].base+=a.base,t[s].buildings+=a.buildings,t[s].level+=a.level,t[s].total+=a.total,t[s].bugBonus+=a.bugBonus??0}))}))})),e}get buildingsPlanetBonusesByType(){const e={};return Object.entries(this.planets).map((e=>[(0,h.Y)(e[0]),e[1]])).forEach((s=>{const[a,t]=s;e[a]={},t.forEach((s=>{Object.entries(s.bonuses).forEach((s=>{const[t,n]=s;e[a][t]??=0,e[a][t]+=n.buildings}))}))})),e}get levelPlanetBonusesByType(){const e={};return Object.entries(this.planets).map((e=>[(0,h.Y)(e[0]),e[1]])).forEach((s=>{const[a,t]=s;e[a]={},t.forEach((s=>{Object.entries(s.bonuses).forEach((s=>{const[t,n]=s;e[a][t]??=0,e[a][t]+=n.level}))}))})),e}get planetBugBonusesByType(){const e={};return Object.entries(this.planets).map((e=>[(0,h.Y)(e[0]),e[1]])).forEach((s=>{const[a,t]=s;e[a]={},t.forEach((s=>{Object.entries(s.bonuses).forEach((s=>{const[t,n]=s;e[a][t]??=0,e[a][t]+=n.bugBonus??0}))}))})),e}get totalPlanetBonusesByType(){const e={};return Object.entries(this.planets).map((e=>[(0,h.Y)(e[0]),e[1]])).forEach((s=>{const[a,t]=s;e[a]={},t.forEach((s=>{Object.entries(s.bonuses).forEach((s=>{const[t,n]=s;e[a][t]??=0,e[a][t]+=n.total}))}))})),e}get totalBonus(){return Object.values(this.planets).reduce(((e,s)=>(s.forEach((s=>{Object.keys(s.bonuses).forEach((a=>{e[a]??=0,e[a]=this.limits[a](e[a]+s.bonuses[a].total)}))})),e)),{})}get empirePlanets(){return u.p.empire.planetOrder.map((e=>u.p.empire.planets[e])).filter((e=>!e.isMoon))}};(0,r.gn)([(0,d.fI)({required:!1,type:String,default:()=>""})],g.prototype,"header",void 0),(0,r.gn)([(0,d.fI)({required:!0,type:Array})],g.prototype,"types",void 0),(0,r.gn)([(0,d.fI)({required:!0,type:Object})],g.prototype,"planets",void 0),(0,r.gn)([(0,d.fI)({required:!0,type:Array})],g.prototype,"technologies",void 0),(0,r.gn)([(0,d.fI)({required:!0,type:Object})],g.prototype,"limits",void 0),g=(0,r.gn)([(0,d.wA)({})],g);const p=g,f=p;var y=a(1001),w=(0,y.Z)(f,t,n,!1,null,"3bb54f23",null);const N=w.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,