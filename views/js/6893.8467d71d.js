"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[6893],{6597:(e,t,s)=>{s.d(t,{Z:()=>g});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"conversion-rate-settings fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.title)}})]),s("div",{staticClass:"fake-table-body"},[s("select",{domProps:{value:e.conversionMode},on:{input:function(t){return e.setConversionMode(t.target.value)}}},[s("option",{attrs:{value:"msu"},domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.msuLong+" ("+e.$i18n.$t.extension.common.msu+")")}}),s("option",{attrs:{value:"dsu"},domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.dsuLong+" ("+e.$i18n.$t.extension.common.dsu+")")}})]),"msu"==e.conversionMode?s("span",{staticClass:"inputs"},[s("span",[s("o-resource",{attrs:{resource:"crystal"}}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.msu.crystal,expression:"msu.crystal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"1",max:"3",step:"0.01"},domProps:{value:e.msu.crystal},on:{change:[function(t){e.$set(e.msu,"crystal",e._n(t.target.value))},function(t){return e.updateMsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("o-resource",{attrs:{resource:"metal"}})],1),s("span",[s("o-resource",{attrs:{resource:"deuterium"}}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.msu.deuterium,expression:"msu.deuterium",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"2",max:"5",step:"0.01"},domProps:{value:e.msu.deuterium},on:{change:[function(t){e.$set(e.msu,"deuterium",e._n(t.target.value))},function(t){return e.updateMsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("o-resource",{attrs:{resource:"metal"}})],1)]):s("span",{staticClass:"inputs"},[s("span",[s("o-resource",{attrs:{resource:"metal"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.dsu.metal,expression:"dsu.metal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"2",max:"5",step:"0.01"},domProps:{value:e.dsu.metal},on:{change:[function(t){e.$set(e.dsu,"metal",e._n(t.target.value))},function(t){return e.updateDsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("o-resource",{attrs:{resource:"deuterium"}})],1),s("span",[s("o-resource",{attrs:{resource:"crystal"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.dsu.crystal,expression:"dsu.crystal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"1",max:"3",step:"0.01"},domProps:{value:e.dsu.crystal},on:{change:[function(t){e.$set(e.dsu,"crystal",e._n(t.target.value))},function(t){return e.updateDsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("o-resource",{attrs:{resource:"deuterium"}})],1)])])])},a=[],o=s(655),r=s(4028),i=s(917);let u=class extends r.w3{msu={crystal:2,deuterium:3};dsu={metal:3,crystal:2};get msuRates(){return i.V.settings.conversionRates.msu}get dsuRates(){return i.V.settings.conversionRates.dsu}get conversionMode(){return i.V.settings.conversionRates.mode}setConversionMode(e){i.V.updateSettings({...i.V.settings,conversionRates:{...i.V.settings.conversionRates,mode:e}})}onMsuRatesChanged(){const{crystal:e,deuterium:t}=this.msuRates;this.msu.crystal=e,this.msu.deuterium=t}updateMsuConversionRates(){i.V.updateSettings({...i.V.settings,conversionRates:{...i.V.settings.conversionRates,msu:this.msu}})}onDsuRatesChanged(){const{crystal:e,metal:t}=this.dsuRates;this.dsu.crystal=e,this.dsu.metal=t}updateDsuConversionRates(){i.V.updateSettings({...i.V.settings,conversionRates:{...i.V.settings.conversionRates,dsu:this.dsu}})}};(0,o.gn)([(0,r.RL)("msuRates",{immediate:!0})],u.prototype,"onMsuRatesChanged",null),(0,o.gn)([(0,r.RL)("dsuRates",{immediate:!0})],u.prototype,"onDsuRatesChanged",null),u=(0,o.gn)([(0,r.wA)({})],u);const l=u,c=l;var d=s(1001),m=(0,d.Z)(c,n,a,!1,null,"13cde7dd",null);const g=m.exports},3787:(e,t,s)=>{s.d(t,{Z:()=>g});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.showConvertedUnitsInTables.title)}})]),s("div",{staticClass:"fake-table-body"},[s("checkbox",{attrs:{value:e.showCellsWithConvertedResourceUnits,label:e.$i18n.$t.extension.settings.showConvertedUnitsInTables.label},on:{input:function(t){return e.toggle(t)}}}),e._t("default")],2)])},a=[],o=s(655),r=s(4028),i=s(917);let u=class extends r.w3{get showCellsWithConvertedResourceUnits(){return i.V.settings.showCellsWithConvertedResourceUnits}toggle(e){i.V.updateSettings({...i.V.settings,showCellsWithConvertedResourceUnits:e})}};u=(0,o.gn)([(0,r.wA)({})],u);const l=u,c=l;var d=s(1001),m=(0,d.Z)(c,n,a,!1,null,"90457dc2",null);const g=m.exports},6893:(e,t,s)=>{s.r(t),s.d(t,{default:()=>Z});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"common-settings"},[s("extension-language-settings"),s("conversion-rate-settings"),s("show-converted-resources-in-cells-settings"),s("force-update-server-settings")],1)},a=[],o=s(655),r=s(4028),i=s(6597),u=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.extensionLanguage)}})]),s("div",{staticClass:"fake-table-body"},[s("select",{domProps:{value:e.language},on:{change:function(t){return e.setLanguage(t.target.value)}}},e._l(e.langs,(function(t){return s("option",{key:t,domProps:{value:t,textContent:e._s(e.languageNames[t])}})})),0),Object.keys(e.getRegions(e.language)).length>0?s("select",{domProps:{value:e.languageRegion},on:{change:function(t){return e.setLanguageRegion(t.target.value)}}},e._l(e.getRegions(e.language),(function(t,n){return s("option",{key:n,domProps:{value:n,textContent:e._s(t)}})})),0):e._e(),s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.extensionLanguageFallbackHint)}})])])},l=[],c=s(9167),d=s(917);let m=class extends r.w3{langs=[c.I.de,c.I.en,c.I["pt-pt"],c.I.fr];languageNames={[c.I.de]:"Deutsch",[c.I.en]:"English",[c.I["pt-pt"]]:"Português",[c.I.fr]:"Français"};regions={[c.I.en]:{gb:"United Kingdom",us:"United States"}};getRegions(e){return this.regions[e]??{}}get language(){return d.V.settings.extensionLanguage}get languageRegion(){return d.V.settings.extensionLanguageRegion}setLanguage(e){d.V.updateSettings({...d.V.settings,extensionLanguage:e}),this.setLanguageRegion(void 0)}setLanguageRegion(e){d.V.updateSettings({...d.V.settings,extensionLanguageRegion:e})}};m=(0,o.gn)([(0,r.wA)({})],m);const g=m,p=g;var v=s(1001),f=(0,v.Z)(p,u,l,!1,null,"32bbda69",null);const C=f.exports;var b=s(3787),x=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.serverSettings.title)}})]),s("div",{staticClass:"fake-table-body"},[s("div",[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.serverSettings.lastUpdate+": ")}}),s("b",{domProps:{textContent:e._s(e.$i18n.$d(e.lastUpdate,"datetime"))}})]),s("button",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.serverSettings.forceUpdate)},on:{click:function(t){return e.forceUpdate()}}})])])},h=[],y=s(2809),R=s(1936),$=s(8717),_=s(7076);let w=class extends r.w3{get lastUpdate(){return _.s.lastUpdate}async mounted(){await _.s.ready}forceUpdate(){const e={ogameMeta:$.l,type:R.C.ForceUpdateServerSettings,senderUuid:$.g};(0,y.b)(e)}};w=(0,o.gn)([(0,r.wA)({})],w);const k=w,P=k;var U=(0,v.Z)(P,x,h,!1,null,"f3df0208",null);const V=U.exports;let S=class extends r.w3{};S=(0,o.gn)([(0,r.wA)({components:{ConversionRateSettings:i.Z,ExtensionLanguageSettings:C,ShowConvertedResourcesInCellsSettings:b.Z,ForceUpdateServerSettings:V}})],S);const L=S,I=L;var M=(0,v.Z)(I,n,a,!1,null,"434720c6",null);const Z=M.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,