"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[1161],{3420:(e,t,n)=>{n.d(t,{s:()=>i});class i{#e;#t;#n;constructor(e){this.#e=e.comparator,this.#t=e.maxSize,this.#n=[]}get values(){return[...this.#n]}add(e){if(0==this.#n.length)return void this.#n.push(e);const t=this.#n[0];if(this.#e(e,t)<0)return this.#n.unshift(e),void this.#i();const n=this.#n.findIndex((t=>this.#e(e,t)<0));-1==n?this.#n.push(e):this.#n.splice(n,0,e),this.#i()}#i(){this.#n.splice(this.#t)}}},2836:(e,t,n)=>{n.d(t,{Z:()=>u});var i=function(){var e=this,t=e.$createElement,n=e._self._c||t;return e.size==e.ExpeditionEventSize.small?n("span",{staticClass:"mdi mdi-hexagon-slice-1",style:{color:e.colors.small}}):e.size==e.ExpeditionEventSize.medium?n("span",{staticClass:"mdi mdi-hexagon-slice-3",style:{color:e.colors.medium}}):e.size==e.ExpeditionEventSize.large?n("span",{staticClass:"mdi mdi-hexagon-slice-5",style:{color:e.colors.large}}):e._e()},s=[],o=n(655),r=n(776),a=n(4028),l=n(917);let m=class extends a.w3{size;ExpeditionEventSize=r.Mm;get colors(){return l.V.settings.colors.expeditions.sizes}};(0,o.gn)([(0,a.fI)({required:!0,type:String})],m.prototype,"size",void 0),m=(0,o.gn)([(0,a.wA)({})],m);const c=m,d=c;var p=n(1001),f=(0,p.Z)(d,i,s,!1,null,null,null);const u=f.exports},1161:(e,t,n)=>{n.r(t),n.d(t,{default:()=>y});var i=function(){var e=this,t=e.$createElement,n=e._self._c||t;return e.loading?n("loading-spinner"):n("div",[n("div",{staticClass:"find-column"},[n("h3",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.lifeforms.topFinds.topFinds+" ("+e.$i18n.$t.extension.empire.lifeforms.topFinds.artifacts+")")}}),n("grid-table",{style:"--color: "+e.colors.artifacts,attrs:{inline:"",columns:e.artifactColumns,items:e.largestFinds.artifacts.values},scopedSlots:e._u([{key:"cell-size",fn:function(e){var t=e.value;return[n("expedition-size-icon",{staticClass:"scaled-icon",attrs:{size:t}})]}},{key:"cell-amount",fn:function(t){var i=t.value;return[n("span",{domProps:{textContent:e._s(e.$i18n.$n(i))}})]}},{key:"cell-date",fn:function(t){var i=t.value;return[n("span",{domProps:{textContent:e._s(e.$i18n.$d(i,"date"))}})]}}])})],1),e._l(e.experienceKeys,(function(t){return n("div",{key:"largest-"+t,staticClass:"find-column"},[n("h3",[n("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.lifeforms.topFinds.topFinds)}}),n("span",{domProps:{textContent:e._s(" ("+e.$i18n.$t.extension.empire.lifeforms.topFinds.experience)}}),"all"!=t?n("span",{domProps:{textContent:e._s(", "+e.$i18n.$t.ogame.lifeforms[t])}}):e._e(),n("span",{domProps:{textContent:e._s(")")}})]),n("grid-table",{style:"--color: "+("all"==t?e.colors.experience:e.colors.lifeform[t]),attrs:{inline:"",columns:e.experienceColumns,items:e.largestFinds.experience[t].values},scopedSlots:e._u([{key:"cell-lifeform",fn:function(e){var t=e.value;return[n("o-lifeform",{attrs:{lifeform:t,size:"22px"}})]}},{key:"cell-amount",fn:function(t){var i=t.value;return[n("span",{domProps:{textContent:e._s(e.$i18n.$n(i))}})]}},{key:"cell-date",fn:function(t){var i=t.value;return[n("span",{domProps:{textContent:e._s(e.$i18n.$d(i,"date"))}})]}}],null,!0)})],1)})),e._l(e.experienceKeys,(function(t){return n("div",{key:"smallest-"+t,staticClass:"find-column"},[n("h3",[n("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.lifeforms.topFinds.worstFinds)}}),n("span",{domProps:{textContent:e._s(" ("+e.$i18n.$t.extension.empire.lifeforms.topFinds.experience)}}),"all"!=t?n("span",{domProps:{textContent:e._s(", "+e.$i18n.$t.ogame.lifeforms[t])}}):e._e(),n("span",{domProps:{textContent:e._s(")")}})]),n("grid-table",{style:"--color: "+("all"==t?e.colors.experience:e.colors.lifeform[t]),attrs:{inline:"",columns:e.experienceColumns,items:e.smallestFinds.experience[t].values},scopedSlots:e._u([{key:"cell-lifeform",fn:function(e){var t=e.value;return[n("o-lifeform",{attrs:{lifeform:t,size:"22px"}})]}},{key:"cell-amount",fn:function(t){var i=t.value;return[n("span",{domProps:{textContent:e._s(e.$i18n.$n(i))}})]}},{key:"cell-date",fn:function(t){var i=t.value;return[n("span",{domProps:{textContent:e._s(e.$i18n.$d(i,"date"))}})]}}],null,!0)})],1)}))],2)},s=[],o=n(655),r=n(4028),a=n(2836),l=n(917),m=n(7048),c=n(3418),d=n(9751),p=n(6903),f=n(6105),u=n(3420);let x=class extends r.w3{loading=!0;largestFinds={artifacts:new u.s({comparator:(e,t)=>t.amount-e.amount,maxSize:25}),experience:{...(0,d.a)(c.p3,(()=>new u.s({comparator:(e,t)=>t.amount-e.amount,maxSize:25}))),all:new u.s({comparator:(e,t)=>t.amount-e.amount,maxSize:25})}};smallestFinds={artifacts:new u.s({comparator:(e,t)=>e.amount-t.amount,maxSize:25}),experience:{...(0,d.a)(c.p3,(()=>new u.s({comparator:(e,t)=>e.amount-t.amount,maxSize:25}))),all:new u.s({comparator:(e,t)=>e.amount-t.amount,maxSize:25})}};experienceKeys=["all",...c.p3];get keyTranslations(){return{artifacts:this.$i18n.$t.extension.empire.lifeforms.topFinds.artifacts,experience:this.$i18n.$t.extension.empire.lifeforms.topFinds.experience}}get colors(){const e=l.V.settings.colors;return{artifacts:(0,m.U)(e.lifeformDiscoveries.events.artifacts),lifeform:(0,d.a)(c.p3,(t=>(0,m.U)(e.lifeforms[t]))),experience:(0,m.U)(e.lifeformDiscoveries.events.knownLifeformFound)}}get artifactColumns(){return[{key:"size",label:this.$i18n.$t.extension.empire.lifeforms.topFinds.size},{key:"amount",label:this.$i18n.$t.extension.empire.lifeforms.topFinds.amount},{key:"date",label:this.$i18n.$t.extension.empire.lifeforms.topFinds.date}]}get experienceColumns(){return[{key:"lifeform",label:this.$i18n.$t.extension.empire.lifeforms.lifeform},{key:"amount",label:this.$i18n.$t.extension.empire.lifeforms.topFinds.amount},{key:"date",label:this.$i18n.$t.extension.empire.lifeforms.topFinds.date}]}async mounted(){const e=await p.F.getRawData();e.forEach((e=>{e.type==f.y.artifacts?this.addArtifactFind(e):e.type==f.y.knownLifeformFound&&(this.addExperienceFind(e),this.addExperienceFind(e,"all"))})),this.loading=!1}addExperienceFind(e,t=e.lifeform){this.largestFinds.experience[t].add({lifeform:e.lifeform,amount:e.experience,date:e.date}),this.smallestFinds.experience[t].add({lifeform:e.lifeform,amount:e.experience,date:e.date})}addArtifactFind(e){this.largestFinds.artifacts.add({size:e.size,amount:e.artifacts,date:e.date})}};x=(0,o.gn)([(0,r.wA)({components:{ExpeditionSizeIcon:a.Z}})],x);const h=x,$=h;var v=n(1001),g=(0,v.Z)($,i,s,!1,null,"69933763",null);const y=g.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,