"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[8875],{4698:(e,t,s)=>{s.d(t,{O:()=>p});var n=s(1821),o=s(3347),r=s(1745),a=s(776),i=s(5424),u=s(612),c=s(6105),l=s(3418),d=s(7331),m=s(2057);function p(e){const t=n.j.locale;n.j.locale=e;const s={dateRanges:[{label:n.j.$t.extension.settings.dateRanges.defaultNames.today,type:"day",skip:0,take:1},{label:n.j.$t.extension.settings.dateRanges.defaultNames.yesterday,type:"day",skip:1,take:1},{label:n.j.$t.extension.settings.dateRanges.defaultNames.currentWeek,type:"week",skip:0,take:1},{label:n.j.$t.extension.settings.dateRanges.defaultNames.lastWeek,type:"week",skip:1,take:1},{label:n.j.$t.extension.settings.dateRanges.defaultNames.currentMonth,type:"month",skip:0,take:1},{type:"all"}],lostShipsResourceUnits:{factor:1,deuteriumFactor:1},resourceBalance:{showDetailedBreakdown:!1,includeExpeditionFoundShipsResourceUnits:!0,includeLostShipsResourceUnits:!0,includeLostLootResources:!0},conversionRates:{mode:"msu",msu:{crystal:1.5,deuterium:3},dsu:{metal:3,crystal:2}},showCellsWithConvertedResourceUnits:!0,expeditionFoundShipsResourceUnits:{factor:1,deuteriumFactor:1},extensionLanguage:e,defaultRoutes:{},colors:{combatResults:{[o.a.won]:"#00c23a",[o.a.draw]:"#aaaaaa",[o.a.lost]:"#d11515"},resources:{[d._.metal]:"#ff5e00",[d._.crystal]:"#1a9fff",[d._.deuterium]:"#1bee8f",totalConverted:"#999999"},ships:{[m.g.lightFighter]:"#2472f3",[m.g.heavyFighter]:"#c72525",[m.g.cruiser]:"#fbbc04",[m.g.battleship]:"#9ecc00",[m.g.bomber]:"#00a95e",[m.g.battlecruiser]:"#075263",[m.g.destroyer]:"#de5200",[m.g.reaper]:"#16a8d4",[m.g.pathfinder]:"#ad135e",[m.g.smallCargo]:"#888888",[m.g.largeCargo]:"#ffffff",[m.g.espionageProbe]:"#4b17da",[m.g.deathStar]:"#262530",[m.g.recycler]:"#8aff8e",[m.g.colonyShip]:"#d7b58e",[m.g.crawler]:"#94b4ff",[m.g.solarSatellite]:"#dd94ff"},expeditions:{events:{[i.r.nothing]:"#404040",[i.r.resources]:"#2242e2",[i.r.fleet]:"#dddddd",[i.r.delay]:"#ff5e00",[i.r.early]:"#00c23a",[i.r.darkMatter]:"#33bcdb",[i.r.pirates]:"#ffb592",[i.r.aliens]:"#92ffdc",[i.r.combat]:"#ffb592",[i.r.item]:"#6f23e1",[i.r.trader]:"#fbbc04",[i.r.lostFleet]:"#d11515"},sizes:{[a.Mm.small]:"#404040",[a.Mm.medium]:"#3e85fe",[a.Mm.large]:"#e01a76","fled-death-star":"#dddddd"},depletion:{[r.q.none]:"#00c23a",[r.q.low]:"#fbbc04",[r.q.medium]:"#ff5e00",[r.q.high]:"#c72525",unknown:"#404040"}},lifeformDiscoveries:{events:{[c.y.nothing]:"#404040",[c.y.lostShip]:"#d11515",[c.y.knownLifeformFound]:"#33bcdb",[c.y.newLifeformFound]:"#00c23a",[c.y.artifacts]:"#fbbc04"},artifactFindingSizes:{[u.k.small]:"#404040",[u.k.medium]:"#3e85fe",[u.k.large]:"#e01a76",[u.k.storageFull]:"#d11515"}},lifeforms:{[l.e5.humans]:"#7ec000",[l.e5.rocktal]:"#df6642",[l.e5.mechas]:"#4b91e7",[l.e5.kaelesh]:"#9863e9"}},universeHistory:{updateTimes:[72e6],enabled:!1,trackHistory:!1},combatTracking:{ignoreEspionageFights:!0},messageTracking:{showSimplifiedResults:!0},debrisFields:{separateExpeditionDebrisFields:!1}};return n.j.locale=t,s}},8288:(e,t,s)=>{s.d(t,{B:()=>r});var n=s(7331),o=s(917);function r(e,t={}){const s={metal:0,crystal:0,deuterium:0,...e},r={metal:1,crystal:1,deuterium:1,...t};n.P.forEach((e=>s[e]*=r[e]));const{mode:a,msu:i,dsu:u}=o.V.settings.conversionRates;return"msu"==a?s.metal+s.crystal*i.crystal+s.deuterium*i.deuterium:s.deuterium+s.crystal/u.crystal+s.metal/u.metal}},6597:(e,t,s)=>{s.d(t,{Z:()=>p});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"conversion-rate-settings fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.title)}})]),s("div",{staticClass:"fake-table-body"},[s("select",{domProps:{value:e.conversionMode},on:{input:function(t){return e.setConversionMode(t.target.value)}}},[s("option",{attrs:{value:"msu"},domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.msuLong+" ("+e.$i18n.$t.extension.common.msu+")")}}),s("option",{attrs:{value:"dsu"},domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.dsuLong+" ("+e.$i18n.$t.extension.common.dsu+")")}})]),"msu"==e.conversionMode?s("span",{staticClass:"inputs"},[s("span",[s("o-resource",{attrs:{resource:"crystal"}}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.msu.crystal,expression:"msu.crystal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"1",max:"3",step:"0.01"},domProps:{value:e.msu.crystal},on:{change:[function(t){e.$set(e.msu,"crystal",e._n(t.target.value))},function(t){return e.updateMsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("o-resource",{attrs:{resource:"metal"}})],1),s("span",[s("o-resource",{attrs:{resource:"deuterium"}}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.msu.deuterium,expression:"msu.deuterium",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"2",max:"5",step:"0.01"},domProps:{value:e.msu.deuterium},on:{change:[function(t){e.$set(e.msu,"deuterium",e._n(t.target.value))},function(t){return e.updateMsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("o-resource",{attrs:{resource:"metal"}})],1)]):s("span",{staticClass:"inputs"},[s("span",[s("o-resource",{attrs:{resource:"metal"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.dsu.metal,expression:"dsu.metal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"2",max:"5",step:"0.01"},domProps:{value:e.dsu.metal},on:{change:[function(t){e.$set(e.dsu,"metal",e._n(t.target.value))},function(t){return e.updateDsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("o-resource",{attrs:{resource:"deuterium"}})],1),s("span",[s("o-resource",{attrs:{resource:"crystal"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.dsu.crystal,expression:"dsu.crystal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"1",max:"3",step:"0.01"},domProps:{value:e.dsu.crystal},on:{change:[function(t){e.$set(e.dsu,"crystal",e._n(t.target.value))},function(t){return e.updateDsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("o-resource",{attrs:{resource:"deuterium"}})],1)])])])},o=[],r=s(655),a=s(4028),i=s(917);let u=class extends a.w3{msu={crystal:2,deuterium:3};dsu={metal:3,crystal:2};get msuRates(){return i.V.settings.conversionRates.msu}get dsuRates(){return i.V.settings.conversionRates.dsu}get conversionMode(){return i.V.settings.conversionRates.mode}setConversionMode(e){i.V.updateSettings({...i.V.settings,conversionRates:{...i.V.settings.conversionRates,mode:e}})}onMsuRatesChanged(){const{crystal:e,deuterium:t}=this.msuRates;this.msu.crystal=e,this.msu.deuterium=t}updateMsuConversionRates(){i.V.updateSettings({...i.V.settings,conversionRates:{...i.V.settings.conversionRates,msu:this.msu}})}onDsuRatesChanged(){const{crystal:e,metal:t}=this.dsuRates;this.dsu.crystal=e,this.dsu.metal=t}updateDsuConversionRates(){i.V.updateSettings({...i.V.settings,conversionRates:{...i.V.settings.conversionRates,dsu:this.dsu}})}};(0,r.gn)([(0,a.RL)("msuRates",{immediate:!0})],u.prototype,"onMsuRatesChanged",null),(0,r.gn)([(0,a.RL)("dsuRates",{immediate:!0})],u.prototype,"onDsuRatesChanged",null),u=(0,r.gn)([(0,a.wA)({})],u);const c=u,l=c;var d=s(1001),m=(0,d.Z)(l,n,o,!1,null,"13cde7dd",null);const p=m.exports},5209:(e,t,s)=>{s.d(t,{Z:()=>p});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table expedition-ship-resource-units-factor-settings"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.expeditions.resourceUnitFactorsOfShipFoundOnExpeditions)}})]),s("div",{staticClass:"fake-table-body"},[s("span",{staticClass:"inputs"},[s("span",[s("span",{staticClass:"two-resources"},[s("o-resource",{attrs:{resource:"metal"}}),s("o-resource",{attrs:{resource:"crystal"}})],1),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.factor,expression:"factor",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"0",max:"1",step:"0.01"},domProps:{value:e.factor},on:{change:[function(t){e.factor=e._n(t.target.value)},function(t){return e.updateFactors()}],focus:function(t){e.isFocused=!0},blur:[function(t){return e.onBlur()},function(t){return e.$forceUpdate()}]}})]),s("span",[s("o-resource",{attrs:{resource:"deuterium"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.deuteriumFactor,expression:"deuteriumFactor",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"0",max:"1",step:"0.01"},domProps:{value:e.deuteriumFactor},on:{change:[function(t){e.deuteriumFactor=e._n(t.target.value)},function(t){return e.updateFactors()}],focus:function(t){e.isFocused=!0},blur:[function(t){return e.onBlur()},function(t){return e.$forceUpdate()}]}})],1)])])])},o=[],r=s(655),a=s(4028),i=s(917);let u=class extends a.w3{factor=1;deuteriumFactor=1;isFocused=!1;get factors(){return i.V.settings.expeditionFoundShipsResourceUnits}onFactorsChanged(){const{factor:e,deuteriumFactor:t}=this.factors;this.isFocused||(this.factor=e,this.deuteriumFactor=t)}updateFactors(){i.V.updateSettings({...i.V.settings,expeditionFoundShipsResourceUnits:{factor:this.factor,deuteriumFactor:this.deuteriumFactor}})}onBlur(){this.isFocused=!1,this.onFactorsChanged()}};(0,r.gn)([(0,a.RL)("factors",{immediate:!0})],u.prototype,"onFactorsChanged",null),u=(0,r.gn)([(0,a.wA)({})],u);const c=u,l=c;var d=s(1001),m=(0,d.Z)(l,n,o,!1,null,"160db831",null);const p=m.exports},2546:(e,t,s)=>{s.d(t,{Z:()=>p});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table expedition-ship-resource-units-factor-settings"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.combats.resourceUnitFactorsOfLostShips)}})]),s("div",{staticClass:"fake-table-body"},[s("span",{staticClass:"inputs"},[s("span",[s("span",{staticClass:"two-resources"},[s("o-resource",{attrs:{resource:"metal"}}),s("o-resource",{attrs:{resource:"crystal"}})],1),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.factor,expression:"factor",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"0",max:"1",step:"0.01"},domProps:{value:e.factor},on:{change:[function(t){e.factor=e._n(t.target.value)},function(t){return e.updateFactors()}],focus:function(t){e.isFocused=!0},blur:[function(t){return e.onBlur()},function(t){return e.$forceUpdate()}]}})]),s("span",[s("o-resource",{attrs:{resource:"deuterium"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.deuteriumFactor,expression:"deuteriumFactor",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"0",max:"1",step:"0.01"},domProps:{value:e.deuteriumFactor},on:{change:[function(t){e.deuteriumFactor=e._n(t.target.value)},function(t){return e.updateFactors()}],focus:function(t){e.isFocused=!0},blur:[function(t){return e.onBlur()},function(t){return e.$forceUpdate()}]}})],1)])])])},o=[],r=s(655),a=s(4028),i=s(917);let u=class extends a.w3{factor=1;deuteriumFactor=1;isFocused=!1;get factors(){return i.V.settings.lostShipsResourceUnits}onFactorsChanged(){const{factor:e,deuteriumFactor:t}=this.factors;this.isFocused||(this.factor=e,this.deuteriumFactor=t)}updateFactors(){i.V.updateSettings({...i.V.settings,lostShipsResourceUnits:{factor:this.factor,deuteriumFactor:this.deuteriumFactor}})}onBlur(){this.isFocused=!1,this.onFactorsChanged()}};(0,r.gn)([(0,a.RL)("factors",{immediate:!0})],u.prototype,"onFactorsChanged",null),u=(0,r.gn)([(0,a.wA)({})],u);const c=u,l=c;var d=s(1001),m=(0,d.Z)(l,n,o,!1,null,"7b3b1bc9",null);const p=m.exports},1799:(e,t,s)=>{s.d(t,{Z:()=>m});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("button",{staticClass:"reset-button",attrs:{title:e.$i18n.$t.extension.settings.reset},on:{click:function(t){return e.$emit("reset")}}},[s("span",{staticClass:"mdi mdi-refresh"})])},o=[],r=s(655),a=s(4028);let i=class extends a.w3{};i=(0,r.gn)([(0,a.wA)({})],i);const u=i,c=u;var l=s(1001),d=(0,l.Z)(c,n,o,!1,null,"6ca60f84",null);const m=d.exports},7174:(e,t,s)=>{s.d(t,{Z:()=>p});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("grid-table",{staticClass:"color-settings",staticStyle:{width:"max-content"},attrs:{columns:e.columns,items:e.items},scopedSlots:e._u([{key:"header-key",fn:function(t){var n=t.label;return[s("span",{domProps:{textContent:e._s(n)}}),s("reset-button",{on:{reset:function(t){return e.$emit("reset")}}})]}},{key:"cell-key",fn:function(t){var n=t.value;return[s("div",{staticClass:"color-input",on:{click:function(t){e.$refs["colorInput-"+n].click()}}},[s("input",{ref:"colorInput-"+n,attrs:{type:"color"},domProps:{value:e.colors[n]},on:{change:function(t){return e.updateColor(n,t)}}}),s("div",{staticClass:"color-indicator",style:{background:e.colors[n]}}),s("span",{domProps:{textContent:e._s(e.labels[n])}})])]}}])})},o=[],r=s(655),a=s(4028),i=s(1799);let u=class extends a.w3{header;colors;labels;keys;get columns(){return[{key:"key",label:this.header,headerClass:"color-settings-header"}]}get items(){const e=this.keys??Object.keys(this.colors);return e.map((e=>({key:e})))}updateColor(e,t){t.target instanceof HTMLInputElement&&(this.colors={...this.colors,[e]:t.target.value})}};(0,r.gn)([(0,a.fI)({required:!0,type:String})],u.prototype,"header",void 0),(0,r.gn)([(0,a.Ey)({required:!0,type:Object})],u.prototype,"colors",void 0),(0,r.gn)([(0,a.fI)({required:!0,type:Object})],u.prototype,"labels",void 0),(0,r.gn)([(0,a.fI)({required:!1,type:Array,default:()=>null})],u.prototype,"keys",void 0),u=(0,r.gn)([(0,a.wA)({components:{ResetButton:i.Z}})],u);const c=u,l=c;var d=s(1001),m=(0,d.Z)(l,n,o,!1,null,"2f24a3e0",null);const p=m.exports},7196:(e,t,s)=>{s.d(t,{Z:()=>v});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("color-settings-table",{attrs:{header:e.$i18n.$t.extension.settings.colors.resources,labels:e.labels,keys:e.keys,value:e.colors},on:{input:function(t){return e.updateColors(t)},reset:function(t){return e.resetColors()}}})},o=[],r=s(655),a=s(9167),i=s(7331),u=s(4698),c=s(917),l=s(4028),d=s(7174);let m=class extends l.w3{get labels(){return{[i._.metal]:this.$i18n.$t.extension.resources.metal,[i._.crystal]:this.$i18n.$t.extension.resources.crystal,[i._.deuterium]:this.$i18n.$t.extension.resources.deuterium,totalConverted:`${this.$i18n.$t.extension.common.resourceUnits} (${this.$i18n.$t.extension.common.msu}/${this.$i18n.$t.extension.common.dsu})`}}keys=[i._.metal,i._.crystal,i._.deuterium,"totalConverted"];get colors(){return c.V.settings.colors.resources}updateColors(e){c.V.updateSettings({...c.V.settings,colors:{...c.V.settings.colors,resources:e}})}resetColors(){const e=(0,u.O)(a.I.de).colors.resources;this.updateColors(e)}};m=(0,r.gn)([(0,l.wA)({components:{ColorSettingsTable:d.Z}})],m);const p=m,f=p;var g=s(1001),h=(0,g.Z)(f,n,o,!1,null,null,null);const v=h.exports},4795:(e,t,s)=>{s.d(t,{Z:()=>p});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.resourceBalance.includeLostLootResources.header)}})]),s("div",{staticClass:"fake-table-body"},[s("checkbox",{attrs:{value:e.include,label:e.$i18n.$t.extension.settings.resourceBalance.includeLostLootResources.checkboxLabel},on:{input:function(t){return e.toggleInclude(t)}}})],1)])},o=[],r=s(655),a=s(4028),i=s(917);let u=class extends a.w3{get include(){return i.V.settings.resourceBalance.includeLostLootResources}toggleInclude(e){i.V.updateSettings({...i.V.settings,resourceBalance:{...i.V.settings.resourceBalance,includeLostLootResources:e}})}};u=(0,r.gn)([(0,a.wA)({})],u);const c=u,l=c;var d=s(1001),m=(0,d.Z)(l,n,o,!1,null,"54165ce9",null);const p=m.exports},8004:(e,t,s)=>{s.d(t,{Z:()=>p});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.resourceBalance.includeShipsFoundOnExpeditions.header)}})]),s("div",{staticClass:"fake-table-body"},[s("checkbox",{attrs:{value:e.include,label:e.$i18n.$t.extension.settings.resourceBalance.includeShipsFoundOnExpeditions.checkboxLabel},on:{input:function(t){return e.toggleInclude(t)}}})],1)])},o=[],r=s(655),a=s(4028),i=s(917);let u=class extends a.w3{get include(){return i.V.settings.resourceBalance.includeExpeditionFoundShipsResourceUnits}toggleInclude(e){i.V.updateSettings({...i.V.settings,resourceBalance:{...i.V.settings.resourceBalance,includeExpeditionFoundShipsResourceUnits:e}})}};u=(0,r.gn)([(0,a.wA)({})],u);const c=u,l=c;var d=s(1001),m=(0,d.Z)(l,n,o,!1,null,"2d954bb7",null);const p=m.exports},3467:(e,t,s)=>{s.d(t,{Z:()=>p});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.resourceBalance.includeShipsLostInCombats.header)}})]),s("div",{staticClass:"fake-table-body"},[s("checkbox",{attrs:{value:e.include,label:e.$i18n.$t.extension.settings.resourceBalance.includeShipsLostInCombats.checkboxLabel},on:{input:function(t){return e.toggleInclude(t)}}})],1)])},o=[],r=s(655),a=s(4028),i=s(917);let u=class extends a.w3{get include(){return i.V.settings.resourceBalance.includeLostShipsResourceUnits}toggleInclude(e){i.V.updateSettings({...i.V.settings,resourceBalance:{...i.V.settings.resourceBalance,includeLostShipsResourceUnits:e}})}};u=(0,r.gn)([(0,a.wA)({})],u);const c=u,l=c;var d=s(1001),m=(0,d.Z)(l,n,o,!1,null,"0388589a",null);const p=m.exports},3421:(e,t,s)=>{s.d(t,{Z:()=>h});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("scrollable-chart",{attrs:{datasets:e.computedDatasets,"x-label-formatter":function(t){return e.formatDate(t)},"no-legend":e.noLegend,"hide-tooltip-footer":e.noTooltipFooter},scopedSlots:e._u([{key:"tooltip-footer",fn:function(t){var s=t.datasets;return[e._t("tooltip-footer",null,{datasets:s})]}}],null,!0)})},o=[],r=s(655),a=s(9119),i=s(5347),u=s(9383),c=s(7349),l=s(4028);let d=class extends l.w3{datasets;noLegend;noTooltipFooter;firstDay;itemsPerDay;minDays;get minDay(){const e="number"===typeof this.firstDay?this.firstDay:this.firstDay.getTime(),t=(0,a.Z)(Date.now());return Math.min(e,(0,i.Z)(t,this.minDays-1).getTime())}get computedDatasets(){const e=this.minDay,t=(0,u.Z)((0,a.Z)(Date.now()),e),s=Array.from({length:t+1}).map(((t,s)=>(0,c.Z)(e,s).getTime())),n=s.map((e=>this.itemsPerDay[e]??null)),o=n.filter((e=>null!=e)).length;return this.datasets.map((e=>{const t=n.map((t=>null==t?0:e.getValue(t))),s=t.reduce(((e,t)=>e+t),0);return{key:e.key,color:e.color,label:e.label,values:t.map(((e,t)=>({x:t,y:e}))),filled:e.filled??!0,stack:e.stack??!0,hidePoints:!1,average:1==e.showAverage?s/Math.max(1,o):void 0}}))}formatDate(e){const t=(0,c.Z)(this.minDay,e);return this.$i18n.$d(t,"date")}};(0,r.gn)([(0,l.fI)({required:!0,type:Array})],d.prototype,"datasets",void 0),(0,r.gn)([(0,l.fI)({required:!1,type:Boolean})],d.prototype,"noLegend",void 0),(0,r.gn)([(0,l.fI)({required:!1,type:Boolean})],d.prototype,"noTooltipFooter",void 0),(0,r.gn)([(0,l.fI)({required:!0,type:[Number,Date]})],d.prototype,"firstDay",void 0),(0,r.gn)([(0,l.fI)({required:!0,type:Object})],d.prototype,"itemsPerDay",void 0),(0,r.gn)([(0,l.fI)({required:!1,type:Number,default:()=>30})],d.prototype,"minDays",void 0),d=(0,r.gn)([(0,l.wA)({})],d);const m=d,p=m;var f=s(1001),g=(0,f.Z)(p,n,o,!1,null,null,null);const h=g.exports},8875:(e,t,s)=>{s.r(t),s.d(t,{default:()=>w});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"chart-container"},[s("stats-chart",{attrs:{datasets:e.datasets,firstDay:e.firstDay,itemsPerDay:e.eventsPerDay},scopedSlots:e._u([{key:"tooltip-footer",fn:function(t){var n=t.datasets;return[e.getVisibleDatasets(n).length<n.length?[s("div",{staticClass:"footer-item"},[s("div",{staticClass:"number",domProps:{textContent:e._s(e.$i18n.$n(e.getResourcesAmount(e.getVisibleDatasets(n))))}}),s("div",{domProps:{textContent:e._s(e.$i18n.$t.extension.common.resourceUnits)}}),s("div",{staticClass:"number",domProps:{textContent:e._s(e.$i18n.$n(e.getConvertedResourcesAmount(e.getVisibleDatasets(n))))}}),s("div",{domProps:{textContent:e._s(e.$i18n.$t.extension.common.resourceUnits+" ("+e.conversionModeText+")")}})]),s("hr")]:e._e(),s("div",{staticClass:"footer-item"},[s("div",{staticClass:"number",domProps:{textContent:e._s(e.$i18n.$n(e.getResourcesAmount(n)))}}),s("div",{domProps:{textContent:e._s(e.$i18n.$t.extension.common.resourceUnits)}}),s("div",{staticClass:"number",domProps:{textContent:e._s(e.$i18n.$n(e.getConvertedResourcesAmount(n)))}}),s("div",{domProps:{textContent:e._s(e.$i18n.$t.extension.common.resourceUnits+" ("+e.conversionModeText+")")}})])]}}])}),s("floating-menu",{staticClass:"floating-settings",attrs:{left:""},scopedSlots:e._u([{key:"activator",fn:function(){return[s("button",{on:{click:function(t){e.showSettings=!e.showSettings}}},[s("span",{staticClass:"mdi mdi-cog"})])]},proxy:!0}]),model:{value:e.showSettings,callback:function(t){e.showSettings=t},expression:"showSettings"}},[s("expedition-ship-resource-units-factor-settings"),s("lost-ship-resource-units-factor-settings"),s("hr",{staticClass:"two-column"}),s("include-ships-found-on-expeditions-in-resource-balance-settings"),s("include-ships-lost-in-combats-in-resource-balance"),s("IncludeLostLootResourcesInResourceBalance"),s("hr",{staticClass:"two-column"}),s("conversion-rate-settings"),s("resource-color-settings")],1)],1)},o=[],r=s(655),a=s(4028),i=s(3421),u=s(7331),c=s(4992),l=s(3185),d=s.n(l),m=s(7090),p=s(5359),f=s(917),g=s(7196),h=s(6597),v=s(5209),y=s(2546),b=s(8004),x=s(3467),C=s(4795),$=s(8288);let R=class extends a.w3{showSettings=!1;get colors(){return f.V.settings.colors.resources}get includeFoundShipsFactor(){const{factor:e,deuteriumFactor:t}=f.V.settings.expeditionFoundShipsResourceUnits,s=this.includeFoundShips?1:0;return{[u._.metal]:e*s,[u._.crystal]:e*s,[u._.deuterium]:t*s}}get includeLostShipsFactor(){const{factor:e,deuteriumFactor:t}=f.V.settings.lostShipsResourceUnits,s=this.includeLostShips?1:0;return{[u._.metal]:e*s,[u._.crystal]:e*s,[u._.deuterium]:t*s}}get includeFoundShips(){return f.V.settings.resourceBalance.includeExpeditionFoundShipsResourceUnits}get includeLostShips(){return f.V.settings.resourceBalance.includeLostShipsResourceUnits}get includeLostLoot(){return f.V.settings.resourceBalance.includeLostLootResources}get conversionModeText(){return"msu"==f.V.settings.conversionRates.mode?this.$i18n.$t.extension.common.msu:this.$i18n.$t.extension.common.dsu}get firstDay(){return d()([m.m.firstDay,c.t.firstDay,p.J.firstDay])}get eventsPerDay(){const e={};return Object.keys(m.m.dailyResults).forEach((t=>{const s=parseInt(t,10);e[s]??={},e[s].expeditions=m.m.dailyResults[s]})),Object.keys(c.t.dailyResults).forEach((t=>{const s=parseInt(t,10);e[s]??={},e[s].combatReports=c.t.dailyResults[s]})),Object.keys(p.J.dailyResults).forEach((t=>{const s=parseInt(t,10);e[s]??={},e[s].debrisFieldReports=p.J.dailyResults[s]})),e}get datasets(){return[...u.P.map((e=>({key:e,label:this.$i18n.$t.extension.resources[e],color:this.colors[e],filled:!0,getValue:t=>this.getResource(t,e),showAverage:!0}))),{key:"total",label:`${this.$i18n.$t.extension.common.resourceUnits} (${"msu"==f.V.settings.conversionRates.mode?this.$i18n.$t.extension.common.msu:this.$i18n.$t.extension.common.dsu})`,color:this.colors.totalConverted,filled:!1,getValue:e=>(0,$.B)({metal:this.getResource(e,u._.metal),crystal:this.getResource(e,u._.crystal),deuterium:this.getResource(e,u._.deuterium)}),stack:!1,showAverage:!0}]}getVisibleDatasets(e){return e.filter((e=>e.visible))}getResourcesAmount(e){const t=[u._.metal,u._.crystal,u._.deuterium];return e.filter((e=>t.includes(e.key.toString()))).reduce(((e,t)=>e+t.value),0)}getConvertedResourcesAmount(e){return e.reduce(((e,t)=>u.P.includes(t.key)?e+(0,$.B)({[t.key]:t.value}):e),0)}getResource(e,t){return this.getExpeditionResourceAmount(e.expeditions,t)+this.getCombatResourceAmount(e.combatReports,t)+this.getDebrisFieldResourceAmount(e.debrisFieldReports,t)}getExpeditionResourceAmount(e,t){if(null==e)return 0;const s=this.includeFoundShipsFactor[t],n=e.findings.resources[t]+e.findings.fleetResourceUnits[t]*s;return n}getCombatResourceAmount(e,t){if(null==e)return 0;const s=this.includeLostLoot?1:0,n=e.loot.lost[t]*s+e.loot.gained[t],o=this.includeLostShipsFactor[t],r=(e.lostShips.onExpeditions.resourceUnits[t]+e.lostShips.againstPlayers.resourceUnits[t])*o,a=n-r;return a}getDebrisFieldResourceAmount(e,t){return null==e?0:e.total[t]}};R=(0,r.gn)([(0,a.wA)({components:{StatsChart:i.Z,ResourceColorSettings:g.Z,ConversionRateSettings:h.Z,ExpeditionShipResourceUnitsFactorSettings:v.Z,LostShipResourceUnitsFactorSettings:y.Z,IncludeShipsFoundOnExpeditionsInResourceBalanceSettings:b.Z,IncludeShipsLostInCombatsInResourceBalance:x.Z,IncludeLostLootResourcesInResourceBalance:C.Z}})],R);const k=R,F=k;var _=s(1001),S=(0,_.Z)(F,n,o,!1,null,"84dee55e",null);const w=S.exports},8734:(e,t)=>{function s(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=s,e.exports=t.default},7349:(e,t,s)=>{s.d(t,{Z:()=>a});var n=s(3946),o=s(9013),r=s(3882);function a(e,t){(0,r.Z)(2,arguments);var s=(0,o.Z)(e),a=(0,n.Z)(t);return isNaN(a)?new Date(NaN):a?(s.setDate(s.getDate()+a),s):s}},9383:(e,t,s)=>{s.d(t,{Z:()=>l});var n=s(9013),o=s(4262),r=s(9119),a=s(3882),i=864e5;function u(e,t){(0,a.Z)(2,arguments);var s=(0,r.Z)(e),n=(0,r.Z)(t),u=s.getTime()-(0,o.Z)(s),c=n.getTime()-(0,o.Z)(n);return Math.round((u-c)/i)}function c(e,t){var s=e.getFullYear()-t.getFullYear()||e.getMonth()-t.getMonth()||e.getDate()-t.getDate()||e.getHours()-t.getHours()||e.getMinutes()-t.getMinutes()||e.getSeconds()-t.getSeconds()||e.getMilliseconds()-t.getMilliseconds();return s<0?-1:s>0?1:s}function l(e,t){(0,a.Z)(2,arguments);var s=(0,n.Z)(e),o=(0,n.Z)(t),r=c(s,o),i=Math.abs(u(s,o));s.setDate(s.getDate()-r*i);var l=Number(c(s,o)===-r),d=r*(i-l);return 0===d?0:d}},5347:(e,t,s)=>{s.d(t,{Z:()=>a});var n=s(3946),o=s(7349),r=s(3882);function a(e,t){(0,r.Z)(2,arguments);var s=(0,n.Z)(t);return(0,o.Z)(e,-s)}},3185:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a;var n=r(s(1171)),o=r(s(8734));function r(e){return e&&e.__esModule?e:{default:e}}function a(e){var t,s;if((0,o.default)(1,arguments),e&&"function"===typeof e.forEach)t=e;else{if("object"!==typeof e||null===e)return new Date(NaN);t=Array.prototype.slice.call(e)}return t.forEach((function(e){var t=(0,n.default)(e);(void 0===s||s>t||isNaN(t.getDate()))&&(s=t)})),s||new Date(NaN)}e.exports=t.default},1171:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var n=o(s(8734));function o(e){return e&&e.__esModule?e:{default:e}}function r(e){(0,n.default)(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"===typeof e||"[object Number]"===t?new Date(e):("string"!==typeof e&&"[object String]"!==t||"undefined"===typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}e.exports=t.default}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,