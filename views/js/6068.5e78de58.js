"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[6068],{3445:(e,t,n)=>{function a(e,t){const n=["galaxy","system","position","type"];for(const a of n){const n=e[a]-t[a];if(0!=n)return n}return 0}function s(e,t){return 0==a(e,t)}n.d(t,{e:()=>a,a:()=>s})},8878:(e,t,n)=>{n.r(t),n.d(t,{default:()=>q});var a=function(){var e=this,t=e.$createElement,n=e._self._c||t;return e.historyTrackingEnabled?n("div",{staticClass:"history"},[e.dataModuleLoading?n("loading-spinner"):[n("grid-table",{staticClass:"player-selection-table",attrs:{columns:e.tableColumns,items:e.tableItems},scopedSlots:e._u([{key:"cell-player",fn:function(t){var a=t.value;return[null==a?[n("input",{directives:[{name:"model",rawName:"v-model",value:e.selectedPlayerName,expression:"selectedPlayerName"}],staticStyle:{width:"100%"},attrs:{type:"text",placeholder:e.$i18n.$t.extension.universeHistory.playerSelection.search,list:"player-list"},domProps:{value:e.selectedPlayerName},on:{change:function(t){return e.onPlayerSelected(t.target.value)},input:function(t){t.target.composing||(e.selectedPlayerName=t.target.value)}}}),n("datalist",{attrs:{id:"player-list"}},e._l(e.playerNames,(function(t,a){return n("option",{key:a},[e._v(" "+e._s(t)+" ")])})),0)]:n("div",{staticClass:"list-item"},[n("span",{domProps:{textContent:e._s(a.name)}})])]}}],null,!1,3254085903)}),n("tabs",{attrs:{tabs:e.tabs},scopedSlots:e._u([{key:"tab-content-status",fn:function(){return[null!=e.playerId?n("status-history-chart",{attrs:{playerId:e.playerId}}):e._e()]},proxy:!0},{key:"tab-content-nickname",fn:function(){return[null!=e.playerId?n("player-name-history-table",{attrs:{playerId:e.playerId}}):e._e()]},proxy:!0},{key:"tab-content-alliance",fn:function(){return[null!=e.playerId?n("player-alliance-history-table",{attrs:{playerId:e.playerId}}):e._e()]},proxy:!0},{key:"tab-content-planet-moons",fn:function(){return[null!=e.playerId?n("player-planets-and-moons-history",{attrs:{playerId:e.playerId}}):e._e()]},proxy:!0}],null,!1,3284828876)})]],2):n("universe-history-tracking-settings")},s=[],i=n(655),o=n(7545),r=n(8717),l=n(917),d=n(5038),c=n(4028),u=n(8364),y=n(5606),h=function(){var e=this,t=e.$createElement,n=e._self._c||t;return e.loading?n("loading-spinner"):n("grid-table",{attrs:{columns:e.nameHistoryColumns,items:e.nameHistoryItems,inline:""},scopedSlots:e._u([{key:"cell-start",fn:function(t){var a=t.value;return[n("span",null!=a?{domProps:{textContent:e._s(e.$i18n.$d(a,"date"))}}:{domProps:{textContent:e._s("?")}})]}},{key:"cell--",fn:function(){return[e._v("-")]},proxy:!0},{key:"cell-end",fn:function(t){var a=t.value;return[n("span",null!=a?{domProps:{textContent:e._s(e.$i18n.$d(a,"date"))}}:{domProps:{textContent:e._s(e.$i18n.$t.extension.universeHistory.today)}})]}}])})},m=[];let p=class extends c.w3{playerId;history=[];loading=!0;async onPlayerIdChanged(){this.history=await d.z.getPlayerNameHistory(this.playerId),this.loading=!1}get nameHistoryColumns(){return[{key:"name",label:this.$i18n.$t.extension.universeHistory.name},{key:"start",label:this.$i18n.$t.extension.universeHistory.from},{key:"-"},{key:"end",label:this.$i18n.$t.extension.universeHistory.until}]}get nameHistoryItems(){return this.history.map(((e,t,n)=>{const a=0==t?null:e.date,s=n[t+1]?.date??null;return{name:e.name,start:a,end:s}})).reverse()}};(0,i.gn)([(0,c.fI)({required:!0,type:Number})],p.prototype,"playerId",void 0),(0,i.gn)([(0,c.RL)("playerId",{immediate:!0})],p.prototype,"onPlayerIdChanged",null),p=(0,i.gn)([(0,c.wA)({})],p);const g=p,v=g;var f=n(1001),C=(0,f.Z)(v,h,m,!1,null,null,null);const b=C.exports;var x=function(){var e=this,t=e.$createElement,n=e._self._c||t;return e.loading?n("loading-spinner"):n("grid-table",{attrs:{columns:e.allianceHistoryColumns,items:e.allianceHistoryItems,inline:""},scopedSlots:e._u([{key:"cell-alliance",fn:function(t){var a=t.value;return[null!=a?n("span",{domProps:{textContent:e._s("["+a.tag+"] "+a.name)}}):n("i",{domProps:{textContent:e._s(e.$i18n.$t.extension.universeHistory.noAlliance)}})]}},{key:"cell-start",fn:function(t){var a=t.value;return[n("span",null!=a?{domProps:{textContent:e._s(e.$i18n.$d(a,"date"))}}:{domProps:{textContent:e._s("?")}})]}},{key:"cell--",fn:function(){return[e._v("-")]},proxy:!0},{key:"cell-end",fn:function(t){var a=t.value;return[n("span",null!=a?{domProps:{textContent:e._s(e.$i18n.$d(a,"date"))}}:{domProps:{textContent:e._s(e.$i18n.$t.extension.universeHistory.today)}})]}}])})},$=[];let k=class extends c.w3{playerId;history=[];loading=!0;async onPlayerIdChanged(){this.history=await d.z.getPlayerAllianceHistory(this.playerId),this.loading=!1}get allianceHistoryColumns(){return[{key:"alliance",label:this.$i18n.$t.extension.universeHistory.alliance},{key:"start",label:this.$i18n.$t.extension.universeHistory.from},{key:"-"},{key:"end",label:this.$i18n.$t.extension.universeHistory.until}]}get allianceHistoryItems(){return this.history.map(((e,t,n)=>{const a=0==t?null:e.date,s=n[t+1]?.date??null;return{alliance:d.z.alliances.find((t=>t.id==e.allianceId))??null,start:a,end:s}})).reverse()}};(0,i.gn)([(0,c.fI)({required:!0,type:Number})],k.prototype,"playerId",void 0),(0,i.gn)([(0,c.RL)("playerId",{immediate:!0})],k.prototype,"onPlayerIdChanged",null),k=(0,i.gn)([(0,c.wA)({})],k);const I=k,H=I;var P=(0,f.Z)(H,x,$,!1,null,null,null);const _=P.exports;var w=function(){var e=this,t=e.$createElement,n=e._self._c||t;return e.loading?n("loading-spinner"):n("div",{style:"--planets: "+e.history.length+"; --offset: "+e.clientHeight},[n("div",{ref:"container",staticClass:"planets-moons-history"},e._l(e.items,(function(t){return n("div",{key:t.date,staticClass:"row"},[n("div",{staticClass:"date-column",domProps:{textContent:e._s(e.$i18n.$d(t.date,"date"))}}),e._l(t.items,(function(t){return n("div",{key:"planet-"+t.id,staticClass:"planet",class:{new:t.state.hasChange&&"new"==t.state.value}},[n("span",{staticClass:"ogti ogti-planet"}),n("div",{class:{change:t.name.hasChange},domProps:{textContent:e._s(t.name.value)}}),n("div",{class:{change:t.coordinates.hasChange},domProps:{textContent:e._s(e.formatCoords(t.coordinates.value))}}),null!=t.moon?n("div",{staticClass:"moon",class:{new:t.moon.hasChange&&"new"==t.moon.value}},[n("span",{staticClass:"ogti ogti-moon"}),n("div",{class:{change:t.moon.name.hasChange},domProps:{textContent:e._s(t.moon.name.value)}}),n("div",{domProps:{textContent:e._s(e.$i18n.$n(t.moon.size)+" km")}})]):e._e()])})),n("div",{staticClass:"planet--empty",style:"--start: "+(t.items.length+2)+";"})],2)})),0),n("div",{staticClass:"scroller"})])},z=[],S=n(3445);let E=class extends c.w3{playerId;container;get parentContainer(){return this.container.closest("main")}history=[];moonSizes={};loading=!0;clientHeight=0;observer=new ResizeObserver((e=>this.updateClientHeight()));updateClientHeight(){if(0==this.items.length)return void(this.clientHeight=0);const e=this.container.clientHeight,t=this.parentContainer.clientHeight,n=this.container.querySelector(`.row:nth-of-type(${this.items.length}) > .date-column`).clientHeight,a=Math.max(t,e)-n-24;this.clientHeight=a}items=[];async onPlayerIdChanged(){this.history=await d.z.getPlayerPlanetsAndMoonsHistory(this.playerId),this.history.sort(((e,t)=>e.id-t.id)),this.getKnownMoons(this.history).forEach((e=>this.moonSizes[e.id]=e.size)),this.prepareData(),this.loading=!1,this.observer.disconnect(),await this.$nextTick(),this.observer.observe(this.container),this.observer.observe(this.parentContainer),await this.$nextTick(),this.parentContainer.scrollTop=this.parentContainer.scrollHeight}style=null;mounted(){const e=document.createElement("style");e.textContent="\n                .tabs > main {\n                    background: black linear-gradient(0deg, rgba(var(--color), 0.1), rgba(var(--color), 0.1)) !important;\n                }\n            ",document.head.append(e),this.style=e}destroyed(){this.observer.disconnect(),this.style?.remove()}getKnownMoons(e){const t=e.flatMap((e=>e.moons)).map((e=>({id:e.id,size:e.size})));return t.filter(((e,n)=>t.findIndex((t=>t.id==e.id))==n))}prepareData(){const e=this.getChangesByDate(),t=Object.keys(e).map((e=>(0,o.Y)(e,10))).sort(((e,t)=>e-t));this.items=this.getItems(e,t)}getItems(e,t){const n={},a=(e,t)=>void 0===e?"new":null,s=(e,t)=>{const n=t.find((e=>"deleted"!=e.state));return null!=n?{id:n.id,size:this.moonSizes[n.id],name:e?.name??n?.name??null,state:a(e?.state,n?.state)}:t.length>0||null==e?null:{...e,state:null}},i=(e,t,n)=>({id:e,name:n.name??t?.name??null,state:a(t?.state,n.state),coordinates:n.coordinates??t?.coordinates??null,moon:s(t?.moon,Object.values(n.moons))}),r=[];return t.forEach((t=>{const a={date:t,items:[]},s=e[t],l=Object.keys(s).map((e=>(0,o.Y)(e,10)));l.forEach((e=>{const t=n[e],o=s[e];if("deleted"==o.state)return void delete n[e];const r=i(e,t,o),l={id:e,name:{value:r.name,hasChange:void 0!==o.name},state:{value:r.state,hasChange:void 0!==o.state},coordinates:{value:r.coordinates,hasChange:void 0!==o.coordinates},moon:null==r.moon?null:{id:r.moon.id,size:r.moon.size,name:{value:r.moon.name,hasChange:Object.values(o.moons).some((e=>void 0!==e.name))},state:{value:r.state,hasChange:Object.values(o.moons).some((e=>void 0!==e.state))}}};a.items.push(l),n[e]=r}));const d=e=>null==e?null:{id:e.id,size:e.size,name:{value:e.name,hasChange:!1},state:{value:e.state,hasChange:!1}};Object.keys(n).map((e=>(0,o.Y)(e,10))).filter((e=>!l.includes(e))).forEach((e=>{const t=n[e],s={id:e,name:{value:t.name,hasChange:!1},state:{value:t.state,hasChange:!1},coordinates:{value:t.coordinates,hasChange:!1},moon:d(t.moon)};a.items.push(s)})),a.items.sort(((e,t)=>null==e.coordinates.value?null==t.coordinates.value?-1:1:null==t.coordinates.value?-1:(0,S.e)(e.coordinates.value,t.coordinates.value))),r.push(a)})),r}getChangesByDate(){const e={},t=(t,n)=>(e[t]??={},e[t][n]??={id:n,moons:[]}),n=(e,n,a)=>t(e,n).moons[a]??={id:a};return this.history.forEach((e=>{e.names.forEach((n=>t(n.date,e.id).name=n.name)),e.states.forEach((n=>t(n.date,e.id).state=n.state)),e.coordinates.forEach((n=>t(n.date,e.id).coordinates=n.coordinates)),e.moons.forEach((t=>{t.names.forEach((a=>n(a.date,e.id,t.id).name=a.name)),t.states.forEach((a=>n(a.date,e.id,t.id).state=a.state))}))})),e}formatCoords(e){return null==e?"":`[${e.galaxy}:${e.system}:${e.position}]`}};(0,i.gn)([(0,c.fI)({required:!0,type:Number})],E.prototype,"playerId",void 0),(0,i.gn)([(0,c.Rl)()],E.prototype,"container",void 0),(0,i.gn)([(0,c.RL)("playerId",{immediate:!0})],E.prototype,"onPlayerIdChanged",null),E=(0,i.gn)([(0,c.wA)({})],E);const T=E,N=T;var D=(0,f.Z)(N,w,z,!1,null,"ae0d7952",null);const M=D.exports;var A=n(5593);let L=class extends c.w3{get historyTrackingEnabled(){return l.V.settings.universeHistory.trackHistory}get tableColumns(){return[{key:"player",label:this.$i18n.$t.extension.universeHistory.playerSelection.header,headerClass:"player-selection-table-cell",class:"player-selection-table-cell"}]}get tableItems(){return[{player:null},{player:this.selectedPlayer}].filter(((e,t,n)=>n.findIndex((t=>t.player==e.player))==t))}get tabs(){return[{key:"status",label:this.$i18n.$t.extension.universeHistory.historyTabs.status},{key:"nickname",label:this.$i18n.$t.extension.universeHistory.historyTabs.nicknames},{key:"alliance",label:this.$i18n.$t.extension.universeHistory.historyTabs.alliances},{key:"planet-moons",label:this.$i18n.$t.extension.universeHistory.historyTabs.planetAndMoons}]}get selectedPlayer(){return d.z.players.find((e=>e.id==this.playerId))??null}get playerId(){try{const e=(0,o.Y)(this.$route.query.player??"",10);return e}catch{return null}}dataModuleLoading=!0;selectedPlayerName="";async mounted(){await A.D.ready,await this.redirectToDefault(),this.dataModuleLoading=!0,await d.z.ready,this.dataModuleLoading=!1}async redirectToDefault(){if(null!=this.playerId)return;const e=A.D.settings.universeHistory.players.history??r.l.playerId;await this.updatePlayerIdRoute(e)}updateSettings(e){const t=A.D.settings;A.D.updateSettings({...t,universeHistory:{...t.universeHistory,players:{...t.universeHistory.players,history:e}}})}async updatePlayerIdRoute(e){this.updateSettings(e),await this.$router.replace({query:{player:e.toString()}}),await this.redirectToDefault()}get playerNames(){return d.z.players.map((e=>e.name)).sort()}async onPlayerSelected(e){const t=d.z.players.find((t=>t.name.toLowerCase()==e.toLowerCase()));null!=t&&(await this.$nextTick(),this.selectedPlayerName="",await this.updatePlayerIdRoute(t.id))}};L=(0,i.gn)([(0,c.wA)({components:{UniverseHistoryTrackingSettings:u.Z,StatusHistoryChart:y.Z,PlayerNameHistoryTable:b,PlayerAllianceHistoryTable:_,PlayerPlanetsAndMoonsHistory:M}})],L);const R=L,O=R;var j=(0,f.Z)(O,a,s,!1,null,"268133e8",null);const q=j.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,