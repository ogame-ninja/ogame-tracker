"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[6119],{7377:(e,t,s)=>{var r;s.d(t,{f:()=>r}),function(e){e[e["FleetSpeedBonus"]=0]="FleetSpeedBonus",e[e["ResourceProductionBonus"]=1]="ResourceProductionBonus",e[e["StatsBonus"]=2]="StatsBonus",e[e["TechTimeReduction"]=3]="TechTimeReduction",e[e["TechCostReduction"]=4]="TechCostReduction",e[e["DenCapacityBonus"]=5]="DenCapacityBonus",e[e["CrawlerBonus"]=6]="CrawlerBonus",e[e["CrawlerEnergyConsumptionReduction"]=7]="CrawlerEnergyConsumptionReduction",e[e["PlayerClassBonus"]=8]="PlayerClassBonus",e[e["FuelConsumptionReduction"]=9]="FuelConsumptionReduction",e[e["FuelReturn"]=10]="FuelReturn",e[e["PhalanxRangeBonus"]=11]="PhalanxRangeBonus",e[e["ExpeditionEventProbabilityBonus"]=12]="ExpeditionEventProbabilityBonus",e[e["ExpeditionBonus"]=13]="ExpeditionBonus",e[e["EnergyProductionBonus"]=14]="EnergyProductionBonus",e[e["EnergyConsumptionReduction"]=15]="EnergyConsumptionReduction",e[e["AutoRecycleDebrisField"]=16]="AutoRecycleDebrisField",e[e["ShipProductionSpeedBonus"]=17]="ShipProductionSpeedBonus",e[e["FoodConsumptionReduction"]=18]="FoodConsumptionReduction",e[e["MaxPopulationBonus"]=19]="MaxPopulationBonus",e[e["PopulationGrowthBonus"]=20]="PopulationGrowthBonus",e[e["LifeformResearchBonusBoost"]=21]="LifeformResearchBonusBoost",e[e["PopulationProtection"]=22]="PopulationProtection",e[e["SpaceDockBonus"]=23]="SpaceDockBonus",e[e["PlanetFieldsBonus"]=24]="PlanetFieldsBonus",e[e["LifeformResearchPopulationConditionReduction"]=25]="LifeformResearchPopulationConditionReduction",e[e["MoonChanceBonus"]=26]="MoonChanceBonus"}(r||(r={}))},6119:(e,t,s)=>{s.d(t,{ZX:()=>rt,t8:()=>st,ry:()=>it,d2:()=>tt,cQ:()=>et,ax:()=>nt,FH:()=>at,yn:()=>$e,wJ:()=>We,Ao:()=>ut});var r=s(7331),o=s(7377),a=s(2816);class n{#e;#t;#s;#r;constructor(e){this.#e=e.metal,this.#t=e.crystal,this.#s=e.deuterium,this.#r=e.energy}getCost(e){return{metal:this.getResourceCost(this.#e.baseCost,this.#e.increaseFactor,e),crystal:this.getResourceCost(this.#t.baseCost,this.#t.increaseFactor,e),deuterium:this.getResourceCost(this.#s.baseCost,this.#s.increaseFactor,e),energy:this.getResourceCost(this.#r.baseCost,this.#r.increaseFactor,e)}}getResourceCost(e,t,s){return Math.floor(e*t**(s-1)*s)}}class c extends n{constructor(){super({metal:{baseCost:5e4,increaseFactor:1.5},crystal:{baseCost:25e3,increaseFactor:1.5},deuterium:{baseCost:15e3,increaseFactor:1.5},energy:{baseCost:80,increaseFactor:1.1}})}get bonuses(){return[{type:o.f.ResourceProductionBonus}]}get type(){return a.EO.fusionPoweredProduction}appliesTo(e){return[r._.crystal,r._.deuterium].includes(e)}getProductionBonus(e){const t=.015,s=.01;return{metal:0,crystal:t*e,deuterium:s*e,energy:0}}}const u=new c;class i extends n{constructor(){super({metal:{baseCost:9e3,increaseFactor:1.5},crystal:{baseCost:6e3,increaseFactor:1.5},deuterium:{baseCost:3e3,increaseFactor:1.5},energy:{baseCost:40,increaseFactor:1.1}})}get bonuses(){return[{type:o.f.ResourceProductionBonus}]}get type(){return a.EO.highEnergySmelting}appliesTo(e){return[r._.metal].includes(e)}getProductionBonus(e){const t=.015;return{metal:t*e,crystal:0,deuterium:0,energy:0}}}const l=new i;class b extends n{constructor(){super({metal:{baseCost:1e5,increaseFactor:1.5},crystal:{baseCost:4e4,increaseFactor:1.5},deuterium:{baseCost:2e4,increaseFactor:1.5},energy:{baseCost:60,increaseFactor:1.1}})}get bonuses(){return[{type:o.f.ResourceProductionBonus}]}get type(){return a.EO.highPerformanceSynthesiser}appliesTo(e){return[r._.deuterium].includes(e)}getProductionBonus(e){const t=.02;return{metal:0,crystal:0,deuterium:t*e,energy:0}}}const y=new b;var d=s(9681);class C extends n{constructor(){super({metal:{baseCost:35e3,increaseFactor:1.5},crystal:{baseCost:15e3,increaseFactor:1.5},deuterium:{baseCost:1e4,increaseFactor:1.5},energy:{baseCost:40,increaseFactor:1.05}})}get bonuses(){return[{type:o.f.ResourceProductionBonus},{type:o.f.LifeformResearchBonusBoost}]}get type(){return a.EO.highPerformanceTransformer}get affectedTechnologies(){return d.Vs}getLifeformTechnologyBonus(e,t){if(!this.appliesTo(e))return 0;const s=.003;return s*t}appliesTo(e){return!!this.affectedTechnologies.includes(e)||"energy"==e}getProductionBonus(e){const t=.01;return{metal:0,crystal:0,deuterium:0,energy:t*e}}}const m=new C;class g extends n{constructor(){super({metal:{baseCost:85e3,increaseFactor:1.4},crystal:{baseCost:44e3,increaseFactor:1.4},deuterium:{baseCost:25e3,increaseFactor:1.4},energy:{baseCost:90,increaseFactor:1.1}})}get bonuses(){return[{type:o.f.ResourceProductionBonus}]}get type(){return a.EO.crystalRefinery}appliesTo(e){return[r._.crystal].includes(e)}getProductionBonus(e){const t=.02;return{metal:0,crystal:t*e,deuterium:0,energy:0}}}const p=new g;class F extends n{constructor(){super({metal:{baseCost:12e4,increaseFactor:1.4},crystal:{baseCost:5e4,increaseFactor:1.4},deuterium:{baseCost:2e4,increaseFactor:1.4},energy:{baseCost:90,increaseFactor:1.1}})}get bonuses(){return[{type:o.f.ResourceProductionBonus}]}get type(){return a.EO.deuteriumSynthesiser}appliesTo(e){return[r._.deuterium].includes(e)}getProductionBonus(e){const t=.02;return{metal:0,crystal:0,deuterium:t*e,energy:0}}}const h=new F;class f extends n{constructor(){super({metal:{baseCost:2e4,increaseFactor:1.2},crystal:{baseCost:15e3,increaseFactor:1.2},deuterium:{baseCost:1e4,increaseFactor:1.2},energy:{baseCost:0,increaseFactor:0}})}get bonuses(){return[{type:o.f.EnergyProductionBonus},{type:o.f.EnergyConsumptionReduction}]}get type(){return a.EO.disruptionChamber}appliesTo(e){return"energy"==e}getConsumptionReduction(e){const t=.005;return{metal:0,crystal:0,deuterium:0,energy:t*e}}getProductionBonus(e){const t=.015;return{metal:0,crystal:0,deuterium:0,energy:t*e}}}const E=new f;class O extends n{constructor(){super({metal:{baseCost:1e4,increaseFactor:1.4},crystal:{baseCost:8e3,increaseFactor:1.4},deuterium:{baseCost:1e3,increaseFactor:1.4},energy:{baseCost:40,increaseFactor:1.1}})}get bonuses(){return[{type:o.f.ResourceProductionBonus}]}get type(){return a.EO.magmaForge}appliesTo(e){return[r._.metal].includes(e)}getProductionBonus(e){const t=.02;return{metal:t*e,crystal:0,deuterium:0,energy:0}}}const R=new O;class T extends n{constructor(){super({metal:{baseCost:8e4,increaseFactor:1.5},crystal:{baseCost:35e3,increaseFactor:1.5},deuterium:{baseCost:6e4,increaseFactor:1.5},energy:{baseCost:90,increaseFactor:1.05}})}get bonuses(){return[{type:o.f.LifeformResearchBonusBoost}]}get type(){return a.EO.metropolis}get affectedTechnologies(){return d.Vs}appliesTo(e){return this.affectedTechnologies.includes(e)}getLifeformTechnologyBonus(e,t){if(!this.appliesTo(e))return 0;const s=.005;return t*s}}const B=new T;class w extends n{constructor(){super({metal:{baseCost:55e3,increaseFactor:1.5},crystal:{baseCost:5e4,increaseFactor:1.5},deuterium:{baseCost:3e4,increaseFactor:1.5},energy:{baseCost:70,increaseFactor:1.05}})}get bonuses(){return[{type:o.f.LifeformResearchBonusBoost}]}get type(){return a.EO.chipMassProduction}get affectedTechnologies(){return d.Vs}appliesTo(e){return this.affectedTechnologies.includes(e)}getLifeformTechnologyBonus(e,t){if(!this.appliesTo(e))return 0;const s=.004;return s*t}}const x=new w;var P=s(6864);class k extends n{constructor(){super({metal:{baseCost:25e4,increaseFactor:1.8},crystal:{baseCost:15e4,increaseFactor:1.8},deuterium:{baseCost:1e5,increaseFactor:1.8},energy:{baseCost:120,increaseFactor:1.3}})}get bonuses(){return this.affectedBuildings.flatMap((e=>[{type:o.f.TechCostReduction,tech:e},{type:o.f.TechTimeReduction,tech:e}]))}affectedBuildings=[P.A.metalMine,P.A.crystalMine,P.A.deuteriumSynthesizer];get type(){return a.EO.mineralResearchCentre}getCostAndTimeReduction(e,t){if(!this.appliesTo(e))return{cost:0,time:0};const s=.005;return{cost:s*t,time:0}}appliesTo(e){return this.affectedBuildings.includes(e)}}const M=new k;var S=s(3418);class L extends n{constructor(){super({metal:{baseCost:5e4,increaseFactor:1.5},crystal:{baseCost:35e3,increaseFactor:1.5},deuterium:{baseCost:15e3,increaseFactor:1.5},energy:{baseCost:80,increaseFactor:1.3}})}get bonuses(){return this.affectedBuildings.flatMap((e=>[{type:o.f.TechCostReduction,tech:e},{type:o.f.TechTimeReduction,tech:e}]))}get type(){return a.EO.megalith}affectedBuildings=a.IU[S.e5.rocktal];getCostAndTimeReduction(e,t){if(!this.appliesTo(e))return{cost:0,time:0};const s=.01,r=.01;return{cost:s*t,time:r*t}}appliesTo(e){return this.affectedBuildings.includes(e)}}const v=new L;class A extends n{constructor(){super({metal:{baseCost:2e4,increaseFactor:1.3},crystal:{baseCost:25e3,increaseFactor:1.3},deuterium:{baseCost:1e4,increaseFactor:1.3},energy:{baseCost:10,increaseFactor:1.08}})}get bonuses(){return d.Vs.flatMap((e=>[{type:o.f.TechCostReduction,tech:e},{type:o.f.TechTimeReduction,tech:e}]))}get type(){return a.EO.researchCentre}getLifeformTechnologyResearchCostAndTimeReduction(e){if(1==e)return{cost:0,time:0};const t=.0025,s=.02;return{cost:t*e,time:s*e}}}const D=new A;class _ extends n{constructor(){super({metal:{baseCost:4e4,increaseFactor:1.3},crystal:{baseCost:1e4,increaseFactor:1.3},deuterium:{baseCost:15e3,increaseFactor:1.3},energy:{baseCost:15,increaseFactor:1.1}})}get bonuses(){return d.Vs.flatMap((e=>[{type:o.f.TechCostReduction,tech:e},{type:o.f.TechTimeReduction,tech:e}]))}get type(){return a.EO.runeTechnologium}getLifeformTechnologyResearchCostAndTimeReduction(e){if(1==e)return{cost:0,time:0};const t=.0025,s=.02;return{cost:t*e,time:s*e}}}const V=new _;class j extends n{constructor(){super({metal:{baseCost:3e4,increaseFactor:1.3},crystal:{baseCost:2e4,increaseFactor:1.3},deuterium:{baseCost:1e4,increaseFactor:1.3},energy:{baseCost:13,increaseFactor:1.08}})}get bonuses(){return d.Vs.flatMap((e=>[{type:o.f.TechCostReduction,tech:e},{type:o.f.TechTimeReduction,tech:e}]))}get type(){return a.EO.roboticsResearchCentre}getLifeformTechnologyResearchCostAndTimeReduction(e){if(1==e)return{cost:0,time:0};const t=.0025,s=.02;return{cost:t*e,time:s*e}}}const H=new j;class q extends n{constructor(){super({metal:{baseCost:2e4,increaseFactor:1.3},crystal:{baseCost:2e4,increaseFactor:1.3},deuterium:{baseCost:3e4,increaseFactor:1.3},energy:{baseCost:10,increaseFactor:1.08}})}get bonuses(){return d.Vs.flatMap((e=>[{type:o.f.TechCostReduction,tech:e},{type:o.f.TechTimeReduction,tech:e}]))}get type(){return a.EO.vortexChamber}getLifeformTechnologyResearchCostAndTimeReduction(e){if(1==e)return{cost:0,time:0};const t=.0025,s=.02;return{cost:t*e,time:s*e}}}const G=new q;class N extends n{constructor(){super({metal:{baseCost:7,increaseFactor:1.2},crystal:{baseCost:2,increaseFactor:1.2},deuterium:{baseCost:0,increaseFactor:1},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[]}get type(){return a.EO.residentialSector}}const z=new N;class I extends n{constructor(){super({metal:{baseCost:5,increaseFactor:1.23},crystal:{baseCost:2,increaseFactor:1.23},deuterium:{baseCost:0,increaseFactor:1},energy:{baseCost:8,increaseFactor:1.02}})}get bonuses(){return[]}get type(){return a.EO.biosphereFarm}}const J=new I;class Q extends n{constructor(){super({metal:{baseCost:5e3,increaseFactor:1.7},crystal:{baseCost:3200,increaseFactor:1.7},deuterium:{baseCost:1500,increaseFactor:1.7},energy:{baseCost:15,increaseFactor:1.25}})}get bonuses(){return[]}get type(){return a.EO.academyOfSciences}}const U=new Q;class X extends n{constructor(){super({metal:{baseCost:5e4,increaseFactor:1.7},crystal:{baseCost:4e4,increaseFactor:1.7},deuterium:{baseCost:5e4,increaseFactor:1.7},energy:{baseCost:30,increaseFactor:1.25}})}get bonuses(){return[]}get type(){return a.EO.neuroCalibrationCentre}}const Y=new X;class Z extends n{constructor(){super({metal:{baseCost:25e3,increaseFactor:1.09},crystal:{baseCost:13e3,increaseFactor:1.09},deuterium:{baseCost:7e3,increaseFactor:1.09},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[]}get type(){return a.EO.foodSilo}}const K=new Z;class W extends n{constructor(){super({metal:{baseCost:75e3,increaseFactor:1.09},crystal:{baseCost:2e4,increaseFactor:1.09},deuterium:{baseCost:25e3,increaseFactor:1.09},energy:{baseCost:50,increaseFactor:1.02}})}get bonuses(){return[]}get type(){return a.EO.skyscraper}}const $=new W;class ee extends n{constructor(){super({metal:{baseCost:15e4,increaseFactor:1.12},crystal:{baseCost:3e4,increaseFactor:1.12},deuterium:{baseCost:15e3,increaseFactor:1.12},energy:{baseCost:60,increaseFactor:1.03}})}get bonuses(){return[]}get type(){return a.EO.biotechLab}}const te=new ee;class se extends n{constructor(){super({metal:{baseCost:25e4,increaseFactor:1.15},crystal:{baseCost:125e3,increaseFactor:1.15},deuterium:{baseCost:125e3,increaseFactor:1.15},energy:{baseCost:100,increaseFactor:1.02}})}get bonuses(){return[]}get type(){return a.EO.planetaryShield}}const re=new se;class oe extends n{constructor(){super({metal:{baseCost:9,increaseFactor:1.2},crystal:{baseCost:3,increaseFactor:1.2},deuterium:{baseCost:0,increaseFactor:1},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[]}get type(){return a.EO.meditationEnclave}}const ae=new oe;class ne extends n{constructor(){super({metal:{baseCost:7,increaseFactor:1.2},crystal:{baseCost:2,increaseFactor:1.2},deuterium:{baseCost:0,increaseFactor:1},energy:{baseCost:10,increaseFactor:1.03}})}get bonuses(){return[]}get type(){return a.EO.crystalFarm}}const ce=new ne;class ue extends n{constructor(){super({metal:{baseCost:5e3,increaseFactor:1.7},crystal:{baseCost:3800,increaseFactor:1.7},deuterium:{baseCost:1e3,increaseFactor:1.7},energy:{baseCost:20,increaseFactor:1.35}})}get bonuses(){return[]}get type(){return a.EO.runeForge}}const ie=new ue;class le extends n{constructor(){super({metal:{baseCost:5e4,increaseFactor:1.65},crystal:{baseCost:4e4,increaseFactor:1.65},deuterium:{baseCost:5e4,increaseFactor:1.65},energy:{baseCost:60,increaseFactor:1.3}})}get bonuses(){return[]}get type(){return a.EO.oriktorium}}const be=new le;class ye extends n{constructor(){super({metal:{baseCost:25e4,increaseFactor:1.5},crystal:{baseCost:125e3,increaseFactor:1.5},deuterium:{baseCost:125e3,increaseFactor:1.5},energy:{baseCost:100,increaseFactor:1.1}})}get bonuses(){return[{type:o.f.AutoRecycleDebrisField}]}get type(){return a.EO.advancedRecyclingPlant}}const de=new ye;class Ce extends n{constructor(){super({metal:{baseCost:6,increaseFactor:1.21},crystal:{baseCost:2,increaseFactor:1.21},deuterium:{baseCost:0,increaseFactor:1},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[]}get type(){return a.EO.assemblyLine}}const me=new Ce;class ge extends n{constructor(){super({metal:{baseCost:5,increaseFactor:1.18},crystal:{baseCost:2,increaseFactor:1.18},deuterium:{baseCost:0,increaseFactor:1},energy:{baseCost:8,increaseFactor:1.02}})}get bonuses(){return[]}get type(){return a.EO.fusionCellFactory}}const pe=new ge;class Fe extends n{constructor(){super({metal:{baseCost:5e3,increaseFactor:1.8},crystal:{baseCost:3800,increaseFactor:1.8},deuterium:{baseCost:1e3,increaseFactor:1.8},energy:{baseCost:10,increaseFactor:1.2}})}get bonuses(){return[]}get type(){return a.EO.updateNetwork}}const he=new Fe;class fe extends n{constructor(){super({metal:{baseCost:5e4,increaseFactor:1.8},crystal:{baseCost:4e4,increaseFactor:1.8},deuterium:{baseCost:5e4,increaseFactor:1.8},energy:{baseCost:40,increaseFactor:1.2}})}get bonuses(){return[]}get type(){return a.EO.quantumComputerCentre}}const Ee=new fe;class Oe extends n{constructor(){super({metal:{baseCost:7500,increaseFactor:1.3},crystal:{baseCost:7e3,increaseFactor:1.3},deuterium:{baseCost:1e3,increaseFactor:1.3},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[]}get type(){return a.EO.automatisedAssemblyCentre}}const Re=new Oe;class Te extends n{constructor(){super({metal:{baseCost:5e4,increaseFactor:1.07},crystal:{baseCost:2e4,increaseFactor:1.07},deuterium:{baseCost:3e4,increaseFactor:1.07},energy:{baseCost:40,increaseFactor:1.01}})}get bonuses(){return[]}get type(){return a.EO.microchipAssemblyLine}}const Be=new Te;class we extends n{constructor(){super({metal:{baseCost:1e5,increaseFactor:1.14},crystal:{baseCost:1e4,increaseFactor:1.14},deuterium:{baseCost:3e3,increaseFactor:1.14},energy:{baseCost:80,increaseFactor:1.04}})}get bonuses(){return[]}get type(){return a.EO.productionAssemblyHall}}const xe=new we;class Pe extends n{constructor(){super({metal:{baseCost:25e4,increaseFactor:1.4},crystal:{baseCost:125e3,increaseFactor:1.4},deuterium:{baseCost:125e3,increaseFactor:1.4},energy:{baseCost:100,increaseFactor:1.05}})}getSpaceDockBonus(e){const t=.013;return t*e}get bonuses(){return[{type:o.f.SpaceDockBonus}]}get type(){return a.EO.nanoRepairBots}}const ke=new Pe;class Me extends n{constructor(){super({metal:{baseCost:4,increaseFactor:1.21},crystal:{baseCost:3,increaseFactor:1.21},deuterium:{baseCost:0,increaseFactor:1},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[]}get type(){return a.EO.sanctuary}}const Se=new Me;class Le extends n{constructor(){super({metal:{baseCost:6,increaseFactor:1.21},crystal:{baseCost:3,increaseFactor:1.21},deuterium:{baseCost:0,increaseFactor:1},energy:{baseCost:9,increaseFactor:1.02}})}get bonuses(){return[]}get type(){return a.EO.antimatterCondenser}}const ve=new Le;class Ae extends n{constructor(){super({metal:{baseCost:7500,increaseFactor:1.8},crystal:{baseCost:5e3,increaseFactor:1.8},deuterium:{baseCost:800,increaseFactor:1.8},energy:{baseCost:15,increaseFactor:1.3}})}get bonuses(){return[]}get type(){return a.EO.hallsOfRealisation}}const De=new Ae;class _e extends n{constructor(){super({metal:{baseCost:6e4,increaseFactor:1.8},crystal:{baseCost:3e4,increaseFactor:1.8},deuterium:{baseCost:5e4,increaseFactor:1.8},energy:{baseCost:30,increaseFactor:1.3}})}get bonuses(){return[]}get type(){return a.EO.forumOfTranscendence}}const Ve=new _e;class je extends n{constructor(){super({metal:{baseCost:8500,increaseFactor:1.25},crystal:{baseCost:5e3,increaseFactor:1.25},deuterium:{baseCost:3e3,increaseFactor:1.25},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[]}get type(){return a.EO.antimatterConvector}}const He=new je;class qe extends n{constructor(){super({metal:{baseCost:15e3,increaseFactor:1.2},crystal:{baseCost:15e3,increaseFactor:1.2},deuterium:{baseCost:2e4,increaseFactor:1.2},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[]}get type(){return a.EO.cloningLaboratory}get affectedTechnologies(){return d.dY[S.e5.kaelesh]}appliesTo(e){return this.affectedTechnologies.includes(e)}getLifeformTechnologyBonus(e,t){if(!this.appliesTo(e))return 0;const s=.0025;return t*s}}const Ge=new qe;class Ne extends n{constructor(){super({metal:{baseCost:75e3,increaseFactor:1.05},crystal:{baseCost:25e3,increaseFactor:1.05},deuterium:{baseCost:3e4,increaseFactor:1.05},energy:{baseCost:30,increaseFactor:1.03}})}get bonuses(){return[]}get type(){return a.EO.chrysalisAccelerator}}const ze=new Ne;class Ie extends n{constructor(){super({metal:{baseCost:87500,increaseFactor:1.2},crystal:{baseCost:25e3,increaseFactor:1.2},deuterium:{baseCost:3e4,increaseFactor:1.2},energy:{baseCost:40,increaseFactor:1.02}})}get bonuses(){return[]}get type(){return a.EO.bioModifier}}const Je=new Ie;class Qe extends n{constructor(){super({metal:{baseCost:15e4,increaseFactor:1.5},crystal:{baseCost:3e4,increaseFactor:1.5},deuterium:{baseCost:3e4,increaseFactor:1.5},energy:{baseCost:140,increaseFactor:1.05}})}get bonuses(){return[]}get type(){return a.EO.psionicModulator}}const Ue=new Qe;class Xe extends n{constructor(){super({metal:{baseCost:75e3,increaseFactor:1.2},crystal:{baseCost:5e4,increaseFactor:1.2},deuterium:{baseCost:55e3,increaseFactor:1.2},energy:{baseCost:90,increaseFactor:1.04}})}get bonuses(){return[]}get type(){return a.EO.shipManufacturingHall}}const Ye=new Xe;class Ze extends n{constructor(){super({metal:{baseCost:5e5,increaseFactor:1.4},crystal:{baseCost:25e4,increaseFactor:1.4},deuterium:{baseCost:25e4,increaseFactor:1.4},energy:{baseCost:100,increaseFactor:1.05}})}get bonuses(){return[]}get type(){return a.EO.supraRefractor}}const Ke=new Ze,We={[S.e5.none]:[],[S.e5.humans]:[u,l],[S.e5.rocktal]:[p,h,E,R],[S.e5.mechas]:[y,m],[S.e5.kaelesh]:[]},$e=Object.values(We).flatMap((e=>e)),et={[S.e5.none]:[],[S.e5.humans]:[B],[S.e5.rocktal]:[],[S.e5.mechas]:[x,m],[S.e5.kaelesh]:[Ge]},tt=Object.values(et).flatMap((e=>e)),st={[S.e5.none]:[],[S.e5.humans]:[],[S.e5.rocktal]:[M,v],[S.e5.mechas]:[],[S.e5.kaelesh]:[]},rt=Object.values(st).flatMap((e=>e)),ot={[S.e5.none]:[],[S.e5.humans]:[],[S.e5.rocktal]:[E],[S.e5.mechas]:[],[S.e5.kaelesh]:[]},at=(Object.values(ot).flatMap((e=>e)),{[S.e5.none]:[],[S.e5.humans]:[D],[S.e5.rocktal]:[V],[S.e5.mechas]:[H],[S.e5.kaelesh]:[G]}),nt=Object.values(at).flatMap((e=>e)),ct={[S.e5.none]:[],[S.e5.humans]:[],[S.e5.rocktal]:[],[S.e5.mechas]:[ke],[S.e5.kaelesh]:[]},ut=Object.values(ct).flatMap((e=>e)),it={[a.EO.residentialSector]:z,[a.EO.biosphereFarm]:J,[a.EO.researchCentre]:D,[a.EO.academyOfSciences]:U,[a.EO.neuroCalibrationCentre]:Y,[a.EO.highEnergySmelting]:l,[a.EO.foodSilo]:K,[a.EO.fusionPoweredProduction]:u,[a.EO.skyscraper]:$,[a.EO.biotechLab]:te,[a.EO.metropolis]:B,[a.EO.planetaryShield]:re,[a.EO.meditationEnclave]:ae,[a.EO.crystalFarm]:ce,[a.EO.runeTechnologium]:V,[a.EO.runeForge]:ie,[a.EO.oriktorium]:be,[a.EO.magmaForge]:R,[a.EO.disruptionChamber]:E,[a.EO.megalith]:v,[a.EO.crystalRefinery]:p,[a.EO.deuteriumSynthesiser]:h,[a.EO.mineralResearchCentre]:M,[a.EO.advancedRecyclingPlant]:de,[a.EO.assemblyLine]:me,[a.EO.fusionCellFactory]:pe,[a.EO.roboticsResearchCentre]:H,[a.EO.updateNetwork]:he,[a.EO.quantumComputerCentre]:Ee,[a.EO.automatisedAssemblyCentre]:Re,[a.EO.highPerformanceTransformer]:m,[a.EO.microchipAssemblyLine]:Be,[a.EO.productionAssemblyHall]:xe,[a.EO.highPerformanceSynthesiser]:y,[a.EO.chipMassProduction]:x,[a.EO.nanoRepairBots]:ke,[a.EO.sanctuary]:Se,[a.EO.antimatterCondenser]:ve,[a.EO.vortexChamber]:G,[a.EO.hallsOfRealisation]:De,[a.EO.forumOfTranscendence]:Ve,[a.EO.antimatterConvector]:He,[a.EO.cloningLaboratory]:Ge,[a.EO.chrysalisAccelerator]:ze,[a.EO.bioModifier]:Je,[a.EO.psionicModulator]:Ue,[a.EO.shipManufacturingHall]:Ye,[a.EO.supraRefractor]:Ke}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,