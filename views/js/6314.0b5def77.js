"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[6314],{5593:(e,t,a)=>{a.d(t,{D:()=>h});var i=a(655),n=a(3768),s=a(4384),o=a(1936);function r(e,t){const a={...e};return Object.keys(t).forEach((e=>{const i=t[e];if(e in a){const t=a[e];if("object"===typeof t&&!(t instanceof Array))return void(a[e]=r(t,i))}a[e]=i})),a}const c={universeHistory:{alliances:{highscore:[]},players:{highscore:[]}}};async function l(e){const t=await(0,s._N)(e),a=r(c,await t.get("universeSpecificSettings",0)??{});return a}var d=a(3654),u=a(4028),g=a(8717);let p=class extends u.w3{settings=null;_ready;_resolveReady;updateSettings(e){console.debug("updating universe specific settings",e),this.settings=e,(async()=>{const t=await(0,s._N)(g.l);await t.put("universeSpecificSettings",e,0);const a={ogameMeta:g.l,senderUuid:g.g,type:o.C.NotifyUniverseSpecificSettingsUpdate};await(0,n.p)(a)})()}get ready(){return this._ready}async created(){this._ready=new Promise((e=>this._resolveReady=e)),this.initCommunication(),await this.loadData()}initCommunication(){chrome.runtime.onMessage.addListener((async e=>await this.onMessage(e)))}async loadData(){this.settings=await l(g.l),this._resolveReady()}async onMessage(e){const{type:t,ogameMeta:a}=e;if((0,d.i)(a,g.l)&&e.senderUuid!=g.g)switch(t){case o.C.NotifyUniverseSpecificSettingsUpdate:await this.loadData();break}}};p=(0,i.gn)([u.wA],p);const h=new p},6314:(e,t,a)=>{a.r(t),a.d(t,{default:()=>m});var i=function(){var e=this,t=e.$createElement,a=e._self._c||t;return e.loading?a("loading-spinner"):a("page",{attrs:{"nav-items":e.navItems,"root-route-name":e.rootRoute}})},n=[],s=a(655),o=a(4028),r=a(8395),c=a(7076),l=a(5593);let d=class extends o.w3{rootRoute="empire";loading=!0;async mounted(){await r.p.ready,await c.s.ready,await l.D.ready,this.loading=!1}get navItems(){const e=[{label:this.$i18n.$t.extension.empire.overview.header,to:{name:"empire/overview"}},{label:this.$i18n.$t.extension.empire.production.header,to:{name:"empire/production"}},{label:this.$i18n.$t.extension.empire.amortization.header,to:{name:"empire/amortization"}}];return e}};d=(0,s.gn)([(0,o.wA)({})],d);const u=d,g=u;var p=a(1001),h=(0,p.Z)(g,i,n,!1,null,null,null);const m=h.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,