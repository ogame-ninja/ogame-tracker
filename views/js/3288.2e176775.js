"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[3288],{9027:(e,t,s)=>{s.d(t,{Z:()=>c});var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.combats.ignoreEspionageCombats.title)}})]),s("div",{staticClass:"fake-table-body"},[s("checkbox",{attrs:{value:e.ignoreEspionageCombats,label:e.$i18n.$t.extension.settings.combats.ignoreEspionageCombats.label},on:{input:function(t){return e.setIgnoreEspionageCombats(t)}}})],1)])},n=[],o=s(655),i=s(4028),r=s(917);let l=class extends i.w3{get ignoreEspionageCombats(){return r.V.settings.combatTracking.ignoreEspionageFights}setIgnoreEspionageCombats(e){r.V.updateSettings({...r.V.settings,combatTracking:{ignoreEspionageFights:e}})}};l=(0,o.gn)([(0,i.wA)({})],l);const g=l,u=g;var m=s(1001),p=(0,m.Z)(u,a,n,!1,null,"3b222f56",null);const c=p.exports},4310:(e,t,s)=>{s.d(t,{Z:()=>f});var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("grid-table",{staticClass:"ranged-stats-table",attrs:{columns:e.columns,items:e.rows,"footer-items":e.footerRows,"cell-class-provider":function(t){return e.getCellClass(t)}},scopedSlots:e._u([e._l(e.columns,(function(t,a){return{key:"cell-"+t.key,fn:function(n){var o=n.value,i=n.item;return[s("span",{key:t.key,staticClass:"ranged-stats-table-cell"},["label"==t.key?[null!=t.slotName&&null!=e.$scopedSlots[t.slotName]?e._t(t.slotName,null,{value:o}):s("span",{key:a,domProps:{textContent:e._s(o)}})]:"subLabel"==t.key?e._l(i.items,(function(a,n){return s("span",{key:n,class:a.labelClass},[null!=t.slotName&&null!=e.$scopedSlots[t.slotName]?e._t(t.slotName,null,{value:a.label}):s("span",{domProps:{textContent:e._s(a.label)}})],2)})):e._l(i.items||[i],(function(a,n){return s("span",{key:n,class:[e.getCellClass(a[t.key]),a.class]},[null!=t.formatter?s("span",{domProps:{textContent:e._s(t.formatter(a[t.key]))}}):s("span",{domProps:{textContent:e._s(a[t.key])}})])}))],2)]}}})),e._l(e.$scopedSlots,(function(t,s){return{key:s,fn:function(t){return[e._t(s,null,null,t)]}}}))],null,!0)})},n=[],o=s(655),i=s(4028),r=s(9858),l=s(6538),g=s(4749),u=s.n(g),m=s(917);let p=class extends i.w3{showPercentage;showAverage;items;footerItems;numberFormatOptions;averageNumberFormatOptions;dataItems;get hasGroupedItems(){return this.items.some((e=>"items"in e))}get dateRanges(){return m.V.settings.dateRanges}get dataItemsByRange(){const e=this.dataItems,t=this.dateRanges.map((()=>[]));return e.forEach((e=>{this.dateRanges.forEach(((s,a)=>{(0,r.m)(e.date,s)&&t[a].push(e)}))})),t}get firstDay(){return this.dataItemsByRange.reduce(((e,t)=>Math.min(e,Math.min(...t.map((e=>e.date))))),Date.now())}get columns(){const e=[{key:"label",label:"",slotName:"label"}];return this.hasGroupedItems&&e.push({key:"subLabel",label:"",slotName:"subLabel"}),e.push(...this.dateRanges.map(((e,t)=>({key:t,label:e.label??this.$i18n.$t.extension.settings.dateRanges.since(this.$i18n.$d(this.firstDay,"date")),formatter:e=>this.$i18n.$n(e,this.numberFormatOptions)})))),this.showAverage&&e.push({key:"average",label:this.$i18n.$t.extension.common.averagePerDay,formatter:e=>this.$i18n.$n(e,this.averageNumberFormatOptions??this.numberFormatOptions)}),this.showPercentage&&e.push({key:"percentage",label:"%",formatter:e=>""!=e?this.$i18n.$n(e,{minimumFractionDigits:3,maximumFractionDigits:3}):e}),e}get rows(){const e=this.dataItemsByRange,t=this.dateRanges.findIndex((e=>"all"==e.type))??(0,l.A)("failed to find range 'all'"),s=e[t].map((e=>u()(e.date).getTime())),a=new Set(s).size,n=Math.max(1,this.items.map((s=>"getValue"in s?s.getValue(e[t]):s.items.reduce(((s,a)=>s+a.getValue(e[t])),0))).reduce(((e,t)=>e+t),0));return this.items.map((s=>this.mapItemToRow(s,e,t,a,n)))}mapItemToRow(e,t,s,a,n){if("getValue"in e){const o={label:e.label,class:e.class,labelClass:e.labelClass,...this.dateRanges.map(((s,a)=>e.getValue(t[a])))},i=o[s];return this.showAverage&&(o.average=i/Math.max(1,a)),this.showPercentage&&(o.percentage=100*i/n),o}return{label:e.label,items:e.items.map((e=>this.mapItemToRow(e,t,s,a,n)))}}get footerRows(){const e=this.dataItemsByRange,t=this.dateRanges.findIndex((e=>"all"==e.type))??(0,l.A)("failed to find range 'all'"),s=e[t].map((e=>u()(e.date).getTime())),a=new Set(s).size;return this.footerItems.map((s=>{const n={label:s.label,...this.dateRanges.map(((t,a)=>"getValue"in s?s.getValue(e[a]):s.items.reduce(((t,s)=>t+s.getValue(e[a])),0))),percentage:""};if(this.showAverage){const e=n[t];n.average=e/Math.max(1,a)}return n}))}getCellClass(e){return 0==e?"fade-value":""}};(0,o.gn)([(0,i.fI)({required:!1,type:Boolean})],p.prototype,"showPercentage",void 0),(0,o.gn)([(0,i.fI)({required:!1,type:Boolean})],p.prototype,"showAverage",void 0),(0,o.gn)([(0,i.fI)({required:!0,type:Array})],p.prototype,"items",void 0),(0,o.gn)([(0,i.fI)({required:!1,type:Array,default:()=>[]})],p.prototype,"footerItems",void 0),(0,o.gn)([(0,i.fI)({required:!1,type:Object,default:void 0})],p.prototype,"numberFormatOptions",void 0),(0,o.gn)([(0,i.fI)({required:!1,type:Object,default:void 0})],p.prototype,"averageNumberFormatOptions",void 0),(0,o.gn)([(0,i.fI)({required:!0,type:Array})],p.prototype,"dataItems",void 0),p=(0,o.gn)([(0,i.wA)({})],p);const c=p,h=c;var d=s(1001),b=(0,d.Z)(h,a,n,!1,null,"1526beca",null);const f=b.exports},3129:(e,t,s)=>{s.r(t),s.d(t,{default:()=>y});var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"table-container"},[s("ranged-stats-table",{attrs:{dataItems:e.combats,items:e.items,footerItems:e.footerItems,"show-average":"",averageNumberFormatOptions:e.avgNumberFormat},scopedSlots:e._u([{key:"cell-label",fn:function(t){var a=t.value;return[s("span",{staticClass:"mr-2",domProps:{textContent:e._s(a)}}),s("o-ship",{attrs:{ship:e.shipTable[a],size:"24px"}})]}}])}),s("floating-menu",{attrs:{left:""},scopedSlots:e._u([{key:"activator",fn:function(){return[s("button",{on:{click:function(t){e.showSettings=!e.showSettings}}},[s("span",{staticClass:"mdi mdi-cog"})])]},proxy:!0}]),model:{value:e.showSettings,callback:function(t){e.showSettings=t},expression:"showSettings"}},[s("combat-tracking-ignore-espionage-combats-settings"),s("hr"),s("date-range-settings")],1)],1)},n=[],o=s(655),i=s(4028),r=s(4310),l=s(4992),g=s(2057),u=s(248),m=s(4329),p=s(9027);let c=class extends i.w3{showSettings=!1;avgNumberFormat={minimumFractionDigits:1,maximumFractionDigits:1};get combats(){return l.t.dailyResultsArray}get items(){return u.GI.map((e=>({label:this.$i18n.$t.ogame.ships[e],getValue:t=>t.reduce(((t,s)=>t+s.lostShips.onExpeditions.ships[e]),0)})))}get footerItems(){return[{label:this.$i18n.$t.extension.common.sum,getValue:e=>u.GI.reduce(((t,s)=>t+e.reduce(((e,t)=>e+t.lostShips.onExpeditions.ships[s]),0)),0)}]}get shipTable(){return{[this.$i18n.$t.ogame.ships[g.g.lightFighter]]:g.g.lightFighter,[this.$i18n.$t.ogame.ships[g.g.heavyFighter]]:g.g.heavyFighter,[this.$i18n.$t.ogame.ships[g.g.cruiser]]:g.g.cruiser,[this.$i18n.$t.ogame.ships[g.g.battleship]]:g.g.battleship,[this.$i18n.$t.ogame.ships[g.g.bomber]]:g.g.bomber,[this.$i18n.$t.ogame.ships[g.g.battlecruiser]]:g.g.battlecruiser,[this.$i18n.$t.ogame.ships[g.g.destroyer]]:g.g.destroyer,[this.$i18n.$t.ogame.ships[g.g.reaper]]:g.g.reaper,[this.$i18n.$t.ogame.ships[g.g.pathfinder]]:g.g.pathfinder,[this.$i18n.$t.ogame.ships[g.g.smallCargo]]:g.g.smallCargo,[this.$i18n.$t.ogame.ships[g.g.largeCargo]]:g.g.largeCargo,[this.$i18n.$t.ogame.ships[g.g.espionageProbe]]:g.g.espionageProbe,[this.$i18n.$t.ogame.ships[g.g.recycler]]:g.g.recycler,[this.$i18n.$t.ogame.ships[g.g.deathStar]]:g.g.deathStar,[this.$i18n.$t.ogame.ships[g.g.crawler]]:g.g.crawler,[this.$i18n.$t.ogame.ships[g.g.solarSatellite]]:g.g.solarSatellite,[this.$i18n.$t.ogame.ships[g.g.colonyShip]]:g.g.colonyShip}}};c=(0,o.gn)([(0,i.wA)({components:{RangedStatsTable:r.Z,DateRangeSettings:m.Z,CombatTrackingIgnoreEspionageCombatsSettings:p.Z}})],c);const h=c,d=h;var b=s(1001),f=(0,b.Z)(d,a,n,!1,null,"18613fea",null);const y=f.exports},8734:(e,t)=>{function s(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=s,e.exports=t.default},4749:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i;var a=o(s(1171)),n=o(s(8734));function o(e){return e&&e.__esModule?e:{default:e}}function i(e){(0,n.default)(1,arguments);var t=(0,a.default)(e);return t.setHours(0,0,0,0),t}e.exports=t.default},1171:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=o;var a=n(s(8734));function n(e){return e&&e.__esModule?e:{default:e}}function o(e){(0,a.default)(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"===typeof e||"[object Number]"===t?new Date(e):("string"!==typeof e&&"[object String]"!==t||"undefined"===typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}e.exports=t.default}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,