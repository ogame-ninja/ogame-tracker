"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[604],{7757:(e,s,r)=>{r.r(s),r.d(s,{default:()=>$});var t=function(){var e=this,s=e.$createElement,r=e._self._c||s;return r("div",[r("select",{directives:[{name:"model",rawName:"v-model.number",value:e.playerClass,expression:"playerClass",modifiers:{number:!0}}],staticStyle:{display:"block","margin-bottom":"4px"},on:{change:function(s){var r=Array.prototype.filter.call(s.target.options,(function(e){return e.selected})).map((function(s){var r="_value"in s?s._value:s.value;return e._n(r)}));e.playerClass=s.target.multiple?r:r[0]}}},e._l(e.PlayerClasses,(function(s){return r("option",{key:s,domProps:{value:s,textContent:e._s(e.$i18n.$t.extension.playerClasses[s])}})})),0),r("grid-table",{attrs:{inline:"",columns:e.classBonusesColumns,items:e.classBonusesRows},scopedSlots:e._u([{key:"cell-base",fn:function(e){var s=e.value,t=e.item;return[t.isPercentage?r("decimal-number",{attrs:{value:100*s,suffix:"%",digits:3,"fade-decimals":!1}}):r("decimal-number",{attrs:{value:s,digits:s%1==0?0:3}})]}},{key:"cell-actual",fn:function(e){var s=e.value,t=e.item;return[t.isPercentage?r("decimal-number",{attrs:{value:100*s,suffix:"%",digits:3,"fade-decimals":!1}}):r("decimal-number",{attrs:{value:s,digits:s%1==0?0:3,"fade-decimals":!1}})]}}])}),r("hr"),r("lifeform-bonuses-breakdown",{attrs:{types:e.bonusTypes,technologies:e.techs,planets:e.planets,limits:e.limits}})],1)},a=[],l=r(655),i=r(147),n=r(3418),o=r(4846),c=r(9751),u=r(8395),p=r(1786),g=r(4028),h=r(7385),m=r(602),d=r(7076),y=r(7848),C=r(7377);let f=class extends g.w3{get serverSettings(){return d.s.serverSettings}get classBonusesRows(){const e=Object.values(this.planets).reduce(((e,s)=>e+s.reduce(((e,s)=>e+s.bonuses.classBonus.total),0)),0);switch(this.playerClass){case m.D0.collector:return this.getCollectorClassBonusesRows(e);case m.D0.discoverer:return this.getDiscovererClassBonusesRows(e);case m.D0.general:return this.getGeneralClassBonusesRows(e)}throw new Error("invalid player class")}get limits(){const e=(0,y.K)({type:C.f.PlayerClassBonus,playerClass:this.playerClass});return{classBonus:s=>null!=e?Math.min(s,e):s}}getCollectorClassBonusesRows(e){const s=1+e;return[{label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.playerClasses.collector.productionBonus,base:this.serverSettings.playerClasses.collector.productionFactorBonus,actual:this.serverSettings.playerClasses.collector.productionFactorBonus*s,isPercentage:!0},{label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.playerClasses.collector.energyProductionBonus,base:this.serverSettings.playerClasses.collector.energyProductionFactorBonus,actual:this.serverSettings.playerClasses.collector.energyProductionFactorBonus*s,isPercentage:!0},{label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.playerClasses.collector.transporterSpeedBonus,base:this.serverSettings.playerClasses.collector.tradingShips.speedFactorBonus,actual:this.serverSettings.playerClasses.collector.tradingShips.speedFactorBonus*s,isPercentage:!0},{label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.playerClasses.collector.transporterCargoBonus,base:this.serverSettings.playerClasses.collector.tradingShips.cargoCapacityFactorBonus,actual:this.serverSettings.playerClasses.collector.tradingShips.cargoCapacityFactorBonus*s,isPercentage:!0},{label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.playerClasses.collector.crawlerProductionBonus,base:this.serverSettings.playerClasses.collector.crawlers.productionFactorBonus,actual:this.serverSettings.playerClasses.collector.crawlers.productionFactorBonus*s,isPercentage:!0},{label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.playerClasses.collector.geologistCrawlerAmountBonus,base:this.serverSettings.playerClasses.collector.crawlers.geologistActiveCrawlerFactorBonus,actual:this.serverSettings.playerClasses.collector.crawlers.geologistActiveCrawlerFactorBonus*s,isPercentage:!0}]}getDiscovererClassBonusesRows(e){const s=1+e;return[{label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.playerClasses.discoverer.researchDuration,base:-this.serverSettings.playerClasses.discoverer.researchSpeedFactor,actual:-this.serverSettings.playerClasses.discoverer.researchSpeedFactor*s,isPercentage:!0},{label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.playerClasses.discoverer.increasedExpeditionFinds,base:this.serverSettings.playerClasses.discoverer.expeditions.outcomeFactorBonus,actual:this.serverSettings.playerClasses.discoverer.expeditions.outcomeFactorBonus*(1+3*e),isPercentage:!0},{label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.playerClasses.discoverer.largerPlanets,base:this.serverSettings.playerClasses.discoverer.planetSizeFactorBonus,actual:this.serverSettings.playerClasses.discoverer.planetSizeFactorBonus*s,isPercentage:!0},{label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.playerClasses.discoverer.additionalExpeditionSlots,base:this.serverSettings.playerClasses.discoverer.bonusExpeditionSlots,actual:this.serverSettings.playerClasses.discoverer.bonusExpeditionSlots*s,isPercentage:!1},{label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.playerClasses.discoverer.reducedExpeditionCombatChance,base:-.5,actual:-.5*s,isPercentage:!0},{label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.playerClasses.discoverer.phalanxRange,base:this.serverSettings.playerClasses.discoverer.phalanxRangeFactorBonus,actual:this.serverSettings.playerClasses.discoverer.phalanxRangeFactorBonus*s,isPercentage:!0}]}getGeneralClassBonusesRows(e){const s=1+e;return[{label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.playerClasses.general.combatShipSpeed,base:this.serverSettings.playerClasses.general.combatShipSpeedFactorBonus,actual:this.serverSettings.playerClasses.general.combatShipSpeedFactorBonus*s,isPercentage:!0},{label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.playerClasses.general.recyclerSpeed,base:this.serverSettings.playerClasses.general.recyclers.speedFactorBonus,actual:this.serverSettings.playerClasses.general.recyclers.speedFactorBonus*s,isPercentage:!0},{label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.playerClasses.general.fuelConsumption,base:-this.serverSettings.playerClasses.general.deuteriumConsumptionFactorReduction,actual:-this.serverSettings.playerClasses.general.deuteriumConsumptionFactorReduction*s,isPercentage:!0},{label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.playerClasses.general.increasedCargoRecyclersPathfinders,base:this.serverSettings.playerClasses.general.recyclers.cargoCapacityFactorBonus,actual:this.serverSettings.playerClasses.general.recyclers.cargoCapacityFactorBonus*s,isPercentage:!0},{label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.playerClasses.general.additionalCombatResearchLevels,base:2,actual:2*s,isPercentage:!1},{label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.playerClasses.general.additionalFleetSlots,base:this.serverSettings.playerClasses.general.bonusFleetSlots,actual:this.serverSettings.playerClasses.general.bonusFleetSlots*s,isPercentage:!1},{label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.playerClasses.general.additionalMoonFields,base:this.serverSettings.playerClasses.general.bonusMoonFields,actual:this.serverSettings.playerClasses.general.bonusMoonFields*s,isPercentage:!1}]}classBonusesColumns=[{key:"label",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.playerClasses.bonus},{key:"base",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.playerClasses.baseValue},{key:"actual",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.playerClasses.valueWithBonuses}];playerClass=m.D0.collector;PlayerClasses=m.xU;mounted(){this.playerClass=u.p.empire.playerClass==m.D0.none?m.D0.collector:u.p.empire.playerClass}bonusTypes=[{key:"classBonus",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.playerClasses.classBonus}];technologies=o._i;get techs(){return this.technologies.filter((e=>e.appliesTo(this.playerClass))).map((e=>e.type))}get planets(){return(0,c.r)(u.p.empire.planetOrder.map((e=>u.p.empire.planets[e])).filter((e=>!e.isMoon)),(e=>e.id),(e=>this.technologies.filter((e=>e.appliesTo(this.playerClass))).map((s=>{const r=this.getPlanetBonus(s,e);return{planet:e,technologyType:s.type,bonuses:(0,c.a)(["classBonus"],(e=>({base:r.base,buildings:r.buildings,level:r.level,total:r.total})))}}))))}get experience(){return u.p.lifeformExperience}getPlanetBonus(e,s){if(s.activeLifeform==n.e5.none||!s.activeLifeformTechnologies.includes(e.type))return{base:0,level:0,buildings:0,buildingsBoost:0,total:0};const r=Math.min((0,p.io)(s)[e.type],(0,y.K)({type:C.f.LifeformResearchBonusBoost})??Number.MAX_SAFE_INTEGER),t=e.getClassBonus(this.playerClass,s.lifeformTechnologies[e.type]),a=t*(0,i.g1)(this.experience[s.activeLifeform]),l=t*r;return{base:t,level:a,buildings:l,buildingsBoost:r,total:t+a+l}}};f=(0,l.gn)([(0,g.wA)({components:{LifeformBonusesBreakdown:h.Z}})],f);const b=f,v=b;var B=r(1001),S=(0,B.Z)(v,t,a,!1,null,null,null);const $=S.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,