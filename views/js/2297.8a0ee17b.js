"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[2297],{2025:(e,t,s)=>{function n(e){switch(e){case 1:return 240;case 2:return 190;case 3:return 140;case 4:return 90;case 5:return 80;case 6:return 70;case 7:return 60;case 8:return 50;case 9:return 40;case 10:return 30;case 11:return 20;case 12:return 10;case 13:return-30;case 14:return-70;case 15:return-110;default:throw new Error("invalid position")}}s.d(t,{h:()=>n})},8288:(e,t,s)=>{s.d(t,{B:()=>o});var n=s(7331),i=s(917);function o(e,t={}){const s={metal:0,crystal:0,deuterium:0,...e},o={metal:1,crystal:1,deuterium:1,...t};n.P.forEach((e=>s[e]*=o[e]));const{mode:r,msu:a,dsu:l}=i.V.settings.conversionRates;return"msu"==r?s.metal+s.crystal*a.crystal+s.deuterium*a.deuterium:s.deuterium+s.crystal/l.crystal+s.metal/l.metal}},1854:(e,t,s)=>{s.d(t,{Z:()=>$});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"planet-settings",class:{disabled:0==e.settings.include}},[s("div",{staticClass:"header"},[s("span",{domProps:{textContent:e._s(e.settings.name)}}),null!=e.settings.coordinates?s("span",[e._v(" ["+e._s(e.settings.coordinates.galaxy)+":"+e._s(e.settings.coordinates.system)+":"+e._s(e.settings.coordinates.position)+"] ")]):e._e()]),s("div",{staticClass:"body"},[e.toggleable?[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.planetSettings.includeInResult)}}),s("checkbox",{model:{value:e.settings.include,callback:function(t){e.$set(e.settings,"include",t)},expression:"settings.include"}})]:e._e(),s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.planetSettings.position)}}),s("span",[s("input",{directives:[{name:"model",rawName:"v-model.number",value:e.settings.position,expression:"settings.position",modifiers:{number:!0}}],attrs:{type:"number",min:"1",max:"15",step:"1"},domProps:{value:e.settings.position},on:{input:function(t){t.target.composing||e.$set(e.settings,"position",e._n(t.target.value))},blur:function(t){return e.$forceUpdate()}}})]),s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.planetSettings.maxTemperature)}}),s("span",[s("input",{directives:[{name:"model",rawName:"v-model.number",value:e.settings.maxTemperature,expression:"settings.maxTemperature",modifiers:{number:!0}}],attrs:{type:"number",min:"-130",max:"260",step:"1"},domProps:{value:e.settings.maxTemperature},on:{input:function(t){t.target.composing||e.$set(e.settings,"maxTemperature",e._n(t.target.value))},blur:function(t){return e.$forceUpdate()}}})]),s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.planetSettings.activeItems)}}),s("span",{staticClass:"item-grid"},[e._l(e.boosterItems.metal,(function(t){return s("o-item",{key:t,attrs:{item:t,disabled:t!=e.activeBooster.metal},on:{click:function(s){return e.toggleBooster(t,e.boosterItems.metal)}}})})),e._l(e.boosterItems.crystal,(function(t){return s("o-item",{key:t,attrs:{item:t,disabled:t!=e.activeBooster.crystal},on:{click:function(s){return e.toggleBooster(t,e.boosterItems.crystal)}}})})),e._l(e.boosterItems.deuterium,(function(t){return s("o-item",{key:t,attrs:{item:t,disabled:t!=e.activeBooster.deuterium},on:{click:function(s){return e.toggleBooster(t,e.boosterItems.deuterium)}}})}))],2),s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.planetSettings.crawlers.title)}}),s("span",{staticClass:"crawler-grid"},[s("div",{staticClass:"crawler-grid-row"},[s("input",{directives:[{name:"model",rawName:"v-model.number",value:e.settings.crawlers.percentage,expression:"settings.crawlers.percentage",modifiers:{number:!0}}],attrs:{type:"number",step:"10",min:"0",max:"150"},domProps:{value:e.settings.crawlers.percentage},on:{input:function(t){t.target.composing||e.$set(e.settings.crawlers,"percentage",e._n(t.target.value))},blur:function(t){return e.$forceUpdate()}}}),s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.planetSettings.crawlers.percentage)}})]),s("div",{staticClass:"crawler-grid-row"},[s("checkbox-button",{style:{"--color":e.settings.crawlers.max?"0, 255, 0":null},attrs:{"unchecked-color":null},model:{value:e.settings.crawlers.max,callback:function(t){e.$set(e.settings.crawlers,"max",t)},expression:"settings.crawlers.max"}},[e.settings.crawlers.max?s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.planetSettings.crawlers.maxCount)}}):s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.planetSettings.crawlers.fixCount)}})]),s("input",{directives:[{name:"model",rawName:"v-model.number",value:e.settings.crawlers.count,expression:"settings.crawlers.count",modifiers:{number:!0}}],attrs:{type:"number",disabled:e.settings.crawlers.max},domProps:{value:e.settings.crawlers.count},on:{input:function(t){t.target.composing||e.$set(e.settings.crawlers,"count",e._n(t.target.value))},blur:function(t){return e.$forceUpdate()}}})],1)]),null!=e.settings.mines?[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.planetSettings.mines)}}),s("span",{staticClass:"mine-grid"},[s("o-building",{attrs:{building:e.BuildingType.metalMine}}),s("input",{directives:[{name:"model",rawName:"v-model.number",value:e.settings.mines.metalMine,expression:"settings.mines.metalMine",modifiers:{number:!0}}],attrs:{type:"number"},domProps:{value:e.settings.mines.metalMine},on:{input:function(t){t.target.composing||e.$set(e.settings.mines,"metalMine",e._n(t.target.value))},blur:function(t){return e.$forceUpdate()}}}),s("o-building",{attrs:{building:e.BuildingType.crystalMine}}),s("input",{directives:[{name:"model",rawName:"v-model.number",value:e.settings.mines.crystalMine,expression:"settings.mines.crystalMine",modifiers:{number:!0}}],attrs:{type:"number"},domProps:{value:e.settings.mines.crystalMine},on:{input:function(t){t.target.composing||e.$set(e.settings.mines,"crystalMine",e._n(t.target.value))},blur:function(t){return e.$forceUpdate()}}}),s("o-building",{attrs:{building:e.BuildingType.deuteriumSynthesizer}}),s("input",{directives:[{name:"model",rawName:"v-model.number",value:e.settings.mines.deuteriumSynthesizer,expression:"settings.mines.deuteriumSynthesizer",modifiers:{number:!0}}],attrs:{type:"number"},domProps:{value:e.settings.mines.deuteriumSynthesizer},on:{input:function(t){t.target.composing||e.$set(e.settings.mines,"deuteriumSynthesizer",e._n(t.target.value))},blur:function(t){return e.$forceUpdate()}}})],1)]:e._e(),s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.planetSettings.lifeform)}}),s("span",{staticClass:"lifeform-grid"},e._l(e.lifeforms,(function(t){return s("o-lifeform",{key:t,attrs:{lifeform:t,disabled:t!=e.settings.lifeform},on:{click:function(s){return e.toggleLifeform(t)}}})})),1),null==e.planetData||e.productionMode?e._e():[s("span"),s("span",[s("checkbox",{attrs:{label:e.$i18n.$t.extension.empire.amortization.settings.planetSettings.ignoreEmptySlots},model:{value:e.settings.ignoreEmptyLifeformTechnologySlots,callback:function(t){e.$set(e.settings,"ignoreEmptyLifeformTechnologySlots",t)},expression:"settings.ignoreEmptyLifeformTechnologySlots"}})],1)],s("span"),s("span",[s("button",{staticClass:"toggle-lifeform-settings",attrs:{disabled:"none"==e.settings.lifeform},on:{click:function(t){e.showLifeformSettings=!e.showLifeformSettings}}},[s("span",{staticClass:"mdi",class:e.showLifeformSettings?"mdi-menu-up":"mdi-menu-down"}),s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.planetSettings.lifeformSettings)}})])]),e.showLifeformSettings?[null!=e.settings.lifeformTechnologyLevels?[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.planetSettings.relevantLifeformBuildings)}}),s("span",{staticClass:"lifeform-building-grid"},[e._l(e.applicableLifeformBuildings,(function(t){return[s("o-lifeform-building",{key:t+"-icon",attrs:{building:t}}),s("input",{directives:[{name:"model",rawName:"v-model.number",value:e.settings.lifeformBuildingLevels[t],expression:"settings.lifeformBuildingLevels[building]",modifiers:{number:!0}}],key:t+"-input",attrs:{type:"number"},domProps:{value:e.settings.lifeformBuildingLevels[t]},on:{input:function(s){s.target.composing||e.$set(e.settings.lifeformBuildingLevels,t,e._n(s.target.value))},blur:function(t){return e.$forceUpdate()}}})]}))],2)]:e._e(),s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.planetSettings.lifeformTechnologies)}}),s("span",[s("span",{staticClass:"lifeform-tech-grid"},e._l([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],(function(t){return s("span",{key:"slot-"+t,staticClass:"row"},[7==t||13==t?s("hr"):e._e(),e._l(e.lifeforms,(function(n){return s("o-lifeform-technology",{key:e.lifeformTechBySlot[t][n],attrs:{technology:e.lifeformTechBySlot[t][n],disabled:e.getSelectedLifeformTechBySlot(t)!=e.lifeformTechBySlot[t][n]},on:{click:function(s){return e.toggleLifeformTech(e.lifeformTechBySlot[t][n])}}})})),null==e.settings.lifeformTechnologyLevels?s("span"):null!=e.getSelectedLifeformTechBySlot(t)?s("input",{directives:[{name:"model",rawName:"v-model.number",value:e.settings.lifeformTechnologyLevels[e.getSelectedLifeformTechBySlot(t)],expression:"settings.lifeformTechnologyLevels[getSelectedLifeformTechBySlot(slot)]",modifiers:{number:!0}}],attrs:{type:"number"},domProps:{value:e.settings.lifeformTechnologyLevels[e.getSelectedLifeformTechBySlot(t)]},on:{input:function(s){s.target.composing||e.$set(e.settings.lifeformTechnologyLevels,e.getSelectedLifeformTechBySlot(t),e._n(s.target.value))},blur:function(t){return e.$forceUpdate()}}}):s("input",{attrs:{type:"number",disabled:""}})],2)})),0)])]:e._e()],2)])},i=[],o=s(655),r=s(6864),a=s(1639),l=s(6119),u=s(2816),m=s(9681),c=s(3418),d=s(2057),p=s(9751),g=s(6538),f=s(7076),y=s(4028),v=s(2025),_=s(7331);let h=class extends y.w3{ShipType=d.g;BuildingType=r.A;lifeforms=c.p3;slots=Array.from({length:18}).map(((e,t)=>t+1));lifeformTechBySlot=(0,p.a)(this.slots,(e=>(0,p.a)(c.p3,(t=>m.dY[t].find((t=>m.rI[t]==e))??(0,g.A)("invalid slot")))));getSelectedLifeformTechBySlot(e){const t=Object.values(this.lifeformTechBySlot[e]);return t.find((e=>this.settings.activeLifeformTechnologies.includes(e)))??null}applicableBuildingTypes=[...l.yn.filter((e=>_.P.some((t=>e.appliesTo(t))))),...l.d2,...l.ZX,...l.ax].map((e=>e.type));get applicableLifeformBuildings(){const e=u.IU[this.settings.lifeform];return e.filter((e=>this.applicableBuildingTypes.includes(e)))}settings;planetData;productionMode;onSettingsChanged(){const e=this.settings.lifeform;if(e==c.e5.none)return;const t=this.planetData;if(this.settings.ignoreEmptyLifeformTechnologySlots&&null!=t){const e=this.settings.activeLifeformTechnologies.filter((e=>{const s=m.rI[e];return!t.activeLifeformTechnologies.some((e=>s==m.rI[e]))}));e.length>0&&(this.settings.activeLifeformTechnologies=this.settings.activeLifeformTechnologies.filter((t=>!e.includes(t))))}}onAstrophysicsSettingsPlanetPositionChanged(e){this.settings.maxTemperature=(0,v.h)(e)}toggleable;boosterItems={metal:[a.t.metalBooster_bronze_7days,a.t.metalBooster_silver_7days,a.t.metalBooster_gold_7days,a.t.metalBooster_platinum_7days],crystal:[a.t.crystalBooster_bronze_7days,a.t.crystalBooster_silver_7days,a.t.crystalBooster_gold_7days,a.t.crystalBooster_platinum_7days],deuterium:[a.t.deuteriumBooster_bronze_7days,a.t.deuteriumBooster_silver_7days,a.t.deuteriumBooster_gold_7days,a.t.deuteriumBooster_platinum_7days]};boosterItemsMap={[a.t.metalBooster_bronze_7days]:a.t.metalBooster_bronze_7days,[a.t.metalBooster_silver_7days]:a.t.metalBooster_silver_7days,[a.t.metalBooster_gold_7days]:a.t.metalBooster_gold_7days,[a.t.metalBooster_platinum_7days]:a.t.metalBooster_platinum_7days,[a.t.metalBooster_silver_30days]:a.t.metalBooster_silver_7days,[a.t.metalBooster_gold_30days]:a.t.metalBooster_gold_7days,[a.t.metalBooster_platinum_30days]:a.t.metalBooster_platinum_7days,[a.t.metalBooster_silver_90days]:a.t.metalBooster_silver_7days,[a.t.metalBooster_gold_90days]:a.t.metalBooster_gold_7days,[a.t.metalBooster_platinum_90days]:a.t.metalBooster_platinum_7days,[a.t.crystalBooster_bronze_7days]:a.t.crystalBooster_bronze_7days,[a.t.crystalBooster_silver_7days]:a.t.crystalBooster_silver_7days,[a.t.crystalBooster_gold_7days]:a.t.crystalBooster_gold_7days,[a.t.crystalBooster_platinum_7days]:a.t.crystalBooster_platinum_7days,[a.t.crystalBooster_silver_30days]:a.t.crystalBooster_silver_7days,[a.t.crystalBooster_gold_30days]:a.t.crystalBooster_gold_7days,[a.t.crystalBooster_platinum_30days]:a.t.crystalBooster_platinum_7days,[a.t.crystalBooster_silver_90days]:a.t.crystalBooster_silver_7days,[a.t.crystalBooster_gold_90days]:a.t.crystalBooster_gold_7days,[a.t.crystalBooster_platinum_90days]:a.t.crystalBooster_platinum_7days,[a.t.deuteriumBooster_bronze_7days]:a.t.deuteriumBooster_bronze_7days,[a.t.deuteriumBooster_silver_7days]:a.t.deuteriumBooster_silver_7days,[a.t.deuteriumBooster_gold_7days]:a.t.deuteriumBooster_gold_7days,[a.t.deuteriumBooster_platinum_7days]:a.t.deuteriumBooster_platinum_7days,[a.t.deuteriumBooster_silver_30days]:a.t.deuteriumBooster_silver_7days,[a.t.deuteriumBooster_gold_30days]:a.t.deuteriumBooster_gold_7days,[a.t.deuteriumBooster_platinum_30days]:a.t.deuteriumBooster_platinum_7days,[a.t.deuteriumBooster_silver_90days]:a.t.deuteriumBooster_silver_7days,[a.t.deuteriumBooster_gold_90days]:a.t.deuteriumBooster_gold_7days,[a.t.deuteriumBooster_platinum_90days]:a.t.deuteriumBooster_platinum_7days};showLifeformSettings=!1;get isCrawlerOverloadEnabled(){return f.s.serverSettings.playerClasses.collector.crawlers.isOverloadEnabled}get activeBooster(){return{metal:this.boosterItems.metal.find((e=>this.settings.activeItems.map((e=>this.boosterItemsMap[e])).includes(e))),crystal:this.boosterItems.crystal.find((e=>this.settings.activeItems.map((e=>this.boosterItemsMap[e])).includes(e))),deuterium:this.boosterItems.deuterium.find((e=>this.settings.activeItems.map((e=>this.boosterItemsMap[e])).includes(e)))}}toggleBooster(e,t){const s=this.settings.activeItems.map((e=>this.boosterItemsMap[e])).filter((s=>s==e||!t.includes(s)));s.includes(e)?this.settings.activeItems=s.filter((t=>t!=e)):this.settings.activeItems=[...s,e]}toggleLifeform(e){if(this.settings.lifeform==e)return this.settings.lifeform=c.e5.none,this.settings.activeLifeformTechnologies=[],void(this.showLifeformSettings=!1);this.settings.lifeform=e,this.settings.activeLifeformTechnologies=m.dY[this.settings.lifeform]}toggleLifeformTech(e){this.settings.activeLifeformTechnologies.includes(e)?this.settings.activeLifeformTechnologies=this.settings.activeLifeformTechnologies.filter((t=>t!=e)):(this.settings.activeLifeformTechnologies=this.settings.activeLifeformTechnologies.filter((t=>m.rI[t]!=m.rI[e])),this.settings.activeLifeformTechnologies.push(e))}};(0,o.gn)([(0,y.Ey)({required:!0,type:Object})],h.prototype,"settings",void 0),(0,o.gn)([(0,y.fI)({required:!1,type:Object})],h.prototype,"planetData",void 0),(0,o.gn)([(0,y.fI)({required:!1,type:Boolean})],h.prototype,"productionMode",void 0),(0,o.gn)([(0,y.RL)("settings",{immediate:!0,deep:!0})],h.prototype,"onSettingsChanged",null),(0,o.gn)([(0,y.RL)("settings.position")],h.prototype,"onAstrophysicsSettingsPlanetPositionChanged",null),(0,o.gn)([(0,y.fI)({required:!1,type:Boolean})],h.prototype,"toggleable",void 0),h=(0,o.gn)([(0,y.wA)({})],h);const b=h,C=b;var x=s(1001),B=(0,x.Z)(C,n,i,!1,null,"78a1a488",null);const $=B.exports},6705:(e,t,s)=>{s.d(t,{Z:()=>_});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"player-settings"},[e.productionMode?e._e():[s("conversion-rate-settings",{staticClass:"conversion-rate-settings"}),s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.playerSettings.optimizeForResources)}}),s("span",{staticClass:"gap"},e._l(e.resources,(function(t){return s("o-resource",{key:t,staticClass:"toggleable-resource",attrs:{resource:t,disabled:!e.settings.optimizeForResources.includes(t)},on:{click:function(s){return e.toggleOptimizeForResource(t)}}})})),1)],s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.playerSettings.officers)}}),s("span",{staticClass:"gap"},e._l(e.settings.officers,(function(t,n){return s("o-officer",{key:n,attrs:{officer:n,disabled:!t},on:{click:function(t){e.settings.officers[n]=!e.settings.officers[n]}}})})),1),s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.playerSettings.playerClass)}}),s("span",{staticClass:"gap"},e._l(e.playerClasses,(function(t){return s("o-player-class",{key:t,attrs:{"player-class":t,disabled:e.settings.playerClass!=t},on:{click:function(s){return e.togglePlayerClass(t)}}})})),1),s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.playerSettings.allianceClass)}}),s("span",{staticClass:"gap"},e._l(e.allianceClasses,(function(t){return s("o-alliance-class",{key:t,attrs:{"alliance-class":t,disabled:e.settings.allianceClass!=t},on:{click:function(s){return e.toggleAllianceClass(t)}}})})),1),s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.playerSettings.currentLevelOf(e.$i18n.$t.ogame.research[e.ResearchType.plasmaTechnology]))}}),s("span",[s("o-research",{attrs:{research:e.ResearchType.plasmaTechnology}}),s("input",{directives:[{name:"model",rawName:"v-model.number",value:e.settings.levelPlasmaTechnology,expression:"settings.levelPlasmaTechnology",modifiers:{number:!0}}],attrs:{type:"number",min:"0",max:"50",step:"1"},domProps:{value:e.settings.levelPlasmaTechnology},on:{input:function(t){t.target.composing||e.$set(e.settings,"levelPlasmaTechnology",e._n(t.target.value))},blur:function(t){return e.$forceUpdate()}}})],1),e.productionMode?e._e():[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.playerSettings.currentLevelOf(e.$i18n.$t.ogame.research[e.ResearchType.astrophysics]))}}),s("span",[s("o-research",{attrs:{research:e.ResearchType.astrophysics}}),s("input",{attrs:{type:"number",disabled:""},domProps:{value:e.settings.levelAstrophysics}})],1),s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.playerSettings.unusedRaidColonySlots)}}),s("span",[s("input",{directives:[{name:"model",rawName:"v-model.number",value:e.settings.numberOfUnusedRaidColonySlots,expression:"settings.numberOfUnusedRaidColonySlots",modifiers:{number:!0}}],attrs:{type:"number",min:0,max:100,step:"1"},domProps:{value:e.settings.numberOfUnusedRaidColonySlots},on:{input:function(t){t.target.composing||e.$set(e.settings,"numberOfUnusedRaidColonySlots",e._n(t.target.value))},blur:function(t){return e.$forceUpdate()}}})])],s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.amortization.settings.playerSettings.lifeformLevels)}}),s("span",{staticClass:"lifeform-level-grid"},e._l(e.LifeformTypes,(function(t){return s("span",{key:t,staticStyle:{display:"contents"}},[s("o-lifeform",{attrs:{lifeform:t}}),s("input",{directives:[{name:"model",rawName:"v-model.number",value:e.settings.lifeformLevels[t],expression:"settings.lifeformLevels[lifeform]",modifiers:{number:!0}}],attrs:{type:"number",min:"0",step:"1"},domProps:{value:e.settings.lifeformLevels[t]},on:{input:function(s){s.target.composing||e.$set(e.settings.lifeformLevels,t,e._n(s.target.value))},blur:function(t){return e.$forceUpdate()}}})],1)})),0)],2)},i=[],o=s(655),r=s(9867),a=s(602),l=s(4028),u=s(6597),m=s(3738),c=s(7331),d=s(3418);let p=class extends l.w3{settings;productionMode;resources=c.P;ResearchType=m.s;playerClasses=a.xU;allianceClasses=r.xA;LifeformTypes=d.p3;togglePlayerClass(e){this.settings.playerClass!=e?this.settings.playerClass=e:this.settings.playerClass=a.D0.none}toggleAllianceClass(e){this.settings.allianceClass!=e?this.settings.allianceClass=e:this.settings.allianceClass=r.Ck.none}toggleOptimizeForResource(e){this.settings.optimizeForResources.includes(e)?this.settings.optimizeForResources=this.settings.optimizeForResources.filter((t=>t!=e)):this.settings.optimizeForResources.push(e)}};(0,o.gn)([(0,l.Ey)({required:!0,type:Object})],p.prototype,"settings",void 0),(0,o.gn)([(0,l.fI)({required:!1,type:Boolean,default:()=>!1})],p.prototype,"productionMode",void 0),p=(0,o.gn)([(0,l.wA)({components:{ConversionRateSettings:u.Z}})],p);const g=p,f=g;var y=s(1001),v=(0,y.Z)(f,n,i,!1,null,"1c8a4385",null);const _=v.exports},6597:(e,t,s)=>{s.d(t,{Z:()=>p});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"conversion-rate-settings fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.title)}})]),s("div",{staticClass:"fake-table-body"},[s("select",{domProps:{value:e.conversionMode},on:{input:function(t){return e.setConversionMode(t.target.value)}}},[s("option",{attrs:{value:"msu"},domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.msuLong+" ("+e.$i18n.$t.extension.common.msu+")")}}),s("option",{attrs:{value:"dsu"},domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.dsuLong+" ("+e.$i18n.$t.extension.common.dsu+")")}})]),"msu"==e.conversionMode?s("span",{staticClass:"inputs"},[s("span",[s("o-resource",{attrs:{resource:"crystal"}}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.msu.crystal,expression:"msu.crystal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"1",max:"3",step:"0.01"},domProps:{value:e.msu.crystal},on:{change:[function(t){e.$set(e.msu,"crystal",e._n(t.target.value))},function(t){return e.updateMsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("o-resource",{attrs:{resource:"metal"}})],1),s("span",[s("o-resource",{attrs:{resource:"deuterium"}}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.msu.deuterium,expression:"msu.deuterium",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"2",max:"5",step:"0.01"},domProps:{value:e.msu.deuterium},on:{change:[function(t){e.$set(e.msu,"deuterium",e._n(t.target.value))},function(t){return e.updateMsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("o-resource",{attrs:{resource:"metal"}})],1)]):s("span",{staticClass:"inputs"},[s("span",[s("o-resource",{attrs:{resource:"metal"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.dsu.metal,expression:"dsu.metal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"2",max:"5",step:"0.01"},domProps:{value:e.dsu.metal},on:{change:[function(t){e.$set(e.dsu,"metal",e._n(t.target.value))},function(t){return e.updateDsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("o-resource",{attrs:{resource:"deuterium"}})],1),s("span",[s("o-resource",{attrs:{resource:"crystal"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.dsu.crystal,expression:"dsu.crystal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"1",max:"3",step:"0.01"},domProps:{value:e.dsu.crystal},on:{change:[function(t){e.$set(e.dsu,"crystal",e._n(t.target.value))},function(t){return e.updateDsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("o-resource",{attrs:{resource:"deuterium"}})],1)])])])},i=[],o=s(655),r=s(4028),a=s(917);let l=class extends r.w3{msu={crystal:2,deuterium:3};dsu={metal:3,crystal:2};get msuRates(){return a.V.settings.conversionRates.msu}get dsuRates(){return a.V.settings.conversionRates.dsu}get conversionMode(){return a.V.settings.conversionRates.mode}setConversionMode(e){a.V.updateSettings({...a.V.settings,conversionRates:{...a.V.settings.conversionRates,mode:e}})}onMsuRatesChanged(){const{crystal:e,deuterium:t}=this.msuRates;this.msu.crystal=e,this.msu.deuterium=t}updateMsuConversionRates(){a.V.updateSettings({...a.V.settings,conversionRates:{...a.V.settings.conversionRates,msu:this.msu}})}onDsuRatesChanged(){const{crystal:e,metal:t}=this.dsuRates;this.dsu.crystal=e,this.dsu.metal=t}updateDsuConversionRates(){a.V.updateSettings({...a.V.settings,conversionRates:{...a.V.settings.conversionRates,dsu:this.dsu}})}};(0,o.gn)([(0,r.RL)("msuRates",{immediate:!0})],l.prototype,"onMsuRatesChanged",null),(0,o.gn)([(0,r.RL)("dsuRates",{immediate:!0})],l.prototype,"onDsuRatesChanged",null),l=(0,o.gn)([(0,r.wA)({})],l);const u=l,m=u;var c=s(1001),d=(0,c.Z)(m,n,i,!1,null,"13cde7dd",null);const p=d.exports},3787:(e,t,s)=>{s.d(t,{Z:()=>p});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.showConvertedUnitsInTables.title)}})]),s("div",{staticClass:"fake-table-body"},[s("checkbox",{attrs:{value:e.showCellsWithConvertedResourceUnits,label:e.$i18n.$t.extension.settings.showConvertedUnitsInTables.label},on:{input:function(t){return e.toggle(t)}}}),e._t("default")],2)])},i=[],o=s(655),r=s(4028),a=s(917);let l=class extends r.w3{get showCellsWithConvertedResourceUnits(){return a.V.settings.showCellsWithConvertedResourceUnits}toggle(e){a.V.updateSettings({...a.V.settings,showCellsWithConvertedResourceUnits:e})}};l=(0,o.gn)([(0,r.wA)({})],l);const u=l,m=u;var c=s(1001),d=(0,c.Z)(m,n,i,!1,null,"90457dc2",null);const p=d.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,