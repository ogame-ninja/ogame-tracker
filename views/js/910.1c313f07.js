"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[910],{4698:(e,t,s)=>{s.d(t,{O:()=>p});var n=s(1821),a=s(3347),r=s(1745),o=s(776),i=s(5424),l=s(612),u=s(6105),d=s(3418),c=s(7331),m=s(2057);function p(e){const t=n.j.locale;n.j.locale=e;const s={dateRanges:[{label:n.j.$t.extension.settings.dateRanges.defaultNames.today,type:"day",skip:0,take:1},{label:n.j.$t.extension.settings.dateRanges.defaultNames.yesterday,type:"day",skip:1,take:1},{label:n.j.$t.extension.settings.dateRanges.defaultNames.currentWeek,type:"week",skip:0,take:1},{label:n.j.$t.extension.settings.dateRanges.defaultNames.lastWeek,type:"week",skip:1,take:1},{label:n.j.$t.extension.settings.dateRanges.defaultNames.currentMonth,type:"month",skip:0,take:1},{type:"all"}],lostShipsResourceUnits:{factor:1,deuteriumFactor:1},resourceBalance:{showDetailedBreakdown:!1,includeExpeditionFoundShipsResourceUnits:!0,includeLostShipsResourceUnits:!0,includeLostLootResources:!0},conversionRates:{mode:"msu",msu:{crystal:1.5,deuterium:3},dsu:{metal:3,crystal:2}},showCellsWithConvertedResourceUnits:!0,expeditionFoundShipsResourceUnits:{factor:1,deuteriumFactor:1},extensionLanguage:e,defaultRoutes:{},colors:{combatResults:{[a.a.won]:"#00c23a",[a.a.draw]:"#aaaaaa",[a.a.lost]:"#d11515"},resources:{[c._.metal]:"#ff5e00",[c._.crystal]:"#1a9fff",[c._.deuterium]:"#1bee8f",totalConverted:"#999999"},ships:{[m.g.lightFighter]:"#2472f3",[m.g.heavyFighter]:"#c72525",[m.g.cruiser]:"#fbbc04",[m.g.battleship]:"#9ecc00",[m.g.bomber]:"#00a95e",[m.g.battlecruiser]:"#075263",[m.g.destroyer]:"#de5200",[m.g.reaper]:"#16a8d4",[m.g.pathfinder]:"#ad135e",[m.g.smallCargo]:"#888888",[m.g.largeCargo]:"#ffffff",[m.g.espionageProbe]:"#4b17da",[m.g.deathStar]:"#262530",[m.g.recycler]:"#8aff8e",[m.g.colonyShip]:"#d7b58e",[m.g.crawler]:"#94b4ff",[m.g.solarSatellite]:"#dd94ff"},expeditions:{events:{[i.r.nothing]:"#404040",[i.r.resources]:"#2242e2",[i.r.fleet]:"#dddddd",[i.r.delay]:"#ff5e00",[i.r.early]:"#00c23a",[i.r.darkMatter]:"#33bcdb",[i.r.pirates]:"#ffb592",[i.r.aliens]:"#92ffdc",[i.r.combat]:"#ffb592",[i.r.item]:"#6f23e1",[i.r.trader]:"#fbbc04",[i.r.lostFleet]:"#d11515"},sizes:{[o.Mm.small]:"#404040",[o.Mm.medium]:"#3e85fe",[o.Mm.large]:"#e01a76","fled-death-star":"#dddddd"},depletion:{[r.q.none]:"#00c23a",[r.q.low]:"#fbbc04",[r.q.medium]:"#ff5e00",[r.q.high]:"#c72525",unknown:"#404040"}},lifeformDiscoveries:{events:{[u.y.nothing]:"#404040",[u.y.lostShip]:"#d11515",[u.y.knownLifeformFound]:"#33bcdb",[u.y.newLifeformFound]:"#00c23a",[u.y.artifacts]:"#fbbc04"},artifactFindingSizes:{[l.k.small]:"#404040",[l.k.medium]:"#3e85fe",[l.k.large]:"#e01a76",[l.k.storageFull]:"#d11515"}},lifeforms:{[d.e5.humans]:"#7ec000",[d.e5.rocktal]:"#df6642",[d.e5.mechas]:"#4b91e7",[d.e5.kaelesh]:"#9863e9"}},universeHistory:{updateTimes:[72e6],enabled:!1,trackHistory:!1},combatTracking:{ignoreEspionageFights:!0},messageTracking:{showSimplifiedResults:!0},debrisFields:{separateExpeditionDebrisFields:!1}};return n.j.locale=t,s}},8288:(e,t,s)=>{s.d(t,{B:()=>r});var n=s(7331),a=s(917);function r(e,t={}){const s={metal:0,crystal:0,deuterium:0,...e},r={metal:1,crystal:1,deuterium:1,...t};n.P.forEach((e=>s[e]*=r[e]));const{mode:o,msu:i,dsu:l}=a.V.settings.conversionRates;return"msu"==o?s.metal+s.crystal*i.crystal+s.deuterium*i.deuterium:s.deuterium+s.crystal/l.crystal+s.metal/l.metal}},3978:(e,t,s)=>{s.d(t,{Z:()=>y});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("floating-menu",{attrs:{left:""},scopedSlots:e._u([{key:"activator",fn:function(){return[s("button",{on:{click:function(t){e.show=!e.show}}},[s("span",{staticClass:"mdi mdi-plus"})])]},proxy:!0}]),model:{value:e.show,callback:function(t){e.show=t},expression:"show"}},[s("div",{staticClass:"fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.debrisFields.addDebrisFieldManually.title)}})]),s("div",{staticClass:"fake-table-body"},[s("span",[s("o-resource",{attrs:{resource:"metal"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.metal,expression:"metal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",value:"1",min:"0",step:"1"},domProps:{value:e.metal},on:{change:function(t){e.metal=e._n(t.target.value)},blur:function(t){return e.$forceUpdate()}}})],1),s("span",[s("o-resource",{attrs:{resource:"crystal"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.crystal,expression:"crystal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"0",step:"1"},domProps:{value:e.crystal},on:{change:function(t){e.crystal=e._n(t.target.value)},blur:function(t){return e.$forceUpdate()}}})],1),s("span",[s("span",{staticClass:"mdi mdi-calendar calendar-icon"}),s("input",{directives:[{name:"model",rawName:"v-model.lazy",value:e.datetimeString,expression:"datetimeString",modifiers:{lazy:!0}}],attrs:{type:"datetime-local"},domProps:{value:e.datetimeString},on:{change:function(t){e.datetimeString=t.target.value}}})]),s("button",{staticClass:"add",attrs:{disabled:0==e.metal&&0==e.crystal||null==e.datetime},domProps:{textContent:e._s(e.$i18n.$t.extension.debrisFields.addDebrisFieldManually.buttonText)},on:{click:function(t){return e.addManualDebrisFieldReport()}}})])])])},a=[],r=s(655),o=s(2809),i=s(1936),l=s(4028),u=s(5359),d=s(8717);let c=class extends l.w3{show=!1;datetimeString="";metal=0;crystal=0;get nextId(){const e=Math.min(0,u.J.minId);return e-1}get datetime(){if(""==this.datetimeString)return null;const e=new Date(this.datetimeString).getTime();return isNaN(e)?null:e}addManualDebrisFieldReport(){const e=this.datetime;if(null==e)return;const t={ogameMeta:d.l,type:i.C.TrackManualDebrisFieldReport,data:{id:this.nextId,date:e,metal:this.metal,crystal:this.crystal},senderUuid:d.g};(0,o.b)(t),this.datetimeString="",this.metal=0,this.crystal=0}};c=(0,r.gn)([(0,l.wA)({})],c);const m=c,p=m;var g=s(1001),f=(0,g.Z)(p,n,a,!1,null,"de75cc08",null);const y=f.exports},6597:(e,t,s)=>{s.d(t,{Z:()=>p});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"conversion-rate-settings fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.title)}})]),s("div",{staticClass:"fake-table-body"},[s("select",{domProps:{value:e.conversionMode},on:{input:function(t){return e.setConversionMode(t.target.value)}}},[s("option",{attrs:{value:"msu"},domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.msuLong+" ("+e.$i18n.$t.extension.common.msu+")")}}),s("option",{attrs:{value:"dsu"},domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.dsuLong+" ("+e.$i18n.$t.extension.common.dsu+")")}})]),"msu"==e.conversionMode?s("span",{staticClass:"inputs"},[s("span",[s("o-resource",{attrs:{resource:"crystal"}}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.msu.crystal,expression:"msu.crystal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"1",max:"3",step:"0.01"},domProps:{value:e.msu.crystal},on:{change:[function(t){e.$set(e.msu,"crystal",e._n(t.target.value))},function(t){return e.updateMsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("o-resource",{attrs:{resource:"metal"}})],1),s("span",[s("o-resource",{attrs:{resource:"deuterium"}}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.msu.deuterium,expression:"msu.deuterium",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"2",max:"5",step:"0.01"},domProps:{value:e.msu.deuterium},on:{change:[function(t){e.$set(e.msu,"deuterium",e._n(t.target.value))},function(t){return e.updateMsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("o-resource",{attrs:{resource:"metal"}})],1)]):s("span",{staticClass:"inputs"},[s("span",[s("o-resource",{attrs:{resource:"metal"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.dsu.metal,expression:"dsu.metal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"2",max:"5",step:"0.01"},domProps:{value:e.dsu.metal},on:{change:[function(t){e.$set(e.dsu,"metal",e._n(t.target.value))},function(t){return e.updateDsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("o-resource",{attrs:{resource:"deuterium"}})],1),s("span",[s("o-resource",{attrs:{resource:"crystal"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.dsu.crystal,expression:"dsu.crystal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"1",max:"3",step:"0.01"},domProps:{value:e.dsu.crystal},on:{change:[function(t){e.$set(e.dsu,"crystal",e._n(t.target.value))},function(t){return e.updateDsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("o-resource",{attrs:{resource:"deuterium"}})],1)])])])},a=[],r=s(655),o=s(4028),i=s(917);let l=class extends o.w3{msu={crystal:2,deuterium:3};dsu={metal:3,crystal:2};get msuRates(){return i.V.settings.conversionRates.msu}get dsuRates(){return i.V.settings.conversionRates.dsu}get conversionMode(){return i.V.settings.conversionRates.mode}setConversionMode(e){i.V.updateSettings({...i.V.settings,conversionRates:{...i.V.settings.conversionRates,mode:e}})}onMsuRatesChanged(){const{crystal:e,deuterium:t}=this.msuRates;this.msu.crystal=e,this.msu.deuterium=t}updateMsuConversionRates(){i.V.updateSettings({...i.V.settings,conversionRates:{...i.V.settings.conversionRates,msu:this.msu}})}onDsuRatesChanged(){const{crystal:e,metal:t}=this.dsuRates;this.dsu.crystal=e,this.dsu.metal=t}updateDsuConversionRates(){i.V.updateSettings({...i.V.settings,conversionRates:{...i.V.settings.conversionRates,dsu:this.dsu}})}};(0,r.gn)([(0,o.RL)("msuRates",{immediate:!0})],l.prototype,"onMsuRatesChanged",null),(0,r.gn)([(0,o.RL)("dsuRates",{immediate:!0})],l.prototype,"onDsuRatesChanged",null),l=(0,r.gn)([(0,o.wA)({})],l);const u=l,d=u;var c=s(1001),m=(0,c.Z)(d,n,a,!1,null,"13cde7dd",null);const p=m.exports},1799:(e,t,s)=>{s.d(t,{Z:()=>m});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("button",{staticClass:"reset-button",attrs:{title:e.$i18n.$t.extension.settings.reset},on:{click:function(t){return e.$emit("reset")}}},[s("span",{staticClass:"mdi mdi-refresh"})])},a=[],r=s(655),o=s(4028);let i=class extends o.w3{};i=(0,r.gn)([(0,o.wA)({})],i);const l=i,u=l;var d=s(1001),c=(0,d.Z)(u,n,a,!1,null,"6ca60f84",null);const m=c.exports},7174:(e,t,s)=>{s.d(t,{Z:()=>p});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("grid-table",{staticClass:"color-settings",staticStyle:{width:"max-content"},attrs:{columns:e.columns,items:e.items},scopedSlots:e._u([{key:"header-key",fn:function(t){var n=t.label;return[s("span",{domProps:{textContent:e._s(n)}}),s("reset-button",{on:{reset:function(t){return e.$emit("reset")}}})]}},{key:"cell-key",fn:function(t){var n=t.value;return[s("div",{staticClass:"color-input",on:{click:function(t){e.$refs["colorInput-"+n].click()}}},[s("input",{ref:"colorInput-"+n,attrs:{type:"color"},domProps:{value:e.colors[n]},on:{change:function(t){return e.updateColor(n,t)}}}),s("div",{staticClass:"color-indicator",style:{background:e.colors[n]}}),s("span",{domProps:{textContent:e._s(e.labels[n])}})])]}}])})},a=[],r=s(655),o=s(4028),i=s(1799);let l=class extends o.w3{header;colors;labels;keys;get columns(){return[{key:"key",label:this.header,headerClass:"color-settings-header"}]}get items(){const e=this.keys??Object.keys(this.colors);return e.map((e=>({key:e})))}updateColor(e,t){t.target instanceof HTMLInputElement&&(this.colors={...this.colors,[e]:t.target.value})}};(0,r.gn)([(0,o.fI)({required:!0,type:String})],l.prototype,"header",void 0),(0,r.gn)([(0,o.Ey)({required:!0,type:Object})],l.prototype,"colors",void 0),(0,r.gn)([(0,o.fI)({required:!0,type:Object})],l.prototype,"labels",void 0),(0,r.gn)([(0,o.fI)({required:!1,type:Array,default:()=>null})],l.prototype,"keys",void 0),l=(0,r.gn)([(0,o.wA)({components:{ResetButton:i.Z}})],l);const u=l,d=u;var c=s(1001),m=(0,c.Z)(d,n,a,!1,null,"2f24a3e0",null);const p=m.exports},7196:(e,t,s)=>{s.d(t,{Z:()=>v});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("color-settings-table",{attrs:{header:e.$i18n.$t.extension.settings.colors.resources,labels:e.labels,keys:e.keys,value:e.colors},on:{input:function(t){return e.updateColors(t)},reset:function(t){return e.resetColors()}}})},a=[],r=s(655),o=s(9167),i=s(7331),l=s(4698),u=s(917),d=s(4028),c=s(7174);let m=class extends d.w3{get labels(){return{[i._.metal]:this.$i18n.$t.extension.resources.metal,[i._.crystal]:this.$i18n.$t.extension.resources.crystal,[i._.deuterium]:this.$i18n.$t.extension.resources.deuterium,totalConverted:`${this.$i18n.$t.extension.common.resourceUnits} (${this.$i18n.$t.extension.common.msu}/${this.$i18n.$t.extension.common.dsu})`}}keys=[i._.metal,i._.crystal,i._.deuterium,"totalConverted"];get colors(){return u.V.settings.colors.resources}updateColors(e){u.V.updateSettings({...u.V.settings,colors:{...u.V.settings.colors,resources:e}})}resetColors(){const e=(0,l.O)(o.I.de).colors.resources;this.updateColors(e)}};m=(0,r.gn)([(0,d.wA)({components:{ColorSettingsTable:c.Z}})],m);const p=m,g=p;var f=s(1001),y=(0,f.Z)(g,n,a,!1,null,null,null);const v=y.exports},4139:(e,t,s)=>{s.d(t,{Z:()=>p});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.debrisFields.separateExpeditionDebrisFields.title)}})]),s("div",{staticClass:"fake-table-body"},[s("checkbox",{attrs:{value:e.separateExpeditionDebrisFields,label:e.$i18n.$t.extension.settings.debrisFields.separateExpeditionDebrisFields.label},on:{input:function(t){return e.toggle(t)}}})],1)])},a=[],r=s(655),o=s(917),i=s(4028);let l=class extends i.w3{get separateExpeditionDebrisFields(){return o.V.settings.debrisFields.separateExpeditionDebrisFields}toggle(e){o.V.updateSettings({...o.V.settings,debrisFields:{...o.V.settings.debrisFields,separateExpeditionDebrisFields:e}})}};l=(0,r.gn)([(0,i.wA)({})],l);const u=l,d=u;var c=s(1001),m=(0,c.Z)(d,n,a,!1,null,"bfa7b77a",null);const p=m.exports},3421:(e,t,s)=>{s.d(t,{Z:()=>y});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("scrollable-chart",{attrs:{datasets:e.computedDatasets,"x-label-formatter":function(t){return e.formatDate(t)},"no-legend":e.noLegend,"hide-tooltip-footer":e.noTooltipFooter},scopedSlots:e._u([{key:"tooltip-footer",fn:function(t){var s=t.datasets;return[e._t("tooltip-footer",null,{datasets:s})]}}],null,!0)})},a=[],r=s(655),o=s(9119),i=s(5347),l=s(9383),u=s(7349),d=s(4028);let c=class extends d.w3{datasets;noLegend;noTooltipFooter;firstDay;itemsPerDay;minDays;get minDay(){const e="number"===typeof this.firstDay?this.firstDay:this.firstDay.getTime(),t=(0,o.Z)(Date.now());return Math.min(e,(0,i.Z)(t,this.minDays-1).getTime())}get computedDatasets(){const e=this.minDay,t=(0,l.Z)((0,o.Z)(Date.now()),e),s=Array.from({length:t+1}).map(((t,s)=>(0,u.Z)(e,s).getTime())),n=s.map((e=>this.itemsPerDay[e]??null)),a=n.filter((e=>null!=e)).length;return this.datasets.map((e=>{const t=n.map((t=>null==t?0:e.getValue(t))),s=t.reduce(((e,t)=>e+t),0);return{key:e.key,color:e.color,label:e.label,values:t.map(((e,t)=>({x:t,y:e}))),filled:e.filled??!0,stack:e.stack??!0,hidePoints:!1,average:1==e.showAverage?s/Math.max(1,a):void 0}}))}formatDate(e){const t=(0,u.Z)(this.minDay,e);return this.$i18n.$d(t,"date")}};(0,r.gn)([(0,d.fI)({required:!0,type:Array})],c.prototype,"datasets",void 0),(0,r.gn)([(0,d.fI)({required:!1,type:Boolean})],c.prototype,"noLegend",void 0),(0,r.gn)([(0,d.fI)({required:!1,type:Boolean})],c.prototype,"noTooltipFooter",void 0),(0,r.gn)([(0,d.fI)({required:!0,type:[Number,Date]})],c.prototype,"firstDay",void 0),(0,r.gn)([(0,d.fI)({required:!0,type:Object})],c.prototype,"itemsPerDay",void 0),(0,r.gn)([(0,d.fI)({required:!1,type:Number,default:()=>30})],c.prototype,"minDays",void 0),c=(0,r.gn)([(0,d.wA)({})],c);const m=c,p=m;var g=s(1001),f=(0,g.Z)(p,n,a,!1,null,null,null);const y=f.exports},910:(e,t,s)=>{s.r(t),s.d(t,{default:()=>x});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"chart-container"},[s("stats-chart",{attrs:{datasets:e.datasets,firstDay:e.firstDay,itemsPerDay:e.reportsPerDay,"no-tooltip-footer":""}}),s("span",{staticClass:"multi-menu"},[s("floating-menu",{staticClass:"floating-settings",attrs:{left:""},scopedSlots:e._u([{key:"activator",fn:function(){return[s("button",{on:{click:function(t){e.showSettings=!e.showSettings}}},[s("span",{staticClass:"mdi mdi-cog"})])]},proxy:!0}]),model:{value:e.showSettings,callback:function(t){e.showSettings=t},expression:"showSettings"}},[s("conversion-rate-settings"),s("separate-expedition-and-normal-debris-field-settings"),s("hr",{staticClass:"two-column"}),s("resource-color-settings")],1),s("manually-add-debris-field-menu")],1)],1)},a=[],r=s(655),o=s(4028),i=s(7331),l=s(3421),u=s(5359),d=s(917),c=s(7196),m=s(6597),p=s(3978),g=s(4139),f=s(8288);let y=class extends o.w3{showSettings=!1;get colors(){return d.V.settings.colors.resources}get firstDay(){return u.J.firstDay}get reportsPerDay(){return u.J.dailyResults}get separateResults(){return d.V.settings.debrisFields.separateExpeditionDebrisFields}alternativeColors={metal:"#fbbc04",crystal:"#4b17da",deuterium:"#ff0000"};get datasets(){return this.separateResults?[...i.P.map((e=>({key:`${e}-normal`,label:`${this.$i18n.$t.extension.resources[e]} (${this.$i18n.$t.extension.debrisFields.position} 1-15)`,color:this.colors[e],filled:!0,getValue:t=>t.normal[e],showAverage:!0}))),...i.P.map((e=>({key:`${e}-pos16`,label:`${this.$i18n.$t.extension.resources[e]} (${this.$i18n.$t.extension.debrisFields.position} 16)`,color:this.alternativeColors[e],filled:!0,getValue:t=>t.expedition[e],showAverage:!0}))),{key:"total",label:`${this.$i18n.$t.extension.common.resourceUnits} (${"msu"==d.V.settings.conversionRates.mode?this.$i18n.$t.extension.common.msu:this.$i18n.$t.extension.common.dsu})`,color:this.colors.totalConverted,filled:!1,getValue:e=>(0,f.B)(e.total),stack:!1,showAverage:!0}]:[...i.P.map((e=>({key:e,label:this.$i18n.$t.extension.resources[e],color:this.colors[e],filled:!0,getValue:t=>t.total[e],showAverage:!0}))),{key:"total",label:`${this.$i18n.$t.extension.common.resourceUnits} (${"msu"==d.V.settings.conversionRates.mode?this.$i18n.$t.extension.common.msu:this.$i18n.$t.extension.common.dsu})`,color:this.colors.totalConverted,filled:!1,getValue:e=>(0,f.B)(e.total),stack:!1,showAverage:!0}]}};y=(0,r.gn)([(0,o.wA)({components:{StatsChart:l.Z,ResourceColorSettings:c.Z,ConversionRateSettings:m.Z,ManuallyAddDebrisFieldMenu:p.Z,SeparateExpeditionAndNormalDebrisFieldSettings:g.Z}})],y);const v=y,h=v;var b=s(1001),$=(0,b.Z)(h,n,a,!1,null,"3bcee46e",null);const x=$.exports},7349:(e,t,s)=>{s.d(t,{Z:()=>o});var n=s(3946),a=s(9013),r=s(3882);function o(e,t){(0,r.Z)(2,arguments);var s=(0,a.Z)(e),o=(0,n.Z)(t);return isNaN(o)?new Date(NaN):o?(s.setDate(s.getDate()+o),s):s}},9383:(e,t,s)=>{s.d(t,{Z:()=>d});var n=s(9013),a=s(4262),r=s(9119),o=s(3882),i=864e5;function l(e,t){(0,o.Z)(2,arguments);var s=(0,r.Z)(e),n=(0,r.Z)(t),l=s.getTime()-(0,a.Z)(s),u=n.getTime()-(0,a.Z)(n);return Math.round((l-u)/i)}function u(e,t){var s=e.getFullYear()-t.getFullYear()||e.getMonth()-t.getMonth()||e.getDate()-t.getDate()||e.getHours()-t.getHours()||e.getMinutes()-t.getMinutes()||e.getSeconds()-t.getSeconds()||e.getMilliseconds()-t.getMilliseconds();return s<0?-1:s>0?1:s}function d(e,t){(0,o.Z)(2,arguments);var s=(0,n.Z)(e),a=(0,n.Z)(t),r=u(s,a),i=Math.abs(l(s,a));s.setDate(s.getDate()-r*i);var d=Number(u(s,a)===-r),c=r*(i-d);return 0===c?0:c}},5347:(e,t,s)=>{s.d(t,{Z:()=>o});var n=s(3946),a=s(7349),r=s(3882);function o(e,t){(0,r.Z)(2,arguments);var s=(0,n.Z)(t);return(0,a.Z)(e,-s)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,