"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[2449],{8288:(e,t,s)=>{s.d(t,{B:()=>o});var n=s(7331),a=s(917);function o(e,t={}){const s={metal:0,crystal:0,deuterium:0,...e},o={metal:1,crystal:1,deuterium:1,...t};n.P.forEach((e=>s[e]*=o[e]));const{mode:r,msu:i,dsu:l}=a.V.settings.conversionRates;return"msu"==r?s.metal+s.crystal*i.crystal+s.deuterium*i.deuterium:s.deuterium+s.crystal/l.crystal+s.metal/l.metal}},9027:(e,t,s)=>{s.d(t,{Z:()=>g});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.combats.ignoreEspionageCombats.title)}})]),s("div",{staticClass:"fake-table-body"},[s("checkbox",{attrs:{value:e.ignoreEspionageCombats,label:e.$i18n.$t.extension.settings.combats.ignoreEspionageCombats.label},on:{input:function(t){return e.setIgnoreEspionageCombats(t)}}})],1)])},a=[],o=s(655),r=s(4028),i=s(917);let l=class extends r.w3{get ignoreEspionageCombats(){return i.V.settings.combatTracking.ignoreEspionageFights}setIgnoreEspionageCombats(e){i.V.updateSettings({...i.V.settings,combatTracking:{ignoreEspionageFights:e}})}};l=(0,o.gn)([(0,r.wA)({})],l);const u=l,m=u;var c=s(1001),d=(0,c.Z)(m,n,a,!1,null,"3b222f56",null);const g=d.exports},6597:(e,t,s)=>{s.d(t,{Z:()=>g});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"conversion-rate-settings fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.title)}})]),s("div",{staticClass:"fake-table-body"},[s("select",{domProps:{value:e.conversionMode},on:{input:function(t){return e.setConversionMode(t.target.value)}}},[s("option",{attrs:{value:"msu"},domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.msuLong+" ("+e.$i18n.$t.extension.common.msu+")")}}),s("option",{attrs:{value:"dsu"},domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.dsuLong+" ("+e.$i18n.$t.extension.common.dsu+")")}})]),"msu"==e.conversionMode?s("span",{staticClass:"inputs"},[s("span",[s("o-resource",{attrs:{resource:"crystal"}}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.msu.crystal,expression:"msu.crystal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"1",max:"3",step:"0.01"},domProps:{value:e.msu.crystal},on:{change:[function(t){e.$set(e.msu,"crystal",e._n(t.target.value))},function(t){return e.updateMsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("o-resource",{attrs:{resource:"metal"}})],1),s("span",[s("o-resource",{attrs:{resource:"deuterium"}}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.msu.deuterium,expression:"msu.deuterium",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"2",max:"5",step:"0.01"},domProps:{value:e.msu.deuterium},on:{change:[function(t){e.$set(e.msu,"deuterium",e._n(t.target.value))},function(t){return e.updateMsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("o-resource",{attrs:{resource:"metal"}})],1)]):s("span",{staticClass:"inputs"},[s("span",[s("o-resource",{attrs:{resource:"metal"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.dsu.metal,expression:"dsu.metal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"2",max:"5",step:"0.01"},domProps:{value:e.dsu.metal},on:{change:[function(t){e.$set(e.dsu,"metal",e._n(t.target.value))},function(t){return e.updateDsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("o-resource",{attrs:{resource:"deuterium"}})],1),s("span",[s("o-resource",{attrs:{resource:"crystal"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.dsu.crystal,expression:"dsu.crystal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"1",max:"3",step:"0.01"},domProps:{value:e.dsu.crystal},on:{change:[function(t){e.$set(e.dsu,"crystal",e._n(t.target.value))},function(t){return e.updateDsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("o-resource",{attrs:{resource:"deuterium"}})],1)])])])},a=[],o=s(655),r=s(4028),i=s(917);let l=class extends r.w3{msu={crystal:2,deuterium:3};dsu={metal:3,crystal:2};get msuRates(){return i.V.settings.conversionRates.msu}get dsuRates(){return i.V.settings.conversionRates.dsu}get conversionMode(){return i.V.settings.conversionRates.mode}setConversionMode(e){i.V.updateSettings({...i.V.settings,conversionRates:{...i.V.settings.conversionRates,mode:e}})}onMsuRatesChanged(){const{crystal:e,deuterium:t}=this.msuRates;this.msu.crystal=e,this.msu.deuterium=t}updateMsuConversionRates(){i.V.updateSettings({...i.V.settings,conversionRates:{...i.V.settings.conversionRates,msu:this.msu}})}onDsuRatesChanged(){const{crystal:e,metal:t}=this.dsuRates;this.dsu.crystal=e,this.dsu.metal=t}updateDsuConversionRates(){i.V.updateSettings({...i.V.settings,conversionRates:{...i.V.settings.conversionRates,dsu:this.dsu}})}};(0,o.gn)([(0,r.RL)("msuRates",{immediate:!0})],l.prototype,"onMsuRatesChanged",null),(0,o.gn)([(0,r.RL)("dsuRates",{immediate:!0})],l.prototype,"onDsuRatesChanged",null),l=(0,o.gn)([(0,r.wA)({})],l);const u=l,m=u;var c=s(1001),d=(0,c.Z)(m,n,a,!1,null,"13cde7dd",null);const g=d.exports},3787:(e,t,s)=>{s.d(t,{Z:()=>g});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.showConvertedUnitsInTables.title)}})]),s("div",{staticClass:"fake-table-body"},[s("checkbox",{attrs:{value:e.showCellsWithConvertedResourceUnits,label:e.$i18n.$t.extension.settings.showConvertedUnitsInTables.label},on:{input:function(t){return e.toggle(t)}}}),e._t("default")],2)])},a=[],o=s(655),r=s(4028),i=s(917);let l=class extends r.w3{get showCellsWithConvertedResourceUnits(){return i.V.settings.showCellsWithConvertedResourceUnits}toggle(e){i.V.updateSettings({...i.V.settings,showCellsWithConvertedResourceUnits:e})}};l=(0,o.gn)([(0,r.wA)({})],l);const u=l,m=u;var c=s(1001),d=(0,c.Z)(m,n,a,!1,null,"90457dc2",null);const g=d.exports},4310:(e,t,s)=>{s.d(t,{Z:()=>h});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("grid-table",{staticClass:"ranged-stats-table",attrs:{columns:e.columns,items:e.rows,"footer-items":e.footerRows,"cell-class-provider":function(t){return e.getCellClass(t)}},scopedSlots:e._u([e._l(e.columns,(function(t,n){return{key:"cell-"+t.key,fn:function(a){var o=a.value,r=a.item;return[s("span",{key:t.key,staticClass:"ranged-stats-table-cell"},["label"==t.key?[null!=t.slotName&&null!=e.$scopedSlots[t.slotName]?e._t(t.slotName,null,{value:o}):s("span",{key:n,domProps:{textContent:e._s(o)}})]:"subLabel"==t.key?e._l(r.items,(function(n,a){return s("span",{key:a,class:n.labelClass},[null!=t.slotName&&null!=e.$scopedSlots[t.slotName]?e._t(t.slotName,null,{value:n.label}):s("span",{domProps:{textContent:e._s(n.label)}})],2)})):e._l(r.items||[r],(function(n,a){return s("span",{key:a,class:[e.getCellClass(n[t.key]),n.class]},[null!=t.formatter?s("span",{domProps:{textContent:e._s(t.formatter(n[t.key]))}}):s("span",{domProps:{textContent:e._s(n[t.key])}})])}))],2)]}}})),e._l(e.$scopedSlots,(function(t,s){return{key:s,fn:function(t){return[e._t(s,null,null,t)]}}}))],null,!0)})},a=[],o=s(655),r=s(4028),i=s(9858),l=s(6538),u=s(4749),m=s.n(u),c=s(917);let d=class extends r.w3{showPercentage;showAverage;items;footerItems;numberFormatOptions;averageNumberFormatOptions;dataItems;get hasGroupedItems(){return this.items.some((e=>"items"in e))}get dateRanges(){return c.V.settings.dateRanges}get dataItemsByRange(){const e=this.dataItems,t=this.dateRanges.map((()=>[]));return e.forEach((e=>{this.dateRanges.forEach(((s,n)=>{(0,i.m)(e.date,s)&&t[n].push(e)}))})),t}get firstDay(){return this.dataItemsByRange.reduce(((e,t)=>Math.min(e,Math.min(...t.map((e=>e.date))))),Date.now())}get columns(){const e=[{key:"label",label:"",slotName:"label"}];return this.hasGroupedItems&&e.push({key:"subLabel",label:"",slotName:"subLabel"}),e.push(...this.dateRanges.map(((e,t)=>({key:t,label:e.label??this.$i18n.$t.extension.settings.dateRanges.since(this.$i18n.$d(this.firstDay,"date")),formatter:e=>this.$i18n.$n(e,this.numberFormatOptions)})))),this.showAverage&&e.push({key:"average",label:this.$i18n.$t.extension.common.averagePerDay,formatter:e=>this.$i18n.$n(e,this.averageNumberFormatOptions??this.numberFormatOptions)}),this.showPercentage&&e.push({key:"percentage",label:"%",formatter:e=>""!=e?this.$i18n.$n(e,{minimumFractionDigits:3,maximumFractionDigits:3}):e}),e}get rows(){const e=this.dataItemsByRange,t=this.dateRanges.findIndex((e=>"all"==e.type))??(0,l.A)("failed to find range 'all'"),s=e[t].map((e=>m()(e.date).getTime())),n=new Set(s).size,a=Math.max(1,this.items.map((s=>"getValue"in s?s.getValue(e[t]):s.items.reduce(((s,n)=>s+n.getValue(e[t])),0))).reduce(((e,t)=>e+t),0));return this.items.map((s=>this.mapItemToRow(s,e,t,n,a)))}mapItemToRow(e,t,s,n,a){if("getValue"in e){const o={label:e.label,class:e.class,labelClass:e.labelClass,...this.dateRanges.map(((s,n)=>e.getValue(t[n])))},r=o[s];return this.showAverage&&(o.average=r/Math.max(1,n)),this.showPercentage&&(o.percentage=100*r/a),o}return{label:e.label,items:e.items.map((e=>this.mapItemToRow(e,t,s,n,a)))}}get footerRows(){const e=this.dataItemsByRange,t=this.dateRanges.findIndex((e=>"all"==e.type))??(0,l.A)("failed to find range 'all'"),s=e[t].map((e=>m()(e.date).getTime())),n=new Set(s).size;return this.footerItems.map((s=>{const a={label:s.label,...this.dateRanges.map(((t,n)=>"getValue"in s?s.getValue(e[n]):s.items.reduce(((t,s)=>t+s.getValue(e[n])),0))),percentage:""};if(this.showAverage){const e=a[t];a.average=e/Math.max(1,n)}return a}))}getCellClass(e){return 0==e?"fade-value":""}};(0,o.gn)([(0,r.fI)({required:!1,type:Boolean})],d.prototype,"showPercentage",void 0),(0,o.gn)([(0,r.fI)({required:!1,type:Boolean})],d.prototype,"showAverage",void 0),(0,o.gn)([(0,r.fI)({required:!0,type:Array})],d.prototype,"items",void 0),(0,o.gn)([(0,r.fI)({required:!1,type:Array,default:()=>[]})],d.prototype,"footerItems",void 0),(0,o.gn)([(0,r.fI)({required:!1,type:Object,default:void 0})],d.prototype,"numberFormatOptions",void 0),(0,o.gn)([(0,r.fI)({required:!1,type:Object,default:void 0})],d.prototype,"averageNumberFormatOptions",void 0),(0,o.gn)([(0,r.fI)({required:!0,type:Array})],d.prototype,"dataItems",void 0),d=(0,o.gn)([(0,r.wA)({})],d);const g=d,p=g;var v=s(1001),f=(0,v.Z)(p,n,a,!1,null,"1526beca",null);const h=f.exports},7782:(e,t,s)=>{s.r(t),s.d(t,{default:()=>$});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"table-container"},[s("ranged-stats-table",{attrs:{dataItems:e.combats,items:e.items,footerItems:e.footerItems,"show-average":"",averageNumberFormatOptions:e.avgNumberFormat},scopedSlots:e._u([{key:"cell-label",fn:function(t){var n=t.value;return[s("span",{staticClass:"mr-2",domProps:{textContent:e._s(n)}}),s("o-resource",{attrs:{resource:e.resourceTypes[n],size:"24px"}})]}}])}),s("floating-menu",{staticClass:"floating-settings",attrs:{left:""},scopedSlots:e._u([{key:"activator",fn:function(){return[s("button",{on:{click:function(t){e.showSettings=!e.showSettings}}},[s("span",{staticClass:"mdi mdi-cog"})])]},proxy:!0}]),model:{value:e.showSettings,callback:function(t){e.showSettings=t},expression:"showSettings"}},[s("conversion-rate-settings"),s("combat-tracking-ignore-espionage-combats-settings"),s("hr",{staticClass:"two-column"}),s("show-converted-resources-in-cells-settings"),s("hr",{staticClass:"two-column"}),s("date-range-settings",{staticClass:"two-column"})],1)],1)},a=[],o=s(655),r=s(4028),i=s(4310),l=s(7331),u=s(4992),m=s(917),c=s(4329),d=s(6597),g=s(9027),p=s(3787),v=s(8288);let f=class extends r.w3{showSettings=!1;avgNumberFormat={minimumFractionDigits:1,maximumFractionDigits:1};get combats(){return u.t.dailyResultsArray}get resourceTypes(){return{[this.$i18n.$t.extension.resources.metal]:l._.metal,[this.$i18n.$t.extension.resources.crystal]:l._.crystal,[this.$i18n.$t.extension.resources.deuterium]:l._.deuterium}}get items(){return l.P.map((e=>({label:this.$i18n.$t.extension.resources[e],getValue:t=>t.reduce(((t,s)=>t+s.loot.total[e]),0)})))}get footerItems(){const e=[{label:this.$i18n.$t.extension.common.resourceUnits,getValue:e=>e.reduce(((e,t)=>e+t.loot.total.metal+t.loot.total.crystal+t.loot.total.deuterium),0)}];return m.V.settings.showCellsWithConvertedResourceUnits&&e.push({label:`${this.$i18n.$t.extension.common.resourceUnits} (${"msu"==m.V.settings.conversionRates.mode?this.$i18n.$t.extension.common.msu:this.$i18n.$t.extension.common.dsu})`,getValue:e=>e.reduce(((e,t)=>e+(0,v.B)(t.loot.total)),0)}),e}};f=(0,o.gn)([(0,r.wA)({components:{RangedStatsTable:i.Z,DateRangeSettings:c.Z,ConversionRateSettings:d.Z,CombatTrackingIgnoreEspionageCombatsSettings:g.Z,ShowConvertedResourcesInCellsSettings:p.Z}})],f);const h=f,b=h;var y=s(1001),C=(0,y.Z)(b,n,a,!1,null,"471f4186",null);const $=C.exports},8734:(e,t)=>{function s(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=s,e.exports=t.default},4749:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var n=o(s(1171)),a=o(s(8734));function o(e){return e&&e.__esModule?e:{default:e}}function r(e){(0,a.default)(1,arguments);var t=(0,n.default)(e);return t.setHours(0,0,0,0),t}e.exports=t.default},1171:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=o;var n=a(s(8734));function a(e){return e&&e.__esModule?e:{default:e}}function o(e){(0,n.default)(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"===typeof e||"[object Number]"===t?new Date(e):("string"!==typeof e&&"[object String]"!==t||"undefined"===typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}e.exports=t.default}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,