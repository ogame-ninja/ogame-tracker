"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[4985],{147:(o,e,t)=>{t.d(e,{g1:()=>s,g4:()=>n,_Z:()=>i});const r=.001;function s(o){const e=n(o);return e*r}function n(o){for(let e=0;;e++){const t=i(e+1);if(t>o)return e}}function i(o){return 900*o*(o+1)/2}},5546:(o,e,t)=>{function r(o,e){return 1+o+e}t.d(e,{q:()=>r})},2343:(o,e,t)=>{function r(o){return o.admiral&&o.commander&&o.engineer&&o.geologist&&o.technocrat}t.d(e,{J:()=>r})},4163:(o,e,t)=>{t.d(e,{F:()=>s});var r=t(602);function s(o,e,t,s){return o!=r.D0.collector?1:1*(1+s)+e*(1+t)}},9448:(o,e,t)=>{function r(o,e){switch(o){case 1:return e.pos1;case 2:return e.pos2;case 3:return e.pos3}return e.default}function s(o){const e=r(o.planetPosition,o.serverPositionBoost),t=15*o.serverEconomySpeed*(1+e);return Math.trunc(t)}t.d(e,{q:()=>s})},9452:(o,e,t)=>{t.d(e,{p:()=>n,E:()=>i});var r=t(1639),s=t(7331);function n(o,e){const t=Date.now(),n={[s._.metal]:[r.t.metalBooster_bronze_1day,r.t.metalBooster_bronze_7days],[s._.crystal]:[r.t.crystalBooster_bronze_1day,r.t.crystalBooster_bronze_7days],[s._.deuterium]:[r.t.deuteriumBooster_bronze_1day,r.t.deuteriumBooster_bronze_7days]}[o],l={[s._.metal]:[r.t.metalBooster_silver_7days,r.t.metalBooster_silver_30days,r.t.metalBooster_silver_90days],[s._.crystal]:[r.t.crystalBooster_silver_7days,r.t.crystalBooster_silver_30days,r.t.crystalBooster_silver_90days],[s._.deuterium]:[r.t.deuteriumBooster_silver_7days,r.t.deuteriumBooster_silver_30days,r.t.deuteriumBooster_silver_90days]}[o],a={[s._.metal]:[r.t.metalBooster_gold_7days,r.t.metalBooster_gold_30days,r.t.metalBooster_gold_90days],[s._.crystal]:[r.t.crystalBooster_gold_7days,r.t.crystalBooster_gold_30days,r.t.crystalBooster_gold_90days],[s._.deuterium]:[r.t.deuteriumBooster_gold_7days,r.t.deuteriumBooster_gold_30days,r.t.deuteriumBooster_gold_90days]}[o],c={[s._.metal]:[r.t.metalBooster_platinum_7days,r.t.metalBooster_platinum_30days,r.t.metalBooster_platinum_90days],[s._.crystal]:[r.t.crystalBooster_platinum_7days,r.t.crystalBooster_platinum_30days,r.t.crystalBooster_platinum_90days],[s._.deuterium]:[r.t.deuteriumBooster_platinum_7days,r.t.deuteriumBooster_platinum_30days,r.t.deuteriumBooster_platinum_90days]}[o];return n.some((o=>i(t,e[o])))?.1:l.some((o=>i(t,e[o])))?.2:a.some((o=>i(t,e[o])))?.3:c.some((o=>i(t,e[o])))?.4:0}function i(o,e){return null!=e&&("permanent"==e||e>o)}},7270:(o,e,t)=>{function r(o,e,t,r,s,n,i){const l=s&&r?1+n*(1+i):1,a=8,c=Math.floor((o+e+t)*a*l);return c}t.d(e,{Y:()=>r})},5148:(o,e,t)=>{function r(o){switch(o){case 8:return.35;case 7:case 9:return.23;case 6:case 10:return.17}return 0}function s(o){const e=r(o.planetPosition),t=30*o.serverEconomySpeed*(1+e);return Math.trunc(t)}t.d(e,{s:()=>s})},7053:(o,e,t)=>{t.d(e,{_:()=>h});var r=t(7545),s=t(9867),n=t(602),i=t(5546),l=t(7331);const a=.1,c=.02,u={[l._.metal]:.01,[l._.crystal]:.0066,[l._.deuterium]:.0033},d=.05;var m=t(4163),f=t(7270);function g(o){const e=(0,f.Y)(o.levelMetalMine,o.levelCrystalMine,o.levelDeuteriumSynthesizer,o.playerClass==n.D0.collector,o.hasGeologist,o.serverSettings.geologistActiveCrawlerFactorBonus,o.lifeformTechnologies.collectorClassBonus),t=Math.min(e,o.availableCrawlers),r=(0,m.F)(o.playerClass,o.serverSettings.collectorCrawlerProductionFactorBonus,o.lifeformTechnologies.collectorClassBonus,o.lifeformTechnologies.crawlerProductionBonus),s=o.serverSettings.crawlerProductionFactorPerUnit*t*r*o.crawlerProductionSetting/100;return Math.min(s,o.serverSettings.crawlerMaxProductionFactor)}var y=t(9681),p=t(4846);class h{#o;#e;plasmaTechnologyLevel;playerClass;allianceClass;geologist;commandStaff;planets;serverSettings;constructor(o,e,t,s,n,i,l,a){this.#e=o,this.plasmaTechnologyLevel=e,this.playerClass=t,this.allianceClass=s,this.geologist=n,this.commandStaff=i,this.serverSettings=l,this.planets=a,this.#o=Object.keys(a).map((o=>(0,r.Y)(o)))}getLifeformBonusFactors(){let o=0,e=0,t=0;return this.#o.forEach((r=>{const s=this.planets[r];o+=s.collectorClassBonusFactor*(0,i.q)(s.lifeformTechnologyBoost[y.Nw.rocktalCollectorEnhancement],s.lifeformExperienceBoost),p.rE.forEach((o=>{e+=s.lifeformTechnologyBonusProductionFactor[o.type]*(0,i.q)(s.lifeformTechnologyBoost[o.type],s.lifeformExperienceBoost)})),t+=s.lifeformTechnologyCrawlerProductionBonusFactor*(0,i.q)(s.lifeformTechnologyBoost[y.Nw.ionCrystalModules],s.lifeformExperienceBoost)})),{collectorClassBonusFactor:o,lifeformTechnologyProductionBonusFactor:e,lifeformTechnologyCrawlerProductionBonusFactor:t}}addPlanet(o,e){this.#o.push(o),this.planets[o]=e}getProductionBreakdown(o){return this.#t(o,this.getLifeformBonusFactors())}#t(o,e){const{collectorClassBonusFactor:t,lifeformTechnologyProductionBonusFactor:r,lifeformTechnologyCrawlerProductionBonusFactor:i}=e,l=this.planets[o].mineProduction,m=(this.playerClass==n.D0.collector?1:0)*this.serverSettings.collectorProductionFactor*(1+t),f=(this.allianceClass==s.Ck.trader?1:0)*d,y=this.geologist?a:0,p=this.commandStaff?c:0,h=this.planets[o].crawlers,B=g({hasGeologist:this.geologist,availableCrawlers:h.available,levelMetalMine:h.totalMineLevel,levelCrystalMine:0,levelDeuteriumSynthesizer:0,crawlerProductionSetting:h.percentage,lifeformTechnologies:{collectorClassBonus:t,crawlerProductionBonus:i},playerClass:this.playerClass,serverSettings:{collectorCrawlerProductionFactorBonus:this.serverSettings.collectorCrawlerProductionFactorBonus,crawlerMaxProductionFactor:this.serverSettings.crawlerMaxProductionFactor,crawlerProductionFactorPerUnit:this.serverSettings.crawlerProductionFactorPerUnit,geologistActiveCrawlerFactorBonus:this.serverSettings.geologistActiveCrawlerFactorBonus}}),P=this.planets[o].baseProduction,_=l*this.plasmaTechnologyLevel*u[this.#e],v=l*B,F=l*m,C=l*f,w=l*y,T=l*p,S=l*this.planets[o].itemBonusProductionFactor,b=l*this.planets[o].lifeformBuildingBonusProductionFactor,M=l*r,E=P+l+_+v+F+C+w+T+S+b+M;return{baseProduction:P,mineProduction:l,plasmaTechnologyProduction:_,crawlerProduction:v,playerClassProduction:F,allianceClassProduction:C,geologistProduction:w,commandStaffProduction:T,itemProduction:S,lifeformBuildingsProduction:b,lifeformTechnologiesProduction:M,total:E}}getTotal(o=!1){const e=this.getLifeformBonusFactors();return this.#o.reduce(((t,r)=>{const s=o?this.planets[r].fusionReactorConsumption:0;return t+this.#t(r,e).total-s}),0)}getAverage(o=!1){return this.getTotal(o)/this.#o.length}clone(){const o={};return this.#o.forEach((e=>{o[e]={...this.planets[e],lifeformTechnologyBonusProductionFactor:{...this.planets[e].lifeformTechnologyBonusProductionFactor},lifeformTechnologyBoost:{...this.planets[e].lifeformTechnologyBoost},crawlers:{...this.planets[e].crawlers}}})),new h(this.#e,this.plasmaTechnologyLevel,this.playerClass,this.allianceClass,this.geologist,this.commandStaff,this.serverSettings,o)}}},4985:(o,e,t)=>{t.d(e,{c:()=>C});var r=t(6864),s=t(6682),n=t(3987),i=t(7069),l=t(6532),a=t(147),c=t(3418),u=t(4846),d=t(2343),m=t(3738),f=t(9448),g=t(9452),y=t(5148),p=t(7053),h=t(7331),B=t(2057),P=t(9751),_=t(7076),v=t(1786);function F(o){return u.s5.filter((e=>o.activeLifeformTechnologies.includes(e.type))).reduce(((e,t)=>e+t.getCrawlerProductionBonus(o.lifeformTechnologies[t.type])),0)}function C(o,e){const t=Object.values(o.planets).filter((o=>!o.isMoon)),u=o.research[m.s.plasmaTechnology],C=_.s.serverSettings,w={collectorProductionFactor:C.playerClasses.collector.productionFactorBonus,geologistActiveCrawlerFactorBonus:C.playerClasses.collector.crawlers.geologistActiveCrawlerFactorBonus,collectorCrawlerProductionFactorBonus:C.playerClasses.collector.crawlers.productionFactorBonus,crawlerProductionFactorPerUnit:C.playerClasses.crawlers.productionBoostFactorPerUnit,crawlerMaxProductionFactor:C.playerClasses.crawlers.maxProductionFactor},T={metal:{},crystal:{},deuterium:{}},S=(0,P.a)(c.gN,(o=>o==c.e5.none?0:(0,a.g1)(e[o])));t.forEach((o=>{const e=o.buildings[r.A.metalMine],t=o.buildings[r.A.crystalMine],a=o.buildings[r.A.deuteriumSynthesizer],c=e+t+a,u=o.buildings[r.A.fusionReactor],d={available:o.ships[B.g.crawler],percentage:o.productionSettings[B.g.crawler],totalMineLevel:c},m={crawlers:d,lifeformExperienceBoost:S[o.activeLifeform],collectorClassBonusFactor:(0,v.I5)(o),lifeformBuildingBonusProductionFactor:(0,v.qH)(o),lifeformTechnologyBonusProductionFactor:(0,v.g5)(o),lifeformTechnologyCrawlerProductionBonusFactor:F(o),lifeformTechnologyBoost:(0,v.io)(o)},p={planet:{position:o.coordinates.position,temperature:o.maxTemperature},serverSettings:{economySpeed:C.speed.economy,crystalBoost:{default:C.resourceProduction.productionFactorBonus.crystal.default,pos1:C.resourceProduction.productionFactorBonus.crystal.pos1,pos2:C.resourceProduction.productionFactorBonus.crystal.pos2,pos3:C.resourceProduction.productionFactorBonus.crystal.pos3}},productionSettings:{metalMine:o.productionSettings[r.A.metalMine],crystalMine:o.productionSettings[r.A.crystalMine],deuteriumSynthesizer:o.productionSettings[r.A.deuteriumSynthesizer],fusionReactor:o.productionSettings[r.A.fusionReactor]}};T.metal[o.id]={baseProduction:(0,y.s)({planetPosition:o.coordinates.position,serverEconomySpeed:C.speed.economy}),mineProduction:l.H.getProduction(e,p),itemBonusProductionFactor:(0,g.p)(h._.metal,o.activeItems),...m,lifeformBuildingBonusProductionFactor:m.lifeformBuildingBonusProductionFactor.metal,lifeformTechnologyBonusProductionFactor:m.lifeformTechnologyBonusProductionFactor.metal,fusionReactorConsumption:0},T.crystal[o.id]={baseProduction:(0,f.q)({planetPosition:o.coordinates.position,serverEconomySpeed:C.speed.economy,serverPositionBoost:C.resourceProduction.productionFactorBonus.crystal}),mineProduction:s.g.getProduction(t,p),itemBonusProductionFactor:(0,g.p)(h._.crystal,o.activeItems),...m,lifeformBuildingBonusProductionFactor:m.lifeformBuildingBonusProductionFactor.crystal,lifeformTechnologyBonusProductionFactor:m.lifeformTechnologyBonusProductionFactor.crystal,fusionReactorConsumption:0},T.deuterium[o.id]={baseProduction:0,mineProduction:n.w.getProduction(a,p),itemBonusProductionFactor:(0,g.p)(h._.deuterium,o.activeItems),...m,lifeformBuildingBonusProductionFactor:m.lifeformBuildingBonusProductionFactor.deuterium,lifeformTechnologyBonusProductionFactor:m.lifeformTechnologyBonusProductionFactor.deuterium,fusionReactorConsumption:i.s.getConsumption(u,p).deuterium}}));const b={metal:new p._(h._.metal,u,o.playerClass,o.allianceClass,o.officers.geologist,(0,d.J)(o.officers),w,T.metal),crystal:new p._(h._.crystal,u,o.playerClass,o.allianceClass,o.officers.geologist,(0,d.J)(o.officers),w,T.crystal),deuterium:new p._(h._.deuterium,u,o.playerClass,o.allianceClass,o.officers.geologist,(0,d.J)(o.officers),w,T.deuterium),getTotal(o=!1){return{metal:this.metal.getTotal(o),crystal:this.crystal.getTotal(o),deuterium:this.deuterium.getTotal(o),energy:0}}};return b}},1786:(o,e,t)=>{t.d(e,{I5:()=>c,io:()=>u,qH:()=>d,g5:()=>m});var r=t(602),s=t(5128),n=t(6119),i=t(9681),l=t(4846),a=t(9751);function c(o){return l._i.filter((e=>o.activeLifeformTechnologies.includes(e.type))).reduce(((e,t)=>e+t.getClassBonus(r.D0.collector,o.lifeformTechnologies[t.type])),0)}function u(o){return(0,a.a)(i.Vs,(e=>n.cQ[o.activeLifeform].map((t=>t.getLifeformTechnologyBonus(e,o.lifeformBuildings[t.type]))).reduce(((o,e)=>o+e),0)))}function d(o){return n.wJ[o.activeLifeform].reduce(((e,t)=>(0,s.aV)(e,t.getProductionBonus(o.lifeformBuildings[t.type]))),{metal:0,crystal:0,deuterium:0,energy:0})}function m(o){return l.rE.filter((e=>o.activeLifeformTechnologies.includes(e.type))).reduce(((e,t)=>{const r=t.getProductionBonus(o.lifeformTechnologies[t.type]);return e.metal[t.type]+=r.metal,e.crystal[t.type]+=r.crystal,e.deuterium[t.type]+=r.deuterium,e.energy[t.type]+=r.energy,e}),{metal:(0,a.a)(i.Vs,0),crystal:(0,a.a)(i.Vs,0),deuterium:(0,a.a)(i.Vs,0),energy:(0,a.a)(i.Vs,0)})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,