"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[8362],{6876:(e,n,s)=>{s.r(n),s.d(n,{default:()=>T});var t=function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("lifeform-planet-bonuses-component",{attrs:{technologyBonuses:{},"no-technology-bonuses":"",types:e.bonusTypes,buildings:e.buildings,forceIncludeBuildings:[e.BuildingType.spaceDock],planets:e.planets,limits:e.limits,"research-bonus-breakdown-route-name":"lifeforms/bonus-breakdown/resource-production"}})},i=[],r=s(655),o=s(4028),l=s(2593),a=s(7848),c=s(7377),u=s(2816),p=s(6119),d=s(9751),f=s(8395),m=s(6864),g=s(4431),b=s(7076);let k=class extends o.w3{get bonusTypes(){return[{key:"wreckfield",label:this.$i18n.$t.extension.empire.lifeforms.planetBonuses.wreckfield.header}]}BuildingType=m.A;buildings=[g.j.type,...p.Ao.map((e=>e.type))];get limits(){const e=(0,a.K)({type:c.f.SpaceDockBonus});return{wreckfield:n=>null!=e?Math.min(n,e):n}}get empirePlanets(){return f.p.empire.planetOrder.map((e=>f.p.empire.planets[e])).filter((e=>!e.isMoon))}get planets(){return(0,d.r)(this.empirePlanets,(e=>e.id),(e=>{const n=u.IU[e.activeLifeform].filter((e=>this.buildings.includes(e))).concat(g.j.type),s=(0,d.a)(["wreckfield"],(()=>(0,d.a)(n,(n=>{const s=b.s.serverSettings.combats.debrisFieldFactors.ships,t=g.j.getWreckfield(e.buildings[m.A.spaceDock],s);if(n==m.A.spaceDock)return t;const i=n,r=p.ry[i].getSpaceDockBonus(e.lifeformBuildings[i]);return r*t}))));return{planet:e,bonusByBuilding:s}}))}};k=(0,r.gn)([(0,o.wA)({components:{LifeformPlanetBonusesComponent:l.Z}})],k);const h=k,y=h;var B=s(1001),w=(0,B.Z)(y,t,i,!1,null,null,null);const T=w.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,