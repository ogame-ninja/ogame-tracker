"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[1818],{6798:(e,s,t)=>{t.r(s),t.d(s,{default:()=>B});var i=function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("div",[t("select",{directives:[{name:"model",rawName:"v-model.number",value:e.ship,expression:"ship",modifiers:{number:!0}}],staticStyle:{display:"block","margin-bottom":"4px"},on:{change:function(s){var t=Array.prototype.filter.call(s.target.options,(function(e){return e.selected})).map((function(s){var t="_value"in s?s._value:s.value;return e._n(t)}));e.ship=s.target.multiple?t:t[0]}}},e._l(e.Ships,(function(s){return t("option",{key:s,domProps:{value:s,textContent:e._s(e.$i18n.$t.ogame.ships[s])}})})),0),t("lifeform-bonuses-breakdown",{attrs:{types:e.bonusTypes,technologies:e.techs,planets:e.planets,limits:e.limits},scopedSlots:e._u([{key:"header",fn:function(){return[t("div",{staticStyle:{display:"flex","flex-direction":"column","align-items":"start"}},[t("span",[t("o-ship",{staticClass:"mr-2",attrs:{ship:e.ship}}),t("span",{domProps:{textContent:e._s(e.$i18n.$t.ogame.ships[e.ship])}})],1)])]},proxy:!0}])})],1)},n=[],o=t(655),a=t(147),r=t(3418),l=t(4846),p=t(9751),h=t(8395),m=t(1786),c=t(4028),u=t(3894),d=t(2057),g=t(248),f=t(7848),b=t(7377);let y=class extends c.w3{bonusTypes=[{key:"armor",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.ships.armor},{key:"shield",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.ships.shield},{key:"damage",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.ships.damage},{key:"cargo",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.ships.cargo},{key:"speed",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.ships.speed}];technologies=l.$z;get techs(){return this.technologies.filter((e=>e.appliesTo(this.ship))).map((e=>e.type))}get limits(){const e=(0,f.K)({type:b.f.StatsBonus,tech:this.ship});return{armor:s=>null!=e?Math.min(s,e):s,shield:s=>null!=e?Math.min(s,e):s,damage:s=>null!=e?Math.min(s,e):s,cargo:s=>null!=e?Math.min(s,e):s,speed:s=>null!=e?Math.min(s,e):s}}ship=d.g.largeCargo;Ships=g.GI;get planets(){return(0,p.r)(h.p.empire.planetOrder.map((e=>h.p.empire.planets[e])).filter((e=>!e.isMoon)),(e=>e.id),(e=>this.technologies.map((s=>{const t=this.getPlanetBonus(s,e);return{planet:e,technologyType:s.type,bonuses:(0,p.a)(["armor","shield","damage","cargo","speed"],(e=>({base:t.base[e],buildings:t.buildings[e],level:t.level[e],total:t.total[e]})))}}))))}get experience(){return h.p.lifeformExperience}getPlanetBonus(e,s){const t={base:{armor:0,shield:0,damage:0,cargo:0,speed:0},level:{armor:0,shield:0,damage:0,cargo:0,speed:0},buildings:{armor:0,shield:0,damage:0,cargo:0,speed:0},buildingsBoost:0,total:{armor:0,shield:0,damage:0,cargo:0,speed:0}};if(s.activeLifeform==r.e5.none||!s.activeLifeformTechnologies.includes(e.type)||!e.appliesTo(this.ship))return t;const i=Math.min((0,m.io)(s),(0,f.K)({type:b.f.LifeformResearchBonusBoost})??Number.MAX_SAFE_INTEGER);t.buildingsBoost+=i;const n=e.getStatsBonus(this.ship,s.lifeformTechnologies[e.type]),o={armor:"armor",shield:"shield",damage:"damage",cargo:"cargo",speed:"speed"};return Object.entries(o).forEach((e=>{const[o,r]=e,l=n[r],p=l*(0,a.g1)(this.experience[s.activeLifeform]),h=l*i,m=l+p+h;t.base[o]+=l,t.level[o]+=p,t.buildings[o]+=h,t.total[o]+=m})),t}};y=(0,o.gn)([(0,c.wA)({components:{LifeformBonusesBreakdown:u.Z}})],y);const v=y,x=v;var k=t(1001),$=(0,k.Z)(x,i,n,!1,null,null,null);const B=$.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,