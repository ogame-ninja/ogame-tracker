"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[6589],{4310:(e,t,a)=>{a.d(t,{Z:()=>b});var s=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("grid-table",{staticClass:"ranged-stats-table",attrs:{columns:e.columns,items:e.rows,"footer-items":e.footerRows,"cell-class-provider":function(t){return e.getCellClass(t)}},scopedSlots:e._u([e._l(e.columns,(function(t,s){return{key:"cell-"+t.key,fn:function(n){var r=n.value,o=n.item;return[a("span",{key:t.key,staticClass:"ranged-stats-table-cell"},["label"==t.key?[null!=t.slotName&&null!=e.$scopedSlots[t.slotName]?e._t(t.slotName,null,{value:r}):a("span",{key:s,domProps:{textContent:e._s(r)}})]:"subLabel"==t.key?e._l(o.items,(function(s,n){return a("span",{key:n,class:s.labelClass},[null!=t.slotName&&null!=e.$scopedSlots[t.slotName]?e._t(t.slotName,null,{value:s.label}):a("span",{domProps:{textContent:e._s(s.label)}})],2)})):e._l(o.items||[o],(function(s,n){return a("span",{key:n,class:[e.getCellClass(s[t.key]),s.class]},[null!=t.formatter?a("span",{domProps:{textContent:e._s(t.formatter(s[t.key]))}}):a("span",{domProps:{textContent:e._s(s[t.key])}})])}))],2)]}}})),e._l(e.$scopedSlots,(function(t,a){return{key:a,fn:function(t){return[e._t(a,null,null,t)]}}}))],null,!0)})},n=[],r=a(655),o=a(4028),l=a(9858),i=a(6538),u=a(4749),m=a.n(u),c=a(917);let g=class extends o.w3{showPercentage;showAverage;items;footerItems;numberFormatOptions;averageNumberFormatOptions;dataItems;get hasGroupedItems(){return this.items.some((e=>"items"in e))}get dateRanges(){return c.V.settings.dateRanges}get dataItemsByRange(){const e=this.dataItems,t=this.dateRanges.map((()=>[]));return e.forEach((e=>{this.dateRanges.forEach(((a,s)=>{(0,l.m)(e.date,a)&&t[s].push(e)}))})),t}get firstDay(){return this.dataItemsByRange.reduce(((e,t)=>Math.min(e,Math.min(...t.map((e=>e.date))))),Date.now())}get columns(){const e=[{key:"label",label:"",slotName:"label"}];return this.hasGroupedItems&&e.push({key:"subLabel",label:"",slotName:"subLabel"}),e.push(...this.dateRanges.map(((e,t)=>({key:t,label:e.label??this.$i18n.$t.extension.settings.dateRanges.since(this.$i18n.$d(this.firstDay,"date")),formatter:e=>this.$i18n.$n(e,this.numberFormatOptions)})))),this.showAverage&&e.push({key:"average",label:this.$i18n.$t.extension.common.averagePerDay,formatter:e=>this.$i18n.$n(e,this.averageNumberFormatOptions??this.numberFormatOptions)}),this.showPercentage&&e.push({key:"percentage",label:"%",formatter:e=>""!=e?this.$i18n.$n(e,{minimumFractionDigits:3,maximumFractionDigits:3}):e}),e}get rows(){const e=this.dataItemsByRange,t=this.dateRanges.findIndex((e=>"all"==e.type))??(0,i.A)("failed to find range 'all'"),a=e[t].map((e=>m()(e.date).getTime())),s=new Set(a).size,n=Math.max(1,this.items.map((a=>"getValue"in a?a.getValue(e[t]):a.items.reduce(((a,s)=>a+s.getValue(e[t])),0))).reduce(((e,t)=>e+t),0));return this.items.map((a=>this.mapItemToRow(a,e,t,s,n)))}mapItemToRow(e,t,a,s,n){if("getValue"in e){const r={label:e.label,class:e.class,labelClass:e.labelClass,...this.dateRanges.map(((a,s)=>e.getValue(t[s])))},o=r[a];return this.showAverage&&(r.average=o/Math.max(1,s)),this.showPercentage&&(r.percentage=100*o/n),r}return{label:e.label,items:e.items.map((e=>this.mapItemToRow(e,t,a,s,n)))}}get footerRows(){const e=this.dataItemsByRange,t=this.dateRanges.findIndex((e=>"all"==e.type))??(0,i.A)("failed to find range 'all'"),a=e[t].map((e=>m()(e.date).getTime())),s=new Set(a).size;return this.footerItems.map((a=>{const n={label:a.label,...this.dateRanges.map(((t,s)=>"getValue"in a?a.getValue(e[s]):a.items.reduce(((t,a)=>t+a.getValue(e[s])),0))),percentage:""};if(this.showAverage){const e=n[t];n.average=e/Math.max(1,s)}return n}))}getCellClass(e){return 0==e?"fade-value":""}};(0,r.gn)([(0,o.fI)({required:!1,type:Boolean})],g.prototype,"showPercentage",void 0),(0,r.gn)([(0,o.fI)({required:!1,type:Boolean})],g.prototype,"showAverage",void 0),(0,r.gn)([(0,o.fI)({required:!0,type:Array})],g.prototype,"items",void 0),(0,r.gn)([(0,o.fI)({required:!1,type:Array,default:()=>[]})],g.prototype,"footerItems",void 0),(0,r.gn)([(0,o.fI)({required:!1,type:Object,default:void 0})],g.prototype,"numberFormatOptions",void 0),(0,r.gn)([(0,o.fI)({required:!1,type:Object,default:void 0})],g.prototype,"averageNumberFormatOptions",void 0),(0,r.gn)([(0,o.fI)({required:!0,type:Array})],g.prototype,"dataItems",void 0),g=(0,r.gn)([(0,o.wA)({})],g);const d=g,f=d;var p=a(1001),h=(0,p.Z)(f,s,n,!1,null,"1526beca",null);const b=h.exports},5906:(e,t,a)=>{a.r(t),a.d(t,{default:()=>b});var s=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"table-container"},[a("ranged-stats-table",{attrs:{dataItems:e.discoveries,items:e.items,footerItems:e.footerItems,"show-average":"","show-percentage":"",averageNumberFormatOptions:e.avgNumberFormat},scopedSlots:e._u([{key:"cell-label",fn:function(t){var s=t.value;return[a("span",{staticClass:"mr-2",domProps:{textContent:e._s(s)}}),a("o-lifeform",{attrs:{lifeform:e.lifeformTypes[s],size:"24px"}})]}}])}),a("floating-menu",{attrs:{left:""},scopedSlots:e._u([{key:"activator",fn:function(){return[a("button",{on:{click:function(t){e.showSettings=!e.showSettings}}},[a("span",{staticClass:"mdi mdi-cog"})])]},proxy:!0}]),model:{value:e.showSettings,callback:function(t){e.showSettings=t},expression:"showSettings"}},[a("date-range-settings")],1)],1)},n=[],r=a(655),o=a(4028),l=a(4310),i=a(4329),u=a(6903),m=a(917),c=a(3418);let g=class extends o.w3{showSettings=!1;avgNumberFormat={minimumFractionDigits:1,maximumFractionDigits:1};get discoveries(){return u.F.dailyResultsArray}get colors(){return m.V.settings.colors.lifeforms}get lifeformTypes(){return{[this.$i18n.$t.ogame.lifeforms.humans]:c.e5.humans,[this.$i18n.$t.ogame.lifeforms.rocktal]:c.e5.rocktal,[this.$i18n.$t.ogame.lifeforms.mechas]:c.e5.mechas,[this.$i18n.$t.ogame.lifeforms.kaelesh]:c.e5.kaelesh}}get items(){return c.p3.map((e=>({label:this.$i18n.$t.ogame.lifeforms[e],getValue:t=>t.reduce(((t,a)=>t+a.lifeformExperience[e]),0)})))}get footerItems(){return[{label:this.$i18n.$t.extension.common.sum,getValue:e=>e.reduce(((e,t)=>e+Object.values(t.lifeformExperience).reduce(((e,t)=>e+t),0)),0)}]}};g=(0,r.gn)([(0,o.wA)({components:{RangedStatsTable:l.Z,DateRangeSettings:i.Z}})],g);const d=g,f=d;var p=a(1001),h=(0,p.Z)(f,s,n,!1,null,"63ecd770",null);const b=h.exports},8734:(e,t)=>{function a(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=a,e.exports=t.default},4749:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=o;var s=r(a(1171)),n=r(a(8734));function r(e){return e&&e.__esModule?e:{default:e}}function o(e){(0,n.default)(1,arguments);var t=(0,s.default)(e);return t.setHours(0,0,0,0),t}e.exports=t.default},1171:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var s=n(a(8734));function n(e){return e&&e.__esModule?e:{default:e}}function r(e){(0,s.default)(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"===typeof e||"[object Number]"===t?new Date(e):("string"!==typeof e&&"[object String]"!==t||"undefined"===typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}e.exports=t.default}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,