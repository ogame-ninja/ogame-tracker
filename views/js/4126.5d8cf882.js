"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[4126],{9781:(e,t,s)=>{s.d(t,{L:()=>i});var n=s(776);const i={[n.Mm.small]:[25e4,3e5,35e4,4e5,45e4,5e5,55e4,6e5,65e4,7e5,75e4,8e5,85e4,9e5,95e4,1e6,105e4,11e5,115e4,12e5,125e4],[n.Mm.medium]:[125e4,13e5,135e4,14e5,145e4,15e5,155e4,16e5,165e4,17e5,175e4,18e5,185e4,19e5,195e4,2e6,205e4,21e5,215e4,22e5,225e4,23e5,235e4,24e5,245e4,25e5],[n.Mm.large]:[25e5,255e4,26e5,265e4,27e5,275e4,28e5,285e4,29e5,295e4,3e6,305e4,31e5,315e4,32e5,325e4,33e5,335e4,34e5,345e4,35e5,355e4,36e5,365e4,37e5,375e4,38e5,385e4,39e5,395e4,4e6,405e4,41e5,415e4,42e5,425e4,43e5,435e4,44e5,445e4,45e5,455e4,46e5,465e4,47e5,475e4,48e5,485e4,49e5,495e4,5e6]}},2611:(e,t,s)=>{function n(e){return e<1e5?.1:e<1e6?.24:e<5e6?.36:e<25e6?.48:e<5e7?.6:e<75e6?.72:e<1e8?.84:1}s.d(t,{Q:()=>n})},147:(e,t,s)=>{s.d(t,{g1:()=>i,g4:()=>o,_Z:()=>r});const n=.001;function i(e){const t=o(e);return t*n}function o(e){for(let t=0;;t++){const s=r(t+1);if(s>e)return t}}function r(e){return 900*e*(e+1)/2}},1786:(e,t,s)=>{s.d(t,{I5:()=>l,io:()=>a,qH:()=>c,g5:()=>u});var n=s(602),i=s(5128),o=s(6119),r=s(4846);function l(e){return r._i.filter((t=>e.activeLifeformTechnologies.includes(t.type))).reduce(((t,s)=>t+s.getClassBonus(n.D0.collector,e.lifeformTechnologies[s.type])),0)}function a(e){return o.cQ[e.activeLifeform].reduce(((t,s)=>t+s.getLifeformTechnologyBonus(e.lifeformBuildings[s.type])),0)}function c(e){return o.wJ[e.activeLifeform].reduce(((t,s)=>(0,i.aV)(t,s.getProductionBonus(e.lifeformBuildings[s.type]))),{metal:0,crystal:0,deuterium:0,energy:0})}function u(e){return r.rE.filter((t=>e.activeLifeformTechnologies.includes(t.type))).reduce(((t,s)=>(0,i.aV)(t,s.getProductionBonus(e.lifeformTechnologies[s.type]))),{metal:0,crystal:0,deuterium:0,energy:0})}},8288:(e,t,s)=>{s.d(t,{B:()=>o});var n=s(7331),i=s(917);function o(e,t={}){const s={metal:0,crystal:0,deuterium:0,...e},o={metal:1,crystal:1,deuterium:1,...t};n.P.forEach((e=>s[e]*=o[e]));const{mode:r,msu:l,dsu:a}=i.V.settings.conversionRates;return"msu"==r?s.metal+s.crystal*l.crystal+s.deuterium*l.deuterium:s.deuterium+s.crystal/a.crystal+s.metal/a.metal}},2836:(e,t,s)=>{s.d(t,{Z:()=>f});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return e.size==e.ExpeditionEventSize.small?s("span",{staticClass:"mdi mdi-hexagon-slice-1",style:{color:e.colors.small}}):e.size==e.ExpeditionEventSize.medium?s("span",{staticClass:"mdi mdi-hexagon-slice-3",style:{color:e.colors.medium}}):e.size==e.ExpeditionEventSize.large?s("span",{staticClass:"mdi mdi-hexagon-slice-5",style:{color:e.colors.large}}):e._e()},i=[],o=s(655),r=s(776),l=s(4028),a=s(917);let c=class extends l.w3{size;ExpeditionEventSize=r.Mm;get colors(){return a.V.settings.colors.expeditions.sizes}};(0,o.gn)([(0,l.fI)({required:!0,type:String})],c.prototype,"size",void 0),c=(0,o.gn)([(0,l.wA)({})],c);const u=c,d=u;var m=s(1001),p=(0,m.Z)(d,n,i,!1,null,null,null);const f=p.exports},4126:(e,t,s)=>{s.r(t),s.d(t,{default:()=>L});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",[s("div",{staticClass:"small-tables"},[s("grid-table",{attrs:{inline:"",columns:e.infoColumns,items:e.infoItems,"no-header":""},scopedSlots:e._u([{key:"cell-value",fn:function(t){var n=t.value,i=t.item;return["playerClass"==i.type?s("o-player-class",{attrs:{"player-class":n}}):"number"==i.type?s("span",{domProps:{textContent:e._s(n)}}):s("span",{domProps:{textContent:e._s(e.$i18n.$n(100*n,e.percentageFormat)+"%")}})]}}])}),s("grid-table",{attrs:{inline:"",columns:e.maxFindsColumns,items:e.maxFindsItems},scopedSlots:e._u([{key:"cell-key",fn:function(t){var n=t.value;return["metal"==n?[s("o-resource",{attrs:{resource:"metal",size:"24px"}}),s("span",{domProps:{textContent:e._s(e.$i18n.$n(e.finds.large[e.finds.large.length-1].metal))}})]:"crystal"==n?[s("o-resource",{attrs:{resource:"crystal",size:"24px"}}),s("span",{domProps:{textContent:e._s(e.$i18n.$n(e.finds.large[e.finds.large.length-1].crystal))}})]:"deuterium"==n?[s("o-resource",{attrs:{resource:"deuterium",size:"24px"}}),s("span",{domProps:{textContent:e._s(e.$i18n.$n(e.finds.large[e.finds.large.length-1].deuterium))}})]:"shipUnits"==n?[s("o-ship",{attrs:{ship:e.ShipType.battleship,size:"24px"}}),s("span",{domProps:{textContent:e._s(e.$i18n.$n(e.finds.large[e.finds.large.length-1].shipUnits))}})]:e._e()]}}])}),s("grid-table",{attrs:{inline:"",columns:e.darkMatterColumns,items:e.darkMatterItems},scopedSlots:e._u([{key:"cell-size",fn:function(e){var t=e.value;return[s("expedition-size-icon",{staticClass:"scaled-icon",attrs:{size:t}})]}},{key:"cell-amount",fn:function(t){var n=t.item;return[s("o-resource",{attrs:{resource:"dark-matter",size:"24px"}}),s("span",{domProps:{textContent:e._s(e.$i18n.$n(n.amount[0])+" - "+e.$i18n.$n(n.amount[1]))}})]}}])})],1),s("hr"),s("h3",{domProps:{textContent:e._s(e.$i18n.$t.extension.expeditions.possibleFinds.listOfPossibleFinds)}}),e._l(e.sizes,(function(t){return s("div",{key:t,staticClass:"find-col"},[s("h3",{staticClass:"table-title"},[s("expedition-size-icon",{attrs:{size:t}}),s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.expeditions.possibleFinds.findSizes(e.$i18n.$t.extension.expeditions.expeditionEventSizes[t]))}})],1),s("grid-table",{style:"--color: "+e.sizeColors[t],attrs:{inline:"",items:e.finds[t],columns:e.columns},scopedSlots:e._u([{key:"cell-.+",fn:function(t){var n=t.value;return[s("span",{domProps:{textContent:e._s(e.$i18n.$n(n))}})]}}],null,!0)})],1)}))],2)},i=[],o=s(655),r=s(776),l=s(602),a=s(2057),c=s(9751),u=s(4028),d=s(8395),m=s(917),p=s(7048),f=s(2836),g=s(4846),y=s(5424),h=s(1786),x=s(3418),v=s(147),$=s(7076),b=s(2611),k=s(9781),C=s(9563),z=s(248),F=s(8288);let M=class extends u.w3{ShipType=a.g;ExpeditionEventSize=r.Mm;sizes=r.Fg;percentageFormat={maximumFractionDigits:3,minimumFractionDigits:3};get sizeColors(){const e=m.V.settings.colors.expeditions.sizes;return{[r.Mm.small]:(0,p.U)(e.small),[r.Mm.medium]:(0,p.U)(e.medium),[r.Mm.large]:(0,p.U)(e.large)}}get columns(){return[{key:"metal",label:this.$i18n.$t.ogame.resources.metal},{key:"crystal",label:this.$i18n.$t.ogame.resources.crystal},{key:"deuterium",label:this.$i18n.$t.ogame.resources.deuterium},{key:"shipUnits",label:this.$i18n.$t.extension.expeditions.possibleFinds.shipUnits},{key:"maxShipUnitsConverted",label:this.$i18n.$t.extension.expeditions.possibleFinds.shipMaxUnitsConverted+` (${"msu"==m.V.settings.conversionRates.mode?this.$i18n.$t.extension.common.msu:this.$i18n.$t.extension.common.dsu})`}]}get infoColumns(){return[{key:"label"},{key:"value"}]}get infoItems(){const e=this.info;return[{type:"playerClass",label:this.$i18n.$t.extension.expeditions.possibleFinds.info.playerClass,value:e.playerClass},{type:"number",label:this.$i18n.$t.extension.expeditions.possibleFinds.info.economySpeed,value:e.ecoSpeed},{type:"percentage",label:this.$i18n.$t.extension.expeditions.possibleFinds.info.resourceFindBonus,value:e.resourceFindBonus},{type:"percentage",label:this.$i18n.$t.extension.expeditions.possibleFinds.info.shipFindBonus,value:e.shipFindBonus},{type:"percentage",label:this.$i18n.$t.extension.expeditions.possibleFinds.info.darkMatterFindBonus,value:e.darkMatterBonus},{type:"percentage",label:this.$i18n.$t.extension.expeditions.possibleFinds.info.discovererBonus,value:e.discovererBonus}]}get maxFindsColumns(){return[{key:"key",label:this.$i18n.$t.extension.expeditions.possibleFinds.maximumFinds,style:{"justify-content":"space-between",gap:"4px"}}]}get maxFindsItems(){return[{key:"metal"},{key:"crystal"},{key:"deuterium"},{key:"shipUnits"},{key:"maxShipUnitsConverted"}]}get darkMatterColumns(){return[{key:"size"},{key:"amount",label:this.$i18n.$t.extension.expeditions.possibleFinds.findsDarkMatter,style:{"justify-content":"start",gap:"6px"}}]}get darkMatterItems(){const e=1+this.info.darkMatterBonus;return[{size:r.Mm.small,amount:[300,400].map((t=>Math.trunc(t*e)))},{size:r.Mm.medium,amount:[500,700].map((t=>Math.trunc(t*e)))},{size:r.Mm.large,amount:[1e3,1800].map((t=>Math.trunc(t*e)))}]}get info(){const e=d.p.empire,t=Object.values(e.planets).filter((e=>!e.isMoon)),s=(0,c.r)(t,(e=>e.id),(e=>(0,h.io)(e))),n=g.uv.reduce(((e,n)=>{let i=0;return t.forEach((e=>{const t=e.activeLifeformTechnologies.includes(n.type)?e.lifeformTechnologies[n.type]:0,o=n.getExpeditionBonus(y.r.resources,t),r=e.activeLifeform==x.e5.none?0:o*(0,v.g1)(d.p.lifeformExperience[e.activeLifeform]),l=o*s[e.id],a=o+r+l;i+=a})),e+i}),0),i=g.uv.reduce(((e,n)=>{let i=0;return t.forEach((e=>{const t=e.activeLifeformTechnologies.includes(n.type)?e.lifeformTechnologies[n.type]:0,o=n.getExpeditionBonus(y.r.fleet,t),r=e.activeLifeform==x.e5.none?0:o*(0,v.g1)(d.p.lifeformExperience[e.activeLifeform]),l=o*s[e.id],a=o+r+l;i+=a})),e+i}),0),o=g.uv.reduce(((e,n)=>{let i=0;return t.forEach((e=>{const t=e.activeLifeformTechnologies.includes(n.type)?e.lifeformTechnologies[n.type]:0,o=n.getExpeditionBonus(y.r.darkMatter,t),r=e.activeLifeform==x.e5.none?0:o*(0,v.g1)(d.p.lifeformExperience[e.activeLifeform]),l=o*s[e.id],a=o+r+l;i+=a})),e+i}),0),r=g._i.reduce(((e,n)=>{let i=0;return t.forEach((e=>{const t=e.activeLifeformTechnologies.includes(n.type)?e.lifeformTechnologies[n.type]:0,o=n.getClassBonus(l.D0.discoverer,t),r=e.activeLifeform==x.e5.none?0:o*(0,v.g1)(d.p.lifeformExperience[e.activeLifeform]),a=o*s[e.id],c=o+r+a;i+=c})),e+i}),0);return{playerClass:e.playerClass,ecoSpeed:$.s.serverSettings.speed.economy,resourceFindBonus:n,shipFindBonus:i,discovererBonus:r,darkMatterBonus:o}}get finds(){const e=2,t=this.info,s=t.playerClass==l.D0.discoverer?t.ecoSpeed*(1.5*(1+t.discovererBonus)):1,n=(0,b.Q)($.s.serverSettings.topScore??0),i=C.x.map((e=>{const t=z.lp[e],s=t.cost,n=(0,F.B)(s),i=s.metal+s.crystal;return{converted:n,units:i,score:n/i}})).sort(((e,t)=>t.score-e.score))[0];return(0,c.a)(r.Fg,(o=>k.L[o].map((o=>{const r=n*o*e*s*(1+t.resourceFindBonus),l=n*o*e*s*(1+t.shipFindBonus)/2,a=Math.trunc(l/i.units)*i.converted;return{metal:Math.trunc(r),crystal:Math.trunc(r/2),deuterium:Math.trunc(r/3),shipUnits:Math.trunc(l),maxShipUnitsConverted:a}}))))}};M=(0,o.gn)([(0,u.wA)({components:{ExpeditionSizeIcon:f.Z}})],M);const B=M,E=B;var _=s(1001),S=(0,_.Z)(E,n,i,!1,null,"8330e486",null);const L=S.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,