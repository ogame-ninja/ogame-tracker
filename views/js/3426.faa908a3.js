"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[3426],{5199:(e,s,t)=>{t.r(s),t.d(s,{default:()=>T});var r=function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("lifeform-bonuses-breakdown",{attrs:{types:e.bonusTypes,technologies:e.techs,planets:e.planets,limits:e.limits}})},n=[],i=t(655),a=t(147),o=t(3418),l=t(4846),m=t(9751),h=t(8395),c=t(1786),u=t(4028),p=t(3894),g=t(2382),d=t(7848),f=t(7377);let b=class extends u.w3{bonusTypes=[{key:"armor",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.ships.armor},{key:"shield",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.ships.shield},{key:"damage",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.ships.damage}];technologies=l.$z.filter((e=>e.appliesTo(g.r.rocketLauncher)));get limits(){const e=(0,d.K)({type:f.f.StatsBonus,tech:g.r.rocketLauncher});return{armor:s=>null!=e?Math.min(s,e):s,shield:s=>null!=e?Math.min(s,e):s,damage:s=>null!=e?Math.min(s,e):s}}get techs(){return this.technologies.map((e=>e.type))}get planets(){return(0,m.r)(h.p.empire.planetOrder.map((e=>h.p.empire.planets[e])).filter((e=>!e.isMoon)),(e=>e.id),(e=>this.technologies.map((s=>{const t=this.getPlanetBonus(s,e);return{planet:e,technologyType:s.type,bonuses:(0,m.a)(["armor","shield","damage"],(e=>({base:t.base[e],buildings:t.buildings[e],level:t.level[e],total:t.total[e]})))}}))))}get experience(){return h.p.lifeformExperience}getPlanetBonus(e,s){const t={base:{armor:0,shield:0,damage:0},level:{armor:0,shield:0,damage:0},buildings:{armor:0,shield:0,damage:0},buildingsBoost:0,total:{armor:0,shield:0,damage:0}};if(s.activeLifeform==o.e5.none||!s.activeLifeformTechnologies.includes(e.type))return t;const r=Math.min((0,c.io)(s),(0,d.K)({type:f.f.LifeformResearchBonusBoost})??Number.MAX_SAFE_INTEGER);t.buildingsBoost+=r;const n=e.getStatsBonus(g.r.rocketLauncher,s.lifeformTechnologies[e.type]),i={armor:"armor",shield:"shield",damage:"damage"};return Object.entries(i).forEach((e=>{const[i,o]=e,l=n[o],m=l*(0,a.g1)(this.experience[s.activeLifeform]),h=l*r,c=l+m+h;t.base[i]+=l,t.level[i]+=m,t.buildings[i]+=h,t.total[i]+=c})),t}};b=(0,i.gn)([(0,u.wA)({components:{LifeformBonusesBreakdown:p.Z}})],b);const k=b,y=k;var B=t(1001),v=(0,B.Z)(y,r,n,!1,null,null,null);const T=v.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,