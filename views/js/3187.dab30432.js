"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[3187],{3187:(t,n,e)=>{e.r(n),e.d(n,{default:()=>x});var i=function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",{staticClass:"danger-zone-content"},[e("div",{staticClass:"delete-messages"},[e("button",{staticClass:"delete-button",on:{click:function(n){return t.clearExpeditions()}}},[e("span",{staticClass:"ogti ogti-expedition"}),e("span",{domProps:{textContent:t._s(t.$i18n.$t.extension.settings.dangerZone.deleteExpeditions.button(t.accountAndServer))}})]),e("button",{staticClass:"delete-button",on:{click:function(n){return t.clearCombats()}}},[e("span",{staticClass:"ogti ogti-attack"}),e("span",{domProps:{textContent:t._s(t.$i18n.$t.extension.settings.dangerZone.deleteCombats.button(t.accountAndServer))}})]),e("button",{staticClass:"delete-button",on:{click:function(n){return t.clearDebrisFieldReports()}}},[e("span",{staticClass:"ogti ogti-debris-field"}),e("span",{domProps:{textContent:t._s(t.$i18n.$t.extension.settings.dangerZone.deleteDebrisFieldReports.button(t.accountAndServer))}})])]),e("hr"),e("button",{staticClass:"delete-button",on:{click:function(n){return t.deleteAccount()}}},[e("span",{staticClass:"mdi mdi-account"}),e("span",{domProps:{textContent:t._s(t.$i18n.$t.extension.settings.dangerZone.deleteAccount.button(t.accountAndServer))}})]),e("hr"),e("button",{staticClass:"delete-button",on:{click:function(n){return t.deleteUniverseHistory()}}},[e("span",{staticClass:"mdi mdi-update"}),e("span",{domProps:{textContent:t._s(t.$i18n.$t.extension.settings.dangerZone.deleteUniverseHistory.button(t.server))}})]),e("hr"),e("button",{staticClass:"delete-button",on:{click:function(n){return t.deleteEverything()}}},[e("span",{staticClass:"mdi mdi-delete"}),e("span",{domProps:{textContent:t._s(t.$i18n.$t.extension.settings.dangerZone.deleteEverything.button)}})]),t.isDeleting?e("div",{staticClass:"danger-zone-overlay"},[e("loading-spinner")],1):t._e()])},o=[],s=e(655),a=e(4028),r=e(4992),c=e(5359),d=e(7090),l=e(5038),u=e(9828);let g=class extends a.w3{isDeleting=!1;async mounted(){await d.m.ready,await r.t.ready,await c.J.ready,await u.z.ready}get server(){const t=u.z.currentServer;return`${t.language.toUpperCase()} ${t.name}`}get accountAndServer(){const t=u.z.currentAccount;return`${t.name} - ${this.server}`}async clearExpeditions(){const t=window.confirm(this.$i18n.$t.extension.settings.dangerZone.deleteExpeditions.confirmationText(this.accountAndServer,this.$i18n.$n(d.m.count))+"\n\n"+this.$i18n.$t.extension.settings.dangerZone.doYouWantToContinue);t&&(this.isDeleting=!0,await d.m.clear(),window.location.hash="",window.location.reload())}async clearCombats(){const t=window.confirm(this.$i18n.$t.extension.settings.dangerZone.deleteCombats.confirmationText(this.accountAndServer,this.$i18n.$n(r.t.count))+"\n\n"+this.$i18n.$t.extension.settings.dangerZone.doYouWantToContinue);t&&(this.isDeleting=!0,await r.t.clear(),window.location.hash="",window.location.reload())}async clearDebrisFieldReports(){const t=window.confirm(this.$i18n.$t.extension.settings.dangerZone.deleteDebrisFieldReports.confirmationText(this.accountAndServer,this.$i18n.$n(c.J.count))+"\n\n"+this.$i18n.$t.extension.settings.dangerZone.doYouWantToContinue);t&&(this.isDeleting=!0,await c.J.clear(),window.location.hash="",window.location.reload())}async deleteAccount(){const t=window.confirm(this.$i18n.$t.extension.settings.dangerZone.deleteAccount.confirmationText(this.accountAndServer)+"\n\n"+this.$i18n.$t.extension.settings.dangerZone.doYouWantToContinue);t&&(this.isDeleting=!0,await u.z.deleteCurrentAccount(),window.close())}async deleteUniverseHistory(){const t=window.confirm(this.$i18n.$t.extension.settings.dangerZone.deleteUniverseHistory.confirmationText(this.accountAndServer)+"\n\n"+this.$i18n.$t.extension.settings.dangerZone.doYouWantToContinue);t&&(this.isDeleting=!0,await l.z.deleteCurrentServer(),window.location.hash="",window.location.reload())}async deleteEverything(){let t=window.confirm(this.$i18n.$t.extension.settings.dangerZone.deleteEverything.confirmationText1+"\n\n"+this.$i18n.$t.extension.settings.dangerZone.doYouWantToContinue);t&&(t=window.confirm(this.$i18n.$t.extension.settings.dangerZone.deleteEverything.confirmationText2+"\n\n"+this.$i18n.$t.extension.settings.dangerZone.doYouWantToContinue),t&&(this.isDeleting=!0,await u.z.deleteEverything(),window.close()))}};g=(0,s.gn)([(0,a.wA)({})],g);const h=g,$=h;var w=e(1001),m=(0,w.Z)($,i,o,!1,null,"8448ade4",null);const x=m.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,