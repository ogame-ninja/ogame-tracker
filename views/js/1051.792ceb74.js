"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[1051],{8288:(e,t,s)=>{s.d(t,{B:()=>r});var a=s(7331),n=s(917);function r(e,t={}){const s={metal:0,crystal:0,deuterium:0,...e},r={metal:1,crystal:1,deuterium:1,...t};a.P.forEach((e=>s[e]*=r[e]));const{mode:i,msu:o,dsu:l}=n.V.settings.conversionRates;return"msu"==i?s.metal+s.crystal*o.crystal+s.deuterium*o.deuterium:s.deuterium+s.crystal/l.crystal+s.metal/l.metal}},3978:(e,t,s)=>{s.d(t,{Z:()=>b});var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("floating-menu",{attrs:{left:""},scopedSlots:e._u([{key:"activator",fn:function(){return[s("button",{on:{click:function(t){e.show=!e.show}}},[s("span",{staticClass:"mdi mdi-plus"})])]},proxy:!0}]),model:{value:e.show,callback:function(t){e.show=t},expression:"show"}},[s("div",{staticClass:"fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.debrisFields.addDebrisFieldManually.title)}})]),s("div",{staticClass:"fake-table-body"},[s("span",[s("o-resource",{attrs:{resource:"metal"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.metal,expression:"metal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",value:"1",min:"0",step:"1"},domProps:{value:e.metal},on:{change:function(t){e.metal=e._n(t.target.value)},blur:function(t){return e.$forceUpdate()}}})],1),s("span",[s("o-resource",{attrs:{resource:"crystal"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.crystal,expression:"crystal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"0",step:"1"},domProps:{value:e.crystal},on:{change:function(t){e.crystal=e._n(t.target.value)},blur:function(t){return e.$forceUpdate()}}})],1),s("span",[s("span",{staticClass:"mdi mdi-calendar calendar-icon"}),s("input",{directives:[{name:"model",rawName:"v-model.lazy",value:e.datetimeString,expression:"datetimeString",modifiers:{lazy:!0}}],attrs:{type:"datetime-local"},domProps:{value:e.datetimeString},on:{change:function(t){e.datetimeString=t.target.value}}})]),s("button",{staticClass:"add",attrs:{disabled:0==e.metal&&0==e.crystal||null==e.datetime},domProps:{textContent:e._s(e.$i18n.$t.extension.debrisFields.addDebrisFieldManually.buttonText)},on:{click:function(t){return e.addManualDebrisFieldReport()}}})])])])},n=[],r=s(655),i=s(2809),o=s(1936),l=s(4028),u=s(5359),d=s(8717);let m=class extends l.w3{show=!1;datetimeString="";metal=0;crystal=0;get nextId(){const e=Math.min(0,u.J.minId);return e-1}get datetime(){if(""==this.datetimeString)return null;const e=new Date(this.datetimeString).getTime();return isNaN(e)?null:e}addManualDebrisFieldReport(){const e=this.datetime;if(null==e)return;const t={ogameMeta:d.l,type:o.C.TrackManualDebrisFieldReport,data:{id:this.nextId,date:e,metal:this.metal,crystal:this.crystal},senderUuid:d.g};(0,i.b)(t),this.datetimeString="",this.metal=0,this.crystal=0}};m=(0,r.gn)([(0,l.wA)({})],m);const c=m,p=c;var g=s(1001),v=(0,g.Z)(p,a,n,!1,null,"de75cc08",null);const b=v.exports},6597:(e,t,s)=>{s.d(t,{Z:()=>p});var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"conversion-rate-settings fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.title)}})]),s("div",{staticClass:"fake-table-body"},[s("select",{domProps:{value:e.conversionMode},on:{input:function(t){return e.setConversionMode(t.target.value)}}},[s("option",{attrs:{value:"msu"},domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.msuLong+" ("+e.$i18n.$t.extension.common.msu+")")}}),s("option",{attrs:{value:"dsu"},domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.dsuLong+" ("+e.$i18n.$t.extension.common.dsu+")")}})]),"msu"==e.conversionMode?s("span",{staticClass:"inputs"},[s("span",[s("o-resource",{attrs:{resource:"crystal"}}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.msu.crystal,expression:"msu.crystal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"1",max:"3",step:"0.01"},domProps:{value:e.msu.crystal},on:{change:[function(t){e.$set(e.msu,"crystal",e._n(t.target.value))},function(t){return e.updateMsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("o-resource",{attrs:{resource:"metal"}})],1),s("span",[s("o-resource",{attrs:{resource:"deuterium"}}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.msu.deuterium,expression:"msu.deuterium",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"2",max:"5",step:"0.01"},domProps:{value:e.msu.deuterium},on:{change:[function(t){e.$set(e.msu,"deuterium",e._n(t.target.value))},function(t){return e.updateMsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("o-resource",{attrs:{resource:"metal"}})],1)]):s("span",{staticClass:"inputs"},[s("span",[s("o-resource",{attrs:{resource:"metal"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.dsu.metal,expression:"dsu.metal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"2",max:"5",step:"0.01"},domProps:{value:e.dsu.metal},on:{change:[function(t){e.$set(e.dsu,"metal",e._n(t.target.value))},function(t){return e.updateDsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("o-resource",{attrs:{resource:"deuterium"}})],1),s("span",[s("o-resource",{attrs:{resource:"crystal"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.dsu.crystal,expression:"dsu.crystal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"1",max:"3",step:"0.01"},domProps:{value:e.dsu.crystal},on:{change:[function(t){e.$set(e.dsu,"crystal",e._n(t.target.value))},function(t){return e.updateDsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("o-resource",{attrs:{resource:"deuterium"}})],1)])])])},n=[],r=s(655),i=s(4028),o=s(917);let l=class extends i.w3{msu={crystal:2,deuterium:3};dsu={metal:3,crystal:2};get msuRates(){return o.V.settings.conversionRates.msu}get dsuRates(){return o.V.settings.conversionRates.dsu}get conversionMode(){return o.V.settings.conversionRates.mode}setConversionMode(e){o.V.updateSettings({...o.V.settings,conversionRates:{...o.V.settings.conversionRates,mode:e}})}onMsuRatesChanged(){const{crystal:e,deuterium:t}=this.msuRates;this.msu.crystal=e,this.msu.deuterium=t}updateMsuConversionRates(){o.V.updateSettings({...o.V.settings,conversionRates:{...o.V.settings.conversionRates,msu:this.msu}})}onDsuRatesChanged(){const{crystal:e,metal:t}=this.dsuRates;this.dsu.crystal=e,this.dsu.metal=t}updateDsuConversionRates(){o.V.updateSettings({...o.V.settings,conversionRates:{...o.V.settings.conversionRates,dsu:this.dsu}})}};(0,r.gn)([(0,i.RL)("msuRates",{immediate:!0})],l.prototype,"onMsuRatesChanged",null),(0,r.gn)([(0,i.RL)("dsuRates",{immediate:!0})],l.prototype,"onDsuRatesChanged",null),l=(0,r.gn)([(0,i.wA)({})],l);const u=l,d=u;var m=s(1001),c=(0,m.Z)(d,a,n,!1,null,"13cde7dd",null);const p=c.exports},3787:(e,t,s)=>{s.d(t,{Z:()=>p});var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.showConvertedUnitsInTables.title)}})]),s("div",{staticClass:"fake-table-body"},[s("checkbox",{attrs:{value:e.showCellsWithConvertedResourceUnits,label:e.$i18n.$t.extension.settings.showConvertedUnitsInTables.label},on:{input:function(t){return e.toggle(t)}}}),e._t("default")],2)])},n=[],r=s(655),i=s(4028),o=s(917);let l=class extends i.w3{get showCellsWithConvertedResourceUnits(){return o.V.settings.showCellsWithConvertedResourceUnits}toggle(e){o.V.updateSettings({...o.V.settings,showCellsWithConvertedResourceUnits:e})}};l=(0,r.gn)([(0,i.wA)({})],l);const u=l,d=u;var m=s(1001),c=(0,m.Z)(d,a,n,!1,null,"90457dc2",null);const p=c.exports},4139:(e,t,s)=>{s.d(t,{Z:()=>p});var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.debrisFields.separateExpeditionDebrisFields.title)}})]),s("div",{staticClass:"fake-table-body"},[s("checkbox",{attrs:{value:e.separateExpeditionDebrisFields,label:e.$i18n.$t.extension.settings.debrisFields.separateExpeditionDebrisFields.label},on:{input:function(t){return e.toggle(t)}}})],1)])},n=[],r=s(655),i=s(917),o=s(4028);let l=class extends o.w3{get separateExpeditionDebrisFields(){return i.V.settings.debrisFields.separateExpeditionDebrisFields}toggle(e){i.V.updateSettings({...i.V.settings,debrisFields:{...i.V.settings.debrisFields,separateExpeditionDebrisFields:e}})}};l=(0,r.gn)([(0,o.wA)({})],l);const u=l,d=u;var m=s(1001),c=(0,m.Z)(d,a,n,!1,null,"bfa7b77a",null);const p=c.exports},4310:(e,t,s)=>{s.d(t,{Z:()=>f});var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("grid-table",{staticClass:"ranged-stats-table",attrs:{columns:e.columns,items:e.rows,"footer-items":e.footerRows,"cell-class-provider":function(t){return e.getCellClass(t)}},scopedSlots:e._u([e._l(e.columns,(function(t,a){return{key:"cell-"+t.key,fn:function(n){var r=n.value,i=n.item;return[s("span",{key:t.key,staticClass:"ranged-stats-table-cell"},["label"==t.key?[null!=t.slotName&&null!=e.$scopedSlots[t.slotName]?e._t(t.slotName,null,{value:r}):s("span",{key:a,domProps:{textContent:e._s(r)}})]:"subLabel"==t.key?e._l(i.items,(function(a,n){return s("span",{key:n,class:a.labelClass},[null!=t.slotName&&null!=e.$scopedSlots[t.slotName]?e._t(t.slotName,null,{value:a.label}):s("span",{domProps:{textContent:e._s(a.label)}})],2)})):e._l(i.items||[i],(function(a,n){return s("span",{key:n,class:[e.getCellClass(a[t.key]),a.class]},[null!=t.formatter?s("span",{domProps:{textContent:e._s(t.formatter(a[t.key]))}}):s("span",{domProps:{textContent:e._s(a[t.key])}})])}))],2)]}}})),e._l(e.$scopedSlots,(function(t,s){return{key:s,fn:function(t){return[e._t(s,null,null,t)]}}}))],null,!0)})},n=[],r=s(655),i=s(4028),o=s(9858),l=s(6538),u=s(4749),d=s.n(u),m=s(917);let c=class extends i.w3{showPercentage;showAverage;items;footerItems;numberFormatOptions;averageNumberFormatOptions;dataItems;get hasGroupedItems(){return this.items.some((e=>"items"in e))}get dateRanges(){return m.V.settings.dateRanges}get dataItemsByRange(){const e=this.dataItems,t=this.dateRanges.map((()=>[]));return e.forEach((e=>{this.dateRanges.forEach(((s,a)=>{(0,o.m)(e.date,s)&&t[a].push(e)}))})),t}get firstDay(){return this.dataItemsByRange.reduce(((e,t)=>Math.min(e,Math.min(...t.map((e=>e.date))))),Date.now())}get columns(){const e=[{key:"label",label:"",slotName:"label"}];return this.hasGroupedItems&&e.push({key:"subLabel",label:"",slotName:"subLabel"}),e.push(...this.dateRanges.map(((e,t)=>({key:t,label:e.label??this.$i18n.$t.extension.settings.dateRanges.since(this.$i18n.$d(this.firstDay,"date")),formatter:e=>this.$i18n.$n(e,this.numberFormatOptions)})))),this.showAverage&&e.push({key:"average",label:this.$i18n.$t.extension.common.averagePerDay,formatter:e=>this.$i18n.$n(e,this.averageNumberFormatOptions??this.numberFormatOptions)}),this.showPercentage&&e.push({key:"percentage",label:"%",formatter:e=>""!=e?this.$i18n.$n(e,{minimumFractionDigits:3,maximumFractionDigits:3}):e}),e}get rows(){const e=this.dataItemsByRange,t=this.dateRanges.findIndex((e=>"all"==e.type))??(0,l.A)("failed to find range 'all'"),s=e[t].map((e=>d()(e.date).getTime())),a=new Set(s).size,n=Math.max(1,this.items.map((s=>"getValue"in s?s.getValue(e[t]):s.items.reduce(((s,a)=>s+a.getValue(e[t])),0))).reduce(((e,t)=>e+t),0));return this.items.map((s=>this.mapItemToRow(s,e,t,a,n)))}mapItemToRow(e,t,s,a,n){if("getValue"in e){const r={label:e.label,class:e.class,labelClass:e.labelClass,...this.dateRanges.map(((s,a)=>e.getValue(t[a])))},i=r[s];return this.showAverage&&(r.average=i/Math.max(1,a)),this.showPercentage&&(r.percentage=100*i/n),r}return{label:e.label,items:e.items.map((e=>this.mapItemToRow(e,t,s,a,n)))}}get footerRows(){const e=this.dataItemsByRange,t=this.dateRanges.findIndex((e=>"all"==e.type))??(0,l.A)("failed to find range 'all'"),s=e[t].map((e=>d()(e.date).getTime())),a=new Set(s).size;return this.footerItems.map((s=>{const n={label:s.label,...this.dateRanges.map(((t,a)=>"getValue"in s?s.getValue(e[a]):s.items.reduce(((t,s)=>t+s.getValue(e[a])),0))),percentage:""};if(this.showAverage){const e=n[t];n.average=e/Math.max(1,a)}return n}))}getCellClass(e){return 0==e?"fade-value":""}};(0,r.gn)([(0,i.fI)({required:!1,type:Boolean})],c.prototype,"showPercentage",void 0),(0,r.gn)([(0,i.fI)({required:!1,type:Boolean})],c.prototype,"showAverage",void 0),(0,r.gn)([(0,i.fI)({required:!0,type:Array})],c.prototype,"items",void 0),(0,r.gn)([(0,i.fI)({required:!1,type:Array,default:()=>[]})],c.prototype,"footerItems",void 0),(0,r.gn)([(0,i.fI)({required:!1,type:Object,default:void 0})],c.prototype,"numberFormatOptions",void 0),(0,r.gn)([(0,i.fI)({required:!1,type:Object,default:void 0})],c.prototype,"averageNumberFormatOptions",void 0),(0,r.gn)([(0,i.fI)({required:!0,type:Array})],c.prototype,"dataItems",void 0),c=(0,r.gn)([(0,i.wA)({})],c);const p=c,g=p;var v=s(1001),b=(0,v.Z)(g,a,n,!1,null,"1526beca",null);const f=b.exports},5972:(e,t,s)=>{s.r(t),s.d(t,{default:()=>$});var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"table-container"},[s("ranged-stats-table",{attrs:{dataItems:e.debrisFieldReports,items:e.items,footerItems:e.footerItems,"show-average":"",averageNumberFormatOptions:e.avgNumberFormat},scopedSlots:e._u([{key:"cell-label",fn:function(t){var a=t.value;return[s("span",{staticClass:"mr-2",domProps:{textContent:e._s(a)}}),s("o-resource",{attrs:{resource:e.resourceTypes[a],size:"24px"}})]}}])}),s("span",{staticClass:"multi-menu"},[s("floating-menu",{staticClass:"floating-settings",attrs:{left:""},scopedSlots:e._u([{key:"activator",fn:function(){return[s("button",{on:{click:function(t){e.showSettings=!e.showSettings}}},[s("span",{staticClass:"mdi mdi-cog"})])]},proxy:!0}]),model:{value:e.showSettings,callback:function(t){e.showSettings=t},expression:"showSettings"}},[s("conversion-rate-settings"),s("show-converted-resources-in-cells-settings"),s("separate-expedition-and-normal-debris-field-settings"),s("hr",{staticClass:"three-column"}),s("date-range-settings",{staticClass:"three-column"})],1),s("manually-add-debris-field-menu")],1)],1)},n=[],r=s(655),i=s(4028),o=s(7331),l=s(4310),u=s(5359),d=s(917),m=s(4329),c=s(6597),p=s(3978),g=s(3787),v=s(4139),b=s(8288);let f=class extends i.w3{showSettings=!1;avgNumberFormat={minimumFractionDigits:1,maximumFractionDigits:1};get resourceTypes(){return{[this.$i18n.$t.extension.resources.metal]:o._.metal,[this.$i18n.$t.extension.resources.crystal]:o._.crystal,[this.$i18n.$t.extension.resources.deuterium]:o._.deuterium}}get separate(){return d.V.settings.debrisFields.separateExpeditionDebrisFields}get items(){return this.separate?o.P.map((e=>({label:this.$i18n.$t.extension.resources[e],items:["normal","expedition","total"].map((t=>({label:{normal:`${this.$i18n.$t.extension.debrisFields.position} 1-15`,expedition:`${this.$i18n.$t.extension.debrisFields.position} 16`,total:this.$i18n.$t.extension.common.sum}[t],getValue:s=>s.reduce(((s,a)=>s+a[t][e]),0),class:"total"==t?"sum-item":"",labelClass:"total"==t?"sum-item":""})))}))):o.P.map((e=>({label:this.$i18n.$t.extension.resources[e],getValue:t=>t.reduce(((t,s)=>t+s.total[e]),0)})))}get debrisFieldReports(){return u.J.dailyResultsArray}get footerItems(){const e=[{label:this.$i18n.$t.extension.common.resourceUnits,getValue:e=>e.reduce(((e,t)=>e+t.total.metal+t.total.crystal+t.total.deuterium),0)}];return d.V.settings.showCellsWithConvertedResourceUnits&&e.push({label:`${this.$i18n.$t.extension.common.resourceUnits} (${"msu"==d.V.settings.conversionRates.mode?this.$i18n.$t.extension.common.msu:this.$i18n.$t.extension.common.dsu})`,getValue:e=>e.reduce(((e,t)=>e+(0,b.B)(t.total)),0)}),e}};f=(0,r.gn)([(0,i.wA)({components:{RangedStatsTable:l.Z,DateRangeSettings:m.Z,ConversionRateSettings:c.Z,ManuallyAddDebrisFieldMenu:p.Z,ShowConvertedResourcesInCellsSettings:g.Z,SeparateExpeditionAndNormalDebrisFieldSettings:v.Z}})],f);const h=f,y=h;var x=s(1001),C=(0,x.Z)(y,a,n,!1,null,"635f3fc1",null);const $=C.exports},8734:(e,t)=>{function s(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=s,e.exports=t.default},4749:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i;var a=r(s(1171)),n=r(s(8734));function r(e){return e&&e.__esModule?e:{default:e}}function i(e){(0,n.default)(1,arguments);var t=(0,a.default)(e);return t.setHours(0,0,0,0),t}e.exports=t.default},1171:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var a=n(s(8734));function n(e){return e&&e.__esModule?e:{default:e}}function r(e){(0,a.default)(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"===typeof e||"[object Number]"===t?new Date(e):("string"!==typeof e&&"[object String]"!==t||"undefined"===typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}e.exports=t.default}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,