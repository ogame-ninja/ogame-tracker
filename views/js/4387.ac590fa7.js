"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[4387],{1184:(e,t,s)=>{s.d(t,{Z:()=>y});var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"table-container"},[s("ranged-stats-table",{attrs:{dataItems:e.expos,items:e.items,footerItems:e.footerItems,"show-percentage":""},scopedSlots:e._u([{key:"cell-label",fn:function(t){var a=t.value;return[s("span",{domProps:{textContent:e._s(a)}}),a==e.$i18n.$t.extension.expeditions.expeditionEventSizes.small?s("span",{staticClass:"mdi mdi-hexagon-slice-1",style:{color:e.colors.small}}):a==e.$i18n.$t.extension.expeditions.expeditionEventSizes.medium?s("span",{staticClass:"mdi mdi-hexagon-slice-3",style:{color:e.colors.medium}}):a==e.$i18n.$t.extension.expeditions.expeditionEventSizes.large?s("span",{staticClass:"mdi mdi-hexagon-slice-5",style:{color:e.colors.large}}):e._e()]}}])}),s("floating-menu",{attrs:{left:""},scopedSlots:e._u([{key:"activator",fn:function(){return[s("button",{on:{click:function(t){e.showSettings=!e.showSettings}}},[s("span",{staticClass:"mdi mdi-cog"})])]},proxy:!0}]),model:{value:e.showSettings,callback:function(t){e.showSettings=t},expression:"showSettings"}},[s("date-range-settings")],1)],1)},n=[],o=s(655),r=s(4028),l=s(4310),i=s(776),u=s(7090),c=s(4329),d=s(917),m=s(7331);let p=class extends r.w3{resource;showSettings=!1;get colors(){return d.V.settings.colors.expeditions.sizes}get expos(){return u.m.dailyResultsArray}get items(){return i.Fg.map((e=>({label:this.$i18n.$t.extension.expeditions.expeditionEventSizes[e],getValue:t=>t.reduce(((t,s)=>t+s.eventSizes.resourceCount[this.resource][e]),0)})))}get footerItems(){return[{label:this.$i18n.$t.extension.common.sum,getValue:e=>e.reduce(((e,t)=>e+t.findings.resourceCount[this.resource]),0)}]}};(0,o.gn)([(0,r.fI)({required:!0,type:String,validator:e=>m.P.includes(e)})],p.prototype,"resource",void 0),p=(0,o.gn)([(0,r.wA)({components:{RangedStatsTable:l.Z,DateRangeSettings:c.Z}})],p);const g=p,f=g;var h=s(1001),b=(0,h.Z)(f,a,n,!1,null,"0e1fa9d1",null);const y=b.exports},4310:(e,t,s)=>{s.d(t,{Z:()=>b});var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("grid-table",{staticClass:"ranged-stats-table",attrs:{columns:e.columns,items:e.rows,"footer-items":e.footerRows,"cell-class-provider":function(t){return e.getCellClass(t)}},scopedSlots:e._u([e._l(e.columns,(function(t,a){return{key:"cell-"+t.key,fn:function(n){var o=n.value,r=n.item;return[s("span",{key:t.key,staticClass:"ranged-stats-table-cell"},["label"==t.key?[null!=t.slotName&&null!=e.$scopedSlots[t.slotName]?e._t(t.slotName,null,{value:o}):s("span",{key:a,domProps:{textContent:e._s(o)}})]:"subLabel"==t.key?e._l(r.items,(function(a,n){return s("span",{key:n,class:a.labelClass},[null!=t.slotName&&null!=e.$scopedSlots[t.slotName]?e._t(t.slotName,null,{value:a.label}):s("span",{domProps:{textContent:e._s(a.label)}})],2)})):e._l(r.items||[r],(function(a,n){return s("span",{key:n,class:[e.getCellClass(a[t.key]),a.class]},[null!=t.formatter?s("span",{domProps:{textContent:e._s(t.formatter(a[t.key]))}}):s("span",{domProps:{textContent:e._s(a[t.key])}})])}))],2)]}}})),e._l(e.$scopedSlots,(function(t,s){return{key:s,fn:function(t){return[e._t(s,null,null,t)]}}}))],null,!0)})},n=[],o=s(655),r=s(4028),l=s(9858),i=s(6538),u=s(4749),c=s.n(u),d=s(917);let m=class extends r.w3{showPercentage;showAverage;items;footerItems;numberFormatOptions;averageNumberFormatOptions;dataItems;get hasGroupedItems(){return this.items.some((e=>"items"in e))}get dateRanges(){return d.V.settings.dateRanges}get dataItemsByRange(){const e=this.dataItems,t=this.dateRanges.map((()=>[]));return e.forEach((e=>{this.dateRanges.forEach(((s,a)=>{(0,l.m)(e.date,s)&&t[a].push(e)}))})),t}get firstDay(){return this.dataItemsByRange.reduce(((e,t)=>Math.min(e,Math.min(...t.map((e=>e.date))))),Date.now())}get columns(){const e=[{key:"label",label:"",slotName:"label"}];return this.hasGroupedItems&&e.push({key:"subLabel",label:"",slotName:"subLabel"}),e.push(...this.dateRanges.map(((e,t)=>({key:t,label:e.label??this.$i18n.$t.extension.settings.dateRanges.since(this.$i18n.$d(this.firstDay,"date")),formatter:e=>this.$i18n.$n(e,this.numberFormatOptions)})))),this.showAverage&&e.push({key:"average",label:this.$i18n.$t.extension.common.averagePerDay,formatter:e=>this.$i18n.$n(e,this.averageNumberFormatOptions??this.numberFormatOptions)}),this.showPercentage&&e.push({key:"percentage",label:"%",formatter:e=>""!=e?this.$i18n.$n(e,{minimumFractionDigits:3,maximumFractionDigits:3}):e}),e}get rows(){const e=this.dataItemsByRange,t=this.dateRanges.findIndex((e=>"all"==e.type))??(0,i.A)("failed to find range 'all'"),s=e[t].map((e=>c()(e.date).getTime())),a=new Set(s).size,n=Math.max(1,this.items.map((s=>"getValue"in s?s.getValue(e[t]):s.items.reduce(((s,a)=>s+a.getValue(e[t])),0))).reduce(((e,t)=>e+t),0));return this.items.map((s=>this.mapItemToRow(s,e,t,a,n)))}mapItemToRow(e,t,s,a,n){if("getValue"in e){const o={label:e.label,class:e.class,labelClass:e.labelClass,...this.dateRanges.map(((s,a)=>e.getValue(t[a])))},r=o[s];return this.showAverage&&(o.average=r/Math.max(1,a)),this.showPercentage&&(o.percentage=100*r/n),o}return{label:e.label,items:e.items.map((e=>this.mapItemToRow(e,t,s,a,n)))}}get footerRows(){const e=this.dataItemsByRange,t=this.dateRanges.findIndex((e=>"all"==e.type))??(0,i.A)("failed to find range 'all'"),s=e[t].map((e=>c()(e.date).getTime())),a=new Set(s).size;return this.footerItems.map((s=>{const n={label:s.label,...this.dateRanges.map(((t,a)=>"getValue"in s?s.getValue(e[a]):s.items.reduce(((t,s)=>t+s.getValue(e[a])),0))),percentage:""};if(this.showAverage){const e=n[t];n.average=e/Math.max(1,a)}return n}))}getCellClass(e){return 0==e?"fade-value":""}};(0,o.gn)([(0,r.fI)({required:!1,type:Boolean})],m.prototype,"showPercentage",void 0),(0,o.gn)([(0,r.fI)({required:!1,type:Boolean})],m.prototype,"showAverage",void 0),(0,o.gn)([(0,r.fI)({required:!0,type:Array})],m.prototype,"items",void 0),(0,o.gn)([(0,r.fI)({required:!1,type:Array,default:()=>[]})],m.prototype,"footerItems",void 0),(0,o.gn)([(0,r.fI)({required:!1,type:Object,default:void 0})],m.prototype,"numberFormatOptions",void 0),(0,o.gn)([(0,r.fI)({required:!1,type:Object,default:void 0})],m.prototype,"averageNumberFormatOptions",void 0),(0,o.gn)([(0,r.fI)({required:!0,type:Array})],m.prototype,"dataItems",void 0),m=(0,o.gn)([(0,r.wA)({})],m);const p=m,g=p;var f=s(1001),h=(0,f.Z)(g,a,n,!1,null,"1526beca",null);const b=h.exports},9159:(e,t,s)=>{s.r(t),s.d(t,{default:()=>p});var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("size-table",{attrs:{resource:"crystal"}})},n=[],o=s(655),r=s(4028),l=s(1184);let i=class extends r.w3{};i=(0,o.gn)([(0,r.wA)({components:{SizeTable:l.Z}})],i);const u=i,c=u;var d=s(1001),m=(0,d.Z)(c,a,n,!1,null,null,null);const p=m.exports},8734:(e,t)=>{function s(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=s,e.exports=t.default},4749:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r;var a=o(s(1171)),n=o(s(8734));function o(e){return e&&e.__esModule?e:{default:e}}function r(e){(0,n.default)(1,arguments);var t=(0,a.default)(e);return t.setHours(0,0,0,0),t}e.exports=t.default},1171:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=o;var a=n(s(8734));function n(e){return e&&e.__esModule?e:{default:e}}function o(e){(0,a.default)(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"===typeof e||"[object Number]"===t?new Date(e):("string"!==typeof e&&"[object String]"!==t||"undefined"===typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}e.exports=t.default}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,