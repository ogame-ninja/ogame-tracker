"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[7018],{147:(e,n,t)=>{t.d(n,{g1:()=>o,g4:()=>r,_Z:()=>l});const i=.001;function o(e){const n=r(e);return n*i}function r(e){for(let n=0;;n++){const t=l(n+1);if(t>e)return n}}function l(e){return 900*e*(e+1)/2}},7018:(e,n,t)=>{t.r(n),t.d(n,{default:()=>x});var i=function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("grid-table",{attrs:{columns:e.columns,items:e.items,sticky:"100%"},scopedSlots:e._u([{key:"cell-lifeform",fn:function(n){var i=n.value;return[t("span",{staticClass:"mr-2",domProps:{textContent:e._s(e.$i18n.$t.ogame.lifeforms[i])}}),t("o-lifeform",{attrs:{lifeform:i}})]}},{key:"cell-discoverDate",fn:function(n){var i=n.value,o=n.item;return["humans"==o.lifeform?t("i",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.lifeforms.alwaysAvailable)}}):null!=i?t("span",{domProps:{textContent:e._s(e.$i18n.$d(i,"datetime"))}}):o.totalExperience>0?t("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.lifeforms.discoveryDateUnknown)}}):t("i",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.lifeforms.notDiscoveredYet)}})]}},{key:"cell-level",fn:function(n){var i=n.item;return[t("span",{domProps:{textContent:e._s(i.level+" ("+e.$i18n.$n(i.levelExperience)+"/"+e.$i18n.$n(i.neededLevelExperience)+" XP)")}})]}},{key:"cell-totalExperience",fn:function(n){var i=n.value;return[t("span",{domProps:{textContent:e._s(e.$i18n.$n(i))}})]}},{key:"cell-findingCount",fn:function(n){var i=n.value;return[t("span",{domProps:{textContent:e._s(e.$i18n.$n(i))}})]}}])})},o=[],r=t(655),l=t(147),s=t(3418),f=t(8395),a=t(6903),c=t(4028);let m=class extends c.w3{get columns(){return[{key:"lifeform",label:this.$i18n.$t.extension.empire.lifeforms.lifeform},{key:"discoverDate",label:this.$i18n.$t.extension.empire.lifeforms.discoveredOn},{key:"level",label:this.$i18n.$t.extension.empire.lifeforms.level},{key:"totalExperience",label:this.$i18n.$t.extension.empire.lifeforms.totalLifeformExperience},{key:"findingCount",label:this.$i18n.$t.extension.empire.lifeforms.numberOfLifeformDiscoveries}]}get items(){const e=f.p.lifeformExperience;return s.p3.map((n=>{const t=e[n],i=(0,l.g4)(t),o=a.F.lifeforms;return{lifeform:n,level:i,levelExperience:Math.max(0,t-(0,l._Z)(i)),neededLevelExperience:(0,l._Z)(i+1)-(0,l._Z)(i),totalExperience:t,findingCount:o[n].discoveriesCount,discoverDate:o[n].discoveredDate}}))}};m=(0,r.gn)([(0,c.wA)({})],m);const u=m,p=u;var d=t(1001),v=(0,d.Z)(p,i,o,!1,null,null,null);const x=v.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,