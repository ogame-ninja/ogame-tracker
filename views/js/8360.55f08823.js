"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[8360],{4698:(e,t,s)=>{s.d(t,{O:()=>f});var o=s(1821),n=s(3347),r=s(1745),a=s(776),i=s(5424),l=s(612),d=s(6105),c=s(3418),u=s(7331),g=s(2057);function f(e){const t=o.j.locale;o.j.locale=e;const s={dateRanges:[{label:o.j.$t.extension.settings.dateRanges.defaultNames.today,type:"day",skip:0,take:1},{label:o.j.$t.extension.settings.dateRanges.defaultNames.yesterday,type:"day",skip:1,take:1},{label:o.j.$t.extension.settings.dateRanges.defaultNames.currentWeek,type:"week",skip:0,take:1},{label:o.j.$t.extension.settings.dateRanges.defaultNames.lastWeek,type:"week",skip:1,take:1},{label:o.j.$t.extension.settings.dateRanges.defaultNames.currentMonth,type:"month",skip:0,take:1},{type:"all"}],lostShipsResourceUnits:{factor:1,deuteriumFactor:1},resourceBalance:{showDetailedBreakdown:!1,includeExpeditionFoundShipsResourceUnits:!0,includeLostShipsResourceUnits:!0,includeLostLootResources:!0},conversionRates:{mode:"msu",msu:{crystal:1.5,deuterium:3},dsu:{metal:3,crystal:2}},showCellsWithConvertedResourceUnits:!0,expeditionFoundShipsResourceUnits:{factor:1,deuteriumFactor:1},extensionLanguage:e,defaultRoutes:{},colors:{combatResults:{[n.a.won]:"#00c23a",[n.a.draw]:"#aaaaaa",[n.a.lost]:"#d11515"},resources:{[u._.metal]:"#ff5e00",[u._.crystal]:"#1a9fff",[u._.deuterium]:"#1bee8f",totalConverted:"#999999"},ships:{[g.g.lightFighter]:"#2472f3",[g.g.heavyFighter]:"#c72525",[g.g.cruiser]:"#fbbc04",[g.g.battleship]:"#9ecc00",[g.g.bomber]:"#00a95e",[g.g.battlecruiser]:"#075263",[g.g.destroyer]:"#de5200",[g.g.reaper]:"#16a8d4",[g.g.pathfinder]:"#ad135e",[g.g.smallCargo]:"#888888",[g.g.largeCargo]:"#ffffff",[g.g.espionageProbe]:"#4b17da",[g.g.deathStar]:"#262530",[g.g.recycler]:"#8aff8e",[g.g.colonyShip]:"#d7b58e",[g.g.crawler]:"#94b4ff",[g.g.solarSatellite]:"#dd94ff"},expeditions:{events:{[i.r.nothing]:"#404040",[i.r.resources]:"#2242e2",[i.r.fleet]:"#dddddd",[i.r.delay]:"#ff5e00",[i.r.early]:"#00c23a",[i.r.darkMatter]:"#33bcdb",[i.r.pirates]:"#ffb592",[i.r.aliens]:"#92ffdc",[i.r.combat]:"#ffb592",[i.r.item]:"#6f23e1",[i.r.trader]:"#fbbc04",[i.r.lostFleet]:"#d11515"},sizes:{[a.Mm.small]:"#404040",[a.Mm.medium]:"#3e85fe",[a.Mm.large]:"#e01a76","fled-death-star":"#dddddd"},depletion:{[r.q.none]:"#00c23a",[r.q.low]:"#fbbc04",[r.q.medium]:"#ff5e00",[r.q.high]:"#c72525",unknown:"#404040"}},lifeformDiscoveries:{events:{[d.y.nothing]:"#404040",[d.y.lostShip]:"#d11515",[d.y.knownLifeformFound]:"#33bcdb",[d.y.newLifeformFound]:"#00c23a",[d.y.artifacts]:"#fbbc04"},artifactFindingSizes:{[l.k.small]:"#404040",[l.k.medium]:"#3e85fe",[l.k.large]:"#e01a76",[l.k.storageFull]:"#d11515"}},lifeforms:{[c.e5.humans]:"#7ec000",[c.e5.rocktal]:"#df6642",[c.e5.mechas]:"#4b91e7",[c.e5.kaelesh]:"#9863e9"}},universeHistory:{updateTimes:[72e6],enabled:!1,trackHistory:!1},combatTracking:{ignoreEspionageFights:!0},messageTracking:{showSimplifiedResults:!0},debrisFields:{separateExpeditionDebrisFields:!1}};return o.j.locale=t,s}},1799:(e,t,s)=>{s.d(t,{Z:()=>g});var o=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("button",{staticClass:"reset-button",attrs:{title:e.$i18n.$t.extension.settings.reset},on:{click:function(t){return e.$emit("reset")}}},[s("span",{staticClass:"mdi mdi-refresh"})])},n=[],r=s(655),a=s(4028);let i=class extends a.w3{};i=(0,r.gn)([(0,a.wA)({})],i);const l=i,d=l;var c=s(1001),u=(0,c.Z)(d,o,n,!1,null,"6ca60f84",null);const g=u.exports},7174:(e,t,s)=>{s.d(t,{Z:()=>f});var o=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("grid-table",{staticClass:"color-settings",staticStyle:{width:"max-content"},attrs:{columns:e.columns,items:e.items},scopedSlots:e._u([{key:"header-key",fn:function(t){var o=t.label;return[s("span",{domProps:{textContent:e._s(o)}}),s("reset-button",{on:{reset:function(t){return e.$emit("reset")}}})]}},{key:"cell-key",fn:function(t){var o=t.value;return[s("div",{staticClass:"color-input",on:{click:function(t){e.$refs["colorInput-"+o].click()}}},[s("input",{ref:"colorInput-"+o,attrs:{type:"color"},domProps:{value:e.colors[o]},on:{change:function(t){return e.updateColor(o,t)}}}),s("div",{staticClass:"color-indicator",style:{background:e.colors[o]}}),s("span",{domProps:{textContent:e._s(e.labels[o])}})])]}}])})},n=[],r=s(655),a=s(4028),i=s(1799);let l=class extends a.w3{header;colors;labels;keys;get columns(){return[{key:"key",label:this.header,headerClass:"color-settings-header"}]}get items(){const e=this.keys??Object.keys(this.colors);return e.map((e=>({key:e})))}updateColor(e,t){t.target instanceof HTMLInputElement&&(this.colors={...this.colors,[e]:t.target.value})}};(0,r.gn)([(0,a.fI)({required:!0,type:String})],l.prototype,"header",void 0),(0,r.gn)([(0,a.Ey)({required:!0,type:Object})],l.prototype,"colors",void 0),(0,r.gn)([(0,a.fI)({required:!0,type:Object})],l.prototype,"labels",void 0),(0,r.gn)([(0,a.fI)({required:!1,type:Array,default:()=>null})],l.prototype,"keys",void 0),l=(0,r.gn)([(0,a.wA)({components:{ResetButton:i.Z}})],l);const d=l,c=d;var u=s(1001),g=(0,u.Z)(c,o,n,!1,null,"2f24a3e0",null);const f=g.exports},403:(e,t,s)=>{s.d(t,{Z:()=>h});var o=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("color-settings-table",{attrs:{header:e.$i18n.$t.extension.settings.colors.expeditionEventSizes,labels:e.labels,keys:e.keys,value:e.colors},on:{input:function(t){return e.updateColors(t)},reset:function(t){return e.resetColors()}}})},n=[],r=s(655),a=s(9167),i=s(776),l=s(4698),d=s(917),c=s(4028),u=s(7174);let g=class extends c.w3{get labels(){return this.$i18n.$t.extension.expeditions.expeditionEventSizes}keys=[i.Mm.small,i.Mm.medium,i.Mm.large,"fled-death-star"];get colors(){return d.V.settings.colors.expeditions.sizes}updateColors(e){d.V.updateSettings({...d.V.settings,colors:{...d.V.settings.colors,expeditions:{...d.V.settings.colors.expeditions,sizes:e}}})}resetColors(){const e=(0,l.O)(a.I.de).colors.expeditions.sizes;this.updateColors(e)}};g=(0,r.gn)([(0,c.wA)({components:{ColorSettingsTable:u.Z}})],g);const f=g,p=f;var m=s(1001),y=(0,m.Z)(p,o,n,!1,null,null,null);const h=y.exports},3421:(e,t,s)=>{s.d(t,{Z:()=>y});var o=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("scrollable-chart",{attrs:{datasets:e.computedDatasets,"x-label-formatter":function(t){return e.formatDate(t)},"no-legend":e.noLegend,"hide-tooltip-footer":e.noTooltipFooter},scopedSlots:e._u([{key:"tooltip-footer",fn:function(t){var s=t.datasets;return[e._t("tooltip-footer",null,{datasets:s})]}}],null,!0)})},n=[],r=s(655),a=s(9119),i=s(5347),l=s(9383),d=s(7349),c=s(4028);let u=class extends c.w3{datasets;noLegend;noTooltipFooter;firstDay;itemsPerDay;minDays;get minDay(){const e="number"===typeof this.firstDay?this.firstDay:this.firstDay.getTime(),t=(0,a.Z)(Date.now());return Math.min(e,(0,i.Z)(t,this.minDays-1).getTime())}get computedDatasets(){const e=this.minDay,t=(0,l.Z)((0,a.Z)(Date.now()),e),s=Array.from({length:t+1}).map(((t,s)=>(0,d.Z)(e,s).getTime())),o=s.map((e=>this.itemsPerDay[e]??null)),n=o.filter((e=>null!=e)).length;return this.datasets.map((e=>{const t=o.map((t=>null==t?0:e.getValue(t))),s=t.reduce(((e,t)=>e+t),0);return{key:e.key,color:e.color,label:e.label,values:t.map(((e,t)=>({x:t,y:e}))),filled:e.filled??!0,stack:e.stack??!0,hidePoints:!1,average:1==e.showAverage?s/Math.max(1,n):void 0}}))}formatDate(e){const t=(0,d.Z)(this.minDay,e);return this.$i18n.$d(t,"date")}};(0,r.gn)([(0,c.fI)({required:!0,type:Array})],u.prototype,"datasets",void 0),(0,r.gn)([(0,c.fI)({required:!1,type:Boolean})],u.prototype,"noLegend",void 0),(0,r.gn)([(0,c.fI)({required:!1,type:Boolean})],u.prototype,"noTooltipFooter",void 0),(0,r.gn)([(0,c.fI)({required:!0,type:[Number,Date]})],u.prototype,"firstDay",void 0),(0,r.gn)([(0,c.fI)({required:!0,type:Object})],u.prototype,"itemsPerDay",void 0),(0,r.gn)([(0,c.fI)({required:!1,type:Number,default:()=>30})],u.prototype,"minDays",void 0),u=(0,r.gn)([(0,c.wA)({})],u);const g=u,f=g;var p=s(1001),m=(0,p.Z)(f,o,n,!1,null,null,null);const y=m.exports},8360:(e,t,s)=>{s.r(t),s.d(t,{default:()=>h});var o=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"chart-container"},[s("stats-chart",{attrs:{firstDay:e.firstDay,itemsPerDay:e.exposPerDay,datasets:e.datasets,stacked:"","show-average":""},scopedSlots:e._u([{key:"tooltip-footer",fn:function(t){var o=t.datasets;return[e.getVisibleDatasets(o).length<o.length?[s("div",{staticClass:"footer-item"},[s("div",{staticClass:"number",domProps:{textContent:e._s(e.$i18n.$n(e.getSum(e.getVisibleDatasets(o))))}}),s("div",{domProps:{textContent:e._s(e.$i18n.$t.extension.expeditions.finds)}})]),s("hr")]:e._e(),s("div",{staticClass:"footer-item"},[s("div",{staticClass:"number",domProps:{textContent:e._s(e.$i18n.$n(e.getSum(o)))}}),s("div",{domProps:{textContent:e._s(e.$i18n.$t.extension.expeditions.finds+" ("+e.$i18n.$t.extension.common.total+")")}})])]}}])}),s("floating-menu",{attrs:{left:""},scopedSlots:e._u([{key:"activator",fn:function(){return[s("button",{on:{click:function(t){e.showSettings=!e.showSettings}}},[s("span",{staticClass:"mdi mdi-cog"})])]},proxy:!0}]),model:{value:e.showSettings,callback:function(t){e.showSettings=t},expression:"showSettings"}},[s("expedition-event-size-color-settings")],1)],1)},n=[],r=s(655),a=s(4028),i=s(3421),l=s(776),d=s(7090),c=s(917),u=s(403);let g=class extends a.w3{showSettings=!1;get colors(){return c.V.settings.colors.expeditions.sizes}get firstDay(){return d.m.firstDay}get exposPerDay(){return d.m.dailyResults}get datasets(){return l.Fg.map((e=>({key:e,label:this.$i18n.$t.extension.expeditions.expeditionEventSizes[e],color:this.colors[e],filled:!0,getValue:t=>t.eventSizes.darkMatter[e],showAverage:!0})))}getVisibleDatasets(e){return e.filter((e=>e.visible))}getSum(e){return e.reduce(((e,t)=>e+t.value),0)}};g=(0,r.gn)([(0,a.wA)({components:{StatsChart:i.Z,ExpeditionEventSizeColorSettings:u.Z}})],g);const f=g,p=f;var m=s(1001),y=(0,m.Z)(p,o,n,!1,null,"15d6e64b",null);const h=y.exports},7349:(e,t,s)=>{s.d(t,{Z:()=>a});var o=s(3946),n=s(9013),r=s(3882);function a(e,t){(0,r.Z)(2,arguments);var s=(0,n.Z)(e),a=(0,o.Z)(t);return isNaN(a)?new Date(NaN):a?(s.setDate(s.getDate()+a),s):s}},9383:(e,t,s)=>{s.d(t,{Z:()=>c});var o=s(9013),n=s(4262),r=s(9119),a=s(3882),i=864e5;function l(e,t){(0,a.Z)(2,arguments);var s=(0,r.Z)(e),o=(0,r.Z)(t),l=s.getTime()-(0,n.Z)(s),d=o.getTime()-(0,n.Z)(o);return Math.round((l-d)/i)}function d(e,t){var s=e.getFullYear()-t.getFullYear()||e.getMonth()-t.getMonth()||e.getDate()-t.getDate()||e.getHours()-t.getHours()||e.getMinutes()-t.getMinutes()||e.getSeconds()-t.getSeconds()||e.getMilliseconds()-t.getMilliseconds();return s<0?-1:s>0?1:s}function c(e,t){(0,a.Z)(2,arguments);var s=(0,o.Z)(e),n=(0,o.Z)(t),r=d(s,n),i=Math.abs(l(s,n));s.setDate(s.getDate()-r*i);var c=Number(d(s,n)===-r),u=r*(i-c);return 0===u?0:u}},5347:(e,t,s)=>{s.d(t,{Z:()=>a});var o=s(3946),n=s(7349),r=s(3882);function a(e,t){(0,r.Z)(2,arguments);var s=(0,o.Z)(t);return(0,n.Z)(e,-s)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,