"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[450],{5209:(e,t,n)=>{n.d(t,{Z:()=>v});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"fake-table expedition-ship-resource-units-factor-settings"},[n("div",{staticClass:"fake-table-header"},[n("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.expeditions.resourceUnitFactorsOfShipFoundOnExpeditions)}})]),n("div",{staticClass:"fake-table-body"},[n("span",{staticClass:"inputs"},[n("span",[n("span",{staticClass:"two-resources"},[n("o-resource",{attrs:{resource:"metal"}}),n("o-resource",{attrs:{resource:"crystal"}})],1),n("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.factor,expression:"factor",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"0",max:"1",step:"0.01"},domProps:{value:e.factor},on:{change:[function(t){e.factor=e._n(t.target.value)},function(t){return e.updateFactors()}],focus:function(t){e.isFocused=!0},blur:[function(t){return e.onBlur()},function(t){return e.$forceUpdate()}]}})]),n("span",[n("o-resource",{attrs:{resource:"deuterium"}}),n("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.deuteriumFactor,expression:"deuteriumFactor",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"0",max:"1",step:"0.01"},domProps:{value:e.deuteriumFactor},on:{change:[function(t){e.deuteriumFactor=e._n(t.target.value)},function(t){return e.updateFactors()}],focus:function(t){e.isFocused=!0},blur:[function(t){return e.onBlur()},function(t){return e.$forceUpdate()}]}})],1)])])])},s=[],a=n(655),o=n(4028),u=n(917);let i=class extends o.w3{factor=1;deuteriumFactor=1;isFocused=!1;get factors(){return u.V.settings.expeditionFoundShipsResourceUnits}onFactorsChanged(){const{factor:e,deuteriumFactor:t}=this.factors;this.isFocused||(this.factor=e,this.deuteriumFactor=t)}updateFactors(){u.V.updateSettings({...u.V.settings,expeditionFoundShipsResourceUnits:{factor:this.factor,deuteriumFactor:this.deuteriumFactor}})}onBlur(){this.isFocused=!1,this.onFactorsChanged()}};(0,a.gn)([(0,o.RL)("factors",{immediate:!0})],i.prototype,"onFactorsChanged",null),i=(0,a.gn)([(0,o.wA)({})],i);const c=i,l=c;var d=n(1001),m=(0,d.Z)(l,r,s,!1,null,"160db831",null);const v=m.exports},450:(e,t,n)=>{n.r(t),n.d(t,{default:()=>g});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("div",{staticClass:"fake-table"},[n("div",{staticClass:"fake-table-header"},[n("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.linkAccounts.header(e.currentAccountString))}})]),n("div",{staticClass:"fake-table-body"},[n("span",{domProps:{innerHTML:e._s(e.$i18n.$t.extension.settings.linkAccounts.descriptionHtml(e.currentAccountString))}}),n("hr"),n("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.linkAccounts.linkedAccounts)}}),e._l(e.linkedAccounts,(function(t){return n("div",{key:t.key,staticClass:"linked-account"},[n("span",{staticClass:"mdi mdi-delete delete",on:{click:function(n){return e.unlinkAccount(t)}}}),n("span",{domProps:{textContent:e._s(t.name+" ("+t.universeName+")")}})])})),n("hr"),n("div",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.linkAccounts.linkAccount)}}),n("select",{directives:[{name:"model",rawName:"v-model",value:e.selectedValue,expression:"selectedValue"}],on:{change:[function(t){var n=Array.prototype.filter.call(t.target.options,(function(e){return e.selected})).map((function(e){var t="_value"in e?e._value:e.value;return t}));e.selectedValue=t.target.multiple?n:n[0]},function(t){return e.onAccountSelected(t.target.value)}]}},e._l(e.linkableAccounts,(function(t){return n("optgroup",{key:t.serverName,attrs:{label:t.serverName}},e._l(t.accounts,(function(t){return n("option",{key:t.key,domProps:{value:t.key,textContent:e._s(t.name)}})})),0)})),0)],2)])])},s=[],a=n(655),o=n(4028),u=n(5209),i=n(9828),c=n(8717);let l=class extends o.w3{selectedValue=null;get currentAccountString(){const e=i.z.currentAccount,t=i.z.currentServer;return`${e.name} - ${t.language.toUpperCase()} ${t.name}`}get linkedAccounts(){const e=i.z.currentAccount.linkedAccounts??[];return e.map((e=>i.z.accounts.find((t=>t.serverId==e.serverId&&t.serverLanguage==e.serverLanguage&&t.id==e.id)))).filter((e=>null!=e)).map((e=>this.mapAccount(e)))}mapAccount(e){const t=i.z.servers.find((t=>t.id==e.serverId&&t.language==e.serverLanguage));let n=`${e.serverLanguage.toUpperCase()} ${e.serverId}`;if(null!=t){let e=t.name,r=`${t.language.toUpperCase()} `;n=e.startsWith(r)?e:r+e}return{key:`${e.serverLanguage}-${e.serverId}-${e.id}`,id:e.id,serverId:e.serverId,serverLanguage:e.serverLanguage,name:e.name,universeName:n}}get linkableAccounts(){const e=this.linkedAccounts,t=(e,t)=>e.serverId==t.serverId&&e.serverLanguage==t.serverLanguage&&e.id==t.id,n=i.z.accounts.filter((e=>!t(e,{id:c.l.playerId,serverId:c.l.serverId,serverLanguage:c.l.language}))).filter((n=>!e.some((e=>t(e,n))))).map((e=>this.mapAccount(e))).sort(((e,t)=>{const n=e.serverLanguage.localeCompare(t.serverLanguage);if(0!=n)return n;if(null!=e.universeName&&null==t.universeName)return-1;if(null==e.universeName&&null!=t.universeName)return 1;const r=e.serverId-t.serverId;return 0!=r?r:null!=e.name&&null==t.name?-1:null==e.name&&null!=t.name?1:e.id-t.id})),r={};n.forEach((e=>{const t=`${e.serverLanguage}-${e.serverId}`;(r[t]??=[]).push(e)}));const s=Object.keys(r).sort().map((e=>({serverName:r[e][0].universeName,accounts:r[e]})));return s}async onAccountSelected(e){const t=this.linkableAccounts.flatMap((e=>e.accounts)),n=t.find((t=>t.key==e));if(null==n)return await this.$nextTick(),void(this.selectedValue=null);await i.z.linkAccount({serverId:n.serverId,serverLanguage:n.serverLanguage,id:n.id}),window.location.reload()}async unlinkAccount(e){await i.z.unlinkAccount({serverId:e.serverId,serverLanguage:e.serverLanguage,id:e.id}),window.location.reload()}};l=(0,a.gn)([(0,o.wA)({components:{ExpeditionShipResourceUnitsFactorSettings:u.Z}})],l);const d=l,m=d;var v=n(1001),p=(0,v.Z)(m,r,s,!1,null,"4230e8fe",null);const g=p.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,