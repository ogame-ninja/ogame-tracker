"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[7674],{4698:(e,t,s)=>{s.d(t,{O:()=>p});var a=s(1821),r=s(3347),o=s(1745),n=s(776),i=s(5424),l=s(612),g=s(6105),c=s(3418),u=s(7331),d=s(2057);function p(e){const t=a.j.locale;a.j.locale=e;const s={dateRanges:[{label:a.j.$t.extension.settings.dateRanges.defaultNames.today,type:"day",skip:0,take:1},{label:a.j.$t.extension.settings.dateRanges.defaultNames.yesterday,type:"day",skip:1,take:1},{label:a.j.$t.extension.settings.dateRanges.defaultNames.currentWeek,type:"week",skip:0,take:1},{label:a.j.$t.extension.settings.dateRanges.defaultNames.lastWeek,type:"week",skip:1,take:1},{label:a.j.$t.extension.settings.dateRanges.defaultNames.currentMonth,type:"month",skip:0,take:1},{type:"all"}],lostShipsResourceUnits:{factor:1,deuteriumFactor:1},resourceBalance:{showDetailedBreakdown:!1,includeExpeditionFoundShipsResourceUnits:!0,includeLostShipsResourceUnits:!0,includeLostLootResources:!0},conversionRates:{mode:"msu",msu:{crystal:1.5,deuterium:3},dsu:{metal:3,crystal:2}},showCellsWithConvertedResourceUnits:!0,expeditionFoundShipsResourceUnits:{factor:1,deuteriumFactor:1},extensionLanguage:e,defaultRoutes:{},colors:{combatResults:{[r.a.won]:"#00c23a",[r.a.draw]:"#aaaaaa",[r.a.lost]:"#d11515"},resources:{[u._.metal]:"#ff5e00",[u._.crystal]:"#1a9fff",[u._.deuterium]:"#1bee8f",totalConverted:"#999999"},ships:{[d.g.lightFighter]:"#2472f3",[d.g.heavyFighter]:"#c72525",[d.g.cruiser]:"#fbbc04",[d.g.battleship]:"#9ecc00",[d.g.bomber]:"#00a95e",[d.g.battlecruiser]:"#075263",[d.g.destroyer]:"#de5200",[d.g.reaper]:"#16a8d4",[d.g.pathfinder]:"#ad135e",[d.g.smallCargo]:"#888888",[d.g.largeCargo]:"#ffffff",[d.g.espionageProbe]:"#4b17da",[d.g.deathStar]:"#262530",[d.g.recycler]:"#8aff8e",[d.g.colonyShip]:"#d7b58e",[d.g.crawler]:"#94b4ff",[d.g.solarSatellite]:"#dd94ff"},expeditions:{events:{[i.r.nothing]:"#404040",[i.r.resources]:"#2242e2",[i.r.fleet]:"#dddddd",[i.r.delay]:"#ff5e00",[i.r.early]:"#00c23a",[i.r.darkMatter]:"#33bcdb",[i.r.pirates]:"#ffb592",[i.r.aliens]:"#92ffdc",[i.r.combat]:"#ffb592",[i.r.item]:"#6f23e1",[i.r.trader]:"#fbbc04",[i.r.lostFleet]:"#d11515"},sizes:{[n.Mm.small]:"#404040",[n.Mm.medium]:"#3e85fe",[n.Mm.large]:"#e01a76","fled-death-star":"#dddddd"},depletion:{[o.q.none]:"#00c23a",[o.q.low]:"#fbbc04",[o.q.medium]:"#ff5e00",[o.q.high]:"#c72525",unknown:"#404040"}},lifeformDiscoveries:{events:{[g.y.nothing]:"#404040",[g.y.lostShip]:"#d11515",[g.y.knownLifeformFound]:"#33bcdb",[g.y.newLifeformFound]:"#00c23a",[g.y.artifacts]:"#fbbc04"},artifactFindingSizes:{[l.k.small]:"#404040",[l.k.medium]:"#3e85fe",[l.k.large]:"#e01a76",[l.k.storageFull]:"#d11515"}},lifeforms:{[c.e5.humans]:"#7ec000",[c.e5.rocktal]:"#df6642",[c.e5.mechas]:"#4b91e7",[c.e5.kaelesh]:"#9863e9"}},universeHistory:{updateTimes:[72e6],enabled:!1,trackHistory:!1},combatTracking:{ignoreEspionageFights:!0},messageTracking:{showSimplifiedResults:!0},debrisFields:{separateExpeditionDebrisFields:!1}};return a.j.locale=t,s}},9027:(e,t,s)=>{s.d(t,{Z:()=>p});var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.combats.ignoreEspionageCombats.title)}})]),s("div",{staticClass:"fake-table-body"},[s("checkbox",{attrs:{value:e.ignoreEspionageCombats,label:e.$i18n.$t.extension.settings.combats.ignoreEspionageCombats.label},on:{input:function(t){return e.setIgnoreEspionageCombats(t)}}})],1)])},r=[],o=s(655),n=s(4028),i=s(917);let l=class extends n.w3{get ignoreEspionageCombats(){return i.V.settings.combatTracking.ignoreEspionageFights}setIgnoreEspionageCombats(e){i.V.updateSettings({...i.V.settings,combatTracking:{ignoreEspionageFights:e}})}};l=(0,o.gn)([(0,n.wA)({})],l);const g=l,c=g;var u=s(1001),d=(0,u.Z)(c,a,r,!1,null,"3b222f56",null);const p=d.exports},1799:(e,t,s)=>{s.d(t,{Z:()=>d});var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("button",{staticClass:"reset-button",attrs:{title:e.$i18n.$t.extension.settings.reset},on:{click:function(t){return e.$emit("reset")}}},[s("span",{staticClass:"mdi mdi-refresh"})])},r=[],o=s(655),n=s(4028);let i=class extends n.w3{};i=(0,o.gn)([(0,n.wA)({})],i);const l=i,g=l;var c=s(1001),u=(0,c.Z)(g,a,r,!1,null,"6ca60f84",null);const d=u.exports},7174:(e,t,s)=>{s.d(t,{Z:()=>p});var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("grid-table",{staticClass:"color-settings",staticStyle:{width:"max-content"},attrs:{columns:e.columns,items:e.items},scopedSlots:e._u([{key:"header-key",fn:function(t){var a=t.label;return[s("span",{domProps:{textContent:e._s(a)}}),s("reset-button",{on:{reset:function(t){return e.$emit("reset")}}})]}},{key:"cell-key",fn:function(t){var a=t.value;return[s("div",{staticClass:"color-input",on:{click:function(t){e.$refs["colorInput-"+a].click()}}},[s("input",{ref:"colorInput-"+a,attrs:{type:"color"},domProps:{value:e.colors[a]},on:{change:function(t){return e.updateColor(a,t)}}}),s("div",{staticClass:"color-indicator",style:{background:e.colors[a]}}),s("span",{domProps:{textContent:e._s(e.labels[a])}})])]}}])})},r=[],o=s(655),n=s(4028),i=s(1799);let l=class extends n.w3{header;colors;labels;keys;get columns(){return[{key:"key",label:this.header,headerClass:"color-settings-header"}]}get items(){const e=this.keys??Object.keys(this.colors);return e.map((e=>({key:e})))}updateColor(e,t){t.target instanceof HTMLInputElement&&(this.colors={...this.colors,[e]:t.target.value})}};(0,o.gn)([(0,n.fI)({required:!0,type:String})],l.prototype,"header",void 0),(0,o.gn)([(0,n.Ey)({required:!0,type:Object})],l.prototype,"colors",void 0),(0,o.gn)([(0,n.fI)({required:!0,type:Object})],l.prototype,"labels",void 0),(0,o.gn)([(0,n.fI)({required:!1,type:Array,default:()=>null})],l.prototype,"keys",void 0),l=(0,o.gn)([(0,n.wA)({components:{ResetButton:i.Z}})],l);const g=l,c=g;var u=s(1001),d=(0,u.Z)(c,a,r,!1,null,"2f24a3e0",null);const p=d.exports},8802:(e,t,s)=>{s.d(t,{Z:()=>b});var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("color-settings-table",{attrs:{header:e.$i18n.$t.extension.settings.colors.ships,labels:e.labels,keys:e.keys,value:e.colors},on:{input:function(t){return e.updateColors(t)},reset:function(t){return e.resetColors()}}})},r=[],o=s(655),n=s(9167),i=s(2057),l=s(4698),g=s(917),c=s(4028),u=s(7174);let d=class extends c.w3{get labels(){return{[i.g.lightFighter]:this.$i18n.$t.ogame.ships[i.g.lightFighter],[i.g.heavyFighter]:this.$i18n.$t.ogame.ships[i.g.heavyFighter],[i.g.cruiser]:this.$i18n.$t.ogame.ships[i.g.cruiser],[i.g.battleship]:this.$i18n.$t.ogame.ships[i.g.battleship],[i.g.bomber]:this.$i18n.$t.ogame.ships[i.g.bomber],[i.g.battlecruiser]:this.$i18n.$t.ogame.ships[i.g.battlecruiser],[i.g.destroyer]:this.$i18n.$t.ogame.ships[i.g.destroyer],[i.g.reaper]:this.$i18n.$t.ogame.ships[i.g.reaper],[i.g.pathfinder]:this.$i18n.$t.ogame.ships[i.g.pathfinder],[i.g.smallCargo]:this.$i18n.$t.ogame.ships[i.g.smallCargo],[i.g.largeCargo]:this.$i18n.$t.ogame.ships[i.g.largeCargo],[i.g.espionageProbe]:this.$i18n.$t.ogame.ships[i.g.espionageProbe],[i.g.deathStar]:this.$i18n.$t.ogame.ships[i.g.deathStar],[i.g.recycler]:this.$i18n.$t.ogame.ships[i.g.recycler],[i.g.colonyShip]:this.$i18n.$t.ogame.ships[i.g.colonyShip],[i.g.crawler]:this.$i18n.$t.ogame.ships[i.g.crawler],[i.g.solarSatellite]:this.$i18n.$t.ogame.ships[i.g.solarSatellite]}}keys=[i.g.lightFighter,i.g.heavyFighter,i.g.cruiser,i.g.battleship,i.g.bomber,i.g.battlecruiser,i.g.destroyer,i.g.reaper,i.g.pathfinder,i.g.smallCargo,i.g.largeCargo,i.g.espionageProbe,i.g.deathStar,i.g.recycler,i.g.colonyShip,i.g.crawler,i.g.solarSatellite];get colors(){return g.V.settings.colors.ships}updateColors(e){g.V.updateSettings({...g.V.settings,colors:{...g.V.settings.colors,ships:e}})}resetColors(){const e=(0,l.O)(n.I.de).colors.ships;this.updateColors(e)}};d=(0,o.gn)([(0,c.wA)({components:{ColorSettingsTable:u.Z}})],d);const p=d,h=p;var m=s(1001),f=(0,m.Z)(h,a,r,!1,null,null,null);const b=f.exports},3421:(e,t,s)=>{s.d(t,{Z:()=>f});var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("scrollable-chart",{attrs:{datasets:e.computedDatasets,"x-label-formatter":function(t){return e.formatDate(t)},"no-legend":e.noLegend,"hide-tooltip-footer":e.noTooltipFooter},scopedSlots:e._u([{key:"tooltip-footer",fn:function(t){var s=t.datasets;return[e._t("tooltip-footer",null,{datasets:s})]}}],null,!0)})},r=[],o=s(655),n=s(9119),i=s(5347),l=s(9383),g=s(7349),c=s(4028);let u=class extends c.w3{datasets;noLegend;noTooltipFooter;firstDay;itemsPerDay;minDays;get minDay(){const e="number"===typeof this.firstDay?this.firstDay:this.firstDay.getTime(),t=(0,n.Z)(Date.now());return Math.min(e,(0,i.Z)(t,this.minDays-1).getTime())}get computedDatasets(){const e=this.minDay,t=(0,l.Z)((0,n.Z)(Date.now()),e),s=Array.from({length:t+1}).map(((t,s)=>(0,g.Z)(e,s).getTime())),a=s.map((e=>this.itemsPerDay[e]??null)),r=a.filter((e=>null!=e)).length;return this.datasets.map((e=>{const t=a.map((t=>null==t?0:e.getValue(t))),s=t.reduce(((e,t)=>e+t),0);return{key:e.key,color:e.color,label:e.label,values:t.map(((e,t)=>({x:t,y:e}))),filled:e.filled??!0,stack:e.stack??!0,hidePoints:!1,average:1==e.showAverage?s/Math.max(1,r):void 0}}))}formatDate(e){const t=(0,g.Z)(this.minDay,e);return this.$i18n.$d(t,"date")}};(0,o.gn)([(0,c.fI)({required:!0,type:Array})],u.prototype,"datasets",void 0),(0,o.gn)([(0,c.fI)({required:!1,type:Boolean})],u.prototype,"noLegend",void 0),(0,o.gn)([(0,c.fI)({required:!1,type:Boolean})],u.prototype,"noTooltipFooter",void 0),(0,o.gn)([(0,c.fI)({required:!0,type:[Number,Date]})],u.prototype,"firstDay",void 0),(0,o.gn)([(0,c.fI)({required:!0,type:Object})],u.prototype,"itemsPerDay",void 0),(0,o.gn)([(0,c.fI)({required:!1,type:Number,default:()=>30})],u.prototype,"minDays",void 0),u=(0,o.gn)([(0,c.wA)({})],u);const d=u,p=d;var h=s(1001),m=(0,h.Z)(p,a,r,!1,null,null,null);const f=m.exports},7674:(e,t,s)=>{s.r(t),s.d(t,{default:()=>y});var a=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"chart-container"},[s("stats-chart",{attrs:{datasets:e.datasets,firstDay:e.firstDay,itemsPerDay:e.reportsPerDay},scopedSlots:e._u([{key:"tooltip-footer",fn:function(t){var a=t.datasets;return[e.getVisibleDatasets(a).length<a.length?[s("div",{staticClass:"footer-item"},[s("div",{staticClass:"number",domProps:{textContent:e._s(e.$i18n.$n(e.getSum(e.getVisibleDatasets(a))))}}),s("div",{domProps:{textContent:e._s(e.$i18n.$t.extension.combats.shipsLost)}})]),s("hr")]:e._e(),s("div",{staticClass:"footer-item"},[s("div",{staticClass:"number",domProps:{textContent:e._s(e.$i18n.$n(e.getSum(a)))}}),s("div",{domProps:{textContent:e._s(e.$i18n.$t.extension.combats.shipsLost+" ("+e.$i18n.$t.extension.common.total+")")}})])]}}])}),s("floating-menu",{attrs:{left:""},scopedSlots:e._u([{key:"activator",fn:function(){return[s("button",{on:{click:function(t){e.showSettings=!e.showSettings}}},[s("span",{staticClass:"mdi mdi-cog"})])]},proxy:!0}]),model:{value:e.showSettings,callback:function(t){e.showSettings=t},expression:"showSettings"}},[s("combat-tracking-ignore-espionage-combats-settings"),s("hr"),s("ship-color-settings")],1)],1)},r=[],o=s(655),n=s(4028),i=s(3421),l=s(4992),g=s(248),c=s(917),u=s(8802),d=s(9027);let p=class extends n.w3{showSettings=!1;get colors(){return c.V.settings.colors.ships}filterCombat(e){return e.isExpedition}get firstDay(){return l.t.firstDay}get reportsPerDay(){return l.t.dailyResults}get datasets(){return g.GI.map((e=>({key:e.toString(),label:this.$i18n.$t.ogame.ships[e],color:this.colors[e],filled:!0,getValue:t=>t.lostShips.onExpeditions.ships[e]})))}getVisibleDatasets(e){return e.filter((e=>e.visible))}getSum(e){return e.reduce(((e,t)=>e+t.value),0)}};p=(0,o.gn)([(0,n.wA)({components:{StatsChart:i.Z,ShipColorSettings:u.Z,CombatTrackingIgnoreEspionageCombatsSettings:d.Z}})],p);const h=p,m=h;var f=s(1001),b=(0,f.Z)(m,a,r,!1,null,"0f960e2a",null);const y=b.exports},7349:(e,t,s)=>{s.d(t,{Z:()=>n});var a=s(3946),r=s(9013),o=s(3882);function n(e,t){(0,o.Z)(2,arguments);var s=(0,r.Z)(e),n=(0,a.Z)(t);return isNaN(n)?new Date(NaN):n?(s.setDate(s.getDate()+n),s):s}},9383:(e,t,s)=>{s.d(t,{Z:()=>c});var a=s(9013),r=s(4262),o=s(9119),n=s(3882),i=864e5;function l(e,t){(0,n.Z)(2,arguments);var s=(0,o.Z)(e),a=(0,o.Z)(t),l=s.getTime()-(0,r.Z)(s),g=a.getTime()-(0,r.Z)(a);return Math.round((l-g)/i)}function g(e,t){var s=e.getFullYear()-t.getFullYear()||e.getMonth()-t.getMonth()||e.getDate()-t.getDate()||e.getHours()-t.getHours()||e.getMinutes()-t.getMinutes()||e.getSeconds()-t.getSeconds()||e.getMilliseconds()-t.getMilliseconds();return s<0?-1:s>0?1:s}function c(e,t){(0,n.Z)(2,arguments);var s=(0,a.Z)(e),r=(0,a.Z)(t),o=g(s,r),i=Math.abs(l(s,r));s.setDate(s.getDate()-o*i);var c=Number(g(s,r)===-o),u=o*(i-c);return 0===u?0:u}},5347:(e,t,s)=>{s.d(t,{Z:()=>n});var a=s(3946),r=s(7349),o=s(3882);function n(e,t){(0,o.Z)(2,arguments);var s=(0,a.Z)(t);return(0,r.Z)(e,-s)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,