"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[9438],{6223:(e,t,n)=>{n.r(t),n.d(t,{default:()=>Z});var a=function(){var e=this,t=e.$createElement,n=e._self._c||t;return e.historyTrackingEnabled?n("div",{staticClass:"history"},[e.dataModuleLoading?n("loading-spinner"):[n("grid-table",{staticClass:"alliance-selection-table",attrs:{columns:e.tableColumns,items:e.tableItems},scopedSlots:e._u([{key:"cell-alliance",fn:function(t){var a=t.value;return[null==a?[n("input",{directives:[{name:"model",rawName:"v-model",value:e.selectedAllianceName,expression:"selectedAllianceName"}],staticStyle:{width:"100%"},attrs:{type:"text",placeholder:e.$i18n.$t.extension.universeHistory.allianceSelection.search,list:"alliance-list"},domProps:{value:e.selectedAllianceName},on:{change:function(t){return e.onAllianceSelected(t.target.value)},input:function(t){t.target.composing||(e.selectedAllianceName=t.target.value)}}}),n("datalist",{attrs:{id:"alliance-list"}},e._l(e.allianceNames,(function(t,a){return n("option",{key:a},[e._v(" "+e._s(t)+" ")])})),0)]:n("div",{staticClass:"list-item"},[n("span",{domProps:{textContent:e._s("["+a.tag+"] "+a.name)}})])]}}],null,!1,3867459686)}),n("tabs",{attrs:{tabs:e.tabs},scopedSlots:e._u([{key:"tab-content-tag",fn:function(){return[null!=e.allianceId?n("alliance-tag-history-table",{attrs:{allianceId:e.allianceId}}):e._e()]},proxy:!0},{key:"tab-content-name",fn:function(){return[null!=e.allianceId?n("alliance-name-history-table",{attrs:{allianceId:e.allianceId}}):e._e()]},proxy:!0},{key:"tab-content-members",fn:function(){return[null!=e.allianceId?n("alliance-member-history-table",{attrs:{allianceId:e.allianceId}}):e._e()]},proxy:!0}],null,!1,3248882413)})]],2):n("universe-history-tracking-settings")},l=[],i=n(655),s=n(7545),r=n(917),o=n(5038),c=n(4028),u=n(8364),d=n(5606),y=function(){var e=this,t=e.$createElement,n=e._self._c||t;return e.loading?n("loading-spinner"):n("grid-table",{attrs:{columns:e.columns,items:e.items,inline:""},scopedSlots:e._u([{key:"cell-start",fn:function(t){var a=t.value;return[n("span",null!=a?{domProps:{textContent:e._s(e.$i18n.$d(a,"date"))}}:{domProps:{textContent:e._s("?")}})]}},{key:"cell--",fn:function(){return[e._v("-")]},proxy:!0},{key:"cell-end",fn:function(t){var a=t.value;return[n("span",null!=a?{domProps:{textContent:e._s(e.$i18n.$d(a,"date"))}}:{domProps:{textContent:e._s(e.$i18n.$t.extension.universeHistory.today)}})]}}])})},m=[];let g=class extends c.w3{allianceId;history=[];loading=!0;async onAllianceIdChanged(){this.history=await o.z.getAllianceTagHistory(this.allianceId),this.loading=!1}get columns(){return[{key:"tag",label:this.$i18n.$t.extension.universeHistory.tag},{key:"start",label:this.$i18n.$t.extension.universeHistory.from},{key:"-"},{key:"end",label:this.$i18n.$t.extension.universeHistory.until}]}get items(){return this.history.map(((e,t,n)=>{const a=0==t?null:e.date,l=n[t+1]?.date??null;return{tag:e.tag,start:a,end:l}})).reverse()}};(0,i.gn)([(0,c.fI)({required:!0,type:Number})],g.prototype,"allianceId",void 0),(0,i.gn)([(0,c.RL)("allianceId",{immediate:!0})],g.prototype,"onAllianceIdChanged",null),g=(0,i.gn)([(0,c.wA)({})],g);const h=g,p=h;var v=n(1001),b=(0,v.Z)(p,y,m,!1,null,null,null);const f=b.exports;var $=function(){var e=this,t=e.$createElement,n=e._self._c||t;return e.loading?n("loading-spinner"):n("grid-table",{attrs:{columns:e.columns,items:e.items,inline:""},scopedSlots:e._u([{key:"cell-start",fn:function(t){var a=t.value;return[n("span",null!=a?{domProps:{textContent:e._s(e.$i18n.$d(a,"date"))}}:{domProps:{textContent:e._s("?")}})]}},{key:"cell--",fn:function(){return[e._v("-")]},proxy:!0},{key:"cell-end",fn:function(t){var a=t.value;return[n("span",null!=a?{domProps:{textContent:e._s(e.$i18n.$d(a,"date"))}}:{domProps:{textContent:e._s(e.$i18n.$t.extension.universeHistory.today)}})]}}])})},x=[];let k=class extends c.w3{allianceId;history=[];loading=!0;async onAllianceIdChanged(){this.history=await o.z.getAllianceNameHistory(this.allianceId),this.loading=!1}get columns(){return[{key:"name",label:this.$i18n.$t.extension.universeHistory.name},{key:"start",label:this.$i18n.$t.extension.universeHistory.from},{key:"-"},{key:"end",label:this.$i18n.$t.extension.universeHistory.until}]}get items(){return this.history.map(((e,t,n)=>{const a=0==t?null:e.date,l=n[t+1]?.date??null;return{name:e.name,start:a,end:l}})).reverse()}};(0,i.gn)([(0,c.fI)({required:!0,type:Number})],k.prototype,"allianceId",void 0),(0,i.gn)([(0,c.RL)("allianceId",{immediate:!0})],k.prototype,"onAllianceIdChanged",null),k=(0,i.gn)([(0,c.wA)({})],k);const I=k,_=I;var C=(0,v.Z)(_,$,x,!1,null,null,null);const A=C.exports;var H=function(){var e=this,t=e.$createElement,n=e._self._c||t;return e.loading?n("loading-spinner"):n("grid-table",{attrs:{columns:e.columns,items:e.items,inline:""},scopedSlots:e._u([{key:"cell-members",fn:function(t){var a=t.value;return[n("div",{staticClass:"member-list"},e._l(a,(function(t,a){return n("span",{key:a,domProps:{textContent:e._s(t)}})})),0)]}},{key:"cell-start",fn:function(t){var a=t.value;return[n("span",null!=a?{domProps:{textContent:e._s(e.$i18n.$d(a,"date"))}}:{domProps:{textContent:e._s("?")}})]}},{key:"cell--",fn:function(){return[e._v("-")]},proxy:!0},{key:"cell-end",fn:function(t){var a=t.value;return[n("span",null!=a?{domProps:{textContent:e._s(e.$i18n.$d(a,"date"))}}:{domProps:{textContent:e._s(e.$i18n.$t.extension.universeHistory.today)}})]}}])})},w=[];let S=class extends c.w3{allianceId;history=[];playerNames={};loading=!0;async onAllianceIdChanged(){this.history=await o.z.getAllianceMemberHistory(this.allianceId),this.playerNames=await o.z.getLatestPlayerNamesById(),this.loading=!1}get columns(){return[{key:"members",label:this.$i18n.$t.extension.universeHistory.members},{key:"start",label:this.$i18n.$t.extension.universeHistory.from},{key:"-"},{key:"end",label:this.$i18n.$t.extension.universeHistory.until}]}get items(){return this.history.map(((e,t,n)=>{const a=0==t?null:e.date,l=n[t+1]?.date??null;return{members:e.members.map((e=>this.playerNames[e])).sort(((e,t)=>e.toLowerCase().localeCompare(t.toLowerCase()))),start:a,end:l}})).reverse()}};(0,i.gn)([(0,c.fI)({required:!0,type:Number})],S.prototype,"allianceId",void 0),(0,i.gn)([(0,c.RL)("allianceId",{immediate:!0})],S.prototype,"onAllianceIdChanged",null),S=(0,i.gn)([(0,c.wA)({})],S);const N=S,T=N;var P=(0,v.Z)(T,H,w,!1,null,"e8050418",null);const L=P.exports;var z=n(5593);let D=class extends c.w3{get historyTrackingEnabled(){return r.V.settings.universeHistory.trackHistory}get tableColumns(){return[{key:"alliance",label:this.$i18n.$t.extension.universeHistory.allianceSelection.header,headerClass:"alliance-selection-table-cell",class:"alliance-selection-table-cell"}]}get tableItems(){return[{alliance:null},{alliance:this.selectedAlliance}].filter(((e,t,n)=>n.findIndex((t=>t.alliance==e.alliance))==t))}get tabs(){return[{key:"tag",label:this.$i18n.$t.extension.universeHistory.historyTabs.tags},{key:"name",label:this.$i18n.$t.extension.universeHistory.historyTabs.names},{key:"members",label:this.$i18n.$t.extension.universeHistory.historyTabs.members}]}get selectedAlliance(){return o.z.alliances.find((e=>e.id==this.allianceId))??null}get allianceId(){try{const e=(0,s.Y)(this.$route.query.alliance??"",10);return e}catch{return null}}dataModuleLoading=!0;selectedAllianceName="";async mounted(){await z.D.ready,await this.redirectToDefault(),this.dataModuleLoading=!0,await o.z.ready,this.dataModuleLoading=!1}async redirectToDefault(){if(null!=this.allianceId)return;const e=z.D.settings.universeHistory.alliances.history;null!=e&&await this.updateAllianceIdRoute(e)}updateSettings(e){const t=z.D.settings;z.D.updateSettings({...t,universeHistory:{...t.universeHistory,alliances:{...t.universeHistory.alliances,history:e}}})}async updateAllianceIdRoute(e){this.updateSettings(e),await this.$router.replace({query:{alliance:e.toString()}}),await this.redirectToDefault()}get allianceNames(){return o.z.alliances.map((e=>this.getAllyString(e))).sort()}getAllyString(e){return`[${e.tag}] ${e.name}`}async onAllianceSelected(e){const t=o.z.alliances.find((t=>this.getAllyString(t).toLowerCase()==e.toLowerCase()));null!=t&&(await this.$nextTick(),this.selectedAllianceName="",await this.updateAllianceIdRoute(t.id))}};D=(0,i.gn)([(0,c.wA)({components:{UniverseHistoryTrackingSettings:u.Z,StatusHistoryChart:d.Z,AllianceTagHistoryTable:f,AllianceNameHistoryTable:A,AllianceMemberHistoryTable:L}})],D);const E=D,M=E;var R=(0,v.Z)(M,a,l,!1,null,"5f2d6f89",null);const Z=R.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,