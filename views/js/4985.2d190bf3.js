"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[4985],{147:(o,e,t)=>{t.d(e,{g1:()=>s,g4:()=>n,_Z:()=>i});const r=.001;function s(o){const e=n(o);return e*r}function n(o){for(let e=0;;e++){const t=i(e+1);if(t>o)return e}}function i(o){return 900*o*(o+1)/2}},5546:(o,e,t)=>{function r(o,e){return 1+o+e}t.d(e,{q:()=>r})},2343:(o,e,t)=>{function r(o){return o.admiral&&o.commander&&o.engineer&&o.geologist&&o.technocrat}t.d(e,{J:()=>r})},4163:(o,e,t)=>{t.d(e,{F:()=>s});var r=t(602);function s(o,e,t,s){return o!=r.D0.collector?1:1*(1+s)+e*(1+t)}},9448:(o,e,t)=>{function r(o,e){switch(o){case 1:return e.pos1;case 2:return e.pos2;case 3:return e.pos3}return e.default}function s(o){const e=r(o.planetPosition,o.serverPositionBoost),t=15*o.serverEconomySpeed*(1+e);return Math.trunc(t)}t.d(e,{q:()=>s})},9452:(o,e,t)=>{t.d(e,{p:()=>n,E:()=>i});var r=t(1639),s=t(7331);function n(o,e){const t=Date.now(),n={[s._.metal]:[r.t.metalBooster_bronze_1day,r.t.metalBooster_bronze_7days],[s._.crystal]:[r.t.crystalBooster_bronze_1day,r.t.crystalBooster_bronze_7days],[s._.deuterium]:[r.t.deuteriumBooster_bronze_1day,r.t.deuteriumBooster_bronze_7days]}[o],a={[s._.metal]:[r.t.metalBooster_silver_7days,r.t.metalBooster_silver_30days,r.t.metalBooster_silver_90days],[s._.crystal]:[r.t.crystalBooster_silver_7days,r.t.crystalBooster_silver_30days,r.t.crystalBooster_silver_90days],[s._.deuterium]:[r.t.deuteriumBooster_silver_7days,r.t.deuteriumBooster_silver_30days,r.t.deuteriumBooster_silver_90days]}[o],l={[s._.metal]:[r.t.metalBooster_gold_7days,r.t.metalBooster_gold_30days,r.t.metalBooster_gold_90days],[s._.crystal]:[r.t.crystalBooster_gold_7days,r.t.crystalBooster_gold_30days,r.t.crystalBooster_gold_90days],[s._.deuterium]:[r.t.deuteriumBooster_gold_7days,r.t.deuteriumBooster_gold_30days,r.t.deuteriumBooster_gold_90days]}[o],c={[s._.metal]:[r.t.metalBooster_platinum_7days,r.t.metalBooster_platinum_30days,r.t.metalBooster_platinum_90days],[s._.crystal]:[r.t.crystalBooster_platinum_7days,r.t.crystalBooster_platinum_30days,r.t.crystalBooster_platinum_90days],[s._.deuterium]:[r.t.deuteriumBooster_platinum_7days,r.t.deuteriumBooster_platinum_30days,r.t.deuteriumBooster_platinum_90days]}[o];return n.some((o=>i(t,e[o])))?.1:a.some((o=>i(t,e[o])))?.2:l.some((o=>i(t,e[o])))?.3:c.some((o=>i(t,e[o])))?.4:0}function i(o,e){return null!=e&&("permanent"==e||e>o)}},7270:(o,e,t)=>{function r(o,e,t,r,s,n,i){const a=s&&r?1+n*(1+i):1,l=8,c=Math.floor((o+e+t)*l*a);return c}t.d(e,{Y:()=>r})},5148:(o,e,t)=>{function r(o){switch(o){case 8:return.35;case 7:case 9:return.23;case 6:case 10:return.17}return 0}function s(o){const e=r(o.planetPosition),t=30*o.serverEconomySpeed*(1+e);return Math.trunc(t)}t.d(e,{s:()=>s})},7053:(o,e,t)=>{t.d(e,{_:()=>y});var r=t(7545),s=t(9867),n=t(602),i=t(5546),a=t(7331);const l=.1,c=.02,u={[a._.metal]:.01,[a._.crystal]:.0066,[a._.deuterium]:.0033},d=.05;var m=t(4163),g=t(7270);function f(o){const e=(0,g.Y)(o.levelMetalMine,o.levelCrystalMine,o.levelDeuteriumSynthesizer,o.playerClass==n.D0.collector,o.hasGeologist,o.serverSettings.geologistActiveCrawlerFactorBonus,o.lifeformTechnologies.collectorClassBonus),t=Math.min(e,o.availableCrawlers),r=(0,m.F)(o.playerClass,o.serverSettings.collectorCrawlerProductionFactorBonus,o.lifeformTechnologies.collectorClassBonus,o.lifeformTechnologies.crawlerProductionBonus),s=o.serverSettings.crawlerProductionFactorPerUnit*t*r*o.crawlerProductionSetting/100;return Math.min(s,o.serverSettings.crawlerMaxProductionFactor)}class y{#o;#e;plasmaTechnologyLevel;playerClass;allianceClass;geologist;commandStaff;planets;serverSettings;constructor(o,e,t,s,n,i,a,l){this.#e=o,this.plasmaTechnologyLevel=e,this.playerClass=t,this.allianceClass=s,this.geologist=n,this.commandStaff=i,this.serverSettings=a,this.planets=l,this.#o=Object.keys(l).map((o=>(0,r.Y)(o)))}getLifeformBonusFactors(){let o=0,e=0,t=0;return this.#o.forEach((r=>{const s=this.planets[r],n=(0,i.q)(s.lifeformTechnologyBoost,s.lifeformExperienceBoost);o+=s.collectorClassBonusFactor*n,e+=s.lifeformTechnologyBonusProductionFactor*n,t+=s.lifeformTechnologyCrawlerProductionBonusFactor*n})),{collectorClassBonusFactor:o,lifeformTechnologyProductionBonusFactor:e,lifeformTechnologyCrawlerProductionBonusFactor:t}}addPlanet(o,e){this.#o.push(o),this.planets[o]=e}getProductionBreakdown(o){return this.#t(o,this.getLifeformBonusFactors())}#t(o,e){const{collectorClassBonusFactor:t,lifeformTechnologyProductionBonusFactor:r,lifeformTechnologyCrawlerProductionBonusFactor:i}=e,a=this.planets[o].mineProduction,m=(this.playerClass==n.D0.collector?1:0)*this.serverSettings.collectorProductionFactor*(1+t),g=(this.allianceClass==s.Ck.trader?1:0)*d,y=this.geologist?l:0,p=this.commandStaff?c:0,B=this.planets[o].crawlers,h=f({hasGeologist:this.geologist,availableCrawlers:B.available,levelMetalMine:B.totalMineLevel,levelCrystalMine:0,levelDeuteriumSynthesizer:0,crawlerProductionSetting:B.percentage,lifeformTechnologies:{collectorClassBonus:t,crawlerProductionBonus:i},playerClass:this.playerClass,serverSettings:{collectorCrawlerProductionFactorBonus:this.serverSettings.collectorCrawlerProductionFactorBonus,crawlerMaxProductionFactor:this.serverSettings.crawlerMaxProductionFactor,crawlerProductionFactorPerUnit:this.serverSettings.crawlerProductionFactorPerUnit,geologistActiveCrawlerFactorBonus:this.serverSettings.geologistActiveCrawlerFactorBonus}}),_=this.planets[o].baseProduction,P=a*this.plasmaTechnologyLevel*u[this.#e],v=a*h,F=a*m,C=a*g,w=a*y,T=a*p,S=a*this.planets[o].itemBonusProductionFactor,b=a*this.planets[o].lifeformBuildingBonusProductionFactor,M=a*r,L=_+a+P+v+F+C+w+T+S+b+M;return{baseProduction:_,mineProduction:a,plasmaTechnologyProduction:P,crawlerProduction:v,playerClassProduction:F,allianceClassProduction:C,geologistProduction:w,commandStaffProduction:T,itemProduction:S,lifeformBuildingsProduction:b,lifeformTechnologiesProduction:M,total:L}}getTotal(o=!1){const e=this.getLifeformBonusFactors();return this.#o.reduce(((t,r)=>{const s=o?this.planets[r].fusionReactorConsumption:0;return t+this.#t(r,e).total-s}),0)}getAverage(o=!1){return this.getTotal(o)/this.#o.length}clone(){const o={};return this.#o.forEach((e=>{o[e]={...this.planets[e],crawlers:{...this.planets[e].crawlers}}})),new y(this.#e,this.plasmaTechnologyLevel,this.playerClass,this.allianceClass,this.geologist,this.commandStaff,this.serverSettings,o)}}},4985:(o,e,t)=>{t.d(e,{c:()=>C});var r=t(6864),s=t(6682),n=t(3987),i=t(7069),a=t(6532),l=t(147),c=t(3418),u=t(4846),d=t(2343),m=t(3738),g=t(9448),f=t(9452),y=t(5148),p=t(7053),B=t(7331),h=t(2057),_=t(9751),P=t(7076),v=t(1786);function F(o){return u.s5.filter((e=>o.activeLifeformTechnologies.includes(e.type))).reduce(((e,t)=>e+t.getCrawlerProductionBonus(o.lifeformTechnologies[t.type])),0)}function C(o,e){const t=Object.values(o.planets).filter((o=>!o.isMoon)),u=o.research[m.s.plasmaTechnology],C=P.s.serverSettings,w={collectorProductionFactor:C.playerClasses.collector.productionFactorBonus,geologistActiveCrawlerFactorBonus:C.playerClasses.collector.crawlers.geologistActiveCrawlerFactorBonus,collectorCrawlerProductionFactorBonus:C.playerClasses.collector.crawlers.productionFactorBonus,crawlerProductionFactorPerUnit:C.playerClasses.crawlers.productionBoostFactorPerUnit,crawlerMaxProductionFactor:C.playerClasses.crawlers.maxProductionFactor},T={metal:{},crystal:{},deuterium:{}},S=(0,_.a)(c.gN,(o=>o==c.e5.none?0:(0,l.g1)(e[o])));t.forEach((o=>{const e=o.buildings[r.A.metalMine],t=o.buildings[r.A.crystalMine],l=o.buildings[r.A.deuteriumSynthesizer],c=e+t+l,u=o.buildings[r.A.fusionReactor],d={available:o.ships[h.g.crawler],percentage:o.productionSettings[h.g.crawler],totalMineLevel:c},m={crawlers:d,lifeformExperienceBoost:S[o.activeLifeform],collectorClassBonusFactor:(0,v.I5)(o),lifeformBuildingBonusProductionFactor:(0,v.qH)(o),lifeformTechnologyBonusProductionFactor:(0,v.g5)(o),lifeformTechnologyCrawlerProductionBonusFactor:F(o),lifeformTechnologyBoost:(0,v.io)(o)},p={planet:{position:o.coordinates.position,temperature:o.maxTemperature},serverSettings:{economySpeed:C.speed.economy,crystalBoost:{default:C.resourceProduction.productionFactorBonus.crystal.default,pos1:C.resourceProduction.productionFactorBonus.crystal.pos1,pos2:C.resourceProduction.productionFactorBonus.crystal.pos2,pos3:C.resourceProduction.productionFactorBonus.crystal.pos3}},productionSettings:{metalMine:o.productionSettings[r.A.metalMine],crystalMine:o.productionSettings[r.A.crystalMine],deuteriumSynthesizer:o.productionSettings[r.A.deuteriumSynthesizer],fusionReactor:o.productionSettings[r.A.fusionReactor]}};T.metal[o.id]={baseProduction:(0,y.s)({planetPosition:o.coordinates.position,serverEconomySpeed:C.speed.economy}),mineProduction:a.H.getProduction(e,p),itemBonusProductionFactor:(0,f.p)(B._.metal,o.activeItems),...m,lifeformBuildingBonusProductionFactor:m.lifeformBuildingBonusProductionFactor.metal,lifeformTechnologyBonusProductionFactor:m.lifeformTechnologyBonusProductionFactor.metal,fusionReactorConsumption:0},T.crystal[o.id]={baseProduction:(0,g.q)({planetPosition:o.coordinates.position,serverEconomySpeed:C.speed.economy,serverPositionBoost:C.resourceProduction.productionFactorBonus.crystal}),mineProduction:s.g.getProduction(t,p),itemBonusProductionFactor:(0,f.p)(B._.crystal,o.activeItems),...m,lifeformBuildingBonusProductionFactor:m.lifeformBuildingBonusProductionFactor.crystal,lifeformTechnologyBonusProductionFactor:m.lifeformTechnologyBonusProductionFactor.crystal,fusionReactorConsumption:0},T.deuterium[o.id]={baseProduction:0,mineProduction:n.w.getProduction(l,p),itemBonusProductionFactor:(0,f.p)(B._.deuterium,o.activeItems),...m,lifeformBuildingBonusProductionFactor:m.lifeformBuildingBonusProductionFactor.deuterium,lifeformTechnologyBonusProductionFactor:m.lifeformTechnologyBonusProductionFactor.deuterium,fusionReactorConsumption:i.s.getConsumption(u,p).deuterium}}));const b={metal:new p._(B._.metal,u,o.playerClass,o.allianceClass,o.officers.geologist,(0,d.J)(o.officers),w,T.metal),crystal:new p._(B._.crystal,u,o.playerClass,o.allianceClass,o.officers.geologist,(0,d.J)(o.officers),w,T.crystal),deuterium:new p._(B._.deuterium,u,o.playerClass,o.allianceClass,o.officers.geologist,(0,d.J)(o.officers),w,T.deuterium),getTotal(o=!1){return{metal:this.metal.getTotal(o),crystal:this.crystal.getTotal(o),deuterium:this.deuterium.getTotal(o),energy:0}}};return b}},1786:(o,e,t)=>{t.d(e,{I5:()=>a,io:()=>l,qH:()=>c,g5:()=>u});var r=t(602),s=t(5128),n=t(6119),i=t(4846);function a(o){return i._i.filter((e=>o.activeLifeformTechnologies.includes(e.type))).reduce(((e,t)=>e+t.getClassBonus(r.D0.collector,o.lifeformTechnologies[t.type])),0)}function l(o){return n.cQ[o.activeLifeform].reduce(((e,t)=>e+t.getLifeformTechnologyBonus(o.lifeformBuildings[t.type])),0)}function c(o){return n.wJ[o.activeLifeform].reduce(((e,t)=>(0,s.aV)(e,t.getProductionBonus(o.lifeformBuildings[t.type]))),{metal:0,crystal:0,deuterium:0,energy:0})}function u(o){return i.rE.filter((e=>o.activeLifeformTechnologies.includes(e.type))).reduce(((e,t)=>(0,s.aV)(e,t.getProductionBonus(o.lifeformTechnologies[t.type]))),{metal:0,crystal:0,deuterium:0,energy:0})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,