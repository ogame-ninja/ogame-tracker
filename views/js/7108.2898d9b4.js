"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[7108],{8192:(e,t,n)=>{n.r(t),n.d(t,{default:()=>T});var s=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("lifeform-bonuses-breakdown",{attrs:{types:e.bonusTypes,technologies:e.techs,planets:e.planets,limits:e.limits}})},o=[],i=n(655),l=n(147),r=n(3418),u=n(4846),a=n(9751),p=n(8395),c=n(1786),m=n(4028),f=n(3894),g=n(2057),h=n(7848),b=n(7377);let d=class extends m.w3{bonusTypes=[{key:"fuelConsumption",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.fuelConsumption.header}];technologies=u.TF;get techs(){return this.technologies.map((e=>e.type))}get limits(){const e=(0,h.K)({type:b.f.FuelConsumptionReduction});return{fuelConsumption:t=>null!=e?Math.max(t,-e):t}}get planets(){return(0,a.r)(p.p.empire.planetOrder.map((e=>p.p.empire.planets[e])).filter((e=>!e.isMoon)),(e=>e.id),(e=>this.technologies.map((t=>{const n=this.getPlanetBonus(t,e);return{planet:e,technologyType:t.type,bonuses:(0,a.a)(["fuelConsumption"],(e=>({base:n.base,buildings:n.buildings,level:n.level,total:n.total})))}}))))}get experience(){return p.p.lifeformExperience}getPlanetBonus(e,t){const n={base:0,level:0,buildings:0,buildingsBoost:0,total:0};if(t.activeLifeform==r.e5.none||!t.activeLifeformTechnologies.includes(e.type))return n;const s=Math.min((0,c.io)(t),(0,h.K)({type:b.f.LifeformResearchBonusBoost})??Number.MAX_SAFE_INTEGER);n.buildingsBoost+=s;const o=-1*e.getFuelConsumptionReduction(g.g.lightFighter,t.lifeformTechnologies[e.type]),i=o*(0,l.g1)(this.experience[t.activeLifeform]),u=o*s,a=o+i+u;return n.base+=o,n.level+=i,n.buildings+=u,n.total+=a,n}};d=(0,i.gn)([(0,m.wA)({components:{LifeformBonusesBreakdown:f.Z}})],d);const y=d,v=y;var k=n(1001),B=(0,k.Z)(v,s,o,!1,null,null,null);const T=B.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,