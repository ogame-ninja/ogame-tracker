"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[8857],{5483:(e,t,n)=>{n.d(t,{c:()=>l});var r=n(9751),o=n(147),s=n(3418),i=n(6119);function l(e){const t=Object.values(e.planets).filter((e=>!e.isMoon)),n=(0,r.a)(t.map((e=>e.id)),0),l=(0,r.a)(s.p3,(t=>(0,o.g1)(e.lifeformExperience[t])));for(const r of t){if(r.activeLifeform==s.e5.none)continue;const e=l[r.activeLifeform],t=i.cQ[r.activeLifeform],o=t.reduce(((e,t)=>{const n=r.lifeformBuildings[t.type],o=t.getLifeformTechnologyBonus(n);return e+o}),0),u=e+o;n[r.id]=u}return n}},147:(e,t,n)=>{n.d(t,{g1:()=>o,g4:()=>s,_Z:()=>i});const r=.001;function o(e){const t=s(e);return t*r}function s(e){for(let t=0;;t++){const n=i(t+1);if(n>e)return t}}function i(e){return 900*e*(e+1)/2}},6402:(e,t,n)=>{n.r(t),n.d(t,{default:()=>v});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("lifeform-planet-bonuses-component",{attrs:{technologyBonuses:e.technologyBonuses,types:e.bonusTypes,buildings:e.buildings,planets:e.planets,limits:e.limits,"research-bonus-breakdown-route-name":"lifeforms/bonus-breakdown/resource-production"}})},o=[],s=n(655),i=n(4028),l=n(2593),u=n(7848),a=n(7377),c=n(2816),m=n(6119),f=n(9751),g=n(8395),p=n(4846),d=n(5483);let h=class extends i.w3{get bonusTypes(){return[{key:"metal",label:this.$i18n.$t.ogame.resources.metal},{key:"crystal",label:this.$i18n.$t.ogame.resources.crystal},{key:"deuterium",label:this.$i18n.$t.ogame.resources.deuterium},{key:"energy",label:this.$i18n.$t.ogame.resources.energy}]}buildings=m.yn.map((e=>e.type));get limits(){const e=(0,u.K)({type:a.f.ResourceProductionBonus});return{metal:t=>null!=e?Math.min(t,e):t,crystal:t=>null!=e?Math.min(t,e):t,deuterium:t=>null!=e?Math.min(t,e):t,energy:t=>null!=e?Math.min(t,e):t}}techs=p.rE;get technologyBonuses(){const e=["metal","crystal","deuterium","energy"],t=(0,f.a)(e,(()=>0)),n=(0,d.c)(g.p.empire);return this.empirePlanets.forEach((r=>{this.techs.filter((e=>r.activeLifeformTechnologies.includes(e.type))).forEach((o=>e.forEach((e=>{const s=o.getProductionBonus(r.lifeformTechnologies[o.type])[e],i=n[r.id];t[e]+=s*(1+i)}))))})),t}get empirePlanets(){return g.p.empire.planetOrder.map((e=>g.p.empire.planets[e])).filter((e=>!e.isMoon))}get planets(){return(0,f.r)(this.empirePlanets,(e=>e.id),(e=>{const t=c.IU[e.activeLifeform].filter((e=>this.buildings.includes(e))),n=(0,f.a)(["metal","crystal","deuterium","energy"],(n=>(0,f.a)(t,(t=>m.ry[t].getProductionBonus(e.lifeformBuildings[t])[n]))));return{planet:e,bonusByBuilding:n}}))}};h=(0,s.gn)([(0,i.wA)({components:{LifeformPlanetBonusesComponent:l.Z}})],h);const y=h,b=y;var k=n(1001),B=(0,k.Z)(b,r,o,!1,null,null,null);const v=B.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,