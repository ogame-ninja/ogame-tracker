"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[4197],{5621:(e,r,t)=>{var n;t.d(r,{s:()=>n}),function(e){e[e["planet"]=1]="planet",e[e["moon"]=3]="moon",e[e["debrisField"]=2]="debrisField"}(n||(n={}))},5483:(e,r,t)=>{t.d(r,{c:()=>l});var n=t(9751),i=t(147),o=t(3418),s=t(6119),a=t(9681);function l(e){const r=Object.values(e.planets).filter((e=>!e.isMoon)),t=(0,n.a)(r.map((e=>e.id)),(()=>(0,n.a)(a.Vs,0))),l=(0,n.a)(o.p3,(r=>(0,i.g1)(e.lifeformExperience[r])));for(const n of r){if(n.activeLifeform==o.e5.none)continue;const e=l[n.activeLifeform],r=s.cQ[n.activeLifeform];for(const i of a.Vs){const o=r.reduce(((e,r)=>{const t=n.lifeformBuildings[r.type],o=r.getLifeformTechnologyBonus(i,t);return e+o}),0),s=e+o;t[n.id][i]=s}}return t}},4197:(e,r,t)=>{t.r(r),t.d(r,{default:()=>M});var n=function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("grid-table",{attrs:{columns:e.columns,items:e.items,footerItems:e.footerItems},scopedSlots:e._u([{key:"header-metalMine",fn:function(){return[t("o-building",{attrs:{building:e.BuildingType.metalMine,size:"75px"}})]},proxy:!0},{key:"header-crystalMine",fn:function(){return[t("o-building",{attrs:{building:e.BuildingType.crystalMine,size:"75px"}})]},proxy:!0},{key:"header-deuteriumSynthesizer",fn:function(){return[t("o-building",{attrs:{building:e.BuildingType.deuteriumSynthesizer,size:"75px"}})]},proxy:!0},{key:"header-solarPlant",fn:function(){return[t("o-building",{attrs:{building:e.BuildingType.solarPlant,size:"75px"}})]},proxy:!0},{key:"header-fusionReactor",fn:function(){return[t("o-building",{attrs:{building:e.BuildingType.fusionReactor,size:"75px"}})]},proxy:!0},{key:"header-crawlers",fn:function(){return[t("o-ship",{attrs:{ship:e.ShipType.crawler,size:"75px"}})]},proxy:!0},{key:"cell-planet",fn:function(r){var n=r.value;return[t("div",{staticClass:"planet-info"},[t("span",{domProps:{textContent:e._s(n.name)}}),t("span",[e._v(" ["+e._s(n.coordinates.galaxy)+":"+e._s(n.coordinates.system)+":"+e._s(n.coordinates.position)+"] ")])])]}},{key:"cell-crawlers",fn:function(r){var n=r.value;return[t("div",{staticClass:"crawlers"},[t("span",[t("span",{class:{"crawlers-good":n.active==n.maximum,"crawlers-ok":n.active>0&&n.active<n.maximum,"crawlers-bad":0==n.active},domProps:{textContent:e._s(e.$i18n.$n(n.active))}}),t("span",[e._v("/"+e._s(e.$i18n.$n(n.maximum)))])]),t("span",{domProps:{textContent:e._s("("+e.$i18n.$n(n.available)+" "+e.$i18n.$t.extension.empire.production.mines.crawlersAvailable+")")}})])]}},{key:"footer-planet",fn:function(){return[e._v("⌀")]},proxy:!0},{key:"footer-metalMine",fn:function(r){var n=r.value;return[t("span",{domProps:{textContent:e._s(e.$i18n.$n(n,e.avgNumberFormat))}})]}},{key:"footer-crystalMine",fn:function(r){var n=r.value;return[t("span",{domProps:{textContent:e._s(e.$i18n.$n(n,e.avgNumberFormat))}})]}},{key:"footer-deuteriumSynthesizer",fn:function(r){var n=r.value;return[t("span",{domProps:{textContent:e._s(e.$i18n.$n(n,e.avgNumberFormat))}})]}},{key:"footer-solarPlant",fn:function(r){var n=r.value;return[t("span",{domProps:{textContent:e._s(e.$i18n.$n(n,e.avgNumberFormat))}})]}},{key:"footer-fusionReactor",fn:function(r){var n=r.value;return[t("span",{domProps:{textContent:e._s(e.$i18n.$n(n,e.avgNumberFormat))}})]}},{key:"footer-crawlers",fn:function(r){var n=r.value;return[t("div",{staticClass:"crawlers"},[t("span",{class:{"crawlers-good":n.active==n.maximum,"crawlers-ok":n.active>0&&n.active<n.maximum,"crawlers-bad":0==n.active},domProps:{textContent:e._s(e.$i18n.$n(n.active,e.avgNumberFormat))}}),t("span",{domProps:{textContent:e._s("("+e.$i18n.$n(n.available,e.avgNumberFormat)+" "+e.$i18n.$t.extension.empire.production.mines.crawlersAvailable+")")}}),t("span",{staticStyle:{"grid-column":"1 / span 2"},domProps:{textContent:e._s(e.$i18n.$t.extension.empire.production.mines.crawlersToReachLimit(e.$i18n.$n(e.effectiveCrawlerLimit)))}})])]}}])})},i=[],o=t(655),s=t(8395),a=t(4028),l=t(6864),c=t(2057),u=t(5621),m=t(7076),p=t(602),f=t(3418),d=t(4846),g=t(5483),y=t(9681);function v(e){const r=Object.values(e.planets).filter((e=>!e.isMoon)),t=(0,g.c)(e);let n=0;for(const i of r){if(i.activeLifeform==f.e5.none)continue;const e=1+t[i.id][y.Nw.rocktalCollectorEnhancement],r=d._i.filter((e=>i.activeLifeformTechnologies.includes(e.type))),o=r.reduce(((e,r)=>{const t=i.lifeformTechnologies[r.type],n=r.getClassBonus(p.D0.collector,t);return e+n}),0),s=o*e;n+=s}return n}var h=t(7270),w=t(4163);function x(e){const r=(0,w.F)(e.playerClass,e.serverSettings.collectorCrawlerProductionFactorBonus,e.lifeformTechnologies.collectorClassBonus,e.lifeformTechnologies.crawlerProductionBonus);return Math.ceil(e.serverSettings.crawlerMaxProductionFactor/(e.serverSettings.crawlerProductionFactorPerUnit*r*(1+e.lifeformTechnologies.crawlerProductionBonus)*(e.playerClass==p.D0.collector?1.5:1)))}var b=t(4985);let C=class extends a.w3{BuildingType=l.A;ShipType=c.g;avgNumberFormat={minimumFractionDigits:2,maximumFractionDigits:2};get serverSettings(){return m.s.serverSettings}get effectiveCrawlerLimit(){const e=(0,b.c)(this.player,s.p.lifeformExperience).metal.getLifeformBonusFactors().lifeformTechnologyCrawlerProductionBonusFactor;return x({playerClass:this.player.playerClass,lifeformTechnologies:{collectorClassBonus:this.collectorBonus,crawlerProductionBonus:e},serverSettings:{geologistActiveCrawlerFactorBonus:this.serverSettings.playerClasses.collector.crawlers.geologistActiveCrawlerFactorBonus,collectorCrawlerProductionFactorBonus:this.serverSettings.playerClasses.collector.crawlers.productionFactorBonus,crawlerProductionFactorPerUnit:this.serverSettings.playerClasses.crawlers.productionBoostFactorPerUnit,crawlerMaxProductionFactor:this.serverSettings.playerClasses.crawlers.maxProductionFactor}})}get columns(){return[{key:"planet",label:this.$i18n.$t.extension.empire.planet,size:"1fr"},{key:"metalMine",size:"1fr"},{key:"crystalMine",size:"1fr"},{key:"deuteriumSynthesizer",size:"1fr"},{key:"solarPlant",size:"1fr"},{key:"fusionReactor",size:"1fr"},{key:"crawlers"}]}get footerItems(){const e={planet:{name:"⌀",coordinates:{galaxy:0,system:0,position:0,type:u.s.planet}},metalMine:0,crystalMine:0,deuteriumSynthesizer:0,solarPlant:0,fusionReactor:0,crawlers:{active:0,maximum:0,available:0}},r=this.items,t=r.reduce(((e,t)=>(e.metalMine+=t.metalMine/r.length,e.crystalMine+=t.crystalMine/r.length,e.deuteriumSynthesizer+=t.deuteriumSynthesizer/r.length,e.solarPlant+=t.solarPlant/r.length,e.fusionReactor+=t.fusionReactor/r.length,e.crawlers.active+=t.crawlers.active/r.length,e.crawlers.maximum+=t.crawlers.maximum/r.length,e.crawlers.available+=t.crawlers.available/r.length,e)),e);return[t]}get collectorBonus(){return v(this.player)}get items(){return this.planets.map((e=>{const r=(0,h.Y)(e.buildings[l.A.metalMine],e.buildings[l.A.crystalMine],e.buildings[l.A.deuteriumSynthesizer],this.player.playerClass==p.D0.collector,this.player.officers.geologist,m.s.serverSettings.playerClasses.collector.crawlers.geologistActiveCrawlerFactorBonus,this.collectorBonus),t=e.ships[c.g.crawler];return{planet:e,metalMine:e.buildings[l.A.metalMine],crystalMine:e.buildings[l.A.crystalMine],deuteriumSynthesizer:e.buildings[l.A.deuteriumSynthesizer],solarPlant:e.buildings[l.A.solarPlant],fusionReactor:e.buildings[l.A.fusionReactor],crawlers:{available:t,maximum:r,active:Math.min(t,r)}}}))}get player(){return s.p.empire}get planets(){return Object.values(s.p.empire.planets).filter((e=>!e.isMoon)).sort(((e,r)=>s.p.empire.planetOrder.indexOf(e.id)-s.p.empire.planetOrder.indexOf(r.id)))}};C=(0,o.gn)([(0,a.wA)({})],C);const P=C,k=P;var $=t(1001),F=(0,$.Z)(k,n,i,!1,null,"4cb01624",null);const M=F.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cUJBQXFCVyxvQkFDMUJOLEVBQUtMLHFCQUFxQlksd0JBRzlCLE9BQU9DLEtBQUtDLEtBQ1JULEVBQUtJLGVBQWVNLDRCQUVoQlYsRUFBS0ksZUFBZU8sK0JBQ2xCVixHQUNDLEVBQUlELEVBQUtMLHFCQUFxQlkseUJBQzlCUCxFQUFLRyxhQUFlTixFQUFBLGFBQXdCLElBQU0sSyxjQytGakUseUJBQ0EsaUJBQ0EsYUFFQSxpQkFDQSx3QkFDQSx5QkFHQSxxQkFDQSwwQkFHQSw0QkFDQSwwREFDQSwwQkFDQSwrQ0FFQSxVQUNBLG9DQUNBLHNCQUNBLHdDQUNBLDBCQUVBLGdCQUNBLHlIQUNBLGlIQUNBLHVHQUNBLDZGQUtBLGNBQ0EsT0FDQSxDQUNBLGFBQ0EsNENBQ0EsWUFFQSw2QkFDQSwrQkFDQSx3Q0FDQSw4QkFDQSxpQ0FFQSxrQkFJQSxrQkFDQSxTQUNBLDZFQUNBLFlBQ0EsY0FDQSx1QkFDQSxhQUNBLGdCQUNBLFVBQ0EsU0FDQSxVQUNBLGNBSUEsYUFDQSxvQkFDQSxrQ0FDQSxzQ0FDQSx3REFDQSxvQ0FDQSwwQ0FFQSw4Q0FDQSxnREFDQSxvREFFQSxJQUNBLEdBRUEsVUFHQSxxQkFDQSxzQkFHQSxZQUNBLG9CQUNBLFNBQ0EsZ0JBQ0EsMkJBQ0EsNkJBQ0Esc0NBQ0Esd0NBQ0EsK0JBQ0Esc0ZBQ0EscUJBRUEsdUJBRUEsT0FDQSxTQUNBLHFDQUNBLHlDQUNBLDJEQUNBLHVDQUNBLDZDQUNBLFVBQ0EsWUFDQSxVQUNBLDBCQU1BLGFBQ0Esa0JBSUEsY0FDQSx5Q0FDQSx1QkFDQSwyRkE3SEEsYUFEQSxhQUNBLEcsVUM3SCtjLEksY0NRM2NlLEdBQVksT0FDZCxFQUNBOUUsRUFDQWtELEdBQ0EsRUFDQSxLQUNBLFdBQ0EsTUFJRixRQUFlNEIsRUFBaUIiLCJzb3VyY2VzIjpbIm9nYW1lLXRyYWNrZXI6Ly8vLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9jb21tb24vUGxhbmV0VHlwZS50cyIsIm9nYW1lLXRyYWNrZXI6Ly8vLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9saWZlZm9ybXMvYnVpbGRpbmdzL2dldExpZmVmb3JtVGVjaG5vbG9neUJvbnVzLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0cy92aWV3cy9lbXBpcmUvcHJvZHVjdGlvbi9NaW5lcy52dWU/YjQ5MiIsIm9nYW1lLXRyYWNrZXI6Ly8vLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9saWZlZm9ybXMvYnVpbGRpbmdzL2dldExpZmVmb3JtQ29sbGVjdG9yQ2xhc3NCb251cy50cyIsIm9nYW1lLXRyYWNrZXI6Ly8vLi9zcmMvc2hhcmVkL21vZGVscy9vZ2FtZS9yZXNvdXJjZS1wcm9kdWN0aW9uL2dldENyYXdsZXJDb3VudEZvck1heGltdW1Cb29zdC50cyIsIndlYnBhY2s6Ly8vc3JjL3ZpZXdzL3N0YXRzL3ZpZXdzL2VtcGlyZS9wcm9kdWN0aW9uL01pbmVzLnZ1ZT8xNjJhIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0cy92aWV3cy9lbXBpcmUvcHJvZHVjdGlvbi9NaW5lcy52dWU/NDc5MSIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc3RhdHMvdmlld3MvZW1waXJlL3Byb2R1Y3Rpb24vTWluZXMudnVlPzM2MDMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGVudW0gUGxhbmV0VHlwZSB7XHJcbiAgICBwbGFuZXQgPSAxLFxyXG4gICAgbW9vbiA9IDMsXHJcbiAgICBkZWJyaXNGaWVsZCA9IDIsXHJcbn0iLCJpbXBvcnQgeyBMb2NhbFBsYXllckRhdGEgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL2VtcGlyZS9Mb2NhbFBsYXllckRhdGFcIjtcclxuaW1wb3J0IHsgUGxhbmV0RGF0YSB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvZW1waXJlL1BsYW5ldERhdGFcIjtcclxuaW1wb3J0IHsgY3JlYXRlUmVjb3JkIH0gZnJvbSBcIkAvc2hhcmVkL3V0aWxzL2NyZWF0ZVJlY29yZFwiO1xyXG5pbXBvcnQgeyBnZXRMaWZlZm9ybUxldmVsVGVjaG5vbG9neUJvbnVzIH0gZnJvbSBcIi4uL2V4cGVyaWVuY2VcIjtcclxuaW1wb3J0IHsgTGlmZWZvcm1UeXBlLCBWYWxpZExpZmVmb3JtVHlwZXMgfSBmcm9tIFwiLi4vTGlmZWZvcm1UeXBlXCI7XHJcbmltcG9ydCB7IExpZmVmb3JtVGVjaG5vbG9neUJvbnVzTGlmZWZvcm1CdWlsZGluZ3NCeUxpZmVmb3JtIH0gZnJvbSBcIi4vTGlmZWZvcm1CdWlsZGluZ3NcIjtcclxuaW1wb3J0IHsgTGlmZWZvcm1UZWNobm9sb2d5VHlwZSwgTGlmZWZvcm1UZWNobm9sb2d5VHlwZXMgfSBmcm9tIFwiLi4vTGlmZWZvcm1UZWNobm9sb2d5VHlwZVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldExpZmVmb3JtVGVjaG5vbG9neUJvbnVzKHBsYXllcjogTG9jYWxQbGF5ZXJEYXRhKTogUmVjb3JkPG51bWJlciwgUmVjb3JkPExpZmVmb3JtVGVjaG5vbG9neVR5cGUsIG51bWJlcj4+IHtcclxuICAgIGNvbnN0IHBsYW5ldHMgPSBPYmplY3QudmFsdWVzKHBsYXllci5wbGFuZXRzKS5maWx0ZXIocCA9PiAhcC5pc01vb24pIGFzIFBsYW5ldERhdGFbXTtcclxuXHJcbiAgICBjb25zdCB0ZWNobm9sb2d5Qm9udXNCeVBsYW5ldCA9IGNyZWF0ZVJlY29yZChcclxuICAgICAgICBwbGFuZXRzLm1hcChwID0+IHAuaWQpLFxyXG4gICAgICAgICgpID0+IGNyZWF0ZVJlY29yZChMaWZlZm9ybVRlY2hub2xvZ3lUeXBlcywgMClcclxuICAgICk7XHJcblxyXG4gICAgY29uc3QgbGV2ZWxUZWNobm9sb2d5Qm9udXMgPSBjcmVhdGVSZWNvcmQoXHJcbiAgICAgICAgVmFsaWRMaWZlZm9ybVR5cGVzLFxyXG4gICAgICAgIGxmID0+IGdldExpZmVmb3JtTGV2ZWxUZWNobm9sb2d5Qm9udXMocGxheWVyLmxpZmVmb3JtRXhwZXJpZW5jZVtsZl0pLFxyXG4gICAgKTtcclxuICAgIGZvciAoY29uc3QgcGxhbmV0IG9mIHBsYW5ldHMpIHtcclxuICAgICAgICBpZiAocGxhbmV0LmFjdGl2ZUxpZmVmb3JtID09IExpZmVmb3JtVHlwZS5ub25lKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbGV2ZWxCb251cyA9IGxldmVsVGVjaG5vbG9neUJvbnVzW3BsYW5ldC5hY3RpdmVMaWZlZm9ybV07XHJcblxyXG4gICAgICAgIGNvbnN0IHRlY2hub2xvZ3lCb251c0J1aWxkaW5ncyA9IExpZmVmb3JtVGVjaG5vbG9neUJvbnVzTGlmZWZvcm1CdWlsZGluZ3NCeUxpZmVmb3JtW3BsYW5ldC5hY3RpdmVMaWZlZm9ybV07XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgdGVjaG5vbG9neSBvZiBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlcykge1xyXG4gICAgICAgICAgICBjb25zdCB0ZWNobm9sb2d5Qm9udXMgPSB0ZWNobm9sb2d5Qm9udXNCdWlsZGluZ3MucmVkdWNlKCh0b3RhbCwgYnVpbGRpbmcpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxldmVsID0gcGxhbmV0LmxpZmVmb3JtQnVpbGRpbmdzW2J1aWxkaW5nLnR5cGVdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYm9udXMgPSBidWlsZGluZy5nZXRMaWZlZm9ybVRlY2hub2xvZ3lCb251cyh0ZWNobm9sb2d5LCBsZXZlbCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdG90YWwgKyBib251cztcclxuICAgICAgICAgICAgfSwgMCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0b3RhbFRlY2hCb251cyA9IGxldmVsQm9udXMgKyB0ZWNobm9sb2d5Qm9udXM7XHJcbiAgICAgICAgICAgIHRlY2hub2xvZ3lCb251c0J5UGxhbmV0W3BsYW5ldC5pZF1bdGVjaG5vbG9neV0gPSB0b3RhbFRlY2hCb251cztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRlY2hub2xvZ3lCb251c0J5UGxhbmV0O1xyXG59IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2dyaWQtdGFibGUnLHthdHRyczp7XCJjb2x1bW5zXCI6X3ZtLmNvbHVtbnMsXCJpdGVtc1wiOl92bS5pdGVtcyxcImZvb3Rlckl0ZW1zXCI6X3ZtLmZvb3Rlckl0ZW1zfSxzY29wZWRTbG90czpfdm0uX3UoW3trZXk6XCJoZWFkZXItbWV0YWxNaW5lXCIsZm46ZnVuY3Rpb24oKXtyZXR1cm4gW19jKCdvLWJ1aWxkaW5nJyx7YXR0cnM6e1wiYnVpbGRpbmdcIjpfdm0uQnVpbGRpbmdUeXBlLm1ldGFsTWluZSxcInNpemVcIjpcIjc1cHhcIn19KV19LHByb3h5OnRydWV9LHtrZXk6XCJoZWFkZXItY3J5c3RhbE1pbmVcIixmbjpmdW5jdGlvbigpe3JldHVybiBbX2MoJ28tYnVpbGRpbmcnLHthdHRyczp7XCJidWlsZGluZ1wiOl92bS5CdWlsZGluZ1R5cGUuY3J5c3RhbE1pbmUsXCJzaXplXCI6XCI3NXB4XCJ9fSldfSxwcm94eTp0cnVlfSx7a2V5OlwiaGVhZGVyLWRldXRlcml1bVN5bnRoZXNpemVyXCIsZm46ZnVuY3Rpb24oKXtyZXR1cm4gW19jKCdvLWJ1aWxkaW5nJyx7YXR0cnM6e1wiYnVpbGRpbmdcIjpfdm0uQnVpbGRpbmdUeXBlLmRldXRlcml1bVN5bnRoZXNpemVyLFwic2l6ZVwiOlwiNzVweFwifX0pXX0scHJveHk6dHJ1ZX0se2tleTpcImhlYWRlci1zb2xhclBsYW50XCIsZm46ZnVuY3Rpb24oKXtyZXR1cm4gW19jKCdvLWJ1aWxkaW5nJyx7YXR0cnM6e1wiYnVpbGRpbmdcIjpfdm0uQnVpbGRpbmdUeXBlLnNvbGFyUGxhbnQsXCJzaXplXCI6XCI3NXB4XCJ9fSldfSxwcm94eTp0cnVlfSx7a2V5OlwiaGVhZGVyLWZ1c2lvblJlYWN0b3JcIixmbjpmdW5jdGlvbigpe3JldHVybiBbX2MoJ28tYnVpbGRpbmcnLHthdHRyczp7XCJidWlsZGluZ1wiOl92bS5CdWlsZGluZ1R5cGUuZnVzaW9uUmVhY3RvcixcInNpemVcIjpcIjc1cHhcIn19KV19LHByb3h5OnRydWV9LHtrZXk6XCJoZWFkZXItY3Jhd2xlcnNcIixmbjpmdW5jdGlvbigpe3JldHVybiBbX2MoJ28tc2hpcCcse2F0dHJzOntcInNoaXBcIjpfdm0uU2hpcFR5cGUuY3Jhd2xlcixcInNpemVcIjpcIjc1cHhcIn19KV19LHByb3h5OnRydWV9LHtrZXk6XCJjZWxsLXBsYW5ldFwiLGZuOmZ1bmN0aW9uKHJlZil7XG52YXIgcGxhbmV0ID0gcmVmLnZhbHVlO1xucmV0dXJuIFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJwbGFuZXQtaW5mb1wifSxbX2MoJ3NwYW4nLHtkb21Qcm9wczp7XCJ0ZXh0Q29udGVudFwiOl92bS5fcyhwbGFuZXQubmFtZSl9fSksX2MoJ3NwYW4nLFtfdm0uX3YoXCIgW1wiK192bS5fcyhwbGFuZXQuY29vcmRpbmF0ZXMuZ2FsYXh5KStcIjpcIitfdm0uX3MocGxhbmV0LmNvb3JkaW5hdGVzLnN5c3RlbSkrXCI6XCIrX3ZtLl9zKHBsYW5ldC5jb29yZGluYXRlcy5wb3NpdGlvbikrXCJdIFwiKV0pXSldfX0se2tleTpcImNlbGwtY3Jhd2xlcnNcIixmbjpmdW5jdGlvbihyZWYpe1xudmFyIHZhbHVlID0gcmVmLnZhbHVlO1xucmV0dXJuIFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJjcmF3bGVyc1wifSxbX2MoJ3NwYW4nLFtfYygnc3Bhbicse2NsYXNzOntcbiAgICAgICAgICAgICAgICAgICAgICAgICdjcmF3bGVycy1nb29kJzogdmFsdWUuYWN0aXZlID09IHZhbHVlLm1heGltdW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAnY3Jhd2xlcnMtb2snOiB2YWx1ZS5hY3RpdmUgPiAwICYmIHZhbHVlLmFjdGl2ZSA8IHZhbHVlLm1heGltdW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAnY3Jhd2xlcnMtYmFkJzogdmFsdWUuYWN0aXZlID09IDAsXG4gICAgICAgICAgICAgICAgICAgIH0sZG9tUHJvcHM6e1widGV4dENvbnRlbnRcIjpfdm0uX3MoX3ZtLiRpMThuLiRuKHZhbHVlLmFjdGl2ZSkpfX0pLF9jKCdzcGFuJyxbX3ZtLl92KFwiL1wiK192bS5fcyhfdm0uJGkxOG4uJG4odmFsdWUubWF4aW11bSkpKV0pXSksX2MoJ3NwYW4nLHtkb21Qcm9wczp7XCJ0ZXh0Q29udGVudFwiOl92bS5fcygoXCIoXCIgKyAoX3ZtLiRpMThuLiRuKHZhbHVlLmF2YWlsYWJsZSkpICsgXCIgXCIgKyAoX3ZtLiRpMThuLiR0LmV4dGVuc2lvbi5lbXBpcmUucHJvZHVjdGlvbi5taW5lcy5jcmF3bGVyc0F2YWlsYWJsZSkgKyBcIilcIikpfX0pXSldfX0se2tleTpcImZvb3Rlci1wbGFuZXRcIixmbjpmdW5jdGlvbigpe3JldHVybiBbX3ZtLl92KFwi4oyAXCIpXX0scHJveHk6dHJ1ZX0se2tleTpcImZvb3Rlci1tZXRhbE1pbmVcIixmbjpmdW5jdGlvbihyZWYpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG5yZXR1cm4gW19jKCdzcGFuJyx7ZG9tUHJvcHM6e1widGV4dENvbnRlbnRcIjpfdm0uX3MoX3ZtLiRpMThuLiRuKHZhbHVlLCBfdm0uYXZnTnVtYmVyRm9ybWF0KSl9fSldfX0se2tleTpcImZvb3Rlci1jcnlzdGFsTWluZVwiLGZuOmZ1bmN0aW9uKHJlZil7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcbnJldHVybiBbX2MoJ3NwYW4nLHtkb21Qcm9wczp7XCJ0ZXh0Q29udGVudFwiOl92bS5fcyhfdm0uJGkxOG4uJG4odmFsdWUsIF92bS5hdmdOdW1iZXJGb3JtYXQpKX19KV19fSx7a2V5OlwiZm9vdGVyLWRldXRlcml1bVN5bnRoZXNpemVyXCIsZm46ZnVuY3Rpb24ocmVmKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xucmV0dXJuIFtfYygnc3Bhbicse2RvbVByb3BzOntcInRleHRDb250ZW50XCI6X3ZtLl9zKF92bS4kaTE4bi4kbih2YWx1ZSwgX3ZtLmF2Z051bWJlckZvcm1hdCkpfX0pXX19LHtrZXk6XCJmb290ZXItc29sYXJQbGFudFwiLGZuOmZ1bmN0aW9uKHJlZil7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcbnJldHVybiBbX2MoJ3NwYW4nLHtkb21Qcm9wczp7XCJ0ZXh0Q29udGVudFwiOl92bS5fcyhfdm0uJGkxOG4uJG4odmFsdWUsIF92bS5hdmdOdW1iZXJGb3JtYXQpKX19KV19fSx7a2V5OlwiZm9vdGVyLWZ1c2lvblJlYWN0b3JcIixmbjpmdW5jdGlvbihyZWYpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG5yZXR1cm4gW19jKCdzcGFuJyx7ZG9tUHJvcHM6e1widGV4dENvbnRlbnRcIjpfdm0uX3MoX3ZtLiRpMThuLiRuKHZhbHVlLCBfdm0uYXZnTnVtYmVyRm9ybWF0KSl9fSldfX0se2tleTpcImZvb3Rlci1jcmF3bGVyc1wiLGZuOmZ1bmN0aW9uKHJlZil7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcbnJldHVybiBbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiY3Jhd2xlcnNcIn0sW19jKCdzcGFuJyx7Y2xhc3M6e1xuICAgICAgICAgICAgICAgICAgICAnY3Jhd2xlcnMtZ29vZCc6IHZhbHVlLmFjdGl2ZSA9PSB2YWx1ZS5tYXhpbXVtLFxuICAgICAgICAgICAgICAgICAgICAnY3Jhd2xlcnMtb2snOiB2YWx1ZS5hY3RpdmUgPiAwICYmIHZhbHVlLmFjdGl2ZSA8IHZhbHVlLm1heGltdW0sXG4gICAgICAgICAgICAgICAgICAgICdjcmF3bGVycy1iYWQnOiB2YWx1ZS5hY3RpdmUgPT0gMCxcbiAgICAgICAgICAgICAgICB9LGRvbVByb3BzOntcInRleHRDb250ZW50XCI6X3ZtLl9zKF92bS4kaTE4bi4kbih2YWx1ZS5hY3RpdmUsIF92bS5hdmdOdW1iZXJGb3JtYXQpKX19KSxfYygnc3Bhbicse2RvbVByb3BzOntcInRleHRDb250ZW50XCI6X3ZtLl9zKChcIihcIiArIChfdm0uJGkxOG4uJG4odmFsdWUuYXZhaWxhYmxlLCBfdm0uYXZnTnVtYmVyRm9ybWF0KSkgKyBcIiBcIiArIChfdm0uJGkxOG4uJHQuZXh0ZW5zaW9uLmVtcGlyZS5wcm9kdWN0aW9uLm1pbmVzLmNyYXdsZXJzQXZhaWxhYmxlKSArIFwiKVwiKSl9fSksX2MoJ3NwYW4nLHtzdGF0aWNTdHlsZTp7XCJncmlkLWNvbHVtblwiOlwiMSAvIHNwYW4gMlwifSxkb21Qcm9wczp7XCJ0ZXh0Q29udGVudFwiOl92bS5fcyhfdm0uJGkxOG4uJHQuZXh0ZW5zaW9uLmVtcGlyZS5wcm9kdWN0aW9uLm1pbmVzLmNyYXdsZXJzVG9SZWFjaExpbWl0KF92bS4kaTE4bi4kbihfdm0uZWZmZWN0aXZlQ3Jhd2xlckxpbWl0KSkpfX0pXSldfX1dKX0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJpbXBvcnQgeyBMb2NhbFBsYXllckRhdGEgfSBmcm9tIFwiQC9zaGFyZWQvbW9kZWxzL2VtcGlyZS9Mb2NhbFBsYXllckRhdGFcIjtcclxuaW1wb3J0IHsgUGxhbmV0RGF0YSB9IGZyb20gXCJAL3NoYXJlZC9tb2RlbHMvZW1waXJlL1BsYW5ldERhdGFcIjtcclxuaW1wb3J0IHsgUGxheWVyQ2xhc3MgfSBmcm9tIFwiLi4vLi4vY2xhc3Nlcy9QbGF5ZXJDbGFzc1wiO1xyXG5pbXBvcnQgeyBMaWZlZm9ybVR5cGUgfSBmcm9tIFwiLi4vTGlmZWZvcm1UeXBlXCI7XHJcbmltcG9ydCB7IENsYXNzQm9udXNMaWZlZm9ybVRlY2hub2xvZ2llcyB9IGZyb20gXCIuLi90ZWNobm9sb2dpZXMvTGlmZWZvcm1UZWNobm9sb2dpZXNcIjtcclxuaW1wb3J0IHsgZ2V0TGlmZWZvcm1UZWNobm9sb2d5Qm9udXMgfSBmcm9tIFwiLi9nZXRMaWZlZm9ybVRlY2hub2xvZ3lCb251c1wiO1xyXG5pbXBvcnQgeyBMaWZlZm9ybVRlY2hub2xvZ3lUeXBlIH0gZnJvbSBcIi4uL0xpZmVmb3JtVGVjaG5vbG9neVR5cGVcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRMaWZlZm9ybUNvbGxlY3RvckNsYXNzQm9udXMocGxheWVyOiBMb2NhbFBsYXllckRhdGEpOiBudW1iZXIge1xyXG4gICAgY29uc3QgcGxhbmV0cyA9IE9iamVjdC52YWx1ZXMocGxheWVyLnBsYW5ldHMpLmZpbHRlcihwID0+ICFwLmlzTW9vbikgYXMgUGxhbmV0RGF0YVtdO1xyXG5cclxuICAgIC8vIGdldCB0ZWNobm9sb2d5IGJvbnVzIHBlciBwbGFuZXQgKGxldmVsICsgYnVpbGRpbmdzKVxyXG4gICAgY29uc3QgdGVjaG5vbG9neUJvbnVzQnlQbGFuZXQgPSBnZXRMaWZlZm9ybVRlY2hub2xvZ3lCb251cyhwbGF5ZXIpO1xyXG5cclxuICAgIC8vIGdldCBjb2xsZWN0b3IgY2xhc3MgYm9udXNcclxuICAgIGxldCB0b3RhbENvbGxlY3RvckJvbnVzID0gMDtcclxuICAgIGZvciAoY29uc3QgcGxhbmV0IG9mIHBsYW5ldHMpIHtcclxuICAgICAgICBpZiAocGxhbmV0LmFjdGl2ZUxpZmVmb3JtID09IExpZmVmb3JtVHlwZS5ub25lKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdGVjaEZhY3RvciA9IDEgKyB0ZWNobm9sb2d5Qm9udXNCeVBsYW5ldFtwbGFuZXQuaWRdW0xpZmVmb3JtVGVjaG5vbG9neVR5cGUucm9ja3RhbENvbGxlY3RvckVuaGFuY2VtZW50XTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBjb2xsZWN0b3JCb251c1RlY2hub2xvZ2llcyA9IENsYXNzQm9udXNMaWZlZm9ybVRlY2hub2xvZ2llcy5maWx0ZXIoXHJcbiAgICAgICAgICAgIHRlY2ggPT4gcGxhbmV0LmFjdGl2ZUxpZmVmb3JtVGVjaG5vbG9naWVzLmluY2x1ZGVzKHRlY2gudHlwZSlcclxuICAgICAgICApO1xyXG4gICAgICAgIGNvbnN0IGJhc2VDb2xsZWN0b3JCb251cyA9IGNvbGxlY3RvckJvbnVzVGVjaG5vbG9naWVzLnJlZHVjZTxudW1iZXI+KCh0b3RhbCwgdGVjaCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBsZXZlbCA9IHBsYW5ldC5saWZlZm9ybVRlY2hub2xvZ2llc1t0ZWNoLnR5cGVdO1xyXG4gICAgICAgICAgICBjb25zdCBib251cyA9IHRlY2guZ2V0Q2xhc3NCb251cyhQbGF5ZXJDbGFzcy5jb2xsZWN0b3IsIGxldmVsKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRvdGFsICsgYm9udXM7XHJcbiAgICAgICAgfSwgMCk7XHJcbiAgICAgICAgY29uc3QgY29sbGVjdG9yQm9udXMgPSBiYXNlQ29sbGVjdG9yQm9udXMgKiB0ZWNoRmFjdG9yO1xyXG5cclxuICAgICAgICB0b3RhbENvbGxlY3RvckJvbnVzICs9IGNvbGxlY3RvckJvbnVzO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0b3RhbENvbGxlY3RvckJvbnVzO1xyXG59IiwiaW1wb3J0IHsgUGxheWVyQ2xhc3MgfSBmcm9tIFwiLi4vY2xhc3Nlcy9QbGF5ZXJDbGFzc1wiO1xyXG5pbXBvcnQgeyBnZXRDcmF3bGVyUHJvZHVjdGlvbkZhY3RvciB9IGZyb20gXCIuL2dldENyYXdsZXJQcm9kdWN0aW9uRmFjdG9yXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE1heENyYXdsZXJCb29zdENhbGN1bGF0aW9uRGF0YSB7XHJcbiAgICBwbGF5ZXJDbGFzczogUGxheWVyQ2xhc3M7XHJcbiAgICBsaWZlZm9ybVRlY2hub2xvZ2llczoge1xyXG4gICAgICAgIGNvbGxlY3RvckNsYXNzQm9udXM6IG51bWJlcjtcclxuICAgICAgICBjcmF3bGVyUHJvZHVjdGlvbkJvbnVzOiBudW1iZXI7XHJcbiAgICB9O1xyXG4gICAgc2VydmVyU2V0dGluZ3M6IHtcclxuICAgICAgICBnZW9sb2dpc3RBY3RpdmVDcmF3bGVyRmFjdG9yQm9udXM6IG51bWJlcjtcclxuICAgICAgICBjb2xsZWN0b3JDcmF3bGVyUHJvZHVjdGlvbkZhY3RvckJvbnVzOiBudW1iZXI7XHJcbiAgICAgICAgY3Jhd2xlclByb2R1Y3Rpb25GYWN0b3JQZXJVbml0OiBudW1iZXI7XHJcbiAgICAgICAgY3Jhd2xlck1heFByb2R1Y3Rpb25GYWN0b3I6IG51bWJlcjtcclxuICAgIH07XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGdldENyYXdsZXJDb3VudEZvck1heGltdW1Cb29zdChkYXRhOiBNYXhDcmF3bGVyQm9vc3RDYWxjdWxhdGlvbkRhdGEpOiBudW1iZXIge1xyXG4gICAgY29uc3QgY3Jhd2xlclByb2R1Y3Rpdml0eSA9IGdldENyYXdsZXJQcm9kdWN0aW9uRmFjdG9yKFxyXG4gICAgICAgIGRhdGEucGxheWVyQ2xhc3MsXHJcbiAgICAgICAgZGF0YS5zZXJ2ZXJTZXR0aW5ncy5jb2xsZWN0b3JDcmF3bGVyUHJvZHVjdGlvbkZhY3RvckJvbnVzLFxyXG4gICAgICAgIGRhdGEubGlmZWZvcm1UZWNobm9sb2dpZXMuY29sbGVjdG9yQ2xhc3NCb251cyxcclxuICAgICAgICBkYXRhLmxpZmVmb3JtVGVjaG5vbG9naWVzLmNyYXdsZXJQcm9kdWN0aW9uQm9udXMsXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiBNYXRoLmNlaWwoXHJcbiAgICAgICAgZGF0YS5zZXJ2ZXJTZXR0aW5ncy5jcmF3bGVyTWF4UHJvZHVjdGlvbkZhY3RvclxyXG4gICAgICAgIC8gKFxyXG4gICAgICAgICAgICBkYXRhLnNlcnZlclNldHRpbmdzLmNyYXdsZXJQcm9kdWN0aW9uRmFjdG9yUGVyVW5pdFxyXG4gICAgICAgICAgICAqIGNyYXdsZXJQcm9kdWN0aXZpdHlcclxuICAgICAgICAgICAgKiAoMSArIGRhdGEubGlmZWZvcm1UZWNobm9sb2dpZXMuY3Jhd2xlclByb2R1Y3Rpb25Cb251cylcclxuICAgICAgICAgICAgKiAoZGF0YS5wbGF5ZXJDbGFzcyA9PSBQbGF5ZXJDbGFzcy5jb2xsZWN0b3IgPyAxLjUgOiAxKSAvL292ZXJsb2FkXHJcbiAgICAgICAgKVxyXG4gICAgKTtcclxufSIsIjx0ZW1wbGF0ZT5cclxuICAgIDxncmlkLXRhYmxlIDpjb2x1bW5zPVwiY29sdW1uc1wiIDppdGVtcz1cIml0ZW1zXCIgOmZvb3Rlckl0ZW1zPVwiZm9vdGVySXRlbXNcIj5cclxuICAgICAgICA8dGVtcGxhdGUgI2hlYWRlci1tZXRhbE1pbmU+XHJcbiAgICAgICAgICAgIDxvLWJ1aWxkaW5nIDpidWlsZGluZz1cIkJ1aWxkaW5nVHlwZS5tZXRhbE1pbmVcIiBzaXplPVwiNzVweFwiIC8+XHJcbiAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgICAgICA8dGVtcGxhdGUgI2hlYWRlci1jcnlzdGFsTWluZT5cclxuICAgICAgICAgICAgPG8tYnVpbGRpbmcgOmJ1aWxkaW5nPVwiQnVpbGRpbmdUeXBlLmNyeXN0YWxNaW5lXCIgc2l6ZT1cIjc1cHhcIiAvPlxyXG4gICAgICAgIDwvdGVtcGxhdGU+XHJcbiAgICAgICAgPHRlbXBsYXRlICNoZWFkZXItZGV1dGVyaXVtU3ludGhlc2l6ZXI+XHJcbiAgICAgICAgICAgIDxvLWJ1aWxkaW5nIDpidWlsZGluZz1cIkJ1aWxkaW5nVHlwZS5kZXV0ZXJpdW1TeW50aGVzaXplclwiIHNpemU9XCI3NXB4XCIgLz5cclxuICAgICAgICA8L3RlbXBsYXRlPlxyXG4gICAgICAgIDx0ZW1wbGF0ZSAjaGVhZGVyLXNvbGFyUGxhbnQ+XHJcbiAgICAgICAgICAgIDxvLWJ1aWxkaW5nIDpidWlsZGluZz1cIkJ1aWxkaW5nVHlwZS5zb2xhclBsYW50XCIgc2l6ZT1cIjc1cHhcIiAvPlxyXG4gICAgICAgIDwvdGVtcGxhdGU+XHJcbiAgICAgICAgPHRlbXBsYXRlICNoZWFkZXItZnVzaW9uUmVhY3Rvcj5cclxuICAgICAgICAgICAgPG8tYnVpbGRpbmcgOmJ1aWxkaW5nPVwiQnVpbGRpbmdUeXBlLmZ1c2lvblJlYWN0b3JcIiBzaXplPVwiNzVweFwiIC8+XHJcbiAgICAgICAgPC90ZW1wbGF0ZT5cclxuXHJcbiAgICAgICAgPHRlbXBsYXRlICNoZWFkZXItY3Jhd2xlcnM+XHJcbiAgICAgICAgICAgIDxvLXNoaXAgOnNoaXA9XCJTaGlwVHlwZS5jcmF3bGVyXCIgc2l6ZT1cIjc1cHhcIiAvPlxyXG4gICAgICAgIDwvdGVtcGxhdGU+XHJcblxyXG4gICAgICAgIDx0ZW1wbGF0ZSAjY2VsbC1wbGFuZXQ9XCJ7IHZhbHVlOiBwbGFuZXQgfVwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGxhbmV0LWluZm9cIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIHYtdGV4dD1cInBsYW5ldC5uYW1lXCIgLz5cclxuICAgICAgICAgICAgICAgIDxzcGFuPiBbe3sgcGxhbmV0LmNvb3JkaW5hdGVzLmdhbGF4eSB9fTp7eyBwbGFuZXQuY29vcmRpbmF0ZXMuc3lzdGVtIH19Ont7IHBsYW5ldC5jb29yZGluYXRlcy5wb3NpdGlvbiB9fV0gPC9zcGFuPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L3RlbXBsYXRlPlxyXG5cclxuICAgICAgICA8dGVtcGxhdGUgI2NlbGwtY3Jhd2xlcnM9XCJ7IHZhbHVlIH1cIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNyYXdsZXJzXCI+XHJcbiAgICAgICAgICAgICAgICA8c3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2LXRleHQ9XCIkaTE4bi4kbih2YWx1ZS5hY3RpdmUpXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgOmNsYXNzPVwie1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NyYXdsZXJzLWdvb2QnOiB2YWx1ZS5hY3RpdmUgPT0gdmFsdWUubWF4aW11bSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjcmF3bGVycy1vayc6IHZhbHVlLmFjdGl2ZSA+IDAgJiYgdmFsdWUuYWN0aXZlIDwgdmFsdWUubWF4aW11bSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjcmF3bGVycy1iYWQnOiB2YWx1ZS5hY3RpdmUgPT0gMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVwiXHJcbiAgICAgICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj4ve3sgJGkxOG4uJG4odmFsdWUubWF4aW11bSkgfX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiB2LXRleHQ9XCJgKCR7JGkxOG4uJG4odmFsdWUuYXZhaWxhYmxlKX0gJHskaTE4bi4kdC5leHRlbnNpb24uZW1waXJlLnByb2R1Y3Rpb24ubWluZXMuY3Jhd2xlcnNBdmFpbGFibGV9KWBcIiAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L3RlbXBsYXRlPlxyXG5cclxuICAgICAgICA8dGVtcGxhdGUgI2Zvb3Rlci1wbGFuZXQ+4oyAPC90ZW1wbGF0ZT5cclxuXHJcbiAgICAgICAgPHRlbXBsYXRlICNmb290ZXItbWV0YWxNaW5lPVwieyB2YWx1ZSB9XCI+XHJcbiAgICAgICAgICAgIDxzcGFuIHYtdGV4dD1cIiRpMThuLiRuKHZhbHVlLCBhdmdOdW1iZXJGb3JtYXQpXCIgLz5cclxuICAgICAgICA8L3RlbXBsYXRlPlxyXG5cclxuICAgICAgICA8dGVtcGxhdGUgI2Zvb3Rlci1jcnlzdGFsTWluZT1cInsgdmFsdWUgfVwiPlxyXG4gICAgICAgICAgICA8c3BhbiB2LXRleHQ9XCIkaTE4bi4kbih2YWx1ZSwgYXZnTnVtYmVyRm9ybWF0KVwiIC8+XHJcbiAgICAgICAgPC90ZW1wbGF0ZT5cclxuXHJcbiAgICAgICAgPHRlbXBsYXRlICNmb290ZXItZGV1dGVyaXVtU3ludGhlc2l6ZXI9XCJ7IHZhbHVlIH1cIj5cclxuICAgICAgICAgICAgPHNwYW4gdi10ZXh0PVwiJGkxOG4uJG4odmFsdWUsIGF2Z051bWJlckZvcm1hdClcIiAvPlxyXG4gICAgICAgIDwvdGVtcGxhdGU+XHJcblxyXG4gICAgICAgIDx0ZW1wbGF0ZSAjZm9vdGVyLXNvbGFyUGxhbnQ9XCJ7IHZhbHVlIH1cIj5cclxuICAgICAgICAgICAgPHNwYW4gdi10ZXh0PVwiJGkxOG4uJG4odmFsdWUsIGF2Z051bWJlckZvcm1hdClcIiAvPlxyXG4gICAgICAgIDwvdGVtcGxhdGU+XHJcblxyXG4gICAgICAgIDx0ZW1wbGF0ZSAjZm9vdGVyLWZ1c2lvblJlYWN0b3I9XCJ7IHZhbHVlIH1cIj5cclxuICAgICAgICAgICAgPHNwYW4gdi10ZXh0PVwiJGkxOG4uJG4odmFsdWUsIGF2Z051bWJlckZvcm1hdClcIiAvPlxyXG4gICAgICAgIDwvdGVtcGxhdGU+XHJcblxyXG4gICAgICAgIDx0ZW1wbGF0ZSAjZm9vdGVyLWNyYXdsZXJzPVwieyB2YWx1ZSB9XCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjcmF3bGVyc1wiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICB2LXRleHQ9XCIkaTE4bi4kbih2YWx1ZS5hY3RpdmUsIGF2Z051bWJlckZvcm1hdClcIlxyXG4gICAgICAgICAgICAgICAgICAgIDpjbGFzcz1cIntcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NyYXdsZXJzLWdvb2QnOiB2YWx1ZS5hY3RpdmUgPT0gdmFsdWUubWF4aW11bSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NyYXdsZXJzLW9rJzogdmFsdWUuYWN0aXZlID4gMCAmJiB2YWx1ZS5hY3RpdmUgPCB2YWx1ZS5tYXhpbXVtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnY3Jhd2xlcnMtYmFkJzogdmFsdWUuYWN0aXZlID09IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgfVwiXHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gdi10ZXh0PVwiYCgkeyRpMThuLiRuKHZhbHVlLmF2YWlsYWJsZSwgYXZnTnVtYmVyRm9ybWF0KX0gJHskaTE4bi4kdC5leHRlbnNpb24uZW1waXJlLnByb2R1Y3Rpb24ubWluZXMuY3Jhd2xlcnNBdmFpbGFibGV9KWBcIiAvPlxyXG4gICAgICAgICAgICAgICAgPHNwYW5cclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT1cImdyaWQtY29sdW1uOiAxIC8gc3BhbiAyXCJcclxuICAgICAgICAgICAgICAgICAgICB2LXRleHQ9XCIkaTE4bi4kdC5leHRlbnNpb24uZW1waXJlLnByb2R1Y3Rpb24ubWluZXMuY3Jhd2xlcnNUb1JlYWNoTGltaXQoJGkxOG4uJG4oZWZmZWN0aXZlQ3Jhd2xlckxpbWl0KSlcIlxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgIDwvZ3JpZC10YWJsZT5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQgbGFuZz1cInRzXCI+XHJcbiAgICBpbXBvcnQgeyBQbGFuZXREYXRhIH0gZnJvbSAnQC9zaGFyZWQvbW9kZWxzL2VtcGlyZS9QbGFuZXREYXRhJztcclxuICAgIGltcG9ydCB7IEVtcGlyZURhdGFNb2R1bGUgfSBmcm9tICdAL3ZpZXdzL3N0YXRzL2RhdGEvRW1waXJlRGF0YU1vZHVsZSc7XHJcbiAgICBpbXBvcnQgeyBDb21wb25lbnQsIFZ1ZSB9IGZyb20gJ3Z1ZS1wcm9wZXJ0eS1kZWNvcmF0b3InO1xyXG4gICAgaW1wb3J0IHsgQ29vcmRpbmF0ZXMgfSBmcm9tICdAL3NoYXJlZC9tb2RlbHMvb2dhbWUvY29tbW9uL0Nvb3JkaW5hdGVzJztcclxuICAgIGltcG9ydCB7IEdyaWRUYWJsZUNvbHVtbiB9IGZyb20gJ0Avdmlld3Mvc3RhdHMvY29tcG9uZW50cy9jb21tb24vR3JpZFRhYmxlLnZ1ZSc7XHJcbiAgICBpbXBvcnQgeyBCdWlsZGluZ1R5cGUgfSBmcm9tICdAL3NoYXJlZC9tb2RlbHMvb2dhbWUvYnVpbGRpbmdzL0J1aWxkaW5nVHlwZSc7XHJcbiAgICBpbXBvcnQgeyBTaGlwVHlwZSB9IGZyb20gJ0Avc2hhcmVkL21vZGVscy9vZ2FtZS9zaGlwcy9TaGlwVHlwZSc7XHJcbiAgICBpbXBvcnQgeyBMb2NhbFBsYXllckRhdGEgfSBmcm9tICdAL3NoYXJlZC9tb2RlbHMvZW1waXJlL0xvY2FsUGxheWVyRGF0YSc7XHJcbiAgICBpbXBvcnQgeyBQbGFuZXRUeXBlIH0gZnJvbSAnQC9zaGFyZWQvbW9kZWxzL29nYW1lL2NvbW1vbi9QbGFuZXRUeXBlJztcclxuICAgIGltcG9ydCB7IFNlcnZlclNldHRpbmdzRGF0YU1vZHVsZSB9IGZyb20gJ0Avdmlld3Mvc3RhdHMvZGF0YS9TZXJ2ZXJTZXR0aW5nc0RhdGFNb2R1bGUnO1xyXG4gICAgaW1wb3J0IHsgZ2V0TGlmZWZvcm1Db2xsZWN0b3JDbGFzc0JvbnVzIH0gZnJvbSAnQC9zaGFyZWQvbW9kZWxzL29nYW1lL2xpZmVmb3Jtcy9idWlsZGluZ3MvZ2V0TGlmZWZvcm1Db2xsZWN0b3JDbGFzc0JvbnVzJztcclxuICAgIGltcG9ydCB7IGdldE1heEFjdGl2ZUNyYXdsZXJzIH0gZnJvbSAnQC9zaGFyZWQvbW9kZWxzL29nYW1lL3Jlc291cmNlLXByb2R1Y3Rpb24vZ2V0TWF4QWN0aXZlQ3Jhd2xlcnMnO1xyXG4gICAgaW1wb3J0IHsgUGxheWVyQ2xhc3MgfSBmcm9tICdAL3NoYXJlZC9tb2RlbHMvb2dhbWUvY2xhc3Nlcy9QbGF5ZXJDbGFzcyc7XHJcbiAgICBpbXBvcnQgeyBnZXRDcmF3bGVyQ291bnRGb3JNYXhpbXVtQm9vc3QgfSBmcm9tICdAL3NoYXJlZC9tb2RlbHMvb2dhbWUvcmVzb3VyY2UtcHJvZHVjdGlvbi9nZXRDcmF3bGVyQ291bnRGb3JNYXhpbXVtQm9vc3QnO1xyXG4gICAgaW1wb3J0IHsgZ2V0UHJvZHVjdGlvbkJyZWFrZG93bnMgfSBmcm9tICdAL3ZpZXdzL3N0YXRzL21vZGVscy9lbXBpcmUvcHJvZHVjdGlvbic7XHJcblxyXG4gICAgaW50ZXJmYWNlIFByb2R1Y3Rpb25NaW5lSXRlbSB7XHJcbiAgICAgICAgcGxhbmV0OiB7XHJcbiAgICAgICAgICAgIG5hbWU6IHN0cmluZztcclxuICAgICAgICAgICAgY29vcmRpbmF0ZXM6IENvb3JkaW5hdGVzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIG1ldGFsTWluZTogbnVtYmVyO1xyXG4gICAgICAgIGNyeXN0YWxNaW5lOiBudW1iZXI7XHJcbiAgICAgICAgZGV1dGVyaXVtU3ludGhlc2l6ZXI6IG51bWJlcjtcclxuICAgICAgICBzb2xhclBsYW50OiBudW1iZXI7XHJcbiAgICAgICAgZnVzaW9uUmVhY3RvcjogbnVtYmVyO1xyXG5cclxuICAgICAgICBjcmF3bGVyczoge1xyXG4gICAgICAgICAgICBhY3RpdmU6IG51bWJlcjtcclxuICAgICAgICAgICAgbWF4aW11bTogbnVtYmVyO1xyXG4gICAgICAgICAgICBhdmFpbGFibGU6IG51bWJlcjtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIEBDb21wb25lbnQoe30pXHJcbiAgICBleHBvcnQgZGVmYXVsdCBjbGFzcyBSZXNvdXJjZXMgZXh0ZW5kcyBWdWUge1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgQnVpbGRpbmdUeXBlID0gQnVpbGRpbmdUeXBlO1xyXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgU2hpcFR5cGUgPSBTaGlwVHlwZTtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBhdmdOdW1iZXJGb3JtYXQ6IEludGwuTnVtYmVyRm9ybWF0T3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgbWluaW11bUZyYWN0aW9uRGlnaXRzOiAyLFxyXG4gICAgICAgICAgICBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IDIsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBnZXQgc2VydmVyU2V0dGluZ3MoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBTZXJ2ZXJTZXR0aW5nc0RhdGFNb2R1bGUuc2VydmVyU2V0dGluZ3M7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGdldCBlZmZlY3RpdmVDcmF3bGVyTGltaXQoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJvbnVzID0gZ2V0UHJvZHVjdGlvbkJyZWFrZG93bnModGhpcy5wbGF5ZXIsIEVtcGlyZURhdGFNb2R1bGUubGlmZWZvcm1FeHBlcmllbmNlKS5tZXRhbFxyXG4gICAgICAgICAgICAgICAgLmdldExpZmVmb3JtQm9udXNGYWN0b3JzKClcclxuICAgICAgICAgICAgICAgIC5saWZlZm9ybVRlY2hub2xvZ3lDcmF3bGVyUHJvZHVjdGlvbkJvbnVzRmFjdG9yO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGdldENyYXdsZXJDb3VudEZvck1heGltdW1Cb29zdCh7XHJcbiAgICAgICAgICAgICAgICBwbGF5ZXJDbGFzczogdGhpcy5wbGF5ZXIucGxheWVyQ2xhc3MsXHJcbiAgICAgICAgICAgICAgICBsaWZlZm9ybVRlY2hub2xvZ2llczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3RvckNsYXNzQm9udXM6IHRoaXMuY29sbGVjdG9yQm9udXMsXHJcbiAgICAgICAgICAgICAgICAgICAgY3Jhd2xlclByb2R1Y3Rpb25Cb251czogYm9udXMsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2VydmVyU2V0dGluZ3M6IHtcclxuICAgICAgICAgICAgICAgICAgICBnZW9sb2dpc3RBY3RpdmVDcmF3bGVyRmFjdG9yQm9udXM6IHRoaXMuc2VydmVyU2V0dGluZ3MucGxheWVyQ2xhc3Nlcy5jb2xsZWN0b3IuY3Jhd2xlcnMuZ2VvbG9naXN0QWN0aXZlQ3Jhd2xlckZhY3RvckJvbnVzLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3RvckNyYXdsZXJQcm9kdWN0aW9uRmFjdG9yQm9udXM6IHRoaXMuc2VydmVyU2V0dGluZ3MucGxheWVyQ2xhc3Nlcy5jb2xsZWN0b3IuY3Jhd2xlcnMucHJvZHVjdGlvbkZhY3RvckJvbnVzLFxyXG4gICAgICAgICAgICAgICAgICAgIGNyYXdsZXJQcm9kdWN0aW9uRmFjdG9yUGVyVW5pdDogdGhpcy5zZXJ2ZXJTZXR0aW5ncy5wbGF5ZXJDbGFzc2VzLmNyYXdsZXJzLnByb2R1Y3Rpb25Cb29zdEZhY3RvclBlclVuaXQsXHJcbiAgICAgICAgICAgICAgICAgICAgY3Jhd2xlck1heFByb2R1Y3Rpb25GYWN0b3I6IHRoaXMuc2VydmVyU2V0dGluZ3MucGxheWVyQ2xhc3Nlcy5jcmF3bGVycy5tYXhQcm9kdWN0aW9uRmFjdG9yLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGdldCBjb2x1bW5zKCk6IEdyaWRUYWJsZUNvbHVtbjxrZXlvZiBQcm9kdWN0aW9uTWluZUl0ZW0+W10ge1xyXG4gICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ3BsYW5ldCcsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHRoaXMuJGkxOG4uJHQuZXh0ZW5zaW9uLmVtcGlyZS5wbGFuZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJzFmcicsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdtZXRhbE1pbmUnLCBzaXplOiAnMWZyJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdjcnlzdGFsTWluZScsIHNpemU6ICcxZnInIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ2RldXRlcml1bVN5bnRoZXNpemVyJywgc2l6ZTogJzFmcicgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnc29sYXJQbGFudCcsIHNpemU6ICcxZnInIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ2Z1c2lvblJlYWN0b3InLCBzaXplOiAnMWZyJyB9LFxyXG5cclxuICAgICAgICAgICAgICAgIHsga2V5OiAnY3Jhd2xlcnMnIH0sXHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGdldCBmb290ZXJJdGVtcygpOiBQcm9kdWN0aW9uTWluZUl0ZW1bXSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW06IFByb2R1Y3Rpb25NaW5lSXRlbSA9IHtcclxuICAgICAgICAgICAgICAgIHBsYW5ldDogeyBuYW1lOiAn4oyAJywgY29vcmRpbmF0ZXM6IHsgZ2FsYXh5OiAwLCBzeXN0ZW06IDAsIHBvc2l0aW9uOiAwLCB0eXBlOiBQbGFuZXRUeXBlLnBsYW5ldCB9IH0sXHJcbiAgICAgICAgICAgICAgICBtZXRhbE1pbmU6IDAsXHJcbiAgICAgICAgICAgICAgICBjcnlzdGFsTWluZTogMCxcclxuICAgICAgICAgICAgICAgIGRldXRlcml1bVN5bnRoZXNpemVyOiAwLFxyXG4gICAgICAgICAgICAgICAgc29sYXJQbGFudDogMCxcclxuICAgICAgICAgICAgICAgIGZ1c2lvblJlYWN0b3I6IDAsXHJcbiAgICAgICAgICAgICAgICBjcmF3bGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZTogMCxcclxuICAgICAgICAgICAgICAgICAgICBtYXhpbXVtOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGF2YWlsYWJsZTogMCxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuaXRlbXM7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGl0ZW1zLnJlZHVjZSgoYWNjLCBpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBhY2MubWV0YWxNaW5lICs9IGl0ZW0ubWV0YWxNaW5lIC8gaXRlbXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgYWNjLmNyeXN0YWxNaW5lICs9IGl0ZW0uY3J5c3RhbE1pbmUgLyBpdGVtcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBhY2MuZGV1dGVyaXVtU3ludGhlc2l6ZXIgKz0gaXRlbS5kZXV0ZXJpdW1TeW50aGVzaXplciAvIGl0ZW1zLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGFjYy5zb2xhclBsYW50ICs9IGl0ZW0uc29sYXJQbGFudCAvIGl0ZW1zLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGFjYy5mdXNpb25SZWFjdG9yICs9IGl0ZW0uZnVzaW9uUmVhY3RvciAvIGl0ZW1zLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICBhY2MuY3Jhd2xlcnMuYWN0aXZlICs9IGl0ZW0uY3Jhd2xlcnMuYWN0aXZlIC8gaXRlbXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgYWNjLmNyYXdsZXJzLm1heGltdW0gKz0gaXRlbS5jcmF3bGVycy5tYXhpbXVtIC8gaXRlbXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgYWNjLmNyYXdsZXJzLmF2YWlsYWJsZSArPSBpdGVtLmNyYXdsZXJzLmF2YWlsYWJsZSAvIGl0ZW1zLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgICAgICB9LCBpdGVtKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBbcmVzdWx0XTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0IGNvbGxlY3RvckJvbnVzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0TGlmZWZvcm1Db2xsZWN0b3JDbGFzc0JvbnVzKHRoaXMucGxheWVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0IGl0ZW1zKCk6IFByb2R1Y3Rpb25NaW5lSXRlbVtdIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGxhbmV0c1xyXG4gICAgICAgICAgICAgICAgLm1hcChwbGFuZXQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1heEFjdGl2ZUNyYXdsZXJzID0gZ2V0TWF4QWN0aXZlQ3Jhd2xlcnMoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYW5ldC5idWlsZGluZ3NbQnVpbGRpbmdUeXBlLm1ldGFsTWluZV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYW5ldC5idWlsZGluZ3NbQnVpbGRpbmdUeXBlLmNyeXN0YWxNaW5lXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhbmV0LmJ1aWxkaW5nc1tCdWlsZGluZ1R5cGUuZGV1dGVyaXVtU3ludGhlc2l6ZXJdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXllci5wbGF5ZXJDbGFzcyA9PSBQbGF5ZXJDbGFzcy5jb2xsZWN0b3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLm9mZmljZXJzLmdlb2xvZ2lzdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2VydmVyU2V0dGluZ3NEYXRhTW9kdWxlLnNlcnZlclNldHRpbmdzLnBsYXllckNsYXNzZXMuY29sbGVjdG9yLmNyYXdsZXJzLmdlb2xvZ2lzdEFjdGl2ZUNyYXdsZXJGYWN0b3JCb251cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xsZWN0b3JCb251cyxcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGF2YWlsYWJsZUNyYXdsZXJzID0gcGxhbmV0LnNoaXBzW1NoaXBUeXBlLmNyYXdsZXJdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFuZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFsTWluZTogcGxhbmV0LmJ1aWxkaW5nc1tCdWlsZGluZ1R5cGUubWV0YWxNaW5lXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3J5c3RhbE1pbmU6IHBsYW5ldC5idWlsZGluZ3NbQnVpbGRpbmdUeXBlLmNyeXN0YWxNaW5lXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGV1dGVyaXVtU3ludGhlc2l6ZXI6IHBsYW5ldC5idWlsZGluZ3NbQnVpbGRpbmdUeXBlLmRldXRlcml1bVN5bnRoZXNpemVyXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc29sYXJQbGFudDogcGxhbmV0LmJ1aWxkaW5nc1tCdWlsZGluZ1R5cGUuc29sYXJQbGFudF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1c2lvblJlYWN0b3I6IHBsYW5ldC5idWlsZGluZ3NbQnVpbGRpbmdUeXBlLmZ1c2lvblJlYWN0b3JdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmF3bGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlOiBhdmFpbGFibGVDcmF3bGVycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heGltdW06IG1heEFjdGl2ZUNyYXdsZXJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlOiBNYXRoLm1pbihhdmFpbGFibGVDcmF3bGVycywgbWF4QWN0aXZlQ3Jhd2xlcnMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0IHBsYXllcigpOiBMb2NhbFBsYXllckRhdGEge1xyXG4gICAgICAgICAgICByZXR1cm4gRW1waXJlRGF0YU1vZHVsZS5lbXBpcmU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBnZXQgcGxhbmV0cygpOiBQbGFuZXREYXRhW10ge1xyXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhFbXBpcmVEYXRhTW9kdWxlLmVtcGlyZS5wbGFuZXRzKVxyXG4gICAgICAgICAgICAgICAgLmZpbHRlcihwbGFuZXQgPT4gIXBsYW5ldC5pc01vb24pXHJcbiAgICAgICAgICAgICAgICAuc29ydCgoYSwgYikgPT4gRW1waXJlRGF0YU1vZHVsZS5lbXBpcmUucGxhbmV0T3JkZXIuaW5kZXhPZihhLmlkKSAtIEVtcGlyZURhdGFNb2R1bGUuZW1waXJlLnBsYW5ldE9yZGVyLmluZGV4T2YoYi5pZCkpIGFzIFBsYW5ldERhdGFbXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XHJcbiAgICAuY3Jhd2xlcnMge1xyXG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMiwgMWZyKTtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBjb2x1bW4tZ2FwOiA4cHg7XHJcbiAgICAgICAganVzdGlmeS1pdGVtczogZW5kO1xyXG5cclxuICAgICAgICAmLWdvb2Qge1xyXG4gICAgICAgICAgICBjb2xvcjogIzRjYWY1MDtcclxuICAgICAgICB9XHJcbiAgICAgICAgJi1vayB7XHJcbiAgICAgICAgICAgIGNvbG9yOiAjZmZjMTA3O1xyXG4gICAgICAgIH1cclxuICAgICAgICAmLWJhZCB7XHJcbiAgICAgICAgICAgIGNvbG9yOiAjZGQyYzAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAucGxhbmV0LWluZm8ge1xyXG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgYXV0bztcclxuICAgICAgICBqdXN0aWZ5LWl0ZW1zOiBlbmQ7XHJcbiAgICAgICAgY29sdW1uLWdhcDogOHB4O1xyXG4gICAgfVxyXG48L3N0eWxlPiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RocmVhZC1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9NaW5lcy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RocmVhZC1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9NaW5lcy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL01pbmVzLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD00Y2IwMTYyNCZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9NaW5lcy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL01pbmVzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9NaW5lcy52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD00Y2IwMTYyNCZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjRjYjAxNjI0XCIsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIl0sIm5hbWVzIjpbIlBsYW5ldFR5cGUiLCJnZXRMaWZlZm9ybVRlY2hub2xvZ3lCb251cyIsInBsYXllciIsInBsYW5ldHMiLCJPYmplY3QiLCJ2YWx1ZXMiLCJmaWx0ZXIiLCJwIiwiaXNNb29uIiwidGVjaG5vbG9neUJvbnVzQnlQbGFuZXQiLCJtYXAiLCJpZCIsImxldmVsVGVjaG5vbG9neUJvbnVzIiwibGYiLCJsaWZlZm9ybUV4cGVyaWVuY2UiLCJwbGFuZXQiLCJhY3RpdmVMaWZlZm9ybSIsImxldmVsQm9udXMiLCJ0ZWNobm9sb2d5Qm9udXNCdWlsZGluZ3MiLCJ0ZWNobm9sb2d5IiwidGVjaG5vbG9neUJvbnVzIiwicmVkdWNlIiwidG90YWwiLCJidWlsZGluZyIsImxldmVsIiwibGlmZWZvcm1CdWlsZGluZ3MiLCJ0eXBlIiwiYm9udXMiLCJ0b3RhbFRlY2hCb251cyIsInJlbmRlciIsIl92bSIsInRoaXMiLCJfaCIsIiRjcmVhdGVFbGVtZW50IiwiX2MiLCJfc2VsZiIsImF0dHJzIiwiY29sdW1ucyIsIml0ZW1zIiwiZm9vdGVySXRlbXMiLCJzY29wZWRTbG90cyIsIl91Iiwia2V5IiwiZm4iLCJCdWlsZGluZ1R5cGUiLCJtZXRhbE1pbmUiLCJwcm94eSIsImNyeXN0YWxNaW5lIiwiZGV1dGVyaXVtU3ludGhlc2l6ZXIiLCJzb2xhclBsYW50IiwiZnVzaW9uUmVhY3RvciIsIlNoaXBUeXBlIiwiY3Jhd2xlciIsInJlZiIsInZhbHVlIiwic3RhdGljQ2xhc3MiLCJkb21Qcm9wcyIsIl9zIiwibmFtZSIsIl92IiwiY29vcmRpbmF0ZXMiLCJnYWxheHkiLCJzeXN0ZW0iLCJwb3NpdGlvbiIsImNsYXNzIiwiYWN0aXZlIiwibWF4aW11bSIsIiRpMThuIiwiJG4iLCJhdmFpbGFibGUiLCIkdCIsImV4dGVuc2lvbiIsImVtcGlyZSIsInByb2R1Y3Rpb24iLCJtaW5lcyIsImF2Z051bWJlckZvcm1hdCIsInN0YXRpY1N0eWxlIiwiY3Jhd2xlcnNUb1JlYWNoTGltaXQiLCJlZmZlY3RpdmVDcmF3bGVyTGltaXQiLCJzdGF0aWNSZW5kZXJGbnMiLCJnZXRMaWZlZm9ybUNvbGxlY3RvckNsYXNzQm9udXMiLCJ0b3RhbENvbGxlY3RvckJvbnVzIiwiTGlmZWZvcm1UeXBlIiwidGVjaEZhY3RvciIsIkxpZmVmb3JtVGVjaG5vbG9neVR5cGUiLCJjb2xsZWN0b3JCb251c1RlY2hub2xvZ2llcyIsInRlY2giLCJhY3RpdmVMaWZlZm9ybVRlY2hub2xvZ2llcyIsImluY2x1ZGVzIiwiYmFzZUNvbGxlY3RvckJvbnVzIiwibGlmZWZvcm1UZWNobm9sb2dpZXMiLCJnZXRDbGFzc0JvbnVzIiwiUGxheWVyQ2xhc3MiLCJjb2xsZWN0b3JCb251cyIsImdldENyYXdsZXJDb3VudEZvck1heGltdW1Cb29zdCIsImRhdGEiLCJjcmF3bGVyUHJvZHVjdGl2aXR5IiwiZ2V0Q3Jhd2xlclByb2R1Y3Rpb25GYWN0b3IiLCJwbGF5ZXJDbGFzcyIsInNlcnZlclNldHRpbmdzIiwiY29sbGVjdG9yQ3Jhd2xlclByb2R1Y3Rpb25GYWN0b3JCb251cyIsImNvbGxlY3RvckNsYXNzQm9udXMiLCJjcmF3bGVyUHJvZHVjdGlvbkJvbnVzIiwiTWF0aCIsImNlaWwiLCJjcmF3bGVyTWF4UHJvZHVjdGlvbkZhY3RvciIsImNyYXdsZXJQcm9kdWN0aW9uRmFjdG9yUGVyVW5pdCIsImNvbXBvbmVudCJdLCJzb3VyY2VSb290IjoiIn0=