"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[3422],{3422:(e,t,a)=>{a.r(t),a.d(t,{default:()=>T});var s=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"import-export"},[a("div",{staticClass:"fake-table"},[a("div",{staticClass:"fake-table-header"},[a("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.importExport.export.header)}})]),a("div",{staticClass:"fake-table-body"},[a("div",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.importExport.export.description)}}),a("span",[a("checkbox",{attrs:{label:e.$i18n.$t.extension.settings.importExport.export.includeUniverseHistory},model:{value:e.exportUniverseHistory,callback:function(t){e.exportUniverseHistory=t},expression:"exportUniverseHistory"}})],1),a("button",{attrs:{disabled:e.isExporting},on:{click:function(t){return e.exportData()}}},[a("span",{staticClass:"mdi mdi-database-export"}),a("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.importExport.export.button)}})]),e.isExporting?[a("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.importExport.export.wait)}}),a("loading-spinner")]:e._e()],2)]),a("div",{staticClass:"fake-table"},[a("div",{staticClass:"fake-table-header"},[a("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.importExport.import.header)}})]),a("div",{staticClass:"fake-table-body"},[a("div",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.importExport.import.description)}}),a("input",{ref:"fileInput",attrs:{type:"file",accept:".json",disabled:e.isImporting},on:{input:function(t){return e.onFileSelected()}}}),a("button",{attrs:{disabled:e.isImporting||null==e.file},on:{click:function(t){return e.importData()}}},[a("span",{staticClass:"mdi mdi-database-import"}),a("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.importExport.import.button)}})]),e.isImporting?[a("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.importExport.import.wait)}}),a("loading-spinner"),a("span",{domProps:{textContent:e._s(e.lastImportMessage)}})]:e._e()],2)])])},i=[],n=a(655),r=a(4384),o=a(6882),l=a(4028);function p(e,t,a="data:text/plain;chartset=utf-8"){const s=new Blob([t],{type:a}),i=window.URL.createObjectURL(s),n=document.createElement("a");n.download=e,n.href=i,n.click(),window.URL.revokeObjectURL(i)}var c=a(874),g=a(7545),d=a(6538),m=a(9751),u=a(6864),f=a(1913),b=a(2057),x=a(248),w=a(2382),v=a(1628),y=a(602),h=a(9867),S=a(1731);async function I(e){(0,o.gW)(`data import: ${e.type}`);for(const t of e.accounts)await $(t)}async function $(e){const t=await(0,r.DI)();await t.put("accounts",{serverId:e.serverId,serverLanguage:e.language,id:e.playerId,name:e.playerName}),await t.put("servers",{id:e.serverId,language:e.language,name:e.universeName});const a=await(0,r._N)({...e,userLanguage:"doesnt-really-matter"}),s=a.transaction(["expeditions","combatReports","debrisFieldReports"],"readwrite"),i=s.objectStore("expeditions");for(const r of Object.values(e.data.expeditions))await i.put(r);const n=s.objectStore("combatReports");for(const r of Object.values(e.data.combatReports))await n.put(r);const o=s.objectStore("debrisFieldReports");for(const r of Object.values(e.data.debrisFieldReports))await o.put(r);await s.done}async function j(e,t){const a=await(0,r.DI)(),s=a.transaction(["settings","accounts","servers"],"readwrite");null!=e.settings&&(t?.({type:"importing-settings"}),await s.objectStore("settings").put(e.settings,0)),t?.({type:"importing-basic-accounts-and-servers"});for(const i of e.accounts){const e=await s.objectStore("accounts").get([i.serverId,i.language,i.playerId]),t=e?.linkedAccounts??[];for(const a of i.linkedAccounts??[])t.some((e=>e.id==a.playerId&&e.serverId==a.serverId&&e.serverLanguage==a.language))||t.push({id:a.playerId,serverId:a.serverId,serverLanguage:a.language});await s.objectStore("accounts").put({serverId:i.serverId,serverLanguage:i.language,id:i.playerId,name:i.playerName,linkedAccounts:t})}for(const i of e.servers)await s.objectStore("servers").put({id:i.serverId,language:i.language,name:i.name});await s.done;for(let i=0;i<e.accounts.length;i++){t?.({type:"importing-account",currentIndex:i,total:e.accounts.length,step:{type:"account"}});const a=e.accounts[i],s=await(0,r._N)({...a,userLanguage:"doesnt-really-matter"}),n=s.transaction(["combatReports","debrisFieldReports","expeditions","lifeformDiscoveries","empire","universeSpecificSettings"],"readwrite"),o=n.objectStore("combatReports");for(let r=0;r<a.combatReports.length;r++){t?.({type:"importing-account",currentIndex:i,total:e.accounts.length,step:{type:"combat-reports",currentIndex:r,total:a.combatReports.length}});const s=a.combatReports[r];await o.put(s)}const l=n.objectStore("expeditions");for(let r=0;r<a.expeditions.length;r++){t?.({type:"importing-account",currentIndex:i,total:e.accounts.length,step:{type:"expeditions",currentIndex:r,total:a.expeditions.length}});const s=a.expeditions[r];await l.put(s)}const p=n.objectStore("debrisFieldReports");for(let r=0;r<a.debrisFieldReports.length;r++){t?.({type:"importing-account",currentIndex:i,total:e.accounts.length,step:{type:"debris-fields",currentIndex:r,total:a.debrisFieldReports.length}});const s=a.debrisFieldReports[r];await p.put(s)}const c=n.objectStore("lifeformDiscoveries"),g=a.lifeformDiscoveries??[];for(let r=0;r<g.length;r++){t?.({type:"importing-account",currentIndex:i,total:e.accounts.length,step:{type:"lifeform-discoveries",currentIndex:r,total:g.length}});const a=g[r];await c.put(a)}null!=a.universeSpecificSettings&&(t?.({type:"importing-account",currentIndex:i,total:e.accounts.length,step:{type:"universe-specific-settings"}}),await n.objectStore("universeSpecificSettings").put(a.universeSpecificSettings,0)),t?.({type:"importing-account",currentIndex:i,total:e.accounts.length,step:{type:"empire",subtype:"empire-data"}});const d=n.objectStore("empire");await d.put(a.empire.allianceClass,"allianceClass"),await d.put(a.empire.playerClass,"playerClass"),await d.put(a.empire.research,"research"),null!=a.empire.lifeformExperience&&await d.put(a.empire.lifeformExperience,"lifeformExperience"),null!=a.empire.planetOrder&&await d.put(a.empire.planetOrder,"planetOrder"),null!=a.empire.officers&&await d.put(a.empire.officers,"officers");for(let r=0;r<a.empire.planets.length;r++){t?.({type:"importing-account",currentIndex:i,total:e.accounts.length,step:{type:"empire",subtype:"planets",currentIndex:r,total:a.empire.planets.length}});const s=a.empire.planets[r],n={id:s.id,coordinates:s.coordinates,maxTemperature:s.maxTemperature,name:s.name};await d.put(n,`planet.${s.id}`),await d.put(s.buildings,`planet.${s.id}.buildings`),await d.put(s.productionSettings,`planet.${s.id}.productionSettings`),await d.put(s.activeItems,`planet.${s.id}.activeItems`),await d.put(s.defenses,`planet.${s.id}.defenses`),await d.put(s.ships,`planet.${s.id}.ships`),null!=s.activeLifeform&&await d.put(s.activeLifeform,`planet.${s.id}.lifeform`),null!=s.lifeformBuildings&&await d.put(s.lifeformBuildings,`planet.${s.id}.lifeformBuildings`),null!=s.lifeformTechnologies&&await d.put(s.lifeformTechnologies,`planet.${s.id}.lifeformTechnologies`),null!=s.activeLifeformTechnologies&&await d.put(s.activeLifeformTechnologies,`planet.${s.id}.activeLifeformTechnologies`)}for(let r=0;r<a.empire.moons.length;r++){t?.({type:"importing-account",currentIndex:i,total:e.accounts.length,step:{type:"empire",subtype:"moons",currentIndex:r,total:a.empire.moons.length}});const s=a.empire.moons[r],n={id:s.id,coordinates:s.coordinates,name:s.name};await d.put(n,`moon.${s.id}`),await d.put(s.buildings,`moon.${s.id}.buildings`),await d.put(s.activeItems,`moon.${s.id}.activeItems`),await d.put(s.defenses,`moon.${s.id}.defenses`),await d.put(s.ships,`moon.${s.id}.ships`)}await n.done}for(let i=0;i<e.servers.length;i++){const a=e.servers[i],s=a.universeHistory;if(null==s)continue;const n=await(0,r.gn)({language:a.language,serverId:a.serverId,playerId:0,userLanguage:"doesnt-really-matter"}),o=n.transaction(["_lastUpdate","players","playerNames","playerAlliances","playerStates","playerScores","alliances","allianceTags","allianceNames","allianceMembers","allianceStates","allianceScores","planets","planetNames","planetStates","planetCoordinates","moons","moonNames","moonStates"],"readwrite");await o.objectStore("_lastUpdate").put(s._lastUpdate,0);const l=["players","playerNames","playerAlliances","playerStates","playerScores","alliances","allianceTags","allianceNames","allianceMembers","allianceStates","allianceScores","planets","planetNames","planetStates","planetCoordinates","moons","moonNames","moonStates"],p=l.map((e=>s[e].length)).reduce(((e,t)=>e+t),0);let c=0;for(const r of l){const a=o.objectStore(r),n=s[r];for(const s of n)t?.({type:"importing-universe-history",currentIndex:i,total:e.servers.length,subIndex:c,subTotal:p}),await a.put(s),c++}await o.done}for(let i=0;i<e.servers.length;i++){const a=e.servers[i];if(t?.({type:"importing-server-settings",currentIndex:i,total:e.servers.length}),null==a.serverSettings)continue;const s=await(0,r.vY)({language:a.language,serverId:a.serverId,playerId:0,userLanguage:"doesnt-really-matter"}),n=s.transaction("serverSettings","readwrite"),o=n.objectStore("serverSettings");for(const e of Object.entries(a.serverSettings)){const[t,a]=e;await o.put(a,t)}await n.done}}var A=a(3418),k=a(9681),E=a(2816);let C=class extends l.w3{fileInput;file=null;exportUniverseHistory=!1;isImporting=!1;isExporting=!1;lastImportMessage="";onFileSelected(){this.file=this.fileInput.files?.[0]??null}async exportData(){this.isExporting=!0;try{const e=await this.getExportData();p(`OGame-Tracker-Export_${(0,c.Z)(Date.now(),"yyyy-MM-dd_HH-mm-ss")}.json`,JSON.stringify(e))}catch(e){(0,o.Yr)(e),alert(this.$i18n.$t.extension.settings.importExport.export.errors.unexpectedError)}finally{this.isExporting=!1}}async getExportData(){const e=await(0,r.DI)(),t=await e.get("settings",0),a=await e.getAll("accounts"),s=[];for(const o of a){const e=await(0,r._N)({serverId:o.serverId,language:o.serverLanguage,playerId:o.id,userLanguage:"doesnt-really-matter"}),t=e.transaction(["combatReports","expeditions","debrisFieldReports","lifeformDiscoveries","universeSpecificSettings","empire"],"readonly"),a=await t.objectStore("combatReports").getAll(),i=await t.objectStore("expeditions").getAll(),n=await t.objectStore("debrisFieldReports").getAll(),l=await t.objectStore("lifeformDiscoveries").getAll(),p=await t.objectStore("universeSpecificSettings").get(0),c=await this.getExportEmpire(t);await t.done,s.push({language:o.serverLanguage,serverId:o.serverId,playerId:o.id,playerName:o.name,linkedAccounts:o.linkedAccounts?.map((e=>({language:e.serverLanguage,serverId:e.serverId,playerId:e.id}))),combatReports:a,expeditions:i,debrisFieldReports:n,lifeformDiscoveries:l,universeSpecificSettings:p,empire:c})}const i=await e.getAll("servers"),n=[];for(const r of i){let e;this.exportUniverseHistory&&(e=await this.getExportUniverseHistory(r));const t=await this.getExportServerSettings(r);n.push({serverId:r.id,language:r.language,name:r.name,universeHistory:e,serverSettings:t})}return{type:"v2-export",settings:t,accounts:s,servers:n}}async getExportServerSettings(e){const t=await(0,r.vY)({serverId:e.id,language:e.language,playerId:0,userLanguage:"doesnt-really-matter"}),a=t.transaction("serverSettings","readonly"),s=a.objectStore("serverSettings"),i=await s.getAllKeys();if(0==i.length)return void await a.done;const n=i.filter((e=>"_lastUpdate"!=e)),o={};for(const r of n){const e=await s.get(r);o[r]=e}return await a.done,o}async getExportUniverseHistory(e){const t=await(0,r.gn)({serverId:e.id,language:e.language,playerId:0,userLanguage:"doesnt-really-matter"}),a=t.transaction(["_lastUpdate","players","playerNames","playerAlliances","playerStates","playerScores","alliances","allianceTags","allianceNames","allianceMembers","allianceStates","allianceScores","planets","planetNames","planetStates","planetCoordinates","moons","moonNames","moonStates"],"readonly"),s=await a.objectStore("_lastUpdate").get(0);if(null==s)return void await a.done;const i={_lastUpdate:s,players:await a.objectStore("players").getAll(),playerNames:await a.objectStore("playerNames").getAll(),playerAlliances:await a.objectStore("playerAlliances").getAll(),playerStates:await a.objectStore("playerStates").getAll(),playerScores:await a.objectStore("playerScores").getAll(),alliances:await a.objectStore("alliances").getAll(),allianceTags:await a.objectStore("allianceTags").getAll(),allianceNames:await a.objectStore("allianceNames").getAll(),allianceMembers:await a.objectStore("allianceMembers").getAll(),allianceStates:await a.objectStore("allianceStates").getAll(),allianceScores:await a.objectStore("allianceScores").getAll(),planets:await a.objectStore("planets").getAll(),planetNames:await a.objectStore("planetNames").getAll(),planetStates:await a.objectStore("planetStates").getAll(),planetCoordinates:await a.objectStore("planetCoordinates").getAll(),moons:await a.objectStore("moons").getAll(),moonNames:await a.objectStore("moonNames").getAll(),moonStates:await a.objectStore("moonStates").getAll()};return await a.done,i}async getExportEmpire(e){const t=e.objectStore("empire"),a=await t.get("allianceClass")??h.Ck.none,s=await t.get("playerClass")??y.D0.none,i=await t.get("research")??(0,m.a)(S.N,0),n=await t.get("officers")??{admiral:!1,commander:!1,engineer:!1,geologist:!1,technocrat:!1},r=await t.get("lifeformExperience")??(0,m.a)(A.p3,0),o=await t.getAllKeys(),l=await t.get("planetOrder")??[],p=l.filter((e=>o.includes(`planet.${e}`))),c=[];for(const g of p){const e=await t.get(`planet.${g}`)??(0,d.A)(`got planet with id '${g}'`),a=await t.get(`planet.${g}.buildings`)??(0,m.a)(f.Ne,0),i=await t.get(`planet.${g}.ships`)??(0,m.a)(x.GI,0),n=await t.get(`planet.${g}.defenses`)??(0,m.a)(v.Q,(e=>![w.r.smallShieldDome,w.r.largeShieldDome].includes(e)&&0)),r=await t.get(`planet.${g}.activeItems`)??{},o=await t.get(`planet.${g}.productionSettings`)??{[u.A.metalMine]:100,[u.A.crystalMine]:100,[u.A.deuteriumSynthesizer]:100,[u.A.solarPlant]:100,[u.A.fusionReactor]:100,[b.g.solarSatellite]:100,[b.g.crawler]:s==y.D0.collector?150:100},l=await t.get(`planet.${g}.lifeform`)??A.e5.none,p=await t.get(`planet.${g}.lifeformBuildings`)??(0,m.a)(E.YS,0),h=await t.get(`planet.${g}.lifeformTechnologies`)??(0,m.a)(k.Vs,0),S=await t.get(`planet.${g}.activeLifeformTechnologies`)??[];c.push({id:e.id,name:e.name,coordinates:e.coordinates,maxTemperature:e.maxTemperature,buildings:a,ships:i,defenses:n,activeItems:r,productionSettings:o,activeLifeform:l,lifeformBuildings:p,lifeformTechnologies:h,activeLifeformTechnologies:S})}const I=o.filter((e=>e.startsWith("moon.")&&2==e.split(".").length)).map((e=>(0,g.Y)(e.split(".")[1],10))),$=[];for(const g of I){const e=await t.get(`moon.${g}`)??(0,d.A)(`got moon with id '${g}'`),a=await t.get(`moon.${g}.buildings`)??(0,m.a)(f.RP,0),s=await t.get(`moon.${g}.ships`)??(0,m.a)(x.GI,0),i=await t.get(`moon.${g}.defenses`)??(0,m.a)(v.Q,(e=>![w.r.smallShieldDome,w.r.largeShieldDome].includes(e)&&0)),n=await t.get(`moon.${g}.activeItems`)??{};$.push({id:e.id,name:e.name,coordinates:e.coordinates,buildings:a,ships:s,defenses:i,activeItems:n})}return{allianceClass:a,playerClass:s,research:i,planets:c,moons:$,officers:n,planetOrder:l,lifeformExperience:r}}async importData(){if(null!=this.file){this.isImporting=!0;try{const e=await this.file.text(),t=JSON.parse(e);switch(t?.type){case"v1-to-v2-export":await I(t);break;case"v2-export":await j(t,(e=>this.onImportProgress_v2(e)));break;default:alert(this.$i18n.$t.extension.settings.importExport.import.errors.invalidFormat);break}this.file=null,this.fileInput.value="",window.location.reload()}catch(e){(0,o.gW)(e),alert(this.$i18n.$t.extension.settings.importExport.import.errors.unexpectedError)}finally{this.isImporting=!1}}}onImportProgress_v2(e){const t=100;switch(e.type){case"importing-settings":this.lastImportMessage=this.$i18n.$t.extension.settings.importExport.importCallbacks.importingSettings;break;case"importing-basic-accounts-and-servers":this.lastImportMessage=this.$i18n.$t.extension.settings.importExport.importCallbacks.importingBasicData;break;case"importing-server-settings":this.lastImportMessage=`${this.$i18n.$t.extension.settings.importExport.importCallbacks.importingServerSettings} (${e.currentIndex+1}/${e.total})`;break;case"importing-account":switch(e.step.type){case"account":this.lastImportMessage=this.$i18n.$t.extension.settings.importExport.importCallbacks.importingAccounts(e.currentIndex,e.total,"account",0,0,0,0);break;case"combat-reports":case"expeditions":case"debris-fields":case"lifeform-discoveries":if(e.step.currentIndex%t!=0&&e.step.currentIndex+1!=e.step.total)return;this.lastImportMessage=this.$i18n.$t.extension.settings.importExport.importCallbacks.importingAccounts(e.currentIndex,e.total,e.step.type,e.step.currentIndex,e.step.total,0,0);break;case"universe-specific-settings":this.lastImportMessage=this.$i18n.$t.extension.settings.importExport.importCallbacks.importingAccounts(e.currentIndex,e.total,"universe-specific-settings",0,0,0,0);break;case"empire":switch(e.step.subtype){case"empire-data":this.lastImportMessage=this.$i18n.$t.extension.settings.importExport.importCallbacks.importingAccounts(e.currentIndex,e.total,"empire.data",0,0,0,0);break;case"planets":case"moons":this.lastImportMessage=this.$i18n.$t.extension.settings.importExport.importCallbacks.importingAccounts(e.currentIndex,e.total,`empire.${e.step.subtype}`,e.step.currentIndex,e.step.total,0,0);break}break}break;case"importing-universe-history":if(e.subIndex%t!=0&&e.subIndex+1!=e.subTotal)return;this.lastImportMessage=this.$i18n.$t.extension.settings.importExport.importCallbacks.importingUniverseHistories(e.currentIndex,e.total,e.subIndex,e.subTotal);break}}};(0,n.gn)([(0,l.Rl)()],C.prototype,"fileInput",void 0),C=(0,n.gn)([(0,l.wA)({})],C);const N=C,R=N;var _=a(1001),L=(0,_.Z)(R,s,i,!1,null,"18f455cc",null);const T=L.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,