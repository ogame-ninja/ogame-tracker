"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[4346],{3420:(e,t,s)=>{s.d(t,{s:()=>n});class n{#e;#t;#s;constructor(e){this.#e=e.comparator,this.#t=e.maxSize,this.#s=[]}get values(){return[...this.#s]}add(e){if(0==this.#s.length)return void this.#s.push(e);const t=this.#s[0];if(this.#e(e,t)<0)return this.#s.unshift(e),void this.#n();const s=this.#s.findIndex((t=>this.#e(e,t)<0));-1==s?this.#s.push(e):this.#s.splice(s,0,e),this.#n()}#n(){this.#s.splice(this.#t)}}},8288:(e,t,s)=>{s.d(t,{B:()=>o});var n=s(7331),i=s(917);function o(e,t={}){const s={metal:0,crystal:0,deuterium:0,...e},o={metal:1,crystal:1,deuterium:1,...t};n.P.forEach((e=>s[e]*=o[e]));const{mode:a,msu:r,dsu:l}=i.V.settings.conversionRates;return"msu"==a?s.metal+s.crystal*r.crystal+s.deuterium*r.deuterium:s.deuterium+s.crystal/l.crystal+s.metal/l.metal}},2836:(e,t,s)=>{s.d(t,{Z:()=>h});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return e.size==e.ExpeditionEventSize.small?s("span",{staticClass:"mdi mdi-hexagon-slice-1",style:{color:e.colors.small}}):e.size==e.ExpeditionEventSize.medium?s("span",{staticClass:"mdi mdi-hexagon-slice-3",style:{color:e.colors.medium}}):e.size==e.ExpeditionEventSize.large?s("span",{staticClass:"mdi mdi-hexagon-slice-5",style:{color:e.colors.large}}):e._e()},i=[],o=s(655),a=s(776),r=s(4028),l=s(917);let d=class extends r.w3{size;ExpeditionEventSize=a.Mm;get colors(){return l.V.settings.colors.expeditions.sizes}};(0,o.gn)([(0,r.fI)({required:!0,type:String})],d.prototype,"size",void 0),d=(0,o.gn)([(0,r.wA)({})],d);const m=d,u=m;var c=s(1001),p=(0,c.Z)(u,n,i,!1,null,null,null);const h=p.exports},4346:(e,t,s)=>{s.r(t),s.d(t,{default:()=>_});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return e.loading?s("loading-spinner"):s("div",[e._l(e.keys,(function(t){return s("div",{key:t,staticClass:"find-column"},[s("h3",{domProps:{textContent:e._s(e.$i18n.$t.extension.expeditions.topFinds.title(e.keyTranslations[t]))}}),s("grid-table",{style:"--color: "+e.colors[t],attrs:{inline:"",columns:e.columns,items:e.largestFinds[t].values},scopedSlots:e._u([{key:"cell-size",fn:function(e){var t=e.value;return[s("expedition-size-icon",{staticClass:"scaled-icon",attrs:{size:t}})]}},{key:"cell-amount",fn:function(t){var n=t.value;return[s("span",{domProps:{textContent:e._s(e.$i18n.$n(n))}})]}},{key:"cell-date",fn:function(t){var n=t.value;return[s("span",{domProps:{textContent:e._s(e.$i18n.$d(n,"date"))}})]}}],null,!0)})],1)})),s("div",{staticClass:"find-column",style:"--color: "+e.colors.shipUnitsConverted},[s("h3",{domProps:{textContent:e._s(e.$i18n.$t.extension.expeditions.topFinds.title(e.$i18n.$t.extension.expeditions.topFinds.shipAmount))}}),s("select",{directives:[{name:"model",rawName:"v-model.number",value:e.selectedShip,expression:"selectedShip",modifiers:{number:!0}}],staticStyle:{display:"block","margin-bottom":"4px"},on:{change:function(t){var s=Array.prototype.filter.call(t.target.options,(function(e){return e.selected})).map((function(t){var s="_value"in t?t._value:t.value;return e._n(s)}));e.selectedShip=t.target.multiple?s:s[0]}}},e._l(e.ShipTypes,(function(t){return s("option",{key:t,domProps:{value:t,textContent:e._s(e.$i18n.$t.ogame.ships[t])}})})),0),s("grid-table",{attrs:{inline:"",columns:e.shipColumns,items:e.largestFinds.shipAmounts[e.selectedShip].values},scopedSlots:e._u([{key:"cell-amount",fn:function(t){var n=t.value;return[s("span",{domProps:{textContent:e._s(e.$i18n.$n(n))}})]}},{key:"cell-date",fn:function(t){var n=t.value;return[s("span",{domProps:{textContent:e._s(e.$i18n.$d(n,"date"))}})]}}])})],1)],2)},i=[],o=s(655),a=s(5424),r=s(7331),l=s(4028),d=s(7090),m=s(2836),u=s(9563),c=s(917),p=s(7048),h=s(248),x=s(2057),g=s(3420),v=s(8288),y=s(9751);let $=class extends l.w3{loading=!0;ShipTypes=u.x;largestFinds={metal:new g.s({comparator:(e,t)=>t.amount-e.amount,maxSize:25}),crystal:new g.s({comparator:(e,t)=>t.amount-e.amount,maxSize:25}),deuterium:new g.s({comparator:(e,t)=>t.amount-e.amount,maxSize:25}),shipUnits:new g.s({comparator:(e,t)=>t.amount-e.amount,maxSize:25}),shipUnitsConverted:new g.s({comparator:(e,t)=>t.amount-e.amount,maxSize:25}),darkMatter:new g.s({comparator:(e,t)=>t.amount-e.amount,maxSize:25}),shipAmounts:(0,y.a)(u.x,(e=>new g.s({comparator:(e,t)=>t.amount-e.amount,maxSize:25})))};keys=["metal","crystal","deuterium","shipUnits","shipUnitsConverted","darkMatter"];selectedShip=x.g.espionageProbe;get keyTranslations(){return{metal:this.$i18n.$t.ogame.resources.metal,crystal:this.$i18n.$t.ogame.resources.crystal,deuterium:this.$i18n.$t.ogame.resources.deuterium,shipUnits:this.$i18n.$t.extension.expeditions.topFinds.shipUnits,shipUnitsConverted:this.$i18n.$t.extension.expeditions.topFinds.shipUnits+` (${"msu"==c.V.settings.conversionRates.mode?this.$i18n.$t.extension.common.msu:this.$i18n.$t.extension.common.dsu})`,darkMatter:this.$i18n.$t.ogame.premium.darkMatter}}get colors(){const e=c.V.settings.colors;return{metal:(0,p.U)(e.resources.metal),crystal:(0,p.U)(e.resources.crystal),deuterium:(0,p.U)(e.resources.deuterium),darkMatter:(0,p.U)(e.expeditions.events.darkMatter),shipUnits:(0,p.U)(e.expeditions.events.fleet),shipUnitsConverted:(0,p.U)(e.expeditions.events.fleet)}}get columns(){return[{key:"size",label:this.$i18n.$t.extension.expeditions.topFinds.size},{key:"amount",label:this.$i18n.$t.extension.expeditions.topFinds.amount},{key:"date",label:this.$i18n.$t.extension.expeditions.topFinds.date}]}get shipColumns(){return[{key:"amount",label:this.$i18n.$t.extension.expeditions.topFinds.amount},{key:"date",label:this.$i18n.$t.extension.expeditions.topFinds.date}]}async mounted(){const e=await d.m.getRawData();e.forEach((e=>{e.type==a.r.resources?this.addResourceExpo(e):e.type==a.r.fleet?this.addFleetExpo(e):e.type==a.r.darkMatter&&this.addDarkMatterExpo(e)})),this.loading=!1}addDarkMatterExpo(e){this.largestFinds.darkMatter.add({size:e.size,amount:e.darkMatter,date:e.date})}addFleetExpo(e){{const t=u.x.map((t=>{const s=e.fleet[t]??0,n=h.lp[t],i=n.cost;return(i.metal+i.crystal)*s})).reduce(((e,t)=>e+t),0);this.largestFinds.shipUnits.add({size:e.size,amount:t,date:e.date})}{const t=u.x.map((t=>{const s=e.fleet[t]??0,n=h.lp[t],i=n.cost;return(0,v.B)(i)*s})).reduce(((e,t)=>e+t),0);this.largestFinds.shipUnitsConverted.add({size:e.size,amount:t,date:e.date})}u.x.forEach((t=>{const s=e.fleet[t]??0;0!=s&&this.largestFinds.shipAmounts[t].add({date:e.date,amount:s})}))}addResourceExpo(e){const t=e.resources.metal>0?r._.metal:e.resources.crystal>0?r._.crystal:r._.deuterium;0!=e.resources[t]&&this.largestFinds[t].add({size:e.size,amount:e.resources[t],date:e.date})}};$=(0,o.gn)([(0,l.wA)({components:{ExpeditionSizeIcon:m.Z}})],$);const f=$,z=f;var k=s(1001),S=(0,k.Z)(z,n,i,!1,null,"47c4aff4",null);const _=S.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,