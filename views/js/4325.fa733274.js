"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[4325],{8288:(e,t,s)=>{s.d(t,{B:()=>a});var n=s(7331),r=s(917);function a(e,t={}){const s={metal:0,crystal:0,deuterium:0,...e},a={metal:1,crystal:1,deuterium:1,...t};n.P.forEach((e=>s[e]*=a[e]));const{mode:o,msu:i,dsu:u}=r.V.settings.conversionRates;return"msu"==o?s.metal+s.crystal*i.crystal+s.deuterium*i.deuterium:s.deuterium+s.crystal/u.crystal+s.metal/u.metal}},4325:(e,t,s)=>{s.r(t),s.d(t,{default:()=>$});var n=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"scrapyard-merchant"},[s("div",[s("input",{attrs:{type:"number",min:"35",max:"75",step:"1"},domProps:{value:e.percentage},on:{input:function(t){return e.setPercentage(t)}}}),s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.tools.scrapyardMerchant.percentage)}})]),s("grid-table",{staticClass:"scrap-table",attrs:{columns:e.columns,items:e.items,"footer-items":e.footerItems,sticky:"","sticky-footer":""},scopedSlots:e._u([{key:"cell-type",fn:function(t){var n=t.item;return[n.type in e.ships?[s("span",{staticClass:"mr-2",domProps:{textContent:e._s(e.$i18n.$t.ogame.ships[n.type])}}),s("o-ship",{attrs:{ship:n.type,size:"24px"}})]:n.type in e.defenses?[s("span",{staticClass:"mr-2",domProps:{textContent:e._s(e.$i18n.$t.ogame.defenses[n.type])}}),s("o-defense",{attrs:{defense:n.type,size:"24px"}})]:e._e()]}},{key:"cell-count",fn:function(t){var n=t.item;return[n.type in e.ships?s("input",{directives:[{name:"model",rawName:"v-model.number",value:e.ships[n.type],expression:"ships[item.type]",modifiers:{number:!0}}],attrs:{type:"number",min:"0",step:"1"},domProps:{value:e.ships[n.type]},on:{input:function(t){t.target.composing||e.$set(e.ships,n.type,e._n(t.target.value))},blur:function(t){return e.$forceUpdate()}}}):n.type in e.defenses?s("input",{directives:[{name:"model",rawName:"v-model.number",value:e.defenses[n.type],expression:"defenses[item.type]",modifiers:{number:!0}}],attrs:{type:"number",min:"0",step:"1"},domProps:{value:e.defenses[n.type]},on:{input:function(t){t.target.composing||e.$set(e.defenses,n.type,e._n(t.target.value))},blur:function(t){return e.$forceUpdate()}}}):e._e()]}},{key:"(cell|footer)-"+e.resourcesRegex,fn:function(t){var n=t.match,r=t.item;return[s("span",{domProps:{textContent:e._s(e.$i18n.$n(e.getTotalCost(r)[n.groups.resource]))}})]}},{key:"(cell|footer)-msu-dsu",fn:function(t){var n=t.item;return[s("span",{domProps:{textContent:e._s(e.$i18n.$n(e.getMsuOrDsu(e.getTotalCost(n))))}})]}}],null,!0)})],1)},r=[],a=s(655),o=s(4028),i=s(1628),u=s(248),c=s(9751),m=s(5128),p=s(8288),l=s(917);let d=class extends o.w3{resourcesRegex="(?<resource>metal|crystal|deuterium)";percentage=35;get percentageComputed(){return this.percentage}set percentageComputed(e){this.percentage=Math.max(35,Math.min(75,Math.trunc(e)))}ships=(0,c.a)(u.GI,0);defenses=(0,c.a)(i.Q,0);get columns(){return[{key:"type"},{key:"count",label:this.$i18n.$t.extension.tools.scrapyardMerchant.count},{key:"metal",label:this.$i18n.$t.ogame.resources.metal},{key:"crystal",label:this.$i18n.$t.ogame.resources.crystal},{key:"deuterium",label:this.$i18n.$t.ogame.resources.deuterium},{key:"msu-dsu",label:`${this.$i18n.$t.extension.common.resourceUnits} (${this.conversionModeText})`}]}get conversionModeText(){return"msu"==l.V.settings.conversionRates.mode?this.$i18n.$t.extension.common.msu:this.$i18n.$t.extension.common.dsu}getTotalCost(e){const t=this.percentage/100;if("type"in e){const s="baseSpeed"in e?this.ships[e.type]:this.defenses[e.type];return(0,m.fB)(e.cost,s*t)}return(0,m.aV)(...u.GI.map((e=>(0,m.fB)(u.lp[e].cost,this.ships[e]*t))),...i.Q.map((e=>(0,m.fB)(i.V[e].cost,this.defenses[e]*t))))}getMsuOrDsu(e){return(0,p.B)(e)}footerItems=[{}];get items(){return[...u.GI.map((e=>u.lp[e])),...i.Q.map((e=>i.V[e]))]}async setPercentage(e){const t=e.target,s=parseInt(t.value),n=isNaN(s)?0:Math.max(35,Math.min(75,Math.trunc(s)));this.percentage=s,await this.$nextTick(),this.percentage=n}};d=(0,a.gn)([(0,o.wA)({})],d);const y=d,h=y;var f=s(1001),g=(0,f.Z)(h,n,r,!1,null,"71dff455",null);const $=g.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,