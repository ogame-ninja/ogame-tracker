"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[1112],{4698:(e,t,s)=>{s.d(t,{O:()=>g});var r=s(1821),o=s(3347),n=s(1745),a=s(776),i=s(5424),u=s(612),l=s(6105),c=s(3418),d=s(7331),m=s(2057);function g(e){const t=r.j.locale;r.j.locale=e;const s={dateRanges:[{label:r.j.$t.extension.settings.dateRanges.defaultNames.today,type:"day",skip:0,take:1},{label:r.j.$t.extension.settings.dateRanges.defaultNames.yesterday,type:"day",skip:1,take:1},{label:r.j.$t.extension.settings.dateRanges.defaultNames.currentWeek,type:"week",skip:0,take:1},{label:r.j.$t.extension.settings.dateRanges.defaultNames.lastWeek,type:"week",skip:1,take:1},{label:r.j.$t.extension.settings.dateRanges.defaultNames.currentMonth,type:"month",skip:0,take:1},{type:"all"}],lostShipsResourceUnits:{factor:1,deuteriumFactor:1},resourceBalance:{showDetailedBreakdown:!1,includeExpeditionFoundShipsResourceUnits:!0,includeLostShipsResourceUnits:!0,includeLostLootResources:!0},conversionRates:{mode:"msu",msu:{crystal:1.5,deuterium:3},dsu:{metal:3,crystal:2}},showCellsWithConvertedResourceUnits:!0,expeditionFoundShipsResourceUnits:{factor:1,deuteriumFactor:1},extensionLanguage:e,defaultRoutes:{},colors:{combatResults:{[o.a.won]:"#00c23a",[o.a.draw]:"#aaaaaa",[o.a.lost]:"#d11515"},resources:{[d._.metal]:"#ff5e00",[d._.crystal]:"#1a9fff",[d._.deuterium]:"#1bee8f",totalConverted:"#999999"},ships:{[m.g.lightFighter]:"#2472f3",[m.g.heavyFighter]:"#c72525",[m.g.cruiser]:"#fbbc04",[m.g.battleship]:"#9ecc00",[m.g.bomber]:"#00a95e",[m.g.battlecruiser]:"#075263",[m.g.destroyer]:"#de5200",[m.g.reaper]:"#16a8d4",[m.g.pathfinder]:"#ad135e",[m.g.smallCargo]:"#888888",[m.g.largeCargo]:"#ffffff",[m.g.espionageProbe]:"#4b17da",[m.g.deathStar]:"#262530",[m.g.recycler]:"#8aff8e",[m.g.colonyShip]:"#d7b58e",[m.g.crawler]:"#94b4ff",[m.g.solarSatellite]:"#dd94ff"},expeditions:{events:{[i.r.nothing]:"#404040",[i.r.resources]:"#2242e2",[i.r.fleet]:"#dddddd",[i.r.delay]:"#ff5e00",[i.r.early]:"#00c23a",[i.r.darkMatter]:"#33bcdb",[i.r.pirates]:"#ffb592",[i.r.aliens]:"#92ffdc",[i.r.combat]:"#ffb592",[i.r.item]:"#6f23e1",[i.r.trader]:"#fbbc04",[i.r.lostFleet]:"#d11515"},sizes:{[a.Mm.small]:"#404040",[a.Mm.medium]:"#3e85fe",[a.Mm.large]:"#e01a76","fled-death-star":"#dddddd"},depletion:{[n.q.none]:"#00c23a",[n.q.low]:"#fbbc04",[n.q.medium]:"#ff5e00",[n.q.high]:"#c72525",unknown:"#404040"}},lifeformDiscoveries:{events:{[l.y.nothing]:"#404040",[l.y.lostShip]:"#d11515",[l.y.knownLifeformFound]:"#33bcdb",[l.y.newLifeformFound]:"#00c23a",[l.y.artifacts]:"#fbbc04"},artifactFindingSizes:{[u.k.small]:"#404040",[u.k.medium]:"#3e85fe",[u.k.large]:"#e01a76",[u.k.storageFull]:"#d11515"}},lifeforms:{[c.e5.humans]:"#7ec000",[c.e5.rocktal]:"#df6642",[c.e5.mechas]:"#4b91e7",[c.e5.kaelesh]:"#9863e9"}},universeHistory:{updateTimes:[72e6],enabled:!1,trackHistory:!1},combatTracking:{ignoreEspionageFights:!0},messageTracking:{showSimplifiedResults:!0},debrisFields:{separateExpeditionDebrisFields:!1}};return r.j.locale=t,s}},8288:(e,t,s)=>{s.d(t,{B:()=>n});var r=s(7331),o=s(917);function n(e,t={}){const s={metal:0,crystal:0,deuterium:0,...e},n={metal:1,crystal:1,deuterium:1,...t};r.P.forEach((e=>s[e]*=n[e]));const{mode:a,msu:i,dsu:u}=o.V.settings.conversionRates;return"msu"==a?s.metal+s.crystal*i.crystal+s.deuterium*i.deuterium:s.deuterium+s.crystal/u.crystal+s.metal/u.metal}},9027:(e,t,s)=>{s.d(t,{Z:()=>g});var r=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.combats.ignoreEspionageCombats.title)}})]),s("div",{staticClass:"fake-table-body"},[s("checkbox",{attrs:{value:e.ignoreEspionageCombats,label:e.$i18n.$t.extension.settings.combats.ignoreEspionageCombats.label},on:{input:function(t){return e.setIgnoreEspionageCombats(t)}}})],1)])},o=[],n=s(655),a=s(4028),i=s(917);let u=class extends a.w3{get ignoreEspionageCombats(){return i.V.settings.combatTracking.ignoreEspionageFights}setIgnoreEspionageCombats(e){i.V.updateSettings({...i.V.settings,combatTracking:{ignoreEspionageFights:e}})}};u=(0,n.gn)([(0,a.wA)({})],u);const l=u,c=l;var d=s(1001),m=(0,d.Z)(c,r,o,!1,null,"3b222f56",null);const g=m.exports},6597:(e,t,s)=>{s.d(t,{Z:()=>g});var r=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"conversion-rate-settings fake-table"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.title)}})]),s("div",{staticClass:"fake-table-body"},[s("select",{domProps:{value:e.conversionMode},on:{input:function(t){return e.setConversionMode(t.target.value)}}},[s("option",{attrs:{value:"msu"},domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.msuLong+" ("+e.$i18n.$t.extension.common.msu+")")}}),s("option",{attrs:{value:"dsu"},domProps:{textContent:e._s(e.$i18n.$t.extension.settings.common.conversionRates.dsuLong+" ("+e.$i18n.$t.extension.common.dsu+")")}})]),"msu"==e.conversionMode?s("span",{staticClass:"inputs"},[s("span",[s("o-resource",{attrs:{resource:"crystal"}}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.msu.crystal,expression:"msu.crystal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"1",max:"3",step:"0.01"},domProps:{value:e.msu.crystal},on:{change:[function(t){e.$set(e.msu,"crystal",e._n(t.target.value))},function(t){return e.updateMsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("o-resource",{attrs:{resource:"metal"}})],1),s("span",[s("o-resource",{attrs:{resource:"deuterium"}}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.msu.deuterium,expression:"msu.deuterium",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"2",max:"5",step:"0.01"},domProps:{value:e.msu.deuterium},on:{change:[function(t){e.$set(e.msu,"deuterium",e._n(t.target.value))},function(t){return e.updateMsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("o-resource",{attrs:{resource:"metal"}})],1)]):s("span",{staticClass:"inputs"},[s("span",[s("o-resource",{attrs:{resource:"metal"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.dsu.metal,expression:"dsu.metal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"2",max:"5",step:"0.01"},domProps:{value:e.dsu.metal},on:{change:[function(t){e.$set(e.dsu,"metal",e._n(t.target.value))},function(t){return e.updateDsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("o-resource",{attrs:{resource:"deuterium"}})],1),s("span",[s("o-resource",{attrs:{resource:"crystal"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.dsu.crystal,expression:"dsu.crystal",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"1",max:"3",step:"0.01"},domProps:{value:e.dsu.crystal},on:{change:[function(t){e.$set(e.dsu,"crystal",e._n(t.target.value))},function(t){return e.updateDsuConversionRates()}],blur:function(t){return e.$forceUpdate()}}}),s("span",{staticClass:"equal mdi mdi-equal"}),s("input",{attrs:{type:"number",readonly:""},domProps:{value:1}}),s("o-resource",{attrs:{resource:"deuterium"}})],1)])])])},o=[],n=s(655),a=s(4028),i=s(917);let u=class extends a.w3{msu={crystal:2,deuterium:3};dsu={metal:3,crystal:2};get msuRates(){return i.V.settings.conversionRates.msu}get dsuRates(){return i.V.settings.conversionRates.dsu}get conversionMode(){return i.V.settings.conversionRates.mode}setConversionMode(e){i.V.updateSettings({...i.V.settings,conversionRates:{...i.V.settings.conversionRates,mode:e}})}onMsuRatesChanged(){const{crystal:e,deuterium:t}=this.msuRates;this.msu.crystal=e,this.msu.deuterium=t}updateMsuConversionRates(){i.V.updateSettings({...i.V.settings,conversionRates:{...i.V.settings.conversionRates,msu:this.msu}})}onDsuRatesChanged(){const{crystal:e,metal:t}=this.dsuRates;this.dsu.crystal=e,this.dsu.metal=t}updateDsuConversionRates(){i.V.updateSettings({...i.V.settings,conversionRates:{...i.V.settings.conversionRates,dsu:this.dsu}})}};(0,n.gn)([(0,a.RL)("msuRates",{immediate:!0})],u.prototype,"onMsuRatesChanged",null),(0,n.gn)([(0,a.RL)("dsuRates",{immediate:!0})],u.prototype,"onDsuRatesChanged",null),u=(0,n.gn)([(0,a.wA)({})],u);const l=u,c=l;var d=s(1001),m=(0,d.Z)(c,r,o,!1,null,"13cde7dd",null);const g=m.exports},2546:(e,t,s)=>{s.d(t,{Z:()=>g});var r=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"fake-table expedition-ship-resource-units-factor-settings"},[s("div",{staticClass:"fake-table-header"},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.settings.combats.resourceUnitFactorsOfLostShips)}})]),s("div",{staticClass:"fake-table-body"},[s("span",{staticClass:"inputs"},[s("span",[s("span",{staticClass:"two-resources"},[s("o-resource",{attrs:{resource:"metal"}}),s("o-resource",{attrs:{resource:"crystal"}})],1),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.factor,expression:"factor",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"0",max:"1",step:"0.01"},domProps:{value:e.factor},on:{change:[function(t){e.factor=e._n(t.target.value)},function(t){return e.updateFactors()}],focus:function(t){e.isFocused=!0},blur:[function(t){return e.onBlur()},function(t){return e.$forceUpdate()}]}})]),s("span",[s("o-resource",{attrs:{resource:"deuterium"}}),s("input",{directives:[{name:"model",rawName:"v-model.number.lazy",value:e.deuteriumFactor,expression:"deuteriumFactor",modifiers:{number:!0,lazy:!0}}],attrs:{type:"number",min:"0",max:"1",step:"0.01"},domProps:{value:e.deuteriumFactor},on:{change:[function(t){e.deuteriumFactor=e._n(t.target.value)},function(t){return e.updateFactors()}],focus:function(t){e.isFocused=!0},blur:[function(t){return e.onBlur()},function(t){return e.$forceUpdate()}]}})],1)])])])},o=[],n=s(655),a=s(4028),i=s(917);let u=class extends a.w3{factor=1;deuteriumFactor=1;isFocused=!1;get factors(){return i.V.settings.lostShipsResourceUnits}onFactorsChanged(){const{factor:e,deuteriumFactor:t}=this.factors;this.isFocused||(this.factor=e,this.deuteriumFactor=t)}updateFactors(){i.V.updateSettings({...i.V.settings,lostShipsResourceUnits:{factor:this.factor,deuteriumFactor:this.deuteriumFactor}})}onBlur(){this.isFocused=!1,this.onFactorsChanged()}};(0,n.gn)([(0,a.RL)("factors",{immediate:!0})],u.prototype,"onFactorsChanged",null),u=(0,n.gn)([(0,a.wA)({})],u);const l=u,c=l;var d=s(1001),m=(0,d.Z)(c,r,o,!1,null,"7b3b1bc9",null);const g=m.exports},1799:(e,t,s)=>{s.d(t,{Z:()=>m});var r=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("button",{staticClass:"reset-button",attrs:{title:e.$i18n.$t.extension.settings.reset},on:{click:function(t){return e.$emit("reset")}}},[s("span",{staticClass:"mdi mdi-refresh"})])},o=[],n=s(655),a=s(4028);let i=class extends a.w3{};i=(0,n.gn)([(0,a.wA)({})],i);const u=i,l=u;var c=s(1001),d=(0,c.Z)(l,r,o,!1,null,"6ca60f84",null);const m=d.exports},7174:(e,t,s)=>{s.d(t,{Z:()=>g});var r=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("grid-table",{staticClass:"color-settings",staticStyle:{width:"max-content"},attrs:{columns:e.columns,items:e.items},scopedSlots:e._u([{key:"header-key",fn:function(t){var r=t.label;return[s("span",{domProps:{textContent:e._s(r)}}),s("reset-button",{on:{reset:function(t){return e.$emit("reset")}}})]}},{key:"cell-key",fn:function(t){var r=t.value;return[s("div",{staticClass:"color-input",on:{click:function(t){e.$refs["colorInput-"+r].click()}}},[s("input",{ref:"colorInput-"+r,attrs:{type:"color"},domProps:{value:e.colors[r]},on:{change:function(t){return e.updateColor(r,t)}}}),s("div",{staticClass:"color-indicator",style:{background:e.colors[r]}}),s("span",{domProps:{textContent:e._s(e.labels[r])}})])]}}])})},o=[],n=s(655),a=s(4028),i=s(1799);let u=class extends a.w3{header;colors;labels;keys;get columns(){return[{key:"key",label:this.header,headerClass:"color-settings-header"}]}get items(){const e=this.keys??Object.keys(this.colors);return e.map((e=>({key:e})))}updateColor(e,t){t.target instanceof HTMLInputElement&&(this.colors={...this.colors,[e]:t.target.value})}};(0,n.gn)([(0,a.fI)({required:!0,type:String})],u.prototype,"header",void 0),(0,n.gn)([(0,a.Ey)({required:!0,type:Object})],u.prototype,"colors",void 0),(0,n.gn)([(0,a.fI)({required:!0,type:Object})],u.prototype,"labels",void 0),(0,n.gn)([(0,a.fI)({required:!1,type:Array,default:()=>null})],u.prototype,"keys",void 0),u=(0,n.gn)([(0,a.wA)({components:{ResetButton:i.Z}})],u);const l=u,c=l;var d=s(1001),m=(0,d.Z)(c,r,o,!1,null,"2f24a3e0",null);const g=m.exports},8802:(e,t,s)=>{s.d(t,{Z:()=>v});var r=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("color-settings-table",{attrs:{header:e.$i18n.$t.extension.settings.colors.ships,labels:e.labels,keys:e.keys,value:e.colors},on:{input:function(t){return e.updateColors(t)},reset:function(t){return e.resetColors()}}})},o=[],n=s(655),a=s(9167),i=s(2057),u=s(4698),l=s(917),c=s(4028),d=s(7174);let m=class extends c.w3{get labels(){return{[i.g.lightFighter]:this.$i18n.$t.ogame.ships[i.g.lightFighter],[i.g.heavyFighter]:this.$i18n.$t.ogame.ships[i.g.heavyFighter],[i.g.cruiser]:this.$i18n.$t.ogame.ships[i.g.cruiser],[i.g.battleship]:this.$i18n.$t.ogame.ships[i.g.battleship],[i.g.bomber]:this.$i18n.$t.ogame.ships[i.g.bomber],[i.g.battlecruiser]:this.$i18n.$t.ogame.ships[i.g.battlecruiser],[i.g.destroyer]:this.$i18n.$t.ogame.ships[i.g.destroyer],[i.g.reaper]:this.$i18n.$t.ogame.ships[i.g.reaper],[i.g.pathfinder]:this.$i18n.$t.ogame.ships[i.g.pathfinder],[i.g.smallCargo]:this.$i18n.$t.ogame.ships[i.g.smallCargo],[i.g.largeCargo]:this.$i18n.$t.ogame.ships[i.g.largeCargo],[i.g.espionageProbe]:this.$i18n.$t.ogame.ships[i.g.espionageProbe],[i.g.deathStar]:this.$i18n.$t.ogame.ships[i.g.deathStar],[i.g.recycler]:this.$i18n.$t.ogame.ships[i.g.recycler],[i.g.colonyShip]:this.$i18n.$t.ogame.ships[i.g.colonyShip],[i.g.crawler]:this.$i18n.$t.ogame.ships[i.g.crawler],[i.g.solarSatellite]:this.$i18n.$t.ogame.ships[i.g.solarSatellite]}}keys=[i.g.lightFighter,i.g.heavyFighter,i.g.cruiser,i.g.battleship,i.g.bomber,i.g.battlecruiser,i.g.destroyer,i.g.reaper,i.g.pathfinder,i.g.smallCargo,i.g.largeCargo,i.g.espionageProbe,i.g.deathStar,i.g.recycler,i.g.colonyShip,i.g.crawler,i.g.solarSatellite];get colors(){return l.V.settings.colors.ships}updateColors(e){l.V.updateSettings({...l.V.settings,colors:{...l.V.settings.colors,ships:e}})}resetColors(){const e=(0,u.O)(a.I.de).colors.ships;this.updateColors(e)}};m=(0,n.gn)([(0,c.wA)({components:{ColorSettingsTable:d.Z}})],m);const g=m,p=g;var f=s(1001),h=(0,f.Z)(p,r,o,!1,null,null,null);const v=h.exports},3421:(e,t,s)=>{s.d(t,{Z:()=>h});var r=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("scrollable-chart",{attrs:{datasets:e.computedDatasets,"x-label-formatter":function(t){return e.formatDate(t)},"no-legend":e.noLegend,"hide-tooltip-footer":e.noTooltipFooter},scopedSlots:e._u([{key:"tooltip-footer",fn:function(t){var s=t.datasets;return[e._t("tooltip-footer",null,{datasets:s})]}}],null,!0)})},o=[],n=s(655),a=s(9119),i=s(5347),u=s(9383),l=s(7349),c=s(4028);let d=class extends c.w3{datasets;noLegend;noTooltipFooter;firstDay;itemsPerDay;minDays;get minDay(){const e="number"===typeof this.firstDay?this.firstDay:this.firstDay.getTime(),t=(0,a.Z)(Date.now());return Math.min(e,(0,i.Z)(t,this.minDays-1).getTime())}get computedDatasets(){const e=this.minDay,t=(0,u.Z)((0,a.Z)(Date.now()),e),s=Array.from({length:t+1}).map(((t,s)=>(0,l.Z)(e,s).getTime())),r=s.map((e=>this.itemsPerDay[e]??null)),o=r.filter((e=>null!=e)).length;return this.datasets.map((e=>{const t=r.map((t=>null==t?0:e.getValue(t))),s=t.reduce(((e,t)=>e+t),0);return{key:e.key,color:e.color,label:e.label,values:t.map(((e,t)=>({x:t,y:e}))),filled:e.filled??!0,stack:e.stack??!0,hidePoints:!1,average:1==e.showAverage?s/Math.max(1,o):void 0}}))}formatDate(e){const t=(0,l.Z)(this.minDay,e);return this.$i18n.$d(t,"date")}};(0,n.gn)([(0,c.fI)({required:!0,type:Array})],d.prototype,"datasets",void 0),(0,n.gn)([(0,c.fI)({required:!1,type:Boolean})],d.prototype,"noLegend",void 0),(0,n.gn)([(0,c.fI)({required:!1,type:Boolean})],d.prototype,"noTooltipFooter",void 0),(0,n.gn)([(0,c.fI)({required:!0,type:[Number,Date]})],d.prototype,"firstDay",void 0),(0,n.gn)([(0,c.fI)({required:!0,type:Object})],d.prototype,"itemsPerDay",void 0),(0,n.gn)([(0,c.fI)({required:!1,type:Number,default:()=>30})],d.prototype,"minDays",void 0),d=(0,n.gn)([(0,c.wA)({})],d);const m=d,g=m;var p=s(1001),f=(0,p.Z)(g,r,o,!1,null,null,null);const h=f.exports},1112:(e,t,s)=>{s.r(t),s.d(t,{default:()=>C});var r=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"chart-container"},[s("stats-chart",{attrs:{datasets:e.datasets,firstDay:e.firstDay,itemsPerDay:e.reportsPerDay},scopedSlots:e._u([{key:"tooltip-footer",fn:function(t){var r=t.datasets;return[e.getVisibleDatasets(r).length<r.length?[s("div",{staticClass:"footer-item"},[s("div",{staticClass:"number",domProps:{textContent:e._s(e.$i18n.$n(e.getSum(e.getVisibleDatasets(r))))}}),s("div",{domProps:{textContent:e._s(e.$i18n.$t.extension.common.resourceUnits)}}),s("div",{staticClass:"number",domProps:{textContent:e._s(e.$i18n.$n(e.getConvertedResourceUnits(e.getVisibleDatasets(r))))}}),s("div",{domProps:{textContent:e._s(e.$i18n.$t.extension.common.resourceUnits+" ("+e.conversionModeText+")")}})]),s("hr")]:e._e(),s("div",{staticClass:"footer-item"},[s("div",{staticClass:"number",domProps:{textContent:e._s(e.$i18n.$n(e.getSum(r)))}}),s("div",{domProps:{textContent:e._s(e.$i18n.$t.extension.common.resourceUnits+" ("+e.$i18n.$t.extension.common.total+")")}}),s("div",{staticClass:"number",domProps:{textContent:e._s(e.$i18n.$n(e.getConvertedResourceUnits(r)))}}),s("div",{domProps:{textContent:e._s(e.$i18n.$t.extension.common.resourceUnits+" ("+e.conversionModeText+") ("+e.$i18n.$t.extension.common.total+")")}})])]}}])}),s("floating-menu",{attrs:{left:""},scopedSlots:e._u([{key:"activator",fn:function(){return[s("button",{on:{click:function(t){e.showSettings=!e.showSettings}}},[s("span",{staticClass:"mdi mdi-cog"})])]},proxy:!0}]),model:{value:e.showSettings,callback:function(t){e.showSettings=t},expression:"showSettings"}},[s("conversion-rate-settings"),s("hr"),s("lost-ship-resource-units-factor-settings"),s("hr"),s("combat-tracking-ignore-espionage-combats-settings"),s("hr"),s("ship-color-settings")],1)],1)},o=[],n=s(655),a=s(4028),i=s(3421),u=s(4992),l=s(917),c=s(8802),d=s(7331),m=s(6597),g=s(2546),p=s(9027),f=s(8288);let h=class extends a.w3{showSettings=!1;get colors(){return l.V.settings.colors.resources}get factors(){return l.V.settings.lostShipsResourceUnits}get firstDay(){return u.t.firstDay}get reportsPerDay(){return u.t.dailyResults}get conversionModeText(){return"msu"==l.V.settings.conversionRates.mode?this.$i18n.$t.extension.common.msu:this.$i18n.$t.extension.common.dsu}get datasets(){const e={[d._.metal]:this.factors.factor,[d._.crystal]:this.factors.factor,[d._.deuterium]:this.factors.deuteriumFactor};return[...d.P.map((t=>({key:t,label:this.$i18n.$t.extension.resources[t],color:this.colors[t],filled:!0,getValue:s=>s.lostShips.onExpeditions.resourceUnits[t]*e[t]}))),{key:"total",label:`${this.$i18n.$t.extension.common.resourceUnits} (${"msu"==l.V.settings.conversionRates.mode?this.$i18n.$t.extension.common.msu:this.$i18n.$t.extension.common.dsu})`,color:this.colors.totalConverted,filled:!1,getValue:t=>(0,f.B)(t.lostShips.onExpeditions.resourceUnits,e),stack:!1,showAverage:!0}]}getVisibleDatasets(e){return e.filter((e=>e.visible))}getSum(e){return e.filter((e=>"total"!=e.key)).reduce(((e,t)=>e+t.value),0)}getConvertedResourceUnits(e){return e.reduce(((e,t)=>d.P.includes(t.key)?e+(0,f.B)({[t.key]:t.value}):e),0)}};h=(0,n.gn)([(0,a.wA)({components:{StatsChart:i.Z,ShipColorSettings:c.Z,ConversionRateSettings:m.Z,LostShipResourceUnitsFactorSettings:g.Z,CombatTrackingIgnoreEspionageCombatsSettings:p.Z}})],h);const v=h,y=v;var b=s(1001),$=(0,b.Z)(y,r,o,!1,null,"0780f84a",null);const C=$.exports},7349:(e,t,s)=>{s.d(t,{Z:()=>a});var r=s(3946),o=s(9013),n=s(3882);function a(e,t){(0,n.Z)(2,arguments);var s=(0,o.Z)(e),a=(0,r.Z)(t);return isNaN(a)?new Date(NaN):a?(s.setDate(s.getDate()+a),s):s}},9383:(e,t,s)=>{s.d(t,{Z:()=>c});var r=s(9013),o=s(4262),n=s(9119),a=s(3882),i=864e5;function u(e,t){(0,a.Z)(2,arguments);var s=(0,n.Z)(e),r=(0,n.Z)(t),u=s.getTime()-(0,o.Z)(s),l=r.getTime()-(0,o.Z)(r);return Math.round((u-l)/i)}function l(e,t){var s=e.getFullYear()-t.getFullYear()||e.getMonth()-t.getMonth()||e.getDate()-t.getDate()||e.getHours()-t.getHours()||e.getMinutes()-t.getMinutes()||e.getSeconds()-t.getSeconds()||e.getMilliseconds()-t.getMilliseconds();return s<0?-1:s>0?1:s}function c(e,t){(0,a.Z)(2,arguments);var s=(0,r.Z)(e),o=(0,r.Z)(t),n=l(s,o),i=Math.abs(u(s,o));s.setDate(s.getDate()-n*i);var c=Number(l(s,o)===-n),d=n*(i-c);return 0===d?0:d}},5347:(e,t,s)=>{s.d(t,{Z:()=>a});var r=s(3946),o=s(7349),n=s(3882);function a(e,t){(0,n.Z)(2,arguments);var s=(0,r.Z)(t);return(0,o.Z)(e,-s)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,