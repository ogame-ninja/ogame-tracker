"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[7983],{6205:(e,t,n)=>{n.r(t),n.d(t,{default:()=>B});var s=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("lifeform-bonuses-breakdown",{attrs:{types:e.bonusTypes,technologies:e.techs,planets:e.planets,limits:e.limits}})},l=[],o=n(655),i=n(147),r=n(3418),u=n(4846),a=n(9751),c=n(8395),p=n(1786),f=n(4028),g=n(3894),m=n(7848),h=n(7377);let b=class extends f.w3{bonusTypes=[{key:"fuelReturn",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.fuelReturn.bonus}];technologies=u.Du;get techs(){return this.technologies.map((e=>e.type))}get limits(){const e=(0,m.K)({type:h.f.FuelReturn});return{fuelReturn:t=>null!=e?Math.min(t,e):t}}get planets(){return(0,a.r)(c.p.empire.planetOrder.map((e=>c.p.empire.planets[e])).filter((e=>!e.isMoon)),(e=>e.id),(e=>this.technologies.map((t=>{const n=this.getPlanetBonus(t,e);return{planet:e,technologyType:t.type,bonuses:(0,a.a)(["fuelReturn"],(e=>({base:n.base,buildings:n.buildings,level:n.level,total:n.total})))}}))))}get experience(){return c.p.lifeformExperience}getPlanetBonus(e,t){const n={base:0,level:0,buildings:0,buildingsBoost:0,total:0};if(t.activeLifeform==r.e5.none||!t.activeLifeformTechnologies.includes(e.type))return n;const s=Math.min((0,p.io)(t),(0,m.K)({type:h.f.LifeformResearchBonusBoost})??Number.MAX_SAFE_INTEGER);n.buildingsBoost+=s;const l=e.getFuelReturn(t.lifeformTechnologies[e.type]),o=l*(0,i.g1)(this.experience[t.activeLifeform]),u=l*s,a=l+o+u;return n.base+=l,n.level+=o,n.buildings+=u,n.total+=a,n}};b=(0,o.gn)([(0,f.wA)({components:{LifeformBonusesBreakdown:g.Z}})],b);const d=b,y=d;var v=n(1001),k=(0,v.Z)(y,s,l,!1,null,null,null);const B=k.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,