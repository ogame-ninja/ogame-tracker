"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[7369],{4698:(e,t,s)=>{s.d(t,{O:()=>g});var o=s(1821),r=s(3347),n=s(1745),i=s(776),a=s(5424),l=s(612),c=s(6105),d=s(3418),u=s(7331),f=s(2057);function g(e){const t=o.j.locale;o.j.locale=e;const s={dateRanges:[{label:o.j.$t.extension.settings.dateRanges.defaultNames.today,type:"day",skip:0,take:1},{label:o.j.$t.extension.settings.dateRanges.defaultNames.yesterday,type:"day",skip:1,take:1},{label:o.j.$t.extension.settings.dateRanges.defaultNames.currentWeek,type:"week",skip:0,take:1},{label:o.j.$t.extension.settings.dateRanges.defaultNames.lastWeek,type:"week",skip:1,take:1},{label:o.j.$t.extension.settings.dateRanges.defaultNames.currentMonth,type:"month",skip:0,take:1},{type:"all"}],lostShipsResourceUnits:{factor:1,deuteriumFactor:1},resourceBalance:{showDetailedBreakdown:!1,includeExpeditionFoundShipsResourceUnits:!0,includeLostShipsResourceUnits:!0,includeLostLootResources:!0},conversionRates:{mode:"msu",msu:{crystal:1.5,deuterium:3},dsu:{metal:3,crystal:2}},showCellsWithConvertedResourceUnits:!0,expeditionFoundShipsResourceUnits:{factor:1,deuteriumFactor:1},extensionLanguage:e,defaultRoutes:{},colors:{combatResults:{[r.a.won]:"#00c23a",[r.a.draw]:"#aaaaaa",[r.a.lost]:"#d11515"},resources:{[u._.metal]:"#ff5e00",[u._.crystal]:"#1a9fff",[u._.deuterium]:"#1bee8f",totalConverted:"#999999"},ships:{[f.g.lightFighter]:"#2472f3",[f.g.heavyFighter]:"#c72525",[f.g.cruiser]:"#fbbc04",[f.g.battleship]:"#9ecc00",[f.g.bomber]:"#00a95e",[f.g.battlecruiser]:"#075263",[f.g.destroyer]:"#de5200",[f.g.reaper]:"#16a8d4",[f.g.pathfinder]:"#ad135e",[f.g.smallCargo]:"#888888",[f.g.largeCargo]:"#ffffff",[f.g.espionageProbe]:"#4b17da",[f.g.deathStar]:"#262530",[f.g.recycler]:"#8aff8e",[f.g.colonyShip]:"#d7b58e",[f.g.crawler]:"#94b4ff",[f.g.solarSatellite]:"#dd94ff"},expeditions:{events:{[a.r.nothing]:"#404040",[a.r.resources]:"#2242e2",[a.r.fleet]:"#dddddd",[a.r.delay]:"#ff5e00",[a.r.early]:"#00c23a",[a.r.darkMatter]:"#33bcdb",[a.r.pirates]:"#ffb592",[a.r.aliens]:"#92ffdc",[a.r.combat]:"#ffb592",[a.r.item]:"#6f23e1",[a.r.trader]:"#fbbc04",[a.r.lostFleet]:"#d11515"},sizes:{[i.Mm.small]:"#404040",[i.Mm.medium]:"#3e85fe",[i.Mm.large]:"#e01a76","fled-death-star":"#dddddd"},depletion:{[n.q.none]:"#00c23a",[n.q.low]:"#fbbc04",[n.q.medium]:"#ff5e00",[n.q.high]:"#c72525",unknown:"#404040"}},lifeformDiscoveries:{events:{[c.y.nothing]:"#404040",[c.y.lostShip]:"#d11515",[c.y.knownLifeformFound]:"#33bcdb",[c.y.newLifeformFound]:"#00c23a",[c.y.artifacts]:"#fbbc04"},artifactFindingSizes:{[l.k.small]:"#404040",[l.k.medium]:"#3e85fe",[l.k.large]:"#e01a76",[l.k.storageFull]:"#d11515"}},lifeforms:{[d.e5.humans]:"#7ec000",[d.e5.rocktal]:"#df6642",[d.e5.mechas]:"#4b91e7",[d.e5.kaelesh]:"#9863e9"}},universeHistory:{updateTimes:[72e6],enabled:!1,trackHistory:!1},combatTracking:{ignoreEspionageFights:!0},messageTracking:{showSimplifiedResults:!0},debrisFields:{separateExpeditionDebrisFields:!1}};return o.j.locale=t,s}},1799:(e,t,s)=>{s.d(t,{Z:()=>f});var o=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("button",{staticClass:"reset-button",attrs:{title:e.$i18n.$t.extension.settings.reset},on:{click:function(t){return e.$emit("reset")}}},[s("span",{staticClass:"mdi mdi-refresh"})])},r=[],n=s(655),i=s(4028);let a=class extends i.w3{};a=(0,n.gn)([(0,i.wA)({})],a);const l=a,c=l;var d=s(1001),u=(0,d.Z)(c,o,r,!1,null,"6ca60f84",null);const f=u.exports},7174:(e,t,s)=>{s.d(t,{Z:()=>g});var o=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("grid-table",{staticClass:"color-settings",staticStyle:{width:"max-content"},attrs:{columns:e.columns,items:e.items},scopedSlots:e._u([{key:"header-key",fn:function(t){var o=t.label;return[s("span",{domProps:{textContent:e._s(o)}}),s("reset-button",{on:{reset:function(t){return e.$emit("reset")}}})]}},{key:"cell-key",fn:function(t){var o=t.value;return[s("div",{staticClass:"color-input",on:{click:function(t){e.$refs["colorInput-"+o].click()}}},[s("input",{ref:"colorInput-"+o,attrs:{type:"color"},domProps:{value:e.colors[o]},on:{change:function(t){return e.updateColor(o,t)}}}),s("div",{staticClass:"color-indicator",style:{background:e.colors[o]}}),s("span",{domProps:{textContent:e._s(e.labels[o])}})])]}}])})},r=[],n=s(655),i=s(4028),a=s(1799);let l=class extends i.w3{header;colors;labels;keys;get columns(){return[{key:"key",label:this.header,headerClass:"color-settings-header"}]}get items(){const e=this.keys??Object.keys(this.colors);return e.map((e=>({key:e})))}updateColor(e,t){t.target instanceof HTMLInputElement&&(this.colors={...this.colors,[e]:t.target.value})}};(0,n.gn)([(0,i.fI)({required:!0,type:String})],l.prototype,"header",void 0),(0,n.gn)([(0,i.Ey)({required:!0,type:Object})],l.prototype,"colors",void 0),(0,n.gn)([(0,i.fI)({required:!0,type:Object})],l.prototype,"labels",void 0),(0,n.gn)([(0,i.fI)({required:!1,type:Array,default:()=>null})],l.prototype,"keys",void 0),l=(0,n.gn)([(0,i.wA)({components:{ResetButton:a.Z}})],l);const c=l,d=c;var u=s(1001),f=(0,u.Z)(d,o,r,!1,null,"2f24a3e0",null);const g=f.exports},4898:(e,t,s)=>{s.d(t,{Z:()=>h});var o=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("color-settings-table",{attrs:{header:e.$i18n.$t.extension.settings.colors.lifeformDiscoveries,labels:e.labels,keys:e.keys,value:e.colors},on:{input:function(t){return e.updateColors(t)},reset:function(t){return e.resetColors()}}})},r=[],n=s(655),i=s(9167),a=s(6105),l=s(4698),c=s(917),d=s(4028),u=s(7174);let f=class extends d.w3{get labels(){return{[a.y.nothing]:this.$i18n.$t.extension.empire.lifeforms.eventTypes.nothing,[a.y.lostShip]:this.$i18n.$t.extension.empire.lifeforms.eventTypes.lostShip,[a.y.knownLifeformFound]:this.$i18n.$t.extension.empire.lifeforms.lifeformFound,[a.y.artifacts]:this.$i18n.$t.extension.empire.lifeforms.eventTypes.artifacts}}keys=[a.y.nothing,a.y.lostShip,a.y.knownLifeformFound];get colors(){return c.V.settings.colors.lifeformDiscoveries.events}updateColors(e){c.V.updateSettings({...c.V.settings,colors:{...c.V.settings.colors,lifeformDiscoveries:{...c.V.settings.colors.lifeformDiscoveries,events:e}}})}resetColors(){const e=(0,l.O)(i.I.de).colors.lifeformDiscoveries.events;this.updateColors(e)}};f=(0,n.gn)([(0,d.wA)({components:{ColorSettingsTable:u.Z}})],f);const g=f,m=g;var p=s(1001),y=(0,p.Z)(m,o,r,!1,null,null,null);const h=y.exports},3421:(e,t,s)=>{s.d(t,{Z:()=>y});var o=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("scrollable-chart",{attrs:{datasets:e.computedDatasets,"x-label-formatter":function(t){return e.formatDate(t)},"no-legend":e.noLegend,"hide-tooltip-footer":e.noTooltipFooter},scopedSlots:e._u([{key:"tooltip-footer",fn:function(t){var s=t.datasets;return[e._t("tooltip-footer",null,{datasets:s})]}}],null,!0)})},r=[],n=s(655),i=s(9119),a=s(5347),l=s(9383),c=s(7349),d=s(4028);let u=class extends d.w3{datasets;noLegend;noTooltipFooter;firstDay;itemsPerDay;minDays;get minDay(){const e="number"===typeof this.firstDay?this.firstDay:this.firstDay.getTime(),t=(0,i.Z)(Date.now());return Math.min(e,(0,a.Z)(t,this.minDays-1).getTime())}get computedDatasets(){const e=this.minDay,t=(0,l.Z)((0,i.Z)(Date.now()),e),s=Array.from({length:t+1}).map(((t,s)=>(0,c.Z)(e,s).getTime())),o=s.map((e=>this.itemsPerDay[e]??null)),r=o.filter((e=>null!=e)).length;return this.datasets.map((e=>{const t=o.map((t=>null==t?0:e.getValue(t))),s=t.reduce(((e,t)=>e+t),0);return{key:e.key,color:e.color,label:e.label,values:t.map(((e,t)=>({x:t,y:e}))),filled:e.filled??!0,stack:e.stack??!0,hidePoints:!1,average:1==e.showAverage?s/Math.max(1,r):void 0}}))}formatDate(e){const t=(0,c.Z)(this.minDay,e);return this.$i18n.$d(t,"date")}};(0,n.gn)([(0,d.fI)({required:!0,type:Array})],u.prototype,"datasets",void 0),(0,n.gn)([(0,d.fI)({required:!1,type:Boolean})],u.prototype,"noLegend",void 0),(0,n.gn)([(0,d.fI)({required:!1,type:Boolean})],u.prototype,"noTooltipFooter",void 0),(0,n.gn)([(0,d.fI)({required:!0,type:[Number,Date]})],u.prototype,"firstDay",void 0),(0,n.gn)([(0,d.fI)({required:!0,type:Object})],u.prototype,"itemsPerDay",void 0),(0,n.gn)([(0,d.fI)({required:!1,type:Number,default:()=>30})],u.prototype,"minDays",void 0),u=(0,n.gn)([(0,d.wA)({})],u);const f=u,g=f;var m=s(1001),p=(0,m.Z)(g,o,r,!1,null,null,null);const y=p.exports},7369:(e,t,s)=>{s.r(t),s.d(t,{default:()=>h});var o=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"chart-container"},[s("stats-chart",{attrs:{datasets:e.datasets,firstDay:e.firstDay,itemsPerDay:e.exposPerDay},scopedSlots:e._u([{key:"tooltip-footer",fn:function(t){var o=t.datasets;return[e.getVisibleDatasets(o).length<o.length?[s("div",{staticClass:"footer-item"},[s("div",{staticClass:"number",domProps:{textContent:e._s(e.$i18n.$n(e.getTotal(e.getVisibleDatasets(o))))}}),s("div",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.lifeforms.discoveryMissions)}})]),s("hr")]:e._e(),s("div",{staticClass:"footer-item"},[s("div",{staticClass:"number",domProps:{textContent:e._s(e.$i18n.$n(e.getTotal(o)))}}),s("div",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.lifeforms.discoveryMissions+" ("+e.$i18n.$t.extension.common.total+")")}})])]}}])}),s("floating-menu",{attrs:{left:""},scopedSlots:e._u([{key:"activator",fn:function(){return[s("button",{on:{click:function(t){e.showSettings=!e.showSettings}}},[s("span",{staticClass:"mdi mdi-cog"})])]},proxy:!0}]),model:{value:e.showSettings,callback:function(t){e.showSettings=t},expression:"showSettings"}},[s("lifeform-discovery-color-settings")],1)],1)},r=[],n=s(655),i=s(4028),a=s(3421),l=s(6903),c=s(917),d=s(4898),u=s(6105);let f=class extends i.w3{showSettings=!1;get colors(){return c.V.settings.colors.lifeformDiscoveries.events}get firstDay(){return l.F.firstDay}get exposPerDay(){return l.F.dailyResults}get datasets(){const e=[[u.y.nothing],[u.y.lostShip],[u.y.newLifeformFound,u.y.knownLifeformFound],[u.y.artifacts]];return e.map((e=>({key:e[0],label:1==e.length?this.$i18n.$t.extension.empire.lifeforms.eventTypes[e[0]]:this.$i18n.$t.extension.empire.lifeforms.lifeformFound,color:1==e.length?this.colors[e[0]]:this.colors.knownLifeformFound,filled:!0,getValue:t=>e.reduce(((e,s)=>e+t.events[s]),0),showAverage:!0})))}getVisibleDatasets(e){return e.filter((e=>e.visible))}getTotal(e){return e.reduce(((e,t)=>e+t.value),0)}};f=(0,n.gn)([(0,i.wA)({components:{StatsChart:a.Z,LifeformDiscoveryColorSettings:d.Z}})],f);const g=f,m=g;var p=s(1001),y=(0,p.Z)(m,o,r,!1,null,"2b3fc9ce",null);const h=y.exports},7349:(e,t,s)=>{s.d(t,{Z:()=>i});var o=s(3946),r=s(9013),n=s(3882);function i(e,t){(0,n.Z)(2,arguments);var s=(0,r.Z)(e),i=(0,o.Z)(t);return isNaN(i)?new Date(NaN):i?(s.setDate(s.getDate()+i),s):s}},9383:(e,t,s)=>{s.d(t,{Z:()=>d});var o=s(9013),r=s(4262),n=s(9119),i=s(3882),a=864e5;function l(e,t){(0,i.Z)(2,arguments);var s=(0,n.Z)(e),o=(0,n.Z)(t),l=s.getTime()-(0,r.Z)(s),c=o.getTime()-(0,r.Z)(o);return Math.round((l-c)/a)}function c(e,t){var s=e.getFullYear()-t.getFullYear()||e.getMonth()-t.getMonth()||e.getDate()-t.getDate()||e.getHours()-t.getHours()||e.getMinutes()-t.getMinutes()||e.getSeconds()-t.getSeconds()||e.getMilliseconds()-t.getMilliseconds();return s<0?-1:s>0?1:s}function d(e,t){(0,i.Z)(2,arguments);var s=(0,o.Z)(e),r=(0,o.Z)(t),n=c(s,r),a=Math.abs(l(s,r));s.setDate(s.getDate()-n*a);var d=Number(c(s,r)===-n),u=n*(a-d);return 0===u?0:u}},5347:(e,t,s)=>{s.d(t,{Z:()=>i});var o=s(3946),r=s(7349),n=s(3882);function i(e,t){(0,n.Z)(2,arguments);var s=(0,o.Z)(t);return(0,r.Z)(e,-s)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVNoQixVQUFZMkIsRUFBT0MsR0FHN0MsSUFBSUUsRUFBbUJDLE9BQU9oQixFQUFnQkMsRUFBVUMsTUFBZ0JVLEdBQ3BFSyxFQUFTTCxHQUFRQyxFQUFhRSxHQUVsQyxPQUFrQixJQUFYRSxFQUFlLEVBQUlBLEksa0VDM0RiLFNBQVNDLEVBQVExQyxFQUFXQyxJQUN6QyxPQUFhLEVBQUdDLFdBQ2hCLElBQUlFLEdBQVMsT0FBVUgsR0FDdkIsT0FBTyxPQUFRRCxHQUFZSSIsInNvdXJjZXMiOlsib2dhbWUtdHJhY2tlcjovLy8uL3NyYy9zaGFyZWQvbW9kZWxzL3NldHRpbmdzL2dldERlZmF1bHRTZXR0aW5ncy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc3RhdHMvY29tcG9uZW50cy9zZXR0aW5ncy9SZXNldEJ1dHRvbi52dWU/N2IyMSIsIndlYnBhY2s6Ly8vc3JjL3ZpZXdzL3N0YXRzL2NvbXBvbmVudHMvc2V0dGluZ3MvUmVzZXRCdXR0b24udnVlP2MxMjIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3N0YXRzL2NvbXBvbmVudHMvc2V0dGluZ3MvUmVzZXRCdXR0b24udnVlPzEwOGQiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3N0YXRzL2NvbXBvbmVudHMvc2V0dGluZ3MvUmVzZXRCdXR0b24udnVlP2UyZGMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3N0YXRzL2NvbXBvbmVudHMvc2V0dGluZ3MvY29sb3JzL0NvbG9yU2V0dGluZ3NUYWJsZS52dWU/YzA4ZCIsIndlYnBhY2s6Ly8vc3JjL3ZpZXdzL3N0YXRzL2NvbXBvbmVudHMvc2V0dGluZ3MvY29sb3JzL0NvbG9yU2V0dGluZ3NUYWJsZS52dWU/Nzc1NiIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc3RhdHMvY29tcG9uZW50cy9zZXR0aW5ncy9jb2xvcnMvQ29sb3JTZXR0aW5nc1RhYmxlLnZ1ZT84M2UzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0cy9jb21wb25lbnRzL3NldHRpbmdzL2NvbG9ycy9Db2xvclNldHRpbmdzVGFibGUudnVlPzhkZjkiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3N0YXRzL2NvbXBvbmVudHMvc2V0dGluZ3MvY29sb3JzL0xpZmVmb3JtRGlzY292ZXJ5Q29sb3JTZXR0aW5ncy52dWU/NGMwZCIsIndlYnBhY2s6Ly8vc3JjL3ZpZXdzL3N0YXRzL2NvbXBvbmVudHMvc2V0dGluZ3MvY29sb3JzL0xpZmVmb3JtRGlzY292ZXJ5Q29sb3JTZXR0aW5ncy52dWU/YjZjYSIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc3RhdHMvY29tcG9uZW50cy9zZXR0aW5ncy9jb2xvcnMvTGlmZWZvcm1EaXNjb3ZlcnlDb2xvclNldHRpbmdzLnZ1ZT9iZTA1Iiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0cy9jb21wb25lbnRzL3NldHRpbmdzL2NvbG9ycy9MaWZlZm9ybURpc2NvdmVyeUNvbG9yU2V0dGluZ3MudnVlP2Y1MGIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3N0YXRzL2NvbXBvbmVudHMvc3RhdHMvU3RhdHNDaGFydC52dWU/MjI3YSIsIndlYnBhY2s6Ly8vc3JjL3ZpZXdzL3N0YXRzL2NvbXBvbmVudHMvc3RhdHMvU3RhdHNDaGFydC52dWU/ZjNiMyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc3RhdHMvY29tcG9uZW50cy9zdGF0cy9TdGF0c0NoYXJ0LnZ1ZT8zYzQ0Iiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0cy9jb21wb25lbnRzL3N0YXRzL1N0YXRzQ2hhcnQudnVlPzk1ZjAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3N0YXRzL3ZpZXdzL2xpZmVmb3Jtcy9kaXNjb3Zlcmllcy9vdmVydmlldy9DaGFydC52dWU/ZjExZiIsIndlYnBhY2s6Ly8vc3JjL3ZpZXdzL3N0YXRzL3ZpZXdzL2xpZmVmb3Jtcy9kaXNjb3Zlcmllcy9vdmVydmlldy9DaGFydC52dWU/NmU5NCIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3Mvc3RhdHMvdmlld3MvbGlmZWZvcm1zL2Rpc2NvdmVyaWVzL292ZXJ2aWV3L0NoYXJ0LnZ1ZT9hYzZkIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9zdGF0cy92aWV3cy9saWZlZm9ybXMvZGlzY292ZXJpZXMvb3ZlcnZpZXcvQ2hhcnQudnVlP2M1OGMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9hZGREYXlzL2luZGV4LmpzPzA5NjUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9kaWZmZXJlbmNlSW5DYWxlbmRhckRheXMvaW5kZXguanM/MjE0ZiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2RpZmZlcmVuY2VJbkRheXMvaW5kZXguanM/NTk4NiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3N1YkRheXMvaW5kZXguanM/ODY0YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyAkaTE4biB9IGZyb20gXCJAL3NoYXJlZC9pMThuL2V4dGVuc2lvbi8kaTE4blwiO1xyXG5pbXBvcnQgeyBMYW5ndWFnZUtleSB9IGZyb20gXCIuLi8uLi9pMThuL0xhbmd1YWdlS2V5XCI7XHJcbmltcG9ydCB7IENvbWJhdFJlc3VsdFR5cGUgfSBmcm9tIFwiLi4vY29tYmF0LXJlcG9ydHMvQ29tYmF0UmVzdWx0VHlwZVwiO1xyXG5pbXBvcnQgeyBFeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWwgfSBmcm9tIFwiLi4vZXhwZWRpdGlvbnMvRXhwZWRpdGlvbkRlcGxldGlvbkxldmVsXCI7XHJcbmltcG9ydCB7IEV4cGVkaXRpb25FdmVudFNpemUgfSBmcm9tIFwiLi4vZXhwZWRpdGlvbnMvRXhwZWRpdGlvbkV2ZW50U2l6ZVwiO1xyXG5pbXBvcnQgeyBFeHBlZGl0aW9uRXZlbnRUeXBlIH0gZnJvbSBcIi4uL2V4cGVkaXRpb25zL0V4cGVkaXRpb25FdmVudFR5cGVcIjtcclxuaW1wb3J0IHsgTGlmZWZvcm1EaXNjb3ZlcnlFdmVudEFydGlmYWN0RmluZGluZ1NpemUgfSBmcm9tIFwiLi4vbGlmZWZvcm0tZGlzY292ZXJpZXMvTGlmZWZvcm1EaXNjb3ZlcnlFdmVudEFydGlmYWN0RmluZGluZ1NpemVcIjtcclxuaW1wb3J0IHsgTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUgfSBmcm9tIFwiLi4vbGlmZWZvcm0tZGlzY292ZXJpZXMvTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGVcIjtcclxuaW1wb3J0IHsgTGlmZWZvcm1UeXBlIH0gZnJvbSBcIi4uL29nYW1lL2xpZmVmb3Jtcy9MaWZlZm9ybVR5cGVcIjtcclxuaW1wb3J0IHsgUmVzb3VyY2VUeXBlIH0gZnJvbSBcIi4uL29nYW1lL3Jlc291cmNlcy9SZXNvdXJjZVR5cGVcIjtcclxuaW1wb3J0IHsgU2hpcFR5cGUgfSBmcm9tIFwiLi4vb2dhbWUvc2hpcHMvU2hpcFR5cGVcIjtcclxuaW1wb3J0IHsgU2V0dGluZ3MgfSBmcm9tIFwiLi9TZXR0aW5nc1wiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRTZXR0aW5ncyhsYW5ndWFnZTogTGFuZ3VhZ2VLZXkpOiBTZXR0aW5ncyB7XHJcbiAgICBjb25zdCBvbGRMYW5nID0gJGkxOG4ubG9jYWxlO1xyXG4gICAgJGkxOG4ubG9jYWxlID0gbGFuZ3VhZ2U7XHJcblxyXG4gICAgY29uc3QgZGVmYXVsdFNldHRpbmdzOiBTZXR0aW5ncyA9IHtcclxuICAgICAgICBkYXRlUmFuZ2VzOiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAkaTE4bi4kdC5leHRlbnNpb24uc2V0dGluZ3MuZGF0ZVJhbmdlcy5kZWZhdWx0TmFtZXMudG9kYXksXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnZGF5JyxcclxuICAgICAgICAgICAgICAgIHNraXA6IDAsXHJcbiAgICAgICAgICAgICAgICB0YWtlOiAxLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJGkxOG4uJHQuZXh0ZW5zaW9uLnNldHRpbmdzLmRhdGVSYW5nZXMuZGVmYXVsdE5hbWVzLnllc3RlcmRheSxcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdkYXknLFxyXG4gICAgICAgICAgICAgICAgc2tpcDogMSxcclxuICAgICAgICAgICAgICAgIHRha2U6IDEsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAkaTE4bi4kdC5leHRlbnNpb24uc2V0dGluZ3MuZGF0ZVJhbmdlcy5kZWZhdWx0TmFtZXMuY3VycmVudFdlZWssXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnd2VlaycsXHJcbiAgICAgICAgICAgICAgICBza2lwOiAwLFxyXG4gICAgICAgICAgICAgICAgdGFrZTogMSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICRpMThuLiR0LmV4dGVuc2lvbi5zZXR0aW5ncy5kYXRlUmFuZ2VzLmRlZmF1bHROYW1lcy5sYXN0V2VlayxcclxuICAgICAgICAgICAgICAgIHR5cGU6ICd3ZWVrJyxcclxuICAgICAgICAgICAgICAgIHNraXA6IDEsXHJcbiAgICAgICAgICAgICAgICB0YWtlOiAxLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJGkxOG4uJHQuZXh0ZW5zaW9uLnNldHRpbmdzLmRhdGVSYW5nZXMuZGVmYXVsdE5hbWVzLmN1cnJlbnRNb250aCxcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdtb250aCcsXHJcbiAgICAgICAgICAgICAgICBza2lwOiAwLFxyXG4gICAgICAgICAgICAgICAgdGFrZTogMSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeyB0eXBlOiAnYWxsJyB9LFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgbG9zdFNoaXBzUmVzb3VyY2VVbml0czoge1xyXG4gICAgICAgICAgICBmYWN0b3I6IDEsXHJcbiAgICAgICAgICAgIGRldXRlcml1bUZhY3RvcjogMSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlc291cmNlQmFsYW5jZToge1xyXG4gICAgICAgICAgICBzaG93RGV0YWlsZWRCcmVha2Rvd246IGZhbHNlLFxyXG4gICAgICAgICAgICBpbmNsdWRlRXhwZWRpdGlvbkZvdW5kU2hpcHNSZXNvdXJjZVVuaXRzOiB0cnVlLFxyXG4gICAgICAgICAgICBpbmNsdWRlTG9zdFNoaXBzUmVzb3VyY2VVbml0czogdHJ1ZSxcclxuICAgICAgICAgICAgaW5jbHVkZUxvc3RMb290UmVzb3VyY2VzOiB0cnVlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29udmVyc2lvblJhdGVzOiB7XHJcbiAgICAgICAgICAgIG1vZGU6ICdtc3UnLFxyXG4gICAgICAgICAgICBtc3U6IHtcclxuICAgICAgICAgICAgICAgIGNyeXN0YWw6IDEuNSxcclxuICAgICAgICAgICAgICAgIGRldXRlcml1bTogMyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZHN1OiB7XHJcbiAgICAgICAgICAgICAgICBtZXRhbDogMyxcclxuICAgICAgICAgICAgICAgIGNyeXN0YWw6IDIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzaG93Q2VsbHNXaXRoQ29udmVydGVkUmVzb3VyY2VVbml0czogdHJ1ZSxcclxuICAgICAgICBleHBlZGl0aW9uRm91bmRTaGlwc1Jlc291cmNlVW5pdHM6IHtcclxuICAgICAgICAgICAgZmFjdG9yOiAxLFxyXG4gICAgICAgICAgICBkZXV0ZXJpdW1GYWN0b3I6IDEsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRlbnNpb25MYW5ndWFnZTogbGFuZ3VhZ2UsXHJcbiAgICAgICAgZGVmYXVsdFJvdXRlczoge30sXHJcbiAgICAgICAgY29sb3JzOiB7XHJcbiAgICAgICAgICAgIGNvbWJhdFJlc3VsdHM6IHtcclxuICAgICAgICAgICAgICAgIFtDb21iYXRSZXN1bHRUeXBlLndvbl06ICcjMDBjMjNhJyxcclxuICAgICAgICAgICAgICAgIFtDb21iYXRSZXN1bHRUeXBlLmRyYXddOiAnI2FhYWFhYScsXHJcbiAgICAgICAgICAgICAgICBbQ29tYmF0UmVzdWx0VHlwZS5sb3N0XTogJyNkMTE1MTUnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZXNvdXJjZXM6IHtcclxuICAgICAgICAgICAgICAgIFtSZXNvdXJjZVR5cGUubWV0YWxdOiAnI2ZmNWUwMCcsXHJcbiAgICAgICAgICAgICAgICBbUmVzb3VyY2VUeXBlLmNyeXN0YWxdOiAnIzFhOWZmZicsXHJcbiAgICAgICAgICAgICAgICBbUmVzb3VyY2VUeXBlLmRldXRlcml1bV06ICcjMWJlZThmJyxcclxuICAgICAgICAgICAgICAgIHRvdGFsQ29udmVydGVkOiAnIzk5OTk5OScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNoaXBzOiB7XHJcbiAgICAgICAgICAgICAgICBbU2hpcFR5cGUubGlnaHRGaWdodGVyXTogJyMyNDcyZjMnLFxyXG4gICAgICAgICAgICAgICAgW1NoaXBUeXBlLmhlYXZ5RmlnaHRlcl06ICcjYzcyNTI1JyxcclxuICAgICAgICAgICAgICAgIFtTaGlwVHlwZS5jcnVpc2VyXTogJyNmYmJjMDQnLFxyXG4gICAgICAgICAgICAgICAgW1NoaXBUeXBlLmJhdHRsZXNoaXBdOiAnIzllY2MwMCcsXHJcbiAgICAgICAgICAgICAgICBbU2hpcFR5cGUuYm9tYmVyXTogJyMwMGE5NWUnLFxyXG4gICAgICAgICAgICAgICAgW1NoaXBUeXBlLmJhdHRsZWNydWlzZXJdOiAnIzA3NTI2MycsXHJcbiAgICAgICAgICAgICAgICBbU2hpcFR5cGUuZGVzdHJveWVyXTogJyNkZTUyMDAnLFxyXG4gICAgICAgICAgICAgICAgW1NoaXBUeXBlLnJlYXBlcl06ICcjMTZhOGQ0JyxcclxuICAgICAgICAgICAgICAgIFtTaGlwVHlwZS5wYXRoZmluZGVyXTogJyNhZDEzNWUnLFxyXG4gICAgICAgICAgICAgICAgW1NoaXBUeXBlLnNtYWxsQ2FyZ29dOiAnIzg4ODg4OCcsXHJcbiAgICAgICAgICAgICAgICBbU2hpcFR5cGUubGFyZ2VDYXJnb106ICcjZmZmZmZmJyxcclxuICAgICAgICAgICAgICAgIFtTaGlwVHlwZS5lc3Bpb25hZ2VQcm9iZV06ICcjNGIxN2RhJyxcclxuICAgICAgICAgICAgICAgIFtTaGlwVHlwZS5kZWF0aFN0YXJdOiAnIzI2MjUzMCcsXHJcbiAgICAgICAgICAgICAgICBbU2hpcFR5cGUucmVjeWNsZXJdOiAnIzhhZmY4ZScsXHJcbiAgICAgICAgICAgICAgICBbU2hpcFR5cGUuY29sb255U2hpcF06ICcjZDdiNThlJyxcclxuICAgICAgICAgICAgICAgIFtTaGlwVHlwZS5jcmF3bGVyXTogJyM5NGI0ZmYnLFxyXG4gICAgICAgICAgICAgICAgW1NoaXBUeXBlLnNvbGFyU2F0ZWxsaXRlXTogJyNkZDk0ZmYnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBleHBlZGl0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgZXZlbnRzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgW0V4cGVkaXRpb25FdmVudFR5cGUubm90aGluZ106ICcjNDA0MDQwJyxcclxuICAgICAgICAgICAgICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5yZXNvdXJjZXNdOiAnIzIyNDJlMicsXHJcbiAgICAgICAgICAgICAgICAgICAgW0V4cGVkaXRpb25FdmVudFR5cGUuZmxlZXRdOiAnI2RkZGRkZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgW0V4cGVkaXRpb25FdmVudFR5cGUuZGVsYXldOiAnI2ZmNWUwMCcsXHJcbiAgICAgICAgICAgICAgICAgICAgW0V4cGVkaXRpb25FdmVudFR5cGUuZWFybHldOiAnIzAwYzIzYScsXHJcbiAgICAgICAgICAgICAgICAgICAgW0V4cGVkaXRpb25FdmVudFR5cGUuZGFya01hdHRlcl06ICcjMzNiY2RiJyxcclxuICAgICAgICAgICAgICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5waXJhdGVzXTogJyNmZmI1OTInLFxyXG4gICAgICAgICAgICAgICAgICAgIFtFeHBlZGl0aW9uRXZlbnRUeXBlLmFsaWVuc106ICcjOTJmZmRjJyxcclxuICAgICAgICAgICAgICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS5jb21iYXRdOiAnI2ZmYjU5MicsXHJcbiAgICAgICAgICAgICAgICAgICAgW0V4cGVkaXRpb25FdmVudFR5cGUuaXRlbV06ICcjNmYyM2UxJyxcclxuICAgICAgICAgICAgICAgICAgICBbRXhwZWRpdGlvbkV2ZW50VHlwZS50cmFkZXJdOiAnI2ZiYmMwNCcsXHJcbiAgICAgICAgICAgICAgICAgICAgW0V4cGVkaXRpb25FdmVudFR5cGUubG9zdEZsZWV0XTogJyNkMTE1MTUnLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNpemVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgW0V4cGVkaXRpb25FdmVudFNpemUuc21hbGxdOiAnIzQwNDA0MCcsXHJcbiAgICAgICAgICAgICAgICAgICAgW0V4cGVkaXRpb25FdmVudFNpemUubWVkaXVtXTogJyMzZTg1ZmUnLFxyXG4gICAgICAgICAgICAgICAgICAgIFtFeHBlZGl0aW9uRXZlbnRTaXplLmxhcmdlXTogJyNlMDFhNzYnLFxyXG4gICAgICAgICAgICAgICAgICAgICdmbGVkLWRlYXRoLXN0YXInOiAnI2RkZGRkZCcsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZGVwbGV0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgW0V4cGVkaXRpb25EZXBsZXRpb25MZXZlbC5ub25lXTogJyMwMGMyM2EnLFxyXG4gICAgICAgICAgICAgICAgICAgIFtFeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWwubG93XTogJyNmYmJjMDQnLFxyXG4gICAgICAgICAgICAgICAgICAgIFtFeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWwubWVkaXVtXTogJyNmZjVlMDAnLFxyXG4gICAgICAgICAgICAgICAgICAgIFtFeHBlZGl0aW9uRGVwbGV0aW9uTGV2ZWwuaGlnaF06ICcjYzcyNTI1JyxcclxuICAgICAgICAgICAgICAgICAgICB1bmtub3duOiAnIzQwNDA0MCcsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsaWZlZm9ybURpc2NvdmVyaWVzOiB7XHJcbiAgICAgICAgICAgICAgICBldmVudHM6IHtcclxuICAgICAgICAgICAgICAgICAgICBbTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUubm90aGluZ106ICcjNDA0MDQwJyxcclxuICAgICAgICAgICAgICAgICAgICBbTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUubG9zdFNoaXBdOiAnI2QxMTUxNScsXHJcbiAgICAgICAgICAgICAgICAgICAgW0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlLmtub3duTGlmZWZvcm1Gb3VuZF06ICcjMzNiY2RiJyxcclxuICAgICAgICAgICAgICAgICAgICBbTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUubmV3TGlmZWZvcm1Gb3VuZF06ICcjMDBjMjNhJyxcclxuICAgICAgICAgICAgICAgICAgICBbTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUuYXJ0aWZhY3RzXTogJyNmYmJjMDQnLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGFydGlmYWN0RmluZGluZ1NpemVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgW0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRBcnRpZmFjdEZpbmRpbmdTaXplLnNtYWxsXTogJyM0MDQwNDAnLFxyXG4gICAgICAgICAgICAgICAgICAgIFtMaWZlZm9ybURpc2NvdmVyeUV2ZW50QXJ0aWZhY3RGaW5kaW5nU2l6ZS5tZWRpdW1dOiAnIzNlODVmZScsXHJcbiAgICAgICAgICAgICAgICAgICAgW0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRBcnRpZmFjdEZpbmRpbmdTaXplLmxhcmdlXTogJyNlMDFhNzYnLFxyXG4gICAgICAgICAgICAgICAgICAgIFtMaWZlZm9ybURpc2NvdmVyeUV2ZW50QXJ0aWZhY3RGaW5kaW5nU2l6ZS5zdG9yYWdlRnVsbF06ICcjZDExNTE1JyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxpZmVmb3Jtczoge1xyXG4gICAgICAgICAgICAgICAgW0xpZmVmb3JtVHlwZS5odW1hbnNdOiAnIzdlYzAwMCcsXHJcbiAgICAgICAgICAgICAgICBbTGlmZWZvcm1UeXBlLnJvY2t0YWxdOiAnI2RmNjY0MicsXHJcbiAgICAgICAgICAgICAgICBbTGlmZWZvcm1UeXBlLm1lY2hhc106ICcjNGI5MWU3JyxcclxuICAgICAgICAgICAgICAgIFtMaWZlZm9ybVR5cGUua2FlbGVzaF06ICcjOTg2M2U5JyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHVuaXZlcnNlSGlzdG9yeToge1xyXG4gICAgICAgICAgICB1cGRhdGVUaW1lczogW1xyXG4gICAgICAgICAgICAgICAgMjAgKiA2MCAqIDYwICogMTAwMCwgLy8gMjA6MDBcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgZW5hYmxlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHRyYWNrSGlzdG9yeTogZmFsc2UsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb21iYXRUcmFja2luZzoge1xyXG4gICAgICAgICAgICBpZ25vcmVFc3Bpb25hZ2VGaWdodHM6IHRydWUsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBtZXNzYWdlVHJhY2tpbmc6IHtcclxuICAgICAgICAgICAgc2hvd1NpbXBsaWZpZWRSZXN1bHRzOiB0cnVlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGVicmlzRmllbGRzOiB7XHJcbiAgICAgICAgICAgIHNlcGFyYXRlRXhwZWRpdGlvbkRlYnJpc0ZpZWxkczogZmFsc2UsXHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcblxyXG4gICAgJGkxOG4ubG9jYWxlID0gb2xkTGFuZztcclxuXHJcbiAgICByZXR1cm4gZGVmYXVsdFNldHRpbmdzO1xyXG59IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2J1dHRvbicse3N0YXRpY0NsYXNzOlwicmVzZXQtYnV0dG9uXCIsYXR0cnM6e1widGl0bGVcIjpfdm0uJGkxOG4uJHQuZXh0ZW5zaW9uLnNldHRpbmdzLnJlc2V0fSxvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS4kZW1pdCgncmVzZXQnKX19fSxbX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcIm1kaSBtZGktcmVmcmVzaFwifSldKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxyXG4gICAgPGJ1dHRvbiBjbGFzcz1cInJlc2V0LWJ1dHRvblwiIEBjbGljaz1cIiRlbWl0KCdyZXNldCcpXCIgOnRpdGxlPVwiJGkxOG4uJHQuZXh0ZW5zaW9uLnNldHRpbmdzLnJlc2V0XCI+XHJcbiAgICAgICAgPHNwYW4gY2xhc3M9XCJtZGkgbWRpLXJlZnJlc2hcIiAvPlxyXG4gICAgPC9idXR0b24+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxyXG4gICAgaW1wb3J0IHsgQ29tcG9uZW50LCBQcm9wLCBWdWUgfSBmcm9tICd2dWUtcHJvcGVydHktZGVjb3JhdG9yJztcclxuXHJcbiAgICBAQ29tcG9uZW50KHt9KVxyXG4gICAgZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzZXRCdXR0b24gZXh0ZW5kcyBWdWUge1xyXG4gICAgfVxyXG48L3NjcmlwdD5cclxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPlxyXG4gICAgLnJlc2V0LWJ1dHRvbiB7XHJcbiAgICAgICAgYmFja2dyb3VuZDogcmdiYSh2YXIoLS1jb2xvciksIDAuMjUpICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgZm9udC1zaXplOiAxNHB4O1xyXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xyXG4gICAgICAgIGFsaWduLWl0ZW1zOiBiYXNlbGluZTtcclxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDhweDtcclxuICAgICAgICBiYWNrZ3JvdW5kOiBub25lO1xyXG4gICAgICAgIHBhZGRpbmc6IDAgNHB4O1xyXG5cclxuICAgICAgICAmOmhvdmVyIHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZDogcmdiYSh2YXIoLS1jb2xvciksIDAuNSkgIWltcG9ydGFudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgID4gLm1kaSB7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMS4zKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc3R5bGU+IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTQwWzBdLnJ1bGVzWzBdLnVzZVswXSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdGhyZWFkLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTQwWzBdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzBdLnJ1bGVzWzBdLnVzZVswXSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1Jlc2V0QnV0dG9uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTQwWzBdLnJ1bGVzWzBdLnVzZVswXSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdGhyZWFkLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTQwWzBdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzBdLnJ1bGVzWzBdLnVzZVswXSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1Jlc2V0QnV0dG9uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vUmVzZXRCdXR0b24udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTZjYTYwZjg0JnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL1Jlc2V0QnV0dG9uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vUmVzZXRCdXR0b24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL1Jlc2V0QnV0dG9uLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTZjYTYwZjg0Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiNmNhNjBmODRcIixcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZ3JpZC10YWJsZScse3N0YXRpY0NsYXNzOlwiY29sb3Itc2V0dGluZ3NcIixzdGF0aWNTdHlsZTp7XCJ3aWR0aFwiOlwibWF4LWNvbnRlbnRcIn0sYXR0cnM6e1wiY29sdW1uc1wiOl92bS5jb2x1bW5zLFwiaXRlbXNcIjpfdm0uaXRlbXN9LHNjb3BlZFNsb3RzOl92bS5fdShbe2tleTpcImhlYWRlci1rZXlcIixmbjpmdW5jdGlvbihyZWYpe1xudmFyIGxhYmVsID0gcmVmLmxhYmVsO1xucmV0dXJuIFtfYygnc3Bhbicse2RvbVByb3BzOntcInRleHRDb250ZW50XCI6X3ZtLl9zKGxhYmVsKX19KSxfYygncmVzZXQtYnV0dG9uJyx7b246e1wicmVzZXRcIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0uJGVtaXQoJ3Jlc2V0Jyl9fX0pXX19LHtrZXk6XCJjZWxsLWtleVwiLGZuOmZ1bmN0aW9uKHJlZil7XG52YXIga2V5ID0gcmVmLnZhbHVlO1xucmV0dXJuIFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJjb2xvci1pbnB1dFwiLG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uJHJlZnNbKFwiY29sb3JJbnB1dC1cIiArIGtleSldLmNsaWNrKCl9fX0sW19jKCdpbnB1dCcse3JlZjooXCJjb2xvcklucHV0LVwiICsga2V5KSxhdHRyczp7XCJ0eXBlXCI6XCJjb2xvclwifSxkb21Qcm9wczp7XCJ2YWx1ZVwiOl92bS5jb2xvcnNba2V5XX0sb246e1wiY2hhbmdlXCI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLnVwZGF0ZUNvbG9yKGtleSwgJGV2ZW50KX19fSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiY29sb3ItaW5kaWNhdG9yXCIsc3R5bGU6KHsgYmFja2dyb3VuZDogX3ZtLmNvbG9yc1trZXldIH0pfSksX2MoJ3NwYW4nLHtkb21Qcm9wczp7XCJ0ZXh0Q29udGVudFwiOl92bS5fcyhfdm0ubGFiZWxzW2tleV0pfX0pXSldfX1dKX0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XHJcbiAgICA8Z3JpZC10YWJsZVxyXG4gICAgICAgIGNsYXNzPVwiY29sb3Itc2V0dGluZ3NcIlxyXG4gICAgICAgIDpjb2x1bW5zPVwiY29sdW1uc1wiXHJcbiAgICAgICAgOml0ZW1zPVwiaXRlbXNcIlxyXG4gICAgICAgIHN0eWxlPVwid2lkdGg6IG1heC1jb250ZW50XCJcclxuICAgID5cclxuICAgICAgICA8dGVtcGxhdGUgI2hlYWRlci1rZXk9XCJ7IGxhYmVsIH1cIj5cclxuICAgICAgICAgICAgPHNwYW4gdi10ZXh0PVwibGFiZWxcIiAvPlxyXG4gICAgICAgICAgICA8cmVzZXQtYnV0dG9uIEByZXNldD1cIiRlbWl0KCdyZXNldCcpXCIgLz5cclxuICAgICAgICA8L3RlbXBsYXRlPlxyXG4gICAgICAgIDx0ZW1wbGF0ZSAjY2VsbC1rZXk9XCJ7IHZhbHVlOiBrZXkgfVwiPlxyXG4gICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICBjbGFzcz1cImNvbG9yLWlucHV0XCJcclxuICAgICAgICAgICAgICAgIEBjbGljaz1cIiRyZWZzW2Bjb2xvcklucHV0LSR7a2V5fWBdLmNsaWNrKClcIlxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwiY29sb3JcIlxyXG4gICAgICAgICAgICAgICAgICAgIDp2YWx1ZT1cImNvbG9yc1trZXldXCJcclxuICAgICAgICAgICAgICAgICAgICBAY2hhbmdlPVwidXBkYXRlQ29sb3Ioa2V5LCAkZXZlbnQpXCJcclxuICAgICAgICAgICAgICAgICAgICA6cmVmPVwiYGNvbG9ySW5wdXQtJHtrZXl9YFwiXHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiY29sb3ItaW5kaWNhdG9yXCJcclxuICAgICAgICAgICAgICAgICAgICA6c3R5bGU9XCJ7IGJhY2tncm91bmQ6IGNvbG9yc1trZXldIH1cIlxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICAgIDxzcGFuIHYtdGV4dD1cImxhYmVsc1trZXldXCIgLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgIDwvZ3JpZC10YWJsZT5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQgbGFuZz1cInRzXCI+XHJcbiAgICBpbXBvcnQgeyBQcm9wVHlwZSB9IGZyb20gJ3Z1ZSc7XHJcbiAgICBpbXBvcnQgeyBDb21wb25lbnQsIFByb3AsIFZ1ZSwgVk1vZGVsIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7XHJcbiAgICBpbXBvcnQgeyBHcmlkVGFibGVDb2x1bW4gfSBmcm9tICcuLi8uLi9jb21tb24vR3JpZFRhYmxlLnZ1ZSc7XHJcbiAgICBpbXBvcnQgUmVzZXRCdXR0b24gZnJvbSAnLi4vUmVzZXRCdXR0b24udnVlJztcclxuXHJcbiAgICBAQ29tcG9uZW50KHtcclxuICAgICAgICBjb21wb25lbnRzOiB7XHJcbiAgICAgICAgICAgIFJlc2V0QnV0dG9uLFxyXG4gICAgICAgIH0sXHJcbiAgICB9KVxyXG4gICAgZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29sb3JTZXR0aW5nc1RhYmxlIGV4dGVuZHMgVnVlIHtcclxuICAgICAgICBAUHJvcCh7IHJlcXVpcmVkOiB0cnVlLCB0eXBlOiBTdHJpbmcgfSlcclxuICAgICAgICBwcml2YXRlIGhlYWRlciE6IHN0cmluZztcclxuXHJcbiAgICAgICAgQFZNb2RlbCh7IHJlcXVpcmVkOiB0cnVlLCB0eXBlOiBPYmplY3QgYXMgUHJvcFR5cGU8UmVjb3JkPHN0cmluZywgc3RyaW5nPj4gfSlcclxuICAgICAgICBwcml2YXRlIGNvbG9ycyE6IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XHJcblxyXG4gICAgICAgIEBQcm9wKHsgcmVxdWlyZWQ6IHRydWUsIHR5cGU6IE9iamVjdCBhcyBQcm9wVHlwZTxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PiB9KVxyXG4gICAgICAgIHByaXZhdGUgbGFiZWxzITogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcclxuXHJcbiAgICAgICAgQFByb3AoeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6IEFycmF5IGFzIFByb3BUeXBlPHN0cmluZ1tdPiwgZGVmYXVsdDogKCkgPT4gbnVsbCB9KVxyXG4gICAgICAgIHByaXZhdGUga2V5cyE6IHN0cmluZ1tdIHwgbnVsbDtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBnZXQgY29sdW1ucygpOiBHcmlkVGFibGVDb2x1bW5bXSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbe1xyXG4gICAgICAgICAgICAgICAga2V5OiAna2V5JyxcclxuICAgICAgICAgICAgICAgIGxhYmVsOiB0aGlzLmhlYWRlcixcclxuICAgICAgICAgICAgICAgIGhlYWRlckNsYXNzOiAnY29sb3Itc2V0dGluZ3MtaGVhZGVyJyxcclxuICAgICAgICAgICAgfV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGdldCBpdGVtcygpOiB7IGtleTogc3RyaW5nIH1bXSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleXMgPSB0aGlzLmtleXMgPz8gT2JqZWN0LmtleXModGhpcy5jb2xvcnMpO1xyXG4gICAgICAgICAgICByZXR1cm4ga2V5cy5tYXAoa2V5ID0+ICh7IGtleSB9KSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHVwZGF0ZUNvbG9yKGtleTogc3RyaW5nLCBldmVudDogSW5wdXRFdmVudCkge1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQudGFyZ2V0IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb2xvcnMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5jb2xvcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgW2tleV06IGV2ZW50LnRhcmdldC52YWx1ZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cclxuICAgIC5jb2xvci1pbnB1dCB7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBmbGV4LWdyb3c6IDE7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAgICAgY29sdW1uLWdhcDogNHB4O1xyXG5cclxuICAgICAgICA+IGlucHV0W3R5cGU9XCJjb2xvclwiXSB7XHJcbiAgICAgICAgICAgIHdpZHRoOiAwO1xyXG4gICAgICAgICAgICBoZWlnaHQ6IDA7XHJcbiAgICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbiAgICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZTtcclxuICAgICAgICAgICAgcGFkZGluZzogMDtcclxuICAgICAgICAgICAgYm9yZGVyOiBub25lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgPiAuY29sb3ItaW5kaWNhdG9yIHtcclxuICAgICAgICAgICAgaGVpZ2h0OiAyNHB4O1xyXG4gICAgICAgICAgICB3aWR0aDogMjRweDtcclxuICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC5jb2xvci1zZXR0aW5nczo6di1kZWVwIC5jb2xvci1zZXR0aW5ncy1oZWFkZXIge1xyXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgfVxyXG48L3N0eWxlPiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RocmVhZC1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Db2xvclNldHRpbmdzVGFibGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ29sb3JTZXR0aW5nc1RhYmxlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vQ29sb3JTZXR0aW5nc1RhYmxlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yZjI0YTNlMCZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9Db2xvclNldHRpbmdzVGFibGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9Db2xvclNldHRpbmdzVGFibGUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL0NvbG9yU2V0dGluZ3NUYWJsZS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0yZjI0YTNlMCZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjJmMjRhM2UwXCIsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2NvbG9yLXNldHRpbmdzLXRhYmxlJyx7YXR0cnM6e1wiaGVhZGVyXCI6X3ZtLiRpMThuLiR0LmV4dGVuc2lvbi5zZXR0aW5ncy5jb2xvcnMubGlmZWZvcm1EaXNjb3ZlcmllcyxcImxhYmVsc1wiOl92bS5sYWJlbHMsXCJrZXlzXCI6X3ZtLmtleXMsXCJ2YWx1ZVwiOl92bS5jb2xvcnN9LG9uOntcImlucHV0XCI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLnVwZGF0ZUNvbG9ycygkZXZlbnQpfSxcInJlc2V0XCI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLnJlc2V0Q29sb3JzKCl9fX0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XHJcbiAgICA8Y29sb3Itc2V0dGluZ3MtdGFibGVcclxuICAgICAgICA6aGVhZGVyPVwiJGkxOG4uJHQuZXh0ZW5zaW9uLnNldHRpbmdzLmNvbG9ycy5saWZlZm9ybURpc2NvdmVyaWVzXCJcclxuICAgICAgICA6bGFiZWxzPVwibGFiZWxzXCJcclxuICAgICAgICA6a2V5cz1cImtleXNcIlxyXG4gICAgICAgIDp2YWx1ZT1cImNvbG9yc1wiXHJcbiAgICAgICAgQGlucHV0PVwidXBkYXRlQ29sb3JzKCRldmVudClcIlxyXG4gICAgICAgIEByZXNldD1cInJlc2V0Q29sb3JzKClcIlxyXG4gICAgLz5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQgbGFuZz1cInRzXCI+XHJcbiAgICBpbXBvcnQgeyBMYW5ndWFnZUtleSB9IGZyb20gJ0Avc2hhcmVkL2kxOG4vTGFuZ3VhZ2VLZXknO1xyXG4gICAgaW1wb3J0IHsgTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUgfSBmcm9tICdAL3NoYXJlZC9tb2RlbHMvbGlmZWZvcm0tZGlzY292ZXJpZXMvTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUnO1xyXG4gICAgaW1wb3J0IHsgZ2V0RGVmYXVsdFNldHRpbmdzIH0gZnJvbSAnQC9zaGFyZWQvbW9kZWxzL3NldHRpbmdzL2dldERlZmF1bHRTZXR0aW5ncyc7XHJcbiAgICBpbXBvcnQgeyBTZXR0aW5nc0RhdGFNb2R1bGUgfSBmcm9tICdAL3ZpZXdzL3N0YXRzL2RhdGEvU2V0dGluZ3NEYXRhTW9kdWxlJztcclxuICAgIGltcG9ydCB7IENvbXBvbmVudCwgUHJvcCwgVnVlIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7XHJcbiAgICBpbXBvcnQgQ29sb3JTZXR0aW5nc1RhYmxlIGZyb20gJy4vQ29sb3JTZXR0aW5nc1RhYmxlLnZ1ZSc7XHJcblxyXG4gICAgQENvbXBvbmVudCh7XHJcbiAgICAgICAgY29tcG9uZW50czoge1xyXG4gICAgICAgICAgICBDb2xvclNldHRpbmdzVGFibGUsXHJcbiAgICAgICAgfSxcclxuICAgIH0pXHJcbiAgICBleHBvcnQgZGVmYXVsdCBjbGFzcyBMaWZlZm9ybURpc2NvdmVyeUNvbG9yU2V0dGluZ3MgZXh0ZW5kcyBWdWUge1xyXG5cclxuICAgICAgICBwcml2YXRlIGdldCBsYWJlbHMoKTogUmVjb3JkPEV4Y2x1ZGU8TGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUsIExpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlLm5ld0xpZmVmb3JtRm91bmQ+LCBzdHJpbmc+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIFtMaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZS5ub3RoaW5nXTogdGhpcy4kaTE4bi4kdC5leHRlbnNpb24uZW1waXJlLmxpZmVmb3Jtcy5ldmVudFR5cGVzLm5vdGhpbmcsXHJcbiAgICAgICAgICAgICAgICBbTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUubG9zdFNoaXBdOiB0aGlzLiRpMThuLiR0LmV4dGVuc2lvbi5lbXBpcmUubGlmZWZvcm1zLmV2ZW50VHlwZXMubG9zdFNoaXAsXHJcbiAgICAgICAgICAgICAgICBbTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUua25vd25MaWZlZm9ybUZvdW5kXTogdGhpcy4kaTE4bi4kdC5leHRlbnNpb24uZW1waXJlLmxpZmVmb3Jtcy5saWZlZm9ybUZvdW5kLFxyXG4gICAgICAgICAgICAgICAgW0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlLmFydGlmYWN0c106IHRoaXMuJGkxOG4uJHQuZXh0ZW5zaW9uLmVtcGlyZS5saWZlZm9ybXMuZXZlbnRUeXBlcy5hcnRpZmFjdHMsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGtleXM6IExpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlW10gPSBbXHJcbiAgICAgICAgICAgIExpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlLm5vdGhpbmcsXHJcbiAgICAgICAgICAgIExpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlLmxvc3RTaGlwLFxyXG4gICAgICAgICAgICBMaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZS5rbm93bkxpZmVmb3JtRm91bmQsXHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBnZXQgY29sb3JzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gU2V0dGluZ3NEYXRhTW9kdWxlLnNldHRpbmdzLmNvbG9ycy5saWZlZm9ybURpc2NvdmVyaWVzLmV2ZW50cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdXBkYXRlQ29sb3JzKHZhbHVlOiBSZWNvcmQ8TGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUsIHN0cmluZz4pIHtcclxuICAgICAgICAgICAgU2V0dGluZ3NEYXRhTW9kdWxlLnVwZGF0ZVNldHRpbmdzKHtcclxuICAgICAgICAgICAgICAgIC4uLlNldHRpbmdzRGF0YU1vZHVsZS5zZXR0aW5ncyxcclxuICAgICAgICAgICAgICAgIGNvbG9yczoge1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLlNldHRpbmdzRGF0YU1vZHVsZS5zZXR0aW5ncy5jb2xvcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgbGlmZWZvcm1EaXNjb3Zlcmllczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5TZXR0aW5nc0RhdGFNb2R1bGUuc2V0dGluZ3MuY29sb3JzLmxpZmVmb3JtRGlzY292ZXJpZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50czogdmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSByZXNldENvbG9ycygpIHtcclxuICAgICAgICAgICAgY29uc3QgZGVmYXVsdENvbG9ycyA9IGdldERlZmF1bHRTZXR0aW5ncyhMYW5ndWFnZUtleS5kZSkuY29sb3JzLmxpZmVmb3JtRGlzY292ZXJpZXMuZXZlbnRzO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbG9ycyhkZWZhdWx0Q29sb3JzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc2NyaXB0PiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RocmVhZC1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9MaWZlZm9ybURpc2NvdmVyeUNvbG9yU2V0dGluZ3MudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTGlmZWZvcm1EaXNjb3ZlcnlDb2xvclNldHRpbmdzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vTGlmZWZvcm1EaXNjb3ZlcnlDb2xvclNldHRpbmdzLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zODQ5OWIzYSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9MaWZlZm9ybURpc2NvdmVyeUNvbG9yU2V0dGluZ3MudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9MaWZlZm9ybURpc2NvdmVyeUNvbG9yU2V0dGluZ3MudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnc2Nyb2xsYWJsZS1jaGFydCcse2F0dHJzOntcImRhdGFzZXRzXCI6X3ZtLmNvbXB1dGVkRGF0YXNldHMsXCJ4LWxhYmVsLWZvcm1hdHRlclwiOmZ1bmN0aW9uIChpbmRleCkgeyByZXR1cm4gX3ZtLmZvcm1hdERhdGUoaW5kZXgpOyB9LFwibm8tbGVnZW5kXCI6X3ZtLm5vTGVnZW5kLFwiaGlkZS10b29sdGlwLWZvb3RlclwiOl92bS5ub1Rvb2x0aXBGb290ZXJ9LHNjb3BlZFNsb3RzOl92bS5fdShbe2tleTpcInRvb2x0aXAtZm9vdGVyXCIsZm46ZnVuY3Rpb24ocmVmKXtcbnZhciBkYXRhc2V0cyA9IHJlZi5kYXRhc2V0cztcbnJldHVybiBbX3ZtLl90KFwidG9vbHRpcC1mb290ZXJcIixudWxsLHtcImRhdGFzZXRzXCI6ZGF0YXNldHN9KV19fV0sbnVsbCx0cnVlKX0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XHJcbiAgICA8c2Nyb2xsYWJsZS1jaGFydFxyXG4gICAgICAgIDpkYXRhc2V0cz1cImNvbXB1dGVkRGF0YXNldHNcIlxyXG4gICAgICAgIDp4LWxhYmVsLWZvcm1hdHRlcj1cIihpbmRleCkgPT4gZm9ybWF0RGF0ZShpbmRleClcIlxyXG4gICAgICAgIDpuby1sZWdlbmQ9XCJub0xlZ2VuZFwiXHJcbiAgICAgICAgOmhpZGUtdG9vbHRpcC1mb290ZXI9XCJub1Rvb2x0aXBGb290ZXJcIlxyXG4gICAgPlxyXG4gICAgICAgIDx0ZW1wbGF0ZSAjdG9vbHRpcC1mb290ZXI9XCJ7IGRhdGFzZXRzIH1cIj5cclxuICAgICAgICAgICAgPHNsb3QgbmFtZT1cInRvb2x0aXAtZm9vdGVyXCIgOmRhdGFzZXRzPVwiZGF0YXNldHNcIiAvPlxyXG4gICAgICAgIDwvdGVtcGxhdGU+XHJcbiAgICA8L3Njcm9sbGFibGUtY2hhcnQ+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0IGxhbmc9XCJ0c1wiPlxyXG4gICAgaW1wb3J0IHsgUHJvcFR5cGUgfSBmcm9tICd2dWUnO1xyXG4gICAgaW1wb3J0IHsgYWRkRGF5cywgZGlmZmVyZW5jZUluRGF5cywgc3RhcnRPZkRheSwgc3ViRGF5cyB9IGZyb20gJ2RhdGUtZm5zJztcclxuICAgIGltcG9ydCB7IENvbXBvbmVudCwgUHJvcCwgVnVlIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7XHJcbiAgICBpbXBvcnQgeyBTY3JvbGxhYmxlQ2hhcnREYXRhc2V0IH0gZnJvbSAnQC92aWV3cy9zdGF0cy9jb21wb25lbnRzL2NvbW1vbi9zY3JvbGxhYmxlLWNoYXJ0L1Njcm9sbGFibGVDaGFydC52dWUnO1xyXG5cclxuICAgIGV4cG9ydCB0eXBlIFN0YXRzQ2hhcnRJdGVtRmlsdGVyRnVuY3Rpb248VD4gPSAoaXRlbTogVCkgPT4gYm9vbGVhbjtcclxuXHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIFN0YXRzQ2hhcnREYXRhc2V0PFQ+IHtcclxuICAgICAgICBrZXk6IHN0cmluZztcclxuICAgICAgICBsYWJlbDogc3RyaW5nO1xyXG4gICAgICAgIGNvbG9yOiBzdHJpbmc7XHJcbiAgICAgICAgZ2V0VmFsdWU6IChpdGVtOiBUKSA9PiBudW1iZXI7XHJcbiAgICAgICAgZmlsbGVkPzogYm9vbGVhbjtcclxuICAgICAgICBzdGFjaz86IGJvb2xlYW47XHJcbiAgICAgICAgc2hvd0F2ZXJhZ2U/OiBib29sZWFuO1xyXG4gICAgfVxyXG5cclxuICAgIEBDb21wb25lbnQoe30pXHJcbiAgICBleHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0c0NoYXJ0PFQ+IGV4dGVuZHMgVnVlIHtcclxuXHJcbiAgICAgICAgQFByb3AoeyByZXF1aXJlZDogdHJ1ZSwgdHlwZTogQXJyYXkgYXMgUHJvcFR5cGU8U3RhdHNDaGFydERhdGFzZXQ8VD5bXT4gfSlcclxuICAgICAgICBwcml2YXRlIGRhdGFzZXRzITogU3RhdHNDaGFydERhdGFzZXQ8VD5bXTtcclxuXHJcbiAgICAgICAgQFByb3AoeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6IEJvb2xlYW4gfSlcclxuICAgICAgICBwcml2YXRlIG5vTGVnZW5kITogYm9vbGVhbjtcclxuXHJcbiAgICAgICAgQFByb3AoeyByZXF1aXJlZDogZmFsc2UsIHR5cGU6IEJvb2xlYW4gfSlcclxuICAgICAgICBwcml2YXRlIG5vVG9vbHRpcEZvb3RlciE6IGJvb2xlYW47XHJcblxyXG4gICAgICAgIEBQcm9wKHsgcmVxdWlyZWQ6IHRydWUsIHR5cGU6IFtOdW1iZXIsIERhdGVdIH0pXHJcbiAgICAgICAgcHJpdmF0ZSBmaXJzdERheSE6IG51bWJlciB8IERhdGU7XHJcblxyXG4gICAgICAgIEBQcm9wKHsgcmVxdWlyZWQ6IHRydWUsIHR5cGU6IE9iamVjdCBhcyBQcm9wVHlwZTxSZWNvcmQ8bnVtYmVyLCBUPj4gfSlcclxuICAgICAgICBwcml2YXRlIGl0ZW1zUGVyRGF5ITogUmVjb3JkPG51bWJlciwgVD47XHJcblxyXG4gICAgICAgIEBQcm9wKHsgcmVxdWlyZWQ6IGZhbHNlLCB0eXBlOiBOdW1iZXIsIGRlZmF1bHQ6ICgpID0+IDMwIH0pXHJcbiAgICAgICAgcHJpdmF0ZSBtaW5EYXlzITogbnVtYmVyO1xyXG5cclxuICAgICAgICBwcml2YXRlIGdldCBtaW5EYXkoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0RGF5ID0gdHlwZW9mIHRoaXMuZmlyc3REYXkgPT09ICdudW1iZXInID8gdGhpcy5maXJzdERheSA6IHRoaXMuZmlyc3REYXkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICBjb25zdCB0b2RheSA9IHN0YXJ0T2ZEYXkoRGF0ZS5ub3coKSk7XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbihmaXJzdERheSwgc3ViRGF5cyh0b2RheSwgdGhpcy5taW5EYXlzIC0gMSkuZ2V0VGltZSgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0IGNvbXB1dGVkRGF0YXNldHMoKTogU2Nyb2xsYWJsZUNoYXJ0RGF0YXNldFtdIHtcclxuICAgICAgICAgICAgY29uc3QgbWluRGF5ID0gdGhpcy5taW5EYXk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRheUNvdW50ID0gZGlmZmVyZW5jZUluRGF5cyhzdGFydE9mRGF5KERhdGUubm93KCkpLCBtaW5EYXkpO1xyXG4gICAgICAgICAgICBjb25zdCBkYXlzID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogZGF5Q291bnQgKyAxIH0pLm1hcCgoXywgYWRkKSA9PiBhZGREYXlzKG1pbkRheSwgYWRkKS5nZXRUaW1lKCkpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgaXRlbUJ5RGF5ID0gZGF5cy5tYXAoZGF5ID0+IHRoaXMuaXRlbXNQZXJEYXlbZGF5XSA/PyBudWxsKTtcclxuICAgICAgICAgICAgY29uc3QgZmlsdGVyZWRJdGVtRGF5cyA9IGl0ZW1CeURheS5maWx0ZXIoaXRlbXMgPT4gaXRlbXMgIT0gbnVsbCkubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YXNldHMubWFwKGRhdGFzZXQgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gaXRlbUJ5RGF5Lm1hcChpdGVtID0+IGl0ZW0gPT0gbnVsbCA/IDAgOiBkYXRhc2V0LmdldFZhbHVlKGl0ZW0pKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRvdGFsID0gdmFsdWVzLnJlZHVjZSgoYWNjLCBjdXIpID0+IGFjYyArIGN1ciwgMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBrZXk6IGRhdGFzZXQua2V5LFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBkYXRhc2V0LmNvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBkYXRhc2V0LmxhYmVsLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlczogdmFsdWVzLm1hcCgoeSwgeCkgPT4gKHsgeCwgeSB9KSksXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbGVkOiBkYXRhc2V0LmZpbGxlZCA/PyB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YWNrOiBkYXRhc2V0LnN0YWNrID8/IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgaGlkZVBvaW50czogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgYXZlcmFnZTogZGF0YXNldC5zaG93QXZlcmFnZSA9PSB0cnVlID8gdG90YWwgLyBNYXRoLm1heCgxLCBmaWx0ZXJlZEl0ZW1EYXlzKSA6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBmb3JtYXREYXRlKGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgICAgICAgICBjb25zdCBkYXkgPSBhZGREYXlzKHRoaXMubWluRGF5LCBpbmRleCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRpMThuLiRkKGRheSwgJ2RhdGUnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc2NyaXB0PiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RocmVhZC1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RzLWxvYWRlci9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC00MFswXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9TdGF0c0NoYXJ0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTQwWzBdLnJ1bGVzWzBdLnVzZVswXSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdGhyZWFkLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdHMtbG9hZGVyL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTQwWzBdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzBdLnJ1bGVzWzBdLnVzZVswXSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1N0YXRzQ2hhcnQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9TdGF0c0NoYXJ0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01MTczNmUzNCZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9TdGF0c0NoYXJ0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz10cyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vU3RhdHNDaGFydC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCdkaXYnLHtzdGF0aWNDbGFzczpcImNoYXJ0LWNvbnRhaW5lclwifSxbX2MoJ3N0YXRzLWNoYXJ0Jyx7YXR0cnM6e1wiZGF0YXNldHNcIjpfdm0uZGF0YXNldHMsXCJmaXJzdERheVwiOl92bS5maXJzdERheSxcIml0ZW1zUGVyRGF5XCI6X3ZtLmV4cG9zUGVyRGF5fSxzY29wZWRTbG90czpfdm0uX3UoW3trZXk6XCJ0b29sdGlwLWZvb3RlclwiLGZuOmZ1bmN0aW9uKHJlZil7XG52YXIgZGF0YXNldHMgPSByZWYuZGF0YXNldHM7XG5yZXR1cm4gWyhfdm0uZ2V0VmlzaWJsZURhdGFzZXRzKGRhdGFzZXRzKS5sZW5ndGggPCBkYXRhc2V0cy5sZW5ndGgpP1tfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmb290ZXItaXRlbVwifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwibnVtYmVyXCIsZG9tUHJvcHM6e1widGV4dENvbnRlbnRcIjpfdm0uX3MoX3ZtLiRpMThuLiRuKF92bS5nZXRUb3RhbChfdm0uZ2V0VmlzaWJsZURhdGFzZXRzKGRhdGFzZXRzKSkpKX19KSxfYygnZGl2Jyx7ZG9tUHJvcHM6e1widGV4dENvbnRlbnRcIjpfdm0uX3MoX3ZtLiRpMThuLiR0LmV4dGVuc2lvbi5lbXBpcmUubGlmZWZvcm1zLmRpc2NvdmVyeU1pc3Npb25zKX19KV0pLF9jKCdocicpXTpfdm0uX2UoKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmb290ZXItaXRlbVwifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwibnVtYmVyXCIsZG9tUHJvcHM6e1widGV4dENvbnRlbnRcIjpfdm0uX3MoX3ZtLiRpMThuLiRuKF92bS5nZXRUb3RhbChkYXRhc2V0cykpKX19KSxfYygnZGl2Jyx7ZG9tUHJvcHM6e1widGV4dENvbnRlbnRcIjpfdm0uX3MoKChfdm0uJGkxOG4uJHQuZXh0ZW5zaW9uLmVtcGlyZS5saWZlZm9ybXMuZGlzY292ZXJ5TWlzc2lvbnMpICsgXCIgKFwiICsgKF92bS4kaTE4bi4kdC5leHRlbnNpb24uY29tbW9uLnRvdGFsKSArIFwiKVwiKSl9fSldKV19fV0pfSksX2MoJ2Zsb2F0aW5nLW1lbnUnLHthdHRyczp7XCJsZWZ0XCI6XCJcIn0sc2NvcGVkU2xvdHM6X3ZtLl91KFt7a2V5OlwiYWN0aXZhdG9yXCIsZm46ZnVuY3Rpb24oKXtyZXR1cm4gW19jKCdidXR0b24nLHtvbjp7XCJjbGlja1wiOmZ1bmN0aW9uKCRldmVudCl7X3ZtLnNob3dTZXR0aW5ncyA9ICFfdm0uc2hvd1NldHRpbmdzfX19LFtfYygnc3Bhbicse3N0YXRpY0NsYXNzOlwibWRpIG1kaS1jb2dcIn0pXSldfSxwcm94eTp0cnVlfV0pLG1vZGVsOnt2YWx1ZTooX3ZtLnNob3dTZXR0aW5ncyksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS5zaG93U2V0dGluZ3M9JCR2fSxleHByZXNzaW9uOlwic2hvd1NldHRpbmdzXCJ9fSxbX2MoJ2xpZmVmb3JtLWRpc2NvdmVyeS1jb2xvci1zZXR0aW5ncycpXSwxKV0sMSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cclxuICAgIDxkaXYgY2xhc3M9XCJjaGFydC1jb250YWluZXJcIj5cclxuICAgICAgICA8c3RhdHMtY2hhcnQgOmRhdGFzZXRzPVwiZGF0YXNldHNcIiA6Zmlyc3REYXk9XCJmaXJzdERheVwiIDppdGVtc1BlckRheT1cImV4cG9zUGVyRGF5XCI+XHJcbiAgICAgICAgICAgIDx0ZW1wbGF0ZSAjdG9vbHRpcC1mb290ZXI9XCJ7IGRhdGFzZXRzIH1cIj5cclxuICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwiZ2V0VmlzaWJsZURhdGFzZXRzKGRhdGFzZXRzKS5sZW5ndGggPCBkYXRhc2V0cy5sZW5ndGhcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9vdGVyLWl0ZW1cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm51bWJlclwiIHYtdGV4dD1cIiRpMThuLiRuKGdldFRvdGFsKGdldFZpc2libGVEYXRhc2V0cyhkYXRhc2V0cykpKVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi10ZXh0PVwiJGkxOG4uJHQuZXh0ZW5zaW9uLmVtcGlyZS5saWZlZm9ybXMuZGlzY292ZXJ5TWlzc2lvbnNcIiAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxociAvPlxyXG4gICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cclxuXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9vdGVyLWl0ZW1cIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibnVtYmVyXCIgdi10ZXh0PVwiJGkxOG4uJG4oZ2V0VG90YWwoZGF0YXNldHMpKVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LXRleHQ9XCJgJHskaTE4bi4kdC5leHRlbnNpb24uZW1waXJlLmxpZmVmb3Jtcy5kaXNjb3ZlcnlNaXNzaW9uc30gKCR7JGkxOG4uJHQuZXh0ZW5zaW9uLmNvbW1vbi50b3RhbH0pYFwiIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgICAgICA8L3N0YXRzLWNoYXJ0PlxyXG5cclxuICAgICAgICA8ZmxvYXRpbmctbWVudSB2LW1vZGVsPVwic2hvd1NldHRpbmdzXCIgbGVmdD5cclxuICAgICAgICAgICAgPHRlbXBsYXRlICNhY3RpdmF0b3I+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIEBjbGljaz1cInNob3dTZXR0aW5ncyA9ICFzaG93U2V0dGluZ3NcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kaSBtZGktY29nXCIgLz5cclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxyXG5cclxuICAgICAgICAgICAgPGxpZmVmb3JtLWRpc2NvdmVyeS1jb2xvci1zZXR0aW5ncyAvPlxyXG4gICAgICAgIDwvZmxvYXRpbmctbWVudT5cclxuICAgIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdCBsYW5nPVwidHNcIj5cclxuICAgIGltcG9ydCB7IENvbXBvbmVudCwgVnVlIH0gZnJvbSAndnVlLXByb3BlcnR5LWRlY29yYXRvcic7XHJcbiAgICBpbXBvcnQgU3RhdHNDaGFydCwgeyBTdGF0c0NoYXJ0RGF0YXNldCB9IGZyb20gJ0BzdGF0cy9jb21wb25lbnRzL3N0YXRzL1N0YXRzQ2hhcnQudnVlJztcclxuICAgIGltcG9ydCB7IFNjb2xsYWJsZUNoYXJ0Rm9vdGVyRGF0YXNldCB9IGZyb20gJ0Avdmlld3Mvc3RhdHMvY29tcG9uZW50cy9jb21tb24vc2Nyb2xsYWJsZS1jaGFydC9TY3JvbGxhYmxlQ2hhcnQudnVlJztcclxuICAgIGltcG9ydCB7IERhaWx5TGlmZWZvcm1EaXNjb3ZlcnlSZXN1bHQsIExpZmVmb3JtRGlzY292ZXJ5RGF0YU1vZHVsZSB9IGZyb20gJ0Avdmlld3Mvc3RhdHMvZGF0YS9MaWZlZm9ybURpc2NvdmVyeURhdGFNb2R1bGUnO1xyXG4gICAgaW1wb3J0IHsgU2V0dGluZ3NEYXRhTW9kdWxlIH0gZnJvbSAnQC92aWV3cy9zdGF0cy9kYXRhL1NldHRpbmdzRGF0YU1vZHVsZSc7XHJcbiAgICBpbXBvcnQgTGlmZWZvcm1EaXNjb3ZlcnlDb2xvclNldHRpbmdzIGZyb20gJ0BzdGF0cy9jb21wb25lbnRzL3NldHRpbmdzL2NvbG9ycy9MaWZlZm9ybURpc2NvdmVyeUNvbG9yU2V0dGluZ3MudnVlJztcclxuICAgIGltcG9ydCB7IExpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlIH0gZnJvbSAnQC9zaGFyZWQvbW9kZWxzL2xpZmVmb3JtLWRpc2NvdmVyaWVzL0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlJztcclxuXHJcbiAgICBAQ29tcG9uZW50KHtcclxuICAgICAgICBjb21wb25lbnRzOiB7XHJcbiAgICAgICAgICAgIFN0YXRzQ2hhcnQsXHJcbiAgICAgICAgICAgIExpZmVmb3JtRGlzY292ZXJ5Q29sb3JTZXR0aW5ncyxcclxuICAgICAgICB9LFxyXG4gICAgfSlcclxuICAgIGV4cG9ydCBkZWZhdWx0IGNsYXNzIENoYXJ0cyBleHRlbmRzIFZ1ZSB7XHJcblxyXG4gICAgICAgIHByaXZhdGUgc2hvd1NldHRpbmdzID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0IGNvbG9ycygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFNldHRpbmdzRGF0YU1vZHVsZS5zZXR0aW5ncy5jb2xvcnMubGlmZWZvcm1EaXNjb3Zlcmllcy5ldmVudHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGdldCBmaXJzdERheSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIExpZmVmb3JtRGlzY292ZXJ5RGF0YU1vZHVsZS5maXJzdERheTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0IGV4cG9zUGVyRGF5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gTGlmZWZvcm1EaXNjb3ZlcnlEYXRhTW9kdWxlLmRhaWx5UmVzdWx0cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0IGRhdGFzZXRzKCk6IFN0YXRzQ2hhcnREYXRhc2V0PERhaWx5TGlmZWZvcm1EaXNjb3ZlcnlSZXN1bHQ+W10ge1xyXG4gICAgICAgICAgICBjb25zdCB0eXBlR3JvdXBzOiBMaWZlZm9ybURpc2NvdmVyeUV2ZW50VHlwZVtdW10gPSBbXHJcbiAgICAgICAgICAgICAgICBbTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUubm90aGluZ10sXHJcbiAgICAgICAgICAgICAgICBbTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUubG9zdFNoaXBdLFxyXG4gICAgICAgICAgICAgICAgW0xpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlLm5ld0xpZmVmb3JtRm91bmQsIExpZmVmb3JtRGlzY292ZXJ5RXZlbnRUeXBlLmtub3duTGlmZWZvcm1Gb3VuZF0sXHJcbiAgICAgICAgICAgICAgICBbTGlmZWZvcm1EaXNjb3ZlcnlFdmVudFR5cGUuYXJ0aWZhY3RzXSxcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICByZXR1cm4gdHlwZUdyb3Vwcy5tYXAoZ3JvdXAgPT4gKHtcclxuICAgICAgICAgICAgICAgIGtleTogZ3JvdXBbMF0sXHJcbiAgICAgICAgICAgICAgICBsYWJlbDogZ3JvdXAubGVuZ3RoID09IDFcclxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMuJGkxOG4uJHQuZXh0ZW5zaW9uLmVtcGlyZS5saWZlZm9ybXMuZXZlbnRUeXBlc1tncm91cFswXV1cclxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuJGkxOG4uJHQuZXh0ZW5zaW9uLmVtcGlyZS5saWZlZm9ybXMubGlmZWZvcm1Gb3VuZCxcclxuICAgICAgICAgICAgICAgIGNvbG9yOiBncm91cC5sZW5ndGggPT0gMSA/IHRoaXMuY29sb3JzW2dyb3VwWzBdXSA6IHRoaXMuY29sb3JzLmtub3duTGlmZWZvcm1Gb3VuZCxcclxuICAgICAgICAgICAgICAgIGZpbGxlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGdldFZhbHVlOiAocmVzdWx0OiBEYWlseUxpZmVmb3JtRGlzY292ZXJ5UmVzdWx0KSA9PiBncm91cC5yZWR1Y2UoKGFjYywgY3VyKSA9PiBhY2MgKyByZXN1bHQuZXZlbnRzW2N1cl0sIDApLFxyXG4gICAgICAgICAgICAgICAgc2hvd0F2ZXJhZ2U6IHRydWUsXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0VmlzaWJsZURhdGFzZXRzKGRhdGFzZXRzOiBTY29sbGFibGVDaGFydEZvb3RlckRhdGFzZXRbXSk6IFNjb2xsYWJsZUNoYXJ0Rm9vdGVyRGF0YXNldFtdIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRhdGFzZXRzLmZpbHRlcihkID0+IGQudmlzaWJsZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGdldFRvdGFsKGRhdGFzZXRzOiBTY29sbGFibGVDaGFydEZvb3RlckRhdGFzZXRbXSk6IG51bWJlciB7XHJcbiAgICAgICAgICAgIHJldHVybiBkYXRhc2V0cy5yZWR1Y2UoKGFjYywgY3VyKSA9PiBhY2MgKyBjdXIudmFsdWUsIDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cclxuICAgIC5mb290ZXItaXRlbSB7XHJcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcclxuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG8gMWZyO1xyXG4gICAgICAgIGNvbHVtbi1nYXA6IDRweDtcclxuXHJcbiAgICAgICAgLm51bWJlciB7XHJcbiAgICAgICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAuY2hhcnQtY29udGFpbmVyIHtcclxuICAgICAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIGF1dG87XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IHN0YXJ0O1xyXG4gICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgIH1cclxuPC9zdHlsZT4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ2hhcnQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90aHJlYWQtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy90cy1sb2FkZXIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNDBbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ2hhcnQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9DaGFydC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MmIzZmM5Y2Umc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQ2hhcnQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPXRzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9DaGFydC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9dHMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vQ2hhcnQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9MmIzZmM5Y2UmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCIyYjNmYzljZVwiLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGFkZERheXNcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRheXMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBkYXlzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gLSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgZGF5cyBhZGRlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAtIDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFkZCAxMCBkYXlzIHRvIDEgU2VwdGVtYmVyIDIwMTQ6XG4gKiBjb25zdCByZXN1bHQgPSBhZGREYXlzKG5ldyBEYXRlKDIwMTQsIDgsIDEpLCAxMClcbiAqIC8vPT4gVGh1IFNlcCAxMSAyMDE0IDAwOjAwOjAwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkRGF5cyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcblxuICBpZiAoaXNOYU4oYW1vdW50KSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG5cbiAgaWYgKCFhbW91bnQpIHtcbiAgICAvLyBJZiAwIGRheXMsIG5vLW9wIHRvIGF2b2lkIGNoYW5naW5nIHRpbWVzIGluIHRoZSBob3VyIGJlZm9yZSBlbmQgb2YgRFNUXG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cblxuICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBhbW91bnQpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZkRheSBmcm9tIFwiLi4vc3RhcnRPZkRheS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fREFZID0gODY0MDAwMDA7XG4vKipcbiAqIEBuYW1lIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5c1xuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBHZXQgdGhlIG51bWJlciBvZiBjYWxlbmRhciBkYXlzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBudW1iZXIgb2YgY2FsZW5kYXIgZGF5cyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcy4gVGhpcyBtZWFucyB0aGF0IHRoZSB0aW1lcyBhcmUgcmVtb3ZlZFxuICogZnJvbSB0aGUgZGF0ZXMgYW5kIHRoZW4gdGhlIGRpZmZlcmVuY2UgaW4gZGF5cyBpcyBjYWxjdWxhdGVkLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZUxlZnQgLSB0aGUgbGF0ZXIgZGF0ZVxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIGVhcmxpZXIgZGF0ZVxuICogQHJldHVybnMge051bWJlcn0gdGhlIG51bWJlciBvZiBjYWxlbmRhciBkYXlzXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEhvdyBtYW55IGNhbGVuZGFyIGRheXMgYXJlIGJldHdlZW5cbiAqIC8vIDIgSnVseSAyMDExIDIzOjAwOjAwIGFuZCAyIEp1bHkgMjAxMiAwMDowMDowMD9cbiAqIGNvbnN0IHJlc3VsdCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhcbiAqICAgbmV3IERhdGUoMjAxMiwgNiwgMiwgMCwgMCksXG4gKiAgIG5ldyBEYXRlKDIwMTEsIDYsIDIsIDIzLCAwKVxuICogKVxuICogLy89PiAzNjZcbiAqIC8vIEhvdyBtYW55IGNhbGVuZGFyIGRheXMgYXJlIGJldHdlZW5cbiAqIC8vIDIgSnVseSAyMDExIDIzOjU5OjAwIGFuZCAzIEp1bHkgMjAxMSAwMDowMTowMD9cbiAqIGNvbnN0IHJlc3VsdCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhcbiAqICAgbmV3IERhdGUoMjAxMSwgNiwgMywgMCwgMSksXG4gKiAgIG5ldyBEYXRlKDIwMTEsIDYsIDIsIDIzLCA1OSlcbiAqIClcbiAqIC8vPT4gMVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhkaXJ0eURhdGVMZWZ0LCBkaXJ0eURhdGVSaWdodCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIHN0YXJ0T2ZEYXlMZWZ0ID0gc3RhcnRPZkRheShkaXJ0eURhdGVMZWZ0KTtcbiAgdmFyIHN0YXJ0T2ZEYXlSaWdodCA9IHN0YXJ0T2ZEYXkoZGlydHlEYXRlUmlnaHQpO1xuICB2YXIgdGltZXN0YW1wTGVmdCA9IHN0YXJ0T2ZEYXlMZWZ0LmdldFRpbWUoKSAtIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoc3RhcnRPZkRheUxlZnQpO1xuICB2YXIgdGltZXN0YW1wUmlnaHQgPSBzdGFydE9mRGF5UmlnaHQuZ2V0VGltZSgpIC0gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhzdGFydE9mRGF5UmlnaHQpOyAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgZGF5IGlzIG5vdCBjb25zdGFudFxuICAvLyAoZS5nLiBpdCdzIGRpZmZlcmVudCBpbiB0aGUgZGF5IG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcblxuICByZXR1cm4gTWF0aC5yb3VuZCgodGltZXN0YW1wTGVmdCAtIHRpbWVzdGFtcFJpZ2h0KSAvIE1JTExJU0VDT05EU19JTl9EQVkpO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyBmcm9tIFwiLi4vZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiOyAvLyBMaWtlIGBjb21wYXJlQXNjYCBidXQgdXNlcyBsb2NhbCB0aW1lIG5vdCBVVEMsIHdoaWNoIGlzIG5lZWRlZFxuLy8gZm9yIGFjY3VyYXRlIGVxdWFsaXR5IGNvbXBhcmlzb25zIG9mIFVUQyB0aW1lc3RhbXBzIHRoYXQgZW5kIHVwXG4vLyBoYXZpbmcgdGhlIHNhbWUgcmVwcmVzZW50YXRpb24gaW4gbG9jYWwgdGltZSwgZS5nLiBvbmUgaG91ciBiZWZvcmVcbi8vIERTVCBlbmRzIHZzLiB0aGUgaW5zdGFudCB0aGF0IERTVCBlbmRzLlxuXG5mdW5jdGlvbiBjb21wYXJlTG9jYWxBc2MoZGF0ZUxlZnQsIGRhdGVSaWdodCkge1xuICB2YXIgZGlmZiA9IGRhdGVMZWZ0LmdldEZ1bGxZZWFyKCkgLSBkYXRlUmlnaHQuZ2V0RnVsbFllYXIoKSB8fCBkYXRlTGVmdC5nZXRNb250aCgpIC0gZGF0ZVJpZ2h0LmdldE1vbnRoKCkgfHwgZGF0ZUxlZnQuZ2V0RGF0ZSgpIC0gZGF0ZVJpZ2h0LmdldERhdGUoKSB8fCBkYXRlTGVmdC5nZXRIb3VycygpIC0gZGF0ZVJpZ2h0LmdldEhvdXJzKCkgfHwgZGF0ZUxlZnQuZ2V0TWludXRlcygpIC0gZGF0ZVJpZ2h0LmdldE1pbnV0ZXMoKSB8fCBkYXRlTGVmdC5nZXRTZWNvbmRzKCkgLSBkYXRlUmlnaHQuZ2V0U2Vjb25kcygpIHx8IGRhdGVMZWZ0LmdldE1pbGxpc2Vjb25kcygpIC0gZGF0ZVJpZ2h0LmdldE1pbGxpc2Vjb25kcygpO1xuXG4gIGlmIChkaWZmIDwgMCkge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIGlmIChkaWZmID4gMCkge1xuICAgIHJldHVybiAxOyAvLyBSZXR1cm4gMCBpZiBkaWZmIGlzIDA7IHJldHVybiBOYU4gaWYgZGlmZiBpcyBOYU5cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZGlmZjtcbiAgfVxufVxuLyoqXG4gKiBAbmFtZSBkaWZmZXJlbmNlSW5EYXlzXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbnVtYmVyIG9mIGZ1bGwgZGF5cyBiZXR3ZWVuIHRoZSBnaXZlbiBkYXRlcy5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldCB0aGUgbnVtYmVyIG9mIGZ1bGwgZGF5IHBlcmlvZHMgYmV0d2VlbiB0d28gZGF0ZXMuIEZyYWN0aW9uYWwgZGF5cyBhcmVcbiAqIHRydW5jYXRlZCB0b3dhcmRzIHplcm8uXG4gKlxuICogT25lIFwiZnVsbCBkYXlcIiBpcyB0aGUgZGlzdGFuY2UgYmV0d2VlbiBhIGxvY2FsIHRpbWUgaW4gb25lIGRheSB0byB0aGUgc2FtZVxuICogbG9jYWwgdGltZSBvbiB0aGUgbmV4dCBvciBwcmV2aW91cyBkYXkuIEEgZnVsbCBkYXkgY2FuIHNvbWV0aW1lcyBiZSBsZXNzIHRoYW5cbiAqIG9yIG1vcmUgdGhhbiAyNCBob3VycyBpZiBhIGRheWxpZ2h0IHNhdmluZ3MgY2hhbmdlIGhhcHBlbnMgYmV0d2VlbiB0d28gZGF0ZXMuXG4gKlxuICogVG8gaWdub3JlIERTVCBhbmQgb25seSBtZWFzdXJlIGV4YWN0IDI0LWhvdXIgcGVyaW9kcywgdXNlIHRoaXMgaW5zdGVhZDpcbiAqIGBNYXRoLmZsb29yKGRpZmZlcmVuY2VJbkhvdXJzKGRhdGVMZWZ0LCBkYXRlUmlnaHQpLzI0KXwwYC5cbiAqXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBsYXRlciBkYXRlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgZWFybGllciBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgbnVtYmVyIG9mIGZ1bGwgZGF5cyBhY2NvcmRpbmcgdG8gdGhlIGxvY2FsIHRpbWV6b25lXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEhvdyBtYW55IGZ1bGwgZGF5cyBhcmUgYmV0d2VlblxuICogLy8gMiBKdWx5IDIwMTEgMjM6MDA6MDAgYW5kIDIgSnVseSAyMDEyIDAwOjAwOjAwP1xuICogY29uc3QgcmVzdWx0ID0gZGlmZmVyZW5jZUluRGF5cyhcbiAqICAgbmV3IERhdGUoMjAxMiwgNiwgMiwgMCwgMCksXG4gKiAgIG5ldyBEYXRlKDIwMTEsIDYsIDIsIDIzLCAwKVxuICogKVxuICogLy89PiAzNjVcbiAqIC8vIEhvdyBtYW55IGZ1bGwgZGF5cyBhcmUgYmV0d2VlblxuICogLy8gMiBKdWx5IDIwMTEgMjM6NTk6MDAgYW5kIDMgSnVseSAyMDExIDAwOjAxOjAwP1xuICogY29uc3QgcmVzdWx0ID0gZGlmZmVyZW5jZUluRGF5cyhcbiAqICAgbmV3IERhdGUoMjAxMSwgNiwgMywgMCwgMSksXG4gKiAgIG5ldyBEYXRlKDIwMTEsIDYsIDIsIDIzLCA1OSlcbiAqIClcbiAqIC8vPT4gMFxuICogLy8gSG93IG1hbnkgZnVsbCBkYXlzIGFyZSBiZXR3ZWVuXG4gKiAvLyAxIE1hcmNoIDIwMjAgMDowMCBhbmQgMSBKdW5lIDIwMjAgMDowMCA/XG4gKiAvLyBOb3RlOiBiZWNhdXNlIGxvY2FsIHRpbWUgaXMgdXNlZCwgdGhlXG4gKiAvLyByZXN1bHQgd2lsbCBhbHdheXMgYmUgOTIgZGF5cywgZXZlbiBpblxuICogLy8gdGltZSB6b25lcyB3aGVyZSBEU1Qgc3RhcnRzIGFuZCB0aGVcbiAqIC8vIHBlcmlvZCBoYXMgb25seSA5MioyNC0xIGhvdXJzLlxuICogY29uc3QgcmVzdWx0ID0gZGlmZmVyZW5jZUluRGF5cyhcbiAqICAgbmV3IERhdGUoMjAyMCwgNSwgMSksXG4gKiAgIG5ldyBEYXRlKDIwMjAsIDIsIDEpXG4gKiApXG4vLz0+IDkyXG4gKi9cblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaWZmZXJlbmNlSW5EYXlzKGRpcnR5RGF0ZUxlZnQsIGRpcnR5RGF0ZVJpZ2h0KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZUxlZnQgPSB0b0RhdGUoZGlydHlEYXRlTGVmdCk7XG4gIHZhciBkYXRlUmlnaHQgPSB0b0RhdGUoZGlydHlEYXRlUmlnaHQpO1xuICB2YXIgc2lnbiA9IGNvbXBhcmVMb2NhbEFzYyhkYXRlTGVmdCwgZGF0ZVJpZ2h0KTtcbiAgdmFyIGRpZmZlcmVuY2UgPSBNYXRoLmFicyhkaWZmZXJlbmNlSW5DYWxlbmRhckRheXMoZGF0ZUxlZnQsIGRhdGVSaWdodCkpO1xuICBkYXRlTGVmdC5zZXREYXRlKGRhdGVMZWZ0LmdldERhdGUoKSAtIHNpZ24gKiBkaWZmZXJlbmNlKTsgLy8gTWF0aC5hYnMoZGlmZiBpbiBmdWxsIGRheXMgLSBkaWZmIGluIGNhbGVuZGFyIGRheXMpID09PSAxIGlmIGxhc3QgY2FsZW5kYXIgZGF5IGlzIG5vdCBmdWxsXG4gIC8vIElmIHNvLCByZXN1bHQgbXVzdCBiZSBkZWNyZWFzZWQgYnkgMSBpbiBhYnNvbHV0ZSB2YWx1ZVxuXG4gIHZhciBpc0xhc3REYXlOb3RGdWxsID0gTnVtYmVyKGNvbXBhcmVMb2NhbEFzYyhkYXRlTGVmdCwgZGF0ZVJpZ2h0KSA9PT0gLXNpZ24pO1xuICB2YXIgcmVzdWx0ID0gc2lnbiAqIChkaWZmZXJlbmNlIC0gaXNMYXN0RGF5Tm90RnVsbCk7IC8vIFByZXZlbnQgbmVnYXRpdmUgemVyb1xuXG4gIHJldHVybiByZXN1bHQgPT09IDAgPyAwIDogcmVzdWx0O1xufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkRGF5cyBmcm9tIFwiLi4vYWRkRGF5cy9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3ViRGF5c1xuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBkYXlzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBkYXlzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgZGF5cyB0byBiZSBzdWJ0cmFjdGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIGRheXMgc3VidHJhY3RlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTdWJ0cmFjdCAxMCBkYXlzIGZyb20gMSBTZXB0ZW1iZXIgMjAxNDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN1YkRheXMobmV3IERhdGUoMjAxNCwgOCwgMSksIDEwKVxuICogLy89PiBGcmkgQXVnIDIyIDIwMTQgMDA6MDA6MDBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdWJEYXlzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gYWRkRGF5cyhkaXJ0eURhdGUsIC1hbW91bnQpO1xufSJdLCJuYW1lcyI6WyJnZXREZWZhdWx0U2V0dGluZ3MiLCJsYW5ndWFnZSIsIm9sZExhbmciLCJkZWZhdWx0U2V0dGluZ3MiLCJkYXRlUmFuZ2VzIiwibGFiZWwiLCJ0eXBlIiwic2tpcCIsInRha2UiLCJsb3N0U2hpcHNSZXNvdXJjZVVuaXRzIiwiZmFjdG9yIiwiZGV1dGVyaXVtRmFjdG9yIiwicmVzb3VyY2VCYWxhbmNlIiwic2hvd0RldGFpbGVkQnJlYWtkb3duIiwiaW5jbHVkZUV4cGVkaXRpb25Gb3VuZFNoaXBzUmVzb3VyY2VVbml0cyIsImluY2x1ZGVMb3N0U2hpcHNSZXNvdXJjZVVuaXRzIiwiaW5jbHVkZUxvc3RMb290UmVzb3VyY2VzIiwiY29udmVyc2lvblJhdGVzIiwibW9kZSIsIm1zdSIsImNyeXN0YWwiLCJkZXV0ZXJpdW0iLCJkc3UiLCJtZXRhbCIsInNob3dDZWxsc1dpdGhDb252ZXJ0ZWRSZXNvdXJjZVVuaXRzIiwiZXhwZWRpdGlvbkZvdW5kU2hpcHNSZXNvdXJjZVVuaXRzIiwiZXh0ZW5zaW9uTGFuZ3VhZ2UiLCJkZWZhdWx0Um91dGVzIiwiY29sb3JzIiwiY29tYmF0UmVzdWx0cyIsInJlc291cmNlcyIsInRvdGFsQ29udmVydGVkIiwic2hpcHMiLCJleHBlZGl0aW9ucyIsImV2ZW50cyIsInNpemVzIiwiZGVwbGV0aW9uIiwidW5rbm93biIsImxpZmVmb3JtRGlzY292ZXJpZXMiLCJhcnRpZmFjdEZpbmRpbmdTaXplcyIsImxpZmVmb3JtcyIsInVuaXZlcnNlSGlzdG9yeSIsInVwZGF0ZVRpbWVzIiwiZW5hYmxlZCIsInRyYWNrSGlzdG9yeSIsImNvbWJhdFRyYWNraW5nIiwiaWdub3JlRXNwaW9uYWdlRmlnaHRzIiwibWVzc2FnZVRyYWNraW5nIiwic2hvd1NpbXBsaWZpZWRSZXN1bHRzIiwiZGVicmlzRmllbGRzIiwic2VwYXJhdGVFeHBlZGl0aW9uRGVicmlzRmllbGRzIiwicmVuZGVyIiwiX3ZtIiwidGhpcyIsIl9oIiwiJGNyZWF0ZUVsZW1lbnQiLCJfYyIsIl9zZWxmIiwic3RhdGljQ2xhc3MiLCJhdHRycyIsIiRpMThuIiwiJHQiLCJleHRlbnNpb24iLCJzZXR0aW5ncyIsInJlc2V0Iiwib24iLCIkZXZlbnQiLCIkZW1pdCIsInN0YXRpY1JlbmRlckZucyIsImNvbXBvbmVudCIsInN0YXRpY1N0eWxlIiwiY29sdW1ucyIsIml0ZW1zIiwic2NvcGVkU2xvdHMiLCJfdSIsImtleSIsImZuIiwicmVmIiwiZG9tUHJvcHMiLCJfcyIsInZhbHVlIiwiJHJlZnMiLCJjbGljayIsInVwZGF0ZUNvbG9yIiwic3R5bGUiLCJiYWNrZ3JvdW5kIiwibGFiZWxzIiwia2V5cyIsInVwZGF0ZUNvbG9ycyIsInJlc2V0Q29sb3JzIiwiY29tcHV0ZWREYXRhc2V0cyIsImluZGV4IiwiZm9ybWF0RGF0ZSIsIm5vTGVnZW5kIiwibm9Ub29sdGlwRm9vdGVyIiwiZGF0YXNldHMiLCJfdCIsImZpcnN0RGF5IiwiZXhwb3NQZXJEYXkiLCJnZXRWaXNpYmxlRGF0YXNldHMiLCJsZW5ndGgiLCIkbiIsImdldFRvdGFsIiwiZW1waXJlIiwiZGlzY292ZXJ5TWlzc2lvbnMiLCJfZSIsImNvbW1vbiIsInNob3dTZXR0aW5ncyIsInByb3h5IiwibW9kZWwiLCJjYWxsYmFjayIsIiQkdiIsImV4cHJlc3Npb24iLCJhZGREYXlzIiwiZGlydHlEYXRlIiwiZGlydHlBbW91bnQiLCJhcmd1bWVudHMiLCJkYXRlIiwiYW1vdW50IiwiaXNOYU4iLCJEYXRlIiwiTmFOIiwic2V0RGF0ZSIsImdldERhdGUiLCJNSUxMSVNFQ09ORFNfSU5fREFZIiwiZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzIiwiZGlydHlEYXRlTGVmdCIsImRpcnR5RGF0ZVJpZ2h0IiwicmVxdWlyZWRBcmdzIiwic3RhcnRPZkRheUxlZnQiLCJzdGFydE9mRGF5Iiwic3RhcnRPZkRheVJpZ2h0IiwidGltZXN0YW1wTGVmdCIsImdldFRpbWUiLCJnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIiwidGltZXN0YW1wUmlnaHQiLCJNYXRoIiwicm91bmQiLCJjb21wYXJlTG9jYWxBc2MiLCJkYXRlTGVmdCIsImRhdGVSaWdodCIsImRpZmYiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsImRpZmZlcmVuY2VJbkRheXMiLCJ0b0RhdGUiLCJzaWduIiwiZGlmZmVyZW5jZSIsImFicyIsImlzTGFzdERheU5vdEZ1bGwiLCJOdW1iZXIiLCJyZXN1bHQiLCJzdWJEYXlzIl0sInNvdXJjZVJvb3QiOiIifQ==