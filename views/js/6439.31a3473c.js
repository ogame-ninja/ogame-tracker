"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[6439],{3445:(e,t,i)=>{function s(e,t){const i=["galaxy","system","position","type"];for(const s of i){const i=e[s]-t[s];if(0!=i)return i}return 0}function n(e,t){return 0==s(e,t)}i.d(t,{e:()=>s,a:()=>n})},6439:(e,t,i)=>{i.r(t),i.d(t,{default:()=>M});var s=function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("div",{staticClass:"point-distribution"},[i("grid-table",{attrs:{columns:e.columns,items:e.items,footerItems:e.footerItems,inline:""},scopedSlots:e._u([{key:"cell-points",fn:function(e){var t=e.value;return[i("decimal-number",{attrs:{value:t}})]}},{key:"footer-points",fn:function(e){var t=e.value;return[i("decimal-number",{attrs:{value:t}})]}}])}),i("grid-table",{attrs:{columns:e.columns,items:e.highscoreItems,footerItems:e.highscoreFooterItems,inline:""},scopedSlots:e._u([{key:"cell-points",fn:function(e){var t=e.value;return[i("decimal-number",{attrs:{value:t}})]}},{key:"footer-points",fn:function(e){var t=e.value;return[i("decimal-number",{attrs:{value:t}})]}}])})],1)},n=[],o=i(655),r=i(6864),l=i(1913),c=i(130),u=i(3445),a=i(5128),h=i(1628),f=i(5794),g=i(6119),d=i(2816),m=i(9681),p=i(4846),P=i(1731),v=i(248),b=i(4028),A=i(8395),y=i(6903),B=i(7076);let C=class extends b.w3{get columns(){return[{key:"label",label:"LOCA: Category"},{key:"points",label:"LOCA: Points"}]}get pointDistribution(){const e=this.researchPoints,t={research:e,planetBuildings:0,moonBuildings:0,lifeformBuildingsActive:0,lifeformBuildingsInactive:0,lifeformTechnologiesActive:0,lifeformTechnologiesInactive:0,defense:0,ships:0,shipsInTransit:this.fleetsShipPoints,total:e};return this.planetPointDistributions.forEach((e=>{t.planetBuildings+=e.buildings,t.lifeformBuildingsActive+=e.lifeformBuildingsActive,t.lifeformBuildingsInactive+=e.lifeformBuildingsInactive,t.lifeformTechnologiesActive+=e.lifeformTechnologiesActive,t.lifeformTechnologiesInactive+=e.lifeformTechnologiesInactive,t.defense+=e.defense,t.ships+=e.ships,Object.keys(e).forEach((i=>{"planetId"!=i&&(t.total+=e[i])}))})),this.moonPointDistributions.forEach((e=>{t.moonBuildings+=e.buildings,t.defense+=e.defense,t.ships+=e.ships,Object.keys(e).forEach((i=>{"moonId"!=i&&(t.total+=e[i])}))})),t}get highscorePoints(){return{economy:this.getEconomyPoints(),research:this.researchPoints,military:this.getMilitaryPoints(),lifeforms:this.getLifeformPoints()}}get highscoreItems(){const{economy:e,research:t,military:i,lifeforms:s}=this.highscorePoints,n=[{label:"LOCA: Economy",points:e},{label:"LOCA: Research",points:t},{label:"LOCA: Military",points:i}];return B.s.serverSettings.lifeforms.enabled&&n.push({label:"LOCA: Lifeforms",points:s}),n}get highscoreFooterItems(){const e=Object.values(this.highscorePoints).reduce(((e,t)=>e+t),0);return[{label:"LOCA: Total Points",points:e}]}get items(){const e=this.pointDistribution,t=[{label:"LOCA: Planet Buildings",points:e.planetBuildings}];return B.s.serverSettings.lifeforms.enabled&&t.push({label:"LOCA: Lifeform Buildings (active)",points:e.lifeformBuildingsActive},{label:"LOCA: Lifeform Buildings (inactive)",points:e.lifeformBuildingsInactive},{label:"LOCA: Lifeform Technologiess (active)",points:e.lifeformTechnologiesActive},{label:"LOCA: Lifeform Technologiess (inactive)",points:e.lifeformTechnologiesInactive}),t.push({label:"LOCA: Moon Buildings",points:e.moonBuildings},{label:"LOCA: Research",points:e.research},{label:"LOCA: Defense",points:e.defense},{label:"LOCA: Ships",points:e.ships},{label:"LOCA: Ships in transit",points:e.shipsInTransit}),t}get footerItems(){return[{label:"LOCA: Actual Total Points",points:this.pointDistribution.total}]}get planets(){return this.planetAndMoons.filter((e=>!e.isMoon))}get planetAndMoons(){return Object.values(A.p.empire.planets)}getLifeformPoints(){const e=this.planets.reduce(((e,t)=>{const i=d.YS.reduce(((e,i)=>{const s=g.ry[i],n=this.getAccumulativeCost(t.lifeformBuildings[i],s);return e+this.getPoints(n)}),0);return e+i}),0),t=this.planets.reduce(((e,t)=>{const i=m.Vs.reduce(((e,i)=>{const s=p.dy[i],n=this.getAccumulativeCost(t.lifeformTechnologies[i],s);return e+this.getPoints(n)}),0);return e+i}),0),i=Object.values(y.F.lifeforms).reduce(((e,t)=>e+t.discoveriesCount),0);return e+t+i}getEconomyPoints(){const e=this.planets.reduce(((e,t)=>e+this.getDefensePoints(t)),0),t=this.planetAndMoons.filter((e=>e.isMoon)).reduce(((e,t)=>{const i=this.getAccumulativeCost(t.buildings[r.A.sensorPhalanx],c.T),s=this.getAccumulativeCost(t.buildings[r.A.jumpGate],c.T),n=this.getPoints(i)+this.getPoints(s);return e+n}),0),i=v.v6.filter((e=>v.XZ.includes(e))),s=this.planetAndMoons.reduce(((e,t)=>{let i;return i=t.isMoon?v.Hf.filter((e=>v.XZ.includes(e))).reduce(((e,i)=>{const s=v.lp[i],n=(0,a.fB)(s.cost,t.ships[i]);return e+this.getPoints(n)}),0):v.oN.filter((e=>v.XZ.includes(e))).reduce(((e,i)=>{const s=v.lp[i],n=(0,a.fB)(s.cost,t.ships[i]);return e+this.getPoints(n)}),0),e+i}),0)+this.ownReturningFleets.reduce(((e,t)=>{const s=i.reduce(((e,i)=>{const s=t.ships[i],n=v.lp[i],o=(0,a.fB)(n.cost,s);return e+this.getPoints(o)}),0);return e+s}),0),n=this.planetAndMoons.reduce(((e,t)=>{let i;return i=t.isMoon?l.RP.reduce(((e,i)=>{const s=l.xo[i],n=t.buildings[i],o=this.getAccumulativeCost(n,s);return e+this.getPoints(o)}),0):l.Ne.reduce(((e,i)=>{const s=l.xo[i],n=t.buildings[i],o=this.getAccumulativeCost(n,s);return e+this.getPoints(o)}),0),e+i}),0);return e+n+t/2+s/2}getMilitaryPoints(){const e=this.planets.reduce(((e,t)=>e+this.getDefensePoints(t)),0),t=this.planetAndMoons.filter((e=>e.isMoon)).reduce(((e,t)=>{const i=this.getAccumulativeCost(t.buildings[r.A.sensorPhalanx],c.T),s=this.getAccumulativeCost(t.buildings[r.A.jumpGate],c.T),n=this.getPoints(i)+this.getPoints(s);return e+n}),0),i=v.v6.filter((e=>v.Hr.includes(e))),s=this.planetAndMoons.reduce(((e,t)=>{let i;return i=t.isMoon?v.Hf.filter((e=>v.Hr.includes(e))).reduce(((e,i)=>{const s=v.lp[i],n=(0,a.fB)(s.cost,t.ships[i]);return e+this.getPoints(n)}),0):v.oN.filter((e=>v.Hr.includes(e))).reduce(((e,i)=>{const s=v.lp[i],n=(0,a.fB)(s.cost,t.ships[i]);return e+this.getPoints(n)}),0),e+i}),0)+this.ownReturningFleets.reduce(((e,t)=>{const s=i.reduce(((e,i)=>{const s=t.ships[i],n=v.lp[i],o=(0,a.fB)(n.cost,s);return e+this.getPoints(o)}),0);return e+s}),0),n=v.v6.filter((e=>v.XZ.includes(e))),o=this.planetAndMoons.reduce(((e,t)=>{let i;return i=t.isMoon?v.Hf.filter((e=>v.XZ.includes(e))).reduce(((e,i)=>{const s=v.lp[i],n=(0,a.fB)(s.cost,t.ships[i]);return e+this.getPoints(n)}),0):v.oN.filter((e=>v.XZ.includes(e))).reduce(((e,i)=>{const s=v.lp[i],n=(0,a.fB)(s.cost,t.ships[i]);return e+this.getPoints(n)}),0),e+i}),0)+this.ownReturningFleets.reduce(((e,t)=>{const i=n.reduce(((e,i)=>{const s=t.ships[i],n=v.lp[i],o=(0,a.fB)(n.cost,s);return e+this.getPoints(o)}),0);return e+i}),0);return e+t/2+s+o/2}get planetPointDistributions(){return this.planets.map((e=>({planetId:e.id,buildings:this.getPlanetBuildingPoints(e),lifeformBuildingsActive:this.getOtherLifeformBuildingPoints(e,!0),lifeformBuildingsInactive:this.getOtherLifeformBuildingPoints(e,!1),lifeformTechnologiesActive:this.getLifeformTechnologyPoints(e,!0),lifeformTechnologiesInactive:this.getLifeformTechnologyPoints(e,!1),defense:this.getDefensePoints(e),ships:this.getPlanetShipPoints(e)})))}getLifeformTechnologyPoints(e,t){const i=m.Vs.filter((i=>e.activeLifeformTechnologies.includes(i)==t));let s={metal:0,crystal:0,deuterium:0,energy:0};return i.forEach((t=>{const i=p.dy[t];s=(0,a.aV)(s,this.getAccumulativeCost(e.lifeformTechnologies[t],i))}),0),this.getPoints(s)}get moonPointDistributions(){const e=Object.values(A.p.empire.planets).filter((e=>e.isMoon));return e.map((e=>({moonId:e.id,buildings:this.getMoonBuildingPoints(e),defense:this.getDefensePoints(e),ships:this.getMoonShipPoints(e)})))}get researchPoints(){const e=A.p.empire.research;let t={metal:0,crystal:0,deuterium:0,energy:0};return P.N.forEach((i=>{const s=P.i[i];t=(0,a.aV)(t,this.getAccumulativeCost(e[i],s))})),this.getPoints(t)}toNumber(e){return"boolean"===typeof e?e?1:0:e}getDefensePoints(e){let t={metal:0,crystal:0,deuterium:0,energy:0};return h.Q.forEach((i=>{const s=this.toNumber(e.defense[i]),n=h.V[i],o=(0,a.fB)(n.cost,s);t=(0,a.aV)(t,o)})),this.getPoints(t)}get ownReturningFleets(){const e=A.p.empire.fleets,t=this.planetAndMoons;return e.filter((e=>(e.isReturnFlight||e.mission==f.q.deployment)&&t.some((t=>(0,u.a)(t.coordinates,e.originCoordinates)))))}get fleetsShipPoints(){let e={metal:0,crystal:0,deuterium:0,energy:0};return this.ownReturningFleets.forEach((t=>{v.v6.forEach((i=>{const s=t.ships[i],n=v.lp[i],o=(0,a.fB)(n.cost,s);e=(0,a.aV)(e,o)}))})),this.getPoints(e)}getPlanetShipPoints(e){let t={metal:0,crystal:0,deuterium:0,energy:0};return v.oN.forEach((i=>{const s=e.ships[i],n=v.lp[i],o=(0,a.fB)(n.cost,s);t=(0,a.aV)(t,o)})),this.getPoints(t)}getMoonShipPoints(e){let t={metal:0,crystal:0,deuterium:0,energy:0};return v.Hf.forEach((i=>{const s=e.ships[i],n=v.lp[i],o=(0,a.fB)(n.cost,s);t=(0,a.aV)(t,o)})),this.getPoints(t)}getOtherLifeformBuildingPoints(e,t){const i=t?d.IU[e.activeLifeform]:d.YS.filter((t=>!d.IU[e.activeLifeform].includes(t))),s=g.yn.map((e=>e.type)),n=i.filter((e=>!s.includes(e)));let o={metal:0,crystal:0,deuterium:0,energy:0};return n.forEach((t=>{const i=g.ry[t];o=(0,a.aV)(o,this.getAccumulativeCost(e.lifeformBuildings[t],i))}),0),this.getPoints(o)}getAccumulativeCost(e,t){let i={metal:0,crystal:0,deuterium:0,energy:0};for(let s=1;s<=e;s++)i=(0,a.aV)(i,t.getCost(s));return i}getPlanetBuildingPoints(e){let t={metal:0,crystal:0,deuterium:0,energy:0};return l.Ne.forEach((i=>{const s=l.xo[i];t=(0,a.aV)(t,this.getAccumulativeCost(e.buildings[i],s))})),this.getPoints(t)}getMoonBuildingPoints(e){let t={metal:0,crystal:0,deuterium:0,energy:0};return l.RP.forEach((i=>{const s=l.xo[i];t=(0,a.aV)(t,this.getAccumulativeCost(e.buildings[i],s))})),this.getPoints(t)}getPoints(e){return(e.metal+e.crystal+e.deuterium)/1e3}};C=(0,o.gn)([(0,b.wA)({})],C);const L=C,T=L;var O=i(1001),I=(0,O.Z)(T,s,n,!1,null,null,null);const M=I.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,