"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[4045],{5397:(e,t,s)=>{s.r(t),s.d(t,{default:()=>_});var r=function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",[s("select",{directives:[{name:"model",rawName:"v-model",value:e.research,expression:"research"}],staticStyle:{display:"block","margin-bottom":"4px"},on:{change:function(t){var s=Array.prototype.filter.call(t.target.options,(function(e){return e.selected})).map((function(e){var t="_value"in e?e._value:e.value;return t}));e.research=t.target.multiple?s:s[0]}}},[s("optgroup",{attrs:{label:e.$i18n.$t.extension.empire.lifeforms.researchBonuses.researchCostTime.researches}},e._l(e.Researches,(function(t){return s("option",{key:t,domProps:{value:t,textContent:e._s(e.$i18n.$t.ogame.research[t])}})})),0),s("option",{attrs:{value:"lifeform-researches"},domProps:{textContent:e._s(e.$i18n.$t.extension.empire.lifeforms.researchBonuses.researchCostTime.lifeformResearches)}})]),s("lifeform-bonuses-breakdown",{attrs:{types:e.bonusTypes,technologies:e.techs,planets:e.planets,limits:e.limits},scopedSlots:e._u([{key:"header",fn:function(){return["lifeform-researches"==e.research?s("div",{staticStyle:{display:"flex","flex-direction":"column","align-items":"start"}},[s("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.lifeforms.researchBonuses.researchCostTime.lifeformResearches)}})]):s("div",{staticStyle:{display:"flex","flex-direction":"column","align-items":"start"}},[s("span",[s("o-research",{staticClass:"mr-2",attrs:{research:e.research}}),s("span",{domProps:{textContent:e._s(e.$i18n.$t.ogame.research[e.research])}})],1)])]},proxy:!0}])})],1)},o=[],i=s(655),n=s(147),a=s(9681),c=s(3418),l=s(4846),h=s(9751),m=s(8395),u=s(1786),p=s(4028),f=s(7385),g=s(3738),d=s(1731),b=s(7848),y=s(7377),v=s(7076);let x=class extends p.w3{bonusTypes=[{key:"cost",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.buildingCostTime.cost},{key:"time",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.buildingCostTime.time}];technologies=l.LN;get techs(){const e="lifeform-researches"==this.research?a.Nw.intergalacticEnvoys:this.research;return this.technologies.filter((t=>t.appliesTo(e))).map((e=>e.type))}get limits(){const e="lifeform-researches"==this.research?a.Nw.intergalacticEnvoys:this.research,t=(0,b.K)({type:y.f.TechCostReduction,tech:e}),s=(0,b.K)({type:y.f.TechTimeReduction,tech:e});return{cost:e=>null!=t?Math.max(e,-t):e,time:e=>null!=s?Math.max(e,-s):e}}research=g.s.energyTechnology;Researches=d.N.filter((e=>this.technologies.some((t=>t.appliesTo(e)))));get planets(){return(0,h.r)(m.p.empire.planetOrder.map((e=>m.p.empire.planets[e])).filter((e=>!e.isMoon)),(e=>e.id),(e=>this.technologies.map((t=>{const s=this.getPlanetBonus(t,e);return{planet:e,technologyType:t.type,bonuses:(0,h.a)(["cost","time"],(e=>({base:s.base[e],buildings:s.buildings[e],level:s.level[e],total:s.total[e],bugBonus:s.bugBonus[e]})))}}))))}get experience(){return m.p.lifeformExperience}get hasResearchBonusBug(){const[e,t]=v.s.serverSettings.version.split(/[\.\-]/g).map((e=>parseInt(e)));return e<10||10==e&&t<2}getPlanetBonus(e,t){const s={base:{cost:0,time:0},level:{cost:0,time:0},buildings:{cost:0,time:0},buildingsBoost:0,total:{cost:0,time:0},bugBonus:{cost:0,time:0}},r="lifeform-researches"==this.research?a.Nw.intergalacticEnvoys:this.research;if(t.activeLifeform==c.e5.none||!t.activeLifeformTechnologies.includes(e.type)||!e.appliesTo(r))return s;const o=Math.min((0,u.io)(t)[e.type],(0,b.K)({type:y.f.LifeformResearchBonusBoost})??Number.MAX_SAFE_INTEGER);s.buildingsBoost+=o;const i=e.getResearchCostAndTimeReduction(r,t.lifeformTechnologies[e.type]),l={cost:"cost",time:"time"},h=this.hasResearchBonusBug;return Object.entries(l).forEach((e=>{const[r,a]=e,c=-1*i[a];s.base[r]+=c;const l=(0,n.g1)(this.experience[t.activeLifeform]),m=c*l;s.level[r]+=m;const u=c*o;s.buildings[r]+=u;let p=0;if("time"==r&&h){const e=1+o+l,t=e**2-e;p=t*c}s.bugBonus[r]=p;const f=c+m+u+p;s.total[r]+=f})),s}};x=(0,i.gn)([(0,p.wA)({components:{LifeformBonusesBreakdown:f.Z}})],x);const B=x,T=B;var $=s(1001),C=(0,$.Z)(T,r,o,!1,null,null,null);const _=C.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,