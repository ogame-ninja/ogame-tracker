"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[4846],{5794:(e,t,s)=>{var r;s.d(t,{q:()=>r,k:()=>a}),function(e){e[e["attack"]=1]="attack",e[e["acsAttack"]=2]="acsAttack",e[e["transport"]=3]="transport",e[e["deployment"]=4]="deployment",e[e["acsDefend"]=5]="acsDefend",e[e["espionage"]=6]="espionage",e[e["colonization"]=7]="colonization",e[e["recycleDebrisField"]=8]="recycleDebrisField",e[e["destroyMoon"]=9]="destroyMoon",e[e["missileAttack"]=10]="missileAttack",e[e["expedition"]=15]="expedition",e[e["trade"]=16]="trade",e[e["searchForLifeforms"]=18]="searchForLifeforms"}(r||(r={}));const a=[r.attack,r.acsAttack,r.transport,r.deployment,r.acsDefend,r.espionage,r.colonization,r.recycleDebrisField,r.destroyMoon,r.missileAttack,r.expedition,r.trade,r.searchForLifeforms]},4846:(e,t,s)=>{s.d(t,{zd:()=>ns,_i:()=>ss,s5:()=>as,kH:()=>ys,uv:()=>Cs,f1:()=>Ts,Du:()=>ds,YO:()=>Bs,TF:()=>gs,dy:()=>Rs,Qs:()=>ws,LN:()=>is,rE:()=>es,$z:()=>ls});var r=s(9681),a=s(3418),o=s(2057),n=s(248),c=s(7377);class i{#e;#t;#s;#r;constructor(e){this.#e=e.metal,this.#t=e.crystal,this.#s=e.deuterium,this.#r=e.energy}getCost(e){return{metal:this.getResourceCost(this.#e.baseCost,this.#e.increaseFactor,e),crystal:this.getResourceCost(this.#t.baseCost,this.#t.increaseFactor,e),deuterium:this.getResourceCost(this.#s.baseCost,this.#s.increaseFactor,e),energy:this.getResourceCost(this.#r.baseCost,this.#r.increaseFactor,e)}}getResourceCost(e,t,s){return Math.floor(e*t**(s-1)*s)}}class u extends i{constructor(){super({metal:{baseCost:32e4,increaseFactor:1.5},crystal:{baseCost:24e4,increaseFactor:1.5},deuterium:{baseCost:1e5,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return n.GI.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.StatsBonus,tech:e})))}appliesTo(e){return e==o.g.battlecruiser}getStatsBonus(e,t){if(!this.appliesTo(e))return{armor:0,shield:0,damage:0,cargo:0,speed:0};const s=.003,r=.003,a=.003,o=.003,n=.003;return{armor:s*t,shield:r*t,damage:a*t,cargo:o*t,speed:n*t}}get type(){return r.Nw.battlecruiserMkII}}const l=new u;class p extends i{constructor(){super({metal:{baseCost:16e4,increaseFactor:1.5},crystal:{baseCost:12e4,increaseFactor:1.5},deuterium:{baseCost:5e4,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return n.GI.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.StatsBonus,tech:e})))}appliesTo(e){return e==o.g.bomber}getStatsBonus(e,t){if(!this.appliesTo(e))return{armor:0,shield:0,damage:0,cargo:0,speed:0};const s=.003,r=.003,a=.003,o=.003,n=.003;return{armor:s*t,shield:r*t,damage:a*t,cargo:o*t,speed:n*t}}get type(){return r.Nw.bomberMkII}}const g=new p;class m extends i{constructor(){super({metal:{baseCost:32e4,increaseFactor:1.5},crystal:{baseCost:24e4,increaseFactor:1.5},deuterium:{baseCost:1e5,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return n.GI.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.StatsBonus,tech:e})))}appliesTo(e){return e==o.g.cruiser}getStatsBonus(e,t){if(!this.appliesTo(e))return{armor:0,shield:0,damage:0,cargo:0,speed:0};const s=.003,r=.003,a=.003,o=.003,n=.003;return{armor:s*t,shield:r*t,damage:a*t,cargo:o*t,speed:n*t}}get type(){return r.Nw.cruiserMkII}}const d=new m;class h extends i{constructor(){super({metal:{baseCost:16e4,increaseFactor:1.5},crystal:{baseCost:12e4,increaseFactor:1.5},deuterium:{baseCost:5e4,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return n.GI.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.StatsBonus,tech:e})))}appliesTo(e){return e==o.g.destroyer}getStatsBonus(e,t){if(!this.appliesTo(e))return{armor:0,shield:0,damage:0,cargo:0,speed:0};const s=.003,r=.003,a=.003,o=.003,n=.003;return{armor:s*t,shield:r*t,damage:a*t,cargo:o*t,speed:n*t}}get type(){return r.Nw.destroyerMkII}}const y=new h;class b extends i{constructor(){super({metal:{baseCost:8e4,increaseFactor:1.5},crystal:{baseCost:5e4,increaseFactor:1.5},deuterium:{baseCost:2e4,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:0}})}get bonuses(){return[{type:c.f.ResourceProductionBonus}]}get type(){return r.Nw.enhancedProductionTechnologies}getProductionBonus(e){const t=6e-4;return{metal:t*e,crystal:t*e,deuterium:t*e,energy:0}}}const C=new b;class F extends i{constructor(){super({metal:{baseCost:15e3,increaseFactor:1.3},crystal:{baseCost:1e4,increaseFactor:1.3},deuterium:{baseCost:5e3,increaseFactor:1.3},energy:{baseCost:0,increaseFactor:1}})}appliesTo(e){return[o.g.smallCargo,o.g.largeCargo,o.g.colonyShip,o.g.recycler,o.g.espionageProbe].includes(e)}get bonuses(){return n.GI.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.StatsBonus,tech:e})))}getStatsBonus(e,t){if(!this.appliesTo(e))return{armor:0,shield:0,damage:0,cargo:0,speed:0};const s=.005;return{armor:0,shield:0,damage:0,cargo:0,speed:s*t}}get type(){return r.Nw.fusionDrives}}const T=new F;class f extends i{constructor(){super({metal:{baseCost:7e3,increaseFactor:1.5},crystal:{baseCost:1e4,increaseFactor:1.5},deuterium:{baseCost:5e3,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:0}})}get bonuses(){return[{type:c.f.ResourceProductionBonus}]}get type(){return r.Nw.highPerformanceExtractors}getProductionBonus(e){const t=6e-4;return{metal:t*e,crystal:t*e,deuterium:t*e,energy:0}}}const w=new f;var N=s(6864),B=s(1913);class R extends i{constructor(){super({metal:{baseCost:7e4,increaseFactor:1.3},crystal:{baseCost:4e4,increaseFactor:1.3},deuterium:{baseCost:2e4,increaseFactor:1.3},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return B.a7.filter((e=>this.appliesTo(e))).flatMap((e=>[{type:c.f.TechTimeReduction,tech:e},{type:c.f.TechCostReduction,tech:e}]))}appliesTo(e){return e==N.A.terraformer}getBuildingCostAndTimeReduction(e,t){if(!this.appliesTo(e))return{cost:0,time:0};const s=.001,r=.5,a=.002,o=.99;return{cost:Math.min(r,s*t),time:Math.min(o,a*t)}}get type(){return r.Nw.highPerformanceTerraformer}}const x=new R;var v=s(1731);class M extends i{constructor(){super({metal:{baseCost:12e4,increaseFactor:1.5},crystal:{baseCost:3e4,increaseFactor:1.5},deuterium:{baseCost:25e3,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[...v.N,...r.Vs].filter((e=>this.appliesTo(e))).map((e=>({type:c.f.TechTimeReduction,tech:e})))}appliesTo(e){return[...v.N,...r.Vs].includes(e)}getResearchCostAndTimeReduction(e,t){if(!this.appliesTo(e))return{cost:0,time:0};const s=.001,r=.99;return{time:Math.min(r,s*t),cost:0}}get type(){return r.Nw.improvedLabTechnology}}const S=new M;var k=s(5794);class P extends i{constructor(){super({metal:{baseCost:5e3,increaseFactor:1.3},crystal:{baseCost:2500,increaseFactor:1.3},deuterium:{baseCost:500,increaseFactor:1.3},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return k.k.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.FleetSpeedBonus,missionType:e})))}appliesTo(e){return e==k.q.searchForLifeforms}getFleetSpeedBonus(e,t){if(!this.appliesTo(e))return 0;if(1==t)return 0;const s=.01;return s*t}get type(){return r.Nw.intergalacticEnvoys}}const I=new P;class A extends i{constructor(){super({metal:{baseCost:32e4,increaseFactor:1.5},crystal:{baseCost:24e4,increaseFactor:1.5},deuterium:{baseCost:1e5,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return n.GI.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.StatsBonus,tech:e})))}appliesTo(e){return e==o.g.lightFighter}getStatsBonus(e,t){if(!this.appliesTo(e))return{armor:0,shield:0,damage:0,cargo:0,speed:0};const s=.003,r=.003,a=.003,o=.003,n=.003;return{armor:s*t,shield:r*t,damage:a*t,cargo:o*t,speed:n*t}}get type(){return r.Nw.lightFighterMkII}}const E=new A;var D=s(3738);class _ extends i{constructor(){super({metal:{baseCost:2e5,increaseFactor:1.3},crystal:{baseCost:1e5,increaseFactor:1.3},deuterium:{baseCost:1e5,increaseFactor:1.3},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return v.N.filter((e=>this.appliesTo(e))).flatMap((e=>[{type:c.f.TechCostReduction,tech:e},{type:c.f.TechTimeReduction,tech:e}]))}appliesTo(e){return e==D.s.espionageTechnology}getResearchCostAndTimeReduction(e,t){if(!this.appliesTo(e))return{cost:0,time:0};const s=.001,r=.5,a=.002,o=.99;return{cost:Math.min(r,s*t),time:Math.min(o,a*t)}}get type(){return r.Nw.lowTemperatureDrives}}const O=new _;class G extends i{constructor(){super({metal:{baseCost:25e3,increaseFactor:1.3},crystal:{baseCost:2e4,increaseFactor:1.3},deuterium:{baseCost:1e4,increaseFactor:1.3},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[{type:c.f.DenCapacityBonus}]}getDenCapacityBonus(e){const t=.04;return t*e}get type(){return r.Nw.orbitalDen}}const j=new G;class V extends i{constructor(){super({metal:{baseCost:1e5,increaseFactor:1.3},crystal:{baseCost:4e4,increaseFactor:1.3},deuterium:{baseCost:3e4,increaseFactor:1.3},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return B.a7.filter((e=>this.appliesTo(e))).flatMap((e=>[{type:c.f.TechTimeReduction,tech:e},{type:c.f.TechCostReduction,tech:e}]))}appliesTo(e){return e==N.A.terraformer}getBuildingCostAndTimeReduction(e,t){if(!this.appliesTo(e))return{cost:0,time:0};const s=.001,r=.5,a=.002,o=.99;return{cost:Math.min(r,s*t),time:Math.min(o,a*t)}}get type(){return r.Nw.plasmaTerraformer}}const L=new V;class z extends i{constructor(){super({metal:{baseCost:35e3,increaseFactor:1.5},crystal:{baseCost:25e3,increaseFactor:1.5},deuterium:{baseCost:15e3,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[...v.N,...r.Vs].filter((e=>this.appliesTo(e))).map((e=>({type:c.f.TechTimeReduction,tech:e})))}appliesTo(e){return[...v.N,...r.Vs].includes(e)}getResearchCostAndTimeReduction(e,t){if(!this.appliesTo(e))return{cost:0,time:0};const s=.001,r=.99;return{time:Math.min(r,s*t),cost:0}}get type(){return r.Nw.researchAI}}const H=new z;class q extends i{constructor(){super({metal:{baseCost:3e5,increaseFactor:1.5},crystal:{baseCost:18e4,increaseFactor:1.5},deuterium:{baseCost:12e4,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[...v.N,...r.Vs].filter((e=>this.appliesTo(e))).map((e=>({type:c.f.TechTimeReduction,tech:e})))}appliesTo(e){return[...v.N,...r.Vs].includes(e)}getResearchCostAndTimeReduction(e,t){if(!this.appliesTo(e))return{cost:0,time:0};const s=.002;return{time:s*t,cost:0}}get type(){return r.Nw.robotAssistants}}const Q=new q;class W extends i{constructor(){super({metal:{baseCost:2e4,increaseFactor:1.3},crystal:{baseCost:15e3,increaseFactor:1.3},deuterium:{baseCost:7500,increaseFactor:1.3},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return v.N.filter((e=>this.appliesTo(e))).flatMap((e=>[{type:c.f.TechCostReduction,tech:e},{type:c.f.TechTimeReduction,tech:e}]))}appliesTo(e){return e==D.s.espionageTechnology}getResearchCostAndTimeReduction(e,t){if(!this.appliesTo(e))return{cost:0,time:0};const s=.001,r=.5,a=.002,o=.99;return{cost:Math.min(r,s*t),time:Math.min(o,a*t)}}get type(){return r.Nw.stealthFieldGenerator}}const Y=new W;class $ extends i{constructor(){super({metal:{baseCost:5e5,increaseFactor:1.2},crystal:{baseCost:3e5,increaseFactor:1.2},deuterium:{baseCost:2e5,increaseFactor:1.2},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return v.N.filter((e=>this.appliesTo(e))).flatMap((e=>[{type:c.f.TechCostReduction,tech:e},{type:c.f.TechTimeReduction,tech:e}]))}appliesTo(e){return e==D.s.astrophysics}getResearchCostAndTimeReduction(e,t){if(!this.appliesTo(e))return{cost:0,time:0};const s=.003;return{cost:0,time:s*t}}get type(){return r.Nw.supercomputer}}const J=new $;class K extends i{constructor(){super({metal:{baseCost:2e5,increaseFactor:1.5},crystal:{baseCost:1e5,increaseFactor:1.5},deuterium:{baseCost:1e5,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[...v.N,...r.Vs].filter((e=>this.appliesTo(e))).map((e=>({type:c.f.TechTimeReduction,tech:e})))}appliesTo(e){return[...v.N,...r.Vs].includes(e)}getResearchCostAndTimeReduction(e,t){if(!this.appliesTo(e))return{cost:0,time:0};const s=.001,r=.99;return{time:Math.min(r,s*t),cost:0}}get type(){return r.Nw.efficientSwarmIntelligence}}const U=new K;var X=s(5424);class Z extends i{constructor(){super({metal:{baseCost:25e3,increaseFactor:1.5},crystal:{baseCost:2e4,increaseFactor:1.5},deuterium:{baseCost:1e4,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return X.A.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.ExpeditionBonus,event:e})))}appliesTo(e){return e==X.r.resources}getExpeditionBonus(e,t){if(!this.appliesTo(e))return 0;const s=.002;return s*t}get type(){return r.Nw.enhancedSensorTechnology}}const ee=new Z;class te extends i{constructor(){super({metal:{baseCost:24e4,increaseFactor:1.5},crystal:{baseCost:12e4,increaseFactor:1.5},deuterium:{baseCost:12e4,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return X.A.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.ExpeditionBonus,event:e})))}appliesTo(e){return e==X.r.darkMatter}getExpeditionBonus(e,t){if(!this.appliesTo(e))return 0;const s=.001;return s*t}get type(){return r.Nw.gravitationSensors}}const se=new te;class re extends i{constructor(){super({metal:{baseCost:1e4,increaseFactor:1.5},crystal:{baseCost:6e3,increaseFactor:1.5},deuterium:{baseCost:1e3,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[{type:c.f.FuelConsumptionReduction}]}appliesTo(e){return n.v6.includes(e)}getFuelConsumptionReduction(e,t){if(!this.appliesTo(e))return 0;const s=3e-4,r=.3;return Math.min(r,s*t)}get type(){return r.Nw.heatRecovery}}const ae=new re;class oe extends i{constructor(){super({metal:{baseCost:8e4,increaseFactor:1.2},crystal:{baseCost:5e4,increaseFactor:1.2},deuterium:{baseCost:2e4,increaseFactor:1.2},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[{type:c.f.PhalanxRangeBonus}]}getPhalanxRangeBonus(e){const t=.006;return t*e}get type(){return r.Nw.interplanetaryAnalysisNetwork}}const ne=new oe;var ce=s(602);class ie extends i{constructor(){super({metal:{baseCost:3e5,increaseFactor:1.7},crystal:{baseCost:18e4,increaseFactor:1.7},deuterium:{baseCost:12e4,increaseFactor:1.7},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return ce.I_.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.PlayerClassBonus,playerClass:e})))}appliesTo(e){return e==ce.D0.discoverer}getClassBonus(e,t){if(!this.appliesTo(e))return 0;const s=.002;return s*t}get type(){return r.Nw.kaeleshDiscovererEnhancement}}const ue=new ie;class le extends i{constructor(){super({metal:{baseCost:7e4,increaseFactor:1.5},crystal:{baseCost:4e4,increaseFactor:1.5},deuterium:{baseCost:2e4,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[...v.N,...r.Vs].filter((e=>this.appliesTo(e))).map((e=>({type:c.f.TechTimeReduction,tech:e})))}appliesTo(e){return[...v.N,...r.Vs].includes(e)}getResearchCostAndTimeReduction(e,t){if(!this.appliesTo(e))return{cost:0,time:0};const s=.001,r=.99;return{time:Math.min(r,s*t),cost:0}}get type(){return r.Nw.neuroInterface}}const pe=new le;class ge extends i{constructor(){super({metal:{baseCost:5e4,increaseFactor:1.3},crystal:{baseCost:5e4,increaseFactor:1.3},deuterium:{baseCost:2e4,increaseFactor:1.3},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return n.GI.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.StatsBonus,tech:e})))}appliesTo(e){return[o.g.smallCargo,o.g.largeCargo,o.g.colonyShip,o.g.recycler,o.g.espionageProbe].includes(e)}getStatsBonus(e,t){if(!this.appliesTo(e))return{armor:0,shield:0,damage:0,cargo:0,speed:0};const s=.004;return{armor:0,shield:0,damage:0,cargo:s*t,speed:0}}get type(){return r.Nw.neuromodalCompressor}}const me=new ge;class de extends i{constructor(){super({metal:{baseCost:32e4,increaseFactor:1.5},crystal:{baseCost:24e4,increaseFactor:1.5},deuterium:{baseCost:1e5,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return n.GI.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.StatsBonus,tech:e})))}appliesTo(e){return e==o.g.battleship}getStatsBonus(e,t){if(!this.appliesTo(e))return{armor:0,shield:0,damage:0,cargo:0,speed:0};const s=.003,r=.003,a=.003,o=.003,n=.003;return{armor:s*t,shield:r*t,damage:a*t,cargo:o*t,speed:n*t}}get type(){return r.Nw.overclocking_battleship}}const he=new de;class ye extends i{constructor(){super({metal:{baseCost:32e4,increaseFactor:1.5},crystal:{baseCost:24e4,increaseFactor:1.5},deuterium:{baseCost:1e5,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return n.GI.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.StatsBonus,tech:e})))}appliesTo(e){return e==o.g.heavyFighter}getStatsBonus(e,t){if(!this.appliesTo(e))return{armor:0,shield:0,damage:0,cargo:0,speed:0};const s=.003,r=.003,a=.003,o=.003,n=.003;return{armor:s*t,shield:r*t,damage:a*t,cargo:o*t,speed:n*t}}get type(){return r.Nw.overclocking_heavyFighter}}const be=new ye;class Ce extends i{constructor(){super({metal:{baseCost:16e4,increaseFactor:1.5},crystal:{baseCost:12e4,increaseFactor:1.5},deuterium:{baseCost:5e4,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return n.GI.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.StatsBonus,tech:e})))}appliesTo(e){return e==o.g.largeCargo}getStatsBonus(e,t){if(!this.appliesTo(e))return{armor:0,shield:0,damage:0,cargo:0,speed:0};const s=.01,r=.01,a=.01,o=.01,n=.01;return{armor:s*t,shield:r*t,damage:a*t,cargo:o*t,speed:n*t}}get type(){return r.Nw.overclocking_largeCargo}}const Fe=new Ce;class Te extends i{constructor(){super({metal:{baseCost:15e3,increaseFactor:1.5},crystal:{baseCost:1e4,increaseFactor:1.5},deuterium:{baseCost:5e3,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return X.A.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.ExpeditionEventProbabilityBonus,event:e})))}appliesTo(e){return e==X.r.lostFleet}getExpeditionEventProbabilityBonus(e,t){if(!this.appliesTo(e))return 0;const s=5e-4,r=.5;return-Math.min(r,s*t)}get type(){return r.Nw.psionicNetwork}}const fe=new Te;class we extends i{constructor(){super({metal:{baseCost:5e5,increaseFactor:1.5},crystal:{baseCost:3e5,increaseFactor:1.5},deuterium:{baseCost:2e5,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return v.N.filter((e=>this.appliesTo(e))).flatMap((e=>[{type:c.f.TechCostReduction,tech:e},{type:c.f.TechTimeReduction,tech:e}]))}appliesTo(e){return e==D.s.shieldingTechnology}getResearchCostAndTimeReduction(e,t){if(!this.appliesTo(e))return{cost:0,time:0};const s=.002,r=.99,a=.002,o=.5;return{cost:Math.min(o,a*t),time:Math.min(r,s*t)}}get type(){return r.Nw.psionicShieldMatrix}}const Ne=new we;class Be extends i{constructor(){super({metal:{baseCost:1e5,increaseFactor:1.5},crystal:{baseCost:4e4,increaseFactor:1.5},deuterium:{baseCost:3e4,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:0}})}get bonuses(){return[{type:c.f.ResourceProductionBonus}]}get type(){return r.Nw.psychoharmoniser}getProductionBonus(e){const t=6e-4;return{metal:t*e,crystal:t*e,deuterium:t*e,energy:0}}}const Re=new Be;class xe extends i{constructor(){super({metal:{baseCost:12e4,increaseFactor:1.5},crystal:{baseCost:3e4,increaseFactor:1.5},deuterium:{baseCost:25e3,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return X.A.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.ExpeditionBonus,event:e})))}appliesTo(e){return e==X.r.resources}getExpeditionBonus(e,t){if(!this.appliesTo(e))return 0;const s=.002;return s*t}get type(){return r.Nw.sixthSense}}const ve=new xe;class Me extends i{constructor(){super({metal:{baseCost:7500,increaseFactor:1.5},crystal:{baseCost:12500,increaseFactor:1.5},deuterium:{baseCost:5e3,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:0}})}get bonuses(){return[{type:c.f.ResourceProductionBonus}]}get type(){return r.Nw.sulphideProcess}getProductionBonus(e){const t=8e-4;return{metal:0,crystal:0,deuterium:t*e,energy:0}}}const Se=new Me;class ke extends i{constructor(){super({metal:{baseCost:85e3,increaseFactor:1.2},crystal:{baseCost:4e4,increaseFactor:1.2},deuterium:{baseCost:35e3,increaseFactor:1.2},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return k.k.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.FleetSpeedBonus,missionType:e})))}appliesTo(e){return e==k.q.expedition}getFleetSpeedBonus(e,t){if(!this.appliesTo(e))return 0;if(1==t)return 0;const s=.001;return s*t}get type(){return r.Nw.telekineticDrive}}const Pe=new ke;class Ie extends i{constructor(){super({metal:{baseCost:2e4,increaseFactor:1.5},crystal:{baseCost:15e3,increaseFactor:1.5},deuterium:{baseCost:7500,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return X.A.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.ExpeditionBonus,event:e})))}appliesTo(e){return e==X.r.fleet}getExpeditionBonus(e,t){if(!this.appliesTo(e))return 0;const s=.002;return s*t}get type(){return r.Nw.telekineticTractorBeam}}const Ae=new Ie;class Ee extends i{constructor(){super({metal:{baseCost:2e5,increaseFactor:1.5},crystal:{baseCost:1e5,increaseFactor:1.5},deuterium:{baseCost:1e5,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:0}})}get bonuses(){return[{type:c.f.ResourceProductionBonus}]}get type(){return r.Nw.artificialSwarmIntelligence}getProductionBonus(e){const t=6e-4;return{metal:t*e,crystal:t*e,deuterium:t*e,energy:0}}}const De=new Ee;class _e extends i{constructor(){super({metal:{baseCost:5e4,increaseFactor:1.5},crystal:{baseCost:5e4,increaseFactor:1.5},deuterium:{baseCost:2e4,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:0}})}get bonuses(){return[{type:c.f.ResourceProductionBonus}]}get type(){return r.Nw.automatedTransportLines}getProductionBonus(e){const t=6e-4;return{metal:t*e,crystal:t*e,deuterium:t*e,energy:0}}}const Oe=new _e;class Ge extends i{constructor(){super({metal:{baseCost:1e4,increaseFactor:1.5},crystal:{baseCost:6e3,increaseFactor:1.5},deuterium:{baseCost:1e3,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:0}})}get bonuses(){return[{type:c.f.ResourceProductionBonus}]}get type(){return r.Nw.catalyserTechnology}getProductionBonus(e){const t=8e-4;return{metal:0,crystal:0,deuterium:t*e,energy:0}}}const je=new Ge;class Ve extends i{constructor(){super({metal:{baseCost:2e4,increaseFactor:1.3},crystal:{baseCost:15e3,increaseFactor:1.3},deuterium:{baseCost:7500,increaseFactor:1.3},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return B.a7.filter((e=>this.appliesTo(e))).flatMap((e=>[{type:c.f.TechTimeReduction,tech:e},{type:c.f.TechCostReduction,tech:e}]))}appliesTo(e){return e==N.A.allianceDepot}getBuildingCostAndTimeReduction(e,t){if(!this.appliesTo(e))return{cost:0,time:0};const s=.001,r=.5,a=.002,o=.99;return{cost:Math.min(r,s*t),time:Math.min(o,a*t)}}get type(){return r.Nw.depotAI}}const Le=new Ve;class ze extends i{constructor(){super({metal:{baseCost:15e3,increaseFactor:1.5},crystal:{baseCost:1e4,increaseFactor:1.5},deuterium:{baseCost:5e3,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[{type:c.f.FuelConsumptionReduction}]}appliesTo(e){return n.v6.includes(e)}getFuelConsumptionReduction(e,t){if(!this.appliesTo(e))return 0;const s=3e-4,r=.3;return Math.min(r,s*t)}get type(){return r.Nw.efficiencyModule}}const He=new ze;class qe extends i{constructor(){super({metal:{baseCost:16e4,increaseFactor:1.5},crystal:{baseCost:12e4,increaseFactor:1.5},deuterium:{baseCost:5e4,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return n.GI.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.StatsBonus,tech:e})))}appliesTo(e){return e==o.g.recycler}getStatsBonus(e,t){if(!this.appliesTo(e))return{armor:0,shield:0,damage:0,cargo:0,speed:0};const s=.01,r=.01,a=.01,o=.01,n=.01;return{armor:s*t,shield:r*t,damage:a*t,cargo:o*t,speed:n*t}}get type(){return r.Nw.experimentalRecyclingTechnology}}const Qe=new qe;class We extends i{constructor(){super({metal:{baseCost:5e5,increaseFactor:1.5},crystal:{baseCost:3e5,increaseFactor:1.5},deuterium:{baseCost:2e5,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return v.N.filter((e=>this.appliesTo(e))).flatMap((e=>[{type:c.f.TechCostReduction,tech:e},{type:c.f.TechTimeReduction,tech:e}]))}appliesTo(e){return e==D.s.weaponsTechnology}getResearchCostAndTimeReduction(e,t){if(!this.appliesTo(e))return{cost:0,time:0};const s=.002,r=.99,a=.002,o=.5;return{cost:Math.min(o,a*t),time:Math.min(r,s*t)}}get type(){return r.Nw.experimentalWeaponsTechnology}}const Ye=new We;class $e extends i{constructor(){super({metal:{baseCost:16e4,increaseFactor:1.5},crystal:{baseCost:12e4,increaseFactor:1.5},deuterium:{baseCost:5e4,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return n.GI.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.StatsBonus,tech:e})))}appliesTo(e){return e==o.g.battlecruiser}getStatsBonus(e,t){if(!this.appliesTo(e))return{armor:0,shield:0,damage:0,cargo:0,speed:0};const s=.003,r=.003,a=.003,o=.003,n=.003;return{armor:s*t,shield:r*t,damage:a*t,cargo:o*t,speed:n*t}}get type(){return r.Nw.generalOverhaul_battlecruiser}}const Je=new $e;class Ke extends i{constructor(){super({metal:{baseCost:16e4,increaseFactor:1.5},crystal:{baseCost:12e4,increaseFactor:1.5},deuterium:{baseCost:5e4,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return n.GI.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.StatsBonus,tech:e})))}appliesTo(e){return e==o.g.battleship}getStatsBonus(e,t){if(!this.appliesTo(e))return{armor:0,shield:0,damage:0,cargo:0,speed:0};const s=.003,r=.003,a=.003,o=.003,n=.003;return{armor:s*t,shield:r*t,damage:a*t,cargo:o*t,speed:n*t}}get type(){return r.Nw.generalOverhaul_battleship}}const Ue=new Ke;class Xe extends i{constructor(){super({metal:{baseCost:32e4,increaseFactor:1.5},crystal:{baseCost:24e4,increaseFactor:1.5},deuterium:{baseCost:1e5,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return n.GI.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.StatsBonus,tech:e})))}appliesTo(e){return e==o.g.bomber}getStatsBonus(e,t){if(!this.appliesTo(e))return{armor:0,shield:0,damage:0,cargo:0,speed:0};const s=.003,r=.003,a=.003,o=.003,n=.003;return{armor:s*t,shield:r*t,damage:a*t,cargo:o*t,speed:n*t}}get type(){return r.Nw.generalOverhaul_bomber}}const Ze=new Xe;class et extends i{constructor(){super({metal:{baseCost:16e4,increaseFactor:1.5},crystal:{baseCost:12e4,increaseFactor:1.5},deuterium:{baseCost:5e4,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return n.GI.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.StatsBonus,tech:e})))}appliesTo(e){return e==o.g.cruiser}getStatsBonus(e,t){if(!this.appliesTo(e))return{armor:0,shield:0,damage:0,cargo:0,speed:0};const s=.003,r=.003,a=.003,o=.003,n=.003;return{armor:s*t,shield:r*t,damage:a*t,cargo:o*t,speed:n*t}}get type(){return r.Nw.generalOverhaul_cruiser}}const tt=new et;class st extends i{constructor(){super({metal:{baseCost:32e4,increaseFactor:1.5},crystal:{baseCost:24e4,increaseFactor:1.5},deuterium:{baseCost:1e5,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return n.GI.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.StatsBonus,tech:e})))}appliesTo(e){return e==o.g.destroyer}getStatsBonus(e,t){if(!this.appliesTo(e))return{armor:0,shield:0,damage:0,cargo:0,speed:0};const s=.003,r=.003,a=.003,o=.003,n=.003;return{armor:s*t,shield:r*t,damage:a*t,cargo:o*t,speed:n*t}}get type(){return r.Nw.generalOverhaul_destroyer}}const rt=new st;class at extends i{constructor(){super({metal:{baseCost:16e4,increaseFactor:1.5},crystal:{baseCost:12e4,increaseFactor:1.5},deuterium:{baseCost:5e4,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return n.GI.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.StatsBonus,tech:e})))}appliesTo(e){return e==o.g.lightFighter}getStatsBonus(e,t){if(!this.appliesTo(e))return{armor:0,shield:0,damage:0,cargo:0,speed:0};const s=.003,r=.003,a=.003,o=.003,n=.003;return{armor:s*t,shield:r*t,damage:a*t,cargo:o*t,speed:n*t}}get type(){return r.Nw.generalOverhaul_lightFighter}}const ot=new at;class nt extends i{constructor(){super({metal:{baseCost:12e4,increaseFactor:1.3},crystal:{baseCost:3e4,increaseFactor:1.3},deuterium:{baseCost:25e3,increaseFactor:1.3},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return v.N.filter((e=>this.appliesTo(e))).flatMap((e=>[{type:c.f.TechCostReduction,tech:e},{type:c.f.TechTimeReduction,tech:e}]))}appliesTo(e){return e==D.s.energyTechnology}getResearchCostAndTimeReduction(e,t){if(!this.appliesTo(e))return{cost:0,time:0};const s=.001,r=.5,a=.002,o=.99;return{cost:Math.min(r,s*t),time:Math.min(o,a*t)}}get type(){return r.Nw.highTemperatureSuperconductors}}const ct=new nt;class it extends i{constructor(){super({metal:{baseCost:7e4,increaseFactor:1.3},crystal:{baseCost:4e4,increaseFactor:1.3},deuterium:{baseCost:2e4,increaseFactor:1.3},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return v.N.filter((e=>this.appliesTo(e))).flatMap((e=>[{type:c.f.TechCostReduction,tech:e},{type:c.f.TechTimeReduction,tech:e}]))}appliesTo(e){return e==D.s.espionageTechnology}getResearchCostAndTimeReduction(e,t){if(!this.appliesTo(e))return{cost:0,time:0};const s=.001,r=.5,a=.002,o=.99;return{cost:Math.min(r,s*t),time:Math.min(o,a*t)}}get type(){return r.Nw.improvedDroneAI}}const ut=new it;class lt extends i{constructor(){super({metal:{baseCost:3e5,increaseFactor:1.7},crystal:{baseCost:18e4,increaseFactor:1.7},deuterium:{baseCost:12e4,increaseFactor:1.7},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return ce.I_.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.PlayerClassBonus,playerClass:e})))}appliesTo(e){return e==ce.D0.general}getClassBonus(e,t){if(!this.appliesTo(e))return 0;const s=.002;return s*t}get type(){return r.Nw.mechanGeneralEnhancement}}const pt=new lt;class gt extends i{constructor(){super({metal:{baseCost:7500,increaseFactor:1.3},crystal:{baseCost:12500,increaseFactor:1.3},deuterium:{baseCost:5e3,increaseFactor:1.3},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return n.GI.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.StatsBonus,tech:e})))}appliesTo(e){return n.v6.filter((e=>e!=o.g.deathStar)).includes(e)}getStatsBonus(e,t){if(!this.appliesTo(e))return{armor:0,shield:0,damage:0,cargo:0,speed:0};const s=.002;return{armor:0,shield:0,damage:0,cargo:0,speed:s*t}}get type(){return r.Nw.plasmaDrive}}const mt=new gt;class dt extends i{constructor(){super({metal:{baseCost:85e3,increaseFactor:1.2},crystal:{baseCost:4e4,increaseFactor:1.2},deuterium:{baseCost:35e3,increaseFactor:1.2},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[{type:c.f.FuelReturn}]}getFuelReturn(e){const t=.0015,s=.9;return Math.min(s,t*e)}get type(){return r.Nw.slingshotAutopilot}}const ht=new dt;class yt extends i{constructor(){super({metal:{baseCost:7500,increaseFactor:1.5},crystal:{baseCost:12500,increaseFactor:1.5},deuterium:{baseCost:5e3,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:0}})}get bonuses(){return[{type:c.f.ResourceProductionBonus}]}get type(){return r.Nw.acousticScanning}getProductionBonus(e){const t=8e-4;return{metal:0,crystal:t*e,deuterium:0,energy:0}}}const bt=new yt;class Ct extends i{constructor(){super({metal:{baseCost:2e4,increaseFactor:1.3},crystal:{baseCost:15e3,increaseFactor:1.3},deuterium:{baseCost:7500,increaseFactor:1.3},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return n.GI.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.StatsBonus,tech:e})))}appliesTo(e){return[o.g.smallCargo,o.g.largeCargo,o.g.colonyShip,o.g.recycler,o.g.espionageProbe].includes(e)}getStatsBonus(e,t){if(!this.appliesTo(e))return{armor:0,shield:0,damage:0,cargo:0,speed:0};const s=.004;return{armor:0,shield:0,damage:0,cargo:s*t,speed:0}}get type(){return r.Nw.cargoHoldExpansion_CivilianShips}}const Ft=new Ct;class Tt extends i{constructor(){super({metal:{baseCost:7e4,increaseFactor:1.5},crystal:{baseCost:4e4,increaseFactor:1.5},deuterium:{baseCost:2e4,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:0}})}get bonuses(){return[{type:c.f.ResourceProductionBonus}]}get type(){return r.Nw.depthSounding}getProductionBonus(e){const t=8e-4;return{metal:t*e,crystal:0,deuterium:0,energy:0}}}const ft=new Tt;class wt extends i{constructor(){super({metal:{baseCost:24e4,increaseFactor:1.3},crystal:{baseCost:12e4,increaseFactor:1.3},deuterium:{baseCost:12e4,increaseFactor:1.3},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return v.N.filter((e=>this.appliesTo(e))).flatMap((e=>[{type:c.f.TechCostReduction,tech:e},{type:c.f.TechTimeReduction,tech:e}]))}appliesTo(e){return e==D.s.energyTechnology}getResearchCostAndTimeReduction(e,t){if(!this.appliesTo(e))return{cost:0,time:0};const s=.001,r=.5,a=.002,o=.99;return{cost:Math.min(r,s*t),time:Math.min(o,a*t)}}get type(){return r.Nw.diamondEnergyTransmitter}}const Nt=new wt;class Bt extends i{constructor(){super({metal:{baseCost:5e4,increaseFactor:1.5},crystal:{baseCost:5e4,increaseFactor:1.5},deuterium:{baseCost:2e4,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:0}})}get bonuses(){return[{type:c.f.ResourceProductionBonus}]}get type(){return r.Nw.geothermalPowerPlants}getProductionBonus(e){const t=.0025;return{metal:0,crystal:0,deuterium:0,energy:t*e}}}const Rt=new Bt;class xt extends i{constructor(){super({metal:{baseCost:85e3,increaseFactor:1.5},crystal:{baseCost:4e4,increaseFactor:1.5},deuterium:{baseCost:35e3,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:0}})}get bonuses(){return[{type:c.f.ResourceProductionBonus}]}get type(){return r.Nw.hardenedDiamondDrillHeads}getProductionBonus(e){const t=8e-4;return{metal:t*e,crystal:0,deuterium:0,energy:0}}}const vt=new xt;class Mt extends i{constructor(){super({metal:{baseCost:15e3,increaseFactor:1.5},crystal:{baseCost:1e4,increaseFactor:1.5},deuterium:{baseCost:5e3,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:0}})}get bonuses(){return[{type:c.f.ResourceProductionBonus}]}get type(){return r.Nw.highEnergyPumpSystems}getProductionBonus(e){const t=8e-4;return{metal:0,crystal:0,deuterium:t*e,energy:0}}}const St=new Mt;class kt extends i{constructor(){super({metal:{baseCost:75e3,increaseFactor:1.5},crystal:{baseCost:55e3,increaseFactor:1.5},deuterium:{baseCost:25e3,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return v.N.filter((e=>this.appliesTo(e))).flatMap((e=>[{type:c.f.TechCostReduction,tech:e},{type:c.f.TechTimeReduction,tech:e}]))}get type(){return r.Nw.improvedStellarator}appliesTo(e){return e==D.s.plasmaTechnology}getResearchCostAndTimeReduction(e,t){if(!this.appliesTo(e))return{cost:0,time:0};const s=.0015,r=.003;return{cost:s*t,time:r*t}}}const Pt=new kt;class It extends i{constructor(){super({metal:{baseCost:16e4,increaseFactor:1.5},crystal:{baseCost:12e4,increaseFactor:1.5},deuterium:{baseCost:5e4,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return n.GI.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.StatsBonus,tech:e})))}appliesTo(e){return e==o.g.heavyFighter}getStatsBonus(e,t){if(!this.appliesTo(e))return{armor:0,shield:0,damage:0,cargo:0,speed:0};const s=.003,r=.003,a=.003,o=.003,n=.003;return{armor:s*t,shield:r*t,damage:a*t,cargo:o*t,speed:n*t}}get type(){return r.Nw.ionCrystalEnhancement_heavyFighter}}const At=new It;class Et extends i{constructor(){super({metal:{baseCost:2e5,increaseFactor:1.2},crystal:{baseCost:1e5,increaseFactor:1.2},deuterium:{baseCost:1e5,increaseFactor:1.2},energy:{baseCost:0,increaseFactor:0}})}get bonuses(){return[{type:c.f.CrawlerBonus},{type:c.f.CrawlerEnergyConsumptionReduction}]}get type(){return r.Nw.ionCrystalModules}getCrawlerProductionBonus(e){const t=.001;return e*t}getCrawlerConsumptionReduction(e){const t=.001;return{metal:0,crystal:0,deuterium:0,energy:t*e}}}const Dt=new Et;class _t extends i{constructor(){super({metal:{baseCost:25e3,increaseFactor:1.5},crystal:{baseCost:2e4,increaseFactor:1.5},deuterium:{baseCost:1e4,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:0}})}get bonuses(){return[{type:c.f.ResourceProductionBonus}]}get type(){return r.Nw.magmaPoweredProduction}getProductionBonus(e){const t=8e-4;return{metal:t*e,crystal:t*e,deuterium:t*e,energy:0}}}const Ot=new _t;class Gt extends i{constructor(){super({metal:{baseCost:1e5,increaseFactor:1.5},crystal:{baseCost:4e4,increaseFactor:1.5},deuterium:{baseCost:3e4,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:0}})}get bonuses(){return[{type:c.f.ResourceProductionBonus}]}get type(){return r.Nw.magmaPoweredPumpSystems}getProductionBonus(e){const t=8e-4;return{metal:0,crystal:0,deuterium:t*e,energy:0}}}const jt=new Gt;var Vt=s(1628);class Lt extends i{constructor(){super({metal:{baseCost:25e4,increaseFactor:1.4},crystal:{baseCost:25e4,increaseFactor:1.4},deuterium:{baseCost:25e4,increaseFactor:1.4},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return Vt.Q.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.StatsBonus,tech:e})))}appliesTo(e){return Vt.Q.includes(e)}getStatsBonus(e,t){if(!this.appliesTo(e))return{armor:0,shield:0,damage:0,cargo:0,speed:0};const s=.005,r=.005,a=.005,o=.005,n=.005;return{armor:s*t,shield:r*t,damage:a*t,cargo:o*t,speed:n*t}}get type(){return r.Nw.obsidianShieldReinforcement}}const zt=new Lt;class Ht extends i{constructor(){super({metal:{baseCost:22e4,increaseFactor:1.3},crystal:{baseCost:11e4,increaseFactor:1.3},deuterium:{baseCost:11e4,increaseFactor:1.3},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return B.a7.filter((e=>this.appliesTo(e))).flatMap((e=>[{type:c.f.TechTimeReduction,tech:e},{type:c.f.TechCostReduction,tech:e}]))}appliesTo(e){return e==N.A.missileSilo}getBuildingCostAndTimeReduction(e,t){if(!this.appliesTo(e))return{cost:0,time:0};const s=.001,r=.5,a=.002,o=.99;return{cost:Math.min(r,s*t),time:Math.min(o,a*t)}}get type(){return r.Nw.optimisedSiloConstructionMethod}}const qt=new Ht;class Qt extends i{constructor(){super({metal:{baseCost:3e5,increaseFactor:1.7},crystal:{baseCost:18e4,increaseFactor:1.7},deuterium:{baseCost:12e4,increaseFactor:1.7},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return ce.I_.filter((e=>this.appliesTo(e))).map((e=>({type:c.f.PlayerClassBonus,playerClass:e})))}appliesTo(e){return e==ce.D0.collector}get type(){return r.Nw.rocktalCollectorEnhancement}getClassBonus(e,t){if(!this.appliesTo(e))return 0;const s=.002;return s*t}}const Wt=new Qt;class Yt extends i{constructor(){super({metal:{baseCost:5e5,increaseFactor:1.5},crystal:{baseCost:3e5,increaseFactor:1.5},deuterium:{baseCost:2e5,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return v.N.filter((e=>this.appliesTo(e))).flatMap((e=>[{type:c.f.TechCostReduction,tech:e},{type:c.f.TechTimeReduction,tech:e}]))}appliesTo(e){return e==D.s.armorTechnology}getResearchCostAndTimeReduction(e,t){if(!this.appliesTo(e))return{cost:0,time:0};const s=.002,r=.99,a=.002,o=.5;return{cost:Math.min(o,a*t),time:Math.min(r,s*t)}}get type(){return r.Nw.runeShields}}const $t=new Yt;class Jt extends i{constructor(){super({metal:{baseCost:12e4,increaseFactor:1.5},crystal:{baseCost:3e4,increaseFactor:1.5},deuterium:{baseCost:25e3,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:0}})}get bonuses(){return[{type:c.f.ResourceProductionBonus}]}get type(){return r.Nw.seismicMiningTechnology}getProductionBonus(e){const t=8e-4;return{metal:0,crystal:t*e,deuterium:0,energy:0}}}const Kt=new Jt;class Ut extends i{constructor(){super({metal:{baseCost:1e4,increaseFactor:1.5},crystal:{baseCost:6e3,increaseFactor:1.5},deuterium:{baseCost:1e3,increaseFactor:1.5},energy:{baseCost:0,increaseFactor:0}})}get bonuses(){return[{type:c.f.ResourceProductionBonus}]}get type(){return r.Nw.volcanicBatteries}getProductionBonus(e){const t=.0025;return{metal:0,crystal:0,deuterium:0,energy:t*e}}}const Xt=new Ut,Zt={[a.e5.none]:[],[a.e5.humans]:[C,w],[a.e5.rocktal]:[bt,ft,Rt,vt,St,Ot,jt,Kt,Xt],[a.e5.mechas]:[De,Oe,je],[a.e5.kaelesh]:[Re,Se]},es=Object.values(Zt).flatMap((e=>e)),ts={[a.e5.none]:[],[a.e5.humans]:[],[a.e5.rocktal]:[Wt],[a.e5.mechas]:[pt],[a.e5.kaelesh]:[ue]},ss=Object.values(ts).flatMap((e=>e)),rs={[a.e5.none]:[],[a.e5.humans]:[],[a.e5.rocktal]:[Dt],[a.e5.mechas]:[],[a.e5.kaelesh]:[]},as=Object.values(rs).flatMap((e=>e)),os={[a.e5.none]:[],[a.e5.humans]:[],[a.e5.rocktal]:[x,L,qt],[a.e5.mechas]:[Le],[a.e5.kaelesh]:[]},ns=Object.values(os).flatMap((e=>e)),cs={[a.e5.none]:[],[a.e5.humans]:[J],[a.e5.rocktal]:[Pt,Y,H,S,O,Q,Nt,$t],[a.e5.mechas]:[ut,ct,Ye],[a.e5.kaelesh]:[pe,U,Ne]},is=Object.values(cs).flatMap((e=>e)),us={[a.e5.none]:[],[a.e5.humans]:[T,E,d,g,y,l],[a.e5.rocktal]:[Ft,At,zt],[a.e5.mechas]:[mt,Qe,ot,tt,Ue,Je,Ze,rt],[a.e5.kaelesh]:[me,be,he,Fe]},ls=Object.values(us).flatMap((e=>e)),ps={[a.e5.none]:[],[a.e5.humans]:[],[a.e5.rocktal]:[],[a.e5.mechas]:[He],[a.e5.kaelesh]:[ae]},gs=Object.values(ps).flatMap((e=>e)),ms={[a.e5.none]:[],[a.e5.humans]:[],[a.e5.rocktal]:[],[a.e5.mechas]:[ht],[a.e5.kaelesh]:[]},ds=Object.values(ms).flatMap((e=>e)),hs={[a.e5.none]:[],[a.e5.humans]:[j],[a.e5.rocktal]:[],[a.e5.mechas]:[],[a.e5.kaelesh]:[]},ys=Object.values(hs).flatMap((e=>e)),bs={[a.e5.none]:[],[a.e5.humans]:[],[a.e5.rocktal]:[],[a.e5.mechas]:[],[a.e5.kaelesh]:[Ae,ee,ve,se]},Cs=Object.values(bs).flatMap((e=>e)),Fs={[a.e5.none]:[],[a.e5.humans]:[],[a.e5.rocktal]:[],[a.e5.mechas]:[],[a.e5.kaelesh]:[fe]},Ts=Object.values(Fs).flatMap((e=>e)),fs={[a.e5.none]:[],[a.e5.humans]:[],[a.e5.rocktal]:[],[a.e5.mechas]:[],[a.e5.kaelesh]:[ne]},ws=Object.values(fs).flatMap((e=>e)),Ns={[a.e5.none]:[],[a.e5.humans]:[I],[a.e5.rocktal]:[],[a.e5.mechas]:[],[a.e5.kaelesh]:[Pe]},Bs=Object.values(Ns).flatMap((e=>e)),Rs={[r.Nw.intergalacticEnvoys]:I,[r.Nw.highPerformanceExtractors]:w,[r.Nw.fusionDrives]:T,[r.Nw.stealthFieldGenerator]:Y,[r.Nw.orbitalDen]:j,[r.Nw.researchAI]:H,[r.Nw.highPerformanceTerraformer]:x,[r.Nw.enhancedProductionTechnologies]:C,[r.Nw.lightFighterMkII]:E,[r.Nw.cruiserMkII]:d,[r.Nw.improvedLabTechnology]:S,[r.Nw.plasmaTerraformer]:L,[r.Nw.lowTemperatureDrives]:O,[r.Nw.bomberMkII]:g,[r.Nw.destroyerMkII]:y,[r.Nw.battlecruiserMkII]:l,[r.Nw.robotAssistants]:Q,[r.Nw.supercomputer]:J,[r.Nw.volcanicBatteries]:Xt,[r.Nw.acousticScanning]:bt,[r.Nw.highEnergyPumpSystems]:St,[r.Nw.cargoHoldExpansion_CivilianShips]:Ft,[r.Nw.magmaPoweredProduction]:Ot,[r.Nw.geothermalPowerPlants]:Rt,[r.Nw.depthSounding]:ft,[r.Nw.ionCrystalEnhancement_heavyFighter]:At,[r.Nw.improvedStellarator]:Pt,[r.Nw.hardenedDiamondDrillHeads]:vt,[r.Nw.seismicMiningTechnology]:Kt,[r.Nw.magmaPoweredPumpSystems]:jt,[r.Nw.ionCrystalModules]:Dt,[r.Nw.optimisedSiloConstructionMethod]:qt,[r.Nw.diamondEnergyTransmitter]:Nt,[r.Nw.obsidianShieldReinforcement]:zt,[r.Nw.runeShields]:$t,[r.Nw.rocktalCollectorEnhancement]:Wt,[r.Nw.catalyserTechnology]:je,[r.Nw.plasmaDrive]:mt,[r.Nw.efficiencyModule]:He,[r.Nw.depotAI]:Le,[r.Nw.generalOverhaul_lightFighter]:ot,[r.Nw.automatedTransportLines]:Oe,[r.Nw.improvedDroneAI]:ut,[r.Nw.experimentalRecyclingTechnology]:Qe,[r.Nw.generalOverhaul_cruiser]:tt,[r.Nw.slingshotAutopilot]:ht,[r.Nw.highTemperatureSuperconductors]:ct,[r.Nw.generalOverhaul_battleship]:Ue,[r.Nw.artificialSwarmIntelligence]:De,[r.Nw.generalOverhaul_battlecruiser]:Je,[r.Nw.generalOverhaul_bomber]:Ze,[r.Nw.generalOverhaul_destroyer]:rt,[r.Nw.experimentalWeaponsTechnology]:Ye,[r.Nw.mechanGeneralEnhancement]:pt,[r.Nw.heatRecovery]:ae,[r.Nw.sulphideProcess]:Se,[r.Nw.psionicNetwork]:fe,[r.Nw.telekineticTractorBeam]:Ae,[r.Nw.enhancedSensorTechnology]:ee,[r.Nw.neuromodalCompressor]:me,[r.Nw.neuroInterface]:pe,[r.Nw.interplanetaryAnalysisNetwork]:ne,[r.Nw.overclocking_heavyFighter]:be,[r.Nw.telekineticDrive]:Pe,[r.Nw.sixthSense]:ve,[r.Nw.psychoharmoniser]:Re,[r.Nw.efficientSwarmIntelligence]:U,[r.Nw.overclocking_largeCargo]:Fe,[r.Nw.gravitationSensors]:se,[r.Nw.overclocking_battleship]:he,[r.Nw.psionicShieldMatrix]:Ne,[r.Nw.kaeleshDiscovererEnhancement]:ue}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,