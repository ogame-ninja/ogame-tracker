"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[8380],{7848:(e,s,a)=>{a.d(s,{K:()=>l});var t=a(5424),n=a(6864),r=a(3738),c=a(2816),o=a(9681),i=a(7377);function l(e){switch(e.type){case i.f.FleetSpeedBonus:return;case i.f.ResourceProductionBonus:return;case i.f.StatsBonus:return;case i.f.TechTimeReduction:switch(e.tech){case r.s.espionageTechnology:case r.s.computerTechnology:case r.s.weaponsTechnology:case r.s.shieldingTechnology:case r.s.armorTechnology:case r.s.energyTechnology:case r.s.hyperspaceTechnology:case r.s.combustionDrive:case r.s.impulseDrive:case r.s.hyperspaceDrive:case r.s.laserTechnology:case r.s.ionTechnology:case r.s.plasmaTechnology:case r.s.intergalacticResearchNetwork:case r.s.astrophysics:case r.s.gravitonTechnology:return.99;case o.Nw.intergalacticEnvoys:case o.Nw.highPerformanceExtractors:case o.Nw.fusionDrives:case o.Nw.stealthFieldGenerator:case o.Nw.orbitalDen:case o.Nw.researchAI:case o.Nw.highPerformanceTerraformer:case o.Nw.enhancedProductionTechnologies:case o.Nw.lightFighterMkII:case o.Nw.cruiserMkII:case o.Nw.improvedLabTechnology:case o.Nw.plasmaTerraformer:case o.Nw.lowTemperatureDrives:case o.Nw.bomberMkII:case o.Nw.destroyerMkII:case o.Nw.battlecruiserMkII:case o.Nw.robotAssistants:case o.Nw.supercomputer:case o.Nw.volcanicBatteries:case o.Nw.acousticScanning:case o.Nw.highEnergyPumpSystems:case o.Nw.cargoHoldExpansion_CivilianShips:case o.Nw.magmaPoweredProduction:case o.Nw.geothermalPowerPlants:case o.Nw.depthSounding:case o.Nw.ionCrystalEnhancement_heavyFighter:case o.Nw.improvedStellarator:case o.Nw.hardenedDiamondDrillHeads:case o.Nw.seismicMiningTechnology:case o.Nw.magmaPoweredPumpSystems:case o.Nw.ionCrystalModules:case o.Nw.optimisedSiloConstructionMethod:case o.Nw.diamondEnergyTransmitter:case o.Nw.obsidianShieldReinforcement:case o.Nw.runeShields:case o.Nw.rocktalCollectorEnhancement:case o.Nw.catalyserTechnology:case o.Nw.plasmaDrive:case o.Nw.efficiencyModule:case o.Nw.depotAI:case o.Nw.generalOverhaul_lightFighter:case o.Nw.automatedTransportLines:case o.Nw.improvedDroneAI:case o.Nw.experimentalRecyclingTechnology:case o.Nw.generalOverhaul_cruiser:case o.Nw.slingshotAutopilot:case o.Nw.highTemperatureSuperconductors:case o.Nw.generalOverhaul_battleship:case o.Nw.artificialSwarmIntelligence:case o.Nw.generalOverhaul_battlecruiser:case o.Nw.generalOverhaul_bomber:case o.Nw.generalOverhaul_destroyer:case o.Nw.experimentalWeaponsTechnology:case o.Nw.mechanGeneralEnhancement:case o.Nw.heatRecovery:case o.Nw.sulphideProcess:case o.Nw.psionicNetwork:case o.Nw.telekineticTractorBeam:case o.Nw.enhancedSensorTechnology:case o.Nw.neuromodalCompressor:case o.Nw.neuroInterface:case o.Nw.interplanetaryAnalysisNetwork:case o.Nw.overclocking_heavyFighter:case o.Nw.telekineticDrive:case o.Nw.sixthSense:case o.Nw.psychoharmoniser:case o.Nw.efficientSwarmIntelligence:case o.Nw.overclocking_largeCargo:case o.Nw.gravitationSensors:case o.Nw.overclocking_battleship:case o.Nw.psionicShieldMatrix:case o.Nw.kaeleshDiscovererEnhancement:return.99;case n.A.terraformer:case n.A.allianceDepot:case n.A.missileSilo:return.99;case c.EO.meditationEnclave:case c.EO.crystalFarm:case c.EO.runeTechnologium:case c.EO.runeForge:case c.EO.oriktorium:case c.EO.magmaForge:case c.EO.disruptionChamber:case c.EO.megalith:case c.EO.crystalRefinery:case c.EO.deuteriumSynthesiser:case c.EO.mineralResearchCentre:case c.EO.advancedRecyclingPlant:return.5}return;case i.f.TechCostReduction:switch(e.tech){case r.s.espionageTechnology:case r.s.plasmaTechnology:case r.s.energyTechnology:case r.s.armorTechnology:case r.s.shieldingTechnology:case r.s.weaponsTechnology:return.5;case o.Nw.intergalacticEnvoys:case o.Nw.highPerformanceExtractors:case o.Nw.fusionDrives:case o.Nw.stealthFieldGenerator:case o.Nw.orbitalDen:case o.Nw.researchAI:case o.Nw.highPerformanceTerraformer:case o.Nw.enhancedProductionTechnologies:case o.Nw.lightFighterMkII:case o.Nw.cruiserMkII:case o.Nw.improvedLabTechnology:case o.Nw.plasmaTerraformer:case o.Nw.lowTemperatureDrives:case o.Nw.bomberMkII:case o.Nw.destroyerMkII:case o.Nw.battlecruiserMkII:case o.Nw.robotAssistants:case o.Nw.supercomputer:case o.Nw.volcanicBatteries:case o.Nw.acousticScanning:case o.Nw.highEnergyPumpSystems:case o.Nw.cargoHoldExpansion_CivilianShips:case o.Nw.magmaPoweredProduction:case o.Nw.geothermalPowerPlants:case o.Nw.depthSounding:case o.Nw.ionCrystalEnhancement_heavyFighter:case o.Nw.improvedStellarator:case o.Nw.hardenedDiamondDrillHeads:case o.Nw.seismicMiningTechnology:case o.Nw.magmaPoweredPumpSystems:case o.Nw.ionCrystalModules:case o.Nw.optimisedSiloConstructionMethod:case o.Nw.diamondEnergyTransmitter:case o.Nw.obsidianShieldReinforcement:case o.Nw.runeShields:case o.Nw.rocktalCollectorEnhancement:case o.Nw.catalyserTechnology:case o.Nw.plasmaDrive:case o.Nw.efficiencyModule:case o.Nw.depotAI:case o.Nw.generalOverhaul_lightFighter:case o.Nw.automatedTransportLines:case o.Nw.improvedDroneAI:case o.Nw.experimentalRecyclingTechnology:case o.Nw.generalOverhaul_cruiser:case o.Nw.slingshotAutopilot:case o.Nw.highTemperatureSuperconductors:case o.Nw.generalOverhaul_battleship:case o.Nw.artificialSwarmIntelligence:case o.Nw.generalOverhaul_battlecruiser:case o.Nw.generalOverhaul_bomber:case o.Nw.generalOverhaul_destroyer:case o.Nw.experimentalWeaponsTechnology:case o.Nw.mechanGeneralEnhancement:case o.Nw.heatRecovery:case o.Nw.sulphideProcess:case o.Nw.psionicNetwork:case o.Nw.telekineticTractorBeam:case o.Nw.enhancedSensorTechnology:case o.Nw.neuromodalCompressor:case o.Nw.neuroInterface:case o.Nw.interplanetaryAnalysisNetwork:case o.Nw.overclocking_heavyFighter:case o.Nw.telekineticDrive:case o.Nw.sixthSense:case o.Nw.psychoharmoniser:case o.Nw.efficientSwarmIntelligence:case o.Nw.overclocking_largeCargo:case o.Nw.gravitationSensors:case o.Nw.overclocking_battleship:case o.Nw.psionicShieldMatrix:case o.Nw.kaeleshDiscovererEnhancement:return.25;case n.A.metalMine:case n.A.crystalMine:case n.A.deuteriumSynthesizer:case n.A.solarPlant:case n.A.fusionReactor:case n.A.terraformer:case n.A.allianceDepot:case n.A.missileSilo:return.5;case c.EO.meditationEnclave:case c.EO.crystalFarm:case c.EO.runeTechnologium:case c.EO.runeForge:case c.EO.oriktorium:case c.EO.magmaForge:case c.EO.disruptionChamber:case c.EO.megalith:case c.EO.crystalRefinery:case c.EO.deuteriumSynthesiser:case c.EO.mineralResearchCentre:case c.EO.advancedRecyclingPlant:return.5}return;case i.f.DenCapacityBonus:return;case i.f.CrawlerBonus:return;case i.f.CrawlerEnergyConsumptionReduction:return.5;case i.f.PlayerClassBonus:return;case i.f.FuelConsumptionReduction:return.3;case i.f.FuelReturn:return.9;case i.f.PhalanxRangeBonus:return;case i.f.ExpeditionEventProbabilityBonus:switch(e.event){case t.r.lostFleet:return.5}return;case i.f.ExpeditionBonus:return;case i.f.EnergyConsumptionReduction:return.4;case i.f.AutoRecycleDebrisField:return.3;case i.f.ShipProductionSpeedBonus:return.99;case i.f.FoodConsumptionReduction:return.8;case i.f.MaxPopulationBonus:return 1;case i.f.PopulationGrowthBonus:return;case i.f.LifeformResearchBonusBoost:return 1;case i.f.PopulationProtection:return.8;case i.f.SpaceDockBonus:return.5;case i.f.PlanetFieldsBonus:return;case i.f.LifeformResearchPopulationConditionReduction:return.25;case i.f.MoonChanceBonus:return.3;default:throw new Error("invalid bonus type")}}},2593:(e,s,a)=>{a.d(s,{Z:()=>p});var t=function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("div",{staticClass:"lifeform-planet-bonuses",style:"--bonus-types: "+e.types.length},[a("div",{staticClass:"header-row"},[a("div",{staticClass:"title"},[null!=e.$scopedSlots.header?e._t("header"):a("span",{domProps:{textContent:e._s(e.header)}})],2),e._l(e.types,(function(s){return a("div",{key:s.key,staticClass:"partial-bonus"},[a("div",{staticClass:"title",domProps:{textContent:e._s(s.label)}}),a("span",{staticClass:"avg-value"},[a("decimal-number",{staticStyle:{"--small-fraction-size":"0.75em"},attrs:{value:100*e.averageBonus[s.key],prefix:"âŒ€ ",suffix:"%",digits:3,"fade-decimals":!1}})],1)])}))],2),e._l(e.empirePlanets,(function(s){return a("div",{key:s.id,staticClass:"planet-row"},["none"!=s.activeLifeform?[a("div",{staticClass:"planet-header-row"},[a("div",{staticClass:"toggle"},[a("span",{staticClass:"mdi",class:{"mdi-menu-down":1==e.expandedPlanets[s.id],"mdi-menu-right":1!=e.expandedPlanets[s.id]},on:{click:function(a){return e.togglePlanet(s.id)}}})]),a("div",{domProps:{textContent:e._s(s.name+" "+e.formatCoordinates(s.coordinates))}}),e._l(e.types,(function(t){return a("span",{key:t.key,staticClass:"bonus"},[a("decimal-number",{staticStyle:{"--small-fraction-size":"0.75em"},attrs:{value:100*e.getTotalPlanetBonus(e.planets[s.id],t.key),suffix:"%",digits:3,"fade-decimals":!1}}),e.limits[t.key](Number.MAX_SAFE_INTEGER)==e.getTotalPlanetBonus(e.planets[s.id],t.key)||e.limits[t.key](Number.MIN_SAFE_INTEGER)==e.getTotalPlanetBonus(e.planets[s.id],t.key)?a("span",{staticClass:"mdi mdi-alert-outline"}):e._e()],1)}))],2),1==e.expandedPlanets[s.id]?[e._l(e.buildingsSorted,(function(t){return a("div",{key:t,staticClass:"tech-row"},[e.LifeformBuildingTypesByLifeform[s.activeLifeform].includes(t)&&s.lifeformBuildings[t]>0||e.forceIncludeBuildings.includes(t)?[a("div"),e.BuildingTypes.includes(t)?a("div",{staticClass:"tech"},[a("o-building",{attrs:{building:t,size:"24px"}}),a("span",{domProps:{textContent:e._s(e.$i18n.$t.ogame.buildings[t]+" ("+s.buildings[t]+")")}})],1):a("div",{staticClass:"tech"},[a("o-lifeform-building",{attrs:{building:t,size:"24px"}}),a("span",{domProps:{textContent:e._s(e.$i18n.$t.ogame.lifeformBuildings[t]+" ("+s.lifeformBuildings[t]+")")}})],1),e._l(e.types,(function(n){return a("span",{key:n.key,staticClass:"bonus"},[a("decimal-number",{staticStyle:{"--small-fraction-size":"0.75em"},attrs:{value:100*e.planets[s.id].bonusByBuilding[n.key][t],suffix:"%",digits:3,"fade-decimals":!1}})],1)}))]:e._e()],2)})),e.noTechnologyBonuses?e._e():a("div",{staticClass:"tech-row"},[a("div"),a("div",[a("router-link",{staticStyle:{"text-decoration":"none"},attrs:{to:{name:e.researchBonusBreakdownRouteName}}},[a("span",{domProps:{textContent:e._s(e.$i18n.$t.extension.empire.lifeforms.globalResearchBonus)}}),a("span",{staticClass:"mdi mdi-open-in-new"})])],1),e._l(e.types,(function(s){return a("span",{key:s.key,staticClass:"bonus"},[a("decimal-number",{staticStyle:{"--small-fraction-size":"0.75em"},attrs:{value:100*e.technologyBonuses[s.key],suffix:"%",digits:3,"fade-decimals":!1}})],1)}))],2)]:e._e()]:e._e()],2)}))],2)},n=[],r=a(655),c=a(8395),o=a(4028),i=a(2816),l=a(1913);let u=class extends o.w3{header;types;technologyBonuses;noTechnologyBonuses;planets;buildings;forceIncludeBuildings;limits;researchBonusBreakdownRouteName;get buildingsSorted(){return[...this.buildings].sort(((e,s)=>e-s))}BuildingTypes=l.a7;LifeformBuildingTypesByLifeform=i.IU;expandedPlanets={};togglePlanet(e){o.w3.set(this.expandedPlanets,e,!this.expandedPlanets[e])}formatCoordinates(e){return`[${e.galaxy}:${e.system}:${e.position}]`}getTotalPlanetBonus(e,s){const a=Object.values(e.bonusByBuilding[s]).reduce(((e,s)=>e+s),0)+(this.noTechnologyBonuses?0:this.technologyBonuses[s]);return this.limits[s](a)}get averageBonus(){const e={};return this.types.forEach((s=>{const a=Object.values(this.planets).map((e=>this.getTotalPlanetBonus(e,s.key))).reduce(((e,s)=>e+s),0);e[s.key]=a/this.empirePlanets.length})),e}get empirePlanets(){return c.p.empire.planetOrder.map((e=>c.p.empire.planets[e])).filter((e=>!e.isMoon))}};(0,r.gn)([(0,o.fI)({required:!1,type:String,default:()=>""})],u.prototype,"header",void 0),(0,r.gn)([(0,o.fI)({required:!0,type:Array})],u.prototype,"types",void 0),(0,r.gn)([(0,o.fI)({required:!0,type:Object})],u.prototype,"technologyBonuses",void 0),(0,r.gn)([(0,o.fI)({required:!1,type:Boolean})],u.prototype,"noTechnologyBonuses",void 0),(0,r.gn)([(0,o.fI)({required:!0,type:Object})],u.prototype,"planets",void 0),(0,r.gn)([(0,o.fI)({required:!0,type:Array})],u.prototype,"buildings",void 0),(0,r.gn)([(0,o.fI)({required:!1,type:Array,default:()=>[]})],u.prototype,"forceIncludeBuildings",void 0),(0,r.gn)([(0,o.fI)({required:!0,type:Object})],u.prototype,"limits",void 0),(0,r.gn)([(0,o.fI)({required:!0,type:String})],u.prototype,"researchBonusBreakdownRouteName",void 0),u=(0,r.gn)([(0,o.wA)({})],u);const d=u,h=d;var g=a(1001),m=(0,g.Z)(h,t,n,!1,null,"55252194",null);const p=m.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,