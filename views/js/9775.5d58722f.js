"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[9775],{4698:(t,e,s)=>{s.d(e,{O:()=>y});var i=s(1821),a=s(3347),n=s(1745),r=s(776),o=s(5424),l=s(612),c=s(6105),u=s(3418),d=s(7331),g=s(2057);function y(t){const e=i.j.locale;i.j.locale=t;const s={dateRanges:[{label:i.j.$t.extension.settings.dateRanges.defaultNames.today,type:"day",skip:0,take:1},{label:i.j.$t.extension.settings.dateRanges.defaultNames.yesterday,type:"day",skip:1,take:1},{label:i.j.$t.extension.settings.dateRanges.defaultNames.currentWeek,type:"week",skip:0,take:1},{label:i.j.$t.extension.settings.dateRanges.defaultNames.lastWeek,type:"week",skip:1,take:1},{label:i.j.$t.extension.settings.dateRanges.defaultNames.currentMonth,type:"month",skip:0,take:1},{type:"all"}],lostShipsResourceUnits:{factor:1,deuteriumFactor:1},resourceBalance:{showDetailedBreakdown:!1,includeExpeditionFoundShipsResourceUnits:!0,includeLostShipsResourceUnits:!0,includeLostLootResources:!0},conversionRates:{mode:"msu",msu:{crystal:1.5,deuterium:3},dsu:{metal:3,crystal:2}},showCellsWithConvertedResourceUnits:!0,expeditionFoundShipsResourceUnits:{factor:1,deuteriumFactor:1},extensionLanguage:t,defaultRoutes:{},colors:{combatResults:{[a.a.won]:"#00c23a",[a.a.draw]:"#aaaaaa",[a.a.lost]:"#d11515"},resources:{[d._.metal]:"#ff5e00",[d._.crystal]:"#1a9fff",[d._.deuterium]:"#1bee8f",totalConverted:"#999999"},ships:{[g.g.lightFighter]:"#2472f3",[g.g.heavyFighter]:"#c72525",[g.g.cruiser]:"#fbbc04",[g.g.battleship]:"#9ecc00",[g.g.bomber]:"#00a95e",[g.g.battlecruiser]:"#075263",[g.g.destroyer]:"#de5200",[g.g.reaper]:"#16a8d4",[g.g.pathfinder]:"#ad135e",[g.g.smallCargo]:"#888888",[g.g.largeCargo]:"#ffffff",[g.g.espionageProbe]:"#4b17da",[g.g.deathStar]:"#262530",[g.g.recycler]:"#8aff8e",[g.g.colonyShip]:"#d7b58e",[g.g.crawler]:"#94b4ff",[g.g.solarSatellite]:"#dd94ff"},expeditions:{events:{[o.r.nothing]:"#404040",[o.r.resources]:"#2242e2",[o.r.fleet]:"#dddddd",[o.r.delay]:"#ff5e00",[o.r.early]:"#00c23a",[o.r.darkMatter]:"#33bcdb",[o.r.pirates]:"#ffb592",[o.r.aliens]:"#92ffdc",[o.r.combat]:"#ffb592",[o.r.item]:"#6f23e1",[o.r.trader]:"#fbbc04",[o.r.lostFleet]:"#d11515"},sizes:{[r.Mm.small]:"#404040",[r.Mm.medium]:"#3e85fe",[r.Mm.large]:"#e01a76","fled-death-star":"#dddddd"},depletion:{[n.q.none]:"#00c23a",[n.q.low]:"#fbbc04",[n.q.medium]:"#ff5e00",[n.q.high]:"#c72525",unknown:"#404040"}},lifeformDiscoveries:{events:{[c.y.nothing]:"#404040",[c.y.lostShip]:"#d11515",[c.y.knownLifeformFound]:"#33bcdb",[c.y.newLifeformFound]:"#00c23a",[c.y.artifacts]:"#fbbc04"},artifactFindingSizes:{[l.k.small]:"#404040",[l.k.medium]:"#3e85fe",[l.k.large]:"#e01a76",[l.k.storageFull]:"#d11515"}},lifeforms:{[u.e5.humans]:"#7ec000",[u.e5.rocktal]:"#df6642",[u.e5.mechas]:"#4b91e7",[u.e5.kaelesh]:"#9863e9"}},universeHistory:{updateTimes:[72e6],enabled:!1,trackHistory:!1},combatTracking:{ignoreEspionageFights:!0},messageTracking:{showSimplifiedResults:!0},debrisFields:{separateExpeditionDebrisFields:!1}};return i.j.locale=e,s}},5593:(t,e,s)=>{s.d(e,{D:()=>f});var i=s(655),a=s(3768),n=s(4384),r=s(1936);function o(t,e){const s={...t};return Object.keys(e).forEach((t=>{const i=e[t];if(t in s){const e=s[t];if("object"===typeof e&&!(e instanceof Array))return void(s[t]=o(e,i))}s[t]=i})),s}const l={universeHistory:{alliances:{highscore:[]},players:{highscore:[]}}};async function c(t){const e=await(0,n._N)(t),s=o(l,await e.get("universeSpecificSettings",0)??{});return s}var u=s(3654),d=s(4028),g=s(8717);let y=class extends d.w3{settings=null;_ready;_resolveReady;updateSettings(t){console.debug("updating universe specific settings",t),this.settings=t,(async()=>{const e=await(0,n._N)(g.l);await e.put("universeSpecificSettings",t,0);const s={ogameMeta:g.l,senderUuid:g.g,type:r.C.NotifyUniverseSpecificSettingsUpdate};await(0,a.p)(s)})()}get ready(){return this._ready}async created(){this._ready=new Promise((t=>this._resolveReady=t)),this.initCommunication(),await this.loadData()}initCommunication(){chrome.runtime.onMessage.addListener((async t=>await this.onMessage(t)))}async loadData(){this.settings=await c(g.l),this._resolveReady()}async onMessage(t){const{type:e,ogameMeta:s}=t;if((0,u.i)(s,g.l)&&t.senderUuid!=g.g)switch(e){case r.C.NotifyUniverseSpecificSettingsUpdate:await this.loadData();break}}};y=(0,i.gn)([d.wA],y);const f=new y},8364:(t,e,s)=>{s.d(e,{Z:()=>v});var i=function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"universe-history-tracking"},[t.settings.enabled?t._e():s("div",{domProps:{innerHTML:t._s(t.$i18n.$t.extension.universeHistory.settings.messages.notEnabledHtml)}}),s("checkbox-button",{attrs:{value:t.settings.enabled,label:t.$i18n.$t.extension.universeHistory.settings.enableHighscoreTrackingOnly,color:"#00ff00"},on:{input:function(e){return t.setEnabled(e)}}}),s("hr"),t.settings.enabled&&!t.settings.trackHistory?s("div",{domProps:{innerHTML:t._s(t.$i18n.$t.extension.universeHistory.settings.messages.historyTrackingNotEnabledHtml)}}):t._e(),t.settings.enabled?s("checkbox-button",{attrs:{value:t.settings.trackHistory,label:t.$i18n.$t.extension.universeHistory.settings.enableHistoryTracking,color:"#00ff00"},on:{input:function(e){return t.setTrackHistory(e)}}}):t._e(),s("hr"),s("div",{domProps:{innerHTML:t._s(t.$i18n.$t.extension.universeHistory.settings.messages.trackingTimesHtml)}}),s("div",{staticClass:"time-grid"},t._l(t.timeSelection,(function(e,i){return s("checkbox-button",{key:i,attrs:{value:e,label:t.formatTime(i),color:"#00ff00"},on:{input:function(e){return t.setTimeEnabled(i,e)}}})})),1)],1)},a=[],n=s(655),r=s(6538),o=s(9167);const l={ar:o.I["es-ar"],br:o.I["pt-br"],cz:o.I.cs,de:o.I.de,dk:o.I.da,en:o.I.en,es:o.I["es-es"],fr:o.I.fr,gr:o.I.el,hr:o.I.hr,hu:o.I.hu,it:o.I.it,mx:o.I["es-mx"],nl:o.I.nl,pl:o.I.pl,pt:o.I["pt-pt"],ro:o.I.ro,ru:o.I.ru,si:o.I.sl,tr:o.I.tr,us:o.I.en,tw:o.I["zh-tw"]};function c(t,e=!1){const s=l[t];return null==s&&e&&(0,r.A)(`unsupported language '${t}'`),s}var u=s(4698),d=s(7545),g=s(4028),y=s(8717),f=s(917);let h=class extends g.w3{get timeSelection(){const t={};for(let e=0;e<=23;e++){const s=60*e*60*1e3;t[s]=this.settings.updateTimes.includes(s)}return t}get settings(){return f.V.settings.universeHistory}formatTime(t){const e=(0,d.Y)(t,10)+60*new Date(0).getTimezoneOffset()*1e3;return this.$i18n.$d(e,"time_hm")}setEnabled(t){const e={...this.settings,enabled:t};t||(e.trackHistory=!1),f.V.updateSettings({...f.V.settings,universeHistory:e})}setTimeEnabled(t,e){const s=(0,d.Y)(t,10);let i=this.settings.updateTimes;if(e&&!i.includes(s)?i.push(s):!e&&i.includes(s)&&(i=i.filter((t=>t!=s))),0==i.length){const t=c(y.l.userLanguage)??o.I.en;i=(0,u.O)(t).universeHistory.updateTimes}f.V.updateSettings({...f.V.settings,universeHistory:{...this.settings,updateTimes:i}})}setTrackHistory(t){f.V.updateSettings({...f.V.settings,universeHistory:{...this.settings,trackHistory:t}})}};h=(0,n.gn)([(0,g.wA)({})],h);const p=h,m=p;var k=s(1001),b=(0,k.Z)(m,i,a,!1,null,"7a387ab1",null);const v=b.exports},5606:(t,e,s)=>{s.d(e,{Z:()=>p});var i=function(){var t=this,e=t.$createElement,s=t._self._c||e;return t.loading?s("loading-spinner"):s("div",{staticClass:"status-history-grid"},[s("div",{staticClass:"y-ticks"},t._l(t.statusHistoryLabels,(function(e,i){return s("span",{key:"status-label-"+i,domProps:{textContent:t._s(e)}})})),0),s("div",{staticClass:"graph"},[t._l(t.statusHistoryLabels,(function(e,i){return s("div",{key:"status-label-"+i+".2",staticClass:"y-tick",style:"--y-tick: "+i+"; width: "+100*t.statusHistoryWidth+"%"})})),s("div",{staticClass:"bars",style:{left:t.statusHistoryGraphOffset+"px"}},[t._l(t.statusHistoryTicks,(function(t){return s("div",{key:"x-tick-line-"+t.date,staticClass:"x-tick-line",style:"--x-tick: "+t.position})})),t._l(t.statusHistoryItems,(function(t,e){return s("div",{key:"status-item-"+e,staticClass:"bar",class:t.class,style:{left:100*t.start+"%",width:100*(t.end-t.start)+"%"}})}))],2)],2),s("div",{staticClass:"x-ticks"},[s("div",{staticClass:"x-ticks-container",style:{left:t.statusHistoryGraphOffset+"px"}},t._l(t.statusHistoryTicks,(function(e){return s("div",{key:e.date,staticClass:"x-tick",style:"--x-tick: "+e.position,domProps:{textContent:t._s(t.$i18n.$d(e.date,"date"))}})})),0)]),s("div",{ref:"statusHistoryXTicks",staticClass:"scrollbar",on:{scroll:function(e){return t.onStatusHistoryScroll(e)}}},[s("div",{staticStyle:{height:"1px"},style:{width:100*t.statusHistoryWidth+"%"}})])])},a=[],n=s(655),r=s(5347),o=s(9119),l=s(7349),c=s(4028),u=s(5038);let d=class extends c.w3{playerId;history=[];loading=!0;statusHistoryTickCount=30;statusHistoryGraphOffset=0;get statusHistoryStartDate(){const t=(0,r.Z)(Date.now(),this.statusHistoryTickCount-2);if(0==this.history.length)return t;const e=(0,o.Z)(this.history[0].date);return e<t?e:t}get statusHistoryItems(){const t=24*(this.statusHistoryTickCount-1)*60*60*1e3,e=this.statusHistoryStartDate.getTime();return this.history.flatMap(((s,i,a)=>{const n=(s.date-e)/t,r=((a[i+1]?.date??Date.now())-e)/t;return"deleted"==s.state||null==s.state?[{status:s.state,start:n,end:r,class:s.state??"active"}]:s.state.map((t=>({status:t,start:n,end:r,class:t})))}))}get statusHistoryWidth(){const t=Date.now()-this.statusHistoryStartDate.getTime(),e=24*(this.statusHistoryTickCount-1)*60*60*1e3;return t/e}get statusHistoryLabels(){return[this.$i18n.$t.extension.universeHistory.status.active,this.$i18n.$t.extension.universeHistory.status.vacation,this.$i18n.$t.extension.universeHistory.status.inactive,this.$i18n.$t.extension.universeHistory.status.inactiveLong,this.$i18n.$t.extension.universeHistory.status.banned,this.$i18n.$t.extension.universeHistory.status.outlaw,this.$i18n.$t.extension.universeHistory.status.deleted,this.$i18n.$t.extension.universeHistory.status.admin]}get statusHistoryTicks(){const t=Date.now(),e=this.statusHistoryStartDate.getTime();let s=e;const i=24*(this.statusHistoryTickCount-1)*60*60*1e3,a=[];while(s<=t)a.push({date:s,position:(s-e)/i}),s=(0,l.Z)(s,1).getTime();return a}async onPlayerIdChanged(){this.history=await u.z.getPlayerStateHistory(this.playerId),this.loading=!1,await this.$nextTick(),this.statusHistoryXTicks.scrollLeft=this.statusHistoryXTicks.scrollWidth}onStatusHistoryScroll(t){if(null==t.target)return;const e=t.target;this.statusHistoryGraphOffset=-e.scrollLeft}statusHistoryXTicks};(0,n.gn)([(0,c.fI)({required:!0,type:Number})],d.prototype,"playerId",void 0),(0,n.gn)([(0,c.RL)("playerId",{immediate:!0})],d.prototype,"onPlayerIdChanged",null),(0,n.gn)([(0,c.Rl)("statusHistoryXTicks")],d.prototype,"statusHistoryXTicks",void 0),d=(0,n.gn)([(0,c.wA)({})],d);const g=d,y=g;var f=s(1001),h=(0,f.Z)(y,i,a,!1,null,"13cec68d",null);const p=h.exports},7349:(t,e,s)=>{s.d(e,{Z:()=>r});var i=s(3946),a=s(9013),n=s(3882);function r(t,e){(0,n.Z)(2,arguments);var s=(0,a.Z)(t),r=(0,i.Z)(e);return isNaN(r)?new Date(NaN):r?(s.setDate(s.getDate()+r),s):s}},5347:(t,e,s)=>{s.d(e,{Z:()=>r});var i=s(3946),a=s(7349),n=s(3882);function r(t,e){(0,n.Z)(2,arguments);var s=(0,i.Z)(e);return(0,a.Z)(t,-s)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,