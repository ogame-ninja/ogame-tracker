"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[6119],{7377:(e,t,s)=>{var r;s.d(t,{f:()=>r}),function(e){e[e["FleetSpeedBonus"]=0]="FleetSpeedBonus",e[e["ResourceProductionBonus"]=1]="ResourceProductionBonus",e[e["StatsBonus"]=2]="StatsBonus",e[e["TechTimeReduction"]=3]="TechTimeReduction",e[e["TechCostReduction"]=4]="TechCostReduction",e[e["DenCapacityBonus"]=5]="DenCapacityBonus",e[e["CrawlerBonus"]=6]="CrawlerBonus",e[e["CrawlerEnergyConsumptionReduction"]=7]="CrawlerEnergyConsumptionReduction",e[e["PlayerClassBonus"]=8]="PlayerClassBonus",e[e["FuelConsumptionReduction"]=9]="FuelConsumptionReduction",e[e["FuelReturn"]=10]="FuelReturn",e[e["PhalanxRangeBonus"]=11]="PhalanxRangeBonus",e[e["ExpeditionEventProbabilityBonus"]=12]="ExpeditionEventProbabilityBonus",e[e["ExpeditionBonus"]=13]="ExpeditionBonus",e[e["EnergyProductionBonus"]=14]="EnergyProductionBonus",e[e["EnergyConsumptionReduction"]=15]="EnergyConsumptionReduction",e[e["AutoRecycleDebrisField"]=16]="AutoRecycleDebrisField",e[e["ShipProductionSpeedBonus"]=17]="ShipProductionSpeedBonus",e[e["FoodConsumptionReduction"]=18]="FoodConsumptionReduction",e[e["MaxPopulationBonus"]=19]="MaxPopulationBonus",e[e["PopulationGrowthBonus"]=20]="PopulationGrowthBonus",e[e["LifeformResearchBonusBoost"]=21]="LifeformResearchBonusBoost",e[e["PopulationProtection"]=22]="PopulationProtection",e[e["SpaceDockBonus"]=23]="SpaceDockBonus",e[e["PlanetFieldsBonus"]=24]="PlanetFieldsBonus",e[e["LifeformResearchPopulationConditionReduction"]=25]="LifeformResearchPopulationConditionReduction",e[e["MoonChanceBonus"]=26]="MoonChanceBonus"}(r||(r={}))},6119:(e,t,s)=>{s.d(t,{ZX:()=>rt,t8:()=>st,ry:()=>it,d2:()=>tt,cQ:()=>et,ax:()=>nt,FH:()=>at,yn:()=>$e,wJ:()=>Ye,Ao:()=>ut});var r=s(7331),o=s(7377),a=s(2816);class n{#e;#t;#s;#r;constructor(e){this.#e=e.metal,this.#t=e.crystal,this.#s=e.deuterium,this.#r=e.energy}getCost(e){return{metal:this.getResourceCost(this.#e.baseCost,this.#e.increaseFactor,e),crystal:this.getResourceCost(this.#t.baseCost,this.#t.increaseFactor,e),deuterium:this.getResourceCost(this.#s.baseCost,this.#s.increaseFactor,e),energy:this.getResourceCost(this.#r.baseCost,this.#r.increaseFactor,e)}}getResourceCost(e,t,s){return Math.floor(e*t**(s-1)*s)}}class c extends n{constructor(){super({metal:{baseCost:5e4,increaseFactor:1.5},crystal:{baseCost:25e3,increaseFactor:1.5},deuterium:{baseCost:15e3,increaseFactor:1.5},energy:{baseCost:80,increaseFactor:1.1}})}get bonuses(){return[{type:o.f.ResourceProductionBonus}]}get type(){return a.EO.fusionPoweredProduction}appliesTo(e){return[r._.crystal,r._.deuterium].includes(e)}getProductionBonus(e){const t=.015,s=.01;return{metal:0,crystal:t*e,deuterium:s*e,energy:0}}}const u=new c;class i extends n{constructor(){super({metal:{baseCost:9e3,increaseFactor:1.5},crystal:{baseCost:6e3,increaseFactor:1.5},deuterium:{baseCost:3e3,increaseFactor:1.5},energy:{baseCost:40,increaseFactor:1.1}})}get bonuses(){return[{type:o.f.ResourceProductionBonus}]}get type(){return a.EO.highEnergySmelting}appliesTo(e){return[r._.metal].includes(e)}getProductionBonus(e){const t=.015;return{metal:t*e,crystal:0,deuterium:0,energy:0}}}const l=new i;class b extends n{constructor(){super({metal:{baseCost:1e5,increaseFactor:1.5},crystal:{baseCost:4e4,increaseFactor:1.5},deuterium:{baseCost:2e4,increaseFactor:1.5},energy:{baseCost:60,increaseFactor:1.1}})}get bonuses(){return[{type:o.f.ResourceProductionBonus}]}get type(){return a.EO.highPerformanceSynthesiser}appliesTo(e){return[r._.deuterium].includes(e)}getProductionBonus(e){const t=.02;return{metal:0,crystal:0,deuterium:t*e,energy:0}}}const y=new b;class C extends n{constructor(){super({metal:{baseCost:35e3,increaseFactor:1.5},crystal:{baseCost:15e3,increaseFactor:1.5},deuterium:{baseCost:1e4,increaseFactor:1.5},energy:{baseCost:40,increaseFactor:1.05}})}get bonuses(){return[{type:o.f.ResourceProductionBonus},{type:o.f.LifeformResearchBonusBoost}]}get type(){return a.EO.highPerformanceTransformer}getLifeformTechnologyBonus(e){const t=.003;return t*e}appliesTo(e){return"energy"==e}getProductionBonus(e){const t=.011;return{metal:0,crystal:0,deuterium:0,energy:t*e}}}const d=new C;class m extends n{constructor(){super({metal:{baseCost:85e3,increaseFactor:1.4},crystal:{baseCost:44e3,increaseFactor:1.4},deuterium:{baseCost:25e3,increaseFactor:1.4},energy:{baseCost:90,increaseFactor:1.1}})}get bonuses(){return[{type:o.f.ResourceProductionBonus}]}get type(){return a.EO.crystalRefinery}appliesTo(e){return[r._.crystal].includes(e)}getProductionBonus(e){const t=.02;return{metal:0,crystal:t*e,deuterium:0,energy:0}}}const g=new m;class p extends n{constructor(){super({metal:{baseCost:12e4,increaseFactor:1.4},crystal:{baseCost:5e4,increaseFactor:1.4},deuterium:{baseCost:2e4,increaseFactor:1.4},energy:{baseCost:90,increaseFactor:1.1}})}get bonuses(){return[{type:o.f.ResourceProductionBonus}]}get type(){return a.EO.deuteriumSynthesiser}appliesTo(e){return[r._.deuterium].includes(e)}getProductionBonus(e){const t=.02;return{metal:0,crystal:0,deuterium:t*e,energy:0}}}const F=new p;class h extends n{constructor(){super({metal:{baseCost:2e4,increaseFactor:1.2},crystal:{baseCost:15e3,increaseFactor:1.2},deuterium:{baseCost:1e4,increaseFactor:1.2},energy:{baseCost:0,increaseFactor:0}})}get bonuses(){return[{type:o.f.EnergyProductionBonus},{type:o.f.EnergyConsumptionReduction}]}get type(){return a.EO.disruptionChamber}appliesTo(e){return"energy"==e}getConsumptionReduction(e){const t=.005;return{metal:0,crystal:0,deuterium:0,energy:t*e}}getProductionBonus(e){const t=.015;return{metal:0,crystal:0,deuterium:0,energy:t*e}}}const f=new h;class E extends n{constructor(){super({metal:{baseCost:1e4,increaseFactor:1.4},crystal:{baseCost:8e3,increaseFactor:1.4},deuterium:{baseCost:1e3,increaseFactor:1.4},energy:{baseCost:40,increaseFactor:1.1}})}get bonuses(){return[{type:o.f.ResourceProductionBonus}]}get type(){return a.EO.magmaForge}appliesTo(e){return[r._.metal].includes(e)}getProductionBonus(e){const t=.02;return{metal:t*e,crystal:0,deuterium:0,energy:0}}}const O=new E;class R extends n{constructor(){super({metal:{baseCost:8e4,increaseFactor:1.5},crystal:{baseCost:35e3,increaseFactor:1.5},deuterium:{baseCost:6e4,increaseFactor:1.5},energy:{baseCost:90,increaseFactor:1.05}})}get bonuses(){return[{type:o.f.LifeformResearchBonusBoost}]}get type(){return a.EO.metropolis}getLifeformTechnologyBonus(e){const t=.005;return e*t}}const B=new R;class w extends n{constructor(){super({metal:{baseCost:55e3,increaseFactor:1.5},crystal:{baseCost:5e4,increaseFactor:1.5},deuterium:{baseCost:3e4,increaseFactor:1.5},energy:{baseCost:70,increaseFactor:1.05}})}get bonuses(){return[{type:o.f.LifeformResearchBonusBoost}]}get type(){return a.EO.chipMassProduction}getLifeformTechnologyBonus(e){const t=.004;return t*e}}const x=new w;var T=s(6864);class P extends n{constructor(){super({metal:{baseCost:25e4,increaseFactor:1.8},crystal:{baseCost:15e4,increaseFactor:1.8},deuterium:{baseCost:1e5,increaseFactor:1.8},energy:{baseCost:120,increaseFactor:1.3}})}get bonuses(){return this.affectedBuildings.flatMap((e=>[{type:o.f.TechCostReduction,tech:e},{type:o.f.TechTimeReduction,tech:e}]))}affectedBuildings=[T.A.metalMine,T.A.crystalMine,T.A.deuteriumSynthesizer];get type(){return a.EO.mineralResearchCentre}getCostAndTimeReduction(e,t){if(!this.appliesTo(e))return{cost:0,time:0};const s=.005;return{cost:s*t,time:0}}appliesTo(e){return this.affectedBuildings.includes(e)}}const k=new P;var M=s(3418);class S extends n{constructor(){super({metal:{baseCost:5e4,increaseFactor:1.5},crystal:{baseCost:35e3,increaseFactor:1.5},deuterium:{baseCost:15e3,increaseFactor:1.5},energy:{baseCost:80,increaseFactor:1.3}})}get bonuses(){return this.affectedBuildings.flatMap((e=>[{type:o.f.TechCostReduction,tech:e},{type:o.f.TechTimeReduction,tech:e}]))}get type(){return a.EO.megalith}affectedBuildings=a.IU[M.e5.rocktal];getCostAndTimeReduction(e,t){if(!this.appliesTo(e))return{cost:0,time:0};const s=.01,r=.01;return{cost:s*t,time:r*t}}appliesTo(e){return this.affectedBuildings.includes(e)}}const L=new S;var v=s(9681);class A extends n{constructor(){super({metal:{baseCost:2e4,increaseFactor:1.3},crystal:{baseCost:25e3,increaseFactor:1.3},deuterium:{baseCost:1e4,increaseFactor:1.3},energy:{baseCost:10,increaseFactor:1.08}})}get bonuses(){return v.Vs.flatMap((e=>[{type:o.f.TechCostReduction,tech:e},{type:o.f.TechTimeReduction,tech:e}]))}get type(){return a.EO.researchCentre}getLifeformTechnologyResearchCostAndTimeReduction(e){if(1==e)return{cost:0,time:0};const t=.0025,s=.02;return{cost:t*e,time:s*e}}}const D=new A;class _ extends n{constructor(){super({metal:{baseCost:4e4,increaseFactor:1.3},crystal:{baseCost:1e4,increaseFactor:1.3},deuterium:{baseCost:15e3,increaseFactor:1.3},energy:{baseCost:15,increaseFactor:1.1}})}get bonuses(){return v.Vs.flatMap((e=>[{type:o.f.TechCostReduction,tech:e},{type:o.f.TechTimeReduction,tech:e}]))}get type(){return a.EO.runeTechnologium}getLifeformTechnologyResearchCostAndTimeReduction(e){if(1==e)return{cost:0,time:0};const t=.0025,s=.02;return{cost:t*e,time:s*e}}}const j=new _;class H extends n{constructor(){super({metal:{baseCost:3e4,increaseFactor:1.3},crystal:{baseCost:2e4,increaseFactor:1.3},deuterium:{baseCost:1e4,increaseFactor:1.3},energy:{baseCost:13,increaseFactor:1.08}})}get bonuses(){return v.Vs.flatMap((e=>[{type:o.f.TechCostReduction,tech:e},{type:o.f.TechTimeReduction,tech:e}]))}get type(){return a.EO.roboticsResearchCentre}getLifeformTechnologyResearchCostAndTimeReduction(e){if(1==e)return{cost:0,time:0};const t=.0025,s=.02;return{cost:t*e,time:s*e}}}const V=new H;class q extends n{constructor(){super({metal:{baseCost:2e4,increaseFactor:1.3},crystal:{baseCost:2e4,increaseFactor:1.3},deuterium:{baseCost:3e4,increaseFactor:1.3},energy:{baseCost:10,increaseFactor:1.08}})}get bonuses(){return v.Vs.flatMap((e=>[{type:o.f.TechCostReduction,tech:e},{type:o.f.TechTimeReduction,tech:e}]))}get type(){return a.EO.vortexChamber}getLifeformTechnologyResearchCostAndTimeReduction(e){if(1==e)return{cost:0,time:0};const t=.0025,s=.02;return{cost:t*e,time:s*e}}}const G=new q;class N extends n{constructor(){super({metal:{baseCost:7,increaseFactor:1.2},crystal:{baseCost:2,increaseFactor:1.2},deuterium:{baseCost:0,increaseFactor:1},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[]}get type(){return a.EO.residentialSector}}const z=new N;class I extends n{constructor(){super({metal:{baseCost:5,increaseFactor:1.23},crystal:{baseCost:2,increaseFactor:1.23},deuterium:{baseCost:0,increaseFactor:1},energy:{baseCost:8,increaseFactor:1.02}})}get bonuses(){return[]}get type(){return a.EO.biosphereFarm}}const J=new I;class Q extends n{constructor(){super({metal:{baseCost:5e3,increaseFactor:1.7},crystal:{baseCost:3200,increaseFactor:1.7},deuterium:{baseCost:1500,increaseFactor:1.7},energy:{baseCost:15,increaseFactor:1.25}})}get bonuses(){return[]}get type(){return a.EO.academyOfSciences}}const U=new Q;class X extends n{constructor(){super({metal:{baseCost:5e4,increaseFactor:1.7},crystal:{baseCost:4e4,increaseFactor:1.7},deuterium:{baseCost:5e4,increaseFactor:1.7},energy:{baseCost:30,increaseFactor:1.25}})}get bonuses(){return[]}get type(){return a.EO.neuroCalibrationCentre}}const Z=new X;class K extends n{constructor(){super({metal:{baseCost:25e3,increaseFactor:1.09},crystal:{baseCost:13e3,increaseFactor:1.09},deuterium:{baseCost:7e3,increaseFactor:1.09},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[]}get type(){return a.EO.foodSilo}}const W=new K;class Y extends n{constructor(){super({metal:{baseCost:75e3,increaseFactor:1.09},crystal:{baseCost:2e4,increaseFactor:1.09},deuterium:{baseCost:25e3,increaseFactor:1.09},energy:{baseCost:50,increaseFactor:1.02}})}get bonuses(){return[]}get type(){return a.EO.skyscraper}}const $=new Y;class ee extends n{constructor(){super({metal:{baseCost:15e4,increaseFactor:1.12},crystal:{baseCost:3e4,increaseFactor:1.12},deuterium:{baseCost:15e3,increaseFactor:1.12},energy:{baseCost:60,increaseFactor:1.03}})}get bonuses(){return[]}get type(){return a.EO.biotechLab}}const te=new ee;class se extends n{constructor(){super({metal:{baseCost:25e4,increaseFactor:1.15},crystal:{baseCost:125e3,increaseFactor:1.15},deuterium:{baseCost:125e3,increaseFactor:1.15},energy:{baseCost:100,increaseFactor:1.02}})}get bonuses(){return[]}get type(){return a.EO.planetaryShield}}const re=new se;class oe extends n{constructor(){super({metal:{baseCost:9,increaseFactor:1.2},crystal:{baseCost:3,increaseFactor:1.2},deuterium:{baseCost:0,increaseFactor:1},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[]}get type(){return a.EO.meditationEnclave}}const ae=new oe;class ne extends n{constructor(){super({metal:{baseCost:7,increaseFactor:1.2},crystal:{baseCost:2,increaseFactor:1.2},deuterium:{baseCost:0,increaseFactor:1},energy:{baseCost:10,increaseFactor:1.03}})}get bonuses(){return[]}get type(){return a.EO.crystalFarm}}const ce=new ne;class ue extends n{constructor(){super({metal:{baseCost:5e3,increaseFactor:1.7},crystal:{baseCost:3800,increaseFactor:1.7},deuterium:{baseCost:1e3,increaseFactor:1.7},energy:{baseCost:20,increaseFactor:1.35}})}get bonuses(){return[]}get type(){return a.EO.runeForge}}const ie=new ue;class le extends n{constructor(){super({metal:{baseCost:5e4,increaseFactor:1.65},crystal:{baseCost:4e4,increaseFactor:1.65},deuterium:{baseCost:5e4,increaseFactor:1.65},energy:{baseCost:60,increaseFactor:1.3}})}get bonuses(){return[]}get type(){return a.EO.oriktorium}}const be=new le;class ye extends n{constructor(){super({metal:{baseCost:25e4,increaseFactor:1.5},crystal:{baseCost:125e3,increaseFactor:1.5},deuterium:{baseCost:125e3,increaseFactor:1.5},energy:{baseCost:100,increaseFactor:1.1}})}get bonuses(){return[{type:o.f.AutoRecycleDebrisField}]}get type(){return a.EO.advancedRecyclingPlant}}const Ce=new ye;class de extends n{constructor(){super({metal:{baseCost:6,increaseFactor:1.21},crystal:{baseCost:2,increaseFactor:1.21},deuterium:{baseCost:0,increaseFactor:1},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[]}get type(){return a.EO.assemblyLine}}const me=new de;class ge extends n{constructor(){super({metal:{baseCost:5,increaseFactor:1.18},crystal:{baseCost:2,increaseFactor:1.18},deuterium:{baseCost:0,increaseFactor:1},energy:{baseCost:8,increaseFactor:1.02}})}get bonuses(){return[]}get type(){return a.EO.fusionCellFactory}}const pe=new ge;class Fe extends n{constructor(){super({metal:{baseCost:5e3,increaseFactor:1.8},crystal:{baseCost:3800,increaseFactor:1.8},deuterium:{baseCost:1e3,increaseFactor:1.8},energy:{baseCost:10,increaseFactor:1.2}})}get bonuses(){return[]}get type(){return a.EO.updateNetwork}}const he=new Fe;class fe extends n{constructor(){super({metal:{baseCost:5e4,increaseFactor:1.8},crystal:{baseCost:4e4,increaseFactor:1.8},deuterium:{baseCost:5e4,increaseFactor:1.8},energy:{baseCost:40,increaseFactor:1.2}})}get bonuses(){return[]}get type(){return a.EO.quantumComputerCentre}}const Ee=new fe;class Oe extends n{constructor(){super({metal:{baseCost:7500,increaseFactor:1.3},crystal:{baseCost:7e3,increaseFactor:1.3},deuterium:{baseCost:1e3,increaseFactor:1.3},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[]}get type(){return a.EO.automatisedAssemblyCentre}}const Re=new Oe;class Be extends n{constructor(){super({metal:{baseCost:5e4,increaseFactor:1.07},crystal:{baseCost:2e4,increaseFactor:1.07},deuterium:{baseCost:3e4,increaseFactor:1.07},energy:{baseCost:40,increaseFactor:1.01}})}get bonuses(){return[]}get type(){return a.EO.microchipAssemblyLine}}const we=new Be;class xe extends n{constructor(){super({metal:{baseCost:1e5,increaseFactor:1.14},crystal:{baseCost:1e4,increaseFactor:1.14},deuterium:{baseCost:3e3,increaseFactor:1.14},energy:{baseCost:80,increaseFactor:1.04}})}get bonuses(){return[]}get type(){return a.EO.productionAssemblyHall}}const Te=new xe;class Pe extends n{constructor(){super({metal:{baseCost:25e4,increaseFactor:1.4},crystal:{baseCost:125e3,increaseFactor:1.4},deuterium:{baseCost:125e3,increaseFactor:1.4},energy:{baseCost:100,increaseFactor:1.05}})}getSpaceDockBonus(e){const t=.013;return t*e}get bonuses(){return[{type:o.f.SpaceDockBonus}]}get type(){return a.EO.nanoRepairBots}}const ke=new Pe;class Me extends n{constructor(){super({metal:{baseCost:4,increaseFactor:1.21},crystal:{baseCost:3,increaseFactor:1.21},deuterium:{baseCost:0,increaseFactor:1},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[]}get type(){return a.EO.sanctuary}}const Se=new Me;class Le extends n{constructor(){super({metal:{baseCost:6,increaseFactor:1.21},crystal:{baseCost:3,increaseFactor:1.21},deuterium:{baseCost:0,increaseFactor:1},energy:{baseCost:9,increaseFactor:1.02}})}get bonuses(){return[]}get type(){return a.EO.antimatterCondenser}}const ve=new Le;class Ae extends n{constructor(){super({metal:{baseCost:7500,increaseFactor:1.8},crystal:{baseCost:5e3,increaseFactor:1.8},deuterium:{baseCost:800,increaseFactor:1.8},energy:{baseCost:15,increaseFactor:1.3}})}get bonuses(){return[]}get type(){return a.EO.hallsOfRealisation}}const De=new Ae;class _e extends n{constructor(){super({metal:{baseCost:6e4,increaseFactor:1.8},crystal:{baseCost:3e4,increaseFactor:1.8},deuterium:{baseCost:5e4,increaseFactor:1.8},energy:{baseCost:30,increaseFactor:1.3}})}get bonuses(){return[]}get type(){return a.EO.forumOfTranscendence}}const je=new _e;class He extends n{constructor(){super({metal:{baseCost:8500,increaseFactor:1.25},crystal:{baseCost:5e3,increaseFactor:1.25},deuterium:{baseCost:3e3,increaseFactor:1.25},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[]}get type(){return a.EO.antimatterConvector}}const Ve=new He;class qe extends n{constructor(){super({metal:{baseCost:15e3,increaseFactor:1.2},crystal:{baseCost:15e3,increaseFactor:1.2},deuterium:{baseCost:2e4,increaseFactor:1.2},energy:{baseCost:0,increaseFactor:1}})}get bonuses(){return[]}get type(){return a.EO.cloningLaboratory}}const Ge=new qe;class Ne extends n{constructor(){super({metal:{baseCost:75e3,increaseFactor:1.05},crystal:{baseCost:25e3,increaseFactor:1.05},deuterium:{baseCost:3e4,increaseFactor:1.05},energy:{baseCost:30,increaseFactor:1.03}})}get bonuses(){return[]}get type(){return a.EO.chrysalisAccelerator}}const ze=new Ne;class Ie extends n{constructor(){super({metal:{baseCost:87500,increaseFactor:1.2},crystal:{baseCost:25e3,increaseFactor:1.2},deuterium:{baseCost:3e4,increaseFactor:1.2},energy:{baseCost:40,increaseFactor:1.02}})}get bonuses(){return[]}get type(){return a.EO.bioModifier}}const Je=new Ie;class Qe extends n{constructor(){super({metal:{baseCost:15e4,increaseFactor:1.5},crystal:{baseCost:3e4,increaseFactor:1.5},deuterium:{baseCost:3e4,increaseFactor:1.5},energy:{baseCost:140,increaseFactor:1.05}})}get bonuses(){return[]}get type(){return a.EO.psionicModulator}}const Ue=new Qe;class Xe extends n{constructor(){super({metal:{baseCost:75e3,increaseFactor:1.2},crystal:{baseCost:5e4,increaseFactor:1.2},deuterium:{baseCost:55e3,increaseFactor:1.2},energy:{baseCost:90,increaseFactor:1.04}})}get bonuses(){return[]}get type(){return a.EO.shipManufacturingHall}}const Ze=new Xe;class Ke extends n{constructor(){super({metal:{baseCost:5e5,increaseFactor:1.4},crystal:{baseCost:25e4,increaseFactor:1.4},deuterium:{baseCost:25e4,increaseFactor:1.4},energy:{baseCost:100,increaseFactor:1.05}})}get bonuses(){return[]}get type(){return a.EO.supraRefractor}}const We=new Ke,Ye={[M.e5.none]:[],[M.e5.humans]:[u,l],[M.e5.rocktal]:[g,F,f,O],[M.e5.mechas]:[y,d],[M.e5.kaelesh]:[]},$e=Object.values(Ye).flatMap((e=>e)),et={[M.e5.none]:[],[M.e5.humans]:[B],[M.e5.rocktal]:[],[M.e5.mechas]:[x,d],[M.e5.kaelesh]:[]},tt=Object.values(et).flatMap((e=>e)),st={[M.e5.none]:[],[M.e5.humans]:[],[M.e5.rocktal]:[k,L],[M.e5.mechas]:[],[M.e5.kaelesh]:[]},rt=Object.values(st).flatMap((e=>e)),ot={[M.e5.none]:[],[M.e5.humans]:[],[M.e5.rocktal]:[f],[M.e5.mechas]:[],[M.e5.kaelesh]:[]},at=(Object.values(ot).flatMap((e=>e)),{[M.e5.none]:[],[M.e5.humans]:[D],[M.e5.rocktal]:[j],[M.e5.mechas]:[V],[M.e5.kaelesh]:[G]}),nt=Object.values(at).flatMap((e=>e)),ct={[M.e5.none]:[],[M.e5.humans]:[],[M.e5.rocktal]:[],[M.e5.mechas]:[ke],[M.e5.kaelesh]:[]},ut=Object.values(ct).flatMap((e=>e)),it={[a.EO.residentialSector]:z,[a.EO.biosphereFarm]:J,[a.EO.researchCentre]:D,[a.EO.academyOfSciences]:U,[a.EO.neuroCalibrationCentre]:Z,[a.EO.highEnergySmelting]:l,[a.EO.foodSilo]:W,[a.EO.fusionPoweredProduction]:u,[a.EO.skyscraper]:$,[a.EO.biotechLab]:te,[a.EO.metropolis]:B,[a.EO.planetaryShield]:re,[a.EO.meditationEnclave]:ae,[a.EO.crystalFarm]:ce,[a.EO.runeTechnologium]:j,[a.EO.runeForge]:ie,[a.EO.oriktorium]:be,[a.EO.magmaForge]:O,[a.EO.disruptionChamber]:f,[a.EO.megalith]:L,[a.EO.crystalRefinery]:g,[a.EO.deuteriumSynthesiser]:F,[a.EO.mineralResearchCentre]:k,[a.EO.advancedRecyclingPlant]:Ce,[a.EO.assemblyLine]:me,[a.EO.fusionCellFactory]:pe,[a.EO.roboticsResearchCentre]:V,[a.EO.updateNetwork]:he,[a.EO.quantumComputerCentre]:Ee,[a.EO.automatisedAssemblyCentre]:Re,[a.EO.highPerformanceTransformer]:d,[a.EO.microchipAssemblyLine]:we,[a.EO.productionAssemblyHall]:Te,[a.EO.highPerformanceSynthesiser]:y,[a.EO.chipMassProduction]:x,[a.EO.nanoRepairBots]:ke,[a.EO.sanctuary]:Se,[a.EO.antimatterCondenser]:ve,[a.EO.vortexChamber]:G,[a.EO.hallsOfRealisation]:De,[a.EO.forumOfTranscendence]:je,[a.EO.antimatterConvector]:Ve,[a.EO.cloningLaboratory]:Ge,[a.EO.chrysalisAccelerator]:ze,[a.EO.bioModifier]:Je,[a.EO.psionicModulator]:Ue,[a.EO.shipManufacturingHall]:Ze,[a.EO.supraRefractor]:We}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,