"use strict";(globalThis["webpackChunkogame_tracker"]=globalThis["webpackChunkogame_tracker"]||[]).push([[1986],{7592:(e,s,t)=>{t.r(s),t.d(s,{default:()=>M});var r=function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("lifeform-bonuses-breakdown",{attrs:{types:e.bonusTypes,technologies:e.techs,planets:e.planets,limits:e.limits}})},i=[],o=t(655),n=t(147),l=t(3418),a=t(4846),u=t(9751),p=t(8395),c=t(1786),f=t(4028),h=t(3894),d=t(5424),m=t(7848),b=t(7377);let g=class extends f.w3{bonusTypes=[{key:"resources",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.expeditionFinds.resources},{key:"ships",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.expeditionFinds.ships},{key:"darkMatter",label:this.$i18n.$t.ogame.premium.darkMatter},{key:"fleetLoss",label:this.$i18n.$t.extension.empire.lifeforms.researchBonuses.expeditionFinds.fleetLoss}];technologies=[...a.f1,...a.uv];techs=this.technologies.map((e=>e.type));get limits(){const e=(0,m.K)({type:b.f.ExpeditionBonus,event:d.r.resources}),s=(0,m.K)({type:b.f.ExpeditionBonus,event:d.r.fleet}),t=(0,m.K)({type:b.f.ExpeditionBonus,event:d.r.darkMatter}),r=(0,m.K)({type:b.f.ExpeditionEventProbabilityBonus,event:d.r.lostFleet});return{resources:s=>null!=e?Math.min(s,e):s,ships:e=>null!=s?Math.min(e,s):e,darkMatter:e=>null!=t?Math.min(e,t):e,fleetLoss:e=>null!=r?Math.max(e,-r):e}}get planets(){return(0,u.r)(p.p.empire.planetOrder.map((e=>p.p.empire.planets[e])).filter((e=>!e.isMoon)),(e=>e.id),(e=>this.techs.map((s=>{const t=a.dy[s],r=this.getPlanetBonus(t,e);return{planet:e,technologyType:s,bonuses:(0,u.a)(["resources","ships","darkMatter","fleetLoss"],(e=>({base:r.base[e],buildings:r.buildings[e],level:r.level[e],total:r.total[e]})))}}))))}get experience(){return p.p.lifeformExperience}getPlanetBonus(e,s){const t={base:{resources:0,ships:0,darkMatter:0,fleetLoss:0},level:{resources:0,ships:0,darkMatter:0,fleetLoss:0},buildings:{resources:0,ships:0,darkMatter:0,fleetLoss:0},buildingsBoost:0,total:{resources:0,ships:0,darkMatter:0,fleetLoss:0}};if(s.activeLifeform==l.e5.none||!s.activeLifeformTechnologies.includes(e.type))return t;const r=Math.min((0,c.io)(s),(0,m.K)({type:b.f.LifeformResearchBonusBoost})??Number.MAX_SAFE_INTEGER);t.buildingsBoost+=r;const i={resources:d.r.resources,ships:d.r.fleet,darkMatter:d.r.darkMatter,fleetLoss:d.r.lostFleet};return Object.entries(i).forEach((i=>{const[o,l]=i,a="getExpeditionBonus"in e?e.getExpeditionBonus(l,s.lifeformTechnologies[e.type]):e.getExpeditionEventProbabilityBonus(l,s.lifeformTechnologies[e.type]),u=a*(0,n.g1)(this.experience[s.activeLifeform]),p=a*r,c=a+u+p;t.base[o]+=a,t.level[o]+=u,t.buildings[o]+=p,t.total[o]+=c})),t}};g=(0,o.gn)([(0,f.wA)({components:{LifeformBonusesBreakdown:h.Z}})],g);const k=g,y=k;var x=t(1001),B=(0,x.Z)(y,r,i,!1,null,null,null);const M=B.exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,