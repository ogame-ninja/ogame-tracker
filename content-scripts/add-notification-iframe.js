(()=>{"use strict";function e(e,t=10){const n=parseInt(e,t);if(isNaN(n))throw new Error(`'${e}' is not a valid integer value`);return n}function t(e,t){if(null!=t)throw{message:e,data:t};throw new Error("[OGame Tracker] "+e)}const n=document.createElement("iframe");n.id="ogame-tracker-notifications__v2",n.src=function(){const n=chrome.runtime.getURL("/views/notifications.html");var a=function(){const n=function(){const e=function(){const e={};return document.cookie.split(";").forEach((t=>{const[n,a]=t.split("=").map((e=>decodeURIComponent(e.trim())));e[n]=a})),e}().oglocale;return null==e||"undefined"==e?document.querySelector('meta[name="ogame-language"]')?.content??t("Cannot find language meta tag"):e}(),a=(document.querySelector('meta[name="ogame-universe"]')?.content??t("Cannot find universe meta tag")).split(".")[0].split("-"),r=a[0].replace(/^s/,""),o=a[1];return/^\d+$/.test(r)||t("Found ogame universe tag but failed to extract server id from it"),{language:o,userLanguage:n,serverId:e(r,10),playerId:e(document.querySelector('meta[name="ogame-player-id"]')?.content??t("Cannot find player id meta tag"),10)}}();const r={player:a.playerId.toString(),language:a.language,server:a.serverId.toString()};return`${n}?${new URLSearchParams(r)}`}(),document.body.append(n),window.addEventListener("message",(e=>{"ogame-tracker/notification-window-resize"==e.data?.type&&(n.style.setProperty("--width",e.data.width),n.style.setProperty("--height",e.data.height))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,